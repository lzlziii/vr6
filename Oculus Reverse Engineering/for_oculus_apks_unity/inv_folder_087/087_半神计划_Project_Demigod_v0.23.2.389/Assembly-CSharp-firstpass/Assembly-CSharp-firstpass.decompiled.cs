using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Chronos;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using DarkTonic.MasterAudio;
using ES3Internal;
using ES3Types;
using FluffyUnderware.Curvy.Controllers;
using FluffyUnderware.Curvy.Generator;
using FluffyUnderware.Curvy.Generator.Modules;
using FluffyUnderware.Curvy.Pools;
using FluffyUnderware.Curvy.ThirdParty.LibTessDotNet;
using FluffyUnderware.DevTools;
using HexabodyVR.PlayerController;
using HexabodyVR.SampleScene;
using HurricaneVR.Framework.Shared;
using Il2CppDummyDll;
using JetBrains.Annotations;
using RootMotion.Dynamics;
using TMPro;
using ToolBuddy.Pooling.Collections;
using ToolBuddy.Pooling.Pools;
using ToolBuddy.ThirdParty.VectorGraphics;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.UI;
using UnityEngine.XR;
using UnityStandardAssets.Utility;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A23D0", Offset = "0x10A23D0")]
internal sealed class <>f__AnonymousType0<<assembly>j__TPar, <type>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD350", Offset = "0x10AD350")]
	private readonly <assembly>j__TPar <assembly>i__Field;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD364", Offset = "0x10AD364")]
	private readonly <type>j__TPar <type>i__Field;

	[Token(Token = "0x17000001")]
	public <assembly>j__TPar assembly
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<assembly>j__TPar)null;
		}
	}

	[Token(Token = "0x17000002")]
	public <type>j__TPar type
	{
		[Token(Token = "0x6000002")]
		get
		{
			return (<type>j__TPar)null;
		}
	}

	[Token(Token = "0x6000003")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<assembly>j__TPar assembly, <type>j__TPar type)
	{
	}

	[Token(Token = "0x6000004")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000006")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A23E0", Offset = "0x10A23E0")]
internal sealed class <>f__AnonymousType1<<A>j__TPar, <B>j__TPar, <C>j__TPar, <D>j__TPar>
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD378", Offset = "0x10AD378")]
	private readonly <A>j__TPar <A>i__Field;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD38C", Offset = "0x10AD38C")]
	private readonly <B>j__TPar <B>i__Field;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD3A0", Offset = "0x10AD3A0")]
	private readonly <C>j__TPar <C>i__Field;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD3B4", Offset = "0x10AD3B4")]
	private readonly <D>j__TPar <D>i__Field;

	[Token(Token = "0x17000003")]
	public <A>j__TPar A
	{
		[Token(Token = "0x6000007")]
		get
		{
			return (<A>j__TPar)null;
		}
	}

	[Token(Token = "0x17000004")]
	public <B>j__TPar B
	{
		[Token(Token = "0x6000008")]
		get
		{
			return (<B>j__TPar)null;
		}
	}

	[Token(Token = "0x17000005")]
	public <C>j__TPar C
	{
		[Token(Token = "0x6000009")]
		get
		{
			return (<C>j__TPar)null;
		}
	}

	[Token(Token = "0x17000006")]
	public <D>j__TPar D
	{
		[Token(Token = "0x600000A")]
		get
		{
			return (<D>j__TPar)null;
		}
	}

	[Token(Token = "0x600000B")]
	[DebuggerHidden]
	public <>f__AnonymousType1(<A>j__TPar A, <B>j__TPar B, <C>j__TPar C, <D>j__TPar D)
	{
	}

	[Token(Token = "0x600000C")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x600000D")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x600000E")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A23F0", Offset = "0x10A23F0")]
internal sealed class <>f__AnonymousType2<<A>j__TPar, <B>j__TPar, <C>j__TPar, <D>j__TPar, <E>j__TPar>
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD3C8", Offset = "0x10AD3C8")]
	private readonly <A>j__TPar <A>i__Field;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD3DC", Offset = "0x10AD3DC")]
	private readonly <B>j__TPar <B>i__Field;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD3F0", Offset = "0x10AD3F0")]
	private readonly <C>j__TPar <C>i__Field;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD404", Offset = "0x10AD404")]
	private readonly <D>j__TPar <D>i__Field;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x10AD418", Offset = "0x10AD418")]
	private readonly <E>j__TPar <E>i__Field;

	[Token(Token = "0x17000007")]
	public <A>j__TPar A
	{
		[Token(Token = "0x600000F")]
		get
		{
			return (<A>j__TPar)null;
		}
	}

	[Token(Token = "0x17000008")]
	public <B>j__TPar B
	{
		[Token(Token = "0x6000010")]
		get
		{
			return (<B>j__TPar)null;
		}
	}

	[Token(Token = "0x17000009")]
	public <C>j__TPar C
	{
		[Token(Token = "0x6000011")]
		get
		{
			return (<C>j__TPar)null;
		}
	}

	[Token(Token = "0x1700000A")]
	public <D>j__TPar D
	{
		[Token(Token = "0x6000012")]
		get
		{
			return (<D>j__TPar)null;
		}
	}

	[Token(Token = "0x1700000B")]
	public <E>j__TPar E
	{
		[Token(Token = "0x6000013")]
		get
		{
			return (<E>j__TPar)null;
		}
	}

	[Token(Token = "0x6000014")]
	[DebuggerHidden]
	public <>f__AnonymousType2(<A>j__TPar A, <B>j__TPar B, <C>j__TPar C, <D>j__TPar D, <E>j__TPar E)
	{
	}

	[Token(Token = "0x6000015")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000016")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000017")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000005")]
public static class AudioClipOptimizer
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<int, string> AudioClipNameByInstanceId;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x20069DC", Offset = "0x20069DC", VA = "0x20069DC")]
	public static string CachedName(this AudioClip clip)
	{
		return null;
	}
}
[Token(Token = "0x2000006")]
public static class MasterAudioReferenceHolder
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static MasterAudio MasterAudio;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x3122150", Offset = "0x3122150", VA = "0x3122150")]
	[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x10C035C", Offset = "0x10C035C")]
	public static void ThisMethodWillBeCalledOnceAtTheStartOfTheProgram()
	{
	}
}
[Token(Token = "0x2000007")]
[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10A2410", Offset = "0x10A2410")]
public class ListenerFollower : MonoBehaviour
{
	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _transToFollow;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x1700000C")]
	public GameObject GameObj
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x15BB104", Offset = "0x15BB104", VA = "0x15BB104")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public Transform Trans
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x15BACC0", Offset = "0x15BACC0", VA = "0x15BACC0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x15BAA5C", Offset = "0x15BAA5C", VA = "0x15BAA5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x15BAA60", Offset = "0x15BAA60", VA = "0x15BAA60")]
	public void StartFollowing(Transform transToFollow, float trigRadius)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x15BAAA8", Offset = "0x15BAAA8", VA = "0x15BAAA8")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x15BAB6C", Offset = "0x15BAB6C", VA = "0x15BAB6C")]
	private void BatchOcclusionRaycasts()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x15BB1A4", Offset = "0x15BB1A4", VA = "0x15BB1A4")]
	public ListenerFollower()
	{
	}
}
[Token(Token = "0x2000008")]
public static class ResonanceAudioHelper
{
	[Token(Token = "0x1700000E")]
	public static bool ResonanceAudioOptionExists
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x1CC2C4C", Offset = "0x1CC2C4C", VA = "0x1CC2C4C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x1CC2C54", Offset = "0x1CC2C54", VA = "0x1CC2C54")]
	public static bool DarkTonicResonanceAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x1CC2C5C", Offset = "0x1CC2C5C", VA = "0x1CC2C5C")]
	public static void AddResonanceAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x1CC2C60", Offset = "0x1CC2C60", VA = "0x1CC2C60")]
	public static void AddResonanceAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x1CC2C64", Offset = "0x1CC2C64", VA = "0x1CC2C64")]
	public static void RemoveResonanceAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x1CC2C68", Offset = "0x1CC2C68", VA = "0x1CC2C68")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x1CC2C6C", Offset = "0x1CC2C6C", VA = "0x1CC2C6C")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x1CC2C70", Offset = "0x1CC2C70", VA = "0x1CC2C70")]
	public static void CopyResonanceAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x2000009")]
public class TransformFollower : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AD42C", Offset = "0x10AD42C")]
	public Transform RuntimeFollowingTransform;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string _soundType;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _variationName;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _willFollowSource;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _isInsideTrigger;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool _hasPlayedSound;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _playVolume;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _positionAtClosestColliderPoint;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private MasterAudio.AmbientSoundExitMode _exitMode;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _exitFadeTime;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private MasterAudio.AmbientSoundReEnterMode _reEnterMode;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _reEnterFadeTime;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 _lastListenerPos;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private PlaySoundResult playingVariation;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PlaySoundResult fadingVariation;

	[Token(Token = "0x1700000F")]
	public GameObject GameObj
	{
		[Token(Token = "0x6000033")]
		[Address(RVA = "0x2DC15B8", Offset = "0x2DC15B8", VA = "0x2DC15B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public Transform Trans
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0x2DC1BE8", Offset = "0x2DC1BE8", VA = "0x2DC1BE8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x2DC0FA8", Offset = "0x2DC0FA8", VA = "0x2DC0FA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x2DC0FF4", Offset = "0x2DC0FF4", VA = "0x2DC0FF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x2DC11D8", Offset = "0x2DC11D8", VA = "0x2DC11D8")]
	public void UpdateAudioVariation(SoundGroupVariation newVariation)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x2DC11F4", Offset = "0x2DC11F4", VA = "0x2DC11F4")]
	public void StartFollowing(Transform transToFollow, string soundType, string variationName, float volume, float trigRadius, bool willFollowSource, bool positionAtClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x2DC1534", Offset = "0x2DC1534", VA = "0x2DC1534")]
	private void StopFollowing()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x2DC1658", Offset = "0x2DC1658", VA = "0x2DC1658")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x2DC1AF8", Offset = "0x2DC1AF8", VA = "0x2DC1AF8")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x2DC148C", Offset = "0x2DC148C", VA = "0x2DC148C")]
	public bool RecalcClosestColliderPosition(bool forceRecalc = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x2DC1060", Offset = "0x2DC1060", VA = "0x2DC1060")]
	private void PerformTriggerExit()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x2DC1C88", Offset = "0x2DC1C88", VA = "0x2DC1C88")]
	public TransformFollower()
	{
	}
}
[Token(Token = "0x200000A")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2424", Offset = "0x10A2424")]
public class ES3Serializable : Attribute
{
	[Token(Token = "0x6000036")]
	[Address(RVA = "0x3F89550", Offset = "0x3F89550", VA = "0x3F89550")]
	public ES3Serializable()
	{
	}
}
[Token(Token = "0x200000B")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2438", Offset = "0x10A2438")]
public class ES3NonSerializable : Attribute
{
	[Token(Token = "0x6000037")]
	[Address(RVA = "0x280FAC4", Offset = "0x280FAC4", VA = "0x280FAC4")]
	public ES3NonSerializable()
	{
	}
}
[Token(Token = "0x200000C")]
public class ES3AutoSave : MonoBehaviour, ISerializationCallbackReceiver
{
	[Serializable]
	[Token(Token = "0x200000D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A244C", Offset = "0x10A244C")]
	private sealed class <>c
	{
		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<UnityEngine.Component> <>9__13_0;

		[Token(Token = "0x6000040")]
		[Address(RVA = "0x22452EC", Offset = "0x22452EC", VA = "0x22452EC")]
		public <>c()
		{
		}

		[Token(Token = "0x6000041")]
		[Address(RVA = "0x22452F4", Offset = "0x22452F4", VA = "0x22452F4")]
		internal bool <OnAfterDeserialize>b__13_0(UnityEngine.Component c)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool saveLayer;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool saveTag;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool saveName;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool saveHideFlags;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool saveActive;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool saveChildren;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	private bool isQuitting;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UnityEngine.Component> componentsToSave;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x2802168", Offset = "0x2802168", VA = "0x2802168")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x2802174", Offset = "0x2802174", VA = "0x2802174")]
	public void Awake()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x2802628", Offset = "0x2802628", VA = "0x2802628")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x2802634", Offset = "0x2802634", VA = "0x2802634")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x28027B0", Offset = "0x28027B0", VA = "0x28027B0", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x28027B4", Offset = "0x28027B4", VA = "0x28027B4", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x28028E0", Offset = "0x28028E0", VA = "0x28028E0")]
	public ES3AutoSave()
	{
	}
}
[Token(Token = "0x200000E")]
public class ES3AutoSaveMgr : MonoBehaviour
{
	[Token(Token = "0x200000F")]
	public enum LoadEvent
	{
		[Token(Token = "0x4000035")]
		None,
		[Token(Token = "0x4000036")]
		Awake,
		[Token(Token = "0x4000037")]
		Start
	}

	[Token(Token = "0x2000010")]
	public enum SaveEvent
	{
		[Token(Token = "0x4000039")]
		None,
		[Token(Token = "0x400003A")]
		OnApplicationQuit,
		[Token(Token = "0x400003B")]
		OnApplicationPause
	}

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ES3AutoSaveMgr _current;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SaveEvent saveEvent;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LoadEvent loadEvent;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ES3SerializableSettings settings;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HashSet<ES3AutoSave> autoSaves;

	[Token(Token = "0x17000011")]
	public static ES3AutoSaveMgr Current
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x2802270", Offset = "0x2802270", VA = "0x2802270")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000012")]
	public static ES3AutoSaveMgr Instance
	{
		[Token(Token = "0x6000043")]
		[Address(RVA = "0x2802974", Offset = "0x2802974", VA = "0x2802974")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x28029CC", Offset = "0x28029CC", VA = "0x28029CC")]
	public void Save()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x2802C6C", Offset = "0x2802C6C", VA = "0x2802C6C")]
	public void Load()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x2802D90", Offset = "0x2802D90", VA = "0x2802D90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x2802DA4", Offset = "0x2802DA4", VA = "0x2802DA4")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x2802F54", Offset = "0x2802F54", VA = "0x2802F54")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x2802F68", Offset = "0x2802F68", VA = "0x2802F68")]
	private void OnApplicationPause(bool paused)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x2802520", Offset = "0x2802520", VA = "0x2802520")]
	public static void AddAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x28026A8", Offset = "0x28026A8", VA = "0x28026A8")]
	public static void RemoveAutoSave(ES3AutoSave autoSave)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x2802FD4", Offset = "0x2802FD4", VA = "0x2802FD4")]
	public ES3AutoSaveMgr()
	{
	}
}
[Token(Token = "0x2000011")]
public static class ES3
{
	[Token(Token = "0x2000012")]
	public enum Location
	{
		[Token(Token = "0x400003D")]
		File,
		[Token(Token = "0x400003E")]
		PlayerPrefs,
		[Token(Token = "0x400003F")]
		InternalMS,
		[Token(Token = "0x4000040")]
		Resources,
		[Token(Token = "0x4000041")]
		Cache
	}

	[Token(Token = "0x2000013")]
	public enum Directory
	{
		[Token(Token = "0x4000043")]
		PersistentDataPath,
		[Token(Token = "0x4000044")]
		DataPath
	}

	[Token(Token = "0x2000014")]
	public enum EncryptionType
	{
		[Token(Token = "0x4000046")]
		None,
		[Token(Token = "0x4000047")]
		AES
	}

	[Token(Token = "0x2000015")]
	public enum CompressionType
	{
		[Token(Token = "0x4000049")]
		None,
		[Token(Token = "0x400004A")]
		Gzip
	}

	[Token(Token = "0x2000016")]
	public enum Format
	{
		[Token(Token = "0x400004C")]
		JSON
	}

	[Token(Token = "0x2000017")]
	public enum ReferenceMode
	{
		[Token(Token = "0x400004E")]
		ByRef,
		[Token(Token = "0x400004F")]
		ByValue,
		[Token(Token = "0x4000050")]
		ByRefAndValue
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x27F8014", Offset = "0x27F8014", VA = "0x27F8014")]
	public static void Save(string key, object value)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x27F80A4", Offset = "0x27F80A4", VA = "0x27F80A4")]
	public static void Save(string key, object value, string filePath)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x27F8138", Offset = "0x27F8138", VA = "0x27F8138")]
	public static void Save(string key, object value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x27F81D8", Offset = "0x27F81D8", VA = "0x27F81D8")]
	public static void Save(string key, object value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000052")]
	public static void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x6000053")]
	public static void Save<T>(string key, T value, string filePath)
	{
	}

	[Token(Token = "0x6000054")]
	public static void Save<T>(string key, T value, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000055")]
	public static void Save<T>(string key, T value, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x27F823C", Offset = "0x27F823C", VA = "0x27F823C")]
	public static void SaveRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x27F84A0", Offset = "0x27F84A0", VA = "0x27F84A0")]
	public static void SaveRaw(byte[] bytes, string filePath)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x27F8514", Offset = "0x27F8514", VA = "0x27F8514")]
	public static void SaveRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x27F82A4", Offset = "0x27F82A4", VA = "0x27F82A4")]
	public static void SaveRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x27F8F74", Offset = "0x27F8F74", VA = "0x27F8F74")]
	public static void SaveRaw(string str)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x27F9020", Offset = "0x27F9020", VA = "0x27F9020")]
	public static void SaveRaw(string str, string filePath)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x27F9094", Offset = "0x27F9094", VA = "0x27F9094")]
	public static void SaveRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x27F8FDC", Offset = "0x27F8FDC", VA = "0x27F8FDC")]
	public static void SaveRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x27F910C", Offset = "0x27F910C", VA = "0x27F910C")]
	public static void AppendRaw(byte[] bytes)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x27F9378", Offset = "0x27F9378", VA = "0x27F9378")]
	public static void AppendRaw(byte[] bytes, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x27F9174", Offset = "0x27F9174", VA = "0x27F9174")]
	public static void AppendRaw(byte[] bytes, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x27F9470", Offset = "0x27F9470", VA = "0x27F9470")]
	public static void AppendRaw(string str)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x27F9700", Offset = "0x27F9700", VA = "0x27F9700")]
	public static void AppendRaw(string str, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x27F94D8", Offset = "0x27F94D8", VA = "0x27F94D8")]
	public static void AppendRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x27F9778", Offset = "0x27F9778", VA = "0x27F9778")]
	public static void SaveImage(Texture2D texture, string imagePath)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x27F97FC", Offset = "0x27F97FC", VA = "0x27F97FC")]
	public static void SaveImage(Texture2D texture, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x27F97F0", Offset = "0x27F97F0", VA = "0x27F97F0")]
	public static void SaveImage(Texture2D texture, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x27F9A18", Offset = "0x27F9A18", VA = "0x27F9A18")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x27F9A90", Offset = "0x27F9A90", VA = "0x27F9A90")]
	public static void SaveImage(Texture2D texture, int quality, string imagePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x27F9878", Offset = "0x27F9878", VA = "0x27F9878")]
	public static void SaveImage(Texture2D texture, int quality, ES3Settings settings)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x27F9B7C", Offset = "0x27F9B7C", VA = "0x27F9B7C")]
	public static object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x27F9BFC", Offset = "0x27F9BFC", VA = "0x27F9BFC")]
	public static object Load(string key, string filePath)
	{
		return null;
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x27F9C88", Offset = "0x27F9C88", VA = "0x27F9C88")]
	public static object Load(string key, string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x27F9D18", Offset = "0x27F9D18", VA = "0x27F9D18")]
	public static object Load(string key, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	public static T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600006F")]
	public static T Load<T>(string key, string filePath)
	{
		return (T)null;
	}

	[Token(Token = "0x6000070")]
	public static T Load<T>(string key, string filePath, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000071")]
	public static T Load<T>(string key, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000072")]
	public static T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000073")]
	public static T Load<T>(string key, string filePath, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000074")]
	public static T Load<T>(string key, string filePath, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000075")]
	public static T Load<T>(string key, T defaultValue, ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000076")]
	public static void LoadInto<T>(string key, object obj) where T : class
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x27F9D74", Offset = "0x27F9D74", VA = "0x27F9D74")]
	public static void LoadInto(string key, string filePath, object obj)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x27F9E08", Offset = "0x27F9E08", VA = "0x27F9E08")]
	public static void LoadInto(string key, string filePath, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x27F9EA8", Offset = "0x27F9EA8", VA = "0x27F9EA8")]
	public static void LoadInto(string key, object obj, ES3Settings settings)
	{
	}

	[Token(Token = "0x600007A")]
	public static void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x600007B")]
	public static void LoadInto<T>(string key, string filePath, T obj) where T : class
	{
	}

	[Token(Token = "0x600007C")]
	public static void LoadInto<T>(string key, string filePath, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x600007D")]
	public static void LoadInto<T>(string key, T obj, ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x27F9F0C", Offset = "0x27F9F0C", VA = "0x27F9F0C")]
	public static string LoadString(string key, string defaultValue, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x27F9F74", Offset = "0x27F9F74", VA = "0x27F9F74")]
	public static string LoadString(string key, string defaultValue, [Optional] string filePath, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x27F9FE8", Offset = "0x27F9FE8", VA = "0x27F9FE8")]
	public static byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x27FA50C", Offset = "0x27FA50C", VA = "0x27FA50C")]
	public static byte[] LoadRawBytes(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x27FA570", Offset = "0x27FA570", VA = "0x27FA570")]
	public static byte[] LoadRawBytes(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x27FA048", Offset = "0x27FA048", VA = "0x27FA048")]
	public static byte[] LoadRawBytes(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x27FA680", Offset = "0x27FA680", VA = "0x27FA680")]
	public static string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x27FA72C", Offset = "0x27FA72C", VA = "0x27FA72C")]
	public static string LoadRawString(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x27FA790", Offset = "0x27FA790", VA = "0x27FA790")]
	public static string LoadRawString(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x27FA6E0", Offset = "0x27FA6E0", VA = "0x27FA6E0")]
	public static string LoadRawString(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x27FA800", Offset = "0x27FA800", VA = "0x27FA800")]
	public static Texture2D LoadImage(string imagePath)
	{
		return null;
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x27FA87C", Offset = "0x27FA87C", VA = "0x27FA87C")]
	public static Texture2D LoadImage(string imagePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x27FA868", Offset = "0x27FA868", VA = "0x27FA868")]
	public static Texture2D LoadImage(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x27FA8F0", Offset = "0x27FA8F0", VA = "0x27FA8F0")]
	public static Texture2D LoadImage(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x27FA964", Offset = "0x27FA964", VA = "0x27FA964")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType)
	{
		return null;
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x27FA9DC", Offset = "0x27FA9DC", VA = "0x27FA9DC")]
	public static AudioClip LoadAudio(string audioFilePath, AudioType audioType, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	public static byte[] Serialize<T>(T value, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x27FADD8", Offset = "0x27FADD8", VA = "0x27FADD8")]
	internal static byte[] Serialize(object value, ES3Type type, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000090")]
	public static T Deserialize<T>(byte[] bytes, [Optional] ES3Settings settings)
	{
		return (T)null;
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x27FB194", Offset = "0x27FB194", VA = "0x27FB194")]
	internal static object Deserialize(ES3Type type, byte[] bytes, [Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000092")]
	public static void DeserializeInto<T>(byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x6000093")]
	public static void DeserializeInto<T>(ES3Type type, byte[] bytes, T obj, [Optional] ES3Settings settings) where T : class
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x27FB58C", Offset = "0x27FB58C", VA = "0x27FB58C")]
	public static byte[] EncryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x27FB688", Offset = "0x27FB688", VA = "0x27FB688")]
	public static byte[] DecryptBytes(byte[] bytes, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x27FB784", Offset = "0x27FB784", VA = "0x27FB784")]
	public static string EncryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x27FB848", Offset = "0x27FB848", VA = "0x27FB848")]
	public static string DecryptString(string str, [Optional] string password)
	{
		return null;
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x27FB90C", Offset = "0x27FB90C", VA = "0x27FB90C")]
	public static void DeleteFile()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x27FBAE0", Offset = "0x27FBAE0", VA = "0x27FBAE0")]
	public static void DeleteFile(string filePath)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x27FBB44", Offset = "0x27FBB44", VA = "0x27FBB44")]
	public static void DeleteFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x27FB96C", Offset = "0x27FB96C", VA = "0x27FB96C")]
	public static void DeleteFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x27FBCC4", Offset = "0x27FBCC4", VA = "0x27FBCC4")]
	public static void CopyFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x27FC190", Offset = "0x27FC190", VA = "0x27FC190")]
	public static void CopyFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x27FBD54", Offset = "0x27FBD54", VA = "0x27FBD54")]
	public static void CopyFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x27FC628", Offset = "0x27FC628", VA = "0x27FC628")]
	public static void RenameFile(string oldFilePath, string newFilePath)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x27FCB10", Offset = "0x27FCB10", VA = "0x27FCB10")]
	public static void RenameFile(string oldFilePath, string newFilePath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x27FC6B8", Offset = "0x27FC6B8", VA = "0x27FC6B8")]
	public static void RenameFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x27FCBB8", Offset = "0x27FCBB8", VA = "0x27FCBB8")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x27FCF14", Offset = "0x27FCF14", VA = "0x27FCF14")]
	public static void CopyDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x27FCC48", Offset = "0x27FCC48", VA = "0x27FCC48")]
	public static void CopyDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x27FD3B4", Offset = "0x27FD3B4", VA = "0x27FD3B4")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x27FD5FC", Offset = "0x27FD5FC", VA = "0x27FD5FC")]
	public static void RenameDirectory(string oldDirectoryPath, string newDirectoryPath, ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x27FD444", Offset = "0x27FD444", VA = "0x27FD444")]
	public static void RenameDirectory(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x27FD730", Offset = "0x27FD730", VA = "0x27FD730")]
	public static void DeleteDirectory(string directoryPath)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x27FD8D0", Offset = "0x27FD8D0", VA = "0x27FD8D0")]
	public static void DeleteDirectory(string directoryPath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x27FD794", Offset = "0x27FD794", VA = "0x27FD794")]
	public static void DeleteDirectory(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x27FD940", Offset = "0x27FD940", VA = "0x27FD940")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x27FDBC8", Offset = "0x27FDBC8", VA = "0x27FDBC8")]
	public static void DeleteKey(string key, string filePath)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x27FDC3C", Offset = "0x27FDC3C", VA = "0x27FDC3C")]
	public static void DeleteKey(string key, string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x27FD9A8", Offset = "0x27FD9A8", VA = "0x27FD9A8")]
	public static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x27FDF04", Offset = "0x27FDF04", VA = "0x27FDF04")]
	public static bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x27FE12C", Offset = "0x27FE12C", VA = "0x27FE12C")]
	public static bool KeyExists(string key, string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x27FE1A0", Offset = "0x27FE1A0", VA = "0x27FE1A0")]
	public static bool KeyExists(string key, string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x27FDF6C", Offset = "0x27FDF6C", VA = "0x27FDF6C")]
	public static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x27FE37C", Offset = "0x27FE37C", VA = "0x27FE37C")]
	public static bool FileExists()
	{
		return default(bool);
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x27FE3DC", Offset = "0x27FE3DC", VA = "0x27FE3DC")]
	public static bool FileExists(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x27FE440", Offset = "0x27FE440", VA = "0x27FE440")]
	public static bool FileExists(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x27FDD70", Offset = "0x27FDD70", VA = "0x27FDD70")]
	public static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x27FE540", Offset = "0x27FE540", VA = "0x27FE540")]
	public static bool DirectoryExists(string folderPath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x27FE5A4", Offset = "0x27FE5A4", VA = "0x27FE5A4")]
	public static bool DirectoryExists(string folderPath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x27FCFB4", Offset = "0x27FCFB4", VA = "0x27FCFB4")]
	public static bool DirectoryExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x27FE614", Offset = "0x27FE614", VA = "0x27FE614")]
	public static string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x27FEAC4", Offset = "0x27FEAC4", VA = "0x27FEAC4")]
	public static string[] GetKeys(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x27FEB28", Offset = "0x27FEB28", VA = "0x27FEB28")]
	public static string[] GetKeys(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x27FE674", Offset = "0x27FE674", VA = "0x27FE674")]
	public static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x27FED00", Offset = "0x27FED00", VA = "0x27FED00")]
	public static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x27FEDA4", Offset = "0x27FEDA4", VA = "0x27FEDA4")]
	public static string[] GetFiles(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x27FEE08", Offset = "0x27FEE08", VA = "0x27FEE08")]
	public static string[] GetFiles(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x27FD100", Offset = "0x27FD100", VA = "0x27FD100")]
	public static string[] GetFiles(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x27FF040", Offset = "0x27FF040", VA = "0x27FF040")]
	public static string[] GetDirectories()
	{
		return null;
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x27FF0A0", Offset = "0x27FF0A0", VA = "0x27FF0A0")]
	public static string[] GetDirectories(string directoryPath)
	{
		return null;
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x27FF104", Offset = "0x27FF104", VA = "0x27FF104")]
	public static string[] GetDirectories(string directoryPath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x27FD2DC", Offset = "0x27FD2DC", VA = "0x27FD2DC")]
	public static string[] GetDirectories(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x27FF2E8", Offset = "0x27FF2E8", VA = "0x27FF2E8")]
	public static void CreateBackup()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x27FF3EC", Offset = "0x27FF3EC", VA = "0x27FF3EC")]
	public static void CreateBackup(string filePath)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x27FF450", Offset = "0x27FF450", VA = "0x27FF450")]
	public static void CreateBackup(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x27FF348", Offset = "0x27FF348", VA = "0x27FF348")]
	public static void CreateBackup(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x27FF4C0", Offset = "0x27FF4C0", VA = "0x27FF4C0")]
	public static bool RestoreBackup(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x27FF5E4", Offset = "0x27FF5E4", VA = "0x27FF5E4")]
	public static bool RestoreBackup(string filePath, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x27FF524", Offset = "0x27FF524", VA = "0x27FF524")]
	public static bool RestoreBackup(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x27FF654", Offset = "0x27FF654", VA = "0x27FF654")]
	public static DateTime GetTimestamp()
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x27FF864", Offset = "0x27FF864", VA = "0x27FF864")]
	public static DateTime GetTimestamp(string filePath)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x27FF8C8", Offset = "0x27FF8C8", VA = "0x27FF8C8")]
	public static DateTime GetTimestamp(string filePath, ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x27FF6B4", Offset = "0x27FF6B4", VA = "0x27FF6B4")]
	public static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x27FFB00", Offset = "0x27FFB00", VA = "0x27FFB00")]
	public static void StoreCachedFile()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x27FFDC0", Offset = "0x27FFDC0", VA = "0x27FFDC0")]
	public static void StoreCachedFile(string filePath)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x27FFE84", Offset = "0x27FFE84", VA = "0x27FFE84")]
	public static void StoreCachedFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x27FFE24", Offset = "0x27FFE24", VA = "0x27FFE24")]
	public static void StoreCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x27FFEF4", Offset = "0x27FFEF4", VA = "0x27FFEF4")]
	public static void CacheFile()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x27FFFB4", Offset = "0x27FFFB4", VA = "0x27FFFB4")]
	public static void CacheFile(string filePath)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x2800018", Offset = "0x2800018", VA = "0x2800018")]
	public static void CacheFile(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x27FFF54", Offset = "0x27FFF54", VA = "0x27FFF54")]
	public static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x2800248", Offset = "0x2800248", VA = "0x2800248")]
	public static void Init()
	{
	}
}
[Token(Token = "0x2000018")]
public class ES3File
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD464", Offset = "0x10AD464")]
	internal static Dictionary<string, ES3File> cachedFiles;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ES3Data> cache;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool syncWithFile;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DateTime timestamp;

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x2808C38", Offset = "0x2808C38", VA = "0x2808C38")]
	public ES3File()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x2809164", Offset = "0x2809164", VA = "0x2809164")]
	public ES3File(string filePath)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x28091DC", Offset = "0x28091DC", VA = "0x28091DC")]
	public ES3File(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x2803A70", Offset = "0x2803A70", VA = "0x2803A70")]
	public ES3File(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x2809258", Offset = "0x2809258", VA = "0x2809258")]
	public ES3File(bool syncWithFile)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x28092D0", Offset = "0x28092D0", VA = "0x28092D0")]
	public ES3File(string filePath, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x280934C", Offset = "0x280934C", VA = "0x280934C")]
	public ES3File(string filePath, ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x2808CA4", Offset = "0x2808CA4", VA = "0x2808CA4")]
	public ES3File(ES3Settings settings, bool syncWithFile)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x28093D4", Offset = "0x28093D4", VA = "0x28093D4")]
	public ES3File(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x2809504", Offset = "0x2809504", VA = "0x2809504")]
	public void Sync()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x28098D4", Offset = "0x28098D4", VA = "0x28098D4")]
	public void Sync(string filePath, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x280950C", Offset = "0x280950C", VA = "0x280950C")]
	public void Sync([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x280994C", Offset = "0x280994C", VA = "0x280994C")]
	public void Clear()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x28099A0", Offset = "0x28099A0", VA = "0x28099A0")]
	public string[] GetKeys()
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	public void Save<T>(string key, T value)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x27F86B4", Offset = "0x27F86B4", VA = "0x27F86B4")]
	public void SaveRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x27F93F0", Offset = "0x27F93F0", VA = "0x27F93F0")]
	public void AppendRaw(byte[] bytes, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x2809B40", Offset = "0x2809B40", VA = "0x2809B40")]
	public object Load(string key)
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x2809B9C", Offset = "0x2809B9C", VA = "0x2809B9C")]
	public object Load(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	public T Load<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x60000EE")]
	public T Load<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x60000EF")]
	public void LoadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x27FA5E0", Offset = "0x27FA5E0", VA = "0x27FA5E0")]
	public byte[] LoadRawBytes()
	{
		return null;
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x2809C00", Offset = "0x2809C00", VA = "0x2809C00")]
	public string LoadRawString()
	{
		return null;
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x2804B34", Offset = "0x2804B34", VA = "0x2804B34")]
	internal byte[] GetBytes([Optional] ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x2809CAC", Offset = "0x2809CAC", VA = "0x2809CAC")]
	public void DeleteKey(string key)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x2809D10", Offset = "0x2809D10", VA = "0x2809D10")]
	public bool KeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x2809D74", Offset = "0x2809D74", VA = "0x2809D74")]
	public int Size()
	{
		return default(int);
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x2809EA0", Offset = "0x2809EA0", VA = "0x2809EA0")]
	public Type GetKeyType(string key)
	{
		return null;
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x27F858C", Offset = "0x27F858C", VA = "0x27F858C")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0370", Offset = "0x10C0370")]
	internal static ES3File GetOrCreateCachedFile(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x2800088", Offset = "0x2800088", VA = "0x2800088")]
	internal static void CacheFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x27FFB5C", Offset = "0x27FFB5C", VA = "0x27FFB5C")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0384", Offset = "0x10C0384")]
	internal static void Store([Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x27FBC34", Offset = "0x27FBC34", VA = "0x27FBC34")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0398", Offset = "0x10C0398")]
	internal static void RemoveCachedFile(ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x27FC240", Offset = "0x27FC240", VA = "0x27FC240")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C03AC", Offset = "0x10C03AC")]
	internal static void CopyCachedFile(ES3Settings oldSettings, ES3Settings newSettings)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x27FDCB4", Offset = "0x27FDCB4", VA = "0x27FDCB4")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C03C0", Offset = "0x10C03C0")]
	internal static void DeleteKey(string key, ES3Settings settings)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x27FE218", Offset = "0x27FE218", VA = "0x27FE218")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C03D4", Offset = "0x10C03D4")]
	internal static bool KeyExists(string key, ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x27FE4B0", Offset = "0x27FE4B0", VA = "0x27FE4B0")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C03E8", Offset = "0x10C03E8")]
	internal static bool FileExists(ES3Settings settings)
	{
		return default(bool);
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x27FEB98", Offset = "0x27FEB98", VA = "0x27FEB98")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C03FC", Offset = "0x10C03FC")]
	internal static string[] GetKeys(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x27FEE78", Offset = "0x27FEE78", VA = "0x27FEE78")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0410", Offset = "0x10C0410")]
	internal static string[] GetFiles()
	{
		return null;
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x27FFA0C", Offset = "0x27FFA0C", VA = "0x27FFA0C")]
	internal static DateTime GetTimestamp(ES3Settings settings)
	{
		return default(DateTime);
	}
}
[Token(Token = "0x2000019")]
public class ES3InspectorInfo : MonoBehaviour
{
	[Token(Token = "0x6000103")]
	[Address(RVA = "0x280B290", Offset = "0x280B290", VA = "0x280B290")]
	public ES3InspectorInfo()
	{
	}
}
[Token(Token = "0x200001A")]
public class ES3ReferenceMgr : ES3ReferenceMgrBase
{
	[Token(Token = "0x6000104")]
	[Address(RVA = "0x28123F0", Offset = "0x28123F0", VA = "0x28123F0")]
	public ES3ReferenceMgr()
	{
	}
}
[Token(Token = "0x200001B")]
public class ES3Spreadsheet
{
	[Token(Token = "0x200001C")]
	protected struct Index
	{
		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int col;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int row;

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x1DD9E88", Offset = "0x1DD9E88", VA = "0x1DD9E88")]
		public Index(int col, int row)
		{
		}
	}

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int cols;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int rows;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Index, string> cells;

	[Token(Token = "0x4000059")]
	private const string QUOTE = "\"";

	[Token(Token = "0x400005A")]
	private const char QUOTE_CHAR = '"';

	[Token(Token = "0x400005B")]
	private const char COMMA_CHAR = ',';

	[Token(Token = "0x400005C")]
	private const char NEWLINE_CHAR = '\n';

	[Token(Token = "0x400005D")]
	private const string ESCAPED_QUOTE = "\"\"";

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static char[] CHARS_TO_ESCAPE;

	[Token(Token = "0x17000013")]
	public int ColumnCount
	{
		[Token(Token = "0x6000105")]
		[Address(RVA = "0x3F8A9C8", Offset = "0x3F8A9C8", VA = "0x3F8A9C8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000014")]
	public int RowCount
	{
		[Token(Token = "0x6000106")]
		[Address(RVA = "0x3F8A9D0", Offset = "0x3F8A9D0", VA = "0x3F8A9D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000107")]
	public void SetCell<T>(int col, int row, T value)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x3F8A9D8", Offset = "0x3F8A9D8", VA = "0x3F8A9D8")]
	private void SetCellString(int col, int row, string value)
	{
	}

	[Token(Token = "0x6000109")]
	public T GetCell<T>(int col, int row)
	{
		return (T)null;
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x3F8AA98", Offset = "0x3F8AA98", VA = "0x3F8AA98")]
	internal object GetCell(Type type, int col, int row)
	{
		return null;
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x3F8B13C", Offset = "0x3F8B13C", VA = "0x3F8B13C")]
	public void Load(string filePath)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x3F8B1E8", Offset = "0x3F8B1E8", VA = "0x3F8B1E8")]
	public void Load(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x3F8B1B8", Offset = "0x3F8B1B8", VA = "0x3F8B1B8")]
	public void Load(ES3Settings settings)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x3F8B990", Offset = "0x3F8B990", VA = "0x3F8B990")]
	public void LoadRaw(string str)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x3F8BA64", Offset = "0x3F8BA64", VA = "0x3F8BA64")]
	public void LoadRaw(string str, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x3F8B6BC", Offset = "0x3F8B6BC", VA = "0x3F8B6BC")]
	private void Load(Stream stream, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x3F8BB04", Offset = "0x3F8BB04", VA = "0x3F8BB04")]
	public void Save(string filePath)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x3F8BEC0", Offset = "0x3F8BEC0", VA = "0x3F8BEC0")]
	public void Save(string filePath, ES3Settings settings)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x3F8BF38", Offset = "0x3F8BF38", VA = "0x3F8BF38")]
	public void Save(ES3Settings settings)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x3F8BF40", Offset = "0x3F8BF40", VA = "0x3F8BF40")]
	public void Save(string filePath, bool append)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x3F8BFB8", Offset = "0x3F8BFB8", VA = "0x3F8BFB8")]
	public void Save(string filePath, ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x3F8BB78", Offset = "0x3F8BB78", VA = "0x3F8BB78")]
	public void Save(ES3Settings settings, bool append)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x3F8C1F8", Offset = "0x3F8C1F8", VA = "0x3F8C1F8")]
	private static string Escape(string str, bool isAlreadyWrappedInQuotes = false)
	{
		return null;
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x3F8C314", Offset = "0x3F8C314", VA = "0x3F8C314")]
	private static string Unescape(string str)
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x3F8C03C", Offset = "0x3F8C03C", VA = "0x3F8C03C")]
	private string[,] ToArray()
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x3F8C3F8", Offset = "0x3F8C3F8", VA = "0x3F8C3F8")]
	public ES3Spreadsheet()
	{
	}
}
[Token(Token = "0x200001D")]
public abstract class ES3Reader : IDisposable
{
	[Token(Token = "0x200001E")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10A245C", Offset = "0x10A245C")]
	public class ES3ReaderPropertyEnumerator
	{
		[Token(Token = "0x200001F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2470", Offset = "0x10A2470")]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderPropertyEnumerator <>4__this;

			[Token(Token = "0x17000017")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000160")]
				[Address(RVA = "0x1DE7198", Offset = "0x1DE7198", VA = "0x1DE7198", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000018")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000162")]
				[Address(RVA = "0x1DE71E0", Offset = "0x1DE71E0", VA = "0x1DE71E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600015D")]
			[Address(RVA = "0x1DD9330", Offset = "0x1DD9330", VA = "0x1DD9330")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600015E")]
			[Address(RVA = "0x1DE70E0", Offset = "0x1DE70E0", VA = "0x1DE70E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600015F")]
			[Address(RVA = "0x1DE70E4", Offset = "0x1DE70E4", VA = "0x1DE70E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000161")]
			[Address(RVA = "0x1DE71A0", Offset = "0x1DE71A0", VA = "0x1DE71A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1DD9284", Offset = "0x1DD9284", VA = "0x1DD9284")]
		public ES3ReaderPropertyEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x1DD92B8", Offset = "0x1DD92B8", VA = "0x1DD92B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C04C4", Offset = "0x10C04C4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000020")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10A2480", Offset = "0x10A2480")]
	public class ES3ReaderRawEnumerator
	{
		[Token(Token = "0x2000021")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2494", Offset = "0x10A2494")]
		private sealed class <GetEnumerator>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400006A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400006B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3ReaderRawEnumerator <>4__this;

			[Token(Token = "0x17000019")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000168")]
				[Address(RVA = "0x1DE73BC", Offset = "0x1DE73BC", VA = "0x1DE73BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700001A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600016A")]
				[Address(RVA = "0x1DE7404", Offset = "0x1DE7404", VA = "0x1DE7404", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000165")]
			[Address(RVA = "0x1DD9408", Offset = "0x1DD9408", VA = "0x1DD9408")]
			[DebuggerHidden]
			public <GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000166")]
			[Address(RVA = "0x1DE71E8", Offset = "0x1DE71E8", VA = "0x1DE71E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000167")]
			[Address(RVA = "0x1DE71EC", Offset = "0x1DE71EC", VA = "0x1DE71EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000169")]
			[Address(RVA = "0x1DE73C4", Offset = "0x1DE73C4", VA = "0x1DE73C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Reader reader;

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x1DD935C", Offset = "0x1DD935C", VA = "0x1DD935C")]
		public ES3ReaderRawEnumerator(ES3Reader reader)
		{
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x1DD9390", Offset = "0x1DD9390", VA = "0x1DD9390")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C0574", Offset = "0x10C0574")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int serializationDepth;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal string overridePropertiesName;

	[Token(Token = "0x17000015")]
	public virtual ES3ReaderPropertyEnumerator Properties
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0x2811AC8", Offset = "0x2811AC8", VA = "0x2811AC8", Slot = "39")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000016")]
	internal virtual ES3ReaderRawEnumerator RawEnumerator
	{
		[Token(Token = "0x6000141")]
		[Address(RVA = "0x2811B28", Offset = "0x2811B28", VA = "0x2811B28", Slot = "40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600011D")]
	internal abstract int Read_int();

	[Token(Token = "0x600011E")]
	internal abstract float Read_float();

	[Token(Token = "0x600011F")]
	internal abstract bool Read_bool();

	[Token(Token = "0x6000120")]
	internal abstract char Read_char();

	[Token(Token = "0x6000121")]
	internal abstract decimal Read_decimal();

	[Token(Token = "0x6000122")]
	internal abstract double Read_double();

	[Token(Token = "0x6000123")]
	internal abstract long Read_long();

	[Token(Token = "0x6000124")]
	internal abstract ulong Read_ulong();

	[Token(Token = "0x6000125")]
	internal abstract byte Read_byte();

	[Token(Token = "0x6000126")]
	internal abstract sbyte Read_sbyte();

	[Token(Token = "0x6000127")]
	internal abstract short Read_short();

	[Token(Token = "0x6000128")]
	internal abstract ushort Read_ushort();

	[Token(Token = "0x6000129")]
	internal abstract uint Read_uint();

	[Token(Token = "0x600012A")]
	internal abstract string Read_string();

	[Token(Token = "0x600012B")]
	internal abstract byte[] Read_byteArray();

	[Token(Token = "0x600012C")]
	internal abstract long Read_ref();

	[Token(Token = "0x600012D")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0424", Offset = "0x10C0424")]
	public abstract string ReadPropertyName();

	[Token(Token = "0x600012E")]
	protected abstract Type ReadKeyPrefix(bool ignore = false);

	[Token(Token = "0x600012F")]
	protected abstract void ReadKeySuffix();

	[Token(Token = "0x6000130")]
	internal abstract byte[] ReadElement(bool skip = false);

	[Token(Token = "0x6000131")]
	public abstract void Dispose();

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x2811A04", Offset = "0x2811A04", VA = "0x2811A04", Slot = "26")]
	internal virtual bool Goto(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x280C6DC", Offset = "0x280C6DC", VA = "0x280C6DC", Slot = "27")]
	internal virtual bool StartReadObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x280CA00", Offset = "0x280CA00", VA = "0x280CA00", Slot = "28")]
	internal virtual void EndReadObject()
	{
	}

	[Token(Token = "0x6000135")]
	internal abstract bool StartReadDictionary();

	[Token(Token = "0x6000136")]
	internal abstract void EndReadDictionary();

	[Token(Token = "0x6000137")]
	internal abstract bool StartReadDictionaryKey();

	[Token(Token = "0x6000138")]
	internal abstract void EndReadDictionaryKey();

	[Token(Token = "0x6000139")]
	internal abstract void StartReadDictionaryValue();

	[Token(Token = "0x600013A")]
	internal abstract bool EndReadDictionaryValue();

	[Token(Token = "0x600013B")]
	internal abstract bool StartReadCollection();

	[Token(Token = "0x600013C")]
	internal abstract void EndReadCollection();

	[Token(Token = "0x600013D")]
	internal abstract bool StartReadCollectionItem();

	[Token(Token = "0x600013E")]
	internal abstract bool EndReadCollectionItem();

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x280B414", Offset = "0x280B414", VA = "0x280B414")]
	internal ES3Reader(ES3Settings settings, bool readHeaderAndFooter = true)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x2811B88", Offset = "0x2811B88", VA = "0x2811B88", Slot = "41")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0438", Offset = "0x10C0438")]
	public virtual void Skip()
	{
	}

	[Token(Token = "0x6000143")]
	public virtual T Read<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000144")]
	public virtual void ReadInto<T>(object obj)
	{
	}

	[Token(Token = "0x6000145")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C044C", Offset = "0x10C044C")]
	public T ReadProperty<T>()
	{
		return (T)null;
	}

	[Token(Token = "0x6000146")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0460", Offset = "0x10C0460")]
	public T ReadProperty<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x2811B9C", Offset = "0x2811B9C", VA = "0x2811B9C")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0474", Offset = "0x10C0474")]
	public long ReadRefProperty()
	{
		return default(long);
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x2811BD8", Offset = "0x2811BD8", VA = "0x2811BD8")]
	internal Type ReadType()
	{
		return null;
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x2811CB8", Offset = "0x2811CB8", VA = "0x2811CB8")]
	public void SetPrivateProperty(string name, object value, object objectContainingProperty)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x2811EE0", Offset = "0x2811EE0", VA = "0x2811EE0")]
	public void SetPrivateField(string name, object value, object objectContainingField)
	{
	}

	[Token(Token = "0x600014B")]
	public virtual T Read<T>(string key)
	{
		return (T)null;
	}

	[Token(Token = "0x600014C")]
	public virtual T Read<T>(string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x600014D")]
	public virtual void ReadInto<T>(string key, T obj) where T : class
	{
	}

	[Token(Token = "0x600014E")]
	protected virtual void ReadObject<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x600014F")]
	protected virtual T ReadObject<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000150")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0488", Offset = "0x10C0488")]
	public virtual T Read<T>(ES3Type type)
	{
		return (T)null;
	}

	[Token(Token = "0x6000151")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C049C", Offset = "0x10C049C")]
	public virtual void ReadInto<T>(object obj, ES3Type type)
	{
	}

	[Token(Token = "0x6000152")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C04B0", Offset = "0x10C04B0")]
	internal Type ReadTypeFromHeader<T>()
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x2812108", Offset = "0x2812108", VA = "0x2812108")]
	public static ES3Reader Create()
	{
		return null;
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x2812168", Offset = "0x2812168", VA = "0x2812168")]
	public static ES3Reader Create(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x28121CC", Offset = "0x28121CC", VA = "0x28121CC")]
	public static ES3Reader Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x27FE2E0", Offset = "0x27FE2E0", VA = "0x27FE2E0")]
	public static ES3Reader Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x281223C", Offset = "0x281223C", VA = "0x281223C")]
	public static ES3Reader Create(byte[] bytes)
	{
		return null;
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x2809A70", Offset = "0x2809A70", VA = "0x2809A70")]
	public static ES3Reader Create(byte[] bytes, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x28122A4", Offset = "0x28122A4", VA = "0x28122A4")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x27FB500", Offset = "0x27FB500", VA = "0x27FB500")]
	internal static ES3Reader Create(Stream stream, ES3Settings settings, bool readHeaderAndFooter)
	{
		return null;
	}
}
[Token(Token = "0x2000022")]
public class ES3XMLReader
{
	[Token(Token = "0x600016B")]
	[Address(RVA = "0x3379658", Offset = "0x3379658", VA = "0x3379658")]
	public ES3XMLReader()
	{
	}
}
[Token(Token = "0x2000023")]
public class ES3Defaults : ScriptableObject
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public ES3SerializableSettings settings;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool addMgrToSceneAutomatically;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool autoUpdateReferences;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool addAllPrefabsToManager;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool logDebugInfo;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool logWarnings;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool logErrors;

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x2807E8C", Offset = "0x2807E8C", VA = "0x2807E8C")]
	public ES3Defaults()
	{
	}
}
[Token(Token = "0x2000024")]
public class ES3Settings : ICloneable
{
	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ES3Settings _defaults;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ES3Defaults _defaultSettingsScriptableObject;

	[Token(Token = "0x4000075")]
	private const string defaultSettingsPath = "ES3/ES3Defaults";

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static ES3Settings _unencryptedUncompressedSettings;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string[] resourcesExtensions;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private ES3.Location _location;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string path;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ES3.EncryptionType encryptionType;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ES3.CompressionType compressionType;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string encryptionPassword;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ES3.Directory directory;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ES3.Format format;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool prettyPrint;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int bufferSize;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Encoding encoding;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool saveChildren;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD498", Offset = "0x10AD498")]
	public bool typeChecking;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD4AC", Offset = "0x10AD4AC")]
	public bool safeReflection;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD4C0", Offset = "0x10AD4C0")]
	public ES3.ReferenceMode memberReferenceMode;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD4D4", Offset = "0x10AD4D4")]
	public ES3.ReferenceMode referenceMode;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD4E8", Offset = "0x10AD4E8")]
	public int serializationDepthLimit;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10AD4FC", Offset = "0x10AD4FC")]
	public string[] assemblyNames;

	[Token(Token = "0x1700001B")]
	public static ES3Defaults defaultSettingsScriptableObject
	{
		[Token(Token = "0x600016D")]
		[Address(RVA = "0x3F8995C", Offset = "0x3F8995C", VA = "0x3F8995C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001C")]
	public static ES3Settings defaultSettings
	{
		[Token(Token = "0x600016E")]
		[Address(RVA = "0x3F89A90", Offset = "0x3F89A90", VA = "0x3F89A90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	internal static ES3Settings unencryptedUncompressedSettings
	{
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x3F89BB4", Offset = "0x3F89BB4", VA = "0x3F89BB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001E")]
	public ES3.Location location
	{
		[Token(Token = "0x6000170")]
		[Address(RVA = "0x3F89F4C", Offset = "0x3F89F4C", VA = "0x3F89F4C")]
		get
		{
			return default(ES3.Location);
		}
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x3F89F9C", Offset = "0x3F89F9C", VA = "0x3F89F9C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public string FullPath
	{
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x3F89FA4", Offset = "0x3F89FA4", VA = "0x3F89FA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x3F8A3D8", Offset = "0x3F8A3D8", VA = "0x3F8A3D8")]
	public ES3Settings([Optional] string path, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x3F8A504", Offset = "0x3F8A504", VA = "0x3F8A504")]
	public ES3Settings(string path, params Enum[] enums)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x3F89D80", Offset = "0x3F89D80", VA = "0x3F89D80")]
	public ES3Settings(params Enum[] enums)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x3F8A548", Offset = "0x3F8A548", VA = "0x3F8A548")]
	public ES3Settings(ES3.EncryptionType encryptionType, string encryptionPassword)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x3F8A58C", Offset = "0x3F8A58C", VA = "0x3F8A58C")]
	public ES3Settings(string path, ES3.EncryptionType encryptionType, string encryptionPassword, [Optional] ES3Settings settings)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x3F895BC", Offset = "0x3F895BC", VA = "0x3F895BC")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0624", Offset = "0x10C0624")]
	public ES3Settings(bool applyDefaults)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x3F8A334", Offset = "0x3F8A334", VA = "0x3F8A334")]
	private static bool IsAbsolute(string path)
	{
		return default(bool);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x3F8A5D0", Offset = "0x3F8A5D0", VA = "0x3F8A5D0", Slot = "4")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0638", Offset = "0x10C0638")]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x3F8A43C", Offset = "0x3F8A43C", VA = "0x3F8A43C")]
	private void CopyInto(ES3Settings newSettings)
	{
	}
}
[Serializable]
[Token(Token = "0x2000025")]
[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10A24A4", Offset = "0x10A24A4")]
public class ES3SerializableSettings : ES3Settings
{
	[Token(Token = "0x600017D")]
	[Address(RVA = "0x3F89558", Offset = "0x3F89558", VA = "0x3F89558")]
	public ES3SerializableSettings()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x3F897F4", Offset = "0x3F897F4", VA = "0x3F897F4")]
	public ES3SerializableSettings(bool applyDefaults)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x3F89864", Offset = "0x3F89864", VA = "0x3F89864")]
	public ES3SerializableSettings(string path)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x3F898E4", Offset = "0x3F898E4", VA = "0x3F898E4")]
	public ES3SerializableSettings(string path, ES3.Location location)
	{
	}
}
[Token(Token = "0x2000026")]
public class ES3Ref
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long id;

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x2812344", Offset = "0x2812344", VA = "0x2812344")]
	public ES3Ref(long id)
	{
	}
}
[Token(Token = "0x2000027")]
public class ES3Cloud : ES3WebClass
{
	[Token(Token = "0x2000028")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A24B8", Offset = "0x10A24B8")]
	private sealed class <Sync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C8")]
			[Address(RVA = "0x1DD8E04", Offset = "0x1DD8E04", VA = "0x1DD8E04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CA")]
			[Address(RVA = "0x1DD8E4C", Offset = "0x1DD8E4C", VA = "0x1DD8E4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1DD8C90", Offset = "0x1DD8C90", VA = "0x1DD8C90")]
		[DebuggerHidden]
		public <Sync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1DD8CBC", Offset = "0x1DD8CBC", VA = "0x1DD8CBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x1DD8CC0", Offset = "0x1DD8CC0", VA = "0x1DD8CC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x1DD8E0C", Offset = "0x1DD8E0C", VA = "0x1DD8E0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000029")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A24C8", Offset = "0x10A24C8")]
	private sealed class <UploadFile>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public long fileTimestamp;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte[] bytes;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001CF")]
			[Address(RVA = "0x1DD9234", Offset = "0x1DD9234", VA = "0x1DD9234", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x1DD927C", Offset = "0x1DD927C", VA = "0x1DD927C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x1DD8E54", Offset = "0x1DD8E54", VA = "0x1DD8E54")]
		[DebuggerHidden]
		public <UploadFile>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x1DD8E80", Offset = "0x1DD8E80", VA = "0x1DD8E80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x1DD8F58", Offset = "0x1DD8F58", VA = "0x1DD8F58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x1DD8E9C", Offset = "0x1DD8E9C", VA = "0x1DD8E9C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x1DD923C", Offset = "0x1DD923C", VA = "0x1DD923C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A24D8", Offset = "0x10A24D8")]
	private sealed class <DownloadFile>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3File es3File;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D6")]
			[Address(RVA = "0x2245C20", Offset = "0x2245C20", VA = "0x2245C20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D8")]
			[Address(RVA = "0x2245C68", Offset = "0x2245C68", VA = "0x2245C68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x2245788", Offset = "0x2245788", VA = "0x2245788")]
		[DebuggerHidden]
		public <DownloadFile>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x22457B4", Offset = "0x22457B4", VA = "0x22457B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x224588C", Offset = "0x224588C", VA = "0x224588C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x22457D0", Offset = "0x22457D0", VA = "0x22457D0")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x2245C28", Offset = "0x2245C28", VA = "0x2245C28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A24E8", Offset = "0x10A24E8")]
	private sealed class <DownloadFile>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long timestamp;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001DD")]
			[Address(RVA = "0x22460C0", Offset = "0x22460C0", VA = "0x22460C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001DF")]
			[Address(RVA = "0x2246108", Offset = "0x2246108", VA = "0x2246108", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x2245C70", Offset = "0x2245C70", VA = "0x2245C70")]
		[DebuggerHidden]
		public <DownloadFile>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x2245C9C", Offset = "0x2245C9C", VA = "0x2245C9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x2245D74", Offset = "0x2245D74", VA = "0x2245D74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x2245CB8", Offset = "0x2245CB8", VA = "0x2245CB8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x22460C8", Offset = "0x22460C8", VA = "0x22460C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A24F8", Offset = "0x10A24F8")]
	private sealed class <DeleteFile>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E4")]
			[Address(RVA = "0x2245738", Offset = "0x2245738", VA = "0x2245738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E6")]
			[Address(RVA = "0x2245780", Offset = "0x2245780", VA = "0x2245780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x22453EC", Offset = "0x22453EC", VA = "0x22453EC")]
		[DebuggerHidden]
		public <DeleteFile>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x2245418", Offset = "0x2245418", VA = "0x2245418", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x22454F0", Offset = "0x22454F0", VA = "0x22454F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x2245434", Offset = "0x2245434", VA = "0x2245434")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x2245740", Offset = "0x2245740", VA = "0x2245740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2508", Offset = "0x10A2508")]
	private sealed class <RenameFile>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Settings newSettings;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string user;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string password;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001EB")]
			[Address(RVA = "0x2246C64", Offset = "0x2246C64", VA = "0x2246C64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001ED")]
			[Address(RVA = "0x2246CAC", Offset = "0x2246CAC", VA = "0x2246CAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x22468DC", Offset = "0x22468DC", VA = "0x22468DC")]
		[DebuggerHidden]
		public <RenameFile>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x2246908", Offset = "0x2246908", VA = "0x2246908", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x22469E0", Offset = "0x22469E0", VA = "0x22469E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x2246924", Offset = "0x2246924", VA = "0x2246924")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x2246C6C", Offset = "0x2246C6C", VA = "0x2246C6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2518", Offset = "0x10A2518")]
	private sealed class <DownloadFilenames>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000030")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F2")]
			[Address(RVA = "0x22464A8", Offset = "0x22464A8", VA = "0x22464A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F4")]
			[Address(RVA = "0x22464F0", Offset = "0x22464F0", VA = "0x22464F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x2246110", Offset = "0x2246110", VA = "0x2246110")]
		[DebuggerHidden]
		public <DownloadFilenames>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x224613C", Offset = "0x224613C", VA = "0x224613C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x2246214", Offset = "0x2246214", VA = "0x2246214", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x2246158", Offset = "0x2246158", VA = "0x2246158")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x22464B0", Offset = "0x22464B0", VA = "0x22464B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200002F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2528", Offset = "0x10A2528")]
	private sealed class <SearchFilenames>d__62 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string user;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string password;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string searchPattern;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F9")]
			[Address(RVA = "0x224708C", Offset = "0x224708C", VA = "0x224708C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FB")]
			[Address(RVA = "0x22470D4", Offset = "0x22470D4", VA = "0x22470D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x2246CB4", Offset = "0x2246CB4", VA = "0x2246CB4")]
		[DebuggerHidden]
		public <SearchFilenames>d__62(int <>1__state)
		{
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x2246CE0", Offset = "0x2246CE0", VA = "0x2246CE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x2246DB8", Offset = "0x2246DB8", VA = "0x2246DB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x2246CFC", Offset = "0x2246CFC", VA = "0x2246CFC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x2247094", Offset = "0x2247094", VA = "0x2247094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000030")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2538", Offset = "0x10A2538")]
	private sealed class <DownloadTimestamp>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3Cloud <>4__this;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Settings settings;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string user;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityWebRequest <webRequest>5__2;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000200")]
			[Address(RVA = "0x224688C", Offset = "0x224688C", VA = "0x224688C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000202")]
			[Address(RVA = "0x22468D4", Offset = "0x22468D4", VA = "0x22468D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x22464F8", Offset = "0x22464F8", VA = "0x22464F8")]
		[DebuggerHidden]
		public <DownloadTimestamp>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x2246524", Offset = "0x2246524", VA = "0x2246524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x22465FC", Offset = "0x22465FC", VA = "0x22465FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x2246540", Offset = "0x2246540", VA = "0x2246540")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x2246894", Offset = "0x2246894", VA = "0x2246894", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int timeout;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Encoding encoding;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private byte[] _data;

	[Token(Token = "0x17000020")]
	public byte[] data
	{
		[Token(Token = "0x6000184")]
		[Address(RVA = "0x2803E70", Offset = "0x2803E70", VA = "0x2803E70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public string text
	{
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x2803E78", Offset = "0x2803E78", VA = "0x2803E78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000022")]
	public string[] filenames
	{
		[Token(Token = "0x6000186")]
		[Address(RVA = "0x2803EAC", Offset = "0x2803EAC", VA = "0x2803EAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000023")]
	public DateTime timestamp
	{
		[Token(Token = "0x6000187")]
		[Address(RVA = "0x2803F7C", Offset = "0x2803F7C", VA = "0x2803F7C")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x2803DAC", Offset = "0x2803DAC", VA = "0x2803DAC")]
	public ES3Cloud(string url, string apiKey)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x2803E08", Offset = "0x2803E08", VA = "0x2803E08")]
	public ES3Cloud(string url, string apiKey, int timeout)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x2804100", Offset = "0x2804100", VA = "0x2804100")]
	public IEnumerator Sync()
	{
		return null;
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x2804248", Offset = "0x2804248", VA = "0x2804248")]
	public IEnumerator Sync(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x28042D8", Offset = "0x28042D8", VA = "0x28042D8")]
	public IEnumerator Sync(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x280436C", Offset = "0x280436C", VA = "0x280436C")]
	public IEnumerator Sync(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x28043F8", Offset = "0x28043F8", VA = "0x28043F8")]
	public IEnumerator Sync(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x280448C", Offset = "0x280448C", VA = "0x280448C")]
	public IEnumerator Sync(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x280452C", Offset = "0x280452C", VA = "0x280452C")]
	public IEnumerator Sync(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x2804184", Offset = "0x2804184", VA = "0x2804184")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C064C", Offset = "0x10C064C")]
	private IEnumerator Sync(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x28045BC", Offset = "0x28045BC", VA = "0x28045BC")]
	public IEnumerator UploadFile()
	{
		return null;
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x28046A4", Offset = "0x28046A4", VA = "0x28046A4")]
	public IEnumerator UploadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x2804744", Offset = "0x2804744", VA = "0x2804744")]
	public IEnumerator UploadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x28047E8", Offset = "0x28047E8", VA = "0x28047E8")]
	public IEnumerator UploadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x2804880", Offset = "0x2804880", VA = "0x2804880")]
	public IEnumerator UploadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x2804924", Offset = "0x2804924", VA = "0x2804924")]
	public IEnumerator UploadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x28049D4", Offset = "0x28049D4", VA = "0x28049D4")]
	public IEnumerator UploadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x2804A70", Offset = "0x2804A70", VA = "0x2804A70")]
	public IEnumerator UploadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x280522C", Offset = "0x280522C", VA = "0x280522C")]
	public IEnumerator UploadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x28052F4", Offset = "0x28052F4", VA = "0x28052F4")]
	public IEnumerator UploadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x2804658", Offset = "0x2804658", VA = "0x2804658")]
	public IEnumerator UploadFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x28053B4", Offset = "0x28053B4", VA = "0x28053B4")]
	public IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x2805144", Offset = "0x2805144", VA = "0x2805144")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C06AC", Offset = "0x10C06AC")]
	private IEnumerator UploadFile(byte[] bytes, ES3Settings settings, string user, string password, long fileTimestamp)
	{
		return null;
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x2805418", Offset = "0x2805418", VA = "0x2805418")]
	public IEnumerator DownloadFile()
	{
		return null;
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x280556C", Offset = "0x280556C", VA = "0x280556C")]
	public IEnumerator DownloadFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x2805600", Offset = "0x2805600", VA = "0x2805600")]
	public IEnumerator DownloadFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x2805698", Offset = "0x2805698", VA = "0x2805698")]
	public IEnumerator DownloadFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x2805728", Offset = "0x2805728", VA = "0x2805728")]
	public IEnumerator DownloadFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x28057C0", Offset = "0x28057C0", VA = "0x28057C0")]
	public IEnumerator DownloadFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x2805864", Offset = "0x2805864", VA = "0x2805864")]
	public IEnumerator DownloadFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x28058F8", Offset = "0x28058F8", VA = "0x28058F8")]
	public IEnumerator DownloadFile(ES3File es3File)
	{
		return null;
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x2805A28", Offset = "0x2805A28", VA = "0x2805A28")]
	public IEnumerator DownloadFile(ES3File es3File, string user)
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x2805A90", Offset = "0x2805A90", VA = "0x2805A90")]
	public IEnumerator DownloadFile(ES3File es3File, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x280595C", Offset = "0x280595C", VA = "0x280595C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C070C", Offset = "0x10C070C")]
	private IEnumerator DownloadFile(ES3File es3File, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x28054A0", Offset = "0x28054A0", VA = "0x28054A0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C076C", Offset = "0x10C076C")]
	private IEnumerator DownloadFile(ES3Settings settings, string user, string password, long timestamp)
	{
		return null;
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x2805A98", Offset = "0x2805A98", VA = "0x2805A98")]
	public IEnumerator DeleteFile()
	{
		return null;
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x2805BE0", Offset = "0x2805BE0", VA = "0x2805BE0")]
	public IEnumerator DeleteFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x2805C70", Offset = "0x2805C70", VA = "0x2805C70")]
	public IEnumerator DeleteFile(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x2805D04", Offset = "0x2805D04", VA = "0x2805D04")]
	public IEnumerator DeleteFile(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x2805D90", Offset = "0x2805D90", VA = "0x2805D90")]
	public IEnumerator DeleteFile(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x2805E24", Offset = "0x2805E24", VA = "0x2805E24")]
	public IEnumerator DeleteFile(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x2805EC4", Offset = "0x2805EC4", VA = "0x2805EC4")]
	public IEnumerator DeleteFile(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x2805B1C", Offset = "0x2805B1C", VA = "0x2805B1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C07CC", Offset = "0x10C07CC")]
	private IEnumerator DeleteFile(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x2805F54", Offset = "0x2805F54", VA = "0x2805F54")]
	public IEnumerator RenameFile(string filePath, string newFilePath)
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x28060E8", Offset = "0x28060E8", VA = "0x28060E8")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x28061A8", Offset = "0x28061A8", VA = "0x28061A8")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x2806260", Offset = "0x2806260", VA = "0x2806260")]
	public IEnumerator RenameFile(string filePath, string newFilePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x2806320", Offset = "0x2806320", VA = "0x2806320")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x28063EC", Offset = "0x28063EC", VA = "0x28063EC")]
	public IEnumerator RenameFile(string filePath, string newFilePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x2806010", Offset = "0x2806010", VA = "0x2806010")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C082C", Offset = "0x10C082C")]
	private IEnumerator RenameFile(ES3Settings settings, ES3Settings newSettings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x28064A8", Offset = "0x28064A8", VA = "0x28064A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C088C", Offset = "0x10C088C")]
	public IEnumerator DownloadFilenames(string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x2806550", Offset = "0x2806550", VA = "0x2806550")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C08EC", Offset = "0x10C08EC")]
	public IEnumerator SearchFilenames(string searchPattern, string user = "", string password = "")
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x2806614", Offset = "0x2806614", VA = "0x2806614")]
	public IEnumerator DownloadTimestamp()
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x280675C", Offset = "0x280675C", VA = "0x280675C")]
	public IEnumerator DownloadTimestamp(string filePath)
	{
		return null;
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x28067EC", Offset = "0x28067EC", VA = "0x28067EC")]
	public IEnumerator DownloadTimestamp(string filePath, string user)
	{
		return null;
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x2806880", Offset = "0x2806880", VA = "0x2806880")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x280690C", Offset = "0x280690C", VA = "0x280690C")]
	public IEnumerator DownloadTimestamp(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x28069A0", Offset = "0x28069A0", VA = "0x28069A0")]
	public IEnumerator DownloadTimestamp(string filePath, string user, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x2806A40", Offset = "0x2806A40", VA = "0x2806A40")]
	public IEnumerator DownloadTimestamp(string filePath, string user, string password, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x2806698", Offset = "0x2806698", VA = "0x2806698")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C094C", Offset = "0x10C094C")]
	private IEnumerator DownloadTimestamp(ES3Settings settings, string user, string password)
	{
		return null;
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x2805034", Offset = "0x2805034", VA = "0x2805034")]
	private long DateTimeToUnixTimestamp(DateTime dt)
	{
		return default(long);
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x2806AD0", Offset = "0x2806AD0", VA = "0x2806AD0")]
	private long GetFileTimestamp(ES3Settings settings)
	{
		return default(long);
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x2806AEC", Offset = "0x2806AEC", VA = "0x2806AEC", Slot = "4")]
	protected override void Reset()
	{
	}
}
[Token(Token = "0x2000031")]
public abstract class ES3Writer : IDisposable
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ES3Settings settings;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HashSet<string> keysToDelete;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	internal bool writeHeaderAndFooter;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	internal bool overwriteKeys;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int serializationDepth;

	[Token(Token = "0x6000203")]
	internal abstract void WriteNull();

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x3377278", Offset = "0x3377278", VA = "0x3377278", Slot = "6")]
	internal virtual void StartWriteFile()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x3377288", Offset = "0x3377288", VA = "0x3377288", Slot = "7")]
	internal virtual void EndWriteFile()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x3377298", Offset = "0x3377298", VA = "0x3377298", Slot = "8")]
	internal virtual void StartWriteObject(string name)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x33772A8", Offset = "0x33772A8", VA = "0x33772A8", Slot = "9")]
	internal virtual void EndWriteObject(string name)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x33772B8", Offset = "0x33772B8", VA = "0x33772B8", Slot = "10")]
	internal virtual void StartWriteProperty(string name)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x3377388", Offset = "0x3377388", VA = "0x3377388", Slot = "11")]
	internal virtual void EndWriteProperty(string name)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x337738C", Offset = "0x337738C", VA = "0x337738C", Slot = "12")]
	internal virtual void StartWriteCollection()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x337739C", Offset = "0x337739C", VA = "0x337739C", Slot = "13")]
	internal virtual void EndWriteCollection()
	{
	}

	[Token(Token = "0x600020C")]
	internal abstract void StartWriteCollectionItem(int index);

	[Token(Token = "0x600020D")]
	internal abstract void EndWriteCollectionItem(int index);

	[Token(Token = "0x600020E")]
	internal abstract void StartWriteDictionary();

	[Token(Token = "0x600020F")]
	internal abstract void EndWriteDictionary();

	[Token(Token = "0x6000210")]
	internal abstract void StartWriteDictionaryKey(int index);

	[Token(Token = "0x6000211")]
	internal abstract void EndWriteDictionaryKey(int index);

	[Token(Token = "0x6000212")]
	internal abstract void StartWriteDictionaryValue(int index);

	[Token(Token = "0x6000213")]
	internal abstract void EndWriteDictionaryValue(int index);

	[Token(Token = "0x6000214")]
	public abstract void Dispose();

	[Token(Token = "0x6000215")]
	internal abstract void WriteRawProperty(string name, byte[] bytes);

	[Token(Token = "0x6000216")]
	internal abstract void WritePrimitive(int value);

	[Token(Token = "0x6000217")]
	internal abstract void WritePrimitive(float value);

	[Token(Token = "0x6000218")]
	internal abstract void WritePrimitive(bool value);

	[Token(Token = "0x6000219")]
	internal abstract void WritePrimitive(decimal value);

	[Token(Token = "0x600021A")]
	internal abstract void WritePrimitive(double value);

	[Token(Token = "0x600021B")]
	internal abstract void WritePrimitive(long value);

	[Token(Token = "0x600021C")]
	internal abstract void WritePrimitive(ulong value);

	[Token(Token = "0x600021D")]
	internal abstract void WritePrimitive(uint value);

	[Token(Token = "0x600021E")]
	internal abstract void WritePrimitive(byte value);

	[Token(Token = "0x600021F")]
	internal abstract void WritePrimitive(sbyte value);

	[Token(Token = "0x6000220")]
	internal abstract void WritePrimitive(short value);

	[Token(Token = "0x6000221")]
	internal abstract void WritePrimitive(ushort value);

	[Token(Token = "0x6000222")]
	internal abstract void WritePrimitive(char value);

	[Token(Token = "0x6000223")]
	internal abstract void WritePrimitive(string value);

	[Token(Token = "0x6000224")]
	internal abstract void WritePrimitive(byte[] value);

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x33773AC", Offset = "0x33773AC", VA = "0x33773AC")]
	protected ES3Writer(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x337747C", Offset = "0x337747C", VA = "0x337747C", Slot = "39")]
	internal virtual void Write(string key, Type type, byte[] value)
	{
	}

	[Token(Token = "0x6000227")]
	public virtual void Write<T>(string key, object value)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x3377568", Offset = "0x3377568", VA = "0x3377568", Slot = "41")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0C7C", Offset = "0x10C0C7C")]
	public virtual void Write(Type type, string key, object value)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x33776A4", Offset = "0x33776A4", VA = "0x33776A4", Slot = "42")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0C90", Offset = "0x10C0C90")]
	public virtual void Write(object value, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x3377770", Offset = "0x3377770", VA = "0x3377770", Slot = "43")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0CA4", Offset = "0x10C0CA4")]
	public virtual void Write(object value, ES3Type type, ES3.ReferenceMode memberReferenceMode = ES3.ReferenceMode.ByRef)
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x3377DA4", Offset = "0x3377DA4", VA = "0x3377DA4", Slot = "44")]
	internal virtual void WriteRef(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x3377F1C", Offset = "0x3377F1C", VA = "0x3377F1C", Slot = "45")]
	public virtual void WriteProperty(string name, object value)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x3377F44", Offset = "0x3377F44", VA = "0x3377F44", Slot = "46")]
	public virtual void WriteProperty(string name, object value, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x600022E")]
	public virtual void WriteProperty<T>(string name, object value)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x337807C", Offset = "0x337807C", VA = "0x337807C", Slot = "48")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0CB8", Offset = "0x10C0CB8")]
	public virtual void WriteProperty(string name, object value, ES3Type type)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x33780A4", Offset = "0x33780A4", VA = "0x33780A4", Slot = "49")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0CCC", Offset = "0x10C0CCC")]
	public virtual void WriteProperty(string name, object value, ES3Type type, ES3.ReferenceMode memberReferenceMode)
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x3378140", Offset = "0x3378140", VA = "0x3378140", Slot = "50")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0CE0", Offset = "0x10C0CE0")]
	public virtual void WritePropertyByRef(string name, UnityEngine.Object value)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x3378258", Offset = "0x3378258", VA = "0x3378258")]
	public void WritePrivateProperty(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x3378468", Offset = "0x3378468", VA = "0x3378468")]
	public void WritePrivateField(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x3378678", Offset = "0x3378678", VA = "0x3378678")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0CF4", Offset = "0x10C0CF4")]
	public void WritePrivateProperty(string name, object objectContainingProperty, ES3Type type)
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x3378840", Offset = "0x3378840", VA = "0x3378840")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D08", Offset = "0x10C0D08")]
	public void WritePrivateField(string name, object objectContainingField, ES3Type type)
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x3378A08", Offset = "0x3378A08", VA = "0x3378A08")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D1C", Offset = "0x10C0D1C")]
	public void WritePrivatePropertyByRef(string name, object objectContainingProperty)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x3378C0C", Offset = "0x3378C0C", VA = "0x3378C0C")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D30", Offset = "0x10C0D30")]
	public void WritePrivateFieldByRef(string name, object objectContainingField)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x3376A30", Offset = "0x3376A30", VA = "0x3376A30")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D44", Offset = "0x10C0D44")]
	public void WriteType(Type type)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x3378E10", Offset = "0x3378E10", VA = "0x3378E10")]
	public static ES3Writer Create(string filePath, ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x3378E8C", Offset = "0x3378E8C", VA = "0x3378E8C")]
	public static ES3Writer Create(ES3Settings settings)
	{
		return null;
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x3378E9C", Offset = "0x3378E9C", VA = "0x3378E9C")]
	internal static ES3Writer Create(ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys, bool append)
	{
		return null;
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x3378EFC", Offset = "0x3378EFC", VA = "0x3378EFC")]
	internal static ES3Writer Create(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool overwriteKeys)
	{
		return null;
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x3377FCC", Offset = "0x3377FCC", VA = "0x3377FCC")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D58", Offset = "0x10C0D58")]
	protected bool SerializationDepthLimitExceeded()
	{
		return default(bool);
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x3379080", Offset = "0x3379080", VA = "0x3379080", Slot = "51")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C0D6C", Offset = "0x10C0D6C")]
	public virtual void MarkKeyForDeletion(string key)
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x33790E4", Offset = "0x33790E4", VA = "0x33790E4")]
	protected void Merge()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x3379230", Offset = "0x3379230", VA = "0x3379230")]
	protected void Merge(ES3Reader reader)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x3379560", Offset = "0x3379560", VA = "0x3379560", Slot = "52")]
	public virtual void Save()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x3379574", Offset = "0x3379574", VA = "0x3379574", Slot = "53")]
	public virtual void Save(bool overwriteKeys)
	{
	}
}
[Token(Token = "0x2000032")]
public class ES3XMLWriter
{
	[Token(Token = "0x6000243")]
	[Address(RVA = "0x3379660", Offset = "0x3379660", VA = "0x3379660")]
	public ES3XMLWriter()
	{
	}
}
[Token(Token = "0x2000033")]
public class DoNotDestroyOnLoad_perName : MonoBehaviour
{
	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<string> list;

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x1FF68BC", Offset = "0x1FF68BC", VA = "0x1FF68BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x1FF69B4", Offset = "0x1FF69B4", VA = "0x1FF69B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x1FF6A9C", Offset = "0x1FF6A9C", VA = "0x1FF6A9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x1FF6AA0", Offset = "0x1FF6AA0", VA = "0x1FF6AA0")]
	public DoNotDestroyOnLoad_perName()
	{
	}
}
[Token(Token = "0x2000034")]
public class ExampleCam : MonoBehaviour
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MouseOrbitImproved mouseOrbit;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<MonoBehaviour> ImageEffectsList;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x33804FC", Offset = "0x33804FC", VA = "0x33804FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x3380500", Offset = "0x3380500", VA = "0x3380500")]
	private void Update()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x3380504", Offset = "0x3380504", VA = "0x3380504")]
	public ExampleCam()
	{
	}
}
[Token(Token = "0x2000035")]
public class ExampleListener : MonoBehaviour
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InterfaceAnimManager IAM;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x3380588", Offset = "0x3380588", VA = "0x3380588")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x3380608", Offset = "0x3380608", VA = "0x3380608")]
	private void AddListener()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x33807B0", Offset = "0x33807B0", VA = "0x33807B0")]
	private void RemoveListener()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x3380958", Offset = "0x3380958", VA = "0x3380958")]
	private void HandleOnStartAppear(InterfaceAnimManager _IAM)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x3380A18", Offset = "0x3380A18", VA = "0x3380A18")]
	private void HandleOnStartDisappear(InterfaceAnimManager _IAM)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x3380AD8", Offset = "0x3380AD8", VA = "0x3380AD8")]
	private void HandleOnEndAppear(InterfaceAnimManager _IAM)
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x3380B98", Offset = "0x3380B98", VA = "0x3380B98")]
	private void HandleOnEndDisappear(InterfaceAnimManager _IAM)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x3380C58", Offset = "0x3380C58", VA = "0x3380C58")]
	public ExampleListener()
	{
	}
}
[Token(Token = "0x2000036")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A2548", Offset = "0x10A2548")]
public class ExampleUI : MonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text displayedName;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private InterfaceAnimManager current;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int indexInterface;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InterfaceAnimManager[] holoInterfaceList;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ExampleCam currentCam;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string searchTarget;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string searchCam;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int indexScene;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool allDelaysStatus;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool allImgEffectsStatus;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<string> loadableScenes;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject fullscreenSwith;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioSource audioSource;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x3380C60", Offset = "0x3380C60", VA = "0x3380C60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x3380E5C", Offset = "0x3380E5C", VA = "0x3380E5C")]
	private void playSound()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x3380EFC", Offset = "0x3380EFC", VA = "0x3380EFC")]
	public void DoOutFullscreen()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x3380F34", Offset = "0x3380F34", VA = "0x3380F34")]
	public void DoChangeEnvironment()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x3381408", Offset = "0x3381408", VA = "0x3381408")]
	private void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, LoadSceneMode mod)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x33814CC", Offset = "0x33814CC", VA = "0x33814CC")]
	public void Awake()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x338101C", Offset = "0x338101C", VA = "0x338101C")]
	private void InitCam()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x3381590", Offset = "0x3381590", VA = "0x3381590")]
	public void Update()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x33815C8", Offset = "0x33815C8", VA = "0x33815C8")]
	public void DoSwitchAutoCam()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x3381610", Offset = "0x3381610", VA = "0x3381610")]
	public void DoSwitchCameraEffects()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x3381818", Offset = "0x3381818", VA = "0x3381818")]
	public void DoSwitchAnimDelays()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x3381980", Offset = "0x3381980", VA = "0x3381980")]
	public void DoAppear()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x3381A30", Offset = "0x3381A30", VA = "0x3381A30")]
	public void DoDisappear()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x3381AC0", Offset = "0x3381AC0", VA = "0x3381AC0")]
	public void DoNext()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x3381B3C", Offset = "0x3381B3C", VA = "0x3381B3C")]
	public void DoPrevious()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x3380D30", Offset = "0x3380D30", VA = "0x3380D30")]
	private void CallInterface(InterfaceAnimManager _interface)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x3381BB8", Offset = "0x3381BB8", VA = "0x3381BB8")]
	public void UpdateDisplayedInfo()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x3381C8C", Offset = "0x3381C8C", VA = "0x3381C8C")]
	public ExampleUI()
	{
	}
}
[Token(Token = "0x2000037")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A2580", Offset = "0x10A2580")]
public class ExcelsiorUtils : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSource;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioClip;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text textContent;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Slider slider;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x2F28410", Offset = "0x2F28410", VA = "0x2F28410")]
	private void playSound()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x2F284B8", Offset = "0x2F284B8", VA = "0x2F284B8")]
	public void SetPosition(int _scaleValue)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x2F28524", Offset = "0x2F28524", VA = "0x2F28524")]
	public void SetPositionAndScaleTo(GameObject _object)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x2F285DC", Offset = "0x2F285DC", VA = "0x2F285DC")]
	public void SetUniformScale(int _scaleValue)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x2F28648", Offset = "0x2F28648", VA = "0x2F28648")]
	public void SetUniformWidthHeight(int _widthHeightValue)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x2F286E4", Offset = "0x2F286E4", VA = "0x2F286E4")]
	public void SetImageColor(int _colorID)
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x2F287B4", Offset = "0x2F287B4", VA = "0x2F287B4")]
	public void OpenWebPage()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x2F28808", Offset = "0x2F28808", VA = "0x2F28808")]
	public void GetSliderValue_ToText()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x2F28874", Offset = "0x2F28874", VA = "0x2F28874")]
	public ExcelsiorUtils()
	{
	}
}
[Token(Token = "0x2000038")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A25B8", Offset = "0x10A25B8")]
public delegate void IAM_StartAppear(InterfaceAnimManager _IAM);
[Token(Token = "0x2000039")]
public delegate void IAM_StartDisappear(InterfaceAnimManager _IAM);
[Token(Token = "0x200003A")]
public delegate void IAM_EndAppear(InterfaceAnimManager _IAM);
[Token(Token = "0x200003B")]
public delegate void IAM_EndDisappear(InterfaceAnimManager _IAM);
[Token(Token = "0x200003C")]
public class InterfaceAnimManager : MonoBehaviour
{
	[Token(Token = "0x200003D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A25F0", Offset = "0x10A25F0")]
	private sealed class <Disable_OnDisappearEnd>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InterfaceAnimManager <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000296")]
			[Address(RVA = "0x1DDE4E0", Offset = "0x1DDE4E0", VA = "0x1DDE4E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000298")]
			[Address(RVA = "0x1DDE528", Offset = "0x1DDE528", VA = "0x1DDE528", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x1DDE028", Offset = "0x1DDE028", VA = "0x1DDE028")]
		[DebuggerHidden]
		public <Disable_OnDisappearEnd>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x1DDE054", Offset = "0x1DDE054", VA = "0x1DDE054", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x1DDE058", Offset = "0x1DDE058", VA = "0x1DDE058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x1DDE4E8", Offset = "0x1DDE4E8", VA = "0x1DDE4E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200003E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2600", Offset = "0x10A2600")]
	private sealed class <>c
	{
		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<InterfaceAnmElement, int> <>9__42_0;

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x1DDE008", Offset = "0x1DDE008", VA = "0x1DDE008")]
		public <>c()
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1DDE010", Offset = "0x1DDE010", VA = "0x1DDE010")]
		internal int <UpdateAnimClips>b__42_0(InterfaceAnmElement x)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<InterfaceAnmElement> elementsList;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoStart;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool invertDelays;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool cloneDelays;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float timer;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int timeBetweenLoops;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool testLoop;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool autoLinearAppearDelay;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool forceUnscaledTime;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float appearDelay_SpeedMultiplier;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float disappearDelay_SpeedMultiplier;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CSFHIAnimableState currentState;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool useDelays;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip openSound;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip closeSound;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<InterfaceAnimManager> nestedIAM;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool waitAppear_Nested;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool waitDisappear_Nested;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private InterfaceAnmElement waitElementFullAnim;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<GameObject> objectsToNotEnableOrDisable;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool useInterfaceAsStatic;

	[Token(Token = "0x14000001")]
	public event IAM_StartAppear OnStartAppear
	{
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x15B5B7C", Offset = "0x15B5B7C", VA = "0x15B5B7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0D80", Offset = "0x10C0D80")]
		add
		{
		}
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x15B5C1C", Offset = "0x15B5C1C", VA = "0x15B5C1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0D90", Offset = "0x10C0D90")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event IAM_StartDisappear OnStartDisappear
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x15B5CBC", Offset = "0x15B5CBC", VA = "0x15B5CBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DA0", Offset = "0x10C0DA0")]
		add
		{
		}
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x15B5D5C", Offset = "0x15B5D5C", VA = "0x15B5D5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DB0", Offset = "0x10C0DB0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event IAM_EndAppear OnEndAppear
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x15B5DFC", Offset = "0x15B5DFC", VA = "0x15B5DFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DC0", Offset = "0x10C0DC0")]
		add
		{
		}
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x15B5E9C", Offset = "0x15B5E9C", VA = "0x15B5E9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DD0", Offset = "0x10C0DD0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event IAM_EndDisappear OnEndDisappear
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x15B5F3C", Offset = "0x15B5F3C", VA = "0x15B5F3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DE0", Offset = "0x10C0DE0")]
		add
		{
		}
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x15B5FDC", Offset = "0x15B5FDC", VA = "0x15B5FDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C0DF0", Offset = "0x10C0DF0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x15B607C", Offset = "0x15B607C", VA = "0x15B607C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x15B61CC", Offset = "0x15B61CC", VA = "0x15B61CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x15B71CC", Offset = "0x15B71CC", VA = "0x15B71CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x15B8664", Offset = "0x15B8664", VA = "0x15B8664")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C0E00", Offset = "0x10C0E00")]
	public IEnumerator Disable_OnDisappearEnd()
	{
		return null;
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x15B88D0", Offset = "0x15B88D0", VA = "0x15B88D0", Slot = "4")]
	public virtual void startAppear(bool _direct = false)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x15B84D4", Offset = "0x15B84D4", VA = "0x15B84D4")]
	private void EndAppear()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x15B8D3C", Offset = "0x15B8D3C", VA = "0x15B8D3C", Slot = "5")]
	public virtual void startDisappear(bool _direct = false)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x15B86DC", Offset = "0x15B86DC", VA = "0x15B86DC")]
	private void EndDisappear()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x15B6234", Offset = "0x15B6234", VA = "0x15B6234")]
	public void UpdateAnimClips()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x15B8F44", Offset = "0x15B8F44", VA = "0x15B8F44")]
	public bool isIAM_Root()
	{
		return default(bool);
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x15B91A8", Offset = "0x15B91A8", VA = "0x15B91A8")]
	public InterfaceAnimManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200003F")]
public enum CSFHIAnimableState
{
	[Token(Token = "0x400010A")]
	appearing,
	[Token(Token = "0x400010B")]
	appeared,
	[Token(Token = "0x400010C")]
	disappearing,
	[Token(Token = "0x400010D")]
	disappeared
}
[Serializable]
[Token(Token = "0x2000040")]
public class InterfaceAnmElement : MonoBehaviour
{
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InterfaceAnimManager interfaceAnimManager;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gameObjectRef;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeAppear;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeDisappear;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool recycling;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int sortID;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animator animator;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationClip[] animClips;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<InterfaceAnmElement> list;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CSFHIAnimableState currentState;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool isNested_IAM;

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x15B92A0", Offset = "0x15B92A0", VA = "0x15B92A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x15B8F4C", Offset = "0x15B8F4C", VA = "0x15B8F4C")]
	public static InterfaceAnmElement Create(GameObject _gameObjectRef, int _newSortID, bool _isNested_IAM)
	{
		return null;
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x15B94C4", Offset = "0x15B94C4", VA = "0x15B94C4", Slot = "4")]
	public virtual InterfaceAnmElement Confirm(GameObject _gameObjectRef, int _newSortID, bool isNested_IAM)
	{
		return null;
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x15B91A4", Offset = "0x15B91A4", VA = "0x15B91A4")]
	public void UpdateProperties()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x15B9664", Offset = "0x15B9664", VA = "0x15B9664", Slot = "5")]
	public virtual void Delete()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x15B96B0", Offset = "0x15B96B0", VA = "0x15B96B0")]
	public InterfaceAnmElement()
	{
	}
}
[Token(Token = "0x2000041")]
public class MouseOrbitImproved : MonoBehaviour
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceMin;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceMax;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float smoothTime;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float rotationYAxis;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float rotationXAxis;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float velocityX;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float velocityY;

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x312A1F4", Offset = "0x312A1F4", VA = "0x312A1F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x312A2D8", Offset = "0x312A2D8", VA = "0x312A2D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x312A62C", Offset = "0x312A62C", VA = "0x312A62C")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x312A65C", Offset = "0x312A65C", VA = "0x312A65C")]
	public MouseOrbitImproved()
	{
	}
}
[Token(Token = "0x2000042")]
public class HexaResetZone : MonoBehaviour
{
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform ResetPosition;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool reset;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HexaBodyPlayer4 hexa;

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x322D5A8", Offset = "0x322D5A8", VA = "0x322D5A8")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x322D648", Offset = "0x322D648", VA = "0x322D648")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x322D71C", Offset = "0x322D71C", VA = "0x322D71C")]
	public HexaResetZone()
	{
	}
}
[Token(Token = "0x2000043")]
public class HexaComments : MonoBehaviour
{
	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x10AD550", Offset = "0x10AD550")]
	public string text;

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x322B068", Offset = "0x322B068", VA = "0x322B068")]
	public HexaComments()
	{
	}
}
[Token(Token = "0x2000044")]
public class HexaSteamVRActionEnabler : MonoBehaviour
{
	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool disableAllOtherActionSets;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool activateOnStart;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool deactivateOnDestroy;

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x322D724", Offset = "0x322D724", VA = "0x322D724")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x322D728", Offset = "0x322D728", VA = "0x322D728")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x322D72C", Offset = "0x322D72C", VA = "0x322D72C")]
	public HexaSteamVRActionEnabler()
	{
	}
}
[Token(Token = "0x2000045")]
public class PuppetTimeScaler : MonoBehaviour
{
	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PuppetMaster puppetMaster;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BehaviourPuppet behaviourPuppet;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeScale;

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x1CC1EF4", Offset = "0x1CC1EF4", VA = "0x1CC1EF4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x1CC2014", Offset = "0x1CC2014", VA = "0x1CC2014")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x1CC2090", Offset = "0x1CC2090", VA = "0x1CC2090")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x1CC210C", Offset = "0x1CC210C", VA = "0x1CC210C")]
	public void TimeSlowed(bool slowTime, bool slowedByChronos)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x1CC2184", Offset = "0x1CC2184", VA = "0x1CC2184")]
	public void SetTimeScale(float newTimeScale)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x1CC21BC", Offset = "0x1CC21BC", VA = "0x1CC21BC")]
	private void ApplyTimeScale(float scaleRatio)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x1CC2370", Offset = "0x1CC2370", VA = "0x1CC2370")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x1CC2448", Offset = "0x1CC2448", VA = "0x1CC2448")]
	public PuppetTimeScaler()
	{
	}
}
[Token(Token = "0x2000046")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image _image;

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x2003084", Offset = "0x2003084", VA = "0x2003084")]
	public void Start()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x2003280", Offset = "0x2003280", VA = "0x2003280", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x2003578", Offset = "0x2003578", VA = "0x2003578")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x2000047")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x33803E0", Offset = "0x33803E0", VA = "0x33803E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x33804F4", Offset = "0x33804F4", VA = "0x33804F4")]
	public EventSystemChecker()
	{
	}
}
[Token(Token = "0x2000048")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2610", Offset = "0x10A2610")]
public class ForcedReset : MonoBehaviour
{
	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x2F2CAA8", Offset = "0x2F2CAA8", VA = "0x2F2CAA8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x2F2CB78", Offset = "0x2F2CB78", VA = "0x2F2CB78")]
	public ForcedReset()
	{
	}
}
namespace Impostors.Example
{
	[Token(Token = "0x2000049")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A2670", Offset = "0x10A2670")]
	internal class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200004A")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4000136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4000137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x60002C0")]
			[Address(RVA = "0x2233D0C", Offset = "0x2233D0C", VA = "0x2233D0C")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _transform;

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x200AF50", Offset = "0x200AF50", VA = "0x200AF50")]
		private void Start()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x200AF90", Offset = "0x200AF90", VA = "0x200AF90")]
		private void Update()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x200B050", Offset = "0x200B050", VA = "0x200B050")]
		public AutoMoveAndRotate()
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x200004B")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x200004C")]
		public enum Mode
		{
			[Token(Token = "0x400013E")]
			Trigger,
			[Token(Token = "0x400013F")]
			Replace,
			[Token(Token = "0x4000140")]
			Activate,
			[Token(Token = "0x4000141")]
			Enable,
			[Token(Token = "0x4000142")]
			Animate,
			[Token(Token = "0x4000143")]
			Deactivate
		}

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x2002BC8", Offset = "0x2002BC8", VA = "0x2002BC8")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x2003068", Offset = "0x2003068", VA = "0x2003068")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x200306C", Offset = "0x200306C", VA = "0x200306C")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x200004D")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200004E")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x4000145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x4000146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x60002C6")]
			[Address(RVA = "0x2233C9C", Offset = "0x2233C9C", VA = "0x2233C9C")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200004F")]
		public class ReplacementList
		{
			[Token(Token = "0x4000147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x60002C7")]
			[Address(RVA = "0x2233CA4", Offset = "0x2233CA4", VA = "0x2233CA4")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x200A46C", Offset = "0x200A46C", VA = "0x200A46C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x200AF48", Offset = "0x200AF48", VA = "0x200AF48")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x2000050")]
	public class CameraRefocus
	{
		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x25412D8", Offset = "0x25412D8", VA = "0x25412D8")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x254134C", Offset = "0x254134C", VA = "0x254134C")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x2541354", Offset = "0x2541354", VA = "0x2541354")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x254135C", Offset = "0x254135C", VA = "0x254135C")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x2541458", Offset = "0x2541458", VA = "0x2541458")]
		public void SetFocusPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000051")]
	public class CurveControlledBob
	{
		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x254A244", Offset = "0x254A244", VA = "0x254A244")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x254A2E8", Offset = "0x254A2E8", VA = "0x254A2E8")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x254A3E4", Offset = "0x254A3E4", VA = "0x254A3E4")]
		public CurveControlledBob()
		{
		}
	}
	[Token(Token = "0x2000052")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x2000053")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A26A8", Offset = "0x10A26A8")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400015D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400015E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400015F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4000160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4000161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4000162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x4000163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x17000038")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60002D7")]
				[Address(RVA = "0x2244B70", Offset = "0x2244B70", VA = "0x2244B70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000039")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60002D9")]
				[Address(RVA = "0x2244BB8", Offset = "0x2244BB8", VA = "0x2244BB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002D4")]
			[Address(RVA = "0x22448E8", Offset = "0x22448E8", VA = "0x22448E8")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60002D5")]
			[Address(RVA = "0x2244914", Offset = "0x2244914", VA = "0x2244914", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60002D6")]
			[Address(RVA = "0x2244918", Offset = "0x2244918", VA = "0x2244918", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60002D8")]
			[Address(RVA = "0x2244B78", Offset = "0x2244B78", VA = "0x2244B78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000156")]
		private const float k_Spring = 50f;

		[Token(Token = "0x4000157")]
		private const float k_Damper = 5f;

		[Token(Token = "0x4000158")]
		private const float k_Drag = 10f;

		[Token(Token = "0x4000159")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x400015A")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x400015B")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x1FF6B34", Offset = "0x1FF6B34", VA = "0x1FF6B34")]
		private void Update()
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x1FF6F84", Offset = "0x1FF6F84", VA = "0x1FF6F84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C0EB0", Offset = "0x10C0EB0")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x1FF6ECC", Offset = "0x1FF6ECC", VA = "0x1FF6ECC")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x1FF700C", Offset = "0x1FF700C", VA = "0x1FF700C")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x2000054")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x1FF7F14", Offset = "0x1FF7F14", VA = "0x1FF7F14")]
		private void Start()
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x1FF7F48", Offset = "0x1FF7F48", VA = "0x1FF7F48")]
		private void Update()
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x1FF8104", Offset = "0x1FF8104", VA = "0x1FF8104")]
		public DynamicShadowSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000055")]
	public class FOVKick
	{
		[Token(Token = "0x2000056")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A26B8", Offset = "0x10A26B8")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000177")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000178")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x1700003A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60002E6")]
				[Address(RVA = "0x1DDAA68", Offset = "0x1DDAA68", VA = "0x1DDAA68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700003B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60002E8")]
				[Address(RVA = "0x1DDAAB0", Offset = "0x1DDAAB0", VA = "0x1DDAAB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002E3")]
			[Address(RVA = "0x1DDA8FC", Offset = "0x1DDA8FC", VA = "0x1DDA8FC")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60002E4")]
			[Address(RVA = "0x1DDA928", Offset = "0x1DDA928", VA = "0x1DDA928", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60002E5")]
			[Address(RVA = "0x1DDA92C", Offset = "0x1DDA92C", VA = "0x1DDA92C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60002E7")]
			[Address(RVA = "0x1DDAA70", Offset = "0x1DDAA70", VA = "0x1DDAA70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000057")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A26C8", Offset = "0x10A26C8")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400017A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400017B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x400017C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x1700003C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60002EC")]
				[Address(RVA = "0x1DDA8AC", Offset = "0x1DDA8AC", VA = "0x1DDA8AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700003D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60002EE")]
				[Address(RVA = "0x1DDA8F4", Offset = "0x1DDA8F4", VA = "0x1DDA8F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002E9")]
			[Address(RVA = "0x1DDA72C", Offset = "0x1DDA72C", VA = "0x1DDA72C")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60002EA")]
			[Address(RVA = "0x1DDA758", Offset = "0x1DDA758", VA = "0x1DDA758", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60002EB")]
			[Address(RVA = "0x1DDA75C", Offset = "0x1DDA75C", VA = "0x1DDA75C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60002ED")]
			[Address(RVA = "0x1DDA8B4", Offset = "0x1DDA8B4", VA = "0x1DDA8B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x2F2887C", Offset = "0x2F2887C", VA = "0x2F2887C")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x2F288C8", Offset = "0x2F288C8", VA = "0x2F288C8")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x2F289B4", Offset = "0x2F289B4", VA = "0x2F289B4")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x2F289BC", Offset = "0x2F289BC", VA = "0x2F289BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C0F60", Offset = "0x10C0F60")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x2F28A34", Offset = "0x2F28A34", VA = "0x2F28A34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C0FC0", Offset = "0x10C0FC0")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x2F28AAC", Offset = "0x2F28AAC", VA = "0x2F28AAC")]
		public FOVKick()
		{
		}
	}
	[Token(Token = "0x2000058")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A26D8", Offset = "0x10A26D8")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x400017D")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x4000181")]
		private const string display = "{0} FPS";

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_Text;

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x2F28AC8", Offset = "0x2F28AC8", VA = "0x2F28AC8")]
		private void Start()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x2F28B38", Offset = "0x2F28B38", VA = "0x2F28B38")]
		private void Update()
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x2F28C3C", Offset = "0x2F28C3C", VA = "0x2F28C3C")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000059")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x2F2C394", Offset = "0x2F2C394", VA = "0x2F2C394")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x2F2C3F4", Offset = "0x2F2C3F4", VA = "0x2F2C3F4")]
		public FollowTarget()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005A")]
	public class LerpControlledBob
	{
		[Token(Token = "0x200005B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2738", Offset = "0x10A2738")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400018A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x400018B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x1700003E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60002FA")]
				[Address(RVA = "0x1DDE704", Offset = "0x1DDE704", VA = "0x1DDE704", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700003F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60002FC")]
				[Address(RVA = "0x1DDE74C", Offset = "0x1DDE74C", VA = "0x1DDE74C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002F7")]
			[Address(RVA = "0x1DDE530", Offset = "0x1DDE530", VA = "0x1DDE530")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60002F8")]
			[Address(RVA = "0x1DDE55C", Offset = "0x1DDE55C", VA = "0x1DDE55C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60002F9")]
			[Address(RVA = "0x1DDE560", Offset = "0x1DDE560", VA = "0x1DDE560", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60002FB")]
			[Address(RVA = "0x1DDE70C", Offset = "0x1DDE70C", VA = "0x1DDE70C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x15BA9B8", Offset = "0x15BA9B8", VA = "0x15BA9B8")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x15BA9C0", Offset = "0x15BA9C0", VA = "0x15BA9C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C10C0", Offset = "0x10C10C0")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x15BAA38", Offset = "0x15BAA38", VA = "0x15BAA38")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x200005C")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x200005D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2748", Offset = "0x10A2748")]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x17000040")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000304")]
				[Address(RVA = "0x1DE06C8", Offset = "0x1DE06C8", VA = "0x1DE06C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000041")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000306")]
				[Address(RVA = "0x1DE0710", Offset = "0x1DE0710", VA = "0x1DE0710", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000301")]
			[Address(RVA = "0x1DE0450", Offset = "0x1DE0450", VA = "0x1DE0450")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000302")]
			[Address(RVA = "0x1DE047C", Offset = "0x1DE047C", VA = "0x1DE047C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000303")]
			[Address(RVA = "0x1DE0480", Offset = "0x1DE0480", VA = "0x1DE0480", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000305")]
			[Address(RVA = "0x1DE06D0", Offset = "0x1DE06D0", VA = "0x1DE06D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x312F8EC", Offset = "0x312F8EC", VA = "0x312F8EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x312FA0C", Offset = "0x312FA0C", VA = "0x312FA0C")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x312FA38", Offset = "0x312FA38", VA = "0x312FA38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C1170", Offset = "0x10C1170")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x312FAC0", Offset = "0x312FAC0", VA = "0x312FAC0")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x200005E")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x200005F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2758", Offset = "0x10A2758")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000198")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400019A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParticleSystemDestroyer <>4__this;

			[Token(Token = "0x400019B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ParticleSystem[] <systems>5__2;

			[Token(Token = "0x400019C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <stopTime>5__3;

			[Token(Token = "0x17000042")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600030D")]
				[Address(RVA = "0x1DE0AA8", Offset = "0x1DE0AA8", VA = "0x1DE0AA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000043")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600030F")]
				[Address(RVA = "0x1DE0AF0", Offset = "0x1DE0AF0", VA = "0x1DE0AF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600030A")]
			[Address(RVA = "0x1DE0718", Offset = "0x1DE0718", VA = "0x1DE0718")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600030B")]
			[Address(RVA = "0x1DE0744", Offset = "0x1DE0744", VA = "0x1DE0744", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600030C")]
			[Address(RVA = "0x1DE0748", Offset = "0x1DE0748", VA = "0x1DE0748", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600030E")]
			[Address(RVA = "0x1DE0AB0", Offset = "0x1DE0AB0", VA = "0x1DE0AB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x3130658", Offset = "0x3130658", VA = "0x3130658")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C1220", Offset = "0x10C1220")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x31306D0", Offset = "0x31306D0", VA = "0x31306D0")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x31306DC", Offset = "0x31306DC", VA = "0x31306DC")]
		public ParticleSystemDestroyer()
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x2000061")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x40001A2")]
			Standalone,
			[Token(Token = "0x40001A3")]
			Mobile
		}

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x1CB6C6C", Offset = "0x1CB6C6C", VA = "0x1CB6C6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1CB6C70", Offset = "0x1CB6C70", VA = "0x1CB6C70")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1CB6C8C", Offset = "0x1CB6C8C", VA = "0x1CB6C8C")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1CB703C", Offset = "0x1CB703C", VA = "0x1CB703C")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x2000062")]
	public class SimpleActivatorMenu : MonoBehaviour
	{
		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text camSwitchButton;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] objects;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_CurrentActiveObject;

		[Token(Token = "0x6000314")]
		[Address(RVA = "0x229A884", Offset = "0x229A884", VA = "0x229A884")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x229A8F0", Offset = "0x229A8F0", VA = "0x229A8F0")]
		public void NextCamera()
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x229A9C8", Offset = "0x229A9C8", VA = "0x229A9C8")]
		public SimpleActivatorMenu()
		{
		}
	}
	[Token(Token = "0x2000063")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x229A9D0", Offset = "0x229A9D0", VA = "0x229A9D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x229AA0C", Offset = "0x229AA0C", VA = "0x229AA0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x229ACE4", Offset = "0x229ACE4", VA = "0x229ACE4")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x229AFD0", Offset = "0x229AFD0", VA = "0x229AFD0")]
		private void Start()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x229AFD4", Offset = "0x229AFD4", VA = "0x229AFD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x229B27C", Offset = "0x229B27C", VA = "0x229B27C")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x2000065")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x2000066")]
		public enum Action
		{
			[Token(Token = "0x40001B8")]
			Activate,
			[Token(Token = "0x40001B9")]
			Deactivate,
			[Token(Token = "0x40001BA")]
			Destroy,
			[Token(Token = "0x40001BB")]
			ReloadLevel,
			[Token(Token = "0x40001BC")]
			Call
		}

		[Serializable]
		[Token(Token = "0x2000067")]
		public class Entry
		{
			[Token(Token = "0x40001BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x40001BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x40001BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x6000322")]
			[Address(RVA = "0x1DE4150", Offset = "0x1DE4150", VA = "0x1DE4150")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000068")]
		public class Entries
		{
			[Token(Token = "0x40001C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x6000323")]
			[Address(RVA = "0x1DE4148", Offset = "0x1DE4148", VA = "0x1DE4148")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x2000069")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2768", Offset = "0x10A2768")]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40001C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000044")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000327")]
				[Address(RVA = "0x1DE3E1C", Offset = "0x1DE3E1C", VA = "0x1DE3E1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000045")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000329")]
				[Address(RVA = "0x1DE3E64", Offset = "0x1DE3E64", VA = "0x1DE3E64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000324")]
			[Address(RVA = "0x1DE3D1C", Offset = "0x1DE3D1C", VA = "0x1DE3D1C")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000325")]
			[Address(RVA = "0x1DE3D48", Offset = "0x1DE3D48", VA = "0x1DE3D48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000326")]
			[Address(RVA = "0x1DE3D4C", Offset = "0x1DE3D4C", VA = "0x1DE3D4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000328")]
			[Address(RVA = "0x1DE3E24", Offset = "0x1DE3E24", VA = "0x1DE3E24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200006A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2778", Offset = "0x10A2778")]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40001C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000046")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600032D")]
				[Address(RVA = "0x1DE3F6C", Offset = "0x1DE3F6C", VA = "0x1DE3F6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000047")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600032F")]
				[Address(RVA = "0x1DE3FB4", Offset = "0x1DE3FB4", VA = "0x1DE3FB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600032A")]
			[Address(RVA = "0x1DE3E6C", Offset = "0x1DE3E6C", VA = "0x1DE3E6C")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600032B")]
			[Address(RVA = "0x1DE3E98", Offset = "0x1DE3E98", VA = "0x1DE3E98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600032C")]
			[Address(RVA = "0x1DE3E9C", Offset = "0x1DE3E9C", VA = "0x1DE3E9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600032E")]
			[Address(RVA = "0x1DE3F74", Offset = "0x1DE3F74", VA = "0x1DE3F74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200006B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2788", Offset = "0x10A2788")]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40001C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40001C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40001C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000048")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000333")]
				[Address(RVA = "0x1DE40F8", Offset = "0x1DE40F8", VA = "0x1DE40F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000049")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000335")]
				[Address(RVA = "0x1DE4140", Offset = "0x1DE4140", VA = "0x1DE4140", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000330")]
			[Address(RVA = "0x1DE3FBC", Offset = "0x1DE3FBC", VA = "0x1DE3FBC")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000331")]
			[Address(RVA = "0x1DE3FE8", Offset = "0x1DE3FE8", VA = "0x1DE3FE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000332")]
			[Address(RVA = "0x1DE3FEC", Offset = "0x1DE3FEC", VA = "0x1DE3FEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000334")]
			[Address(RVA = "0x1DE4100", Offset = "0x1DE4100", VA = "0x1DE4100", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x2DC03F4", Offset = "0x2DC03F4", VA = "0x2DC03F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x2DC051C", Offset = "0x2DC051C", VA = "0x2DC051C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C12D0", Offset = "0x10C12D0")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x2DC0594", Offset = "0x2DC0594", VA = "0x2DC0594")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C1330", Offset = "0x10C1330")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x2DC060C", Offset = "0x2DC060C", VA = "0x2DC060C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C1390", Offset = "0x10C1390")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x2DC0684", Offset = "0x2DC0684", VA = "0x2DC0684")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x2DC06F4", Offset = "0x2DC06F4", VA = "0x2DC06F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x2DC0748", Offset = "0x2DC0748", VA = "0x2DC0748")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x2DC07E4", Offset = "0x2DC07E4", VA = "0x2DC07E4")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x200006D")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200006E")]
		public class WaypointList
		{
			[Token(Token = "0x40001DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x40001DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x6000345")]
			[Address(RVA = "0x1DE675C", Offset = "0x1DE675C", VA = "0x1DE675C")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x200006F")]
		public struct RoutePoint
		{
			[Token(Token = "0x40001DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x40001DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x6000346")]
			[Address(RVA = "0x1DE674C", Offset = "0x1DE674C", VA = "0x1DE674C")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD640", Offset = "0x10AD640")]
		private float <Length>k__BackingField;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x1700004A")]
		public float Length
		{
			[Token(Token = "0x6000339")]
			[Address(RVA = "0x2EC4100", Offset = "0x2EC4100", VA = "0x2EC4100")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C14E0", Offset = "0x10C14E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600033A")]
			[Address(RVA = "0x2EC4108", Offset = "0x2EC4108", VA = "0x2EC4108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C14F0", Offset = "0x10C14F0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x600033B")]
			[Address(RVA = "0x2EC4110", Offset = "0x2EC4110", VA = "0x2EC4110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x2EC412C", Offset = "0x2EC412C", VA = "0x2EC412C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x2EC445C", Offset = "0x2EC445C", VA = "0x2EC445C")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x2EC4508", Offset = "0x2EC4508", VA = "0x2EC4508")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x2EC4794", Offset = "0x2EC4794", VA = "0x2EC4794")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x2EC4188", Offset = "0x2EC4188", VA = "0x2EC4188")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x2EC48A0", Offset = "0x2EC48A0", VA = "0x2EC48A0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x2EC4B28", Offset = "0x2EC4B28", VA = "0x2EC4B28")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x2EC48A8", Offset = "0x2EC48A8", VA = "0x2EC48A8")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x2EC4B30", Offset = "0x2EC4B30", VA = "0x2EC4B30")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x2000070")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x2000071")]
		public enum ProgressStyle
		{
			[Token(Token = "0x40001F0")]
			SmoothAlongRoute,
			[Token(Token = "0x40001F1")]
			PointToPoint
		}

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD6C0", Offset = "0x10AD6C0")]
		private WaypointCircuit.RoutePoint <targetPoint>k__BackingField;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD6D0", Offset = "0x10AD6D0")]
		private WaypointCircuit.RoutePoint <speedPoint>k__BackingField;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD6E0", Offset = "0x10AD6E0")]
		private WaypointCircuit.RoutePoint <progressPoint>k__BackingField;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x1700004C")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x6000347")]
			[Address(RVA = "0x2EC4BB0", Offset = "0x2EC4BB0", VA = "0x2EC4BB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1500", Offset = "0x10C1500")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000348")]
			[Address(RVA = "0x2EC4BC4", Offset = "0x2EC4BC4", VA = "0x2EC4BC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1510", Offset = "0x10C1510")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x6000349")]
			[Address(RVA = "0x2EC4BD8", Offset = "0x2EC4BD8", VA = "0x2EC4BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1520", Offset = "0x10C1520")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x600034A")]
			[Address(RVA = "0x2EC4BEC", Offset = "0x2EC4BEC", VA = "0x2EC4BEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1530", Offset = "0x10C1530")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x600034B")]
			[Address(RVA = "0x2EC4C00", Offset = "0x2EC4C00", VA = "0x2EC4C00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1540", Offset = "0x10C1540")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x2EC4C14", Offset = "0x2EC4C14", VA = "0x2EC4C14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1550", Offset = "0x10C1550")]
			private set
			{
			}
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x2EC4C28", Offset = "0x2EC4C28", VA = "0x2EC4C28")]
		private void Start()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x2EC4D30", Offset = "0x2EC4D30", VA = "0x2EC4D30")]
		public void Reset()
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x2EC4E08", Offset = "0x2EC4E08", VA = "0x2EC4E08")]
		private void Update()
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x2EC521C", Offset = "0x2EC521C", VA = "0x2EC521C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x2EC536C", Offset = "0x2EC536C", VA = "0x2EC536C")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000072")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x200B058", Offset = "0x200B058", VA = "0x200B058")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x200B178", Offset = "0x200B178", VA = "0x200B178")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x200B328", Offset = "0x200B328", VA = "0x200B328")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x200B344", Offset = "0x200B344", VA = "0x200B344", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x200B404", Offset = "0x200B404", VA = "0x200B404", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x200B458", Offset = "0x200B458", VA = "0x200B458")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000073")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x28B7FCC", Offset = "0x28B7FCC", VA = "0x28B7FCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x28B7FD0", Offset = "0x28B7FD0", VA = "0x28B7FD0")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x28B8038", Offset = "0x28B8038", VA = "0x28B8038")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x28B80A0", Offset = "0x28B80A0", VA = "0x28B80A0")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x28B8108", Offset = "0x28B8108", VA = "0x28B8108")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x28B8170", Offset = "0x28B8170", VA = "0x28B8170")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x28B81D8", Offset = "0x28B81D8", VA = "0x28B81D8")]
		public void Update()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x28B81DC", Offset = "0x28B81DC", VA = "0x28B81DC")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x2000075")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x40001FD")]
			Hardware,
			[Token(Token = "0x40001FE")]
			Touch
		}

		[Token(Token = "0x2000076")]
		public class VirtualAxis
		{
			[Token(Token = "0x40001FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD6F0", Offset = "0x10AD6F0")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x4000201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD700", Offset = "0x10AD700")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x17000050")]
			public string name
			{
				[Token(Token = "0x6000379")]
				[Address(RVA = "0x2236EE0", Offset = "0x2236EE0", VA = "0x2236EE0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1560", Offset = "0x10C1560")]
				get
				{
					return null;
				}
				[Token(Token = "0x600037A")]
				[Address(RVA = "0x2236EE8", Offset = "0x2236EE8", VA = "0x2236EE8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1570", Offset = "0x10C1570")]
				private set
				{
				}
			}

			[Token(Token = "0x17000051")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600037B")]
				[Address(RVA = "0x2236EF0", Offset = "0x2236EF0", VA = "0x2236EF0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1580", Offset = "0x10C1580")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600037C")]
				[Address(RVA = "0x2236EF8", Offset = "0x2236EF8", VA = "0x2236EF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1590", Offset = "0x10C1590")]
				private set
				{
				}
			}

			[Token(Token = "0x17000052")]
			public float GetValue
			{
				[Token(Token = "0x6000381")]
				[Address(RVA = "0x2237000", Offset = "0x2237000", VA = "0x2237000")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000053")]
			public float GetValueRaw
			{
				[Token(Token = "0x6000382")]
				[Address(RVA = "0x2237008", Offset = "0x2237008", VA = "0x2237008")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600037D")]
			[Address(RVA = "0x2236F04", Offset = "0x2236F04", VA = "0x2236F04")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x600037E")]
			[Address(RVA = "0x2236F44", Offset = "0x2236F44", VA = "0x2236F44")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x600037F")]
			[Address(RVA = "0x2236F90", Offset = "0x2236F90", VA = "0x2236F90")]
			public void Remove()
			{
			}

			[Token(Token = "0x6000380")]
			[Address(RVA = "0x2236FF8", Offset = "0x2236FF8", VA = "0x2236FF8")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x2000077")]
		public class VirtualButton
		{
			[Token(Token = "0x4000202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD710", Offset = "0x10AD710")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD720", Offset = "0x10AD720")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x4000204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4000205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4000206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x17000054")]
			public string name
			{
				[Token(Token = "0x6000383")]
				[Address(RVA = "0x2237010", Offset = "0x2237010", VA = "0x2237010")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15A0", Offset = "0x10C15A0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000384")]
				[Address(RVA = "0x2237018", Offset = "0x2237018", VA = "0x2237018")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15B0", Offset = "0x10C15B0")]
				private set
				{
				}
			}

			[Token(Token = "0x17000055")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6000385")]
				[Address(RVA = "0x2237020", Offset = "0x2237020", VA = "0x2237020")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15C0", Offset = "0x10C15C0")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000386")]
				[Address(RVA = "0x2237028", Offset = "0x2237028", VA = "0x2237028")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15D0", Offset = "0x10C15D0")]
				private set
				{
				}
			}

			[Token(Token = "0x17000056")]
			public bool GetButton
			{
				[Token(Token = "0x600038C")]
				[Address(RVA = "0x22371A0", Offset = "0x22371A0", VA = "0x22371A0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000057")]
			public bool GetButtonDown
			{
				[Token(Token = "0x600038D")]
				[Address(RVA = "0x22371A8", Offset = "0x22371A8", VA = "0x22371A8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000058")]
			public bool GetButtonUp
			{
				[Token(Token = "0x600038E")]
				[Address(RVA = "0x22371D8", Offset = "0x22371D8", VA = "0x22371D8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000387")]
			[Address(RVA = "0x2237034", Offset = "0x2237034", VA = "0x2237034")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x6000388")]
			[Address(RVA = "0x223707C", Offset = "0x223707C", VA = "0x223707C")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6000389")]
			[Address(RVA = "0x22370D0", Offset = "0x22370D0", VA = "0x22370D0")]
			public void Pressed()
			{
			}

			[Token(Token = "0x600038A")]
			[Address(RVA = "0x223710C", Offset = "0x223710C", VA = "0x223710C")]
			public void Released()
			{
			}

			[Token(Token = "0x600038B")]
			[Address(RVA = "0x2237138", Offset = "0x2237138", VA = "0x2237138")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x1700004F")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000375")]
			[Address(RVA = "0x254A04C", Offset = "0x254A04C", VA = "0x254A04C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x2549578", Offset = "0x2549578", VA = "0x2549578")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x2549640", Offset = "0x2549640", VA = "0x2549640")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x25496F4", Offset = "0x25496F4", VA = "0x25496F4")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x254976C", Offset = "0x254976C", VA = "0x254976C")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x25497E4", Offset = "0x25497E4", VA = "0x25497E4")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x254985C", Offset = "0x254985C", VA = "0x254985C")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x25498D4", Offset = "0x25498D4", VA = "0x25498D4")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x2549998", Offset = "0x2549998", VA = "0x2549998")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x2549A10", Offset = "0x2549A10", VA = "0x2549A10")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x2549A88", Offset = "0x2549A88", VA = "0x2549A88")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x2549B78", Offset = "0x2549B78", VA = "0x2549B78")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x2549AEC", Offset = "0x2549AEC", VA = "0x2549AEC")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x2549BDC", Offset = "0x2549BDC", VA = "0x2549BDC")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x2549C58", Offset = "0x2549C58", VA = "0x2549C58")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x2549CD4", Offset = "0x2549CD4", VA = "0x2549CD4")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x2549D50", Offset = "0x2549D50", VA = "0x2549D50")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x2549DCC", Offset = "0x2549DCC", VA = "0x2549DCC")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x2549E48", Offset = "0x2549E48", VA = "0x2549E48")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x2549EC4", Offset = "0x2549EC4", VA = "0x2549EC4")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x2549F40", Offset = "0x2549F40", VA = "0x2549F40")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x2549FBC", Offset = "0x2549FBC", VA = "0x2549FBC")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x254A0C4", Offset = "0x254A0C4", VA = "0x254A0C4")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x254A144", Offset = "0x254A144", VA = "0x254A144")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x254A1C4", Offset = "0x254A1C4", VA = "0x254A1C4")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000078")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x15B306C", Offset = "0x15B306C", VA = "0x15B306C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x15B3070", Offset = "0x15B3070", VA = "0x15B3070")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x15B30F0", Offset = "0x15B30F0", VA = "0x15B30F0")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000079")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x200007A")]
		public enum AxisOption
		{
			[Token(Token = "0x4000212")]
			Both,
			[Token(Token = "0x4000213")]
			OnlyHorizontal,
			[Token(Token = "0x4000214")]
			OnlyVertical
		}

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x15B9754", Offset = "0x15B9754", VA = "0x15B9754")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x15B98F0", Offset = "0x15B98F0", VA = "0x15B98F0")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x15B9794", Offset = "0x15B9794", VA = "0x15B9794")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x15B9954", Offset = "0x15B9954", VA = "0x15B9954", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x15B9A78", Offset = "0x15B9A78", VA = "0x15B9A78", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x15B9AC0", Offset = "0x15B9AC0", VA = "0x15B9AC0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x15B9AC4", Offset = "0x15B9AC4", VA = "0x15B9AC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x15B9B1C", Offset = "0x15B9B1C", VA = "0x15B9B1C")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x600039A")]
		[Address(RVA = "0x3125F40", Offset = "0x3125F40", VA = "0x3125F40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x3125F48", Offset = "0x3125F48", VA = "0x3125F48")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x3125F50", Offset = "0x3125F50", VA = "0x3125F50")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x312620C", Offset = "0x312620C", VA = "0x312620C")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x200007C")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x200007D")]
		public enum AxisOptions
		{
			[Token(Token = "0x400021B")]
			ForwardAxis,
			[Token(Token = "0x400021C")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x200007E")]
		public class AxisMapping
		{
			[Token(Token = "0x200007F")]
			public enum MappingType
			{
				[Token(Token = "0x4000220")]
				NamedAxis,
				[Token(Token = "0x4000221")]
				MousePositionX,
				[Token(Token = "0x4000222")]
				MousePositionY,
				[Token(Token = "0x4000223")]
				MousePositionZ
			}

			[Token(Token = "0x400021D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x400021E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x1DE3D14", Offset = "0x1DE3D14", VA = "0x1DE3D14")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x2DBF2D4", Offset = "0x2DBF2D4", VA = "0x2DBF2D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x2DBF3A8", Offset = "0x2DBF3A8", VA = "0x2DBF3A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x2DBF5D0", Offset = "0x2DBF5D0", VA = "0x2DBF5D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x2DBF5EC", Offset = "0x2DBF5EC", VA = "0x2DBF5EC")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x2000080")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A27A8", Offset = "0x10A27A8")]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000081")]
		public enum AxisOption
		{
			[Token(Token = "0x4000237")]
			Both,
			[Token(Token = "0x4000238")]
			OnlyHorizontal,
			[Token(Token = "0x4000239")]
			OnlyVertical
		}

		[Token(Token = "0x2000082")]
		public enum ControlStyle
		{
			[Token(Token = "0x400023B")]
			Absolute,
			[Token(Token = "0x400023C")]
			Relative,
			[Token(Token = "0x400023D")]
			Swipe
		}

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x2DC07FC", Offset = "0x2DC07FC", VA = "0x2DC07FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x2DC088C", Offset = "0x2DC088C", VA = "0x2DC088C")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x2DC09E8", Offset = "0x2DC09E8", VA = "0x2DC09E8")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x2DC0A54", Offset = "0x2DC0A54", VA = "0x2DC0A54", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x2DC0A8C", Offset = "0x2DC0A8C", VA = "0x2DC0A8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x2DC0BD4", Offset = "0x2DC0BD4", VA = "0x2DC0BD4", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x2DC0C08", Offset = "0x2DC0C08", VA = "0x2DC0C08")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x2DC0D08", Offset = "0x2DC0D08", VA = "0x2DC0D08")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x2000083")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD730", Offset = "0x10AD730")]
		private Vector3 <virtualMousePosition>k__BackingField;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000059")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0x2EC30E8", Offset = "0x2EC30E8", VA = "0x2EC30E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15E0", Offset = "0x10C15E0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60003AC")]
			[Address(RVA = "0x2EC30F4", Offset = "0x2EC30F4", VA = "0x2EC30F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C15F0", Offset = "0x10C15F0")]
			private set
			{
			}
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x2EC3100", Offset = "0x2EC3100", VA = "0x2EC3100")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x2EC3164", Offset = "0x2EC3164", VA = "0x2EC3164")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x2EC31C8", Offset = "0x2EC31C8", VA = "0x2EC31C8")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x2EC3328", Offset = "0x2EC3328", VA = "0x2EC3328")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x2EC3488", Offset = "0x2EC3488", VA = "0x2EC3488")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x2EC3528", Offset = "0x2EC3528", VA = "0x2EC3528")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x2EC35C8", Offset = "0x2EC35C8", VA = "0x2EC35C8")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x2EC3664", Offset = "0x2EC3664", VA = "0x2EC3664")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x2EC366C", Offset = "0x2EC366C", VA = "0x2EC366C")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x2EC3674", Offset = "0x2EC3674", VA = "0x2EC3674")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60003B7")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60003B8")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60003B9")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60003BA")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60003BB")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60003BC")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60003BD")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60003BE")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60003BF")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60003C0")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60003C1")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x2EC367C", Offset = "0x2EC367C", VA = "0x2EC367C")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x2000084")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x3126214", Offset = "0x3126214", VA = "0x3126214")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x31262A4", Offset = "0x31262A4", VA = "0x31262A4")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x3126334", Offset = "0x3126334", VA = "0x3126334", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x31263D8", Offset = "0x31263D8", VA = "0x31263D8", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x312647C", Offset = "0x312647C", VA = "0x312647C", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x3126520", Offset = "0x3126520", VA = "0x3126520", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x31265C8", Offset = "0x31265C8", VA = "0x31265C8", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x3126670", Offset = "0x3126670", VA = "0x3126670", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x3126714", Offset = "0x3126714", VA = "0x3126714", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x31267C4", Offset = "0x31267C4", VA = "0x31267C4", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x3126868", Offset = "0x3126868", VA = "0x3126868", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x312690C", Offset = "0x312690C", VA = "0x312690C", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x31269B0", Offset = "0x31269B0", VA = "0x31269B0", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x31269BC", Offset = "0x31269BC", VA = "0x31269BC")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x2000085")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x2DB7C7C", Offset = "0x2DB7C7C", VA = "0x2DB7C7C", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x2DB7C90", Offset = "0x2DB7C90", VA = "0x2DB7C90", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x2DB7C9C", Offset = "0x2DB7C9C", VA = "0x2DB7C9C", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x2DB7CA8", Offset = "0x2DB7CA8", VA = "0x2DB7CA8", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x2DB7CB4", Offset = "0x2DB7CB4", VA = "0x2DB7CB4", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x2DB7D08", Offset = "0x2DB7D08", VA = "0x2DB7D08", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x2DB7D5C", Offset = "0x2DB7D5C", VA = "0x2DB7D5C", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x2DB7DB0", Offset = "0x2DB7DB0", VA = "0x2DB7DB0", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x2DB7E04", Offset = "0x2DB7E04", VA = "0x2DB7E04", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x2DB7E58", Offset = "0x2DB7E58", VA = "0x2DB7E58", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x2DB7EAC", Offset = "0x2DB7EAC", VA = "0x2DB7EAC", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x2DB7EB4", Offset = "0x2DB7EB4", VA = "0x2DB7EB4")]
		public StandaloneInput()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.ThirdPerson
{
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2808", Offset = "0x10A2808")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2808", Offset = "0x10A2808")]
	public class AICharacterControl : MonoBehaviour
	{
		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD740", Offset = "0x10AD740")]
		private NavMeshAgent <agent>k__BackingField;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD750", Offset = "0x10AD750")]
		private ThirdPersonCharacter <character>k__BackingField;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x1700005A")]
		public NavMeshAgent agent
		{
			[Token(Token = "0x60003DD")]
			[Address(RVA = "0x2002334", Offset = "0x2002334", VA = "0x2002334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1600", Offset = "0x10C1600")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003DE")]
			[Address(RVA = "0x200233C", Offset = "0x200233C", VA = "0x200233C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1610", Offset = "0x10C1610")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public ThirdPersonCharacter character
		{
			[Token(Token = "0x60003DF")]
			[Address(RVA = "0x2002344", Offset = "0x2002344", VA = "0x2002344")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1620", Offset = "0x10C1620")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E0")]
			[Address(RVA = "0x200234C", Offset = "0x200234C", VA = "0x200234C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1630", Offset = "0x10C1630")]
			private set
			{
			}
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x2002354", Offset = "0x2002354", VA = "0x2002354")]
		private void Start()
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x2002410", Offset = "0x2002410", VA = "0x2002410")]
		private void Update()
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x2002514", Offset = "0x2002514", VA = "0x2002514")]
		public void SetTarget(Transform target)
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x200251C", Offset = "0x200251C", VA = "0x200251C")]
		public AICharacterControl()
		{
		}
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A289C", Offset = "0x10A289C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A289C", Offset = "0x10A289C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A289C", Offset = "0x10A289C")]
	public class ThirdPersonCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_JumpPower;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10AD790", Offset = "0x10AD790")]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_RunCycleLegOffset;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_MoveSpeedMultiplier;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_AnimSpeedMultiplier;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_GroundCheckDistance;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator m_Animator;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_IsGrounded;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_OrigGroundCheckDistance;

		[Token(Token = "0x4000251")]
		private const float k_Half = 0.5f;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_TurnAmount;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_ForwardAmount;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 m_GroundNormal;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_CapsuleHeight;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 m_CapsuleCenter;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_Crouching;

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x2DBDAC4", Offset = "0x2DBDAC4", VA = "0x2DBDAC4")]
		private void Start()
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x2DBDBD0", Offset = "0x2DBDBD0", VA = "0x2DBDBD0")]
		public void Move(Vector3 move, bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x2DBE03C", Offset = "0x2DBE03C", VA = "0x2DBE03C")]
		private void ScaleCapsuleForCrouching(bool crouch)
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x2DBE224", Offset = "0x2DBE224", VA = "0x2DBE224")]
		private void PreventStandingInLowHeadroom()
		{
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x2DBE36C", Offset = "0x2DBE36C", VA = "0x2DBE36C")]
		private void UpdateAnimator(Vector3 move)
		{
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x2DBDF98", Offset = "0x2DBDF98", VA = "0x2DBDF98")]
		private void HandleAirborneMovement()
		{
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x2DBDE78", Offset = "0x2DBDE78", VA = "0x2DBDE78")]
		private void HandleGroundedMovement(bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x2DBDE00", Offset = "0x2DBDE00", VA = "0x2DBDE00")]
		private void ApplyExtraTurnRotation()
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x2DBE5CC", Offset = "0x2DBE5CC", VA = "0x2DBE5CC")]
		public void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x2DBDCE8", Offset = "0x2DBDCE8", VA = "0x2DBDCE8")]
		private void CheckGroundStatus()
		{
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x2DBE67C", Offset = "0x2DBE67C", VA = "0x2DBE67C")]
		public ThirdPersonCharacter()
		{
		}
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2964", Offset = "0x10A2964")]
	public class ThirdPersonUserControl : MonoBehaviour
	{
		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ThirdPersonCharacter m_Character;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_Cam;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_CamForward;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_Move;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_Jump;

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x2DBE69C", Offset = "0x2DBE69C", VA = "0x2DBE69C")]
		private void Start()
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x2DBE7D8", Offset = "0x2DBE7D8", VA = "0x2DBE7D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x2DBE864", Offset = "0x2DBE864", VA = "0x2DBE864")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x2DBEA80", Offset = "0x2DBEA80", VA = "0x2DBEA80")]
		public ThirdPersonUserControl()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.FirstPerson
{
	[Token(Token = "0x2000089")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A29C4", Offset = "0x10A29C4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A29C4", Offset = "0x10A29C4")]
	public class FirstPersonController : MonoBehaviour
	{
		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10AD840", Offset = "0x10AD840")]
		private float m_RunstepLenghten;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MouseLook m_MouseLook;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FOVKick m_FovKick;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CurveControlledBob m_HeadBob;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private LerpControlledBob m_JumpBob;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip[] m_FootstepSounds;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip m_JumpSound;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private AudioClip m_LandSound;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Camera m_Camera;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool m_Jump;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_YRotation;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector2 m_Input;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float m_StepCycle;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_NextStep;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool m_Jumping;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x2F2AEC0", Offset = "0x2F2AEC0", VA = "0x2F2AEC0")]
		private void Start()
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x2F2AFFC", Offset = "0x2F2AFFC", VA = "0x2F2AFFC")]
		private void Update()
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x2F2B178", Offset = "0x2F2B178", VA = "0x2F2B178")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x2F2B1CC", Offset = "0x2F2B1CC", VA = "0x2F2B1CC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x2F2B62C", Offset = "0x2F2B62C", VA = "0x2F2B62C")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x2F2B66C", Offset = "0x2F2B66C", VA = "0x2F2B66C")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x2F2B938", Offset = "0x2F2B938", VA = "0x2F2B938")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x2F2B770", Offset = "0x2F2B770", VA = "0x2F2B770")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x2F2B474", Offset = "0x2F2B474", VA = "0x2F2B474")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x2F2B120", Offset = "0x2F2B120", VA = "0x2F2B120")]
		private void RotateView()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x2F2BAA8", Offset = "0x2F2BAA8", VA = "0x2F2BAA8")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x2F2BBE4", Offset = "0x2F2BBE4", VA = "0x2F2BBE4")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public class HeadBob : MonoBehaviour
	{
		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurveControlledBob motionBob;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LerpControlledBob jumpAndLandingBob;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RigidbodyFirstPersonController rigidbodyFirstPersonController;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float StrideInterval;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10AD950", Offset = "0x10AD950")]
		public float RunningStrideLengthen;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x2F2FD50", Offset = "0x2F2FD50", VA = "0x2F2FD50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x2F2FDAC", Offset = "0x2F2FDAC", VA = "0x2F2FDAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x2F2FFB8", Offset = "0x2F2FFB8", VA = "0x2F2FFB8")]
		public HeadBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public class MouseLook
	{
		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x3129D6C", Offset = "0x3129D6C", VA = "0x3129D6C")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x3129DC0", Offset = "0x3129DC0", VA = "0x3129DC0")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x312A110", Offset = "0x312A110", VA = "0x312A110")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x312A100", Offset = "0x312A100", VA = "0x312A100")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x312A144", Offset = "0x312A144", VA = "0x312A144")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x312A098", Offset = "0x312A098", VA = "0x312A098")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x312A1C0", Offset = "0x312A1C0", VA = "0x312A1C0")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2A58", Offset = "0x10A2A58")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2A58", Offset = "0x10A2A58")]
	public class RigidbodyFirstPersonController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200008D")]
		public class MovementSettings
		{
			[Token(Token = "0x400029B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float ForwardSpeed;

			[Token(Token = "0x400029C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float BackwardSpeed;

			[Token(Token = "0x400029D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float StrafeSpeed;

			[Token(Token = "0x400029E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float RunMultiplier;

			[Token(Token = "0x400029F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode RunKey;

			[Token(Token = "0x40002A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float JumpForce;

			[Token(Token = "0x40002A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve SlopeCurveModifier;

			[Token(Token = "0x40002A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public float CurrentTargetSpeed;

			[Token(Token = "0x40002A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool m_Running;

			[Token(Token = "0x17000060")]
			public bool Running
			{
				[Token(Token = "0x6000418")]
				[Address(RVA = "0x1DE225C", Offset = "0x1DE225C", VA = "0x1DE225C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000417")]
			[Address(RVA = "0x1DE219C", Offset = "0x1DE219C", VA = "0x1DE219C")]
			public void UpdateDesiredTargetSpeed(Vector2 input)
			{
			}

			[Token(Token = "0x6000419")]
			[Address(RVA = "0x1DE2264", Offset = "0x1DE2264", VA = "0x1DE2264")]
			public MovementSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008E")]
		public class AdvancedSettings
		{
			[Token(Token = "0x40002A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float groundCheckDistance;

			[Token(Token = "0x40002A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float stickToGroundHelperDistance;

			[Token(Token = "0x40002A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float slowDownRate;

			[Token(Token = "0x40002A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool airControl;

			[Token(Token = "0x40002A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AD978", Offset = "0x10AD978")]
			public float shellOffset;

			[Token(Token = "0x600041A")]
			[Address(RVA = "0x1DE2180", Offset = "0x1DE2180", VA = "0x1DE2180")]
			public AdvancedSettings()
			{
			}
		}

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementSettings movementSettings;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MouseLook mouseLook;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AdvancedSettings advancedSettings;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_RigidBody;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_YRotation;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_GroundContactNormal;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_Jump;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool m_Jumping;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		private bool m_IsGrounded;

		[Token(Token = "0x1700005C")]
		public Vector3 Velocity
		{
			[Token(Token = "0x600040A")]
			[Address(RVA = "0x1CC2ED8", Offset = "0x1CC2ED8", VA = "0x1CC2ED8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700005D")]
		public bool Grounded
		{
			[Token(Token = "0x600040B")]
			[Address(RVA = "0x1CC2EF4", Offset = "0x1CC2EF4", VA = "0x1CC2EF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005E")]
		public bool Jumping
		{
			[Token(Token = "0x600040C")]
			[Address(RVA = "0x1CC2EFC", Offset = "0x1CC2EFC", VA = "0x1CC2EFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005F")]
		public bool Running
		{
			[Token(Token = "0x600040D")]
			[Address(RVA = "0x1CC2F04", Offset = "0x1CC2F04", VA = "0x1CC2F04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1CC2F20", Offset = "0x1CC2F20", VA = "0x1CC2F20")]
		private void Start()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x1CC2FF0", Offset = "0x1CC2FF0", VA = "0x1CC2FF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x1CC3200", Offset = "0x1CC3200", VA = "0x1CC3200")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x1CC3734", Offset = "0x1CC3734", VA = "0x1CC3734")]
		private float SlopeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x1CC37A8", Offset = "0x1CC37A8", VA = "0x1CC37A8")]
		private void StickToGroundHelper()
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x1CC3664", Offset = "0x1CC3664", VA = "0x1CC3664")]
		private Vector2 GetInput()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x1CC3088", Offset = "0x1CC3088", VA = "0x1CC3088")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x1CC34E4", Offset = "0x1CC34E4", VA = "0x1CC34E4")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x1CC3980", Offset = "0x1CC3980", VA = "0x1CC3980")]
		public RigidbodyFirstPersonController()
		{
		}
	}
}
namespace UnityStandardAssets.Cameras
{
	[Token(Token = "0x200008F")]
	public abstract class AbstractTargetFollower : MonoBehaviour
	{
		[Token(Token = "0x2000090")]
		public enum UpdateType
		{
			[Token(Token = "0x40002AE")]
			FixedUpdate,
			[Token(Token = "0x40002AF")]
			LateUpdate,
			[Token(Token = "0x40002B0")]
			ManualUpdate
		}

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform m_Target;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_AutoTargetPlayer;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public UpdateType m_UpdateType;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x17000061")]
		public Transform Target
		{
			[Token(Token = "0x6000422")]
			[Address(RVA = "0x200292C", Offset = "0x200292C", VA = "0x200292C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x2002524", Offset = "0x2002524", VA = "0x2002524", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x20026AC", Offset = "0x20026AC", VA = "0x20026AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x200277C", Offset = "0x200277C", VA = "0x200277C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x2002850", Offset = "0x2002850", VA = "0x2002850")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x600041F")]
		protected abstract void FollowTarget(float deltaTime);

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x20025E8", Offset = "0x20025E8", VA = "0x20025E8")]
		public void FindAndTargetPlayer()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x2002924", Offset = "0x2002924", VA = "0x2002924", Slot = "6")]
		public virtual void SetTarget(Transform newTransform)
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x2002934", Offset = "0x2002934", VA = "0x2002934")]
		protected AbstractTargetFollower()
		{
		}
	}
	[Token(Token = "0x2000091")]
	[ExecuteInEditMode]
	public class AutoCam : PivotBasedCameraRig
	{
		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_MoveSpeed;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_RollSpeed;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool m_FollowVelocity;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[SerializeField]
		private bool m_FollowTilt;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_SpinTurnLimit;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_TargetVelocityLowerLimit;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_SmoothTurnTime;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_LastFlatAngle;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_CurrentTurnAmount;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_TurnSpeedVelocityChange;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 m_RollUp;

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x200A00C", Offset = "0x200A00C", VA = "0x200A00C", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x200A408", Offset = "0x200A408", VA = "0x200A408")]
		public AutoCam()
		{
		}
	}
	[Token(Token = "0x2000092")]
	public class FreeLookCam : PivotBasedCameraRig
	{
		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_MoveSpeed;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10ADA70", Offset = "0x10ADA70")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_TurnSmoothing;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float m_TiltMax;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_TiltMin;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private bool m_LockCursor;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[SerializeField]
		private bool m_VerticalAutoReturn;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_LookAngle;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_TiltAngle;

		[Token(Token = "0x40002C6")]
		private const float k_LookDistance = 100f;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 m_PivotEulers;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion m_PivotTargetRot;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion m_TransformTargetRot;

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x2F2CB80", Offset = "0x2F2CB80", VA = "0x2F2CB80", Slot = "7")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x2F2CC44", Offset = "0x2F2CC44", VA = "0x2F2CC44")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x2F2CF80", Offset = "0x2F2CF80", VA = "0x2F2CF80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x2F2CFA4", Offset = "0x2F2CFA4", VA = "0x2F2CFA4", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x2F2CCA4", Offset = "0x2F2CCA4", VA = "0x2F2CCA4")]
		private void HandleRotationMovement()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x2F2D0EC", Offset = "0x2F2D0EC", VA = "0x2F2D0EC")]
		public FreeLookCam()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public class HandHeldCam : LookatTarget
	{
		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_SwaySpeed;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_BaseSwayAmount;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float m_TrackingSwayAmount;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10ADB30", Offset = "0x10ADB30")]
		[SerializeField]
		private float m_TrackingBias;

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x2F2FBF8", Offset = "0x2F2FBF8", VA = "0x2F2FBF8", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x2F2FD38", Offset = "0x2F2FD38", VA = "0x2F2FD38")]
		public HandHeldCam()
		{
		}
	}
	[Token(Token = "0x2000094")]
	public class LookatTarget : AbstractTargetFollower
	{
		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2 m_RotationRange;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_FollowSpeed;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 m_FollowVelocity;

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x15BB5D4", Offset = "0x15BB5D4", VA = "0x15BB5D4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x15BB61C", Offset = "0x15BB61C", VA = "0x15BB61C", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x15BB854", Offset = "0x15BB854", VA = "0x15BB854")]
		public LookatTarget()
		{
		}
	}
	[Token(Token = "0x2000095")]
	public abstract class PivotBasedCameraRig : AbstractTargetFollower
	{
		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform m_Cam;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform m_Pivot;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 m_LastTargetPosition;

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1CB6BD4", Offset = "0x1CB6BD4", VA = "0x1CB6BD4", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1CB6C64", Offset = "0x1CB6C64", VA = "0x1CB6C64")]
		protected PivotBasedCameraRig()
		{
		}
	}
	[Token(Token = "0x2000096")]
	public class ProtectCameraFromWallClip : MonoBehaviour
	{
		[Token(Token = "0x2000097")]
		public class RayHitComparer : IComparer
		{
			[Token(Token = "0x6000438")]
			[Address(RVA = "0x1DE2074", Offset = "0x1DE2074", VA = "0x1DE2074", Slot = "4")]
			public int Compare(object x, object y)
			{
				return default(int);
			}

			[Token(Token = "0x6000439")]
			[Address(RVA = "0x1DE2178", Offset = "0x1DE2178", VA = "0x1DE2178")]
			public RayHitComparer()
			{
			}
		}

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clipMoveTime;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float returnTime;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sphereCastRadius;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool visualiseInEditor;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float closestDistance;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADB90", Offset = "0x10ADB90")]
		private bool <protecting>k__BackingField;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string dontClipTag;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_Cam;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_Pivot;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_OriginalDist;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_MoveVelocity;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_CurrentDist;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Ray m_Ray;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit[] m_Hits;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RayHitComparer m_RayHitComparer;

		[Token(Token = "0x17000062")]
		public bool protecting
		{
			[Token(Token = "0x6000433")]
			[Address(RVA = "0x1CC17F0", Offset = "0x1CC17F0", VA = "0x1CC17F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1640", Offset = "0x10C1640")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000434")]
			[Address(RVA = "0x1CC17F8", Offset = "0x1CC17F8", VA = "0x1CC17F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1650", Offset = "0x10C1650")]
			private set
			{
			}
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x1CC1804", Offset = "0x1CC1804", VA = "0x1CC1804")]
		private void Start()
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x1CC1910", Offset = "0x1CC1910", VA = "0x1CC1910")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x1CC1E78", Offset = "0x1CC1E78", VA = "0x1CC1E78")]
		public ProtectCameraFromWallClip()
		{
		}
	}
	[Token(Token = "0x2000098")]
	public class TargetFieldOfView : AbstractTargetFollower
	{
		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_FovAdjustTime;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_ZoomAmountMultiplier;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool m_IncludeEffectsInSize;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_BoundSize;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_FovAdjustVelocity;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_Cam;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform m_LastTarget;

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x2DB8C6C", Offset = "0x2DB8C6C", VA = "0x2DB8C6C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x2DB8EC4", Offset = "0x2DB8EC4", VA = "0x2DB8EC4", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x2DB8FB4", Offset = "0x2DB8FB4", VA = "0x2DB8FB4", Slot = "6")]
		public override void SetTarget(Transform newTransform)
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x2DB8CE4", Offset = "0x2DB8CE4", VA = "0x2DB8CE4")]
		public static float MaxBoundsExtent(Transform obj, bool includeEffects)
		{
			return default(float);
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x2DB8FF0", Offset = "0x2DB8FF0", VA = "0x2DB8FF0")]
		public TargetFieldOfView()
		{
		}
	}
}
namespace FluffyUnderware.DevTools
{
	[Token(Token = "0x2000099")]
	public interface IDTGroupParsingAttribute
	{
		[Token(Token = "0x17000063")]
		string Path
		{
			[Token(Token = "0x600043F")]
			get;
		}
	}
	[Token(Token = "0x200009A")]
	public interface IDTFieldParsingAttribute
	{
	}
	[Token(Token = "0x200009B")]
	public interface IDTGroupRenderAttribute
	{
	}
	[Token(Token = "0x200009C")]
	public interface IDTFieldRenderAttribute
	{
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2AFC", Offset = "0x10A2AFC")]
	public class DTVersionAttribute : Attribute
	{
		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Version;

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x1FF4614", Offset = "0x1FF4614", VA = "0x1FF4614")]
		public DTVersionAttribute(string version)
		{
		}
	}
	[Token(Token = "0x200009E")]
	public class EnvironmentAgnosticInitializeOnLoadMethodAttribute : RuntimeInitializeOnLoadMethodAttribute
	{
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x3379998", Offset = "0x3379998", VA = "0x3379998")]
		public EnvironmentAgnosticInitializeOnLoadMethodAttribute(RuntimeInitializeLoadType loadType)
		{
		}
	}
	[Token(Token = "0x200009F")]
	public class Ignore : Attribute
	{
		[Token(Token = "0x6000442")]
		[Address(RVA = "0x15B3054", Offset = "0x15B3054", VA = "0x15B3054")]
		public Ignore()
		{
		}
	}
	[Token(Token = "0x20000A0")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2B30", Offset = "0x10A2B30")]
	public class DTAttribute : Attribute, IComparable
	{
		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADBD0", Offset = "0x10ADBD0")]
		private int <TypeSort>k__BackingField;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Sort;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowBelowProperty;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Space;

		[Token(Token = "0x17000064")]
		public int TypeSort
		{
			[Token(Token = "0x6000443")]
			[Address(RVA = "0x1FEFD08", Offset = "0x1FEFD08", VA = "0x1FEFD08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1660", Offset = "0x10C1660")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000444")]
			[Address(RVA = "0x1FEFD10", Offset = "0x1FEFD10", VA = "0x1FEFD10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1670", Offset = "0x10C1670")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x1FEFD18", Offset = "0x1FEFD18", VA = "0x1FEFD18", Slot = "7")]
		public virtual int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x1FEFDE8", Offset = "0x1FEFDE8", VA = "0x1FEFDE8")]
		public DTAttribute(int sortOrder, bool showBelow = false)
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class GroupAttribute : DTAttribute, IDTGroupParsingAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADBE0", Offset = "0x10ADBE0")]
		private bool <PathIsAbsolute>k__BackingField;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Expanded;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool Invisible;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Label;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Tooltip;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string HelpURL;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mPath;

		[Token(Token = "0x17000065")]
		public string Path
		{
			[Token(Token = "0x6000447")]
			[Address(RVA = "0x2F2F5B8", Offset = "0x2F2F5B8", VA = "0x2F2F5B8", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000448")]
			[Address(RVA = "0x2F2F5C0", Offset = "0x2F2F5C0", VA = "0x2F2F5C0")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public bool PathIsAbsolute
		{
			[Token(Token = "0x6000449")]
			[Address(RVA = "0x2F2F6B4", Offset = "0x2F2F6B4", VA = "0x2F2F6B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1680", Offset = "0x10C1680")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600044A")]
			[Address(RVA = "0x2F2F6BC", Offset = "0x2F2F6BC", VA = "0x2F2F6BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1690", Offset = "0x10C1690")]
			private set
			{
			}
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x2F2F6C8", Offset = "0x2F2F6C8", VA = "0x2F2F6C8")]
		public GroupAttribute(string pathAndName)
		{
		}
	}
	[Token(Token = "0x20000A2")]
	public class ActionAttribute : DTAttribute
	{
		[Token(Token = "0x20000A3")]
		public enum ActionEnum
		{
			[Token(Token = "0x40002FD")]
			Show,
			[Token(Token = "0x40002FE")]
			Hide,
			[Token(Token = "0x40002FF")]
			Enable,
			[Token(Token = "0x4000300")]
			Disable,
			[Token(Token = "0x4000301")]
			ShowInfo,
			[Token(Token = "0x4000302")]
			ShowWarning,
			[Token(Token = "0x4000303")]
			ShowError,
			[Token(Token = "0x4000304")]
			Callback
		}

		[Token(Token = "0x20000A4")]
		public enum ActionPositionEnum
		{
			[Token(Token = "0x4000306")]
			Above,
			[Token(Token = "0x4000307")]
			Below
		}

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActionEnum Action;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ActionPositionEnum Position;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object ActionData;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MethodInfo mCallback;

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x2002944", Offset = "0x2002944", VA = "0x2002944")]
		protected ActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x20029A0", Offset = "0x20029A0", VA = "0x20029A0")]
		public void Callback(object classInstance)
		{
		}
	}
	[Token(Token = "0x20000A5")]
	public class ConditionalAttribute : ActionAttribute
	{
		[Token(Token = "0x20000A6")]
		public enum OperatorEnum
		{
			[Token(Token = "0x400030A")]
			AND,
			[Token(Token = "0x400030B")]
			OR
		}

		[Token(Token = "0x20000A7")]
		public class Condition
		{
			[Token(Token = "0x400030C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string FieldName;

			[Token(Token = "0x400030D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FieldInfo FieldInfo;

			[Token(Token = "0x400030E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropertyInfo PropertyInfo;

			[Token(Token = "0x400030F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public object CompareTo;

			[Token(Token = "0x4000310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool CompareFalse;

			[Token(Token = "0x4000311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public OperatorEnum Operator;

			[Token(Token = "0x4000312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MethodInfo MethodInfo;

			[Token(Token = "0x4000313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string MethodName;

			[Token(Token = "0x6000454")]
			[Address(RVA = "0x2236BE0", Offset = "0x2236BE0", VA = "0x2236BE0")]
			public Condition()
			{
			}
		}

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Condition[] Conditions;

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x2543350", Offset = "0x2543350", VA = "0x2543350")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x2543490", Offset = "0x2543490", VA = "0x2543490")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x2543670", Offset = "0x2543670", VA = "0x2543670")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x25438E4", Offset = "0x25438E4", VA = "0x25438E4")]
		protected ConditionalAttribute(string methodToQuery)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x2543A08", Offset = "0x2543A08", VA = "0x2543A08", Slot = "8")]
		public virtual bool ConditionMet(object classInstance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x2543AD4", Offset = "0x2543AD4", VA = "0x2543AD4")]
		private bool evaluate(Condition cond, object classInstance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000A8")]
	public class SortOrderAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x229B468", Offset = "0x229B468", VA = "0x229B468")]
		public SortOrderAttribute(int sort = 100)
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public class AsGroupAttribute : GroupAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x20069B0", Offset = "0x20069B0", VA = "0x20069B0")]
		public AsGroupAttribute([Optional] string pathAndName)
		{
		}
	}
	[Token(Token = "0x20000AA")]
	public class TabAttribute : GroupAttribute
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string TabName;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string TabBarName;

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x2DB89F8", Offset = "0x2DB89F8", VA = "0x2DB89F8")]
		public TabAttribute(string pathAndName)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x2DB8A88", Offset = "0x2DB8A88", VA = "0x2DB8A88")]
		private static bool split(string pathAndName, out string path, out string tabBar, out string tabname)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000AB")]
	public class SectionAttribute : GroupAttribute
	{
		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Fixed;

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x2299E14", Offset = "0x2299E14", VA = "0x2299E14")]
		public SectionAttribute(string name, bool expanded = true, bool fix = false, int sort = 100)
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class NoSectionAttribute : SectionAttribute
	{
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x312E9E4", Offset = "0x312E9E4", VA = "0x312E9E4")]
		public NoSectionAttribute()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public class Hide : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x600045B")]
		[Address(RVA = "0x15B1FF4", Offset = "0x15B1FF4", VA = "0x15B1FF4")]
		public Hide()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public class Inline : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x600045C")]
		[Address(RVA = "0x15B305C", Offset = "0x15B305C", VA = "0x15B305C")]
		public Inline()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	public class ArrayExAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Draggable;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ShowHeader;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool ShowAdd;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool ShowDelete;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool DropTarget;

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x20053FC", Offset = "0x20053FC", VA = "0x20053FC")]
		public ArrayExAttribute()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class FieldActionAttribute : ActionAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x600045E")]
		[Address(RVA = "0x2F28C44", Offset = "0x2F28C44", VA = "0x2F28C44")]
		public FieldActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class GroupActionAttribute : ActionAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x2F2F5B0", Offset = "0x2F2F5B0", VA = "0x2F2F5B0")]
		public GroupActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class FieldConditionAttribute : ConditionalAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000460")]
		[Address(RVA = "0x2F28C4C", Offset = "0x2F28C4C", VA = "0x2F28C4C")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false, ActionEnum action = ActionEnum.Show, [Optional] object actionData, ActionPositionEnum position = ActionPositionEnum.Below)
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x2F28CA0", Offset = "0x2F28CA0", VA = "0x2F28CA0")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x2F28CB0", Offset = "0x2F28CB0", VA = "0x2F28CB0")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x2F28CD4", Offset = "0x2F28CD4", VA = "0x2F28CD4")]
		public FieldConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class GroupConditionAttribute : ConditionalAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6000464")]
		[Address(RVA = "0x2F2FB14", Offset = "0x2F2FB14", VA = "0x2F2FB14")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x2F2FB20", Offset = "0x2F2FB20", VA = "0x2F2FB20")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x2F2FB30", Offset = "0x2F2FB30", VA = "0x2F2FB30")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x2F2FB54", Offset = "0x2F2FB54", VA = "0x2F2FB54")]
		public GroupConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class Couple<T1, T2>
	{
		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADBF0", Offset = "0x10ADBF0")]
		private T1 <First>k__BackingField;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADC00", Offset = "0x10ADC00")]
		private T2 <Second>k__BackingField;

		[Token(Token = "0x17000067")]
		public T1 First
		{
			[Token(Token = "0x6000468")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C16A0", Offset = "0x10C16A0")]
			get
			{
				return (T1)null;
			}
			[Token(Token = "0x6000469")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C16B0", Offset = "0x10C16B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public T2 Second
		{
			[Token(Token = "0x600046A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C16C0", Offset = "0x10C16C0")]
			get
			{
				return (T2)null;
			}
			[Token(Token = "0x600046B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C16D0", Offset = "0x10C16D0")]
			set
			{
			}
		}

		[Token(Token = "0x600046C")]
		public Couple(T1 first, T2 second)
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public static class DTTween
	{
		[Token(Token = "0x20000B6")]
		public enum EasingMethod
		{
			[Token(Token = "0x400031F")]
			Linear,
			[Token(Token = "0x4000320")]
			ExponentialIn,
			[Token(Token = "0x4000321")]
			ExponentialOut,
			[Token(Token = "0x4000322")]
			ExponentialInOut,
			[Token(Token = "0x4000323")]
			ExponentialOutIn,
			[Token(Token = "0x4000324")]
			CircularIn,
			[Token(Token = "0x4000325")]
			CircularOut,
			[Token(Token = "0x4000326")]
			CircularInOut,
			[Token(Token = "0x4000327")]
			CircularOutIn,
			[Token(Token = "0x4000328")]
			QuadraticIn,
			[Token(Token = "0x4000329")]
			QuadraticOut,
			[Token(Token = "0x400032A")]
			QuadraticInOut,
			[Token(Token = "0x400032B")]
			QuadraticOutIn,
			[Token(Token = "0x400032C")]
			SinusIn,
			[Token(Token = "0x400032D")]
			SinusOut,
			[Token(Token = "0x400032E")]
			SinusInOut,
			[Token(Token = "0x400032F")]
			SinusOutIn,
			[Token(Token = "0x4000330")]
			CubicIn,
			[Token(Token = "0x4000331")]
			CubicOut,
			[Token(Token = "0x4000332")]
			CubicInOut,
			[Token(Token = "0x4000333")]
			CubicOutIn,
			[Token(Token = "0x4000334")]
			QuarticIn,
			[Token(Token = "0x4000335")]
			QuarticOut,
			[Token(Token = "0x4000336")]
			QuarticInOut,
			[Token(Token = "0x4000337")]
			QuarticOutIn,
			[Token(Token = "0x4000338")]
			QuinticIn,
			[Token(Token = "0x4000339")]
			QuinticOut,
			[Token(Token = "0x400033A")]
			QuinticInOut,
			[Token(Token = "0x400033B")]
			QuinticOutIn
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1FF227C", Offset = "0x1FF227C", VA = "0x1FF227C")]
		public static float Ease(EasingMethod method, float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x1FF3220", Offset = "0x1FF3220", VA = "0x1FF3220")]
		public static float Ease(EasingMethod method, float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1FF31F0", Offset = "0x1FF31F0", VA = "0x1FF31F0")]
		public static float Linear(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x1FF4074", Offset = "0x1FF4074", VA = "0x1FF4074")]
		public static float Linear(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1FF2650", Offset = "0x1FF2650", VA = "0x1FF2650")]
		public static float ExpoOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1FF3770", Offset = "0x1FF3770", VA = "0x1FF3770")]
		public static float ExpoOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1FF2600", Offset = "0x1FF2600", VA = "0x1FF2600")]
		public static float ExpoIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1FF3724", Offset = "0x1FF3724", VA = "0x1FF3724")]
		public static float ExpoIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1FF26A4", Offset = "0x1FF26A4", VA = "0x1FF26A4")]
		public static float ExpoInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x1FF37B8", Offset = "0x1FF37B8", VA = "0x1FF37B8")]
		public static float ExpoInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1FF273C", Offset = "0x1FF273C", VA = "0x1FF273C")]
		public static float ExpoOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1FF3850", Offset = "0x1FF3850", VA = "0x1FF3850")]
		public static float ExpoOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1FF2844", Offset = "0x1FF2844", VA = "0x1FF2844")]
		public static float CircOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x1FF393C", Offset = "0x1FF393C", VA = "0x1FF393C")]
		public static float CircOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1FF27EC", Offset = "0x1FF27EC", VA = "0x1FF27EC")]
		public static float CircIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1FF38E8", Offset = "0x1FF38E8", VA = "0x1FF38E8")]
		public static float CircIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1FF289C", Offset = "0x1FF289C", VA = "0x1FF289C")]
		public static float CircInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1FF3990", Offset = "0x1FF3990", VA = "0x1FF3990")]
		public static float CircInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1FF2928", Offset = "0x1FF2928", VA = "0x1FF2928")]
		public static float CircOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1FF3A18", Offset = "0x1FF3A18", VA = "0x1FF3A18")]
		public static float CircOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1FF2A20", Offset = "0x1FF2A20", VA = "0x1FF2A20")]
		public static float QuadOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1FF3AD8", Offset = "0x1FF3AD8", VA = "0x1FF3AD8")]
		public static float QuadOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x1FF29EC", Offset = "0x1FF29EC", VA = "0x1FF29EC")]
		public static float QuadIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1FF3AC4", Offset = "0x1FF3AC4", VA = "0x1FF3AC4")]
		public static float QuadIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x1FF2A5C", Offset = "0x1FF2A5C", VA = "0x1FF2A5C")]
		public static float QuadInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1FF3AF4", Offset = "0x1FF3AF4", VA = "0x1FF3AF4")]
		public static float QuadInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1FF2AE8", Offset = "0x1FF2AE8", VA = "0x1FF2AE8")]
		public static float QuadOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1FF3B7C", Offset = "0x1FF3B7C", VA = "0x1FF3B7C")]
		public static float QuadOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1FF2BAC", Offset = "0x1FF2BAC", VA = "0x1FF2BAC")]
		public static float SineOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1FF3C10", Offset = "0x1FF3C10", VA = "0x1FF3C10")]
		public static float SineOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1FF2B68", Offset = "0x1FF2B68", VA = "0x1FF2B68")]
		public static float SineIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1FF3BD0", Offset = "0x1FF3BD0", VA = "0x1FF3BD0")]
		public static float SineIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1FF2BEC", Offset = "0x1FF2BEC", VA = "0x1FF2BEC")]
		public static float SineInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1FF3C4C", Offset = "0x1FF3C4C", VA = "0x1FF3C4C")]
		public static float SineInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1FF2C80", Offset = "0x1FF2C80", VA = "0x1FF2C80")]
		public static float SineOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1FF3CD4", Offset = "0x1FF3CD4", VA = "0x1FF3CD4")]
		public static float SineOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1FF2D4C", Offset = "0x1FF2D4C", VA = "0x1FF2D4C")]
		public static float CubicOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1FF3D6C", Offset = "0x1FF3D6C", VA = "0x1FF3D6C")]
		public static float CubicOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1FF2D14", Offset = "0x1FF2D14", VA = "0x1FF2D14")]
		public static float CubicIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1FF3D54", Offset = "0x1FF3D54", VA = "0x1FF3D54")]
		public static float CubicIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1FF2D94", Offset = "0x1FF2D94", VA = "0x1FF2D94")]
		public static float CubicInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1FF3D94", Offset = "0x1FF3D94", VA = "0x1FF3D94")]
		public static float CubicInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1FF2E0C", Offset = "0x1FF2E0C", VA = "0x1FF2E0C")]
		public static float CubicOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1FF3DE8", Offset = "0x1FF3DE8", VA = "0x1FF3DE8")]
		public static float CubicOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1FF2EDC", Offset = "0x1FF2EDC", VA = "0x1FF2EDC")]
		public static float QuartOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1FF3E64", Offset = "0x1FF3E64", VA = "0x1FF3E64")]
		public static float QuartOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1FF2EA0", Offset = "0x1FF2EA0", VA = "0x1FF2EA0")]
		public static float QuartIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x1FF3E48", Offset = "0x1FF3E48", VA = "0x1FF3E48")]
		public static float QuartIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x1FF2F24", Offset = "0x1FF2F24", VA = "0x1FF2F24")]
		public static float QuartInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1FF3E8C", Offset = "0x1FF3E8C", VA = "0x1FF3E8C")]
		public static float QuartInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1FF2FA0", Offset = "0x1FF2FA0", VA = "0x1FF2FA0")]
		public static float QuartOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x1FF3EE8", Offset = "0x1FF3EE8", VA = "0x1FF3EE8")]
		public static float QuartOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1FF3074", Offset = "0x1FF3074", VA = "0x1FF3074")]
		public static float QuintOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x1FF3F70", Offset = "0x1FF3F70", VA = "0x1FF3F70")]
		public static float QuintOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1FF3034", Offset = "0x1FF3034", VA = "0x1FF3034")]
		public static float QuintIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1FF3F50", Offset = "0x1FF3F50", VA = "0x1FF3F50")]
		public static float QuintIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1FF30C4", Offset = "0x1FF30C4", VA = "0x1FF30C4")]
		public static float QuintInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1FF3FA0", Offset = "0x1FF3FA0", VA = "0x1FF3FA0")]
		public static float QuintInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1FF314C", Offset = "0x1FF314C", VA = "0x1FF314C")]
		public static float QuintOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1FF4004", Offset = "0x1FF4004", VA = "0x1FF4004")]
		public static float QuintOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000B7")]
	public class DTObjectDump
	{
		[Token(Token = "0x400033C")]
		private const int INDENTSPACES = 5;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string mIndent;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private StringBuilder mSB;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object mObject;

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1FF12E4", Offset = "0x1FF12E4", VA = "0x1FF12E4")]
		public DTObjectDump(object o, int indent = 0)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1FF2074", Offset = "0x1FF2074", VA = "0x1FF2074", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1FF14C4", Offset = "0x1FF14C4", VA = "0x1FF14C4")]
		private void AppendHeader(string name)
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1FF1554", Offset = "0x1FF1554", VA = "0x1FF1554")]
		private void AppendMember(MemberInfo info)
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public static class DTUtility
	{
		[Token(Token = "0x4000340")]
		public const string HelpUrlBase = "https://curvyeditor.com/doclink/";

		[Token(Token = "0x17000069")]
		public static bool IsEditorStateChange
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x1FF408C", Offset = "0x1FF408C", VA = "0x1FF408C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006A")]
		public static bool IsInEditMode
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0x1FF460C", Offset = "0x1FF460C", VA = "0x1FF460C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1FF4084", Offset = "0x1FF4084", VA = "0x1FF4084")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C16E0", Offset = "0x10C16E0")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x1FF4094", Offset = "0x1FF4094", VA = "0x1FF4094")]
		public static float GetHandleSize(Vector3 position)
		{
			return default(float);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1FF427C", Offset = "0x1FF427C", VA = "0x1FF427C")]
		public static float GetHandleSize(Vector3 position, Camera camera, float cameraCenterWidth, float cameraCenterHeight, Vector3 cameraPosition, Vector3 cameraZDirection, Vector3 cameraXDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60004B1")]
		public static void SetPlayerPrefs<T>(string key, T value)
		{
		}

		[Token(Token = "0x60004B2")]
		public static T GetPlayerPrefs<T>(string key, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x1FF43B8", Offset = "0x1FF43B8", VA = "0x1FF43B8")]
		public static float RandomSign()
		{
			return default(float);
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1FF43E4", Offset = "0x1FF43E4", VA = "0x1FF43E4")]
		public static string GetHelpUrl(object forClass)
		{
			return null;
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1FF4450", Offset = "0x1FF4450", VA = "0x1FF4450")]
		public static string GetHelpUrl(Type classType)
		{
			return null;
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1FF4590", Offset = "0x1FF4590", VA = "0x1FF4590")]
		public static Vector3 GetCenterPosition(Vector3 fallback, params Vector3[] vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004B7")]
		public static T CreateGameObject<T>(Transform parent, string name) where T : MonoBehaviour
		{
			return null;
		}
	}
	[Token(Token = "0x20000B9")]
	public static class DTTime
	{
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10ADC10", Offset = "0x10ADC10")]
		private static float _EditorDeltaTime;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10ADC48", Offset = "0x10ADC48")]
		private static float _EditorLastTime;

		[Token(Token = "0x1700006B")]
		public static double TimeSinceStartup
		{
			[Token(Token = "0x60004B9")]
			[Address(RVA = "0x1FF2144", Offset = "0x1FF2144", VA = "0x1FF2144")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700006C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7E08", Offset = "0x10C7E08")]
		public static float deltaTime
		{
			[Token(Token = "0x60004BA")]
			[Address(RVA = "0x1FF214C", Offset = "0x1FF214C", VA = "0x1FF214C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1FF21B4", Offset = "0x1FF21B4", VA = "0x1FF21B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1718", Offset = "0x10C1718")]
		public static void InitializeEditorTime()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1FF2214", Offset = "0x1FF2214", VA = "0x1FF2214")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1750", Offset = "0x10C1750")]
		public static void UpdateEditorTime()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class TimeMeasure : Ring<long>
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Stopwatch mWatch;

		[Token(Token = "0x1700006D")]
		public double LastTicks
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0x2DBFD50", Offset = "0x2DBFD50", VA = "0x2DBFD50")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700006E")]
		public double LastMS
		{
			[Token(Token = "0x60004C2")]
			[Address(RVA = "0x2DBFDC8", Offset = "0x2DBFDC8", VA = "0x2DBFDC8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700006F")]
		public double AverageMS
		{
			[Token(Token = "0x60004C3")]
			[Address(RVA = "0x2DBFDE8", Offset = "0x2DBFDE8", VA = "0x2DBFDE8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000070")]
		public double MinimumMS
		{
			[Token(Token = "0x60004C4")]
			[Address(RVA = "0x2DBFED0", Offset = "0x2DBFED0", VA = "0x2DBFED0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000071")]
		public double MaximumMS
		{
			[Token(Token = "0x60004C5")]
			[Address(RVA = "0x2DBFFEC", Offset = "0x2DBFFEC", VA = "0x2DBFFEC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000072")]
		public double AverageTicks
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0x2DC0108", Offset = "0x2DC0108", VA = "0x2DC0108")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000073")]
		public double MinimumTicks
		{
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0x2DC01E0", Offset = "0x2DC01E0", VA = "0x2DC01E0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000074")]
		public double MaximumTicks
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0x2DC02EC", Offset = "0x2DC02EC", VA = "0x2DC02EC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x2DBFC00", Offset = "0x2DBFC00", VA = "0x2DBFC00")]
		public TimeMeasure(int size)
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x2DBFC94", Offset = "0x2DBFC94", VA = "0x2DBFC94")]
		public void Start()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x2DBFCB0", Offset = "0x2DBFCB0", VA = "0x2DBFCB0")]
		public void Stop()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x2DBFD34", Offset = "0x2DBFD34", VA = "0x2DBFD34")]
		public void Pause()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public static class DTMath
	{
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1FF0460", Offset = "0x1FF0460", VA = "0x1FF0460")]
		public static Vector3 ParallelTransportFrame(Vector3 up, Vector3 tan0, Vector3 tan1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1FF05C0", Offset = "0x1FF05C0", VA = "0x1FF05C0")]
		public static Vector3 LeftTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1FF05D8", Offset = "0x1FF05D8", VA = "0x1FF05D8")]
		public static Vector3 RightTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1FF05F0", Offset = "0x1FF05F0", VA = "0x1FF05F0")]
		public static float Repeat(float t, float length)
		{
			return default(float);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1FF060C", Offset = "0x1FF060C", VA = "0x1FF060C")]
		public static double FixNaN(double v)
		{
			return default(double);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1FF0688", Offset = "0x1FF0688", VA = "0x1FF0688")]
		public static float FixNaN(float v)
		{
			return default(float);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1FF06B8", Offset = "0x1FF06B8", VA = "0x1FF06B8")]
		public static Vector2 FixNaN(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1FF070C", Offset = "0x1FF070C", VA = "0x1FF070C")]
		public static Vector3 FixNaN(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1FF077C", Offset = "0x1FF077C", VA = "0x1FF077C")]
		public static float MapValue(float min, float max, float value, float vMin = -1f, float vMax = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x1FF0798", Offset = "0x1FF0798", VA = "0x1FF0798")]
		public static float SnapPrecision(float value, int decimals)
		{
			return default(float);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1FF081C", Offset = "0x1FF081C", VA = "0x1FF081C")]
		public static Vector2 SnapPrecision(Vector2 value, int decimals)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1FF0870", Offset = "0x1FF0870", VA = "0x1FF0870")]
		public static Vector3 SnapPrecision(Vector3 value, int decimals)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1FF08E4", Offset = "0x1FF08E4", VA = "0x1FF08E4")]
		public static float LinePointDistanceSqr(Vector3 l1, Vector3 l2, Vector3 p, out float frag)
		{
			return default(float);
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1FF09DC", Offset = "0x1FF09DC", VA = "0x1FF09DC")]
		public static bool RayLineSegmentIntersection(Vector2 r0, Vector2 dir, Vector2 l1, Vector2 l2, out Vector2 hit, out float frag)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x1FF0A7C", Offset = "0x1FF0A7C", VA = "0x1FF0A7C")]
		public static bool ShortestIntersectionLine(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 resultSegmentA, out Vector3 resultSegmentB)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x1FF0D6C", Offset = "0x1FF0D6C", VA = "0x1FF0D6C")]
		public static bool LineLineIntersection(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 hitPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1FF0E98", Offset = "0x1FF0E98", VA = "0x1FF0E98")]
		public static bool LineLineIntersect(Vector2 line1A, Vector2 line1B, Vector2 line2A, Vector2 line2B, out Vector2 hitPoint, bool segmentOnly = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1FF0FC0", Offset = "0x1FF0FC0", VA = "0x1FF0FC0")]
		public static bool PointInsideTriangle(Vector3 A, Vector3 B, Vector3 C, Vector3 p, out float ac, out float ab, bool edgesAllowed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000BC")]
	public class UnityEventEx<T0> : UnityEvent<T0>
	{
		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object mCallerList;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MethodInfo mCallsCount;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCount;

		[Token(Token = "0x60004DB")]
		public void AddListenerOnce(UnityAction<T0> call)
		{
		}

		[Token(Token = "0x60004DC")]
		public bool HasListeners()
		{
			return default(bool);
		}

		[Token(Token = "0x60004DD")]
		public void CheckForListeners()
		{
		}

		[Token(Token = "0x60004DE")]
		public UnityEventEx()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public static class DTLog
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x1FEFE30", Offset = "0x1FEFE30", VA = "0x1FEFE30")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x1FEFE94", Offset = "0x1FEFE94", VA = "0x1FEFE94")]
		public static void Log(object message, [CanBeNull] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1FEFF08", Offset = "0x1FEFF08", VA = "0x1FEFF08")]
		public static void LogError(object message)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1FEFF6C", Offset = "0x1FEFF6C", VA = "0x1FEFF6C")]
		public static void LogError(object message, [CanBeNull] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1FEFFE0", Offset = "0x1FEFFE0", VA = "0x1FEFFE0")]
		public static void LogErrorFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1FF0054", Offset = "0x1FF0054", VA = "0x1FF0054")]
		public static void LogErrorFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1FF00D0", Offset = "0x1FF00D0", VA = "0x1FF00D0")]
		public static void LogException(Exception exception)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1FF0134", Offset = "0x1FF0134", VA = "0x1FF0134")]
		public static void LogException(Exception exception, [CanBeNull] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1FF01A8", Offset = "0x1FF01A8", VA = "0x1FF01A8")]
		public static void LogFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1FF021C", Offset = "0x1FF021C", VA = "0x1FF021C")]
		public static void LogFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x1FF0298", Offset = "0x1FF0298", VA = "0x1FF0298")]
		public static void LogWarning(object message)
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1FF02FC", Offset = "0x1FF02FC", VA = "0x1FF02FC")]
		public static void LogWarning(object message, [CanBeNull] UnityEngine.Object context)
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x1FF0370", Offset = "0x1FF0370", VA = "0x1FF0370")]
		public static void LogWarningFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1FF03E4", Offset = "0x1FF03E4", VA = "0x1FF03E4")]
		public static void LogWarningFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public static class Environment
	{
		[Token(Token = "0x17000075")]
		public static bool IsThreadingSupported
		{
			[MethodImpl(256)]
			[Token(Token = "0x60004ED")]
			[Address(RVA = "0x3379990", Offset = "0x3379990", VA = "0x3379990")]
			get
			{
				return default(bool);
			}
		}
	}
	[Serializable]
	[Token(Token = "0x20000BF")]
	public struct FloatRegion : IEquatable<FloatRegion>
	{
		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float From;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float To;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x17000076")]
		public static FloatRegion ZeroOne
		{
			[Token(Token = "0x60004F0")]
			[Address(RVA = "0x2F2BE84", Offset = "0x2F2BE84", VA = "0x2F2BE84")]
			get
			{
				return default(FloatRegion);
			}
		}

		[Token(Token = "0x17000077")]
		public bool Positive
		{
			[Token(Token = "0x60004F3")]
			[Address(RVA = "0x2F2BF7C", Offset = "0x2F2BF7C", VA = "0x2F2BF7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000078")]
		public float Low
		{
			[Token(Token = "0x60004F4")]
			[Address(RVA = "0x2F2BF30", Offset = "0x2F2BF30", VA = "0x2F2BF30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004F5")]
			[Address(RVA = "0x2F2BF40", Offset = "0x2F2BF40", VA = "0x2F2BF40")]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public float High
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0x2F2BF54", Offset = "0x2F2BF54", VA = "0x2F2BF54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0x2F2BF64", Offset = "0x2F2BF64", VA = "0x2F2BF64")]
			set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		public float Random
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0x2F2BF8C", Offset = "0x2F2BF8C", VA = "0x2F2BF8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007B")]
		public float Next
		{
			[Token(Token = "0x60004F9")]
			[Address(RVA = "0x2F2BF98", Offset = "0x2F2BF98", VA = "0x2F2BF98")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007C")]
		public float Length
		{
			[Token(Token = "0x60004FA")]
			[Address(RVA = "0x2F2BFB4", Offset = "0x2F2BFB4", VA = "0x2F2BFB4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007D")]
		public float LengthPositive
		{
			[Token(Token = "0x60004FB")]
			[Address(RVA = "0x2F2BFC0", Offset = "0x2F2BFC0", VA = "0x2F2BFC0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x2F2BE68", Offset = "0x2F2BE68", VA = "0x2F2BE68")]
		public FloatRegion(float value)
		{
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x2F2BE78", Offset = "0x2F2BE78", VA = "0x2F2BE78")]
		public FloatRegion(float A, float B)
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x2F2BE90", Offset = "0x2F2BE90", VA = "0x2F2BE90")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x2F2BEA4", Offset = "0x2F2BEA4", VA = "0x2F2BEA4")]
		public void Clamp(float low, float high)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x2F2BFD8", Offset = "0x2F2BFD8", VA = "0x2F2BFD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x2F2C07C", Offset = "0x2F2C07C", VA = "0x2F2C07C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x2F2C0B4", Offset = "0x2F2C0B4", VA = "0x2F2C0B4", Slot = "4")]
		public bool Equals(FloatRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x2F2C104", Offset = "0x2F2C104", VA = "0x2F2C104", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x2F2C1B0", Offset = "0x2F2C1B0", VA = "0x2F2C1B0")]
		public static FloatRegion operator +(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x2F2C1E4", Offset = "0x2F2C1E4", VA = "0x2F2C1E4")]
		public static FloatRegion operator -(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x2F2C218", Offset = "0x2F2C218", VA = "0x2F2C218")]
		public static FloatRegion operator -(FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x2F2C230", Offset = "0x2F2C230", VA = "0x2F2C230")]
		public static FloatRegion operator *(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x2F2C258", Offset = "0x2F2C258", VA = "0x2F2C258")]
		public static FloatRegion operator *(float v, FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x2F2C280", Offset = "0x2F2C280", VA = "0x2F2C280")]
		public static FloatRegion operator /(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x2F2C2A8", Offset = "0x2F2C2A8", VA = "0x2F2C2A8")]
		public static bool operator ==(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x2F2C318", Offset = "0x2F2C318", VA = "0x2F2C318")]
		public static bool operator !=(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C0")]
	public interface IPool
	{
		[Token(Token = "0x1700007E")]
		[NotNull]
		string Identifier
		{
			[Token(Token = "0x6000508")]
			get;
			[Token(Token = "0x6000509")]
			set;
		}

		[Token(Token = "0x1700007F")]
		[NotNull]
		PoolSettings Settings
		{
			[Token(Token = "0x600050A")]
			get;
		}

		[Token(Token = "0x17000080")]
		int Count
		{
			[Token(Token = "0x600050E")]
			get;
		}

		[Token(Token = "0x600050B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1788", Offset = "0x10C1788")]
		void Clear();

		[Token(Token = "0x600050C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1798", Offset = "0x10C1798")]
		void Reset();

		[Token(Token = "0x600050D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C17A8", Offset = "0x10C17A8")]
		void Update();
	}
	[Token(Token = "0x20000C1")]
	public interface IPoolable
	{
		[Token(Token = "0x600050F")]
		void OnBeforePush();

		[Token(Token = "0x6000510")]
		void OnAfterPop();
	}
	[Serializable]
	[Token(Token = "0x20000C2")]
	public struct IntRegion : IEquatable<IntRegion>
	{
		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int From;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int To;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x17000081")]
		public static IntRegion ZeroOne
		{
			[Token(Token = "0x6000513")]
			[Address(RVA = "0x15B5774", Offset = "0x15B5774", VA = "0x15B5774")]
			get
			{
				return default(IntRegion);
			}
		}

		[Token(Token = "0x17000082")]
		public bool Positive
		{
			[Token(Token = "0x6000516")]
			[Address(RVA = "0x15B5864", Offset = "0x15B5864", VA = "0x15B5864")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		public int Low
		{
			[Token(Token = "0x6000517")]
			[Address(RVA = "0x15B5818", Offset = "0x15B5818", VA = "0x15B5818")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000518")]
			[Address(RVA = "0x15B5828", Offset = "0x15B5828", VA = "0x15B5828")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public int High
		{
			[Token(Token = "0x6000519")]
			[Address(RVA = "0x15B583C", Offset = "0x15B583C", VA = "0x15B583C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600051A")]
			[Address(RVA = "0x15B584C", Offset = "0x15B584C", VA = "0x15B584C")]
			set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public int Random
		{
			[Token(Token = "0x600051B")]
			[Address(RVA = "0x15B5874", Offset = "0x15B5874", VA = "0x15B5874")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000086")]
		public int Length
		{
			[Token(Token = "0x600051C")]
			[Address(RVA = "0x15B5884", Offset = "0x15B5884", VA = "0x15B5884")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000087")]
		public int LengthPositive
		{
			[Token(Token = "0x600051D")]
			[Address(RVA = "0x15B5890", Offset = "0x15B5890", VA = "0x15B5890")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x15B5758", Offset = "0x15B5758", VA = "0x15B5758")]
		public IntRegion(int value)
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x15B5768", Offset = "0x15B5768", VA = "0x15B5768")]
		public IntRegion(int A, int B)
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x15B5780", Offset = "0x15B5780", VA = "0x15B5780")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x15B5794", Offset = "0x15B5794", VA = "0x15B5794")]
		public void Clamp(int low, int high)
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x15B58A4", Offset = "0x15B58A4", VA = "0x15B58A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x15B5948", Offset = "0x15B5948", VA = "0x15B5948", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x15B5980", Offset = "0x15B5980", VA = "0x15B5980", Slot = "4")]
		public bool Equals(IntRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x15B59C8", Offset = "0x15B59C8", VA = "0x15B59C8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x15B5A68", Offset = "0x15B5A68", VA = "0x15B5A68")]
		public static IntRegion operator +(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x15B5A84", Offset = "0x15B5A84", VA = "0x15B5A84")]
		public static IntRegion operator -(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x15B5AA0", Offset = "0x15B5AA0", VA = "0x15B5AA0")]
		public static IntRegion operator -(IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x15B5AB8", Offset = "0x15B5AB8", VA = "0x15B5AB8")]
		public static IntRegion operator *(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x15B5AD0", Offset = "0x15B5AD0", VA = "0x15B5AD0")]
		public static IntRegion operator *(int v, IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x15B5AEC", Offset = "0x15B5AEC", VA = "0x15B5AEC")]
		public static IntRegion operator /(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x15B5B04", Offset = "0x15B5B04", VA = "0x15B5B04")]
		public static bool operator ==(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x15B5B3C", Offset = "0x15B5B3C", VA = "0x15B5B3C")]
		public static bool operator !=(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000C3")]
	internal class LoopState<T>
	{
		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADC80", Offset = "0x10ADC80")]
		private short <StartIndex>k__BackingField;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADC90", Offset = "0x10ADC90")]
		private short <EndIndex>k__BackingField;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADCA0", Offset = "0x10ADCA0")]
		private IEnumerable<T> <Items>k__BackingField;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADCB0", Offset = "0x10ADCB0")]
		private int <ItemsCount>k__BackingField;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADCC0", Offset = "0x10ADCC0")]
		private Action<T, int, int> <Action>k__BackingField;

		[Token(Token = "0x17000088")]
		public short StartIndex
		{
			[Token(Token = "0x600052A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C17B8", Offset = "0x10C17B8")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x600052B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C17C8", Offset = "0x10C17C8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public short EndIndex
		{
			[Token(Token = "0x600052C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C17D8", Offset = "0x10C17D8")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x600052D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C17E8", Offset = "0x10C17E8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public IEnumerable<T> Items
		{
			[Token(Token = "0x600052E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C17F8", Offset = "0x10C17F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600052F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1808", Offset = "0x10C1808")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public int ItemsCount
		{
			[Token(Token = "0x6000530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1818", Offset = "0x10C1818")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000531")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1828", Offset = "0x10C1828")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public Action<T, int, int> Action
		{
			[Token(Token = "0x6000532")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1838", Offset = "0x10C1838")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000533")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1848", Offset = "0x10C1848")]
			private set
			{
			}
		}

		[Token(Token = "0x6000534")]
		public LoopState()
		{
		}

		[Token(Token = "0x6000535")]
		public LoopState(short startIndex, short endIndex, IEnumerable<T> items, int itemsCount, Action<T, int, int> action)
		{
		}

		[Token(Token = "0x6000536")]
		public void Set(short startIndex, short endIndex, IEnumerable<T> items, int itemsCount, Action<T, int, int> action)
		{
		}
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A2B68", Offset = "0x10A2B68")]
	public class Pool<T> : IPool
	{
		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> mObjects;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADCD0", Offset = "0x10ADCD0")]
		private string <Identifier>k__BackingField;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ADCE0", Offset = "0x10ADCE0")]
		private PoolSettings <Settings>k__BackingField;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mLastTime;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mDeltaTime;

		[Token(Token = "0x1700008D")]
		public string Identifier
		{
			[Token(Token = "0x6000537")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1858", Offset = "0x10C1858")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1868", Offset = "0x10C1868")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000539")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1878", Offset = "0x10C1878")]
			get
			{
				return null;
			}
			[Token(Token = "0x600053A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1888", Offset = "0x10C1888")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public Type Type
		{
			[Token(Token = "0x600053B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		public int Count
		{
			[Token(Token = "0x6000540")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600053C")]
		public Pool([Optional] PoolSettings settings)
		{
		}

		[Token(Token = "0x600053D")]
		public void Update()
		{
		}

		[Token(Token = "0x600053E")]
		public void Reset()
		{
		}

		[Token(Token = "0x600053F")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000541")]
		public virtual T Pop([Optional] Transform parent)
		{
			return (T)null;
		}

		[Token(Token = "0x6000542")]
		public virtual void Push(T item)
		{
		}

		[Token(Token = "0x6000543")]
		protected virtual void sendBeforePush(T item)
		{
		}

		[Token(Token = "0x6000544")]
		protected virtual void sendAfterPop(T item)
		{
		}

		[Token(Token = "0x6000545")]
		protected virtual void setParent(T item, Transform parent)
		{
		}

		[Token(Token = "0x6000546")]
		protected virtual T create()
		{
			return (T)null;
		}

		[Token(Token = "0x6000547")]
		protected virtual void destroy(T item)
		{
		}

		[Token(Token = "0x6000548")]
		private void log(string msg)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C5")]
	public class PoolSettings
	{
		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADCF0", Offset = "0x10ADCF0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10ADCF0", Offset = "0x10ADCF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10ADCF0", Offset = "0x10ADCF0")]
		private bool m_AutoCreate;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADDA0", Offset = "0x10ADDA0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10ADDA0", Offset = "0x10ADDA0")]
		[SerializeField]
		private bool m_AutoEnableDisable;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADE2C", Offset = "0x10ADE2C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10ADE2C", Offset = "0x10ADE2C")]
		public bool Debug;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10ADEA0", Offset = "0x10ADEA0")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10ADEA0", Offset = "0x10ADEA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADEA0", Offset = "0x10ADEA0")]
		[Positive]
		private int minimumCount;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Positive]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10ADF44", Offset = "0x10ADF44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADF44", Offset = "0x10ADF44")]
		private int maximumCount;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10ADFC4", Offset = "0x10ADFC4")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10ADFC4", Offset = "0x10ADFC4")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10ADFC4", Offset = "0x10ADFC4")]
		[Positive]
		private float countAdjustmentInterval;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AE084", Offset = "0x10AE084")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AE084", Offset = "0x10AE084")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AE084", Offset = "0x10AE084")]
		[SerializeField]
		private bool initializeCountConstrained;

		[Token(Token = "0x17000091")]
		public bool InitializeCountConstrained
		{
			[Token(Token = "0x6000549")]
			[Address(RVA = "0x1CC0D2C", Offset = "0x1CC0D2C", VA = "0x1CC0D2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600054A")]
			[Address(RVA = "0x1CC0D34", Offset = "0x1CC0D34", VA = "0x1CC0D34")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public bool AutoCreate
		{
			[Token(Token = "0x600054B")]
			[Address(RVA = "0x1CC0D40", Offset = "0x1CC0D40", VA = "0x1CC0D40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600054C")]
			[Address(RVA = "0x1CC0D48", Offset = "0x1CC0D48", VA = "0x1CC0D48")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public bool AutoEnableDisable
		{
			[Token(Token = "0x600054D")]
			[Address(RVA = "0x1CC0D54", Offset = "0x1CC0D54", VA = "0x1CC0D54")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600054E")]
			[Address(RVA = "0x1CC0D5C", Offset = "0x1CC0D5C", VA = "0x1CC0D5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public int MinimumCount
		{
			[Token(Token = "0x600054F")]
			[Address(RVA = "0x1CC0D68", Offset = "0x1CC0D68", VA = "0x1CC0D68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000550")]
			[Address(RVA = "0x1CC0D70", Offset = "0x1CC0D70", VA = "0x1CC0D70")]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public int MaximumCount
		{
			[Token(Token = "0x6000551")]
			[Address(RVA = "0x1CC0D9C", Offset = "0x1CC0D9C", VA = "0x1CC0D9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000552")]
			[Address(RVA = "0x1CC0DA4", Offset = "0x1CC0DA4", VA = "0x1CC0DA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public float CountAdjustmentInterval
		{
			[Token(Token = "0x6000553")]
			[Address(RVA = "0x1CC0DD0", Offset = "0x1CC0DD0", VA = "0x1CC0DD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000554")]
			[Address(RVA = "0x1CC0DD8", Offset = "0x1CC0DD8", VA = "0x1CC0DD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7E60", Offset = "0x10C7E60")]
		public bool Prewarm
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0x1CC0E08", Offset = "0x1CC0E08", VA = "0x1CC0E08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000556")]
			[Address(RVA = "0x1CC0E10", Offset = "0x1CC0E10", VA = "0x1CC0E10")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7E98", Offset = "0x10C7E98")]
		public int MinItems
		{
			[Token(Token = "0x6000557")]
			[Address(RVA = "0x1CC0E1C", Offset = "0x1CC0E1C", VA = "0x1CC0E1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000558")]
			[Address(RVA = "0x1CC0E24", Offset = "0x1CC0E24", VA = "0x1CC0E24")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7ED0", Offset = "0x10C7ED0")]
		public int Threshold
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0x1CC0E50", Offset = "0x1CC0E50", VA = "0x1CC0E50")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600055A")]
			[Address(RVA = "0x1CC0E58", Offset = "0x1CC0E58", VA = "0x1CC0E58")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7F08", Offset = "0x10C7F08")]
		public float Speed
		{
			[Token(Token = "0x600055B")]
			[Address(RVA = "0x1CC0E84", Offset = "0x1CC0E84", VA = "0x1CC0E84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600055C")]
			[Address(RVA = "0x1CC0E8C", Offset = "0x1CC0E8C", VA = "0x1CC0E8C")]
			set
			{
			}
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x1CC0D04", Offset = "0x1CC0D04", VA = "0x1CC0D04")]
		public PoolSettings()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1CC0620", Offset = "0x1CC0620", VA = "0x1CC0620")]
		public PoolSettings(PoolSettings src)
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1CC0EBC", Offset = "0x1CC0EBC", VA = "0x1CC0EBC")]
		public void SetToDefault()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1CC0F28", Offset = "0x1CC0F28", VA = "0x1CC0F28")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1898", Offset = "0x10C1898")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1CBFB44", Offset = "0x1CBFB44", VA = "0x1CBFB44")]
		public void Validate()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A2B78", Offset = "0x10A2B78")]
	public enum DTMessageType
	{
		[Token(Token = "0x400035F")]
		None,
		[Token(Token = "0x4000360")]
		Info,
		[Token(Token = "0x4000361")]
		Warning,
		[Token(Token = "0x4000362")]
		Error
	}
	[Token(Token = "0x20000C7")]
	public enum AttributeOptionsFlags
	{
		[Token(Token = "0x4000364")]
		None = 0,
		[Token(Token = "0x4000365")]
		Compact = 1,
		[Token(Token = "0x4000366")]
		Clipboard = 128,
		[Token(Token = "0x4000367")]
		Zero = 256,
		[Token(Token = "0x4000368")]
		One = 512,
		[Token(Token = "0x4000369")]
		Negate = 1024,
		[Token(Token = "0x400036A")]
		Full = 1920,
		[Token(Token = "0x400036B")]
		FullCompact = 1921
	}
	[Token(Token = "0x20000C8")]
	public class DTPropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Label;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Tooltip;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Color;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AttributeOptionsFlags Options;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int Precision;

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1FF2094", Offset = "0x1FF2094", VA = "0x1FF2094")]
		public DTPropertyAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class LabelAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000563")]
		[Address(RVA = "0x15BA954", Offset = "0x15BA954", VA = "0x15BA954")]
		public LabelAttribute()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x15BA9A8", Offset = "0x15BA9A8", VA = "0x15BA9A8")]
		public LabelAttribute(string label, string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public class ToggleButtonAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000565")]
		[Address(RVA = "0x2DC07F4", Offset = "0x2DC07F4", VA = "0x2DC07F4")]
		public ToggleButtonAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public class LayerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000566")]
		[Address(RVA = "0x15BA9B0", Offset = "0x15BA9B0", VA = "0x15BA9B0")]
		public LayerAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public class TagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000567")]
		[Address(RVA = "0x2DB8C64", Offset = "0x2DB8C64", VA = "0x2DB8C64")]
		public TagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public class VectorExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000568")]
		[Address(RVA = "0x2EB66C0", Offset = "0x2EB66C0", VA = "0x2EB66C0")]
		public VectorExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CE")]
	public class AnimationCurveExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000569")]
		[Address(RVA = "0x200525C", Offset = "0x200525C", VA = "0x200525C")]
		public AnimationCurveExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class MinAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinValue;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x3125E84", Offset = "0x3125E84", VA = "0x3125E84")]
		public MinAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x3125EB8", Offset = "0x3125EB8", VA = "0x3125EB8")]
		public MinAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class PositiveAttribute : MinAttribute
	{
		[Token(Token = "0x600056C")]
		[Address(RVA = "0x1CC0F2C", Offset = "0x1CC0F2C", VA = "0x1CC0F2C")]
		public PositiveAttribute()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class MaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MaxValue;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x3123300", Offset = "0x3123300", VA = "0x3123300")]
		public MaxAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x3123334", Offset = "0x3123334", VA = "0x3123334")]
		public MaxAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D2")]
	public class RangeExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinValue;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MaxValue;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool Slider;

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x1CC2618", Offset = "0x1CC2618", VA = "0x1CC2618")]
		public RangeExAttribute(float minValue, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1CC265C", Offset = "0x1CC265C", VA = "0x1CC265C")]
		public RangeExAttribute(string minFieldOrProperty, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x1CC26B4", Offset = "0x1CC26B4", VA = "0x1CC26B4")]
		public RangeExAttribute(float minValue, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1CC2708", Offset = "0x1CC2708", VA = "0x1CC2708")]
		public RangeExAttribute(string minFieldOrProperty, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class MinMaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string MaxValueField;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Min;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string MinBoundFieldOrPropertyName;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Max;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string MaxBoundFieldOrPropertyName;

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x3125EF4", Offset = "0x3125EF4", VA = "0x3125EF4")]
		public MinMaxAttribute(string maxValueField, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class EnumFlagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000574")]
		[Address(RVA = "0x3379980", Offset = "0x3379980", VA = "0x3379980")]
		public EnumFlagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class ObjectSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x312FAC8", Offset = "0x312FAC8", VA = "0x312FAC8")]
		public ObjectSelectorAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class PathSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x20000D7")]
		public enum DialogMode
		{
			[Token(Token = "0x4000385")]
			OpenFile,
			[Token(Token = "0x4000386")]
			OpenFolder,
			[Token(Token = "0x4000387")]
			CreateFile
		}

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly DialogMode Mode;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Title;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Directory;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string Extension;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string DefaultName;

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x3131D88", Offset = "0x3131D88", VA = "0x3131D88")]
		public PathSelectorAttribute(DialogMode mode = DialogMode.OpenFile)
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class EnumSelectionGridAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000577")]
		[Address(RVA = "0x3379988", Offset = "0x3379988", VA = "0x3379988")]
		public EnumSelectionGridAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class DTRegionAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool RegionIsOptional;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string RegionOptionsPropertyName;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool UseSlider;

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1FF20EC", Offset = "0x1FF20EC", VA = "0x1FF20EC")]
		public DTRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class FloatRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x2F2C38C", Offset = "0x2F2C38C", VA = "0x2F2C38C")]
		public FloatRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class IntRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x600057A")]
		[Address(RVA = "0x15B5B74", Offset = "0x15B5B74", VA = "0x15B5B74")]
		public IntRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public struct RegionOptions<T>
	{
		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelFrom;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelTo;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OptionalTooltip;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampFrom;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampTo;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMin;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMax;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMin;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMax;

		[Token(Token = "0x1700009B")]
		public static RegionOptions<T> Default
		{
			[Token(Token = "0x600057B")]
			get
			{
				return default(RegionOptions<T>);
			}
		}

		[Token(Token = "0x600057C")]
		public static RegionOptions<T> MinMax(T min, T max)
		{
			return default(RegionOptions<T>);
		}
	}
	[Token(Token = "0x20000DD")]
	public enum DTValueClamping
	{
		[Token(Token = "0x4000395")]
		None,
		[Token(Token = "0x4000396")]
		Min,
		[Token(Token = "0x4000397")]
		Max,
		[Token(Token = "0x4000398")]
		Range
	}
	[Token(Token = "0x20000DE")]
	internal class QueuedCallback
	{
		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WaitCallback Callback;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object State;

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1CC2610", Offset = "0x1CC2610", VA = "0x1CC2610")]
		public QueuedCallback()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A2B88", Offset = "0x10A2B88")]
	public class Ring<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> mList;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE134", Offset = "0x10AE134")]
		private int <Size>k__BackingField;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mIndex;

		[Token(Token = "0x1700009C")]
		public int Size
		{
			[Token(Token = "0x600057E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C18D0", Offset = "0x10C18D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600057F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C18E0", Offset = "0x10C18E0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public T Item
		{
			[Token(Token = "0x6000586")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000587")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public int Count
		{
			[Token(Token = "0x600058B")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009F")]
		public bool IsReadOnly
		{
			[Token(Token = "0x600058C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000580")]
		public Ring(int size)
		{
		}

		[Token(Token = "0x6000581")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000582")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000583")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000584")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000585")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000588")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000589")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x600058D")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600058E")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20000E0")]
	internal class SimplePool<T> where T : new()
	{
		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> freeItemsBackfield;

		[Token(Token = "0x600058F")]
		public SimplePool(int preCreatedElementsCount)
		{
		}

		[Token(Token = "0x6000590")]
		public T GetItem()
		{
			return (T)null;
		}

		[Token(Token = "0x6000591")]
		public void ReleaseItem(T item)
		{
		}
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A2BC0", Offset = "0x10A2BC0")]
	public class ThreadPoolWorker : IDisposable
	{
		[Token(Token = "0x20000E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2BF8", Offset = "0x10A2BF8")]
		private sealed class <>c__DisplayClass4_0<T>
		{
			[Token(Token = "0x40003A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> action;

			[Token(Token = "0x40003A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int iterationsCount;

			[Token(Token = "0x40003A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T, int, int> <>9__0;

			[Token(Token = "0x40003A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WaitCallback <>9__1;

			[Token(Token = "0x60005A0")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60005A1")]
			internal void <ParralelFor>b__0(T item, int itemIndex, int itemsCount)
			{
			}

			[Token(Token = "0x60005A2")]
			internal void <ParralelFor>b__1(object state)
			{
			}
		}

		[Token(Token = "0x20000E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2C08", Offset = "0x10A2C08")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40003A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action act;

			[Token(Token = "0x60005A3")]
			[Address(RVA = "0x1DE3CF0", Offset = "0x1DE3CF0", VA = "0x1DE3CF0")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60005A4")]
			[Address(RVA = "0x1DE3CF8", Offset = "0x1DE3CF8", VA = "0x1DE3CF8")]
			internal void <QueueWorkItem>b__0(object x)
			{
			}
		}

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _remainingWorkItems;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManualResetEvent _done;

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x2DBEA88", Offset = "0x2DBEA88", VA = "0x2DBEA88")]
		public void QueueWorkItem(WaitCallback callback)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x2DBEB28", Offset = "0x2DBEB28", VA = "0x2DBEB28")]
		public void QueueWorkItem(Action act)
		{
		}

		[Token(Token = "0x6000594")]
		public void ParralelFor<T>(Action<T> action, List<T> list)
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x2DBEC50", Offset = "0x2DBEC50", VA = "0x2DBEC50")]
		private void QueueWorkItem(QueuedCallback callback)
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x2DBEA90", Offset = "0x2DBEA90", VA = "0x2DBEA90")]
		public void QueueWorkItem(WaitCallback callback, object state)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x2DBEB30", Offset = "0x2DBEB30", VA = "0x2DBEB30")]
		public void QueueWorkItem(Action act, object state)
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x2DBEE08", Offset = "0x2DBEE08", VA = "0x2DBEE08")]
		public bool WaitAll()
		{
			return default(bool);
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x2DBEF60", Offset = "0x2DBEF60", VA = "0x2DBEF60")]
		public bool WaitAll(TimeSpan timeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x2DBEE14", Offset = "0x2DBEE14", VA = "0x2DBEE14")]
		public bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x2DBF0A8", Offset = "0x2DBF0A8", VA = "0x2DBF0A8")]
		private void HandleWorkItem(object state)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x2DBEFC0", Offset = "0x2DBEFC0", VA = "0x2DBEFC0")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x2DBED94", Offset = "0x2DBED94", VA = "0x2DBED94")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x2DBF194", Offset = "0x2DBF194", VA = "0x2DBF194", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x2DBF258", Offset = "0x2DBF258", VA = "0x2DBF258")]
		public ThreadPoolWorker()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class ThreadPoolWorker<T> : IDisposable
	{
		[Token(Token = "0x20000E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2C18", Offset = "0x10A2C18")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x40003AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> action;

			[Token(Token = "0x60005B1")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60005B2")]
			internal void <ParralelFor>b__0(T item, int itemIndex, int itemsCount)
			{
			}
		}

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<QueuedCallback> queuedCallbackPool;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<LoopState<T>> loopStatePool;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _remainingWorkItems;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ManualResetEvent _done;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly WaitCallback handleWorkItemCallBack;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly WaitCallback handleLoopCallBack;

		[Token(Token = "0x170000A0")]
		private static int ThreadsToUseCount
		{
			[Token(Token = "0x60005AB")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005A5")]
		public ThreadPoolWorker()
		{
		}

		[Token(Token = "0x60005A6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C18F0", Offset = "0x10C18F0")]
		public void ParralelFor(Action<T> action, List<T> list)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60005A7")]
		public void ParallelFor(Action<T, int, int> action, IEnumerable<T> list)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60005A8")]
		public void ParallelFor(Action<T, int, int> action, IEnumerable<T> list, int elementsCount)
		{
		}

		[Token(Token = "0x60005A9")]
		public void Dispose()
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60005AA")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C1928", Offset = "0x10C1928")]
		private void DoParallelFor(Action<T, int, int> action, IEnumerable<T> list, int elementsCount)
		{
		}

		[Token(Token = "0x60005AC")]
		private bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AD")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x60005AE")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x60005AF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1960", Offset = "0x10C1960")]
		private void <.ctor>b__0_0(object o)
		{
		}

		[Token(Token = "0x60005B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1970", Offset = "0x10C1970")]
		private void <.ctor>b__0_1(object state)
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class WeightedRandom<T>
	{
		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> mData;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrentPosition;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T mCurrentItem;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE144", Offset = "0x10AE144")]
		private int <Seed>k__BackingField;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE154", Offset = "0x10AE154")]
		private bool <RandomizeSeed>k__BackingField;

		[Token(Token = "0x170000A1")]
		public int Seed
		{
			[Token(Token = "0x60005B3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1980", Offset = "0x10C1980")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1990", Offset = "0x10C1990")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x60005B5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C19A0", Offset = "0x10C19A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005B6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C19B0", Offset = "0x10C19B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		private int Capacity
		{
			[Token(Token = "0x60005B7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A4")]
		public int Size
		{
			[Token(Token = "0x60005B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005B9")]
		public WeightedRandom(int initCapacity = 0)
		{
		}

		[Token(Token = "0x60005BA")]
		public WeightedRandom(int initCapacity, int seed)
		{
		}

		[Token(Token = "0x60005BB")]
		public void Add(T item, int amount)
		{
		}

		[Token(Token = "0x60005BC")]
		public T Next()
		{
			return (T)null;
		}

		[Token(Token = "0x60005BD")]
		public void Reset()
		{
		}

		[Token(Token = "0x60005BE")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A2C28", Offset = "0x10A2C28")]
	public class ComponentPool : UnityObjectPool<UnityEngine.Component>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x20000E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2C60", Offset = "0x10A2C60")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40003B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string typeName;

			[Token(Token = "0x60005CA")]
			[Address(RVA = "0x2236B94", Offset = "0x2236B94", VA = "0x2236B94")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60005CB")]
			[Address(RVA = "0x2236B9C", Offset = "0x2236B9C", VA = "0x2236B9C")]
			internal bool <OnAfterDeserialize>b__0(Type t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private string m_Identifier;

		[Token(Token = "0x170000A5")]
		public override string Identifier
		{
			[Token(Token = "0x60005BF")]
			[Address(RVA = "0x2542CA8", Offset = "0x2542CA8", VA = "0x2542CA8", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005C0")]
			[Address(RVA = "0x2542CB0", Offset = "0x2542CB0", VA = "0x2542CB0", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public Type Type
		{
			[Token(Token = "0x60005C1")]
			[Address(RVA = "0x2542D04", Offset = "0x2542D04", VA = "0x2542D04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x2542DFC", Offset = "0x2542DFC", VA = "0x2542DFC")]
		public void Initialize(Type type, PoolSettings settings)
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x2542EC0", Offset = "0x2542EC0", VA = "0x2542EC0", Slot = "23")]
		protected override UnityEngine.Component CreateObject()
		{
			return null;
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x2543030", Offset = "0x2543030", VA = "0x2543030", Slot = "24")]
		protected override GameObject GetItemGameObject(UnityEngine.Component item)
		{
			return null;
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x254304C", Offset = "0x254304C", VA = "0x254304C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C19C0", Offset = "0x10C19C0")]
		public void OnSceneLoaded(UnityEngine.SceneManagement.Scene scn, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60005C6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C19D0", Offset = "0x10C19D0")]
		public T Pop<T>(Transform parent) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x2543050", Offset = "0x2543050", VA = "0x2543050", Slot = "25")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x2543054", Offset = "0x2543054", VA = "0x2543054", Slot = "26")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x2543304", Offset = "0x2543304", VA = "0x2543304")]
		public ComponentPool()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	public class DTSingleton<T> : MonoBehaviour, IDTSingleton where T : MonoBehaviour, IDTSingleton
	{
		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object _lock;

		[Token(Token = "0x170000A7")]
		public static bool HasInstance
		{
			[Token(Token = "0x60005CD")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A8")]
		[CanBeNull]
		public static T Instance
		{
			[Token(Token = "0x60005CE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005CC")]
		protected static void InitializeStaticFields()
		{
		}

		[Token(Token = "0x60005CF")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x60005D0")]
		public virtual void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x60005D1")]
		public DTSingleton()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public interface IDTSingleton
	{
		[Token(Token = "0x60005D3")]
		void MergeDoubleLoaded(IDTSingleton newInstance);
	}
	[Token(Token = "0x20000EB")]
	public abstract class DTVersionedMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private string m_Version;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE1D4", Offset = "0x10AE1D4")]
		private bool <IsActiveAndEnabled>k__BackingField;

		[Token(Token = "0x170000A9")]
		public string Version
		{
			[Token(Token = "0x60005D4")]
			[Address(RVA = "0x1FF4648", Offset = "0x1FF4648", VA = "0x1FF4648")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005D5")]
			[Address(RVA = "0x1FF4650", Offset = "0x1FF4650", VA = "0x1FF4650")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		protected bool IsActiveAndEnabled
		{
			[Token(Token = "0x60005D6")]
			[Address(RVA = "0x1FF4658", Offset = "0x1FF4658", VA = "0x1FF4658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1A08", Offset = "0x10C1A08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005D7")]
			[Address(RVA = "0x1FF4660", Offset = "0x1FF4660", VA = "0x1FF4660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1A18", Offset = "0x10C1A18")]
			private set
			{
			}
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x1FF466C", Offset = "0x1FF466C", VA = "0x1FF466C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x1FF4680", Offset = "0x1FF4680", VA = "0x1FF4680", Slot = "5")]
		protected virtual void ResetOnEnable()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x1FF4684", Offset = "0x1FF4684", VA = "0x1FF4684", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x1FF468C", Offset = "0x1FF468C", VA = "0x1FF468C", Slot = "7")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x1FF4690", Offset = "0x1FF4690", VA = "0x1FF4690", Slot = "8")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x1FF469C", Offset = "0x1FF469C", VA = "0x1FF469C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1A28", Offset = "0x10C1A28")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x1FF46C0", Offset = "0x1FF46C0", VA = "0x1FF46C0")]
		protected DTVersionedMonoBehaviour()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2C70", Offset = "0x10A2C70")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A2C70", Offset = "0x10A2C70")]
	public abstract class DuplicateEditorMesh : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshFilter mFilter;

		[Token(Token = "0x170000AB")]
		public MeshFilter Filter
		{
			[Token(Token = "0x60005DF")]
			[Address(RVA = "0x1FF7084", Offset = "0x1FF7084", VA = "0x1FF7084")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1FF70F4", Offset = "0x1FF70F4", VA = "0x1FF70F4")]
		protected DuplicateEditorMesh()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A2D04", Offset = "0x10A2D04")]
	public class InspectorNote : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x10AE1E4", Offset = "0x10AE1E4")]
		private string m_Note;

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x15B5750", Offset = "0x15B5750", VA = "0x15B5750")]
		public InspectorNote()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A2D3C", Offset = "0x10A2D3C")]
	[ExecuteAlways]
	public class PoolManager : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AE224", Offset = "0x10AE224")]
		[SerializeField]
		private bool m_AutoCreatePools;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0x10AE27C", Offset = "0x10AE27C")]
		[SerializeField]
		private PoolSettings m_DefaultSettings;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE2C0", Offset = "0x10AE2C0")]
		private bool <IsInitialized>k__BackingField;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, IPool> Pools;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10AE2D0", Offset = "0x10AE2D0")]
		public Dictionary<Type, IPool> TypePools;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10AE308", Offset = "0x10AE308")]
		private IPool[] mPools;

		[Token(Token = "0x170000AC")]
		public bool AutoCreatePools
		{
			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x1CBFAC8", Offset = "0x1CBFAC8", VA = "0x1CBFAC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005E3")]
			[Address(RVA = "0x1CBFAD0", Offset = "0x1CBFAD0", VA = "0x1CBFAD0")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public PoolSettings DefaultSettings
		{
			[Token(Token = "0x60005E4")]
			[Address(RVA = "0x1CBFAF0", Offset = "0x1CBFAF0", VA = "0x1CBFAF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005E5")]
			[Address(RVA = "0x1CBFAF8", Offset = "0x1CBFAF8", VA = "0x1CBFAF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public bool IsInitialized
		{
			[Token(Token = "0x60005E6")]
			[Address(RVA = "0x1CBFB98", Offset = "0x1CBFB98", VA = "0x1CBFB98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1A60", Offset = "0x10C1A60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005E7")]
			[Address(RVA = "0x1CBFBA0", Offset = "0x1CBFBA0", VA = "0x1CBFBA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C1A70", Offset = "0x10C1A70")]
			private set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public int Count
		{
			[Token(Token = "0x60005E8")]
			[Address(RVA = "0x1CBFBAC", Offset = "0x1CBFBAC", VA = "0x1CBFBAC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x1CBFC34", Offset = "0x1CBFC34", VA = "0x1CBFC34", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1CBFC60", Offset = "0x1CBFC60", VA = "0x1CBFC60", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x1CBFC88", Offset = "0x1CBFC88", VA = "0x1CBFC88", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x1CBFCB0", Offset = "0x1CBFCB0", VA = "0x1CBFCB0")]
		private void Update()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1CBFE70", Offset = "0x1CBFE70", VA = "0x1CBFE70")]
		private void Initialize()
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x1CC02D8", Offset = "0x1CC02D8", VA = "0x1CC02D8")]
		[NotNull]
		public string GetUniqueIdentifier([NotNull] string ident)
		{
			return null;
		}

		[Token(Token = "0x60005EF")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1A90", Offset = "0x10C1A90")]
		public Pool<T> GetTypePool<T>()
		{
			return null;
		}

		[Token(Token = "0x60005F0")]
		public ComponentPool GetComponentPool<T>() where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x1CC038C", Offset = "0x1CC038C", VA = "0x1CC038C")]
		public PrefabPool GetPrefabPool([NotNull] string identifier, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x60005F2")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1AC8", Offset = "0x10C1AC8")]
		public Pool<T> CreateTypePool<T>([Optional] PoolSettings settings)
		{
			return null;
		}

		[Token(Token = "0x60005F3")]
		public ComponentPool CreateComponentPool<T>([Optional] PoolSettings settings) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x1CC0490", Offset = "0x1CC0490", VA = "0x1CC0490")]
		public PrefabPool CreatePrefabPool([NotNull] string name, [Optional] PoolSettings settings, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x1CC0780", Offset = "0x1CC0780", VA = "0x1CC0780")]
		public List<IPool> FindPools(string identifierStartsWith)
		{
			return null;
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x1CC094C", Offset = "0x1CC094C", VA = "0x1CC094C")]
		public void DeletePools(string startsWith)
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x1CC0A04", Offset = "0x1CC0A04", VA = "0x1CC0A04")]
		public void DeletePool(IPool pool)
		{
		}

		[Token(Token = "0x60005F8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1B00", Offset = "0x10C1B00")]
		public void DeletePool<T>()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1CC0BBC", Offset = "0x1CC0BBC", VA = "0x1CC0BBC")]
		public PoolManager()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A2D98", Offset = "0x10A2D98")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A2D98", Offset = "0x10A2D98")]
	public class PrefabPool : UnityObjectPool<GameObject>
	{
		[Serializable]
		[Token(Token = "0x20000F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A2E1C", Offset = "0x10A2E1C")]
		private sealed class <>c
		{
			[Token(Token = "0x40003C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40003C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<GameObject, bool> <>9__8_0;

			[Token(Token = "0x6000604")]
			[Address(RVA = "0x1DE2004", Offset = "0x1DE2004", VA = "0x1DE2004")]
			public <>c()
			{
			}

			[Token(Token = "0x6000605")]
			[Address(RVA = "0x1DE200C", Offset = "0x1DE200C", VA = "0x1DE200C")]
			internal bool <OnValidate>b__8_0(GameObject p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE318", Offset = "0x10AE318")]
		private string m_Identifier;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<GameObject> m_Prefabs;

		[Token(Token = "0x170000B0")]
		public override string Identifier
		{
			[Token(Token = "0x60005FA")]
			[Address(RVA = "0x1CC0F84", Offset = "0x1CC0F84", VA = "0x1CC0F84", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005FB")]
			[Address(RVA = "0x1CC0F8C", Offset = "0x1CC0F8C", VA = "0x1CC0F8C", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public List<GameObject> Prefabs
		{
			[Token(Token = "0x60005FC")]
			[Address(RVA = "0x1CC0F94", Offset = "0x1CC0F94", VA = "0x1CC0F94")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005FD")]
			[Address(RVA = "0x1CC0F9C", Offset = "0x1CC0F9C", VA = "0x1CC0F9C")]
			set
			{
			}
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1CC0FA4", Offset = "0x1CC0FA4", VA = "0x1CC0FA4", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1CC06A8", Offset = "0x1CC06A8", VA = "0x1CC06A8")]
		public void Initialize([NotNull] string identifier, PoolSettings settings, params GameObject[] prefabs)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1CC1180", Offset = "0x1CC1180", VA = "0x1CC1180", Slot = "23")]
		protected override GameObject CreateObject()
		{
			return null;
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1CC1724", Offset = "0x1CC1724", VA = "0x1CC1724", Slot = "24")]
		protected override GameObject GetItemGameObject(GameObject item)
		{
			return null;
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1CC172C", Offset = "0x1CC172C", VA = "0x1CC172C")]
		public PrefabPool()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public abstract class UnityObjectPool<T> : DTVersionedMonoBehaviour, IPool where T : UnityEngine.Object
	{
		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[NotNull]
		private readonly List<T> pooledObjects;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[NotNull]
		[SerializeField]
		[Inline]
		private PoolSettings m_Settings;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double lastProcessingTime;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double unprocessedDuration;

		[Token(Token = "0x170000B2")]
		public virtual PoolSettings Settings
		{
			[Token(Token = "0x6000606")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000607")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1B38", Offset = "0x10C1B38")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7F50", Offset = "0x10C7F50")]
		public PoolManager Manager
		{
			[Token(Token = "0x6000608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		public int Count
		{
			[Token(Token = "0x6000609")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B5")]
		public abstract string Identifier
		{
			[Token(Token = "0x600060A")]
			get;
			[Token(Token = "0x600060B")]
			set;
		}

		[Token(Token = "0x170000B6")]
		private static double Now
		{
			[Token(Token = "0x600061F")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x600060C")]
		public virtual void Push(T item)
		{
		}

		[Token(Token = "0x600060D")]
		[NotNull]
		public virtual T Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600060E")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x600060F")]
		public void Update()
		{
		}

		[Token(Token = "0x6000610")]
		public new void Reset()
		{
		}

		[Token(Token = "0x6000611")]
		[NotNull]
		protected abstract T CreateObject();

		[Token(Token = "0x6000612")]
		[NotNull]
		protected abstract GameObject GetItemGameObject([NotNull] T item);

		[Token(Token = "0x6000613")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000614")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000615")]
		protected void Initialize([NotNull] PoolSettings settings)
		{
		}

		[Token(Token = "0x6000616")]
		protected void ConfigureCreatedGameObject([NotNull] GameObject item, string itemName)
		{
		}

		[Token(Token = "0x6000617")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0x10C1BA0", Offset = "0x10C1BA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000618")]
		private void DestroyObject([CanBeNull] T item)
		{
		}

		[Token(Token = "0x6000619")]
		[NotNull]
		private T RetrievedPoppedItem()
		{
			return null;
		}

		[Token(Token = "0x600061A")]
		private void ConfigurePushedGameObject([NotNull] GameObject item)
		{
		}

		[Token(Token = "0x600061B")]
		private void ConfigurePoppedGameObject([NotNull] GameObject item, [CanBeNull] Transform parent)
		{
		}

		[Token(Token = "0x600061C")]
		private void LogMessage(string message)
		{
		}

		[Token(Token = "0x600061D")]
		private void AdjustItemsCount(int minItemsCount, int maxItemsCount, int maxAdjustmentsCount, bool logOperations)
		{
		}

		[Token(Token = "0x600061E")]
		private void InstantShit()
		{
		}

		[Token(Token = "0x6000620")]
		private void ResetTimeRelatedFields()
		{
		}

		[Token(Token = "0x6000621")]
		private int GetAdjustmentsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000622")]
		protected UnityObjectPool()
		{
		}
	}
}
namespace FluffyUnderware.DevTools.Extensions
{
	[Token(Token = "0x20000F2")]
	public static class TransformExt
	{
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x2DC0D98", Offset = "0x2DC0D98", VA = "0x2DC0D98")]
		public static void UndoableSetParent([NotNull] this Transform child, [NotNull] Transform newParent, bool worldPositionStays, [NotNull] string undoOperationName)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x2DC0DB4", Offset = "0x2DC0DB4", VA = "0x2DC0DB4")]
		public static void DeleteChildren([NotNull] this Transform transform, bool isUndoable, bool doPrefabCheck)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	public static class AnimationCurveExt
	{
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x2005288", Offset = "0x2005288", VA = "0x2005288")]
		public static bool ValueIsOne(this AnimationCurve curve)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F4")]
	public static class ObjectExt
	{
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x312F778", Offset = "0x312F778", VA = "0x312F778")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1BF0", Offset = "0x10C1BF0")]
		public static bool Destroy(this UnityEngine.Object @object)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x312F784", Offset = "0x312F784", VA = "0x312F784")]
		public static bool Destroy(this UnityEngine.Object @object, bool isUndoable, bool doPrefabCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x312F878", Offset = "0x312F878", VA = "0x312F878")]
		public static string ToDumpString(this object o)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F5")]
	public static class FloatExt
	{
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x2F2BDEC", Offset = "0x2F2BDEC", VA = "0x2F2BDEC")]
		public static bool IsBetween0And1(this float v)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x2F2BE08", Offset = "0x2F2BE08", VA = "0x2F2BE08")]
		public static bool IsBetween(this float v, float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x2F2BE38", Offset = "0x2F2BE38", VA = "0x2F2BE38")]
		public static float Repeat(this float v, float min, float max)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000F6")]
	public static class Vector2Ext
	{
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x2EB62C4", Offset = "0x2EB62C4", VA = "0x2EB62C4")]
		public static Vector2 Snap(this Vector2 v, float snapX, float snapY = -1f)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x2EB631C", Offset = "0x2EB631C", VA = "0x2EB631C")]
		public static float AngleSigned(this Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x2EB6470", Offset = "0x2EB6470", VA = "0x2EB6470")]
		public static Vector2 LeftNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x2EB6484", Offset = "0x2EB6484", VA = "0x2EB6484")]
		public static Vector2 RightNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x2EB6494", Offset = "0x2EB6494", VA = "0x2EB6494")]
		public static Vector2 Rotate(this Vector2 v, float degree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x2EB64F4", Offset = "0x2EB64F4", VA = "0x2EB64F4")]
		public static Vector2 ToVector3(this Vector2 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20000F7")]
	public static class Vector3Ext
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x2EB64F8", Offset = "0x2EB64F8", VA = "0x2EB64F8")]
		public static float AngleSigned(this Vector3 a, Vector3 b, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x2EB659C", Offset = "0x2EB659C", VA = "0x2EB659C")]
		public static Vector3 RotateAround(this Vector3 point, Vector3 origin, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x2EB65FC", Offset = "0x2EB65FC", VA = "0x2EB65FC")]
		public static Vector2 ToVector2(this Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x2EB6600", Offset = "0x2EB6600", VA = "0x2EB6600")]
		public static bool Approximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x2EB66A4", Offset = "0x2EB66A4", VA = "0x2EB66A4")]
		public static bool NotApproximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F8")]
	public static class QuaternionExt
	{
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x1CC2458", Offset = "0x1CC2458", VA = "0x1CC2458")]
		public static bool SameOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1CC2534", Offset = "0x1CC2534", VA = "0x1CC2534")]
		public static bool DifferentOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000F9")]
	public static class GameObjectExt
	{
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x2F2D56C", Offset = "0x2F2D56C", VA = "0x2F2D56C")]
		public static GameObject DuplicateGameObject(this GameObject source, Transform newParent, bool keepPrefabReference = false)
		{
			return null;
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x2F2D670", Offset = "0x2F2D670", VA = "0x2F2D670")]
		public static void StripComponents(this GameObject go, params Type[] toKeep)
		{
		}
	}
	[Token(Token = "0x20000FA")]
	public static class ComponentExt
	{
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x25428B8", Offset = "0x25428B8", VA = "0x25428B8")]
		public static void StripComponents(this UnityEngine.Component c, params Type[] toKeep)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x25429A4", Offset = "0x25429A4", VA = "0x25429A4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1D8C", Offset = "0x10C1D8C")]
		public static GameObject AddChildGameObject(this UnityEngine.Component c, string name)
		{
			return null;
		}

		[Token(Token = "0x600063D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1DC4", Offset = "0x10C1DC4")]
		public static T AddChildGameObject<T>(this UnityEngine.Component c, string name) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x600063E")]
		[NotNull]
		public static T DuplicateGameObject<T>([NotNull] this UnityEngine.Component source, [CanBeNull] Transform newParent) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x600063F")]
		[CanBeNull]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1E34", Offset = "0x10C1E34")]
		public static T DuplicateGameObject<T>(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x2542A4C", Offset = "0x2542A4C", VA = "0x2542A4C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C1E90", Offset = "0x10C1E90")]
		public static UnityEngine.Component DuplicateGameObject(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FB")]
	public static class ColorExt
	{
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x25422B4", Offset = "0x25422B4", VA = "0x25422B4")]
		public static string ToHtml(this Color c)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FC")]
	public static class EnumExt
	{
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x3379754", Offset = "0x3379754", VA = "0x3379754")]
		public static bool HasFlag(this Enum variable, params Enum[] flags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000643")]
		public static bool HasFlag<T>(this T value, T flag) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000644")]
		public static T Set<T>(this Enum value, T append)
		{
			return (T)null;
		}

		[Token(Token = "0x6000645")]
		public static T Set<T>(this Enum value, T append, bool OnOff)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20000FD")]
	public static class RectExt
	{
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1CC2768", Offset = "0x1CC2768", VA = "0x1CC2768")]
		public static Rect Set(this Rect rect, Vector2 pos, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1CC27C4", Offset = "0x1CC27C4", VA = "0x1CC27C4")]
		public static Rect SetBetween(this Rect rect, Vector2 pos, Vector2 pos2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x1CC2820", Offset = "0x1CC2820", VA = "0x1CC2820")]
		public static Rect SetPosition(this Rect rect, Vector2 pos)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x1CC288C", Offset = "0x1CC288C", VA = "0x1CC288C")]
		public static Rect SetPosition(this Rect rect, float x, float y)
		{
			return default(Rect);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x1CC28F8", Offset = "0x1CC28F8", VA = "0x1CC28F8")]
		public static Vector2 GetSize(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x1CC2944", Offset = "0x1CC2944", VA = "0x1CC2944")]
		public static Rect SetSize(this Rect rect, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x1CC29B0", Offset = "0x1CC29B0", VA = "0x1CC29B0")]
		public static Rect ScaleBy(this Rect rect, int pixel)
		{
			return default(Rect);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1CC29B8", Offset = "0x1CC29B8", VA = "0x1CC29B8")]
		public static Rect ScaleBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x1CC2A90", Offset = "0x1CC2A90", VA = "0x1CC2A90")]
		public static Rect ShiftBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1CC2B20", Offset = "0x1CC2B20", VA = "0x1CC2B20")]
		public static Rect Include(this Rect rect, Rect other)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x20000FE")]
	public static class StringExt
	{
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x2DB7EBC", Offset = "0x2DB7EBC", VA = "0x2DB7EBC")]
		public static Color ColorFromHtml(this string hexString)
		{
			return default(Color);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x2DB81A8", Offset = "0x2DB81A8", VA = "0x2DB81A8")]
		public static string TrimStart(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x2DB81FC", Offset = "0x2DB81FC", VA = "0x2DB81FC")]
		public static string TrimEnd(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}
	}
	[Token(Token = "0x20000FF")]
	public static class IEnumerableExt
	{
		[Token(Token = "0x6000653")]
		public static void ForEach<T>(this IEnumerable<T> ie, Action<T> action)
		{
		}
	}
	[Token(Token = "0x2000100")]
	public static class ArrayExt
	{
		[Token(Token = "0x6000654")]
		public static T[] SubArray<T>(this T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x6000655")]
		public static T[] RemoveAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6000656")]
		public static T[] InsertAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6000657")]
		public static T[] Swap<T>(this T[] source, int index, int with)
		{
			return null;
		}

		[Token(Token = "0x6000658")]
		public static T[] Add<T>(this T[] source, T item)
		{
			return null;
		}

		[Token(Token = "0x6000659")]
		public static T[] AddRange<T>(this T[] source, T[] items)
		{
			return null;
		}

		[Token(Token = "0x600065A")]
		public static T[] RemoveDuplicates<T>(this T[] source)
		{
			return null;
		}

		[Token(Token = "0x600065B")]
		public static int IndexOf<T>(this T[] source, T item)
		{
			return default(int);
		}

		[Token(Token = "0x600065C")]
		public static T[] Remove<T>(this T[] source, T item)
		{
			return null;
		}
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A2F1C", Offset = "0x10A2F1C")]
	public static class MeshFilterExt
	{
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x3124780", Offset = "0x3124780", VA = "0x3124780")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C209C", Offset = "0x10C209C")]
		public static Mesh PrepareNewShared(this MeshFilter m, string name = "Mesh")
		{
			return null;
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x312490C", Offset = "0x312490C", VA = "0x312490C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C20E8", Offset = "0x10C20E8")]
		public static void CalculateTangents(this MeshFilter m)
		{
		}
	}
	[Token(Token = "0x2000102")]
	public static class TypeExt
	{
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x2DC1FA0", Offset = "0x2DC1FA0", VA = "0x2DC1FA0")]
		public static Type[] GetLoadedTypes()
		{
			return null;
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x2DC24E4", Offset = "0x2DC24E4", VA = "0x2DC24E4")]
		public static IEnumerable<Assembly> GetLoadedAssemblies()
		{
			return null;
		}

		[Token(Token = "0x6000661")]
		public static Dictionary<U, Type> GetAllTypesWithAttribute<U>(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000662")]
		public static List<FieldInfo> GetFieldsWithAttribute<T>(this Type type, bool includeInherited = false, bool includePrivate = false) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		public static T GetCustomAttribute<T>(this Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x2DC2508", Offset = "0x2DC2508", VA = "0x2DC2508")]
		public static MethodInfo MethodByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x2DC26B8", Offset = "0x2DC26B8", VA = "0x2DC26B8")]
		public static FieldInfo FieldByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x2DC2880", Offset = "0x2DC2880", VA = "0x2DC2880")]
		public static PropertyInfo PropertyByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x2DC2A30", Offset = "0x2DC2A30", VA = "0x2DC2A30")]
		public static FieldInfo[] GetAllFields(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x2DC2BE8", Offset = "0x2DC2BE8", VA = "0x2DC2BE8")]
		public static PropertyInfo[] GetAllProperties(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x2DC2DA0", Offset = "0x2DC2DA0", VA = "0x2DC2DA0")]
		public static bool IsFrameworkType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x2DC2EC0", Offset = "0x2DC2EC0", VA = "0x2DC2EC0")]
		public static bool IsArrayOrList(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x2DC2FB0", Offset = "0x2DC2FB0", VA = "0x2DC2FB0")]
		public static Type GetEnumerableType(this Type t)
		{
			return null;
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x2DC306C", Offset = "0x2DC306C", VA = "0x2DC306C")]
		private static Type FindIEnumerable(Type seqType)
		{
			return null;
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x2DC253C", Offset = "0x2DC253C", VA = "0x2DC253C")]
		private static MethodInfo GetMethodIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x2DC26F4", Offset = "0x2DC26F4", VA = "0x2DC26F4")]
		private static FieldInfo GetFieldIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x2DC28B4", Offset = "0x2DC28B4", VA = "0x2DC28B4")]
		private static PropertyInfo GetPropertyIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x2DC34D8", Offset = "0x2DC34D8", VA = "0x2DC34D8")]
		public static bool Matches(this Type type, params Type[] types)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000103")]
	public static class FieldInfoExt
	{
		[Token(Token = "0x6000671")]
		public static T GetCustomAttribute<T>(this FieldInfo field) where T : Attribute
		{
			return null;
		}
	}
}
namespace FluffyUnderware.DevTools.Threading
{
	[Token(Token = "0x2000104")]
	public static class Parallel
	{
		[MethodImpl(256)]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x31305C0", Offset = "0x31305C0", VA = "0x31305C0")]
		public static void For(int fromInclusive, int toExclusive, Action<int> body)
		{
		}
	}
}
namespace FluffyUnderware.Curvy
{
	[Serializable]
	[Token(Token = "0x2000105")]
	public class CurvyCGEvent : UnityEventEx<CurvyCGEventArgs>
	{
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x254A638", Offset = "0x254A638", VA = "0x254A638")]
		public CurvyCGEvent()
		{
		}
	}
	[Token(Token = "0x2000106")]
	public class CurvyCGEventArgs : EventArgs
	{
		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CurvyGenerator Generator;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CGModule Module;

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x254A684", Offset = "0x254A684", VA = "0x254A684")]
		public CurvyCGEventArgs(CGModule module)
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x254A738", Offset = "0x254A738", VA = "0x254A738")]
		public CurvyCGEventArgs(CurvyGenerator generator, CGModule module)
		{
		}
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2F88", Offset = "0x10A2F88")]
	public class CGResourceManagerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[NotNull]
		public readonly string ResourceName;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ReadOnly;

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x28C6100", Offset = "0x28C6100", VA = "0x28C6100")]
		public CGResourceManagerAttribute([NotNull] string resourceName)
		{
		}
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2FC0", Offset = "0x10A2FC0")]
	public sealed class CGResourceCollectionManagerAttribute : CGResourceManagerAttribute
	{
		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool ShowCount;

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x28C60D8", Offset = "0x28C60D8", VA = "0x28C60D8")]
		public CGResourceCollectionManagerAttribute([NotNull] string resourceName)
		{
		}
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A2FF8", Offset = "0x10A2FF8")]
	public sealed class CGDataReferenceSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[NotNull]
		public readonly Type DataType;

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x28B9BC4", Offset = "0x28B9BC4", VA = "0x28B9BC4")]
		public CGDataReferenceSelectorAttribute([NotNull] Type dataType)
		{
		}
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3030", Offset = "0x10A3030")]
	public class MetaCGOptions : CurvyMetadataBase
	{
		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		[SerializeField]
		private int m_MaterialID;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE460", Offset = "0x10AE460")]
		private bool m_HardEdge;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_MaxStepDistance;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE568", Offset = "0x10AE568")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AE568", Offset = "0x10AE568")]
		private bool m_UVEdge;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Positive]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE664", Offset = "0x10AE664")]
		private bool m_ExplicitU;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AE724", Offset = "0x10AE724")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE724", Offset = "0x10AE724")]
		[SerializeField]
		private float m_FirstU;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Positive]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AE80C", Offset = "0x10AE80C")]
		private float m_SecondU;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private bool uVEdgeUpdated;

		[Token(Token = "0x40003D7")]
		private const int DefaultMaterialId = 0;

		[Token(Token = "0x170000B7")]
		public int MaterialID
		{
			[Token(Token = "0x6000679")]
			[Address(RVA = "0x3125618", Offset = "0x3125618", VA = "0x3125618")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600067A")]
			[Address(RVA = "0x3125620", Offset = "0x3125620", VA = "0x3125620")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public bool HardEdge
		{
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x3125674", Offset = "0x3125674", VA = "0x3125674")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067C")]
			[Address(RVA = "0x312567C", Offset = "0x312567C", VA = "0x312567C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public bool CorrectedHardEdge
		{
			[Token(Token = "0x600067D")]
			[Address(RVA = "0x31256AC", Offset = "0x31256AC", VA = "0x31256AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BA")]
		public bool UVEdge
		{
			[Token(Token = "0x600067E")]
			[Address(RVA = "0x3125800", Offset = "0x3125800", VA = "0x3125800")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067F")]
			[Address(RVA = "0x3125808", Offset = "0x3125808", VA = "0x3125808")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool CorrectedUVEdge
		{
			[Token(Token = "0x6000680")]
			[Address(RVA = "0x3125838", Offset = "0x3125838", VA = "0x3125838")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BC")]
		public bool ExplicitU
		{
			[Token(Token = "0x6000681")]
			[Address(RVA = "0x3125870", Offset = "0x3125870", VA = "0x3125870")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000682")]
			[Address(RVA = "0x3125878", Offset = "0x3125878", VA = "0x3125878")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public float FirstU
		{
			[Token(Token = "0x6000683")]
			[Address(RVA = "0x31258A8", Offset = "0x31258A8", VA = "0x31258A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000684")]
			[Address(RVA = "0x31258B0", Offset = "0x31258B0", VA = "0x31258B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public float SecondU
		{
			[Token(Token = "0x6000685")]
			[Address(RVA = "0x31258D4", Offset = "0x31258D4", VA = "0x31258D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000686")]
			[Address(RVA = "0x31258DC", Offset = "0x31258DC", VA = "0x31258DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public float MaxStepDistance
		{
			[Token(Token = "0x6000687")]
			[Address(RVA = "0x3125900", Offset = "0x3125900", VA = "0x3125900")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000688")]
			[Address(RVA = "0x3125908", Offset = "0x3125908", VA = "0x3125908")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public bool HasDifferentMaterial
		{
			[Token(Token = "0x6000689")]
			[Address(RVA = "0x3125960", Offset = "0x3125960", VA = "0x3125960")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C1")]
		private bool ShowUvEdgeOrHardEdge
		{
			[Token(Token = "0x600068A")]
			[Address(RVA = "0x3125A24", Offset = "0x3125A24", VA = "0x3125A24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C2")]
		private bool showExplicitU
		{
			[Token(Token = "0x600068B")]
			[Address(RVA = "0x3125AA8", Offset = "0x3125AA8", VA = "0x3125AA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C3")]
		private bool showFirstU
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x3125B78", Offset = "0x3125B78", VA = "0x3125B78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C4")]
		private bool showSecondU
		{
			[Token(Token = "0x600068D")]
			[Address(RVA = "0x3125B40", Offset = "0x3125B40", VA = "0x3125B40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x3125BC0", Offset = "0x3125BC0", VA = "0x3125BC0", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x3125C00", Offset = "0x3125C00", VA = "0x3125C00", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x3125C2C", Offset = "0x3125C2C", VA = "0x3125C2C", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x3125CC8", Offset = "0x3125CC8", VA = "0x3125CC8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2234", Offset = "0x10C2234")]
		public new void Reset()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x3125DD0", Offset = "0x3125DD0", VA = "0x3125DD0")]
		public float GetDefinedFirstU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x3125E18", Offset = "0x3125E18", VA = "0x3125E18")]
		public float GetDefinedSecondU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x3125CF0", Offset = "0x3125CF0", VA = "0x3125CF0")]
		public void ResetProperties()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x3125C54", Offset = "0x3125C54", VA = "0x3125C54")]
		private void EnsureUVEdgeUpdate()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x31256E4", Offset = "0x31256E4", VA = "0x31256E4")]
		private bool CanHaveUvEdgeOrHadrdEdge()
		{
			return default(bool);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x3125E7C", Offset = "0x3125E7C", VA = "0x3125E7C")]
		public MetaCGOptions()
		{
		}
	}
	[Token(Token = "0x200010B")]
	public static class BSplineHelper
	{
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x200B4C8", Offset = "0x200B4C8", VA = "0x200B4C8")]
		public static Vector3 DeBoorClamped(int p, int k, float u, int nPlus1, [NotNull] Vector3[] pArray)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x200B6F8", Offset = "0x200B6F8", VA = "0x200B6F8")]
		public static Vector3 DeBoorUnclamped(int p, int k, float u, [NotNull] Vector3[] pArray)
		{
			return default(Vector3);
		}

		[MethodImpl(256)]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x200B8A4", Offset = "0x200B8A4", VA = "0x200B8A4")]
		public static int GetBSplineN(int controlPointsCount, int degree, bool closed)
		{
			return default(int);
		}

		[MethodImpl(256)]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x200B8B8", Offset = "0x200B8B8", VA = "0x200B8B8")]
		public static void GetBSplineUAndK(float tf, bool isClamped, int p, int n, out float u, out int k)
		{
		}
	}
	[Token(Token = "0x200010C")]
	public class CameraFrustumPlanesProvider
	{
		[Serializable]
		[Token(Token = "0x200010D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3068", Offset = "0x10A3068")]
		private sealed class <>c
		{
			[Token(Token = "0x40003E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x60006A2")]
			[Address(RVA = "0x2236B34", Offset = "0x2236B34", VA = "0x2236B34")]
			public <>c()
			{
			}

			[Token(Token = "0x60006A3")]
			[Address(RVA = "0x2236B3C", Offset = "0x2236B3C", VA = "0x2236B3C")]
			internal CameraFrustumPlanesProvider <.cctor>b__13_0()
			{
				return null;
			}
		}

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Lazy<CameraFrustumPlanesProvider> instance;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static object lockObject;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Plane[] cachedPlanes;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 cachedPosition;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 cachedForward;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float cachedFov;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int cachedPixelWidth;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int cachedPixelHeight;

		[Token(Token = "0x170000C5")]
		public static CameraFrustumPlanesProvider Instance
		{
			[Token(Token = "0x600069C")]
			[Address(RVA = "0x2540D68", Offset = "0x2540D68", VA = "0x2540D68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x2540DEC", Offset = "0x2540DEC", VA = "0x2540DEC")]
		public Plane[] GetFrustumPlanes(Camera camera)
		{
			return null;
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x2541028", Offset = "0x2541028", VA = "0x2541028")]
		private bool IsCacheOutdated(Vector3 cameraPosition, Vector3 cameraZDirection, int cameraPixelWidth, int cameraPixelHeight, float cameraFieldOfView)
		{
			return default(bool);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x25410F4", Offset = "0x25410F4", VA = "0x25410F4")]
		public CameraFrustumPlanesProvider()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public static class CompilationSymbols
	{
		[Token(Token = "0x40003E1")]
		public const string CurvySanityChecks = "CURVY_SANITY_CHECKS";

		[Token(Token = "0x40003E2")]
		public const string CurvyExtraSanityChecks = "CURVY_SANITY_CHECKS_PRIVATE";

		[Token(Token = "0x40003E3")]
		public const string UnityEditor = "UNITY_EDITOR";

		[Token(Token = "0x40003E4")]
		public const string CurvyDebug = "CURVY_DEBUG";
	}
	[Token(Token = "0x200010F")]
	public enum OrientationModeEnum
	{
		[Token(Token = "0x40003E6")]
		None,
		[Token(Token = "0x40003E7")]
		Orientation,
		[Token(Token = "0x40003E8")]
		Tangent
	}
	[Token(Token = "0x2000110")]
	public enum OrientationAxisEnum
	{
		[Token(Token = "0x40003EA")]
		Up,
		[Token(Token = "0x40003EB")]
		Down,
		[Token(Token = "0x40003EC")]
		Forward,
		[Token(Token = "0x40003ED")]
		Backward,
		[Token(Token = "0x40003EE")]
		Left,
		[Token(Token = "0x40003EF")]
		Right
	}
	[Token(Token = "0x2000111")]
	public enum CurvyUpdateMethod
	{
		[Token(Token = "0x40003F1")]
		Update,
		[Token(Token = "0x40003F2")]
		LateUpdate,
		[Token(Token = "0x40003F3")]
		FixedUpdate
	}
	[Token(Token = "0x2000112")]
	public enum CurvyRepeatingOrderEnum
	{
		[Token(Token = "0x40003F5")]
		Random,
		[Token(Token = "0x40003F6")]
		Row
	}
	[Token(Token = "0x2000113")]
	public enum CurvyPlane
	{
		[Token(Token = "0x40003F8")]
		XY,
		[Token(Token = "0x40003F9")]
		XZ,
		[Token(Token = "0x40003FA")]
		YZ
	}
	[Token(Token = "0x2000114")]
	public enum CurvyPositionMode
	{
		[Token(Token = "0x40003FC")]
		Relative,
		[Token(Token = "0x40003FD")]
		WorldUnits
	}
	[Token(Token = "0x2000115")]
	[Flags]
	public enum CurvyBezierModeEnum
	{
		[Token(Token = "0x40003FF")]
		None = 0,
		[Token(Token = "0x4000400")]
		Direction = 1,
		[Token(Token = "0x4000401")]
		Length = 2,
		[Token(Token = "0x4000402")]
		Connections = 4,
		[Token(Token = "0x4000403")]
		Combine = 8
	}
	[Token(Token = "0x2000116")]
	public enum CurvyAdvBezierModeEnum
	{
		[Token(Token = "0x4000405")]
		None = 0,
		[Token(Token = "0x4000406")]
		Direction = 1,
		[Token(Token = "0x4000407")]
		Length = 2,
		[Token(Token = "0x4000408")]
		Combine = 8
	}
	[Token(Token = "0x2000117")]
	public enum CurvyInterpolation
	{
		[Token(Token = "0x400040A")]
		Linear,
		[Token(Token = "0x400040B")]
		CatmullRom,
		[Token(Token = "0x400040C")]
		TCB,
		[Token(Token = "0x400040D")]
		Bezier,
		[Token(Token = "0x400040E")]
		BSpline
	}
	[Token(Token = "0x2000118")]
	public enum CurvyClamping
	{
		[Token(Token = "0x4000410")]
		Clamp,
		[Token(Token = "0x4000411")]
		Loop,
		[Token(Token = "0x4000412")]
		PingPong
	}
	[Token(Token = "0x2000119")]
	public enum CurvyOrientation
	{
		[Token(Token = "0x4000414")]
		None,
		[Token(Token = "0x4000415")]
		Dynamic,
		[Token(Token = "0x4000416")]
		Static
	}
	[Token(Token = "0x200011A")]
	public enum CurvyOrientationSwirl
	{
		[Token(Token = "0x4000418")]
		None,
		[Token(Token = "0x4000419")]
		Segment,
		[Token(Token = "0x400041A")]
		AnchorGroup,
		[Token(Token = "0x400041B")]
		AnchorGroupAbs
	}
	[Token(Token = "0x200011B")]
	[Flags]
	public enum CurvySplineGizmos
	{
		[Token(Token = "0x400041D")]
		None = 0,
		[Token(Token = "0x400041E")]
		Connections = 1,
		[Token(Token = "0x400041F")]
		Curve = 2,
		[Token(Token = "0x4000420")]
		Approximation = 4,
		[Token(Token = "0x4000421")]
		Tangents = 8,
		[Token(Token = "0x4000422")]
		Orientation = 0x10,
		[Token(Token = "0x4000423")]
		Labels = 0x20,
		[Token(Token = "0x4000424")]
		Metadata = 0x40,
		[Token(Token = "0x4000425")]
		Bounds = 0x80,
		[Token(Token = "0x4000426")]
		TFs = 0x100,
		[Token(Token = "0x4000427")]
		RelativeDistances = 0x200,
		[Token(Token = "0x4000428")]
		OrientationAnchors = 0x400,
		[Token(Token = "0x4000429")]
		All = 0xFFFF
	}
	[Token(Token = "0x200011C")]
	public class CurvyEventArgs : EventArgs
	{
		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly object Data;

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x254E4B4", Offset = "0x254E4B4", VA = "0x254E4B4")]
		public CurvyEventArgs(MonoBehaviour sender, object data)
		{
		}
	}
	[Token(Token = "0x200011D")]
	public class TransformMonitor
	{
		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[NotNull]
		private readonly Transform transform;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 lastCheckedPosition;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion lastCheckedRotation;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastCheckedScale;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AE914", Offset = "0x10AE914")]
		private bool <HasChanged>k__BackingField;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private readonly bool monitorPosition;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private readonly bool monitorRotation;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		private readonly bool monitorScale;

		[Token(Token = "0x170000C6")]
		public bool HasChanged
		{
			[Token(Token = "0x60006A5")]
			[Address(RVA = "0x2DC1CA0", Offset = "0x2DC1CA0", VA = "0x2DC1CA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C226C", Offset = "0x10C226C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006A6")]
			[Address(RVA = "0x2DC1CA8", Offset = "0x2DC1CA8", VA = "0x2DC1CA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C227C", Offset = "0x10C227C")]
			private set
			{
			}
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x2DC1CB4", Offset = "0x2DC1CB4", VA = "0x2DC1CB4")]
		public TransformMonitor([NotNull] Transform transformToTrack, bool monitorPosition, bool monitorRotation, bool monitorScale)
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x2DC1E08", Offset = "0x2DC1E08", VA = "0x2DC1E08")]
		public void ResetMonitoring()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x2DC1E78", Offset = "0x2DC1E78", VA = "0x2DC1E78")]
		public bool CheckForChanges()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x2DC1EEC", Offset = "0x2DC1EEC", VA = "0x2DC1EEC")]
		private bool HaveGlobalCoordinatesChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x2DC1E10", Offset = "0x2DC1E10", VA = "0x2DC1E10")]
		private void MarkCurrentTransformAsChecked()
		{
		}
	}
	[Token(Token = "0x200011E")]
	[ExecuteAlways]
	public abstract class SplineProcessor : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected CurvySpline m_Spline;

		[Token(Token = "0x170000C7")]
		public CurvySpline Spline
		{
			[Token(Token = "0x60006AC")]
			[Address(RVA = "0x2DB6654", Offset = "0x2DB6654", VA = "0x2DB6654")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006AD")]
			[Address(RVA = "0x2DB665C", Offset = "0x2DB665C", VA = "0x2DB665C")]
			set
			{
			}
		}

		[Token(Token = "0x60006AE")]
		public abstract void Refresh();

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x2DB69D8", Offset = "0x2DB69D8", VA = "0x2DB69D8")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x2DB6AAC", Offset = "0x2DB6AAC", VA = "0x2DB6AAC")]
		private void OnSplineCoordinatesChanged(CurvySpline spline)
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x2DB69F0", Offset = "0x2DB69F0", VA = "0x2DB69F0")]
		private void ProcessEvent([NotNull] CurvySpline spline)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x2DB6C18", Offset = "0x2DB6C18", VA = "0x2DB6C18", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x2DB6D44", Offset = "0x2DB6D44", VA = "0x2DB6D44", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x2DB6D84", Offset = "0x2DB6D84", VA = "0x2DB6D84", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x2DB6DAC", Offset = "0x2DB6DAC", VA = "0x2DB6DAC", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x2DB6DF8", Offset = "0x2DB6DF8", VA = "0x2DB6DF8", Slot = "11")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x2DB67A8", Offset = "0x2DB67A8", VA = "0x2DB67A8")]
		protected void BindEvents()
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x2DB6724", Offset = "0x2DB6724", VA = "0x2DB6724")]
		protected void UnbindEvents()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x2DB6AB0", Offset = "0x2DB6AB0", VA = "0x2DB6AB0")]
		private void UnbindEvents([NotNull] CurvySpline spline)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x2DB6E04", Offset = "0x2DB6E04", VA = "0x2DB6E04")]
		protected SplineProcessor()
		{
		}
	}
	[Token(Token = "0x200011F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A30A8", Offset = "0x10A30A8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A30A8", Offset = "0x10A30A8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A30A8", Offset = "0x10A30A8")]
	public class CurvyGlobalManager : DTSingleton<CurvyGlobalManager>
	{
		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color DefaultDefaultGizmoColor;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color DefaultDefaultGizmoSelectionColor;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Color DefaultGizmoOrientationColor;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static bool HideManager;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public static bool SaveGeneratorOutputs;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float SceneViewResolution;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Color DefaultGizmoColor;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Color DefaultGizmoSelectionColor;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static CurvyInterpolation DefaultInterpolation;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static float GizmoControlPointSize;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static float GizmoOrientationLength;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static Color GizmoOrientationColor;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static int SplineLayer;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static CurvySplineGizmos Gizmos;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PoolManager poolManager;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComponentPool controlPointPool;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ArrayPoolsSettings arrayPoolsSettings;

		[Token(Token = "0x170000C8")]
		public static bool ShowCurveGizmo
		{
			[Token(Token = "0x60006BB")]
			[Address(RVA = "0x2553308", Offset = "0x2553308", VA = "0x2553308")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006BC")]
			[Address(RVA = "0x2553370", Offset = "0x2553370", VA = "0x2553370")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public static bool ShowConnectionsGizmo
		{
			[Token(Token = "0x60006BD")]
			[Address(RVA = "0x2553408", Offset = "0x2553408", VA = "0x2553408")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0x2553470", Offset = "0x2553470", VA = "0x2553470")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public static bool ShowApproximationGizmo
		{
			[Token(Token = "0x60006BF")]
			[Address(RVA = "0x2553508", Offset = "0x2553508", VA = "0x2553508")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C0")]
			[Address(RVA = "0x2553570", Offset = "0x2553570", VA = "0x2553570")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public static bool ShowTangentsGizmo
		{
			[Token(Token = "0x60006C1")]
			[Address(RVA = "0x2553608", Offset = "0x2553608", VA = "0x2553608")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C2")]
			[Address(RVA = "0x2553670", Offset = "0x2553670", VA = "0x2553670")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public static bool ShowOrientationGizmo
		{
			[Token(Token = "0x60006C3")]
			[Address(RVA = "0x2553708", Offset = "0x2553708", VA = "0x2553708")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C4")]
			[Address(RVA = "0x2553770", Offset = "0x2553770", VA = "0x2553770")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public static bool ShowTFsGizmo
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0x2553808", Offset = "0x2553808", VA = "0x2553808")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0x2553870", Offset = "0x2553870", VA = "0x2553870")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public static bool ShowRelativeDistancesGizmo
		{
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0x2553908", Offset = "0x2553908", VA = "0x2553908")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0x2553970", Offset = "0x2553970", VA = "0x2553970")]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public static bool ShowLabelsGizmo
		{
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0x2553A08", Offset = "0x2553A08", VA = "0x2553A08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0x2553A70", Offset = "0x2553A70", VA = "0x2553A70")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public static bool ShowMetadataGizmo
		{
			[Token(Token = "0x60006CB")]
			[Address(RVA = "0x2553B08", Offset = "0x2553B08", VA = "0x2553B08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x2553B70", Offset = "0x2553B70", VA = "0x2553B70")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public static bool ShowBoundsGizmo
		{
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x2553C08", Offset = "0x2553C08", VA = "0x2553C08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006CE")]
			[Address(RVA = "0x2553C70", Offset = "0x2553C70", VA = "0x2553C70")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public static bool ShowOrientationAnchorsGizmo
		{
			[Token(Token = "0x60006CF")]
			[Address(RVA = "0x2553D08", Offset = "0x2553D08", VA = "0x2553D08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0x2553D70", Offset = "0x2553D70", VA = "0x2553D70")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x60006D1")]
			[Address(RVA = "0x2553E08", Offset = "0x2553E08", VA = "0x2553E08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		public ComponentPool ControlPointPool
		{
			[Token(Token = "0x60006D2")]
			[Address(RVA = "0x2553EBC", Offset = "0x2553EBC", VA = "0x2553EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		public ArrayPoolsSettings ArrayPoolsSettings
		{
			[Token(Token = "0x60006D3")]
			[Address(RVA = "0x2553EC4", Offset = "0x2553EC4", VA = "0x2553EC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D6")]
		public CurvyConnection[] Connections
		{
			[Token(Token = "0x60006D4")]
			[Address(RVA = "0x2553F78", Offset = "0x2553F78", VA = "0x2553F78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x2553FC4", Offset = "0x2553FC4", VA = "0x2553FC4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C228C", Offset = "0x10C228C")]
		public CurvyConnection[] GetContainingConnections(params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x25547F4", Offset = "0x25547F4", VA = "0x25547F4", Slot = "5")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x2554A3C", Offset = "0x2554A3C", VA = "0x2554A3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x2554ACC", Offset = "0x2554ACC", VA = "0x2554ACC")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x10C22C4", Offset = "0x10C22C4")]
		private static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x2554B3C", Offset = "0x2554B3C", VA = "0x2554B3C")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x10C22D8", Offset = "0x10C22D8")]
		private static void LoadRuntimeSettings()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x2554EBC", Offset = "0x2554EBC", VA = "0x2554EBC")]
		public static void SaveRuntimeSettings()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x2555188", Offset = "0x2555188", VA = "0x2555188", Slot = "6")]
		public override void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x25552AC", Offset = "0x25552AC", VA = "0x25552AC")]
		public CurvyGlobalManager()
		{
		}
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3170", Offset = "0x10A3170")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3170", Offset = "0x10A3170")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3170", Offset = "0x10A3170")]
	public class CurvySplineToEdgeCollider2D : SplineProcessor
	{
		[Token(Token = "0x4000446")]
		public const string ComponentPath = "Curvy/Converters/Curvy Spline To Edge Collider 2D";

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EdgeCollider2D cachedEdgeCollider2D;

		[Token(Token = "0x170000D7")]
		private EdgeCollider2D EdgeCollider
		{
			[Token(Token = "0x60006DE")]
			[Address(RVA = "0x389A318", Offset = "0x389A318", VA = "0x389A318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x389A3CC", Offset = "0x389A3CC", VA = "0x389A3CC", Slot = "9")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x389A7A4", Offset = "0x389A7A4", VA = "0x389A7A4")]
		public CurvySplineToEdgeCollider2D()
		{
		}
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3218", Offset = "0x10A3218")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3218", Offset = "0x10A3218")]
	public class NearestSplinePoint : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AE934", Offset = "0x10AE934")]
		public CurvySpline Spline;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AE96C", Offset = "0x10AE96C")]
		public Transform SourcePosition;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AE9A4", Offset = "0x10AE9A4")]
		public Transform TargetPosition;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AE9DC", Offset = "0x10AE9DC")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEA14", Offset = "0x10AEA14")]
		public UnityEventEx<Vector3> OnUpdated;

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x312E7CC", Offset = "0x312E7CC", VA = "0x312E7CC")]
		private void Process()
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x312E960", Offset = "0x312E960", VA = "0x312E960")]
		public NearestSplinePoint()
		{
		}
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3288", Offset = "0x10A3288")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3288", Offset = "0x10A3288")]
	public class CurvyShape : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AEA4C", Offset = "0x10AEA4C")]
		[SerializeField]
		private CurvyPlane m_Plane;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<CurvyShapeInfo, Type> mShapeDefs;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvySpline mSpline;

		[NonSerialized]
		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Dirty;

		[Token(Token = "0x170000D8")]
		public CurvyPlane Plane
		{
			[Token(Token = "0x60006E3")]
			[Address(RVA = "0x3887DFC", Offset = "0x3887DFC", VA = "0x3887DFC")]
			get
			{
				return default(CurvyPlane);
			}
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0x3887E04", Offset = "0x3887E04", VA = "0x3887E04")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public CurvySpline Spline
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0x3887E20", Offset = "0x3887E20", VA = "0x3887E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C7F88", Offset = "0x10C7F88")]
		public static Dictionary<CurvyShapeInfo, Type> ShapeDefinitions
		{
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x3889D38", Offset = "0x3889D38", VA = "0x3889D38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x3887E90", Offset = "0x3887E90", VA = "0x3887E90")]
		private void Update()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x3887EF8", Offset = "0x3887EF8", VA = "0x3887EF8", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x3887F2C", Offset = "0x3887F2C", VA = "0x3887F2C", Slot = "8")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x3887F3C", Offset = "0x3887F3C", VA = "0x3887F3C")]
		public void Delete()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x3887E94", Offset = "0x3887E94", VA = "0x3887E94")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x3888034", Offset = "0x3888034", VA = "0x3888034")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C22E8", Offset = "0x10C22E8")]
		public CurvyShape Replace(string menuName)
		{
			return null;
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x3888368", Offset = "0x3888368", VA = "0x3888368")]
		protected void PrepareSpline(CurvyInterpolation interpolation, CurvyOrientation orientation = CurvyOrientation.Dynamic, int cachedensity = 50, bool closed = true)
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x3888620", Offset = "0x3888620", VA = "0x3888620")]
		protected void SetPosition(int no, Vector3 position)
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x38888F0", Offset = "0x38888F0", VA = "0x38888F0")]
		protected void SetRotation(int no, Quaternion rotation)
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x3888B68", Offset = "0x3888B68", VA = "0x3888B68")]
		protected void SetBezierHandles(int no, float distanceFrag)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x3888B70", Offset = "0x3888B70", VA = "0x3888B70")]
		protected void SetBezierHandles(int no, float inDistanceFrag, float outDistanceFrag)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x3888F24", Offset = "0x3888F24", VA = "0x3888F24")]
		protected void SetBezierHandles(int no, Vector3 i, Vector3 o, Space space = Space.World)
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x3888E84", Offset = "0x3888E84", VA = "0x3888E84")]
		public static void SetBezierHandles(float distanceFrag, bool setIn, bool setOut, params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x3889548", Offset = "0x3889548", VA = "0x3889548")]
		protected void SetCGHardEdges(params int[] controlPoints)
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x38896B8", Offset = "0x38896B8", VA = "0x38896B8", Slot = "9")]
		protected virtual void ApplyShape()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x38896BC", Offset = "0x38896BC", VA = "0x38896BC")]
		protected void PrepareControlPoints(int count)
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x3889E88", Offset = "0x3889E88", VA = "0x3889E88")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2320", Offset = "0x10C2320")]
		public static List<string> GetShapesMenuNames(bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x388A078", Offset = "0x388A078", VA = "0x388A078")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2358", Offset = "0x10C2358")]
		public static List<string> GetShapesMenuNames(Type currentShapeType, out int currentIndex, bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x388A35C", Offset = "0x388A35C", VA = "0x388A35C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2390", Offset = "0x10C2390")]
		public static string GetShapeName(Type shapeType)
		{
			return null;
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x388816C", Offset = "0x388816C", VA = "0x388816C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C23C8", Offset = "0x10C23C8")]
		public static Type GetShapeType(string menuName)
		{
			return null;
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x3887F4C", Offset = "0x3887F4C", VA = "0x3887F4C")]
		private void ApplyPlane()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x388A530", Offset = "0x388A530", VA = "0x388A530")]
		private void applyRotation(Quaternion q)
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x388A750", Offset = "0x388A750", VA = "0x388A750")]
		public CurvyShape()
		{
		}
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A331C", Offset = "0x10A331C")]
	public sealed class CurvyShapeInfo : Attribute
	{
		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool Is2D;

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x388A848", Offset = "0x388A848", VA = "0x388A848")]
		public CurvyShapeInfo(string name, bool is2D = true)
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class CurvyShape2D : CurvyShape
	{
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x388A7E4", Offset = "0x388A7E4", VA = "0x388A7E4")]
		public CurvyShape2D()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public enum ConnectionHeadingEnum
	{
		[Token(Token = "0x4000454")]
		Minus = -1,
		[Token(Token = "0x4000455")]
		Sharp,
		[Token(Token = "0x4000456")]
		Plus,
		[Token(Token = "0x4000457")]
		Auto
	}
	[Token(Token = "0x2000126")]
	public static class ConnectionHeadingEnumMethods
	{
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x25447F8", Offset = "0x25447F8", VA = "0x25447F8")]
		public static ConnectionHeadingEnum ResolveAuto(this ConnectionHeadingEnum heading, CurvySplineSegment followUp)
		{
			return default(ConnectionHeadingEnum);
		}
	}
	[Token(Token = "0x2000127")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3364", Offset = "0x10A3364")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A3364", Offset = "0x10A3364")]
	public class CurvyConnection : DTVersionedMonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000128")]
		private class TransformSynchronizer
		{
			[Token(Token = "0x400045B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvyConnection connection;

			[Token(Token = "0x400045C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[CanBeNull]
			private TransformMonitor connectionMonitor;

			[Token(Token = "0x400045D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[NotNull]
			private readonly Dictionary<CurvySplineSegment, (Vector3, Quaternion)> monitoredCPCoordinated;

			[Token(Token = "0x170000DE")]
			[NotNull]
			private TransformMonitor ConnectionMonitor
			{
				[Token(Token = "0x6000719")]
				[Address(RVA = "0x22372E8", Offset = "0x22372E8", VA = "0x22372E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			private bool IsCPsMonitorValid
			{
				[Token(Token = "0x600071E")]
				[Address(RVA = "0x2237A40", Offset = "0x2237A40", VA = "0x2237A40")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600071A")]
			[Address(RVA = "0x2237394", Offset = "0x2237394", VA = "0x2237394")]
			public TransformSynchronizer([NotNull] CurvyConnection connection)
			{
			}

			[Token(Token = "0x600071B")]
			[Address(RVA = "0x2237434", Offset = "0x2237434", VA = "0x2237434")]
			public void OnControlPointsUpdated()
			{
			}

			[Token(Token = "0x600071C")]
			[Address(RVA = "0x22377EC", Offset = "0x22377EC", VA = "0x22377EC")]
			public void OnUpdate()
			{
			}

			[Token(Token = "0x600071D")]
			[Address(RVA = "0x2237930", Offset = "0x2237930", VA = "0x2237930")]
			private void EnsureCPsMonitorIsValid()
			{
			}

			[Token(Token = "0x600071F")]
			[Address(RVA = "0x2237964", Offset = "0x2237964", VA = "0x2237964")]
			private void GetMonitorChanges(out Vector3? positionChange, out Quaternion? rotationChange)
			{
			}

			[Token(Token = "0x6000720")]
			[Address(RVA = "0x2237B64", Offset = "0x2237B64", VA = "0x2237B64")]
			private bool GetConnectionMonitorChanges(out Vector3? positionChange, out Quaternion? rotationChange)
			{
				return default(bool);
			}

			[Token(Token = "0x6000721")]
			[Address(RVA = "0x2237C7C", Offset = "0x2237C7C", VA = "0x2237C7C")]
			private void GetCPsMonitorChanges(out Vector3? position, out Quaternion? rotation)
			{
			}

			[Token(Token = "0x6000722")]
			[Address(RVA = "0x2238060", Offset = "0x2238060", VA = "0x2238060")]
			private void GetCPMonitorChanges([NotNull] CurvySplineSegment controlPoint, out Vector3? position, out Quaternion? rotation)
			{
			}

			[Token(Token = "0x6000723")]
			[Address(RVA = "0x22381B8", Offset = "0x22381B8", VA = "0x22381B8")]
			private void IsCPTriggeringTransformChange([NotNull] CurvySplineSegment controlPoint, out bool syncPosition, out bool syncRotation)
			{
			}

			[Token(Token = "0x6000724")]
			[Address(RVA = "0x22379B4", Offset = "0x22379B4", VA = "0x22379B4")]
			public void ApplyTransform(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000725")]
			[Address(RVA = "0x2238304", Offset = "0x2238304", VA = "0x2238304")]
			private void ApplyTransformToConnection(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000726")]
			[Address(RVA = "0x22383A0", Offset = "0x22383A0", VA = "0x22383A0")]
			private void ApplyTransformToCPs(Vector3 referencePosition, Quaternion referenceRotation)
			{
			}

			[Token(Token = "0x6000727")]
			[Address(RVA = "0x2238638", Offset = "0x2238638", VA = "0x2238638")]
			public void ResetMonitoring()
			{
			}

			[Token(Token = "0x6000728")]
			[Address(RVA = "0x223865C", Offset = "0x223865C", VA = "0x223865C")]
			private void ResetConnectionMonitoring()
			{
			}

			[Token(Token = "0x6000729")]
			[Address(RVA = "0x2237438", Offset = "0x2237438", VA = "0x2237438")]
			private void ResetCPsMonitoring()
			{
			}

			[Token(Token = "0x600072A")]
			[Address(RVA = "0x223867C", Offset = "0x223867C", VA = "0x223867C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2410", Offset = "0x10C2410")]
			private bool <get_IsCPsMonitorValid>b__10_0(CurvySplineSegment controlPoint)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000129")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A33D4", Offset = "0x10A33D4")]
		private sealed class <>c
		{
			[Token(Token = "0x400045E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400045F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<CurvySplineSegment> <>9__23_0;

			[Token(Token = "0x4000460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<CurvySplineSegment> <>9__28_0;

			[Token(Token = "0x600072C")]
			[Address(RVA = "0x223726C", Offset = "0x223726C", VA = "0x223726C")]
			public <>c()
			{
			}

			[Token(Token = "0x600072D")]
			[Address(RVA = "0x2237274", Offset = "0x2237274", VA = "0x2237274")]
			internal bool <RemoveNullCPs>b__23_0(CurvySplineSegment cp)
			{
				return default(bool);
			}

			[Token(Token = "0x600072E")]
			[Address(RVA = "0x2237280", Offset = "0x2237280", VA = "0x2237280")]
			internal bool <OnSceneLoaded>b__28_0(CurvySplineSegment cp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Hide]
		private List<CurvySplineSegment> m_ControlPoints;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[NotNull]
		private readonly TransformSynchronizer transformSynchronizer;

		[Token(Token = "0x170000DB")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0x254A89C", Offset = "0x254A89C", VA = "0x254A89C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public int Count
		{
			[Token(Token = "0x6000704")]
			[Address(RVA = "0x254A914", Offset = "0x254A914", VA = "0x254A914")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DD")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0x254A960", Offset = "0x254A960", VA = "0x254A960")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x254A7DC", Offset = "0x254A7DC", VA = "0x254A7DC")]
		public CurvyConnection()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x254A9D4", Offset = "0x254A9D4", VA = "0x254A9D4", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x254AAB0", Offset = "0x254AAB0", VA = "0x254AAB0", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x254AB78", Offset = "0x254AB78", VA = "0x254AB78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x254ABD8", Offset = "0x254ABD8", VA = "0x254ABD8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x254AC1C", Offset = "0x254AC1C", VA = "0x254AC1C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x254AC60", Offset = "0x254AC60", VA = "0x254AC60")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x254ADFC", Offset = "0x254ADFC", VA = "0x254ADFC")]
		public static CurvyConnection Create(params CurvySplineSegment[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x254B054", Offset = "0x254B054", VA = "0x254B054")]
		public void AddControlPoints(params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x254B208", Offset = "0x254B208", VA = "0x254B208")]
		public void AutoSetFollowUp()
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x254B468", Offset = "0x254B468", VA = "0x254B468")]
		public void RemoveControlPoint(CurvySplineSegment controlPoint, bool destroySelfIfEmpty = true)
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x254B680", Offset = "0x254B680", VA = "0x254B680")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x254B6A4", Offset = "0x254B6A4", VA = "0x254B6A4")]
		public List<CurvySplineSegment> OtherControlPoints(CurvySplineSegment source)
		{
			return null;
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x254B754", Offset = "0x254B754", VA = "0x254B754")]
		public void SetSynchronisationPositionAndRotation(Vector3 referencePosition, Quaternion referenceRotation)
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x254B770", Offset = "0x254B770", VA = "0x254B770", Slot = "9")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x254B8A0", Offset = "0x254B8A0", VA = "0x254B8A0", Slot = "10")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x254B774", Offset = "0x254B774", VA = "0x254B774")]
		private void RemoveNullCPs()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x254ABBC", Offset = "0x254ABBC", VA = "0x254ABBC")]
		private void DoUpdate()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x254B8A4", Offset = "0x254B8A4", VA = "0x254B8A4")]
		private void OnSceneLoaded(UnityEngine.SceneManagement.Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x254BAA0", Offset = "0x254BAA0", VA = "0x254BAA0", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}
	}
	[Token(Token = "0x200012A")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A33E4", Offset = "0x10A33E4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A33E4", Offset = "0x10A33E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A33E4", Offset = "0x10A33E4")]
	public class CurvySpline : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x200012B")]
		private class ControlPointsSynchronizer
		{
			[Token(Token = "0x200012C")]
			public enum SynchronizationRequest
			{
				[Token(Token = "0x400049F")]
				None,
				[Token(Token = "0x40004A0")]
				SplineToHierarchy,
				[Token(Token = "0x40004A1")]
				HierarchyToSpline
			}

			[Token(Token = "0x400049B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvySpline spline;

			[Token(Token = "0x400049C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool processing;

			[Token(Token = "0x400049D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AFA04", Offset = "0x10AFA04")]
			private SynchronizationRequest <CurrentRequest>k__BackingField;

			[Token(Token = "0x1700010B")]
			public SynchronizationRequest CurrentRequest
			{
				[Token(Token = "0x6000810")]
				[Address(RVA = "0x223A554", Offset = "0x223A554", VA = "0x223A554")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2690", Offset = "0x10C2690")]
				get
				{
					return default(SynchronizationRequest);
				}
				[Token(Token = "0x6000811")]
				[Address(RVA = "0x223A55C", Offset = "0x223A55C", VA = "0x223A55C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C26A0", Offset = "0x10C26A0")]
				private set
				{
				}
			}

			[Token(Token = "0x6000812")]
			[Address(RVA = "0x223A564", Offset = "0x223A564", VA = "0x223A564")]
			public ControlPointsSynchronizer([NotNull] CurvySpline spline)
			{
			}

			[Token(Token = "0x6000813")]
			[Address(RVA = "0x223A598", Offset = "0x223A598", VA = "0x223A598")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C26B0", Offset = "0x10C26B0")]
			public void RequestSplineToHierarchy()
			{
			}

			[Token(Token = "0x6000814")]
			[Address(RVA = "0x223A5B8", Offset = "0x223A5B8", VA = "0x223A5B8")]
			public void RequestHierarchyToSpline()
			{
			}

			[Token(Token = "0x6000815")]
			[Address(RVA = "0x223A5D8", Offset = "0x223A5D8", VA = "0x223A5D8")]
			public void ProcessRequests()
			{
			}

			[Token(Token = "0x6000816")]
			[Address(RVA = "0x223A7B4", Offset = "0x223A7B4", VA = "0x223A7B4")]
			public void CancelRequests()
			{
			}

			[Token(Token = "0x6000817")]
			[Address(RVA = "0x223A680", Offset = "0x223A680", VA = "0x223A680")]
			private void SynchronizeHierarchyToSpline()
			{
			}

			[Token(Token = "0x6000818")]
			[Address(RVA = "0x223A7BC", Offset = "0x223A7BC", VA = "0x223A7BC")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C26E8", Offset = "0x10C26E8")]
			private void SynchronizeSplineToHierarchy()
			{
			}

			[Token(Token = "0x6000819")]
			[Address(RVA = "0x223A8B8", Offset = "0x223A8B8", VA = "0x223A8B8")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2720", Offset = "0x10C2720")]
			private void DebugLog(string message)
			{
			}

			[Token(Token = "0x600081A")]
			[Address(RVA = "0x223A91C", Offset = "0x223A91C", VA = "0x223A91C")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2758", Offset = "0x10C2758")]
			private static void LogIgnoredRequest()
			{
			}

			[Token(Token = "0x600081B")]
			[Address(RVA = "0x223A990", Offset = "0x223A990", VA = "0x223A990")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2790", Offset = "0x10C2790")]
			private void AssertIsNotProcessing()
			{
			}
		}

		[Token(Token = "0x200012D")]
		private class DirtinessManager : IDisposable
		{
			[Serializable]
			[Token(Token = "0x200012E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3478", Offset = "0x10A3478")]
			private sealed class <>c
			{
				[Token(Token = "0x40004AC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x40004AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public static Action<CurvySplineSegment, int, int> <>9__21_0;

				[Token(Token = "0x40004AE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public static Func<CurvySplineSegment, bool> <>9__35_0;

				[Token(Token = "0x40004AF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public static Func<CurvySplineSegment, IEnumerable<CurvySplineSegment>> <>9__35_1;

				[Token(Token = "0x40004B0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public static Func<CurvySplineSegment, bool> <>9__36_0;

				[Token(Token = "0x40004B1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public static Func<CurvySplineSegment, CurvySpline> <>9__36_1;

				[Token(Token = "0x40004B2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public static Predicate<CurvySplineSegment> <>9__36_2;

				[Token(Token = "0x40004B3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				public static Func<CurvySplineSegment, bool> <>9__37_0;

				[Token(Token = "0x6000837")]
				[Address(RVA = "0x1DE6EBC", Offset = "0x1DE6EBC", VA = "0x1DE6EBC")]
				public <>c()
				{
				}

				[Token(Token = "0x6000838")]
				[Address(RVA = "0x1DE6EC4", Offset = "0x1DE6EC4", VA = "0x1DE6EC4")]
				internal void <.ctor>b__21_0(CurvySplineSegment controlPoint, int cpIndex, int cpsCount)
				{
				}

				[Token(Token = "0x6000839")]
				[Address(RVA = "0x1DE6EE0", Offset = "0x1DE6EE0", VA = "0x1DE6EE0")]
				internal bool <ValidateConnectedSplines>b__35_0(CurvySplineSegment cp)
				{
					return default(bool);
				}

				[Token(Token = "0x600083A")]
				[Address(RVA = "0x1DE6F54", Offset = "0x1DE6F54", VA = "0x1DE6F54")]
				internal IEnumerable<CurvySplineSegment> <ValidateConnectedSplines>b__35_1(CurvySplineSegment cp)
				{
					return null;
				}

				[Token(Token = "0x600083B")]
				[Address(RVA = "0x1DE6F78", Offset = "0x1DE6F78", VA = "0x1DE6F78")]
				internal bool <SynchronizeSplinesWithNullCps>b__36_0(CurvySplineSegment cp)
				{
					return default(bool);
				}

				[Token(Token = "0x600083C")]
				[Address(RVA = "0x1DE6FEC", Offset = "0x1DE6FEC", VA = "0x1DE6FEC")]
				internal CurvySpline <SynchronizeSplinesWithNullCps>b__36_1(CurvySplineSegment cp)
				{
					return null;
				}

				[Token(Token = "0x600083D")]
				[Address(RVA = "0x1DE7004", Offset = "0x1DE7004", VA = "0x1DE7004")]
				internal bool <SynchronizeSplinesWithNullCps>b__36_2(CurvySplineSegment cp)
				{
					return default(bool);
				}

				[Token(Token = "0x600083E")]
				[Address(RVA = "0x1DE706C", Offset = "0x1DE706C", VA = "0x1DE706C")]
				internal bool <SynchronizeUninitializedSplines>b__37_0(CurvySplineSegment cp)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x40004A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool dirtyCurve;

			[Token(Token = "0x40004A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			private bool dirtyOrientation;

			[Token(Token = "0x40004A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			private bool allControlPointsAreDirty;

			[Token(Token = "0x40004A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly HashSet<CurvySplineSegment> dirtyControlPointsMinimalSet;

			[Token(Token = "0x40004A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[NotNull]
			private CurvySpline spline;

			[Token(Token = "0x40004A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool processingDirtyControlPoints;

			[Token(Token = "0x40004A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly ThreadPoolWorker<CurvySplineSegment> threadWorker;

			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly List<CurvySplineSegment> persistedSegmentsList;

			[Token(Token = "0x40004AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private readonly OrientationGroup persistedOrientationGroup;

			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private readonly Action<CurvySplineSegment, int, int> refreshOrientationStaticAction;

			[Token(Token = "0x1700010C")]
			private bool DirtyCurve
			{
				[Token(Token = "0x600081C")]
				[Address(RVA = "0x223A994", Offset = "0x223A994", VA = "0x223A994")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600081D")]
				[Address(RVA = "0x223A99C", Offset = "0x223A99C", VA = "0x223A99C")]
				set
				{
				}
			}

			[Token(Token = "0x1700010D")]
			private bool DirtyOrientation
			{
				[Token(Token = "0x600081E")]
				[Address(RVA = "0x223A9A8", Offset = "0x223A9A8", VA = "0x223A9A8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600081F")]
				[Address(RVA = "0x223A9B0", Offset = "0x223A9B0", VA = "0x223A9B0")]
				set
				{
				}
			}

			[Token(Token = "0x1700010E")]
			public bool AllControlPointsAreDirty
			{
				[Token(Token = "0x6000820")]
				[Address(RVA = "0x223A9BC", Offset = "0x223A9BC", VA = "0x223A9BC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000821")]
				[Address(RVA = "0x223A9C4", Offset = "0x223A9C4", VA = "0x223A9C4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700010F")]
			public bool Dirty
			{
				[Token(Token = "0x6000822")]
				[Address(RVA = "0x223A9D0", Offset = "0x223A9D0", VA = "0x223A9D0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000823")]
			[Address(RVA = "0x223AA34", Offset = "0x223AA34", VA = "0x223AA34")]
			public DirtinessManager([NotNull] CurvySpline spline)
			{
			}

			[Token(Token = "0x6000824")]
			[Address(RVA = "0x223AE74", Offset = "0x223AE74", VA = "0x223AE74")]
			public void SetDirtyAll(SplineDirtyingType dirtyingType, bool dirtyConnectedControlPoints)
			{
			}

			[Token(Token = "0x6000825")]
			[Address(RVA = "0x223B1B4", Offset = "0x223B1B4", VA = "0x223B1B4")]
			public void SetDirty(CurvySplineSegment controlPoint, SplineDirtyingType dirtyingType, CurvySplineSegment previousControlPoint, CurvySplineSegment nextControlPoint, bool ignoreConnectionOfInputControlPoint)
			{
			}

			[Token(Token = "0x6000826")]
			[Address(RVA = "0x223B648", Offset = "0x223B648", VA = "0x223B648")]
			public void ClearMinimalSet()
			{
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0x223B69C", Offset = "0x223B69C", VA = "0x223B69C")]
			public void RemoveFromMinimalSet(CurvySplineSegment item)
			{
			}

			[Token(Token = "0x6000828")]
			[Address(RVA = "0x223B700", Offset = "0x223B700", VA = "0x223B700")]
			[MustUseReturnValue]
			public bool ProcessDirtyControlPoints()
			{
				return default(bool);
			}

			[Token(Token = "0x6000829")]
			[Address(RVA = "0x223AE08", Offset = "0x223AE08", VA = "0x223AE08")]
			public void Reset()
			{
			}

			[Token(Token = "0x600082A")]
			[Address(RVA = "0x223C798", Offset = "0x223C798", VA = "0x223C798", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x600082B")]
			[Address(RVA = "0x223C46C", Offset = "0x223C46C", VA = "0x223C46C")]
			private void ProcessDirtyOrientation(List<CurvySplineSegment> dirtyCpsExtendedList)
			{
			}

			[Token(Token = "0x600082C")]
			[Address(RVA = "0x223C7EC", Offset = "0x223C7EC", VA = "0x223C7EC")]
			private void ProcessDirtyDynamicOrientation(List<CurvySplineSegment> dirtyCpsExtendedList)
			{
			}

			[Token(Token = "0x600082D")]
			[Address(RVA = "0x223C238", Offset = "0x223C238", VA = "0x223C238")]
			private void ProcessDirtyCurve(List<CurvySplineSegment> dirtyCpsExtendedList)
			{
			}

			[Token(Token = "0x600082E")]
			[Address(RVA = "0x223B0F0", Offset = "0x223B0F0", VA = "0x223B0F0")]
			private void SetDirtyingFlagsAndInvalidateSplineCurveCachesIfNeeded(SplineDirtyingType dirtyingType)
			{
			}

			[Token(Token = "0x600082F")]
			[Address(RVA = "0x223BC58", Offset = "0x223BC58", VA = "0x223BC58")]
			private void FillDirtyCpsExtendedList(List<CurvySplineSegment> dirtyCpsExtendedList)
			{
			}

			[Token(Token = "0x6000830")]
			[Address(RVA = "0x223B140", Offset = "0x223B140", VA = "0x223B140")]
			private void AddToMinimalSetAndSetDirtyingFlagsAndInvalidateSplineCurveCachesIfNeeded(CurvySplineSegment controlPoint, SplineDirtyingType dirtyingType)
			{
			}

			[Token(Token = "0x6000831")]
			[Address(RVA = "0x223B9B4", Offset = "0x223B9B4", VA = "0x223B9B4")]
			private void ValidateConnectedSplines()
			{
			}

			[Token(Token = "0x6000832")]
			[Address(RVA = "0x223CBE0", Offset = "0x223CBE0", VA = "0x223CBE0")]
			private void SynchronizeSplinesWithNullCps([NotNull] List<CurvySplineSegment> controlPoints)
			{
			}

			[Token(Token = "0x6000833")]
			[Address(RVA = "0x223D1A8", Offset = "0x223D1A8", VA = "0x223D1A8")]
			private static void SynchronizeUninitializedSplines([NotNull] List<CurvySplineSegment> connectedCPs)
			{
			}

			[Token(Token = "0x6000834")]
			[Address(RVA = "0x223D604", Offset = "0x223D604", VA = "0x223D604")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C27D8", Offset = "0x10C27D8")]
			private void DoSanityChecks()
			{
			}

			[Token(Token = "0x6000835")]
			[Address(RVA = "0x223D664", Offset = "0x223D664", VA = "0x223D664")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2810", Offset = "0x10C2810")]
			private bool <ValidateConnectedSplines>b__35_2(CurvySplineSegment cp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200012F")]
		private class OrientationGroup
		{
			[Token(Token = "0x40004B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			[ItemNotNull]
			private readonly List<CurvySplineSegment> segments;

			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private SegmentGroupMetrics currentMetrics;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[NotNull]
			private float[] accumulatedSwirlAngles;

			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[NotNull]
			private readonly List<int> accumulatedCacheSizes;

			[Token(Token = "0x17000110")]
			[NotNull]
			public List<CurvySplineSegment> Segments
			{
				[Token(Token = "0x600083F")]
				[Address(RVA = "0x223D6E8", Offset = "0x223D6E8", VA = "0x223D6E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000840")]
			[Address(RVA = "0x223AC8C", Offset = "0x223AC8C", VA = "0x223AC8C")]
			public OrientationGroup()
			{
			}

			[Token(Token = "0x6000841")]
			[Address(RVA = "0x223CA3C", Offset = "0x223CA3C", VA = "0x223CA3C")]
			public void SetupOrientationGroup(short anchorIndex, [ItemNotNull][NotNull] List<CurvySplineSegment> splineControlPoints, [NotNull] short[] orientationAnchorIndices)
			{
			}

			[Token(Token = "0x6000842")]
			[Address(RVA = "0x223CBBC", Offset = "0x223CBBC", VA = "0x223CBBC")]
			public void UpdateOrientation()
			{
			}

			[Token(Token = "0x6000843")]
			[Address(RVA = "0x223D8AC", Offset = "0x223D8AC", VA = "0x223D8AC")]
			private void ApplySwirlAndSmoothing()
			{
			}

			[Token(Token = "0x6000844")]
			[Address(RVA = "0x223D750", Offset = "0x223D750", VA = "0x223D750")]
			private void ApplyParallelTransport()
			{
			}

			[Token(Token = "0x6000845")]
			[Address(RVA = "0x223DB30", Offset = "0x223DB30", VA = "0x223DB30")]
			private float GetOrientationGap()
			{
				return default(float);
			}

			[Token(Token = "0x6000846")]
			[Address(RVA = "0x223DCA8", Offset = "0x223DCA8", VA = "0x223DCA8")]
			[NotNull]
			private float[] GetAccumulatedSwirlAngles()
			{
				return null;
			}
		}

		[Token(Token = "0x2000130")]
		private class RelationshipCache
		{
			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvySpline spline;

			[Token(Token = "0x40004B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[NotNull]
			private readonly object lockObject;

			[Token(Token = "0x40004BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[CanBeNull]
			private CurvySplineSegment firstSegment;

			[Token(Token = "0x40004BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[CanBeNull]
			private CurvySplineSegment lastSegment;

			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[CanBeNull]
			private CurvySplineSegment firstVisibleControlPoint;

			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[CanBeNull]
			private CurvySplineSegment lastVisibleControlPoint;

			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AFADC", Offset = "0x10AFADC")]
			private bool <IsValid>k__BackingField;

			[Token(Token = "0x17000111")]
			[CanBeNull]
			public CurvySplineSegment FirstVisibleControlPoint
			{
				[Token(Token = "0x6000847")]
				[Address(RVA = "0x223DF74", Offset = "0x223DF74", VA = "0x223DF74")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000112")]
			[CanBeNull]
			public CurvySplineSegment LastVisibleControlPoint
			{
				[Token(Token = "0x6000848")]
				[Address(RVA = "0x223DFA4", Offset = "0x223DFA4", VA = "0x223DFA4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000113")]
			[CanBeNull]
			public CurvySplineSegment FirstSegment
			{
				[Token(Token = "0x6000849")]
				[Address(RVA = "0x223DFD4", Offset = "0x223DFD4", VA = "0x223DFD4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000114")]
			[CanBeNull]
			public CurvySplineSegment LastSegment
			{
				[Token(Token = "0x600084A")]
				[Address(RVA = "0x223E004", Offset = "0x223E004", VA = "0x223E004")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			public bool IsValid
			{
				[Token(Token = "0x600084B")]
				[Address(RVA = "0x223E034", Offset = "0x223E034", VA = "0x223E034")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2830", Offset = "0x10C2830")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600084C")]
				[Address(RVA = "0x223E03C", Offset = "0x223E03C", VA = "0x223E03C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2840", Offset = "0x10C2840")]
				private set
				{
				}
			}

			[Token(Token = "0x600084D")]
			[Address(RVA = "0x223E048", Offset = "0x223E048", VA = "0x223E048")]
			public RelationshipCache([NotNull] CurvySpline spline)
			{
			}

			[Token(Token = "0x600084E")]
			[Address(RVA = "0x223E0D4", Offset = "0x223E0D4", VA = "0x223E0D4")]
			public void Invalidate()
			{
			}

			[Token(Token = "0x600084F")]
			[Address(RVA = "0x223B9A4", Offset = "0x223B9A4", VA = "0x223B9A4")]
			public void EnsureIsValid()
			{
			}

			[Token(Token = "0x6000850")]
			[Address(RVA = "0x223E1EC", Offset = "0x223E1EC", VA = "0x223E1EC")]
			private void RebuildAndFixNonCoherentControlPoints()
			{
			}
		}

		[Token(Token = "0x2000131")]
		private class SanityChecker
		{
			[Token(Token = "0x40004BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvySpline spline;

			[Token(Token = "0x40004C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int sanityErrorLogsThisFrame;

			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int sanityWaringLogsThisFrame;

			[Token(Token = "0x6000851")]
			[Address(RVA = "0x223E934", Offset = "0x223E934", VA = "0x223E934")]
			public SanityChecker([NotNull] CurvySpline spline)
			{
			}

			[Token(Token = "0x6000852")]
			[Address(RVA = "0x223E968", Offset = "0x223E968", VA = "0x223E968")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2850", Offset = "0x10C2850")]
			public void OnUpdate()
			{
			}

			[Token(Token = "0x6000853")]
			[Address(RVA = "0x223E970", Offset = "0x223E970", VA = "0x223E970")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2888", Offset = "0x10C2888")]
			public void Check()
			{
			}
		}

		[Token(Token = "0x2000132")]
		private struct SegmentGroupMetrics : IEquatable<SegmentGroupMetrics>
		{
			[Token(Token = "0x40004C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int CacheSize;

			[Token(Token = "0x40004C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int SegmentCount;

			[Token(Token = "0x40004C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float Length;

			[Token(Token = "0x6000854")]
			[Address(RVA = "0x223D6F0", Offset = "0x223D6F0", VA = "0x223D6F0")]
			public void Increment([NotNull] CurvySplineSegment segment)
			{
			}

			[Token(Token = "0x6000855")]
			[Address(RVA = "0x223EB30", Offset = "0x223EB30", VA = "0x223EB30", Slot = "4")]
			public bool Equals(SegmentGroupMetrics other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000856")]
			[Address(RVA = "0x223EB64", Offset = "0x223EB64", VA = "0x223EB64", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000857")]
			[Address(RVA = "0x223EC10", Offset = "0x223EC10", VA = "0x223EC10", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000858")]
			[Address(RVA = "0x223EC4C", Offset = "0x223EC4C", VA = "0x223EC4C")]
			public static bool operator ==(SegmentGroupMetrics left, SegmentGroupMetrics right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000859")]
			[Address(RVA = "0x223ECA4", Offset = "0x223ECA4", VA = "0x223ECA4")]
			public static bool operator !=(SegmentGroupMetrics left, SegmentGroupMetrics right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000133")]
		private class ControlPointNamer
		{
			[Token(Token = "0x40004C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvySpline spline;

			[Token(Token = "0x40004C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool requestRename;

			[Token(Token = "0x40004C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ItemNotNull]
			[NotNull]
			private static readonly string[] ControlPointNames;

			[Token(Token = "0x600085A")]
			[Address(RVA = "0x223A0B8", Offset = "0x223A0B8", VA = "0x223A0B8")]
			public ControlPointNamer([NotNull] CurvySpline curvySpline)
			{
			}

			[Token(Token = "0x600085B")]
			[Address(RVA = "0x223A0EC", Offset = "0x223A0EC", VA = "0x223A0EC")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C28C0", Offset = "0x10C28C0")]
			public void RequestRename()
			{
			}

			[Token(Token = "0x600085C")]
			[Address(RVA = "0x223A0F8", Offset = "0x223A0F8", VA = "0x223A0F8")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C28F8", Offset = "0x10C28F8")]
			public void ProcessRequests()
			{
			}

			[Token(Token = "0x600085D")]
			[Address(RVA = "0x223A26C", Offset = "0x223A26C", VA = "0x223A26C")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2930", Offset = "0x10C2930")]
			public void CancelRequests()
			{
			}

			[Token(Token = "0x600085E")]
			[Address(RVA = "0x223A178", Offset = "0x223A178", VA = "0x223A178")]
			private static void RenameControlPoints([NotNull] List<CurvySplineSegment> splineControlPoints)
			{
			}

			[Token(Token = "0x600085F")]
			[Address(RVA = "0x223A274", Offset = "0x223A274", VA = "0x223A274")]
			[NotNull]
			private static string GetControlPointName(short controlPointIndex)
			{
				return null;
			}

			[Token(Token = "0x6000860")]
			[Address(RVA = "0x223A3F0", Offset = "0x223A3F0", VA = "0x223A3F0")]
			[NotNull]
			[ItemNotNull]
			private static string[] GetControlPointNames()
			{
				return null;
			}

			[Token(Token = "0x6000861")]
			[Address(RVA = "0x223A33C", Offset = "0x223A33C", VA = "0x223A33C")]
			[NotNull]
			private static string MakeControlPointName(short controlPointIndex)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000134")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3488", Offset = "0x10A3488")]
		private sealed class <>c
		{
			[Token(Token = "0x40004C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40004C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CurvySplineSegment, int, int> <>9__10_0;

			[Token(Token = "0x40004CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CurvySplineSegment, SubArray<Vector3>> <>9__170_0;

			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CurvySplineSegment, SubArray<Vector3>> <>9__173_0;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CurvySplineSegment, SubArray<Vector3>> <>9__175_0;

			[Token(Token = "0x6000864")]
			[Address(RVA = "0x223A028", Offset = "0x223A028", VA = "0x223A028")]
			public <>c()
			{
			}

			[Token(Token = "0x6000865")]
			[Address(RVA = "0x223A030", Offset = "0x223A030", VA = "0x223A030")]
			internal void <.ctor>b__10_0(CurvySplineSegment controlPoint, int controlPointIndex, int controlPointsCount)
			{
			}

			[Token(Token = "0x6000866")]
			[Address(RVA = "0x223A04C", Offset = "0x223A04C", VA = "0x223A04C")]
			internal SubArray<Vector3> <GetPositionsCache>b__170_0(CurvySplineSegment s)
			{
				return default(SubArray<Vector3>);
			}

			[Token(Token = "0x6000867")]
			[Address(RVA = "0x223A070", Offset = "0x223A070", VA = "0x223A070")]
			internal SubArray<Vector3> <GetTangentsCache>b__173_0(CurvySplineSegment s)
			{
				return default(SubArray<Vector3>);
			}

			[Token(Token = "0x6000868")]
			[Address(RVA = "0x223A094", Offset = "0x223A094", VA = "0x223A094")]
			internal SubArray<Vector3> <GetNormalsCache>b__175_0(CurvySplineSegment s)
			{
				return default(SubArray<Vector3>);
			}
		}

		[Token(Token = "0x4000461")]
		public const string VERSION = "8.5.0";

		[Token(Token = "0x4000462")]
		public const string APIVERSION = "850";

		[Token(Token = "0x4000463")]
		public const string WEBROOT = "https://curvyeditor.com/";

		[Token(Token = "0x4000464")]
		public const string DOCLINK = "https://curvyeditor.com/doclink/";

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[HideInInspector]
		public bool ShowGizmos;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		[NotNull]
		private List<CurvySplineSegment> ControlPoints;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEB84", Offset = "0x10AEB84")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AEB84", Offset = "0x10AEB84")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AEB84", Offset = "0x10AEB84")]
		private CurvyInterpolation m_Interpolation;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEC40", Offset = "0x10AEC40")]
		private bool m_RestrictTo2D;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEC8C", Offset = "0x10AEC8C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AEC8C", Offset = "0x10AEC8C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AEC8C", Offset = "0x10AEC8C")]
		private CurvyPlane restricted2DPlane;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AED88", Offset = "0x10AED88")]
		private bool m_Closed;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AEDD4", Offset = "0x10AEDD4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AEDD4", Offset = "0x10AEDD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEDD4", Offset = "0x10AEDD4")]
		[SerializeField]
		private bool m_AutoEndTangents;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AEE70", Offset = "0x10AEE70")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AEE70", Offset = "0x10AEE70")]
		private CurvyOrientation m_Orientation;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10AEEE0", Offset = "0x10AEEE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AEEE0", Offset = "0x10AEEE0")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10AEEE0", Offset = "0x10AEEE0")]
		private float m_AutoHandleDistance;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10AF010", Offset = "0x10AF010")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AF010", Offset = "0x10AF010")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0x10AF010", Offset = "0x10AF010")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AF010", Offset = "0x10AF010")]
		[SerializeField]
		private float m_Tension;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AF154", Offset = "0x10AF154")]
		private float m_Continuity;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AF1A0", Offset = "0x10AF1A0")]
		[SerializeField]
		private float m_Bias;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10AF1EC", Offset = "0x10AF1EC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10AF1EC", Offset = "0x10AF1EC")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AF1EC", Offset = "0x10AF1EC")]
		private int bSplineDegree;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AF334", Offset = "0x10AF334")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AF334", Offset = "0x10AF334")]
		[SerializeField]
		private bool isBSplineClamped;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AF3C8", Offset = "0x10AF3C8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AF3C8", Offset = "0x10AF3C8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AF3C8", Offset = "0x10AF3C8")]
		private Color m_GizmoColor;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AF4A8", Offset = "0x10AF4A8")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AF4A8", Offset = "0x10AF4A8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AF4A8", Offset = "0x10AF4A8")]
		private Color m_GizmoSelectionColor;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AF564", Offset = "0x10AF564")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10AF564", Offset = "0x10AF564")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AF564", Offset = "0x10AF564")]
		private int m_CacheDensity;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AF620", Offset = "0x10AF620")]
		[SerializeField]
		private float m_MaxPointsPerUnit;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AF66C", Offset = "0x10AF66C")]
		private bool m_UsePooling;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AF6B8", Offset = "0x10AF6B8")]
		private bool m_UseThreading;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AF704", Offset = "0x10AF704")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10AF704", Offset = "0x10AF704")]
		private bool m_CheckTransform;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private CurvyUpdateMethod m_UpdateIn;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AF784", Offset = "0x10AF784")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x10AF784", Offset = "0x10AF784")]
		[SerializeField]
		protected CurvySplineEvent m_OnRefresh;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x10AF80C", Offset = "0x10AF80C")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AF80C", Offset = "0x10AF80C")]
		protected CurvySplineEvent m_OnAfterControlPointChanges;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x10AF878", Offset = "0x10AF878")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AF878", Offset = "0x10AF878")]
		[SerializeField]
		protected CurvyControlPointEvent m_OnBeforeControlPointAdd;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x10AF8E0", Offset = "0x10AF8E0")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AF8E0", Offset = "0x10AF8E0")]
		protected CurvyControlPointEvent m_OnAfterControlPointAdd;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AF94C", Offset = "0x10AF94C")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0x10AF94C", Offset = "0x10AF94C")]
		protected CurvyControlPointEvent m_OnBeforeControlPointDelete;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Action<CurvySpline> onGlobalCoordinatesChanged;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool mIsInitialized;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool isStarted;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		private bool sendOnRefreshEventNextUpdate;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly List<CurvySplineSegment> mSegments;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly DirtinessManager dirtinessManager;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly RelationshipCache relationshipCache;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[NotNull]
		private readonly SanityChecker sanityChecker;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[NotNull]
		private readonly ControlPointsSynchronizer cpsSynchronizer;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[NotNull]
		private readonly ControlPointNamer controlPointNamer;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[CanBeNull]
		private TransformMonitor transformMonitor;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform cachedTransform;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private short[] cachedShortsArray;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float[] controlPointsDistances;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly Action<CurvySplineSegment, int, int> refreshCurveAction;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float length;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int mCacheSize;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Bounds? mBounds;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly CurvySplineEventArgs defaultSplineEventArgs;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly CurvyControlPointEventArgs defaultAddAfterEventArgs;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly CurvyControlPointEventArgs defaultDeleteEventArgs;

		[Token(Token = "0x4000496")]
		private const short CachedControlPointsNameCount = 250;

		[Token(Token = "0x4000497")]
		private const float MinimalMaxPointsPerUnit = 0.0001f;

		[Token(Token = "0x4000498")]
		private const float MaxSegmentCacheSize = 1000000f;

		[Token(Token = "0x4000499")]
		private const string InvalidCPErrorMessage = "[Curvy] Method called with a control point '{0}' that is not part of the current spline '{1}'";

		[Token(Token = "0x400049A")]
		private const int minBSplineDegree = 2;

		[Token(Token = "0x170000E0")]
		public CurvyInterpolation Interpolation
		{
			[Token(Token = "0x6000730")]
			[Address(RVA = "0x388AF60", Offset = "0x388AF60", VA = "0x388AF60")]
			get
			{
				return default(CurvyInterpolation);
			}
			[Token(Token = "0x6000731")]
			[Address(RVA = "0x3888464", Offset = "0x3888464", VA = "0x3888464")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public bool RestrictTo2D
		{
			[Token(Token = "0x6000732")]
			[Address(RVA = "0x388B020", Offset = "0x388B020", VA = "0x388B020")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000733")]
			[Address(RVA = "0x38885D8", Offset = "0x38885D8", VA = "0x38885D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public CurvyPlane Restricted2DPlane
		{
			[Token(Token = "0x6000734")]
			[Address(RVA = "0x388B028", Offset = "0x388B028", VA = "0x388B028")]
			get
			{
				return default(CurvyPlane);
			}
			[Token(Token = "0x6000735")]
			[Address(RVA = "0x388A714", Offset = "0x388A714", VA = "0x388A714")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6000736")]
			[Address(RVA = "0x388B030", Offset = "0x388B030", VA = "0x388B030")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000737")]
			[Address(RVA = "0x388B038", Offset = "0x388B038", VA = "0x388B038")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public bool Closed
		{
			[Token(Token = "0x6000738")]
			[Address(RVA = "0x388B090", Offset = "0x388B090", VA = "0x388B090")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000739")]
			[Address(RVA = "0x388856C", Offset = "0x388856C", VA = "0x388856C")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public bool AutoEndTangents
		{
			[Token(Token = "0x600073A")]
			[Address(RVA = "0x388B098", Offset = "0x388B098", VA = "0x388B098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600073B")]
			[Address(RVA = "0x388AF88", Offset = "0x388AF88", VA = "0x388AF88")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public CurvyOrientation Orientation
		{
			[Token(Token = "0x600073C")]
			[Address(RVA = "0x388B0C4", Offset = "0x388B0C4", VA = "0x388B0C4")]
			get
			{
				return default(CurvyOrientation);
			}
			[Token(Token = "0x600073D")]
			[Address(RVA = "0x38884C4", Offset = "0x38884C4", VA = "0x38884C4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public CurvyUpdateMethod UpdateIn
		{
			[Token(Token = "0x600073E")]
			[Address(RVA = "0x388B0CC", Offset = "0x388B0CC", VA = "0x388B0CC")]
			get
			{
				return default(CurvyUpdateMethod);
			}
			[Token(Token = "0x600073F")]
			[Address(RVA = "0x388B0D4", Offset = "0x388B0D4", VA = "0x388B0D4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public Color GizmoColor
		{
			[Token(Token = "0x6000740")]
			[Address(RVA = "0x388B0E8", Offset = "0x388B0E8", VA = "0x388B0E8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000741")]
			[Address(RVA = "0x388B0F4", Offset = "0x388B0F4", VA = "0x388B0F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public Color GizmoSelectionColor
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0x388B160", Offset = "0x388B160", VA = "0x388B160")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000743")]
			[Address(RVA = "0x388B16C", Offset = "0x388B16C", VA = "0x388B16C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public int CacheDensity
		{
			[Token(Token = "0x6000744")]
			[Address(RVA = "0x388B1D8", Offset = "0x388B1D8", VA = "0x388B1D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000745")]
			[Address(RVA = "0x3888500", Offset = "0x3888500", VA = "0x3888500")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public float MaxPointsPerUnit
		{
			[Token(Token = "0x6000746")]
			[Address(RVA = "0x388B1E0", Offset = "0x388B1E0", VA = "0x388B1E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000747")]
			[Address(RVA = "0x388B1E8", Offset = "0x388B1E8", VA = "0x388B1E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public bool UsePooling
		{
			[Token(Token = "0x6000748")]
			[Address(RVA = "0x388B250", Offset = "0x388B250", VA = "0x388B250")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000749")]
			[Address(RVA = "0x388B258", Offset = "0x388B258", VA = "0x388B258")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public bool UseThreading
		{
			[Token(Token = "0x600074A")]
			[Address(RVA = "0x388B278", Offset = "0x388B278", VA = "0x388B278")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600074B")]
			[Address(RVA = "0x388B280", Offset = "0x388B280", VA = "0x388B280")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool CheckTransform
		{
			[Token(Token = "0x600074C")]
			[Address(RVA = "0x388B28C", Offset = "0x388B28C", VA = "0x388B28C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600074D")]
			[Address(RVA = "0x388B294", Offset = "0x388B294", VA = "0x388B294")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public float Tension
		{
			[Token(Token = "0x600074E")]
			[Address(RVA = "0x388B2DC", Offset = "0x388B2DC", VA = "0x388B2DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600074F")]
			[Address(RVA = "0x388B2E4", Offset = "0x388B2E4", VA = "0x388B2E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public float Continuity
		{
			[Token(Token = "0x6000750")]
			[Address(RVA = "0x388B320", Offset = "0x388B320", VA = "0x388B320")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000751")]
			[Address(RVA = "0x388B328", Offset = "0x388B328", VA = "0x388B328")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public float Bias
		{
			[Token(Token = "0x6000752")]
			[Address(RVA = "0x388B364", Offset = "0x388B364", VA = "0x388B364")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000753")]
			[Address(RVA = "0x388B36C", Offset = "0x388B36C", VA = "0x388B36C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public int BSplineDegree
		{
			[Token(Token = "0x6000754")]
			[Address(RVA = "0x388B3A8", Offset = "0x388B3A8", VA = "0x388B3A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000755")]
			[Address(RVA = "0x388B3B0", Offset = "0x388B3B0", VA = "0x388B3B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public bool IsBSplineClamped
		{
			[Token(Token = "0x6000756")]
			[Address(RVA = "0x388B484", Offset = "0x388B484", VA = "0x388B484")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000757")]
			[Address(RVA = "0x388B4D0", Offset = "0x388B4D0", VA = "0x388B4D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000758")]
			[Address(RVA = "0x388B518", Offset = "0x388B518", VA = "0x388B518")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F5")]
		public Bounds Bounds
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0x388B520", Offset = "0x388B520", VA = "0x388B520")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x170000F6")]
		public int Count
		{
			[Token(Token = "0x600075A")]
			[Address(RVA = "0x388B730", Offset = "0x388B730", VA = "0x388B730")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F7")]
		public int ControlPointCount
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0x3888D78", Offset = "0x3888D78", VA = "0x3888D78")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F8")]
		public int CacheSize
		{
			[Token(Token = "0x600075C")]
			[Address(RVA = "0x388BAA8", Offset = "0x388BAA8", VA = "0x388BAA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F9")]
		public float Length
		{
			[Token(Token = "0x600075D")]
			[Address(RVA = "0x388BBB0", Offset = "0x388BBB0", VA = "0x388BBB0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FA")]
		public bool Dirty
		{
			[Token(Token = "0x600075E")]
			[Address(RVA = "0x388BA58", Offset = "0x388BA58", VA = "0x388BA58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FB")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x600075F")]
			[Address(RVA = "0x388B780", Offset = "0x388B780", VA = "0x388B780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x6000760")]
			[Address(RVA = "0x38886C0", Offset = "0x38886C0", VA = "0x38886C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		[CanBeNull]
		public CurvySplineSegment FirstVisibleControlPoint
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0x388BC9C", Offset = "0x388BC9C", VA = "0x388BC9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		[CanBeNull]
		public CurvySplineSegment LastVisibleControlPoint
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0x3889B00", Offset = "0x3889B00", VA = "0x3889B00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		[CanBeNull]
		public CurvySplineSegment FirstSegment
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0x388BCB8", Offset = "0x388BCB8", VA = "0x388BCB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		[CanBeNull]
		public CurvySplineSegment LastSegment
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0x388BCD4", Offset = "0x388BCD4", VA = "0x388BCD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public bool GlobalCoordinatesChangedThisFrame
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0x388BCF0", Offset = "0x388BCF0", VA = "0x388BCF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000102")]
		[CanBeNull]
		public Action<CurvySpline> OnGlobalCoordinatesChanged
		{
			[Token(Token = "0x6000766")]
			[Address(RVA = "0x388BDB4", Offset = "0x388BDB4", VA = "0x388BDB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000767")]
			[Address(RVA = "0x388BDBC", Offset = "0x388BDBC", VA = "0x388BDBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public CurvySplineEvent OnRefresh
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0x388BDC4", Offset = "0x388BDC4", VA = "0x388BDC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000769")]
			[Address(RVA = "0x388BDCC", Offset = "0x388BDCC", VA = "0x388BDCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public CurvySplineEvent OnAfterControlPointChanges
		{
			[Token(Token = "0x600076A")]
			[Address(RVA = "0x388BDE4", Offset = "0x388BDE4", VA = "0x388BDE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600076B")]
			[Address(RVA = "0x388BDEC", Offset = "0x388BDEC", VA = "0x388BDEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public CurvyControlPointEvent OnBeforeControlPointAdd
		{
			[Token(Token = "0x600076C")]
			[Address(RVA = "0x388BE04", Offset = "0x388BE04", VA = "0x388BE04")]
			get
			{
				return null;
			}
			[Token(Token = "0x600076D")]
			[Address(RVA = "0x388BE0C", Offset = "0x388BE0C", VA = "0x388BE0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public CurvyControlPointEvent OnAfterControlPointAdd
		{
			[Token(Token = "0x600076E")]
			[Address(RVA = "0x388BE24", Offset = "0x388BE24", VA = "0x388BE24")]
			get
			{
				return null;
			}
			[Token(Token = "0x600076F")]
			[Address(RVA = "0x388BE2C", Offset = "0x388BE2C", VA = "0x388BE2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public CurvyControlPointEvent OnBeforeControlPointDelete
		{
			[Token(Token = "0x6000770")]
			[Address(RVA = "0x388BE44", Offset = "0x388BE44", VA = "0x388BE44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000771")]
			[Address(RVA = "0x388BE4C", Offset = "0x388BE4C", VA = "0x388BE4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		[NotNull]
		private TransformMonitor TransformMonitor
		{
			[Token(Token = "0x60007DF")]
			[Address(RVA = "0x388BD10", Offset = "0x388BD10", VA = "0x388BD10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000109")]
		private List<CurvySplineSegment> Segments
		{
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0x388BA74", Offset = "0x388BA74", VA = "0x388BA74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		private int MaxBSplineDegree
		{
			[Token(Token = "0x60007EA")]
			[Address(RVA = "0x388B42C", Offset = "0x388B42C", VA = "0x388B42C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x388A894", Offset = "0x388A894", VA = "0x388A894")]
		public CurvySpline()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x388BE64", Offset = "0x388BE64", VA = "0x388BE64")]
		public static CurvySpline Create()
		{
			return null;
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x388C080", Offset = "0x388C080", VA = "0x388C080")]
		public static CurvySpline Create(CurvySpline takeOptionsFrom)
		{
			return null;
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x388C188", Offset = "0x388C188", VA = "0x388C188")]
		public static int CalculateCacheSize(int density, float segmentLength, float maxPointsPerUnit)
		{
			return default(int);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x388C224", Offset = "0x388C224", VA = "0x388C224")]
		public static float CalculateSamplingPointsPerUnit(int density, float maxPointsPerUnit)
		{
			return default(float);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x388C2EC", Offset = "0x388C2EC", VA = "0x388C2EC")]
		public static Vector3 Bezier(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x388C3DC", Offset = "0x388C3DC", VA = "0x388C3DC")]
		public static Vector3 BezierTangent(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x388C49C", Offset = "0x388C49C", VA = "0x388C49C")]
		public static Vector3 CatmullRom(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x388C5BC", Offset = "0x388C5BC", VA = "0x388C5BC")]
		public static Vector3 TCB(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f, float FT0, float FC0, float FB0, float FT1, float FC1, float FB1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x388C7D4", Offset = "0x388C7D4", VA = "0x388C7D4")]
		public static CurvySplineSegment GetFollowUpHeadingControlPoint([NotNull] CurvySplineSegment followUp, ConnectionHeadingEnum headingDirection)
		{
			return null;
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x388C9C0", Offset = "0x388C9C0", VA = "0x388C9C0")]
		public Vector3 Interpolate(float tf, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x388CE04", Offset = "0x388CE04", VA = "0x388CE04")]
		public Vector3 InterpolateFast(float tf, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x388CF70", Offset = "0x388CF70", VA = "0x388CF70")]
		public Vector3 InterpolateByDistance(float distance, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x388D050", Offset = "0x388D050", VA = "0x388D050")]
		public Vector3 InterpolateByDistanceFast(float distance, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x388D080", Offset = "0x388D080", VA = "0x388D080")]
		public Vector3 GetTangent(float tf, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x388D168", Offset = "0x388D168", VA = "0x388D168")]
		public Vector3 GetTangent(float tf, Vector3 position, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x388D3B4", Offset = "0x388D3B4", VA = "0x388D3B4")]
		public Vector3 GetTangentFast(float tf, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x388D520", Offset = "0x388D520", VA = "0x388D520")]
		public Vector3 GetTangentByDistance(float distance, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x388D550", Offset = "0x388D550", VA = "0x388D550")]
		public Vector3 GetTangentByDistanceFast(float distance, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x388D580", Offset = "0x388D580", VA = "0x388D580")]
		public void InterpolateAndGetTangent(float tf, out Vector3 position, out Vector3 tangent, Space space = Space.Self)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x388D6B4", Offset = "0x388D6B4", VA = "0x388D6B4")]
		public void InterpolateAndGetTangentFast(float tf, out Vector3 position, out Vector3 tangent, Space space = Space.Self)
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x388D92C", Offset = "0x388D92C", VA = "0x388D92C")]
		public Vector3 GetOrientationUpFast(float tf, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x388DA98", Offset = "0x388DA98", VA = "0x388DA98")]
		public Quaternion GetOrientationFast(float tf, bool inverse = false, Space space = Space.Self)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000788")]
		public T GetMetadata<T>(float tf) where T : CurvyMetadataBase
		{
			return null;
		}

		[Token(Token = "0x6000789")]
		public U GetInterpolatedMetadata<T, U>(float tf) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x388DC04", Offset = "0x388DC04", VA = "0x388DC04")]
		public float TFToDistance(float tf, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x388DD7C", Offset = "0x388DD7C", VA = "0x388DD7C")]
		public CurvySplineSegment TFToSegment(float tf, out float localF, out bool isOnSegmentStart, out bool isOnSegmentEnd, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x388DCA4", Offset = "0x388DCA4", VA = "0x388DCA4")]
		public CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x388DEC8", Offset = "0x388DEC8", VA = "0x388DEC8")]
		public CurvySplineSegment TFToSegment(float tf, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x388DF00", Offset = "0x388DF00", VA = "0x388DF00")]
		public CurvySplineSegment TFToSegment(float tf)
		{
			return null;
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x388CA44", Offset = "0x388CA44", VA = "0x388CA44")]
		public CurvySplineSegment TFToSegment(float tf, out float localF)
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x388DF38", Offset = "0x388DF38", VA = "0x388DF38")]
		public float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x388DF78", Offset = "0x388DF78", VA = "0x388DF78")]
		public float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x388CFA0", Offset = "0x388CFA0", VA = "0x388CFA0")]
		public float DistanceToTF(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x388E11C", Offset = "0x388E11C", VA = "0x388E11C")]
		public CurvySplineSegment DistanceToSegment(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x388E028", Offset = "0x388E028", VA = "0x388E028")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x388E154", Offset = "0x388E154", VA = "0x388E154")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, out bool isOnSegmentStart, out bool isOnSegmentEnd, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x388E548", Offset = "0x388E548", VA = "0x388E548")]
		public float ClampDistance(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x388E580", Offset = "0x388E580", VA = "0x388E580")]
		public float ClampDistance(float distance, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x388E6D4", Offset = "0x388E6D4", VA = "0x388E6D4")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x388E808", Offset = "0x388E808", VA = "0x388E808")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x388E988", Offset = "0x388E988", VA = "0x388E988")]
		public CurvySplineSegment Add()
		{
			return null;
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x388E994", Offset = "0x388E994", VA = "0x388E994")]
		public CurvySplineSegment[] Add(int controlPointsCount)
		{
			return null;
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x388EB50", Offset = "0x388EB50", VA = "0x388EB50")]
		public CurvySplineSegment Add(Vector3 controlPointPosition, Space space)
		{
			return null;
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x388E9F8", Offset = "0x388E9F8", VA = "0x388E9F8")]
		public CurvySplineSegment[] Add(params Vector3[] controlPointsLocalPositions)
		{
			return null;
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x388EDD8", Offset = "0x388EDD8", VA = "0x388EDD8")]
		public CurvySplineSegment[] Add(Vector3[] controlPointsPositions, Space space)
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x388EF3C", Offset = "0x388EF3C", VA = "0x388EF3C")]
		public CurvySplineSegment InsertBefore(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x388F0C0", Offset = "0x388F0C0", VA = "0x388F0C0")]
		public CurvySplineSegment InsertBefore([CanBeNull] CurvySplineSegment controlPoint, Vector3 position, bool skipRefreshingAndEvents = false, Space space = Space.World)
		{
			return null;
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x388996C", Offset = "0x388996C", VA = "0x388996C")]
		public CurvySplineSegment InsertAfter(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x388EC44", Offset = "0x388EC44", VA = "0x388EC44")]
		public CurvySplineSegment InsertAfter([CanBeNull] CurvySplineSegment controlPoint, Vector3 position, bool skipRefreshingAndEvents = false, Space space = Space.World)
		{
			return null;
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x388F3B8", Offset = "0x388F3B8", VA = "0x388F3B8")]
		public void Clear(bool isUndoable = true)
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x388F6D0", Offset = "0x388F6D0", VA = "0x388F6D0")]
		public void Delete(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x3889B1C", Offset = "0x3889B1C", VA = "0x3889B1C")]
		public void Delete(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents, bool isUndoableDeletion)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x388F8B0", Offset = "0x388F8B0", VA = "0x388F8B0")]
		public SubArray<Vector3> GetPositionsCache(Space space)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x388FA20", Offset = "0x388FA20", VA = "0x388FA20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2420", Offset = "0x10C2420")]
		public Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x388FB08", Offset = "0x388FB08", VA = "0x388FB08")]
		public Vector3[] GetApproximation(float fromTF, float toTF, bool includeEndPoint = true, Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x389005C", Offset = "0x389005C", VA = "0x389005C")]
		public SubArray<Vector3> GetTangentsCache(Space space)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x389017C", Offset = "0x389017C", VA = "0x389017C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2458", Offset = "0x10C2458")]
		public Vector3[] GetApproximationT(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x3890264", Offset = "0x3890264", VA = "0x3890264")]
		public SubArray<Vector3> GetNormalsCache(Space space)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x3890384", Offset = "0x3890384", VA = "0x3890384")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2490", Offset = "0x10C2490")]
		public Vector3[] GetApproximationUpVectors(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x389046C", Offset = "0x389046C", VA = "0x389046C")]
		public Vector3 GetNearestPoint(Vector3 position, Space space)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x38906E4", Offset = "0x38906E4", VA = "0x38906E4")]
		public float GetNearestPointTF(Vector3 localPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x3890724", Offset = "0x3890724", VA = "0x3890724")]
		public float GetNearestPointTF(Vector3 position, Space space)
		{
			return default(float);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x3890764", Offset = "0x3890764", VA = "0x3890764")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearestPoint)
		{
			return default(float);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x389079C", Offset = "0x389079C", VA = "0x389079C")]
		public float GetNearestPointTF(Vector3 position, out Vector3 nearestPoint, Space space)
		{
			return default(float);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x38907D4", Offset = "0x38907D4", VA = "0x38907D4")]
		public float GetNearestPointTF(Vector3 position, int searchStartSegmentIndex = 0, int searchEndSegmentIndex = -1, Space space = Space.Self)
		{
			return default(float);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x3890814", Offset = "0x3890814", VA = "0x3890814")]
		public float GetNearestPointTF(Vector3 position, out Vector3 nearestPoint, int searchStartSegmentIndex = 0, int searchEndSegmentIndex = -1, Space space = Space.Self)
		{
			return default(float);
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x38904B4", Offset = "0x38904B4", VA = "0x38904B4")]
		public float GetNearestPointTF(Vector3 position, out Vector3 nearestPoint, [CanBeNull] out CurvySplineSegment nearestSegment, out float nearestPointLocalF, int searchStartSegmentIndex = 0, int searchEndSegmentIndex = -1, Space space = Space.Self)
		{
			return default(float);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x3887FEC", Offset = "0x3887FEC", VA = "0x3887FEC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x3887FC8", Offset = "0x3887FC8", VA = "0x3887FC8")]
		public void SetDirtyAll()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x388AF68", Offset = "0x388AF68", VA = "0x388AF68")]
		public void SetDirtyAll(SplineDirtyingType dirtyingType, bool dirtyConnectedControlPoints)
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x3890950", Offset = "0x3890950", VA = "0x3890950")]
		public void SetDirty(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x38909C0", Offset = "0x38909C0", VA = "0x38909C0")]
		public void SetDirtyPartial(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x3890A30", Offset = "0x3890A30", VA = "0x3890A30")]
		public Vector3 ToWorldPosition(Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x3890A4C", Offset = "0x3890A4C", VA = "0x3890A4C")]
		public Vector3 ToWorldDirection(Vector3 localDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x3890A68", Offset = "0x3890A68", VA = "0x3890A68")]
		public Vector3 ToLocalPosition(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x3890A84", Offset = "0x3890A84", VA = "0x3890A84")]
		public Vector3 ToLocalDirection(Vector3 localDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x3890AA0", Offset = "0x3890AA0", VA = "0x3890AA0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C24C8", Offset = "0x10C24C8")]
		public void ApplyControlPointsNames()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x3890AA4", Offset = "0x3890AA4", VA = "0x3890AA4")]
		public void SyncSplineFromHierarchy()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x3890AF0", Offset = "0x3890AF0", VA = "0x3890AF0")]
		public bool IsPlanar(out int ignoreAxis)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x3890B6C", Offset = "0x3890B6C", VA = "0x3890B6C")]
		public bool IsPlanar(out bool xplanar, out bool yplanar, out bool zplanar)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x3890D90", Offset = "0x3890D90", VA = "0x3890D90")]
		public bool IsPlanar(CurvyPlane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x3891058", Offset = "0x3891058", VA = "0x3891058")]
		public void MakePlanar(CurvyPlane plane)
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x389148C", Offset = "0x389148C", VA = "0x389148C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2500", Offset = "0x10C2500")]
		public void MakePlanar(int axis)
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x3891640", Offset = "0x3891640", VA = "0x3891640")]
		public void Subdivide([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x3891D98", Offset = "0x3891D98", VA = "0x3891D98")]
		public void Simplify([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x3892080", Offset = "0x3892080", VA = "0x3892080")]
		public void Equalize([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x38924D8", Offset = "0x38924D8", VA = "0x38924D8")]
		public void Normalize()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x389267C", Offset = "0x389267C", VA = "0x389267C")]
		public Vector3 SetPivot(float xRel = 0f, float yRel = 0f, float zRel = 0f, bool preview = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x38928E4", Offset = "0x38928E4", VA = "0x38928E4")]
		public void Flip()
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x3892F08", Offset = "0x3892F08", VA = "0x3892F08")]
		public void MoveControlPoints(int startIndex, int count, CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x38932DC", Offset = "0x38932DC", VA = "0x38932DC")]
		public void JoinWith(CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x38933A8", Offset = "0x38933A8", VA = "0x38933A8")]
		public CurvySpline Split(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x389381C", Offset = "0x389381C", VA = "0x389381C")]
		public void SetFirstControlPoint(CurvySplineSegment controlPoint)
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x38939B0", Offset = "0x38939B0", VA = "0x38939B0")]
		public bool IsControlPointAnOrientationAnchor(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x3893A70", Offset = "0x3893A70", VA = "0x3893A70")]
		public bool CanControlPointHaveFollowUp([NotNull] CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x388F160", Offset = "0x388F160", VA = "0x388F160")]
		public short GetControlPointIndex([NotNull] CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x3893630", Offset = "0x3893630", VA = "0x3893630")]
		public short GetSegmentIndex([NotNull] CurvySplineSegment segment)
		{
			return default(short);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x388C924", Offset = "0x388C924", VA = "0x388C924")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPoint([NotNull] CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x3893AA8", Offset = "0x3893AA8", VA = "0x3893AA8")]
		[CanBeNull]
		public short GetNextControlPointIndex([NotNull] CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x3893AE0", Offset = "0x3893AE0", VA = "0x3893AE0")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPointUsingFollowUp([NotNull] CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x388C888", Offset = "0x388C888", VA = "0x388C888")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPoint([NotNull] CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x3893C18", Offset = "0x3893C18", VA = "0x3893C18")]
		[CanBeNull]
		public short GetPreviousControlPointIndex([NotNull] CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x3893C50", Offset = "0x3893C50", VA = "0x3893C50")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPointUsingFollowUp([NotNull] CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x388FFC0", Offset = "0x388FFC0", VA = "0x388FFC0")]
		[CanBeNull]
		public CurvySplineSegment GetNextSegment([NotNull] CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x3893D1C", Offset = "0x3893D1C", VA = "0x3893D1C")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousSegment([NotNull] CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x388DFEC", Offset = "0x388DFEC", VA = "0x388DFEC")]
		public bool IsControlPointASegment([NotNull] CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x3893A38", Offset = "0x3893A38", VA = "0x3893A38")]
		public bool IsControlPointVisible([NotNull] CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x3893DB8", Offset = "0x3893DB8", VA = "0x3893DB8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C25B8", Offset = "0x10C25B8")]
		public short GetControlPointOrientationAnchorIndex([NotNull] CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x3894058", Offset = "0x3894058", VA = "0x3894058")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x3894634", Offset = "0x3894634", VA = "0x3894634", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x38946AC", Offset = "0x38946AC", VA = "0x38946AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x3894750", Offset = "0x3894750", VA = "0x3894750", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x388C038", Offset = "0x388C038", VA = "0x388C038")]
		public void Start()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x3894830", Offset = "0x3894830", VA = "0x3894830", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x3894864", Offset = "0x3894864", VA = "0x3894864")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x3894AE8", Offset = "0x3894AE8", VA = "0x3894AE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x3894D5C", Offset = "0x3894D5C", VA = "0x3894D5C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x3894DA0", Offset = "0x3894DA0", VA = "0x3894DA0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x38947AC", Offset = "0x38947AC", VA = "0x38947AC")]
		[MustUseReturnValue]
		private bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x3894DE4", Offset = "0x3894DE4", VA = "0x3894DE4")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2600", Offset = "0x10C2600")]
		private void HookEditorUpdate()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x3894DE8", Offset = "0x3894DE8", VA = "0x3894DE8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2638", Offset = "0x10C2638")]
		private void UnhookEditorUpdate()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x3894B28", Offset = "0x3894B28", VA = "0x3894B28")]
		private void DoUpdate()
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x3894E90", Offset = "0x3894E90", VA = "0x3894E90")]
		private void ClearBounds()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x388B0A0", Offset = "0x388B0A0", VA = "0x388B0A0")]
		private bool CanHaveManualEndCp()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x388B4B0", Offset = "0x388B4B0", VA = "0x388B4B0")]
		private bool CanBeClamped()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x3892E8C", Offset = "0x3892E8C", VA = "0x3892E8C")]
		private void ReverseControlPoints()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x3895198", Offset = "0x3895198", VA = "0x3895198")]
		private static short GetNextControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x38951C8", Offset = "0x38951C8", VA = "0x38951C8")]
		private static short GetPreviousControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x38951FC", Offset = "0x38951FC", VA = "0x38951FC")]
		private static bool IsControlPointASegment(int controlPointIndex, int controlPointCount, bool isClosed, bool notAutoEndTangentsAndIsCatmullRomOrTCB, bool isBSpline, int bSplineDegree)
		{
			return default(bool);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x3895244", Offset = "0x3895244", VA = "0x3895244")]
		private static bool IsControlPointAnOrientationAnchor(bool isVisible, bool isSerializedOrientationAnchor, bool isFirstVisibleControlPoint, bool isLastVisibleControlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x3893668", Offset = "0x3893668", VA = "0x3893668")]
		private void AddControlPoint([NotNull] CurvySplineSegment item, bool invalidateAndDirty, bool requestSplineToHierarchySynchronization)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x3893138", Offset = "0x3893138", VA = "0x3893138")]
		private void InsertControlPoint(int index, CurvySplineSegment item)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x388F6DC", Offset = "0x388F6DC", VA = "0x388F6DC")]
		private void RemoveControlPoint(CurvySplineSegment item)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x388F570", Offset = "0x388F570", VA = "0x388F570")]
		private void ClearControlPoints(bool invalidateAndDirty, bool requestSplineToHierarchySynchronization)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x38952F4", Offset = "0x38952F4", VA = "0x38952F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2670", Offset = "0x10C2670")]
		internal void InvalidateControlPointsRelationshipCacheINTERNAL()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x3895310", Offset = "0x3895310", VA = "0x3895310")]
		private void UpdateControlPointDistances()
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x38954F4", Offset = "0x38954F4", VA = "0x38954F4")]
		private void EnforceTangentContinuity()
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x38956D8", Offset = "0x38956D8", VA = "0x38956D8")]
		private void PrepareThreadCompatibleData()
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x3893E20", Offset = "0x3893E20", VA = "0x3893E20")]
		private short[] GetOrientationAnchorIndices()
		{
			return null;
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x389594C", Offset = "0x389594C", VA = "0x389594C")]
		private void InvalidateAccumulators()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x3895964", Offset = "0x3895964", VA = "0x3895964")]
		internal void NotifyMetaDataModification()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x388F4EC", Offset = "0x388F4EC", VA = "0x388F4EC")]
		private void DisposeOfControlPoint(CurvySplineSegment controlPoint, bool isUndoable)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x38948BC", Offset = "0x38948BC", VA = "0x38948BC")]
		private bool ShouldUseControlPointPooling(out CurvyGlobalManager curvyGlobalManager)
		{
			return default(bool);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x388F198", Offset = "0x388F198", VA = "0x388F198")]
		private CurvySplineSegment InsertAt([CanBeNull] CurvySplineSegment beforeEventCP, Vector3 position, int insertionIndex, CurvyControlPointEventArgs.ModeEnum insertionMode, bool skipRefreshingAndEvents, Space space)
		{
			return null;
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x3895970", Offset = "0x3895970", VA = "0x3895970")]
		[NotNull]
		private CurvySplineSegment AcquireNewControlPoint()
		{
			return null;
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x388F9D0", Offset = "0x388F9D0", VA = "0x388F9D0")]
		private SubArray<Vector3> GetSegmentApproximationsInSpace([NotNull] Func<CurvySplineSegment, SubArray<Vector3>> approximationGetter, Space space)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x3895B5C", Offset = "0x3895B5C", VA = "0x3895B5C")]
		private SubArray<Vector3> ConcatenateSegmentApproximations([NotNull] Func<CurvySplineSegment, SubArray<Vector3>> approximationGetter)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x3895D14", Offset = "0x3895D14", VA = "0x3895D14")]
		private void TransformToWorldSpace(SubArray<Vector3> localSpaceVectors)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x38949C8", Offset = "0x38949C8", VA = "0x38949C8")]
		private void PushChildCPsToPool([NotNull] ComponentPool controlPointPool)
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x38908E8", Offset = "0x38908E8", VA = "0x38908E8")]
		private CurvySplineEventArgs OnRefreshEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x388EBDC", Offset = "0x388EBDC", VA = "0x388EBDC")]
		private CurvyControlPointEventArgs OnBeforeControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x388ED08", Offset = "0x388ED08", VA = "0x388ED08")]
		private CurvyControlPointEventArgs OnAfterControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x388F484", Offset = "0x388F484", VA = "0x388F484")]
		private CurvyControlPointEventArgs OnBeforeControlPointDeleteEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x388ED70", Offset = "0x388ED70", VA = "0x388ED70")]
		private CurvySplineEventArgs OnAfterControlPointChangesEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x3895DE0", Offset = "0x3895DE0", VA = "0x3895DE0", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public static class CurvySplineDefaultValues
	{
		[Token(Token = "0x40004CD")]
		public const bool AutoEndTangents = true;

		[Token(Token = "0x40004CE")]
		public const CurvyOrientation Orientation = CurvyOrientation.Dynamic;

		[Token(Token = "0x40004CF")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x40004D0")]
		public const int CacheDensity = 50;

		[Token(Token = "0x40004D1")]
		public const float MaxPointsPerUnit = 8f;

		[Token(Token = "0x40004D2")]
		public const bool UsePooling = true;

		[Token(Token = "0x40004D3")]
		public const CurvyUpdateMethod UpdateIn = CurvyUpdateMethod.Update;

		[Token(Token = "0x40004D4")]
		public const bool CheckTransform = true;

		[Token(Token = "0x40004D5")]
		public const int BSplineDegree = 2;

		[Token(Token = "0x40004D6")]
		public const bool IsBSplineClamped = true;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3498", Offset = "0x10A3498")]
	[ExecuteAlways]
	public class CurvySplineSegment : DTVersionedMonoBehaviour, IPoolable
	{
		[Token(Token = "0x2000137")]
		private class Approximations
		{
			[Token(Token = "0x40004FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SubArray<Vector3> Positions;

			[Token(Token = "0x40004FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SubArray<Vector3> Tangents;

			[Token(Token = "0x40004FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SubArray<Vector3> Ups;

			[Token(Token = "0x40004FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public SubArray<float> Distances;

			[MethodImpl(256)]
			[Token(Token = "0x6000906")]
			[Address(RVA = "0x223ED00", Offset = "0x223ED00", VA = "0x223ED00")]
			public void ResizePositions(int size)
			{
			}

			[MethodImpl(256)]
			[Token(Token = "0x6000907")]
			[Address(RVA = "0x223EDD4", Offset = "0x223EDD4", VA = "0x223EDD4")]
			public void ResizeTangents(int size)
			{
			}

			[MethodImpl(256)]
			[Token(Token = "0x6000908")]
			[Address(RVA = "0x223EEA8", Offset = "0x223EEA8", VA = "0x223EEA8")]
			public void ResizeUps(int size)
			{
			}

			[MethodImpl(256)]
			[Token(Token = "0x6000909")]
			[Address(RVA = "0x223EF7C", Offset = "0x223EF7C", VA = "0x223EF7C")]
			public void ResizeDistances(int size)
			{
			}

			[Token(Token = "0x600090A")]
			[Address(RVA = "0x223F050", Offset = "0x223F050", VA = "0x223F050")]
			public Approximations()
			{
			}

			[Token(Token = "0x600090B")]
			[Address(RVA = "0x223F3B0", Offset = "0x223F3B0", VA = "0x223F3B0")]
			public void Clear()
			{
			}

			[Token(Token = "0x600090C")]
			[Address(RVA = "0x223F078", Offset = "0x223F078", VA = "0x223F078")]
			private void Initialize()
			{
			}

			[Token(Token = "0x600090D")]
			[Address(RVA = "0x223F3D4", Offset = "0x223F3D4", VA = "0x223F3D4")]
			private void Free()
			{
			}
		}

		[Token(Token = "0x2000138")]
		private static class ApproximationsSetter
		{
			[Token(Token = "0x600090E")]
			[Address(RVA = "0x223F618", Offset = "0x223F618", VA = "0x223F618")]
			public static void SetPositionsToPoint([NotNull] Approximations approximations, Vector3 currentPosition)
			{
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0x223F730", Offset = "0x223F730", VA = "0x223F730")]
			public static void SetPositionsToLinear([NotNull] Approximations approximations, int elementCount, Vector3 startPosition, Vector3 endPosition)
			{
			}

			[Token(Token = "0x6000910")]
			[Address(RVA = "0x223F8F4", Offset = "0x223F8F4", VA = "0x223F8F4")]
			public static void SetPositionsToCatmullRom([NotNull] Approximations approximations, int elementCount, Vector3 startPosition, Vector3 endPosition, Vector3 preSegmentPosition, Vector3 postSegmentPosition)
			{
			}

			[Token(Token = "0x6000911")]
			[Address(RVA = "0x223FBD8", Offset = "0x223FBD8", VA = "0x223FBD8")]
			public static void SetPositionsToTCB([NotNull] Approximations approximations, int elementCount, TcbParameters tcbParameters, Vector3 startPosition, Vector3 endPosition, Vector3 preSegmentPosition, Vector3 postSegmentPosition)
			{
			}

			[Token(Token = "0x6000912")]
			[Address(RVA = "0x223FFD0", Offset = "0x223FFD0", VA = "0x223FFD0")]
			public static void SetPositionsToBezier([NotNull] Approximations approximations, int elementCount, Vector3 startPosition, Vector3 startTangent, Vector3 endPosition, Vector3 endTangent)
			{
			}

			[Token(Token = "0x6000913")]
			[Address(RVA = "0x224027C", Offset = "0x224027C", VA = "0x224027C")]
			public static void SetPositionsToBSpline([NotNull] Approximations approximations, int elementCount, SubArray<Vector3> splineP0Array, BSplineApproximationParameters bSplineParameters)
			{
			}

			[Token(Token = "0x6000914")]
			[Address(RVA = "0x2240AF0", Offset = "0x2240AF0", VA = "0x2240AF0")]
			public static void SetOrientationToNone([NotNull] Approximations approximations, int elementCount)
			{
			}

			[Token(Token = "0x6000915")]
			[Address(RVA = "0x2240BDC", Offset = "0x2240BDC", VA = "0x2240BDC")]
			public static void SetOrientationToStatic([NotNull] Approximations approximations, int elementCount, Vector3 startUp, Vector3 endUp)
			{
			}

			[Token(Token = "0x6000916")]
			[Address(RVA = "0x2240DA4", Offset = "0x2240DA4", VA = "0x2240DA4")]
			public static void SetOrientationToDynamic([NotNull] Approximations approximations, int elementCount, Vector3 startUp)
			{
			}

			[Token(Token = "0x6000917")]
			[Address(RVA = "0x224104C", Offset = "0x224104C", VA = "0x224104C")]
			public static float SetPointTangentsAndDistances([NotNull] Approximations approximations, Vector3 previousPosition, Vector3 currentPosition, Vector3 nextPosition, Quaternion currentRotation)
			{
				return default(float);
			}

			[Token(Token = "0x6000918")]
			[Address(RVA = "0x2241348", Offset = "0x2241348", VA = "0x2241348")]
			public static float SetSegmentTangentsAnDistances([NotNull] Approximations approximations, int elementCount)
			{
				return default(float);
			}
		}

		[Token(Token = "0x2000139")]
		private struct BSplineApproximationParameters : IEquatable<BSplineApproximationParameters>
		{
			[Token(Token = "0x4000500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0DFC", Offset = "0x10B0DFC")]
			private readonly int <Degree>k__BackingField;

			[Token(Token = "0x4000501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E0C", Offset = "0x10B0E0C")]
			private readonly bool <IsClamped>k__BackingField;

			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E1C", Offset = "0x10B0E1C")]
			private readonly bool <IsClosed>k__BackingField;

			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E2C", Offset = "0x10B0E2C")]
			private readonly float <StartTf>k__BackingField;

			[Token(Token = "0x4000504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E3C", Offset = "0x10B0E3C")]
			private readonly float <EndTf>k__BackingField;

			[Token(Token = "0x4000505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E4C", Offset = "0x10B0E4C")]
			private readonly ReadOnlyCollection<CurvySplineSegment> <ControlPoints>k__BackingField;

			[Token(Token = "0x4000506")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E5C", Offset = "0x10B0E5C")]
			private readonly int <SegmentsCount>k__BackingField;

			[Token(Token = "0x1700014B")]
			public readonly int Degree
			{
				[Token(Token = "0x6000919")]
				[Address(RVA = "0x22416BC", Offset = "0x22416BC", VA = "0x22416BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2B20", Offset = "0x10C2B20")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x1700014C")]
			public readonly bool IsClamped
			{
				[Token(Token = "0x600091A")]
				[Address(RVA = "0x22416C4", Offset = "0x22416C4", VA = "0x22416C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2B58", Offset = "0x10C2B58")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700014D")]
			public readonly bool IsClosed
			{
				[Token(Token = "0x600091B")]
				[Address(RVA = "0x22416CC", Offset = "0x22416CC", VA = "0x22416CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2B90", Offset = "0x10C2B90")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700014E")]
			public readonly float StartTf
			{
				[Token(Token = "0x600091C")]
				[Address(RVA = "0x22416D4", Offset = "0x22416D4", VA = "0x22416D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2BC8", Offset = "0x10C2BC8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700014F")]
			public readonly float EndTf
			{
				[Token(Token = "0x600091D")]
				[Address(RVA = "0x22416DC", Offset = "0x22416DC", VA = "0x22416DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2C00", Offset = "0x10C2C00")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000150")]
			[NotNull]
			public readonly ReadOnlyCollection<CurvySplineSegment> ControlPoints
			{
				[Token(Token = "0x600091E")]
				[Address(RVA = "0x22416E4", Offset = "0x22416E4", VA = "0x22416E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2C38", Offset = "0x10C2C38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000151")]
			public readonly int SegmentsCount
			{
				[Token(Token = "0x600091F")]
				[Address(RVA = "0x22416EC", Offset = "0x22416EC", VA = "0x22416EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2C70", Offset = "0x10C2C70")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000920")]
			[Address(RVA = "0x22416F4", Offset = "0x22416F4", VA = "0x22416F4")]
			public BSplineApproximationParameters([NotNull] CurvySplineSegment segment)
			{
			}

			[Token(Token = "0x6000921")]
			[Address(RVA = "0x22417A8", Offset = "0x22417A8", VA = "0x22417A8", Slot = "4")]
			public bool Equals(BSplineApproximationParameters other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000922")]
			[Address(RVA = "0x2241898", Offset = "0x2241898", VA = "0x2241898", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000923")]
			[Address(RVA = "0x224192C", Offset = "0x224192C", VA = "0x224192C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000924")]
			[Address(RVA = "0x2241A18", Offset = "0x2241A18", VA = "0x2241A18")]
			public static bool operator ==(BSplineApproximationParameters left, BSplineApproximationParameters right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000925")]
			[Address(RVA = "0x2241A44", Offset = "0x2241A44", VA = "0x2241A44")]
			public static bool operator !=(BSplineApproximationParameters left, BSplineApproximationParameters right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200013A")]
		internal readonly struct ControlPointExtrinsicProperties : IEquatable<ControlPointExtrinsicProperties>
		{
			[Token(Token = "0x4000507")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly bool isVisible;

			[Token(Token = "0x4000508")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly float tf;

			[Token(Token = "0x4000509")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly short segmentIndex;

			[Token(Token = "0x400050A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			private readonly short controlPointIndex;

			[Token(Token = "0x400050B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly short nextControlPointIndex;

			[Token(Token = "0x400050C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			private readonly short previousControlPointIndex;

			[Token(Token = "0x400050D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly bool previousControlPointIsSegment;

			[Token(Token = "0x400050E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			private readonly bool nextControlPointIsSegment;

			[Token(Token = "0x400050F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			private readonly bool canHaveFollowUp;

			[Token(Token = "0x17000152")]
			internal bool IsVisible
			{
				[Token(Token = "0x6000926")]
				[Address(RVA = "0x2241A74", Offset = "0x2241A74", VA = "0x2241A74")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000153")]
			internal float TF
			{
				[Token(Token = "0x6000927")]
				[Address(RVA = "0x2241A7C", Offset = "0x2241A7C", VA = "0x2241A7C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000154")]
			internal short SegmentIndex
			{
				[Token(Token = "0x6000928")]
				[Address(RVA = "0x2241A84", Offset = "0x2241A84", VA = "0x2241A84")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000155")]
			internal short ControlPointIndex
			{
				[Token(Token = "0x6000929")]
				[Address(RVA = "0x2241A8C", Offset = "0x2241A8C", VA = "0x2241A8C")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000156")]
			internal short NextControlPointIndex
			{
				[Token(Token = "0x600092A")]
				[Address(RVA = "0x2241A94", Offset = "0x2241A94", VA = "0x2241A94")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000157")]
			internal short PreviousControlPointIndex
			{
				[Token(Token = "0x600092B")]
				[Address(RVA = "0x2241A9C", Offset = "0x2241A9C", VA = "0x2241A9C")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000158")]
			internal bool PreviousControlPointIsSegment
			{
				[Token(Token = "0x600092C")]
				[Address(RVA = "0x2241AA4", Offset = "0x2241AA4", VA = "0x2241AA4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000159")]
			internal bool NextControlPointIsSegment
			{
				[Token(Token = "0x600092D")]
				[Address(RVA = "0x2241AAC", Offset = "0x2241AAC", VA = "0x2241AAC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015A")]
			internal bool CanHaveFollowUp
			{
				[Token(Token = "0x600092E")]
				[Address(RVA = "0x2241AB4", Offset = "0x2241AB4", VA = "0x2241AB4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015B")]
			internal bool IsSegment
			{
				[Token(Token = "0x600092F")]
				[Address(RVA = "0x223E924", Offset = "0x223E924", VA = "0x223E924")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015C")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C81C8", Offset = "0x10C81C8")]
			internal short OrientationAnchorIndex
			{
				[Token(Token = "0x6000930")]
				[Address(RVA = "0x2241ABC", Offset = "0x2241ABC", VA = "0x2241ABC")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x6000931")]
			[Address(RVA = "0x2241B10", Offset = "0x2241B10", VA = "0x2241B10")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2CA8", Offset = "0x10C2CA8")]
			internal ControlPointExtrinsicProperties(bool isVisible, float tf, short segmentIndex, short controlPointIndex, short previousControlPointIndex, short nextControlPointIndex, bool previousControlPointIsSegment, bool nextControlPointIsSegment, bool canHaveFollowUp, short orientationAnchorIndex)
			{
			}

			[Token(Token = "0x6000932")]
			[Address(RVA = "0x223E8E8", Offset = "0x223E8E8", VA = "0x223E8E8")]
			internal ControlPointExtrinsicProperties(bool isVisible, float tf, short segmentIndex, short controlPointIndex, short previousControlPointIndex, short nextControlPointIndex, bool previousControlPointIsSegment, bool nextControlPointIsSegment, bool canHaveFollowUp)
			{
			}

			[Token(Token = "0x6000933")]
			[Address(RVA = "0x2241B4C", Offset = "0x2241B4C", VA = "0x2241B4C", Slot = "4")]
			public bool Equals(ControlPointExtrinsicProperties other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000934")]
			[Address(RVA = "0x2241C24", Offset = "0x2241C24", VA = "0x2241C24", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000935")]
			[Address(RVA = "0x2241CC0", Offset = "0x2241CC0", VA = "0x2241CC0", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000936")]
			[Address(RVA = "0x2241E1C", Offset = "0x2241E1C", VA = "0x2241E1C")]
			public static bool operator ==(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000937")]
			[Address(RVA = "0x2241E50", Offset = "0x2241E50", VA = "0x2241E50")]
			public static bool operator !=(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200013B")]
		private class ThreadSafeData
		{
			[Token(Token = "0x4000510")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 ThreadSafeLocalPosition;

			[Token(Token = "0x4000511")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 ThreadSafeNextCpLocalPosition;

			[Token(Token = "0x4000512")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 ThreadSafePreviousCpLocalPosition;

			[Token(Token = "0x4000513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion ThreadSafeLocalRotation;

			[Token(Token = "0x6000938")]
			[Address(RVA = "0x2241E88", Offset = "0x2241E88", VA = "0x2241E88")]
			internal void Set(bool useFollowUp, CurvySplineSegment curvySplineSegment, out CurvySplineSegment nextCP)
			{
			}

			[Token(Token = "0x6000939")]
			[Address(RVA = "0x2242198", Offset = "0x2242198", VA = "0x2242198")]
			public ThreadSafeData()
			{
			}
		}

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color GizmoTangentColor;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10AFB44", Offset = "0x10AFB44")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AFB44", Offset = "0x10AFB44")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AFB44", Offset = "0x10AFB44")]
		private bool m_AutoBakeOrientation;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10AFBF8", Offset = "0x10AFBF8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AFBF8", Offset = "0x10AFBF8")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AFBF8", Offset = "0x10AFBF8")]
		private bool m_OrientationAnchor;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AFCF0", Offset = "0x10AFCF0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AFCF0", Offset = "0x10AFCF0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AFCF0", Offset = "0x10AFCF0")]
		[SerializeField]
		private CurvyOrientationSwirl m_Swirl;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10AFDFC", Offset = "0x10AFDFC")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10AFDFC", Offset = "0x10AFDFC")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10AFDFC", Offset = "0x10AFDFC")]
		private float m_SwirlTurns;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10AFF58", Offset = "0x10AFF58")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10AFF58", Offset = "0x10AFF58")]
		[SerializeField]
		private bool m_AutoHandles;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B0050", Offset = "0x10B0050")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B0050", Offset = "0x10B0050")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0148", Offset = "0x10B0148")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B0148", Offset = "0x10B0148")]
		private Vector3 m_HandleIn;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B01FC", Offset = "0x10B01FC")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B01FC", Offset = "0x10B01FC")]
		private Vector3 m_HandleOut;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B02B0", Offset = "0x10B02B0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B02B0", Offset = "0x10B02B0")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0x10B02B0", Offset = "0x10B02B0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B02B0", Offset = "0x10B02B0")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10B02B0", Offset = "0x10B02B0")]
		private bool m_OverrideGlobalTension;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B0430", Offset = "0x10B0430")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0430", Offset = "0x10B0430")]
		private bool m_OverrideGlobalContinuity;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B04BC", Offset = "0x10B04BC")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B04BC", Offset = "0x10B04BC")]
		private bool m_OverrideGlobalBias;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0548", Offset = "0x10B0548")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B0548", Offset = "0x10B0548")]
		[SerializeField]
		private bool m_SynchronizeTCB;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B05B8", Offset = "0x10B05B8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B05B8", Offset = "0x10B05B8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B05B8", Offset = "0x10B05B8")]
		private float m_StartTension;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B06C4", Offset = "0x10B06C4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B06C4", Offset = "0x10B06C4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B06C4", Offset = "0x10B06C4")]
		private float m_EndTension;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B080C", Offset = "0x10B080C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B080C", Offset = "0x10B080C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B080C", Offset = "0x10B080C")]
		private float m_StartContinuity;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B0918", Offset = "0x10B0918")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B0918", Offset = "0x10B0918")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0918", Offset = "0x10B0918")]
		private float m_EndContinuity;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0A60", Offset = "0x10B0A60")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B0A60", Offset = "0x10B0A60")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B0A60", Offset = "0x10B0A60")]
		private float m_StartBias;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B0B6C", Offset = "0x10B0B6C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B0B6C", Offset = "0x10B0B6C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B0B6C", Offset = "0x10B0B6C")]
		private float m_EndBias;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[SerializeField]
		private CurvySplineSegment m_FollowUp;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		[SerializeField]
		private ConnectionHeadingEnum m_FollowUpHeading;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		[SerializeField]
		private bool m_ConnectionSyncPosition;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[HideInInspector]
		[SerializeField]
		private bool m_ConnectionSyncRotation;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		[SerializeField]
		private CurvyConnection m_Connection;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform cachedTransform;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[CanBeNull]
		private CurvySplineSegment cachedNextControlPoint;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[CanBeNull]
		private ThreadSafeData threadSafeData;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CurvySpline mSpline;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Bounds? mBounds;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly HashSet<CurvyMetadataBase> mMetadata;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3? lastProcessedLocalPosition;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion? lastProcessedLocalRotation;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float distance;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float length;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private SubArray<Vector3> bSplineP0Array;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private ControlPointExtrinsicProperties extrinsicProperties;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[NotNull]
		private readonly Approximations approximations;

		[Token(Token = "0x17000116")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8080", Offset = "0x10C8080")]
		public Vector3[] Approximation
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x38960D4", Offset = "0x38960D4", VA = "0x38960D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600086A")]
			[Address(RVA = "0x38961B4", Offset = "0x38961B4", VA = "0x38961B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C80B8", Offset = "0x10C80B8")]
		public float[] ApproximationDistances
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x38962F0", Offset = "0x38962F0", VA = "0x38962F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x38963D0", Offset = "0x38963D0", VA = "0x38963D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C80F0", Offset = "0x10C80F0")]
		public Vector3[] ApproximationUp
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0x389650C", Offset = "0x389650C", VA = "0x389650C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x38965EC", Offset = "0x38965EC", VA = "0x38965EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8128", Offset = "0x10C8128")]
		public Vector3[] ApproximationT
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x3896728", Offset = "0x3896728", VA = "0x3896728")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x3896808", Offset = "0x3896808", VA = "0x3896808")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public bool AutoBakeOrientation
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0x3896944", Offset = "0x3896944", VA = "0x3896944")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000872")]
			[Address(RVA = "0x389694C", Offset = "0x389694C", VA = "0x389694C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public bool SerializedOrientationAnchor
		{
			[Token(Token = "0x6000873")]
			[Address(RVA = "0x389696C", Offset = "0x389696C", VA = "0x389696C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000874")]
			[Address(RVA = "0x3896974", Offset = "0x3896974", VA = "0x3896974")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public CurvyOrientationSwirl Swirl
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0x3896A58", Offset = "0x3896A58", VA = "0x3896A58")]
			get
			{
				return default(CurvyOrientationSwirl);
			}
			[Token(Token = "0x6000876")]
			[Address(RVA = "0x3896A60", Offset = "0x3896A60", VA = "0x3896A60")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public float SwirlTurns
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0x3896AB4", Offset = "0x3896AB4", VA = "0x3896AB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0x3896ABC", Offset = "0x3896ABC", VA = "0x3896ABC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public Vector3 HandleIn
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0x3896B10", Offset = "0x3896B10", VA = "0x3896B10")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600087A")]
			[Address(RVA = "0x3889174", Offset = "0x3889174", VA = "0x3889174")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public Vector3 HandleOut
		{
			[Token(Token = "0x600087B")]
			[Address(RVA = "0x3896B1C", Offset = "0x3896B1C", VA = "0x3896B1C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600087C")]
			[Address(RVA = "0x388920C", Offset = "0x388920C", VA = "0x388920C")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public Vector3 HandleInPosition
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0x3891D14", Offset = "0x3891D14", VA = "0x3891D14")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600087E")]
			[Address(RVA = "0x388906C", Offset = "0x388906C", VA = "0x388906C")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public Vector3 HandleOutPosition
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0x3891C90", Offset = "0x3891C90", VA = "0x3891C90")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000880")]
			[Address(RVA = "0x38890F0", Offset = "0x38890F0", VA = "0x38890F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public bool AutoHandles
		{
			[Token(Token = "0x6000881")]
			[Address(RVA = "0x3896B28", Offset = "0x3896B28", VA = "0x3896B28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000882")]
			[Address(RVA = "0x3888DC4", Offset = "0x3888DC4", VA = "0x3888DC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6000883")]
			[Address(RVA = "0x3896CA4", Offset = "0x3896CA4", VA = "0x3896CA4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000884")]
			[Address(RVA = "0x3888E18", Offset = "0x3888E18", VA = "0x3888E18")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public bool SynchronizeTCB
		{
			[Token(Token = "0x6000885")]
			[Address(RVA = "0x3896CAC", Offset = "0x3896CAC", VA = "0x3896CAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000886")]
			[Address(RVA = "0x3892E2C", Offset = "0x3892E2C", VA = "0x3892E2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public bool OverrideGlobalTension
		{
			[Token(Token = "0x6000887")]
			[Address(RVA = "0x3896CB4", Offset = "0x3896CB4", VA = "0x3896CB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000888")]
			[Address(RVA = "0x3892DCC", Offset = "0x3892DCC", VA = "0x3892DCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public bool OverrideGlobalContinuity
		{
			[Token(Token = "0x6000889")]
			[Address(RVA = "0x3896CBC", Offset = "0x3896CBC", VA = "0x3896CBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600088A")]
			[Address(RVA = "0x3892D6C", Offset = "0x3892D6C", VA = "0x3892D6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000127")]
		public bool OverrideGlobalBias
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0x3896CC4", Offset = "0x3896CC4", VA = "0x3896CC4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600088C")]
			[Address(RVA = "0x3892D0C", Offset = "0x3892D0C", VA = "0x3892D0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000128")]
		public float StartTension
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0x3896CCC", Offset = "0x3896CCC", VA = "0x3896CCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600088E")]
			[Address(RVA = "0x3892CB8", Offset = "0x3892CB8", VA = "0x3892CB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public float StartContinuity
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0x3896CD4", Offset = "0x3896CD4", VA = "0x3896CD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000890")]
			[Address(RVA = "0x3892C64", Offset = "0x3892C64", VA = "0x3892C64")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public float StartBias
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x3896CDC", Offset = "0x3896CDC", VA = "0x3896CDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x3892C10", Offset = "0x3892C10", VA = "0x3892C10")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public float EndTension
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0x3896CE4", Offset = "0x3896CE4", VA = "0x3896CE4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000894")]
			[Address(RVA = "0x3892BBC", Offset = "0x3892BBC", VA = "0x3892BBC")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public float EndContinuity
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0x3896CEC", Offset = "0x3896CEC", VA = "0x3896CEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000896")]
			[Address(RVA = "0x3892B68", Offset = "0x3892B68", VA = "0x3892B68")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public float EndBias
		{
			[Token(Token = "0x6000897")]
			[Address(RVA = "0x3896CF4", Offset = "0x3896CF4", VA = "0x3896CF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000898")]
			[Address(RVA = "0x3892B14", Offset = "0x3892B14", VA = "0x3892B14")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public TcbParameters EffectiveTcbParameters
		{
			[Token(Token = "0x6000899")]
			[Address(RVA = "0x3896CFC", Offset = "0x3896CFC", VA = "0x3896CFC")]
			get
			{
				return default(TcbParameters);
			}
		}

		[Token(Token = "0x1700012F")]
		[CanBeNull]
		public CurvySplineSegment FollowUp
		{
			[Token(Token = "0x600089A")]
			[Address(RVA = "0x3896D70", Offset = "0x3896D70", VA = "0x3896D70")]
			get
			{
				return null;
			}
			[Token(Token = "0x600089B")]
			[Address(RVA = "0x3896D78", Offset = "0x3896D78", VA = "0x3896D78")]
			private set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public ConnectionHeadingEnum FollowUpHeading
		{
			[Token(Token = "0x600089C")]
			[Address(RVA = "0x3893BAC", Offset = "0x3893BAC", VA = "0x3893BAC")]
			get
			{
				return default(ConnectionHeadingEnum);
			}
			[Token(Token = "0x600089D")]
			[Address(RVA = "0x3896F38", Offset = "0x3896F38", VA = "0x3896F38")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public bool ConnectionSyncPosition
		{
			[Token(Token = "0x600089E")]
			[Address(RVA = "0x3896FF0", Offset = "0x3896FF0", VA = "0x3896FF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600089F")]
			[Address(RVA = "0x3896FF8", Offset = "0x3896FF8", VA = "0x3896FF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public bool ConnectionSyncRotation
		{
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0x3897018", Offset = "0x3897018", VA = "0x3897018")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008A1")]
			[Address(RVA = "0x3897020", Offset = "0x3897020", VA = "0x3897020")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public CurvyConnection Connection
		{
			[Token(Token = "0x60008A2")]
			[Address(RVA = "0x3897040", Offset = "0x3897040", VA = "0x3897040")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008A3")]
			[Address(RVA = "0x3897048", Offset = "0x3897048", VA = "0x3897048")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public SubArray<Vector3> PositionsApproximation
		{
			[MethodImpl(256)]
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0x38971B8", Offset = "0x38971B8", VA = "0x38971B8")]
			get
			{
				return default(SubArray<Vector3>);
			}
		}

		[Token(Token = "0x17000135")]
		public SubArray<Vector3> TangentsApproximation
		{
			[MethodImpl(256)]
			[Token(Token = "0x60008A5")]
			[Address(RVA = "0x38971D4", Offset = "0x38971D4", VA = "0x38971D4")]
			get
			{
				return default(SubArray<Vector3>);
			}
		}

		[Token(Token = "0x17000136")]
		public SubArray<Vector3> UpsApproximation
		{
			[MethodImpl(256)]
			[Token(Token = "0x60008A6")]
			[Address(RVA = "0x38971F0", Offset = "0x38971F0", VA = "0x38971F0")]
			get
			{
				return default(SubArray<Vector3>);
			}
		}

		[Token(Token = "0x17000137")]
		public SubArray<float> DistancesApproximation
		{
			[MethodImpl(256)]
			[Token(Token = "0x60008A7")]
			[Address(RVA = "0x389720C", Offset = "0x389720C", VA = "0x389720C")]
			get
			{
				return default(SubArray<float>);
			}
		}

		[Token(Token = "0x17000138")]
		public int CacheSize
		{
			[Token(Token = "0x60008A8")]
			[Address(RVA = "0x388BB90", Offset = "0x388BB90", VA = "0x388BB90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000139")]
		public Bounds Bounds
		{
			[Token(Token = "0x60008A9")]
			[Address(RVA = "0x388B7FC", Offset = "0x388B7FC", VA = "0x388B7FC")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700013A")]
		public float Length
		{
			[Token(Token = "0x60008AA")]
			[Address(RVA = "0x3897228", Offset = "0x3897228", VA = "0x3897228")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0x3897230", Offset = "0x3897230", VA = "0x3897230")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public float Distance
		{
			[Token(Token = "0x60008AC")]
			[Address(RVA = "0x3897238", Offset = "0x3897238", VA = "0x3897238")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AD")]
			[Address(RVA = "0x3897240", Offset = "0x3897240", VA = "0x3897240")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public float TF
		{
			[Token(Token = "0x60008AE")]
			[Address(RVA = "0x3897248", Offset = "0x3897248", VA = "0x3897248")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0x3897264", Offset = "0x3897264", VA = "0x3897264")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C29C0", Offset = "0x10C29C0")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public bool IsFirstControlPoint
		{
			[Token(Token = "0x60008B0")]
			[Address(RVA = "0x38972D8", Offset = "0x38972D8", VA = "0x38972D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013E")]
		public bool IsLastControlPoint
		{
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0x3897304", Offset = "0x3897304", VA = "0x3897304")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		public HashSet<CurvyMetadataBase> Metadata
		{
			[Token(Token = "0x60008B2")]
			[Address(RVA = "0x3897354", Offset = "0x3897354", VA = "0x3897354")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		[CanBeNull]
		public CurvySpline Spline
		{
			[Token(Token = "0x60008B3")]
			[Address(RVA = "0x389735C", Offset = "0x389735C", VA = "0x389735C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public bool HasUnprocessedLocalPosition
		{
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0x3894F40", Offset = "0x3894F40", VA = "0x3894F40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000142")]
		public bool HasUnprocessedLocalOrientation
		{
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0x3895008", Offset = "0x3895008", VA = "0x3895008")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000143")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8180", Offset = "0x10C8180")]
		public bool OrientatinInfluencesSpline
		{
			[Token(Token = "0x60008B6")]
			[Address(RVA = "0x3897364", Offset = "0x3897364", VA = "0x3897364")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000144")]
		public bool OrientationInfluencesSpline
		{
			[Token(Token = "0x60008B7")]
			[Address(RVA = "0x38950E0", Offset = "0x38950E0", VA = "0x38950E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000145")]
		private CurvyInterpolation interpolation
		{
			[Token(Token = "0x60008E7")]
			[Address(RVA = "0x38992BC", Offset = "0x38992BC", VA = "0x38992BC")]
			get
			{
				return default(CurvyInterpolation);
			}
		}

		[Token(Token = "0x17000146")]
		private bool isDynamicOrientation
		{
			[Token(Token = "0x60008E8")]
			[Address(RVA = "0x3899344", Offset = "0x3899344", VA = "0x3899344")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000147")]
		private bool IsOrientationAnchorEditable
		{
			[Token(Token = "0x60008E9")]
			[Address(RVA = "0x38993D4", Offset = "0x38993D4", VA = "0x38993D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000148")]
		private bool canHaveSwirl
		{
			[Token(Token = "0x60008EA")]
			[Address(RVA = "0x38994DC", Offset = "0x38994DC", VA = "0x38994DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000149")]
		private SubArray<Vector3> BSplineP0Array
		{
			[Token(Token = "0x60008EB")]
			[Address(RVA = "0x3897EF8", Offset = "0x3897EF8", VA = "0x3897EF8")]
			get
			{
				return default(SubArray<Vector3>);
			}
		}

		[Token(Token = "0x1700014A")]
		private bool CanTouchItsSpline
		{
			[Token(Token = "0x60008EF")]
			[Address(RVA = "0x38969D4", Offset = "0x38969D4", VA = "0x38969D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x3897368", Offset = "0x3897368", VA = "0x3897368")]
		public void SetBezierHandleIn(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x3897758", Offset = "0x3897758", VA = "0x3897758")]
		public void SetBezierHandleOut(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x38892A4", Offset = "0x38892A4", VA = "0x38892A4")]
		public void SetBezierHandles(float distanceFrag = -1f, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x3897B40", Offset = "0x3897B40", VA = "0x3897B40")]
		public void SetBezierHandles(float distanceFrag, Vector3 p, Vector3 n, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x3897CC8", Offset = "0x3897CC8", VA = "0x3897CC8")]
		public void SetFollowUp(CurvySplineSegment target, ConnectionHeadingEnum heading = ConnectionHeadingEnum.Auto)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x3889C54", Offset = "0x3889C54", VA = "0x3889C54")]
		public void ResetConnectionUnrelatedProperties()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x3889D30", Offset = "0x3889D30", VA = "0x3889D30")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x3897E30", Offset = "0x3897E30", VA = "0x3897E30")]
		public void Disconnect(bool destroyEmptyConnection)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x388CA74", Offset = "0x388CA74", VA = "0x388CA74")]
		public Vector3 Interpolate(float localF, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x388CE88", Offset = "0x388CE88", VA = "0x388CE88")]
		public Vector3 InterpolateFast(float localF, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x388D104", Offset = "0x388D104", VA = "0x388D104")]
		public Vector3 GetTangent(float localF, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x388D214", Offset = "0x388D214", VA = "0x388D214")]
		public Vector3 GetTangent(float localF, Vector3 position, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x388D438", Offset = "0x388D438", VA = "0x388D438")]
		public Vector3 GetTangentFast(float localF, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x388D62C", Offset = "0x388D62C", VA = "0x388D62C")]
		public void InterpolateAndGetTangent(float localF, out Vector3 position, out Vector3 tangent, Space space = Space.Self)
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x388D760", Offset = "0x388D760", VA = "0x388D760")]
		public void InterpolateAndGetTangentFast(float localF, out Vector3 position, out Vector3 tangent, Space space = Space.Self)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x388D9B0", Offset = "0x388D9B0", VA = "0x388D9B0")]
		public Vector3 GetOrientationUpFast(float localF, Space space = Space.Self)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x388DB2C", Offset = "0x388DB2C", VA = "0x388DB2C")]
		public Quaternion GetOrientationFast(float localF, bool inverse = false, Space space = Space.Self)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x38982C4", Offset = "0x38982C4", VA = "0x38982C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C29F8", Offset = "0x10C29F8")]
		public void ReloadMetaData()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x389860C", Offset = "0x389860C", VA = "0x389860C")]
		public void RegisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x3898678", Offset = "0x3898678", VA = "0x3898678")]
		public void UnregisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60008CC")]
		public T GetMetadata<T>(bool autoCreate = false) where T : CurvyMetadataBase
		{
			return null;
		}

		[Token(Token = "0x60008CD")]
		public U GetInterpolatedMetadata<T, U>(float f) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x38986DC", Offset = "0x38986DC", VA = "0x38986DC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2A30", Offset = "0x10C2A30")]
		public void DeleteMetadata()
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x389084C", Offset = "0x389084C", VA = "0x389084C")]
		public float GetNearestPointF(Vector3 position, Space space = Space.Self)
		{
			return default(float);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x388E058", Offset = "0x388E058", VA = "0x388E058")]
		public float DistanceToLocalF(float localDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x388DCD4", Offset = "0x388DCD4", VA = "0x388DCD4")]
		public float LocalFToDistance(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x38908CC", Offset = "0x38908CC", VA = "0x38908CC")]
		public float LocalFToTF(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x389899C", Offset = "0x389899C", VA = "0x389899C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x3894DEC", Offset = "0x3894DEC", VA = "0x3894DEC")]
		public void BakeOrientationToTransform()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x388FF34", Offset = "0x388FF34", VA = "0x388FF34")]
		public int getApproximationIndexINTERNAL(float localF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x3898A6C", Offset = "0x3898A6C", VA = "0x3898A6C")]
		public void LinkToSpline(CurvySpline spline)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x3898A74", Offset = "0x3898A74", VA = "0x3898A74")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2A40", Offset = "0x10C2A40")]
		public void UnlinkFromSpline()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x3895258", Offset = "0x3895258", VA = "0x3895258")]
		public void UnlinkFromSpline(CurvySpline spline)
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x3888738", Offset = "0x3888738", VA = "0x3888738")]
		public void SetLocalPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x3898A80", Offset = "0x3898A80", VA = "0x3898A80")]
		public void SetPosition(Vector3 value)
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x3888998", Offset = "0x3888998", VA = "0x3888998")]
		public void SetLocalRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x3898C38", Offset = "0x3898C38", VA = "0x3898C38")]
		public void SetRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x3898E08", Offset = "0x3898E08", VA = "0x3898E08")]
		public static bool CanFollowUpHeadToStart([NotNull] CurvySplineSegment followUp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x3898E3C", Offset = "0x3898E3C", VA = "0x3898E3C")]
		public static bool CanFollowUpHeadToEnd([NotNull] CurvySplineSegment followUp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x3898078", Offset = "0x3898078", VA = "0x3898078")]
		public static Vector3 BSpline([NotNull] ReadOnlyCollection<CurvySplineSegment> controlPoints, float tf, bool isClamped, bool isClosed, int degree, [NotNull] Vector3[] p0Array)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x3898E70", Offset = "0x3898E70", VA = "0x3898E70", Slot = "9")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x3898F78", Offset = "0x3898F78", VA = "0x3898F78", Slot = "10")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x3898F7C", Offset = "0x3898F7C", VA = "0x3898F7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x3899070", Offset = "0x3899070", VA = "0x3899070", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x3899130", Offset = "0x3899130", VA = "0x3899130")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x389922C", Offset = "0x389922C", VA = "0x389922C", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x3899294", Offset = "0x3899294", VA = "0x3899294")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2A78", Offset = "0x10C2A78")]
		public new void Reset()
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x38995D8", Offset = "0x38995D8", VA = "0x38995D8")]
		private static void GetBSplineP0s([NotNull] ReadOnlyCollection<CurvySplineSegment> controlPoints, int controlPointsCount, int degree, int k, [NotNull] Vector3[] pArray)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x38996C4", Offset = "0x38996C4", VA = "0x38996C4")]
		internal void SetExtrinsicPropertiesINTERNAL(ControlPointExtrinsicProperties value)
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x388DF70", Offset = "0x388DF70", VA = "0x388DF70")]
		internal unsafe ref ControlPointExtrinsicProperties GetExtrinsicPropertiesINTERNAL()
		{
			return ref *(ControlPointExtrinsicProperties*)null;
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x3898FB4", Offset = "0x3898FB4", VA = "0x3898FB4")]
		private void DoInitialValidations()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x38983BC", Offset = "0x38983BC", VA = "0x38983BC")]
		private void CheckAgainstMetaDataDuplication()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x3897098", Offset = "0x3897098", VA = "0x3897098")]
		private bool SetConnection(CurvyConnection newConnection)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x3896E3C", Offset = "0x3896E3C", VA = "0x3896E3C")]
		private static ConnectionHeadingEnum GetValidateConnectionHeading(ConnectionHeadingEnum connectionHeading, [CanBeNull] CurvySplineSegment followUp)
		{
			return default(ConnectionHeadingEnum);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x3896B30", Offset = "0x3896B30", VA = "0x3896B30")]
		private bool SetAutoHandles(bool newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x3895890", Offset = "0x3895890", VA = "0x3895890")]
		internal void PrepareThreadCompatibleDataINTERNAL(bool useFollowUp)
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x38996DC", Offset = "0x38996DC", VA = "0x38996DC")]
		internal void refreshCurveINTERNAL()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x3899A10", Offset = "0x3899A10", VA = "0x3899A10")]
		private int GetSegmentCacheSize()
		{
			return default(int);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x3899B08", Offset = "0x3899B08", VA = "0x3899B08")]
		internal void refreshOrientationNoneINTERNAL()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x3899BC4", Offset = "0x3899BC4", VA = "0x3899BC4")]
		internal void refreshOrientationStaticINTERNAL()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x3899E58", Offset = "0x3899E58", VA = "0x3899E58")]
		internal void refreshOrientationDynamicINTERNAL(Vector3 initialUp)
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x3899A90", Offset = "0x3899A90", VA = "0x3899A90")]
		private void UpdateLasProcessedLocalPosition()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x3899B40", Offset = "0x3899B40", VA = "0x3899B40")]
		private void UpdateLasProcessedLocalRotation()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x3895188", Offset = "0x3895188", VA = "0x3895188")]
		internal void ClearBoundsINTERNAL()
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x3899C4C", Offset = "0x3899C4C", VA = "0x3899C4C")]
		internal Vector3 getOrthoUp0INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x3899D0C", Offset = "0x3899D0C", VA = "0x3899D0C")]
		private Vector3 getOrthoUp1INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x3899E90", Offset = "0x3899E90", VA = "0x3899E90")]
		internal void UnsetFollowUpWithoutDirtyingINTERNAL()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x3899EC4", Offset = "0x3899EC4", VA = "0x3899EC4")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2AB0", Offset = "0x10C2AB0")]
		private void DoSanityChecks()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x389A084", Offset = "0x389A084", VA = "0x389A084")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2AE8", Offset = "0x10C2AE8")]
		private void UpdateSelectionIfNeeded()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x389A088", Offset = "0x389A088", VA = "0x389A088", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x389A0EC", Offset = "0x389A0EC", VA = "0x389A0EC")]
		public CurvySplineSegment()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public static class CurvySplineSegmentDefaultValues
	{
		[Token(Token = "0x4000514")]
		public const CurvyOrientationSwirl Swirl = CurvyOrientationSwirl.None;

		[Token(Token = "0x4000515")]
		public const bool SynchronizeTCB = true;

		[Token(Token = "0x4000516")]
		public const bool AutoHandles = true;

		[Token(Token = "0x4000517")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 HandleIn;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 HandleOut;
	}
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A34F4", Offset = "0x10A34F4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A34F4", Offset = "0x10A34F4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A34F4", Offset = "0x10A34F4")]
	public class CurvyUISpline : CurvySpline
	{
		[Token(Token = "0x600093B")]
		[Address(RVA = "0x389A7AC", Offset = "0x389A7AC", VA = "0x389A7AC")]
		public static CurvyUISpline CreateUISpline(string gameObjectName = "Curvy UI Spline")
		{
			return null;
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x389A94C", Offset = "0x389A94C", VA = "0x389A94C", Slot = "8")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x389A914", Offset = "0x389A914", VA = "0x389A914")]
		private void SetupUISpline()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x389A974", Offset = "0x389A974", VA = "0x389A974")]
		public CurvyUISpline()
		{
		}
	}
	[Token(Token = "0x200013E")]
	[ExecuteAlways]
	public abstract class CurvyInterpolatableMetadataBase<T> : CurvyMetadataBase
	{
		[Token(Token = "0x1700015D")]
		public abstract T MetaDataValue
		{
			[Token(Token = "0x600093F")]
			get;
		}

		[Token(Token = "0x6000940")]
		public abstract T Interpolate(CurvyInterpolatableMetadataBase<T> nextMetadata, float interpolationTime);

		[Token(Token = "0x6000941")]
		protected CurvyInterpolatableMetadataBase()
		{
		}
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A35AC", Offset = "0x10A35AC")]
	[ExecuteAlways]
	public abstract class CurvyMetadataBase : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvySplineSegment mCP;

		[Token(Token = "0x1700015E")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6000942")]
			[Address(RVA = "0x2555794", Offset = "0x2555794", VA = "0x2555794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000943")]
			[Address(RVA = "0x255579C", Offset = "0x255579C", VA = "0x255579C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x2555824", Offset = "0x2555824", VA = "0x2555824", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x2555898", Offset = "0x2555898", VA = "0x2555898")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000946")]
		public T GetPreviousData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : CurvyMetadataBase
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		public T GetNextData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : CurvyMetadataBase
		{
			return null;
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x25558B8", Offset = "0x25558B8", VA = "0x25558B8")]
		protected void NotifyModification()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x2555958", Offset = "0x2555958", VA = "0x2555958")]
		protected CurvyMetadataBase()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public enum SplineDirtyingType
	{
		[Token(Token = "0x400051C")]
		OrientationOnly,
		[Token(Token = "0x400051D")]
		Everything
	}
	[Serializable]
	[Token(Token = "0x2000141")]
	public class CurvySplineEvent : UnityEventEx<CurvySplineEventArgs>
	{
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x388AEDC", Offset = "0x388AEDC", VA = "0x388AEDC")]
		public CurvySplineEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000142")]
	public class CurvyControlPointEvent : UnityEventEx<CurvyControlPointEventArgs>
	{
		[Token(Token = "0x600094B")]
		[Address(RVA = "0x254BAD0", Offset = "0x254BAD0", VA = "0x254BAD0")]
		public CurvyControlPointEvent()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class CurvyControlPointEventArgs : CurvySplineEventArgs
	{
		[Token(Token = "0x2000144")]
		public enum ModeEnum
		{
			[Token(Token = "0x4000521")]
			None,
			[Token(Token = "0x4000522")]
			AddBefore,
			[Token(Token = "0x4000523")]
			AddAfter,
			[Token(Token = "0x4000524")]
			Delete
		}

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ModeEnum Mode;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly CurvySplineSegment ControlPoint;

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x254BB1C", Offset = "0x254BB1C", VA = "0x254BB1C")]
		public CurvyControlPointEventArgs(MonoBehaviour sender, CurvySpline spline, CurvySplineSegment cp, ModeEnum mode = ModeEnum.None, [Optional] object data)
		{
		}
	}
	[Token(Token = "0x2000145")]
	public class CurvySplineEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CurvySpline Spline;

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x388AF28", Offset = "0x388AF28", VA = "0x388AF28")]
		public CurvySplineEventArgs(MonoBehaviour sender, CurvySpline spline, [Optional] object data)
		{
		}
	}
	[Token(Token = "0x2000146")]
	public struct TcbParameters : IEquatable<TcbParameters>
	{
		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E6C", Offset = "0x10B0E6C")]
		private float <StartTension>k__BackingField;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E7C", Offset = "0x10B0E7C")]
		private float <EndTension>k__BackingField;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E8C", Offset = "0x10B0E8C")]
		private float <StartContinuity>k__BackingField;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0E9C", Offset = "0x10B0E9C")]
		private float <EndContinuity>k__BackingField;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0EAC", Offset = "0x10B0EAC")]
		private float <StartBias>k__BackingField;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B0EBC", Offset = "0x10B0EBC")]
		private float <EndBias>k__BackingField;

		[Token(Token = "0x17000160")]
		public float StartTension
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0x2DB9004", Offset = "0x2DB9004", VA = "0x2DB9004")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2CE0", Offset = "0x10C2CE0")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x600094F")]
			[Address(RVA = "0x2DB900C", Offset = "0x2DB900C", VA = "0x2DB900C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2D18", Offset = "0x10C2D18")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public float EndTension
		{
			[Token(Token = "0x6000950")]
			[Address(RVA = "0x2DB9014", Offset = "0x2DB9014", VA = "0x2DB9014")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2D28", Offset = "0x10C2D28")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000951")]
			[Address(RVA = "0x2DB901C", Offset = "0x2DB901C", VA = "0x2DB901C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2D60", Offset = "0x10C2D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public float StartContinuity
		{
			[Token(Token = "0x6000952")]
			[Address(RVA = "0x2DB9024", Offset = "0x2DB9024", VA = "0x2DB9024")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2D70", Offset = "0x10C2D70")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000953")]
			[Address(RVA = "0x2DB902C", Offset = "0x2DB902C", VA = "0x2DB902C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2DA8", Offset = "0x10C2DA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public float EndContinuity
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0x2DB9034", Offset = "0x2DB9034", VA = "0x2DB9034")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2DB8", Offset = "0x10C2DB8")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000955")]
			[Address(RVA = "0x2DB903C", Offset = "0x2DB903C", VA = "0x2DB903C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2DF0", Offset = "0x10C2DF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public float StartBias
		{
			[Token(Token = "0x6000956")]
			[Address(RVA = "0x2DB9044", Offset = "0x2DB9044", VA = "0x2DB9044")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2E00", Offset = "0x10C2E00")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000957")]
			[Address(RVA = "0x2DB904C", Offset = "0x2DB904C", VA = "0x2DB904C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2E38", Offset = "0x10C2E38")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public float EndBias
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0x2DB9054", Offset = "0x2DB9054", VA = "0x2DB9054")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2E48", Offset = "0x10C2E48")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6000959")]
			[Address(RVA = "0x2DB905C", Offset = "0x2DB905C", VA = "0x2DB905C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2E80", Offset = "0x10C2E80")]
			set
			{
			}
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x2DB9064", Offset = "0x2DB9064", VA = "0x2DB9064", Slot = "4")]
		public bool Equals(TcbParameters other)
		{
			return default(bool);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x2DB913C", Offset = "0x2DB913C", VA = "0x2DB913C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x2DB91D8", Offset = "0x2DB91D8", VA = "0x2DB91D8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x2DB92C4", Offset = "0x2DB92C4", VA = "0x2DB92C4")]
		public static bool operator ==(TcbParameters left, TcbParameters right)
		{
			return default(bool);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x2DB92F8", Offset = "0x2DB92F8", VA = "0x2DB92F8")]
		public static bool operator !=(TcbParameters left, TcbParameters right)
		{
			return default(bool);
		}
	}
}
namespace FluffyUnderware.Curvy.ThirdParty.LibTessDotNet
{
	[Token(Token = "0x2000147")]
	internal class Dict<TValue> where TValue : class
	{
		[Token(Token = "0x2000148")]
		public class Node
		{
			[Token(Token = "0x400052E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x400052F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _prev;

			[Token(Token = "0x4000530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _next;

			[Token(Token = "0x17000166")]
			public TValue Key
			{
				[Token(Token = "0x6000965")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000167")]
			public Node Prev
			{
				[Token(Token = "0x6000966")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000168")]
			public Node Next
			{
				[Token(Token = "0x6000967")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000968")]
			public Node()
			{
			}
		}

		[Token(Token = "0x2000149")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Node _head;

		[Token(Token = "0x600095F")]
		public Dict(LessOrEqual leq)
		{
		}

		[Token(Token = "0x6000960")]
		public Node Insert(TValue key)
		{
			return null;
		}

		[Token(Token = "0x6000961")]
		public Node InsertBefore(Node node, TValue key)
		{
			return null;
		}

		[Token(Token = "0x6000962")]
		public Node Find(TValue key)
		{
			return null;
		}

		[Token(Token = "0x6000963")]
		public Node Min()
		{
			return null;
		}

		[Token(Token = "0x6000964")]
		public void Remove(Node node)
		{
		}
	}
	[Token(Token = "0x200014A")]
	internal static class Geom
	{
		[Token(Token = "0x600096D")]
		[Address(RVA = "0x2F2EB08", Offset = "0x2F2EB08", VA = "0x2F2EB08")]
		public static bool IsWindingInside(WindingRule rule, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x2F2EBB4", Offset = "0x2F2EBB4", VA = "0x2F2EBB4")]
		public static bool VertCCW(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(bool);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x2F2EC08", Offset = "0x2F2EC08", VA = "0x2F2EC08")]
		public static bool VertEq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x2F2EC4C", Offset = "0x2F2EC4C", VA = "0x2F2EC4C")]
		public static bool VertLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x2F2EC9C", Offset = "0x2F2EC9C", VA = "0x2F2EC9C")]
		public static float EdgeEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x2F2ED10", Offset = "0x2F2ED10", VA = "0x2F2ED10")]
		public static float EdgeSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x2F2ED74", Offset = "0x2F2ED74", VA = "0x2F2ED74")]
		public static bool TransLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x2F2EDC4", Offset = "0x2F2EDC4", VA = "0x2F2EDC4")]
		public static float TransEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x2F2EE38", Offset = "0x2F2EE38", VA = "0x2F2EE38")]
		public static float TransSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x2F2EE9C", Offset = "0x2F2EE9C", VA = "0x2F2EE9C")]
		public static bool EdgeGoesLeft(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x2F2EECC", Offset = "0x2F2EECC", VA = "0x2F2EECC")]
		public static bool EdgeGoesRight(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x2F2EF00", Offset = "0x2F2EF00", VA = "0x2F2EF00")]
		public static float VertL1dist(MeshUtils.Vertex u, MeshUtils.Vertex v)
		{
			return default(float);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x2F2EF98", Offset = "0x2F2EF98", VA = "0x2F2EF98")]
		public static void AddWinding(MeshUtils.Edge eDst, MeshUtils.Edge eSrc)
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x2F2EFE4", Offset = "0x2F2EFE4", VA = "0x2F2EFE4")]
		public static float Interpolate(float a, float x, float b, float y)
		{
			return default(float);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x2F2F040", Offset = "0x2F2F040", VA = "0x2F2F040")]
		private static void Swap(ref MeshUtils.Vertex a, ref MeshUtils.Vertex b)
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x2F2F080", Offset = "0x2F2F080", VA = "0x2F2F080")]
		public static void EdgeIntersect(MeshUtils.Vertex o1, MeshUtils.Vertex d1, MeshUtils.Vertex o2, MeshUtils.Vertex d2, MeshUtils.Vertex v)
		{
		}
	}
	[Token(Token = "0x200014B")]
	internal class LTMesh : MeshUtils.Pooled<LTMesh>
	{
		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MeshUtils.Vertex _vHead;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal MeshUtils.Face _fHead;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal MeshUtils.Edge _eHead;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal MeshUtils.Edge _eHeadSym;

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x15B9C80", Offset = "0x15B9C80", VA = "0x15B9C80")]
		public LTMesh()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x15B9EDC", Offset = "0x15B9EDC", VA = "0x15B9EDC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x15B9F30", Offset = "0x15B9F30", VA = "0x15B9F30", Slot = "5")]
		public override void OnFree()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x15BA044", Offset = "0x15BA044", VA = "0x15BA044")]
		public MeshUtils.Edge MakeEdge()
		{
			return null;
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x15BA0A8", Offset = "0x15BA0A8", VA = "0x15BA0A8")]
		public void Splice(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x15BA198", Offset = "0x15BA198", VA = "0x15BA198")]
		public void Delete(MeshUtils.Edge eDel)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x15BA334", Offset = "0x15BA334", VA = "0x15BA334")]
		public MeshUtils.Edge AddEdgeVertex(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x15BA3DC", Offset = "0x15BA3DC", VA = "0x15BA3DC")]
		public MeshUtils.Edge SplitEdge(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x15BA4B8", Offset = "0x15BA4B8", VA = "0x15BA4B8")]
		public MeshUtils.Edge Connect(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
			return null;
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x15BA5D4", Offset = "0x15BA5D4", VA = "0x15BA5D4")]
		public void ZapFace(MeshUtils.Face fZap)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x15BA74C", Offset = "0x15BA74C", VA = "0x15BA74C")]
		public void MergeConvexFaces(int maxVertsPerFace)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x15BA8B8", Offset = "0x15BA8B8", VA = "0x15BA8B8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C2E90", Offset = "0x10C2E90")]
		public void Check()
		{
		}
	}
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A361C", Offset = "0x10A361C")]
	public struct Vec3
	{
		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vec3 Zero;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x17000169")]
		public float Item
		{
			[Token(Token = "0x6000989")]
			[Address(RVA = "0x2EB5EF4", Offset = "0x2EB5EF4", VA = "0x2EB5EF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600098A")]
			[Address(RVA = "0x2EB5F5C", Offset = "0x2EB5F5C", VA = "0x2EB5F5C")]
			set
			{
			}
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x2EB5FC4", Offset = "0x2EB5FC4", VA = "0x2EB5FC4")]
		public static void Sub(ref Vec3 lhs, ref Vec3 rhs, out Vec3 result)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x2EB5FF8", Offset = "0x2EB5FF8", VA = "0x2EB5FF8")]
		public static void Neg(ref Vec3 v)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x2EB6014", Offset = "0x2EB6014", VA = "0x2EB6014")]
		public static void Dot(ref Vec3 u, ref Vec3 v, out float dot)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x2EB6040", Offset = "0x2EB6040", VA = "0x2EB6040")]
		public static void Normalize(ref Vec3 v)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x2EB60F4", Offset = "0x2EB60F4", VA = "0x2EB60F4")]
		public static int LongAxis(ref Vec3 v)
		{
			return default(int);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x2EB61F8", Offset = "0x2EB61F8", VA = "0x2EB61F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200014D")]
	internal static class MeshUtils
	{
		[Token(Token = "0x200014E")]
		public abstract class Pooled<T> where T : Pooled<T>, new()
		{
			[Token(Token = "0x400053A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<T> _stack;

			[Token(Token = "0x600099A")]
			public abstract void Reset();

			[Token(Token = "0x600099B")]
			public virtual void OnFree()
			{
			}

			[Token(Token = "0x600099C")]
			public static T Create()
			{
				return null;
			}

			[Token(Token = "0x600099D")]
			public void Free()
			{
			}

			[Token(Token = "0x600099E")]
			protected Pooled()
			{
			}
		}

		[Token(Token = "0x200014F")]
		public class Vertex : Pooled<Vertex>
		{
			[Token(Token = "0x400053B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vertex _prev;

			[Token(Token = "0x400053C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vertex _next;

			[Token(Token = "0x400053D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x400053E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vec3 _coords;

			[Token(Token = "0x400053F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float _s;

			[Token(Token = "0x4000540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float _t;

			[Token(Token = "0x4000541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal PQHandle _pqHandle;

			[Token(Token = "0x4000542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal int _n;

			[Token(Token = "0x4000543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object _data;

			[Token(Token = "0x600099F")]
			[Address(RVA = "0x1DE0038", Offset = "0x1DE0038", VA = "0x1DE0038", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x60009A0")]
			[Address(RVA = "0x1DE00F0", Offset = "0x1DE00F0", VA = "0x1DE00F0")]
			public Vertex()
			{
			}
		}

		[Token(Token = "0x2000150")]
		public class Face : Pooled<Face>
		{
			[Token(Token = "0x4000544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Face _prev;

			[Token(Token = "0x4000545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Face _next;

			[Token(Token = "0x4000546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x4000547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Face _trail;

			[Token(Token = "0x4000548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int _n;

			[Token(Token = "0x4000549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _marked;

			[Token(Token = "0x400054A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			internal bool _inside;

			[Token(Token = "0x1700016A")]
			internal int VertsCount
			{
				[Token(Token = "0x60009A1")]
				[Address(RVA = "0x1DDFF58", Offset = "0x1DDFF58", VA = "0x1DDFF58")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60009A2")]
			[Address(RVA = "0x1DDFF8C", Offset = "0x1DDFF8C", VA = "0x1DDFF8C", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x60009A3")]
			[Address(RVA = "0x1DDFFEC", Offset = "0x1DDFFEC", VA = "0x1DDFFEC")]
			public Face()
			{
			}
		}

		[Token(Token = "0x2000151")]
		public struct EdgePair
		{
			[Token(Token = "0x400054B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Edge _e;

			[Token(Token = "0x400054C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Edge _eSym;

			[Token(Token = "0x60009A4")]
			[Address(RVA = "0x1DDFE90", Offset = "0x1DDFE90", VA = "0x1DDFE90")]
			public static EdgePair Create()
			{
				return default(EdgePair);
			}

			[Token(Token = "0x60009A5")]
			[Address(RVA = "0x1DDFE10", Offset = "0x1DDFE10", VA = "0x1DDFE10")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000152")]
		public class Edge : Pooled<Edge>
		{
			[Token(Token = "0x400054D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal EdgePair _pair;

			[Token(Token = "0x400054E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _next;

			[Token(Token = "0x400054F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Edge _Sym;

			[Token(Token = "0x4000550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Edge _Onext;

			[Token(Token = "0x4000551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Edge _Lnext;

			[Token(Token = "0x4000552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Vertex _Org;

			[Token(Token = "0x4000553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Face _Lface;

			[Token(Token = "0x4000554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Tess.ActiveRegion _activeRegion;

			[Token(Token = "0x4000555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal int _winding;

			[Token(Token = "0x1700016B")]
			internal Face _Rface
			{
				[Token(Token = "0x60009A6")]
				[Address(RVA = "0x1DDFB44", Offset = "0x1DDFB44", VA = "0x1DDFB44")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A7")]
				[Address(RVA = "0x1DDFB60", Offset = "0x1DDFB60", VA = "0x1DDFB60")]
				set
				{
				}
			}

			[Token(Token = "0x1700016C")]
			internal Vertex _Dst
			{
				[Token(Token = "0x60009A8")]
				[Address(RVA = "0x1DDFB7C", Offset = "0x1DDFB7C", VA = "0x1DDFB7C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009A9")]
				[Address(RVA = "0x1DDFB98", Offset = "0x1DDFB98", VA = "0x1DDFB98")]
				set
				{
				}
			}

			[Token(Token = "0x1700016D")]
			internal Edge _Oprev
			{
				[Token(Token = "0x60009AA")]
				[Address(RVA = "0x1DDFBB4", Offset = "0x1DDFBB4", VA = "0x1DDFBB4")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009AB")]
				[Address(RVA = "0x1DDFBD0", Offset = "0x1DDFBD0", VA = "0x1DDFBD0")]
				set
				{
				}
			}

			[Token(Token = "0x1700016E")]
			internal Edge _Lprev
			{
				[Token(Token = "0x60009AC")]
				[Address(RVA = "0x1DDFBEC", Offset = "0x1DDFBEC", VA = "0x1DDFBEC")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009AD")]
				[Address(RVA = "0x1DDFC08", Offset = "0x1DDFC08", VA = "0x1DDFC08")]
				set
				{
				}
			}

			[Token(Token = "0x1700016F")]
			internal Edge _Dprev
			{
				[Token(Token = "0x60009AE")]
				[Address(RVA = "0x1DDFC24", Offset = "0x1DDFC24", VA = "0x1DDFC24")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009AF")]
				[Address(RVA = "0x1DDFC40", Offset = "0x1DDFC40", VA = "0x1DDFC40")]
				set
				{
				}
			}

			[Token(Token = "0x17000170")]
			internal Edge _Rprev
			{
				[Token(Token = "0x60009B0")]
				[Address(RVA = "0x1DDFC5C", Offset = "0x1DDFC5C", VA = "0x1DDFC5C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009B1")]
				[Address(RVA = "0x1DDFC78", Offset = "0x1DDFC78", VA = "0x1DDFC78")]
				set
				{
				}
			}

			[Token(Token = "0x17000171")]
			internal Edge _Dnext
			{
				[Token(Token = "0x60009B2")]
				[Address(RVA = "0x1DDFC94", Offset = "0x1DDFC94", VA = "0x1DDFC94")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009B3")]
				[Address(RVA = "0x1DDFCBC", Offset = "0x1DDFCBC", VA = "0x1DDFCBC")]
				set
				{
				}
			}

			[Token(Token = "0x17000172")]
			internal Edge _Rnext
			{
				[Token(Token = "0x60009B4")]
				[Address(RVA = "0x1DDFCE4", Offset = "0x1DDFCE4", VA = "0x1DDFCE4")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009B5")]
				[Address(RVA = "0x1DDFD0C", Offset = "0x1DDFD0C", VA = "0x1DDFD0C")]
				set
				{
				}
			}

			[Token(Token = "0x60009B6")]
			[Address(RVA = "0x1DDFD34", Offset = "0x1DDFD34", VA = "0x1DDFD34")]
			internal static void EnsureFirst(ref Edge e)
			{
			}

			[Token(Token = "0x60009B7")]
			[Address(RVA = "0x1DDFD64", Offset = "0x1DDFD64", VA = "0x1DDFD64", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x60009B8")]
			[Address(RVA = "0x1DDFE44", Offset = "0x1DDFE44", VA = "0x1DDFE44")]
			public Edge()
			{
			}
		}

		[Token(Token = "0x4000539")]
		public const int Undef = -1;

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x3124F40", Offset = "0x3124F40", VA = "0x3124F40")]
		public static Edge MakeEdge(Edge eNext)
		{
			return null;
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x31250C0", Offset = "0x31250C0", VA = "0x31250C0")]
		public static void Splice(Edge a, Edge b)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x3125150", Offset = "0x3125150", VA = "0x3125150")]
		public static void MakeVertex(Edge eOrig, Vertex vNext)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x3125240", Offset = "0x3125240", VA = "0x3125240")]
		public static void MakeFace(Edge eOrig, Face fNext)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x3125350", Offset = "0x3125350", VA = "0x3125350")]
		public static void KillEdge(Edge eDel)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x3125404", Offset = "0x3125404", VA = "0x3125404")]
		public static void KillVertex(Vertex vDel, Vertex newOrg)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x31254BC", Offset = "0x31254BC", VA = "0x31254BC")]
		public static void KillFace(Face fDel, Face newLFace)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x3125574", Offset = "0x3125574", VA = "0x3125574")]
		public static float FaceArea(Face f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000153")]
	internal struct PQHandle
	{
		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Invalid;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int _handle;
	}
	[Token(Token = "0x2000154")]
	internal class PriorityHeap<TValue> where TValue : class
	{
		[Token(Token = "0x2000155")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x2000156")]
		protected class HandleElem
		{
			[Token(Token = "0x400055F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int _node;

			[Token(Token = "0x60009C7")]
			public HandleElem()
			{
			}
		}

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly LessOrEqual _leq;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _nodes;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HandleElem[] _handles;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _freeList;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x17000173")]
		public bool Empty
		{
			[Token(Token = "0x60009BA")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009BB")]
		public PriorityHeap(int initialSize, LessOrEqual leq)
		{
		}

		[Token(Token = "0x60009BC")]
		private void FloatDown(int curr)
		{
		}

		[Token(Token = "0x60009BD")]
		private void FloatUp(int curr)
		{
		}

		[Token(Token = "0x60009BE")]
		public void Init()
		{
		}

		[Token(Token = "0x60009BF")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x60009C0")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x60009C1")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x60009C2")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000157")]
	internal class PriorityQueue<TValue> where TValue : class
	{
		[Token(Token = "0x2000158")]
		private class StackItem
		{
			[Token(Token = "0x4000568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int p;

			[Token(Token = "0x4000569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int r;

			[Token(Token = "0x60009D0")]
			public StackItem()
			{
			}
		}

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue>.LessOrEqual _leq;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue> _heap;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TValue[] _keys;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _order;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x17000174")]
		public bool Empty
		{
			[Token(Token = "0x60009C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009C9")]
		public PriorityQueue(int initialSize, PriorityHeap<TValue>.LessOrEqual leq)
		{
		}

		[Token(Token = "0x60009CA")]
		private static void Swap(ref int a, ref int b)
		{
		}

		[Token(Token = "0x60009CB")]
		public void Init()
		{
		}

		[Token(Token = "0x60009CC")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x60009CD")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x60009CE")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000159")]
	public class Tess
	{
		[Token(Token = "0x200015A")]
		internal class ActiveRegion
		{
			[Token(Token = "0x4000580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MeshUtils.Edge _eUp;

			[Token(Token = "0x4000581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Dict<ActiveRegion>.Node _nodeUp;

			[Token(Token = "0x4000582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _windingNumber;

			[Token(Token = "0x4000583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _inside;

			[Token(Token = "0x4000584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _sentinel;

			[Token(Token = "0x4000585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _dirty;

			[Token(Token = "0x4000586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixUpperEdge;

			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x1DE3CE8", Offset = "0x1DE3CE8", VA = "0x1DE3CE8")]
			public ActiveRegion()
			{
			}
		}

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LTMesh _mesh;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vec3 _normal;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vec3 _sUnit;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vec3 _tUnit;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _bminX;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _bminY;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _bmaxX;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _bmaxY;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private WindingRule _windingRule;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dict<ActiveRegion> _dict;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PriorityQueue<MeshUtils.Vertex> _pq;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshUtils.Vertex _event;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CombineCallback _combineCallback;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContourVertex[] _vertices;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _vertexCount;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SubArray<int>? elementsList;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int _elementCount;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float SUnitX;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float SUnitY;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float SentinelCoord;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool NoEmptyPolygons;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool UsePooling;

		[Token(Token = "0x17000175")]
		public Vec3 Normal
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0x2DBBB3C", Offset = "0x2DBBB3C", VA = "0x2DBBB3C")]
			get
			{
				return default(Vec3);
			}
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0x2DBBB48", Offset = "0x2DBBB48", VA = "0x2DBBB48")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0x2DBBB54", Offset = "0x2DBBB54", VA = "0x2DBBB54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000177")]
		public int VertexCount
		{
			[Token(Token = "0x60009F3")]
			[Address(RVA = "0x2DBBB5C", Offset = "0x2DBBB5C", VA = "0x2DBBB5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000178")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8200", Offset = "0x10C8200")]
		public int[] Elements
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0x2DBBB64", Offset = "0x2DBBB64", VA = "0x2DBBB64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000179")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8238", Offset = "0x10C8238")]
		public IList<int> ElementsList
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0x2DBBC3C", Offset = "0x2DBBC3C", VA = "0x2DBBC3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		public SubArray<int>? ElementsArray
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x2DBBC40", Offset = "0x2DBBC40", VA = "0x2DBBC40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		public int ElementCount
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x2DBBC54", Offset = "0x2DBBC54", VA = "0x2DBBC54")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x2DB9330", Offset = "0x2DB9330", VA = "0x2DB9330")]
		private ActiveRegion RegionBelow(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x2DB935C", Offset = "0x2DB935C", VA = "0x2DB935C")]
		private ActiveRegion RegionAbove(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x2DB9388", Offset = "0x2DB9388", VA = "0x2DB9388")]
		private bool EdgeLeq(ActiveRegion reg1, ActiveRegion reg2)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x2DB94D0", Offset = "0x2DB94D0", VA = "0x2DB94D0")]
		private void DeleteRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x2DB954C", Offset = "0x2DB954C", VA = "0x2DB954C")]
		private void FixUpperEdge(ActiveRegion reg, MeshUtils.Edge newEdge)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x2DB95B8", Offset = "0x2DB95B8", VA = "0x2DB95B8")]
		private ActiveRegion TopLeftRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x2DB9680", Offset = "0x2DB9680", VA = "0x2DB9680")]
		private ActiveRegion TopRightRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x2DB96E4", Offset = "0x2DB96E4", VA = "0x2DB96E4")]
		private ActiveRegion AddRegionBelow(ActiveRegion regAbove, MeshUtils.Edge eNewUp)
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x2DB97C4", Offset = "0x2DB97C4", VA = "0x2DB97C4")]
		private void ComputeWinding(ActiveRegion reg)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x2DB9820", Offset = "0x2DB9820", VA = "0x2DB9820")]
		private void FinishRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x2DB9870", Offset = "0x2DB9870", VA = "0x2DB9870")]
		private MeshUtils.Edge FinishLeftRegions(ActiveRegion regFirst, ActiveRegion regLast)
		{
			return null;
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x2DB99B4", Offset = "0x2DB99B4", VA = "0x2DB99B4")]
		private void AddRightEdges(ActiveRegion regUp, MeshUtils.Edge eFirst, MeshUtils.Edge eLast, MeshUtils.Edge eTopLeft, bool cleanUp)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x2DB9FF0", Offset = "0x2DB9FF0", VA = "0x2DB9FF0")]
		private void SpliceMergeVertices(MeshUtils.Edge e1, MeshUtils.Edge e2)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x2DBA00C", Offset = "0x2DBA00C", VA = "0x2DBA00C")]
		private void VertexWeights(MeshUtils.Vertex isect, MeshUtils.Vertex org, MeshUtils.Vertex dst, out float w0, out float w1)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x2DBA110", Offset = "0x2DBA110", VA = "0x2DBA110")]
		private void GetIntersectData(MeshUtils.Vertex isect, MeshUtils.Vertex orgUp, MeshUtils.Vertex dstUp, MeshUtils.Vertex orgLo, MeshUtils.Vertex dstLo)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x2DB9BA4", Offset = "0x2DB9BA4", VA = "0x2DB9BA4")]
		private bool CheckForRightSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x2DBA3DC", Offset = "0x2DBA3DC", VA = "0x2DBA3DC")]
		private bool CheckForLeftSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x2DBA59C", Offset = "0x2DBA59C", VA = "0x2DBA59C")]
		private bool CheckForIntersect(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x2DB9D88", Offset = "0x2DB9D88", VA = "0x2DB9D88")]
		private void WalkDirtyRegions(ActiveRegion regUp)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x2DBAC80", Offset = "0x2DBAC80", VA = "0x2DBAC80")]
		private void ConnectRightVertex(ActiveRegion regUp, MeshUtils.Edge eBottomLeft)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x2DBAEB8", Offset = "0x2DBAEB8", VA = "0x2DBAEB8")]
		private void ConnectLeftDegenerate(ActiveRegion regUp, MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x2DBB0A4", Offset = "0x2DBB0A4", VA = "0x2DBB0A4")]
		private void ConnectLeftVertex(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x2DBAFC4", Offset = "0x2DBAFC4", VA = "0x2DBAFC4")]
		private void SweepEvent(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x2DBB308", Offset = "0x2DBB308", VA = "0x2DBB308")]
		private void AddSentinel(float smin, float smax, float t)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x2DBB450", Offset = "0x2DBB450", VA = "0x2DBB450")]
		private void InitEdgeDict()
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x2DBB554", Offset = "0x2DBB554", VA = "0x2DBB554")]
		private void DoneEdgeDict()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x2DBB5E8", Offset = "0x2DBB5E8", VA = "0x2DBB5E8")]
		private void RemoveDegenerateEdges()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x2DBB748", Offset = "0x2DBB748", VA = "0x2DBB748")]
		private void InitPriorityQ()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x2DBB960", Offset = "0x2DBB960", VA = "0x2DBB960")]
		private void DonePriorityQ()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x2DBB96C", Offset = "0x2DBB96C", VA = "0x2DBB96C")]
		private void RemoveDegenerateFaces()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x2DBBA0C", Offset = "0x2DBBA0C", VA = "0x2DBBA0C")]
		protected void ComputeInterior()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x2DBBC5C", Offset = "0x2DBBC5C", VA = "0x2DBBC5C")]
		public Tess()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x2DBBD2C", Offset = "0x2DBBD2C", VA = "0x2DBBD2C")]
		private void ComputeNormal(ref Vec3 norm)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x2DBC444", Offset = "0x2DBC444", VA = "0x2DBC444")]
		private void CheckOrientation()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x2DBC55C", Offset = "0x2DBC55C", VA = "0x2DBC55C")]
		private void ProjectPolygon()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x2DBC85C", Offset = "0x2DBC85C", VA = "0x2DBC85C")]
		private void TessellateMonoRegion(MeshUtils.Face face)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x2DBCABC", Offset = "0x2DBCABC", VA = "0x2DBCABC")]
		private void TessellateInterior()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x2DBCB28", Offset = "0x2DBCB28", VA = "0x2DBCB28")]
		private void DiscardExterior()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x2DBCB94", Offset = "0x2DBCB94", VA = "0x2DBCB94")]
		private void SetWindingNumber(int value, bool keepOnlyBoundary)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x2DBCC74", Offset = "0x2DBCC74", VA = "0x2DBCC74")]
		private int GetNeighbourFace(MeshUtils.Edge edge)
		{
			return default(int);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x2DBCCDC", Offset = "0x2DBCCDC", VA = "0x2DBCCDC")]
		private void OutputPolymesh(ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x2DBD2B8", Offset = "0x2DBD2B8", VA = "0x2DBD2B8")]
		private void OutputContours()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x2DBD670", Offset = "0x2DBD670", VA = "0x2DBD670")]
		private float SignedArea(ContourVertex[] vertices)
		{
			return default(float);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x2DBD710", Offset = "0x2DBD710", VA = "0x2DBD710")]
		public void AddContour(ContourVertex[] vertices)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x2DBD718", Offset = "0x2DBD718", VA = "0x2DBD718")]
		public void AddContour(ContourVertex[] vertices, ContourOrientation forceOrientation)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x2DBD904", Offset = "0x2DBD904", VA = "0x2DBD904")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x2DBD90C", Offset = "0x2DBD90C", VA = "0x2DBD90C")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize, CombineCallback combineCallback)
		{
		}
	}
	[Token(Token = "0x200015B")]
	public enum WindingRule
	{
		[Token(Token = "0x4000588")]
		EvenOdd,
		[Token(Token = "0x4000589")]
		NonZero,
		[Token(Token = "0x400058A")]
		Positive,
		[Token(Token = "0x400058B")]
		Negative,
		[Token(Token = "0x400058C")]
		AbsGeqTwo
	}
	[Token(Token = "0x200015C")]
	public enum ElementType
	{
		[Token(Token = "0x400058E")]
		Polygons,
		[Token(Token = "0x400058F")]
		ConnectedPolygons,
		[Token(Token = "0x4000590")]
		BoundaryContours
	}
	[Token(Token = "0x200015D")]
	public enum ContourOrientation
	{
		[Token(Token = "0x4000592")]
		Original,
		[Token(Token = "0x4000593")]
		Clockwise,
		[Token(Token = "0x4000594")]
		CounterClockwise
	}
	[Token(Token = "0x200015E")]
	public struct ContourVertex
	{
		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vec3 Position;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object Data;

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x25448AC", Offset = "0x25448AC", VA = "0x25448AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200015F")]
	public delegate object CombineCallback(Vec3 position, object[] data, float[] weights);
	[Token(Token = "0x2000160")]
	public static class LibTessVector3Extension
	{
		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x15BAA44", Offset = "0x15BAA44", VA = "0x15BAA44")]
		public static Vec3 Vec3(this Vector3 v)
		{
			return default(Vec3);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x15BAA48", Offset = "0x15BAA48", VA = "0x15BAA48")]
		public static ContourVertex ContourVertex(this Vector3 v)
		{
			return default(ContourVertex);
		}
	}
	[Token(Token = "0x2000161")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A3664", Offset = "0x10A3664")]
	public static class LibTessV3Extension
	{
		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x15BAA40", Offset = "0x15BAA40", VA = "0x15BAA40")]
		public static Vector3 Vector3(this Vec3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000162")]
	public static class UnityLibTessUtility
	{
		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x2EB5744", Offset = "0x2EB5744", VA = "0x2EB5744")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2EF8", Offset = "0x10C2EF8")]
		public static ContourVertex[] ToContourVertex(Vector3[] v, bool zeroZ = false)
		{
			return null;
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x2EB5834", Offset = "0x2EB5834", VA = "0x2EB5834")]
		public static ContourVertex[] ToContourVertex(SubArray<Vector3> v, bool zeroZ = false)
		{
			return null;
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x2EB5924", Offset = "0x2EB5924", VA = "0x2EB5924")]
		public static void FromContourVertex(ContourVertex[] v, SubArray<Vector3> output)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x2EB59B8", Offset = "0x2EB59B8", VA = "0x2EB59B8")]
		public static SubArray<Vector3> ContourVerticesToPositions(ContourVertex[] v)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x2EB5B00", Offset = "0x2EB5B00", VA = "0x2EB5B00")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2F30", Offset = "0x10C2F30")]
		public static void SetFromContourVertex(ref Vector3[] v3Array, ref ContourVertex[] cvArray)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x2EB5C48", Offset = "0x2EB5C48", VA = "0x2EB5C48")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C2F68", Offset = "0x10C2F68")]
		public static void SetToContourVertex(ref ContourVertex[] cvArray, ref Vector3[] v3Array)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Shapes
{
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A36B0", Offset = "0x10A36B0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A36B0", Offset = "0x10A36B0")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A36B0", Offset = "0x10A36B0")]
	public class CSCircle : CurvyShape2D
	{
		[Token(Token = "0x4000597")]
		private const int MinCount = 2;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private int m_Count;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x1700017C")]
		public int Count
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0x253F408", Offset = "0x253F408", VA = "0x253F408")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0x253F410", Offset = "0x253F410", VA = "0x253F410")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public float Radius
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0x253F450", Offset = "0x253F450", VA = "0x253F450")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0x253F458", Offset = "0x253F458", VA = "0x253F458")]
			set
			{
			}
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x253F49C", Offset = "0x253F49C", VA = "0x253F49C", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x253F5DC", Offset = "0x253F5DC", VA = "0x253F5DC")]
		public CSCircle()
		{
		}
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A375C", Offset = "0x10A375C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A375C", Offset = "0x10A375C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A375C", Offset = "0x10A375C")]
	public class CSPie : CSCircle
	{
		[Token(Token = "0x2000165")]
		public enum EatModeEnum
		{
			[Token(Token = "0x400059E")]
			Left,
			[Token(Token = "0x400059F")]
			Right,
			[Token(Token = "0x40005A0")]
			Center
		}

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10B0F64", Offset = "0x10B0F64")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B0FA4", Offset = "0x10B0FA4")]
		private int m_Empty;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B1024", Offset = "0x10B1024")]
		[SerializeField]
		private EatModeEnum m_Eat;

		[Token(Token = "0x1700017E")]
		public float Roundness
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0x253F5F0", Offset = "0x253F5F0", VA = "0x253F5F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x253F5F8", Offset = "0x253F5F8", VA = "0x253F5F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public int Empty
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x253F634", Offset = "0x253F634", VA = "0x253F634")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0x253F63C", Offset = "0x253F63C", VA = "0x253F63C")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		private int maxEmpty
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0x253F684", Offset = "0x253F684", VA = "0x253F684")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000181")]
		public EatModeEnum Eat
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0x253F68C", Offset = "0x253F68C", VA = "0x253F68C")]
			get
			{
				return default(EatModeEnum);
			}
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0x253F694", Offset = "0x253F694", VA = "0x253F694")]
			set
			{
			}
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x253F6B0", Offset = "0x253F6B0", VA = "0x253F6B0")]
		private Vector3 cpPosition(int i, int empty, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x253F73C", Offset = "0x253F73C", VA = "0x253F73C", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x253FD7C", Offset = "0x253FD7C", VA = "0x253FD7C")]
		public CSPie()
		{
		}
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3808", Offset = "0x10A3808")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A3808", Offset = "0x10A3808")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3808", Offset = "0x10A3808")]
	public class CSRectangle : CurvyShape2D
	{
		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Positive]
		private float m_Height;

		[Token(Token = "0x17000182")]
		public float Width
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0x253FD98", Offset = "0x253FD98", VA = "0x253FD98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0x253FDA0", Offset = "0x253FDA0", VA = "0x253FDA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public float Height
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x253FDE4", Offset = "0x253FDE4", VA = "0x253FDE4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0x253FDEC", Offset = "0x253FDEC", VA = "0x253FDEC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x253FE30", Offset = "0x253FE30", VA = "0x253FE30", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x253FFD8", Offset = "0x253FFD8", VA = "0x253FFD8")]
		public CSRectangle()
		{
		}
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A38B4", Offset = "0x10A38B4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A38B4", Offset = "0x10A38B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A38B4", Offset = "0x10A38B4")]
	public class CSRoundedRectangle : CurvyShape2D
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10B115C", Offset = "0x10B115C")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x17000184")]
		public float Width
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x253FFE8", Offset = "0x253FFE8", VA = "0x253FFE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x253FFF0", Offset = "0x253FFF0", VA = "0x253FFF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public float Height
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x2540034", Offset = "0x2540034", VA = "0x2540034")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0x254003C", Offset = "0x254003C", VA = "0x254003C")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public float Roundness
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0x2540080", Offset = "0x2540080", VA = "0x2540080")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0x2540088", Offset = "0x2540088", VA = "0x2540088")]
			set
			{
			}
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x25400C4", Offset = "0x25400C4", VA = "0x25400C4", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x2540634", Offset = "0x2540634", VA = "0x2540634")]
		public CSRoundedRectangle()
		{
		}
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3960", Offset = "0x10A3960")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A3960", Offset = "0x10A3960")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3960", Offset = "0x10A3960")]
	public class CSSpiral : CurvyShape2D
	{
		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive]
		private int m_Count;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Circles;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Positive]
		private float m_Radius;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B12A4", Offset = "0x10B12A4")]
		[SerializeField]
		private AnimationCurve m_RadiusFactor;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AnimationCurve m_Z;

		[Token(Token = "0x17000187")]
		public int Count
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0x254064C", Offset = "0x254064C", VA = "0x254064C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0x2540654", Offset = "0x2540654", VA = "0x2540654")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public float Circles
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x2540694", Offset = "0x2540694", VA = "0x2540694")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x254069C", Offset = "0x254069C", VA = "0x254069C")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public float Radius
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0x25406E0", Offset = "0x25406E0", VA = "0x25406E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0x25406E8", Offset = "0x25406E8", VA = "0x25406E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public AnimationCurve RadiusFactor
		{
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0x254072C", Offset = "0x254072C", VA = "0x254072C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0x2540734", Offset = "0x2540734", VA = "0x2540734")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public AnimationCurve Z
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x254076C", Offset = "0x254076C", VA = "0x254076C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0x2540774", Offset = "0x2540774", VA = "0x2540774")]
			set
			{
			}
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x25407AC", Offset = "0x25407AC", VA = "0x25407AC", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x2540904", Offset = "0x2540904", VA = "0x2540904")]
		public CSSpiral()
		{
		}
	}
	[Token(Token = "0x2000169")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0x10A3A0C", Offset = "0x10A3A0C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3A0C", Offset = "0x10A3A0C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3A0C", Offset = "0x10A3A0C")]
	public class CSStar : CurvyShape2D
	{
		[Token(Token = "0x40005AB")]
		private const int MinSides = 2;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive]
		private int m_Sides;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_OuterRadius;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B13A8", Offset = "0x10B13A8")]
		private float m_OuterRoundness;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Positive]
		private float m_InnerRadius;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B1450", Offset = "0x10B1450")]
		private float m_InnerRoundness;

		[Token(Token = "0x1700018C")]
		public int Sides
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0x2540998", Offset = "0x2540998", VA = "0x2540998")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0x25409A0", Offset = "0x25409A0", VA = "0x25409A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public float OuterRadius
		{
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0x25409E0", Offset = "0x25409E0", VA = "0x25409E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A44")]
			[Address(RVA = "0x25409E8", Offset = "0x25409E8", VA = "0x25409E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public float OuterRoundness
		{
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0x2540A34", Offset = "0x2540A34", VA = "0x2540A34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0x2540A3C", Offset = "0x2540A3C", VA = "0x2540A3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public float InnerRadius
		{
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0x2540A78", Offset = "0x2540A78", VA = "0x2540A78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0x2540A80", Offset = "0x2540A80", VA = "0x2540A80")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public float InnerRoundness
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0x2540AC4", Offset = "0x2540AC4", VA = "0x2540AC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0x2540ACC", Offset = "0x2540ACC", VA = "0x2540ACC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x2540B08", Offset = "0x2540B08", VA = "0x2540B08", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x2540B54", Offset = "0x2540B54", VA = "0x2540B54", Slot = "9")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x2540D4C", Offset = "0x2540D4C", VA = "0x2540D4C")]
		public CSStar()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Pools
{
	[Token(Token = "0x200016A")]
	public static class ArrayPools
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B14C0", Offset = "0x10B14C0")]
		private static readonly ArrayPool<Vector2> <Vector2>k__BackingField;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B14D0", Offset = "0x10B14D0")]
		private static readonly ArrayPool<Vector3> <Vector3>k__BackingField;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B14E0", Offset = "0x10B14E0")]
		private static readonly ArrayPool<Vector4> <Vector4>k__BackingField;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B14F0", Offset = "0x10B14F0")]
		private static readonly ArrayPool<int> <Int32>k__BackingField;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B1500", Offset = "0x10B1500")]
		private static readonly ArrayPool<float> <Single>k__BackingField;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B1510", Offset = "0x10B1510")]
		private static readonly ArrayPool<CGSpot> <CGSpot>k__BackingField;

		[Token(Token = "0x17000191")]
		public static ArrayPool<Vector2> Vector2
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0x2005BF4", Offset = "0x2005BF4", VA = "0x2005BF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FA0", Offset = "0x10C2FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public static ArrayPool<Vector3> Vector3
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0x2005C58", Offset = "0x2005C58", VA = "0x2005C58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FB0", Offset = "0x10C2FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000193")]
		public static ArrayPool<Vector4> Vector4
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0x2005CBC", Offset = "0x2005CBC", VA = "0x2005CBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FC0", Offset = "0x10C2FC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		public static ArrayPool<int> Int32
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0x2005D20", Offset = "0x2005D20", VA = "0x2005D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FD0", Offset = "0x10C2FD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public static ArrayPool<float> Single
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0x2005D84", Offset = "0x2005D84", VA = "0x2005D84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FE0", Offset = "0x10C2FE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public static ArrayPool<CGSpot> CGSpot
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0x2005DE8", Offset = "0x2005DE8", VA = "0x2005DE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C2FF0", Offset = "0x10C2FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x2005A54", Offset = "0x2005A54", VA = "0x2005A54")]
		static ArrayPools()
		{
		}
	}
	[Token(Token = "0x200016B")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3AB8", Offset = "0x10A3AB8")]
	[DisallowMultipleComponent]
	public class ArrayPoolsSettings : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1520", Offset = "0x10B1520")]
		private long vector2Capacity;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B156C", Offset = "0x10B156C")]
		private long vector3Capacity;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B15B8", Offset = "0x10B15B8")]
		[SerializeField]
		private long vector4Capacity;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1604", Offset = "0x10B1604")]
		[SerializeField]
		private long intCapacity;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1650", Offset = "0x10B1650")]
		[SerializeField]
		private long floatCapacity;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B169C", Offset = "0x10B169C")]
		[SerializeField]
		private long cgSpotCapacity;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B16E8", Offset = "0x10B16E8")]
		[SerializeField]
		private bool logAllocations;

		[Token(Token = "0x17000197")]
		public long Vector2Capacity
		{
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0x2005F1C", Offset = "0x2005F1C", VA = "0x2005F1C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0x2005F24", Offset = "0x2005F24", VA = "0x2005F24")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public long Vector3Capacity
		{
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0x200604C", Offset = "0x200604C", VA = "0x200604C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0x2006054", Offset = "0x2006054", VA = "0x2006054")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public long Vector4Capacity
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0x200617C", Offset = "0x200617C", VA = "0x200617C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0x2006184", Offset = "0x2006184", VA = "0x2006184")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public long IntCapacity
		{
			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0x20062AC", Offset = "0x20062AC", VA = "0x20062AC")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0x20062B4", Offset = "0x20062B4", VA = "0x20062B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public long FloatCapacity
		{
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0x20063DC", Offset = "0x20063DC", VA = "0x20063DC")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0x20063E4", Offset = "0x20063E4", VA = "0x20063E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public long CGSpotCapacity
		{
			[Token(Token = "0x6000A5F")]
			[Address(RVA = "0x200650C", Offset = "0x200650C", VA = "0x200650C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0x2006514", Offset = "0x2006514", VA = "0x2006514")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public bool LogAllocations
		{
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0x200663C", Offset = "0x200663C", VA = "0x200663C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0x2006644", Offset = "0x2006644", VA = "0x2006644")]
			set
			{
			}
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x20068CC", Offset = "0x20068CC", VA = "0x20068CC", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x200695C", Offset = "0x200695C", VA = "0x200695C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x2006984", Offset = "0x2006984", VA = "0x2006984")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x20068F4", Offset = "0x20068F4", VA = "0x20068F4")]
		private void ValidateAndApply()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x2006988", Offset = "0x2006988", VA = "0x2006988")]
		public ArrayPoolsSettings()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Components
{
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3B14", Offset = "0x10A3B14")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3B14", Offset = "0x10A3B14")]
	public class CurvyGLRenderer : DTVersionedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200016D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3B74", Offset = "0x10A3B74")]
		private sealed class <>c
		{
			[Token(Token = "0x40005C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40005C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Material> <>9__10_0;

			[Token(Token = "0x6000A72")]
			[Address(RVA = "0x223896C", Offset = "0x223896C", VA = "0x223896C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x2238974", Offset = "0x2238974", VA = "0x2238974")]
			internal Material <.ctor>b__10_0()
			{
				return null;
			}
		}

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[ArrayEx]
		public List<GLSlotData> Splines;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Lazy<Material> lineMaterial;

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x254E548", Offset = "0x254E548", VA = "0x254E548", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x254E6D4", Offset = "0x254E6D4", VA = "0x254E6D4", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x254E6FC", Offset = "0x254E6FC", VA = "0x254E6FC")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x254E584", Offset = "0x254E584", VA = "0x254E584")]
		private void sanitize()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x254E93C", Offset = "0x254E93C", VA = "0x254E93C")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x254EAC8", Offset = "0x254EAC8", VA = "0x254EAC8")]
		private GLSlotData getSlot(CurvySpline spline)
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x254EC88", Offset = "0x254EC88", VA = "0x254EC88")]
		public void Add(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x254ED7C", Offset = "0x254ED7C", VA = "0x254ED7C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3000", Offset = "0x10C3000")]
		public void Remove(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x254EEA0", Offset = "0x254EEA0", VA = "0x254EEA0")]
		public CurvyGLRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016E")]
	public class GLSlotData
	{
		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public CurvySpline Spline;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Vector3[]> VertexData;

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x2F2D10C", Offset = "0x2F2D10C", VA = "0x2F2D10C")]
		public void GetVertexData()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x2F2D2BC", Offset = "0x2F2D2BC", VA = "0x2F2D2BC")]
		public void Render(Material mat)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x2F2D4AC", Offset = "0x2F2D4AC", VA = "0x2F2D4AC")]
		public GLSlotData()
		{
		}
	}
	[Token(Token = "0x200016F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3B84", Offset = "0x10A3B84")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3B84", Offset = "0x10A3B84")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3B84", Offset = "0x10A3B84")]
	public class CurvyLineRenderer : SplineProcessor
	{
		[Token(Token = "0x40005C5")]
		public const string ComponentPath = "Curvy/Converters/Curvy Line Renderer";

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer cachedLineRenderer;

		[Token(Token = "0x1700019E")]
		private LineRenderer LineRenderer
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0x2555480", Offset = "0x2555480", VA = "0x2555480")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x2555534", Offset = "0x2555534", VA = "0x2555534")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0x10C3038", Offset = "0x10C3038")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x2555538", Offset = "0x2555538", VA = "0x2555538")]
		private void EnforceWorldSpaceUsage()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x25555C8", Offset = "0x25555C8", VA = "0x25555C8", Slot = "9")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x255578C", Offset = "0x255578C", VA = "0x255578C")]
		public CurvyLineRenderer()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Utils
{
	[Token(Token = "0x2000170")]
	public class SerializableArray<T>
	{
		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] Array;

		[Token(Token = "0x6000A7C")]
		public SerializableArray()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public static class OptimizedOperators
	{
		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x3130258", Offset = "0x3130258", VA = "0x3130258")]
		public static Vector3 Addition(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x3130268", Offset = "0x3130268", VA = "0x3130268")]
		public static Vector3 UnaryNegation(this Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x3130278", Offset = "0x3130278", VA = "0x3130278")]
		public static Vector3 Subtraction(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x3130288", Offset = "0x3130288", VA = "0x3130288")]
		public static Vector3 Multiply(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x3130298", Offset = "0x3130298", VA = "0x3130298")]
		public static Vector3 Multiply(this float d, Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x31302AC", Offset = "0x31302AC", VA = "0x31302AC")]
		public static Vector3 Division(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x31302C4", Offset = "0x31302C4", VA = "0x31302C4")]
		public static Vector3 Normalize(this Vector3 value)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x31303A4", Offset = "0x31303A4", VA = "0x31303A4")]
		public static Vector3 LerpUnclamped(this Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x31303CC", Offset = "0x31303CC", VA = "0x31303CC")]
		public static Color Multiply(this Color a, float b)
		{
			return default(Color);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x31303E0", Offset = "0x31303E0", VA = "0x31303E0")]
		public static Color Multiply(this float b, Color a)
		{
			return default(Color);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x31303F8", Offset = "0x31303F8", VA = "0x31303F8")]
		public static Quaternion Multiply(this Quaternion lhs, Quaternion rhs)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000172")]
	public static class CurvyUtility
	{
		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x388DE54", Offset = "0x388DE54", VA = "0x388DE54")]
		public static float ClampTF(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x389A978", Offset = "0x389A978", VA = "0x389A978")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x389AA44", Offset = "0x389AA44", VA = "0x389AA44")]
		public static float ClampValue(float tf, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x388E2E4", Offset = "0x388E2E4", VA = "0x388E2E4")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x388E5D0", Offset = "0x388E5D0", VA = "0x388E5D0")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x388E714", Offset = "0x388E714", VA = "0x388E714")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x388E860", Offset = "0x388E860", VA = "0x388E860")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x389AB50", Offset = "0x389AB50", VA = "0x389AB50")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x3890F68", Offset = "0x3890F68", VA = "0x3890F68")]
		public static bool Approximately(this float x, float y)
		{
			return default(bool);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x389ACEC", Offset = "0x389ACEC", VA = "0x389ACEC")]
		public static int InterpolationSearch(float[] array, float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x388E370", Offset = "0x388E370", VA = "0x388E370")]
		public static int InterpolationSearch(float[] array, int elementsCount, float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x389AD04", Offset = "0x389AD04", VA = "0x389AD04")]
		public static Mesh SplineToMesh(this CurvySpline spline)
		{
			return null;
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x38987AC", Offset = "0x38987AC", VA = "0x38987AC")]
		public static void GetNearestPointIndex(Vector3 point, Vector3[] points, int pointsCount, out int index, out float fragement)
		{
		}
	}
	[Token(Token = "0x2000173")]
	public class Spline2Mesh
	{
		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<SplinePolyLine> Lines;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WindingRule Winding;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVTiling;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVOffset;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool SuppressUVMapping;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool UV2;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string MeshName;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool VertexLineOnly;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B1778", Offset = "0x10B1778")]
		private string <Error>k__BackingField;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tess mTess;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Mesh mMesh;

		[Token(Token = "0x1700019F")]
		public string Error
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x22A4FC0", Offset = "0x22A4FC0", VA = "0x22A4FC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3118", Offset = "0x10C3118")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0x22A4FC8", Offset = "0x22A4FC8", VA = "0x22A4FC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3128", Offset = "0x10C3128")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x22A4FD0", Offset = "0x22A4FD0", VA = "0x22A4FD0")]
		public bool Apply(out Mesh result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x22A584C", Offset = "0x22A584C", VA = "0x22A584C")]
		private bool triangulate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x22A5C54", Offset = "0x22A5C54", VA = "0x22A5C54")]
		private static bool polyLineIsValid(SplinePolyLine pl)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x22A5C94", Offset = "0x22A5C94", VA = "0x22A5C94")]
		public Spline2Mesh()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000174")]
	public class SplinePolyLine
	{
		[Token(Token = "0x2000175")]
		public enum VertexCalculation
		{
			[Token(Token = "0x40005DA")]
			ByApproximation,
			[Token(Token = "0x40005DB")]
			ByAngle
		}

		[Token(Token = "0x2000176")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3C4C", Offset = "0x10A3C4C")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x40005DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SubArrayList<Vector3> vPos;

			[Token(Token = "0x40005DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float angleFromLast;

			[Token(Token = "0x40005DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float distAccu;

			[Token(Token = "0x40005DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int linearSteps;

			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0x1DE3C60", Offset = "0x1DE3C60", VA = "0x1DE3C60")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x1DE3C68", Offset = "0x1DE3C68", VA = "0x1DE3C68")]
			internal void <GetPolygon>b__0(Vector3 position)
			{
			}
		}

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ContourOrientation Orientation;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VertexCalculation VertexMode;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Angle;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Distance;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Space Space;

		[Token(Token = "0x170001A0")]
		public bool IsClosed
		{
			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0x2DB5DEC", Offset = "0x2DB5DEC", VA = "0x2DB5DEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x2DB5CF4", Offset = "0x2DB5CF4", VA = "0x2DB5CF4")]
		public SplinePolyLine(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x2DB5D94", Offset = "0x2DB5D94", VA = "0x2DB5D94")]
		public SplinePolyLine(CurvySpline spline, float angle, float distance)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x2DB5D30", Offset = "0x2DB5D30", VA = "0x2DB5D30")]
		private SplinePolyLine(CurvySpline spline, VertexCalculation vertexMode, float angle, float distance, Space space = Space.World)
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x2DB5E7C", Offset = "0x2DB5E7C", VA = "0x2DB5E7C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3138", Offset = "0x10C3138")]
		public Vector3[] GetVertices()
		{
			return null;
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x2DB5FE0", Offset = "0x2DB5FE0", VA = "0x2DB5FE0")]
		public SubArray<Vector3> GetVertexList()
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x2DB6128", Offset = "0x2DB6128", VA = "0x2DB6128")]
		private static SubArrayList<Vector3> GetPolygon(CurvySpline spline, float fromTF, float toTF, float maxAngle, float minDistance, float maxDistance, bool includeEndPoint = true, float stepSize = 0.01f)
		{
			return default(SubArrayList<Vector3>);
		}
	}
}
namespace FluffyUnderware.Curvy.ImportExport
{
	[Token(Token = "0x2000177")]
	public enum CurvySerializationSpace
	{
		[Token(Token = "0x40005E1")]
		Global,
		[Token(Token = "0x40005E2")]
		Local
	}
	[Token(Token = "0x2000178")]
	public enum FileFormat
	{
		[Token(Token = "0x40005E4")]
		JSON,
		[Token(Token = "0x40005E5")]
		SVG
	}
	[Token(Token = "0x2000179")]
	public static class SplineJsonConverter
	{
		[Token(Token = "0x200017A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3C5C", Offset = "0x10A3C5C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x40005E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CurvySerializationSpace coordinatesSpace;

			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x1DE3BE4", Offset = "0x1DE3BE4", VA = "0x1DE3BE4")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x1DE3BEC", Offset = "0x1DE3BEC", VA = "0x1DE3BEC")]
			internal SerializedCurvySpline <SplinesToJson>b__0(CurvySpline s)
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x2DB5638", Offset = "0x2DB5638", VA = "0x2DB5638")]
		public static string SplinesToJson(IEnumerable<CurvySpline> splines, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global, bool prettify = true)
		{
			return null;
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x2DB57A8", Offset = "0x2DB57A8", VA = "0x2DB57A8")]
		public static string SplineToJson(CurvySpline spline, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global, bool prettify = true)
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x2DB5868", Offset = "0x2DB5868", VA = "0x2DB5868")]
		public static CurvySpline[] JsonToSplines(string json, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global)
		{
			return null;
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x2DB5C94", Offset = "0x2DB5C94", VA = "0x2DB5C94")]
		public static CurvySpline JsonToSpline(string json, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global)
		{
			return null;
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x2DB599C", Offset = "0x2DB599C", VA = "0x2DB599C")]
		public static SerializedCurvySpline[] JsonToSerializedSplines([NotNull] string json)
		{
			return null;
		}
	}
	[Token(Token = "0x200017B")]
	public static class SplineSvgConverter
	{
		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x2DB6E0C", Offset = "0x2DB6E0C", VA = "0x2DB6E0C")]
		public static CurvySpline[] SvgToSplines(string svg, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global)
		{
			return null;
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x2DB73D4", Offset = "0x2DB73D4", VA = "0x2DB73D4")]
		public static CurvySpline SvgToSpline(string svg, CurvySerializationSpace coordinatesSpace = CurvySerializationSpace.Global)
		{
			return null;
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x2DB6F68", Offset = "0x2DB6F68", VA = "0x2DB6F68")]
		public static List<SerializedCurvySpline> SvgToSerializedSplines([NotNull] string svg, bool invertY = true)
		{
			return null;
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x2DB7434", Offset = "0x2DB7434", VA = "0x2DB7434")]
		private static void DrawNode(SceneNode node, Matrix2D rootTransform, List<SerializedCurvySpline> splines)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public class SerializedCurvySpline
	{
		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Position;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 Rotation;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CurvyInterpolation Interpolation;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool RestrictTo2D;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool Closed;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool AutoEndTangents;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvyOrientation Orientation;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float AutoHandleDistance;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int CacheDensity;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxPointsPerUnit;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool UsePooling;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool UseThreading;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool CheckTransform;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool IsBSplineClamped;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int BSplineDegree;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SerializedCurvySplineSegment[] ControlPoints;

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x2299E64", Offset = "0x2299E64", VA = "0x2299E64")]
		public SerializedCurvySpline()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x2299F40", Offset = "0x2299F40", VA = "0x2299F40")]
		public SerializedCurvySpline([NotNull] CurvySpline spline, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x229A314", Offset = "0x229A314", VA = "0x229A314")]
		public void WriteIntoSpline([NotNull] CurvySpline deserializedSpline, CurvySerializationSpace space)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class SerializedCurvySplineSegment
	{
		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 Rotation;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool AutoBakeOrientation;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool OrientationAnchor;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CurvyOrientationSwirl Swirl;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float SwirlTurns;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AutoHandles;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool SynchronizeTCB;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AutoHandleDistance;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 HandleOut;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 HandleIn;

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x229A6A4", Offset = "0x229A6A4", VA = "0x229A6A4")]
		public SerializedCurvySplineSegment()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x229A200", Offset = "0x229A200", VA = "0x229A200")]
		public SerializedCurvySplineSegment([NotNull] CurvySplineSegment segment, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x229A540", Offset = "0x229A540", VA = "0x229A540")]
		public void WriteIntoControlPoint([NotNull] CurvySplineSegment controlPoint, CurvySerializationSpace space)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Controllers
{
	[Token(Token = "0x200017E")]
	public abstract class ConnectedControlPointsSelector : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x6000AB5")]
		public abstract CurvySplineSegment SelectConnectedControlPoint(SplineController caller, CurvyConnection connection, CurvySplineSegment currentControlPoint);

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x25447F0", Offset = "0x25447F0", VA = "0x25447F0")]
		protected ConnectedControlPointsSelector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017F")]
	public class ControllerEvent : UnityEventEx<CurvyController>
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x2544CB8", Offset = "0x2544CB8", VA = "0x2544CB8")]
		public ControllerEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000180")]
	public class CurvySplineMoveEvent : UnityEventEx<CurvySplineMoveEventArgs>
	{
		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x3895F14", Offset = "0x3895F14", VA = "0x3895F14")]
		public CurvySplineMoveEvent()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class CurvySplineMoveEventArgs : CancelEventArgs
	{
		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B1788", Offset = "0x10B1788")]
		private SplineController <Sender>k__BackingField;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B1798", Offset = "0x10B1798")]
		private CurvySpline <Spline>k__BackingField;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B17A8", Offset = "0x10B17A8")]
		private CurvySplineSegment <ControlPoint>k__BackingField;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B17B8", Offset = "0x10B17B8")]
		private bool <WorldUnits>k__BackingField;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B17C8", Offset = "0x10B17C8")]
		private MovementDirection <MovementDirection>k__BackingField;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B17D8", Offset = "0x10B17D8")]
		private float <Delta>k__BackingField;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B17E8", Offset = "0x10B17E8")]
		private float <Position>k__BackingField;

		[Token(Token = "0x170001A1")]
		public SplineController Sender
		{
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0x3895F60", Offset = "0x3895F60", VA = "0x3895F60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3170", Offset = "0x10C3170")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0x3895F68", Offset = "0x3895F68", VA = "0x3895F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3180", Offset = "0x10C3180")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0x3895F70", Offset = "0x3895F70", VA = "0x3895F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3190", Offset = "0x10C3190")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABC")]
			[Address(RVA = "0x3895F78", Offset = "0x3895F78", VA = "0x3895F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31A0", Offset = "0x10C31A0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0x3895F80", Offset = "0x3895F80", VA = "0x3895F80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31B0", Offset = "0x10C31B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x3895F88", Offset = "0x3895F88", VA = "0x3895F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31C0", Offset = "0x10C31C0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public bool WorldUnits
		{
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x3895F90", Offset = "0x3895F90", VA = "0x3895F90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31D0", Offset = "0x10C31D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0x3895F98", Offset = "0x3895F98", VA = "0x3895F98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31E0", Offset = "0x10C31E0")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x3895FA4", Offset = "0x3895FA4", VA = "0x3895FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C31F0", Offset = "0x10C31F0")]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0x3895FAC", Offset = "0x3895FAC", VA = "0x3895FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3200", Offset = "0x10C3200")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public float Delta
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x3895FB4", Offset = "0x3895FB4", VA = "0x3895FB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3210", Offset = "0x10C3210")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0x3895FBC", Offset = "0x3895FBC", VA = "0x3895FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3220", Offset = "0x10C3220")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public float Position
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x3895FC4", Offset = "0x3895FC4", VA = "0x3895FC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3230", Offset = "0x10C3230")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x3895FCC", Offset = "0x3895FCC", VA = "0x3895FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3240", Offset = "0x10C3240")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x3895FD4", Offset = "0x3895FD4", VA = "0x3895FD4")]
		public CurvySplineMoveEventArgs(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, bool usingWorldUnits, float delta, MovementDirection direction)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x389604C", Offset = "0x389604C", VA = "0x389604C")]
		internal void Set_INTERNAL(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, float delta, MovementDirection direction, bool usingWorldUnits)
		{
		}
	}
	[Token(Token = "0x2000182")]
	[ExecuteAlways]
	public abstract class CurvyController : DTVersionedMonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000183")]
		public enum CurvyControllerState
		{
			[Token(Token = "0x4000627")]
			Stopped,
			[Token(Token = "0x4000628")]
			Playing,
			[Token(Token = "0x4000629")]
			Paused
		}

		[Token(Token = "0x2000184")]
		public enum MoveModeEnum
		{
			[Token(Token = "0x400062B")]
			Relative,
			[Token(Token = "0x400062C")]
			AbsolutePrecise
		}

		[Token(Token = "0x2000185")]
		protected class OrientationDamper
		{
			[Token(Token = "0x400062D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CurvyController controller;

			[Token(Token = "0x400062E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B2904", Offset = "0x10B2904")]
			public Vector3 DirectionDampingVelocity;

			[Token(Token = "0x400062F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B2914", Offset = "0x10B2914")]
			public Vector3 UpDampingVelocity;

			[Token(Token = "0x6000B36")]
			[Address(RVA = "0x22386E0", Offset = "0x22386E0", VA = "0x22386E0")]
			public OrientationDamper([NotNull] CurvyController controller)
			{
			}

			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x2238714", Offset = "0x2238714", VA = "0x2238714")]
			public Quaternion Damp(Quaternion sourceOrientation, Vector3 targetForward, Vector3 targetUp, float deltaTime)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x2238860", Offset = "0x2238860", VA = "0x2238860")]
			private Vector3 DampenVector(Vector3 current, Vector3 target, float deltaTime, float dampingTime, ref Vector3 velocity)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x22388D8", Offset = "0x22388D8", VA = "0x22388D8")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B17F8", Offset = "0x10B17F8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B17F8", Offset = "0x10B17F8")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1890", Offset = "0x10B1890")]
		private TargetComponent targetComponent;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B1B80", Offset = "0x10B1B80")]
		[SerializeField]
		private CurvyPositionMode m_PositionMode;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B1C04", Offset = "0x10B1C04")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1C04", Offset = "0x10B1C04")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B1C04", Offset = "0x10B1C04")]
		protected float m_Position;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B1D30", Offset = "0x10B1D30")]
		private MoveModeEnum m_MoveMode;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private MovementDirection m_Direction;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private CurvyClamping m_Clamping;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1E04", Offset = "0x10B1E04")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B1E04", Offset = "0x10B1E04")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1E04", Offset = "0x10B1E04")]
		private MotionConstraints motionConstraints;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B1F28", Offset = "0x10B1F28")]
		private bool m_PlayAutomatically;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B1F74", Offset = "0x10B1F74")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B1F74", Offset = "0x10B1F74")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B1F74", Offset = "0x10B1F74")]
		[SerializeField]
		private OrientationModeEnum m_OrientationMode;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B20BC", Offset = "0x10B20BC")]
		[SerializeField]
		private bool m_LockRotation;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2124", Offset = "0x10B2124")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2124", Offset = "0x10B2124")]
		private OrientationAxisEnum m_OrientationAxis;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2260", Offset = "0x10B2260")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B2260", Offset = "0x10B2260")]
		[SerializeField]
		private bool m_IgnoreDirection;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x10B2388", Offset = "0x10B2388")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2388", Offset = "0x10B2388")]
		[SerializeField]
		private float m_DampingDirection;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x10B2480", Offset = "0x10B2480")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2480", Offset = "0x10B2480")]
		[SerializeField]
		private float m_DampingUp;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B2578", Offset = "0x10B2578")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B2578", Offset = "0x10B2578")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2578", Offset = "0x10B2578")]
		private float m_OffsetAngle;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B26D0", Offset = "0x10B26D0")]
		private float m_OffsetRadius;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2784", Offset = "0x10B2784")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2784", Offset = "0x10B2784")]
		private bool m_OffsetCompensation;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B2870", Offset = "0x10B2870")]
		protected ControllerEvent onInitialized;

		[Token(Token = "0x400061F")]
		protected const string ControllerNotReadyMessage = "The controller is not yet ready";

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B28D4", Offset = "0x10B28D4")]
		private readonly OrientationDamper <Damper>k__BackingField;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected CurvyControllerState State;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float PrePlayPosition;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected MovementDirection PrePlayDirection;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected Quaternion LockedRotation;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B28E4", Offset = "0x10B28E4")]
		private bool <isInitialized>k__BackingField;

		[Token(Token = "0x170001A8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8270", Offset = "0x10C8270")]
		protected Vector3 DirectionDampingVelocity
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x254BB68", Offset = "0x254BB68", VA = "0x254BB68")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x254BB88", Offset = "0x254BB88", VA = "0x254BB88")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8280", Offset = "0x10C8280")]
		protected Vector3 UpDampingVelocity
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x254BBA8", Offset = "0x254BBA8", VA = "0x254BBA8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x254BBC8", Offset = "0x254BBC8", VA = "0x254BBC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public ControllerEvent OnInitialized
		{
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x254BBE8", Offset = "0x254BBE8", VA = "0x254BBE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AB")]
		public TargetComponent TargetComponent
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x254BBF0", Offset = "0x254BBF0", VA = "0x254BBF0")]
			get
			{
				return default(TargetComponent);
			}
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x254BBF8", Offset = "0x254BBF8", VA = "0x254BBF8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public CurvyPositionMode PositionMode
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x254BC0C", Offset = "0x254BC0C", VA = "0x254BC0C")]
			get
			{
				return default(CurvyPositionMode);
			}
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x254BC14", Offset = "0x254BC14", VA = "0x254BC14")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public MoveModeEnum MoveMode
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x254BC1C", Offset = "0x254BC1C", VA = "0x254BC1C")]
			get
			{
				return default(MoveModeEnum);
			}
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x254BC24", Offset = "0x254BC24", VA = "0x254BC24")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public bool PlayAutomatically
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x254BC38", Offset = "0x254BC38", VA = "0x254BC38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x254BC40", Offset = "0x254BC40", VA = "0x254BC40")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public CurvyClamping Clamping
		{
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x254BC60", Offset = "0x254BC60", VA = "0x254BC60")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x254BC68", Offset = "0x254BC68", VA = "0x254BC68")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public MotionConstraints MotionConstraints
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x254BC7C", Offset = "0x254BC7C", VA = "0x254BC7C")]
			get
			{
				return default(MotionConstraints);
			}
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x254BC84", Offset = "0x254BC84", VA = "0x254BC84")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public OrientationModeEnum OrientationMode
		{
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0x254BC98", Offset = "0x254BC98", VA = "0x254BC98")]
			get
			{
				return default(OrientationModeEnum);
			}
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x254BCA0", Offset = "0x254BCA0", VA = "0x254BCA0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public bool LockRotation
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x254BCB4", Offset = "0x254BCB4", VA = "0x254BCB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0x254BCBC", Offset = "0x254BCBC", VA = "0x254BCBC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public OrientationAxisEnum OrientationAxis
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0x254BD30", Offset = "0x254BD30", VA = "0x254BD30")]
			get
			{
				return default(OrientationAxisEnum);
			}
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0x254BD38", Offset = "0x254BD38", VA = "0x254BD38")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public float DirectionDampingTime
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x254BD4C", Offset = "0x254BD4C", VA = "0x254BD4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x254BD54", Offset = "0x254BD54", VA = "0x254BD54")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public float UpDampingTime
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0x254BD84", Offset = "0x254BD84", VA = "0x254BD84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0x254BD8C", Offset = "0x254BD8C", VA = "0x254BD8C")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public bool IgnoreDirection
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0x254BDBC", Offset = "0x254BDBC", VA = "0x254BDBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0x254BDC4", Offset = "0x254BDC4", VA = "0x254BDC4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		public float OffsetAngle
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x254BDE4", Offset = "0x254BDE4", VA = "0x254BDE4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x254BDEC", Offset = "0x254BDEC", VA = "0x254BDEC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public float OffsetRadius
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x254BE00", Offset = "0x254BE00", VA = "0x254BE00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0x254BE08", Offset = "0x254BE08", VA = "0x254BE08")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public bool OffsetCompensation
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x254BE1C", Offset = "0x254BE1C", VA = "0x254BE1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0x254BE24", Offset = "0x254BE24", VA = "0x254BE24")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public float Speed
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x254BE30", Offset = "0x254BE30", VA = "0x254BE30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0x254BE38", Offset = "0x254BE38", VA = "0x254BE38")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public float RelativePosition
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0x254BE4C", Offset = "0x254BE4C", VA = "0x254BE4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0x254BFDC", Offset = "0x254BFDC", VA = "0x254BFDC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public float AbsolutePosition
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x254C090", Offset = "0x254C090", VA = "0x254C090")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x254C198", Offset = "0x254C198", VA = "0x254C198")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public float Position
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x254C258", Offset = "0x254C258", VA = "0x254C258")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0x254C2B0", Offset = "0x254C2B0", VA = "0x254C2B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0x254C308", Offset = "0x254C308", VA = "0x254C308")]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0x254C310", Offset = "0x254C310", VA = "0x254C310")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public CurvyControllerState PlayState
		{
			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0x254C318", Offset = "0x254C318", VA = "0x254C318")]
			get
			{
				return default(CurvyControllerState);
			}
		}

		[Token(Token = "0x170001C0")]
		public abstract bool IsReady
		{
			[Token(Token = "0x6000AF7")]
			get;
		}

		[Token(Token = "0x170001C1")]
		protected virtual bool ShouldDisablePositionSlider
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x254C320", Offset = "0x254C320", VA = "0x254C320", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C2")]
		[NotNull]
		protected OrientationDamper Damper
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x254C358", Offset = "0x254C358", VA = "0x254C358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3250", Offset = "0x10C3250")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C3")]
		public virtual Transform Transform
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x254C640", Offset = "0x254C640", VA = "0x254C640", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C4")]
		public virtual Rigidbody Rigidbody
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0x254C648", Offset = "0x254C648", VA = "0x254C648", Slot = "18")]
			[CanBeNull]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		public virtual Rigidbody2D Rigidbody2D
		{
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0x254C6A4", Offset = "0x254C6A4", VA = "0x254C6A4", Slot = "19")]
			[CanBeNull]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		protected virtual bool ShowOrientationSection
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0x254D7D0", Offset = "0x254D7D0", VA = "0x254D7D0", Slot = "33")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C7")]
		protected virtual bool ShowOffsetSection
		{
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0x254D7D8", Offset = "0x254D7D8", VA = "0x254D7D8", Slot = "34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C8")]
		public abstract float Length
		{
			[Token(Token = "0x6000B13")]
			get;
		}

		[Token(Token = "0x170001C9")]
		protected bool isInitialized
		{
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0x254DFEC", Offset = "0x254DFEC", VA = "0x254DFEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3280", Offset = "0x10C3280")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x254DFF4", Offset = "0x254DFF4", VA = "0x254DFF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3290", Offset = "0x10C3290")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		protected float TimeSinceLastUpdate
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x254C4B8", Offset = "0x254C4B8", VA = "0x254C4B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CB")]
		protected bool UseOffset
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x254C8E0", Offset = "0x254C8E0", VA = "0x254C8E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CC")]
		private float maxPosition
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0x254E000", Offset = "0x254E000", VA = "0x254E000")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CD")]
		private bool IsNeededRigidbodyMissing
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x254E098", Offset = "0x254E098", VA = "0x254E098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CE")]
		private bool IsNeeded2DRigidbodyMissing
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0x254E138", Offset = "0x254E138", VA = "0x254E138")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CF")]
		private bool IsNeededRigidbodyNotKinematic
		{
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0x254E1D8", Offset = "0x254E1D8", VA = "0x254E1D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D0")]
		private bool IsNeeded2DRigidbodyNotKinematic
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x254E290", Offset = "0x254E290", VA = "0x254E290")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D1")]
		private bool AreConstraintsConflicting
		{
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0x254E348", Offset = "0x254E348", VA = "0x254E348")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x254C360", Offset = "0x254C360", VA = "0x254C360", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x254C3D4", Offset = "0x254C3D4", VA = "0x254C3D4", Slot = "13")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x254C43C", Offset = "0x254C43C", VA = "0x254C43C", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x254C484", Offset = "0x254C484", VA = "0x254C484", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x254C570", Offset = "0x254C570", VA = "0x254C570", Slot = "15")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x254C5C8", Offset = "0x254C5C8", VA = "0x254C5C8", Slot = "16")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x254C600", Offset = "0x254C600", VA = "0x254C600", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x254C700", Offset = "0x254C700", VA = "0x254C700", Slot = "20")]
		protected virtual void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x254CAEC", Offset = "0x254CAEC", VA = "0x254CAEC", Slot = "21")]
		protected virtual void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x254D0B0", Offset = "0x254D0B0", VA = "0x254D0B0", Slot = "22")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x254D214", Offset = "0x254D214", VA = "0x254D214", Slot = "23")]
		protected virtual void Deinitialize()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x254D244", Offset = "0x254D244", VA = "0x254D244", Slot = "24")]
		protected virtual void BindEvents()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x254D248", Offset = "0x254D248", VA = "0x254D248", Slot = "25")]
		protected virtual void UnbindEvents()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x254D24C", Offset = "0x254D24C", VA = "0x254D24C", Slot = "26")]
		protected virtual void SavePrePlayState()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x254D25C", Offset = "0x254D25C", VA = "0x254D25C", Slot = "27")]
		protected virtual void RestorePrePlayState()
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x254D26C", Offset = "0x254D26C", VA = "0x254D26C", Slot = "28")]
		protected virtual void ResetPrePlayState()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x254D274", Offset = "0x254D274", VA = "0x254D274", Slot = "29")]
		protected virtual void GetPositionAndRotation(out Vector3 position, out Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x254D4C8", Offset = "0x254D4C8", VA = "0x254D4C8", Slot = "30")]
		protected virtual void SetPositionAndRotation(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x254D7C8", Offset = "0x254D7C8", VA = "0x254D7C8", Slot = "31")]
		protected virtual void UserAfterInit()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x254D7CC", Offset = "0x254D7CC", VA = "0x254D7CC", Slot = "32")]
		protected virtual void UserAfterUpdate()
		{
		}

		[Token(Token = "0x6000B14")]
		protected abstract void Advance(float speed, float deltaTime);

		[Token(Token = "0x6000B15")]
		protected abstract void SimulateAdvance(ref float tf, ref MovementDirection direction, float speed, float deltaTime);

		[Token(Token = "0x6000B16")]
		protected abstract float AbsoluteToRelative(float worldUnitDistance);

		[Token(Token = "0x6000B17")]
		protected abstract float RelativeToAbsolute(float relativeDistance);

		[Token(Token = "0x6000B18")]
		protected abstract Vector3 GetInterpolatedSourcePosition(float tf);

		[Token(Token = "0x6000B19")]
		protected abstract void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up);

		[Token(Token = "0x6000B1A")]
		protected abstract Vector3 GetOrientation(float tf);

		[Token(Token = "0x6000B1B")]
		protected abstract Vector3 GetTangent(float tf);

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x254D7E8", Offset = "0x254D7E8", VA = "0x254D7E8")]
		public CurvyController()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x254D1D4", Offset = "0x254D1D4", VA = "0x254D1D4")]
		public void Play()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x254D8B0", Offset = "0x254D8B0", VA = "0x254D8B0")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x254D8EC", Offset = "0x254D8EC", VA = "0x254D8EC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x254D904", Offset = "0x254D904", VA = "0x254D904")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x254C4C0", Offset = "0x254C4C0", VA = "0x254C4C0")]
		public void ApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x254D90C", Offset = "0x254D90C", VA = "0x254D90C")]
		public void TeleportTo(float newPosition)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x254D954", Offset = "0x254D954", VA = "0x254D954")]
		public void TeleportBy(float distance, MovementDirection direction)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x254DA10", Offset = "0x254DA10", VA = "0x254DA10")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x254D010", Offset = "0x254D010", VA = "0x254D010")]
		protected static Vector3 ApplyOffset(Vector3 position, Vector3 tangent, Vector3 up, float offsetAngle, float offsetRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x254BF5C", Offset = "0x254BF5C", VA = "0x254BF5C")]
		protected static float GetClampedPosition(float position, CurvyPositionMode positionMode, CurvyClamping clampingMode, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x254E008", Offset = "0x254E008", VA = "0x254E008")]
		protected float GetMaxPosition(CurvyPositionMode positionMode)
		{
			return default(float);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x254C8F0", Offset = "0x254C8F0", VA = "0x254C8F0")]
		protected float ComputeOffsetCompensatedSpeed(float deltaTime)
		{
			return default(float);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x254CEDC", Offset = "0x254CEDC", VA = "0x254CEDC")]
		private void GetOrientationNoneUpAndForward(out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x254E470", Offset = "0x254E470", VA = "0x254E470", Slot = "9")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x254E474", Offset = "0x254E474", VA = "0x254E474", Slot = "44")]
		public virtual void OnAfterDeserialize()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[Flags]
	public enum MotionConstraints
	{
		[Token(Token = "0x4000631")]
		None = 0,
		[Token(Token = "0x4000632")]
		FreezePositionX = 1,
		[Token(Token = "0x4000633")]
		FreezePositionY = 2,
		[Token(Token = "0x4000634")]
		FreezePositionZ = 4,
		[Token(Token = "0x4000635")]
		FreezeRotationX = 8,
		[Token(Token = "0x4000636")]
		FreezeRotationY = 0x10,
		[Token(Token = "0x4000637")]
		FreezeRotationZ = 0x20
	}
	[Token(Token = "0x2000187")]
	public enum MovementDirection
	{
		[Token(Token = "0x4000639")]
		Forward,
		[Token(Token = "0x400063A")]
		Backward
	}
	[Token(Token = "0x2000188")]
	public static class MovementDirectionMethods
	{
		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x312A678", Offset = "0x312A678", VA = "0x312A678")]
		public static MovementDirection FromInt(int value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x312A680", Offset = "0x312A680", VA = "0x312A680")]
		public static MovementDirection GetOpposite(this MovementDirection value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x312A6DC", Offset = "0x312A6DC", VA = "0x312A6DC")]
		public static int ToInt(this MovementDirection direction)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000189")]
	public class OnPositionReachedSettings : ISerializationCallbackReceiver
	{
		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySplineMoveEvent Event;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Position;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CurvyPositionMode PositionMode;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriggeringDirections TriggeringDirections;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color GizmoColor;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private bool initialized;

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x31300B8", Offset = "0x31300B8", VA = "0x31300B8")]
		public OnPositionReachedSettings()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x3130130", Offset = "0x3130130", VA = "0x3130130")]
		private void InitializeFieldsWithDefaultValue()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x31301C0", Offset = "0x31301C0", VA = "0x31301C0", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x31301C4", Offset = "0x31301C4", VA = "0x31301C4", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x31301D4", Offset = "0x31301D4", VA = "0x31301D4")]
		public OnPositionReachedSettings Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x200018A")]
	public enum TriggeringDirections
	{
		[Token(Token = "0x4000643")]
		All,
		[Token(Token = "0x4000644")]
		Forward,
		[Token(Token = "0x4000645")]
		Backward
	}
	[Token(Token = "0x200018B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3C9C", Offset = "0x10A3C9C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3C9C", Offset = "0x10A3C9C")]
	public class PathController : CurvyController
	{
		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0x10B295C", Offset = "0x10B295C")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B295C", Offset = "0x10B295C")]
		private CGDataReference m_Path;

		[Token(Token = "0x170001D2")]
		public CGDataReference Path
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0x31306F0", Offset = "0x31306F0", VA = "0x31306F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0x31306F8", Offset = "0x31306F8", VA = "0x31306F8")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public CGPath PathData
		{
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0x3130700", Offset = "0x3130700", VA = "0x3130700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D4")]
		public override float Length
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0x3130774", Offset = "0x3130774", VA = "0x3130774", Slot = "35")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D5")]
		public override bool IsReady
		{
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0x31307B4", Offset = "0x31307B4", VA = "0x31307B4", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x3130804", Offset = "0x3130804", VA = "0x3130804", Slot = "39")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x3130860", Offset = "0x3130860", VA = "0x3130860", Slot = "38")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x31308BC", Offset = "0x31308BC", VA = "0x31308BC", Slot = "40")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x3130934", Offset = "0x3130934", VA = "0x3130934", Slot = "41")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x3130A10", Offset = "0x3130A10", VA = "0x3130A10", Slot = "43")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x3130A88", Offset = "0x3130A88", VA = "0x3130A88", Slot = "42")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x3130B00", Offset = "0x3130B00", VA = "0x3130B00", Slot = "36")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x3130B7C", Offset = "0x3130B7C", VA = "0x3130B7C", Slot = "37")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection direction, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x3130C68", Offset = "0x3130C68", VA = "0x3130C68")]
		public PathController()
		{
		}
	}
	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3CFC", Offset = "0x10A3CFC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3CFC", Offset = "0x10A3CFC")]
	public class SplineController : CurvyController
	{
		[Token(Token = "0x200018D")]
		protected class SplineSwitcher
		{
			[Token(Token = "0x4000657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B3070", Offset = "0x10B3070")]
			private float <StartTime>k__BackingField;

			[Token(Token = "0x4000658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B3080", Offset = "0x10B3080")]
			private float <Duration>k__BackingField;

			[Token(Token = "0x4000659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B3090", Offset = "0x10B3090")]
			private CurvySpline <Spline>k__BackingField;

			[Token(Token = "0x400065A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B30A0", Offset = "0x10B30A0")]
			private float <Tf>k__BackingField;

			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B30B0", Offset = "0x10B30B0")]
			private MovementDirection <Direction>k__BackingField;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B30C0", Offset = "0x10B30C0")]
			private bool <IsSwitching>k__BackingField;

			[Token(Token = "0x170001EC")]
			public float StartTime
			{
				[Token(Token = "0x6000B97")]
				[Address(RVA = "0x1DE3990", Offset = "0x1DE3990", VA = "0x1DE3990")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C32C0", Offset = "0x10C32C0")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000B98")]
				[Address(RVA = "0x1DE3998", Offset = "0x1DE3998", VA = "0x1DE3998")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C32D0", Offset = "0x10C32D0")]
				set
				{
				}
			}

			[Token(Token = "0x170001ED")]
			public float Duration
			{
				[Token(Token = "0x6000B99")]
				[Address(RVA = "0x1DE39A0", Offset = "0x1DE39A0", VA = "0x1DE39A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C32E0", Offset = "0x10C32E0")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000B9A")]
				[Address(RVA = "0x1DE39A8", Offset = "0x1DE39A8", VA = "0x1DE39A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C32F0", Offset = "0x10C32F0")]
				set
				{
				}
			}

			[Token(Token = "0x170001EE")]
			public CurvySpline Spline
			{
				[Token(Token = "0x6000B9B")]
				[Address(RVA = "0x1DE39B0", Offset = "0x1DE39B0", VA = "0x1DE39B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3300", Offset = "0x10C3300")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000B9C")]
				[Address(RVA = "0x1DE39B8", Offset = "0x1DE39B8", VA = "0x1DE39B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3310", Offset = "0x10C3310")]
				set
				{
				}
			}

			[Token(Token = "0x170001EF")]
			public float Tf
			{
				[Token(Token = "0x6000B9D")]
				[Address(RVA = "0x1DE39C0", Offset = "0x1DE39C0", VA = "0x1DE39C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3320", Offset = "0x10C3320")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000B9E")]
				[Address(RVA = "0x1DE39C8", Offset = "0x1DE39C8", VA = "0x1DE39C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3330", Offset = "0x10C3330")]
				set
				{
				}
			}

			[Token(Token = "0x170001F0")]
			public MovementDirection Direction
			{
				[Token(Token = "0x6000B9F")]
				[Address(RVA = "0x1DE39D0", Offset = "0x1DE39D0", VA = "0x1DE39D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3340", Offset = "0x10C3340")]
				get
				{
					return default(MovementDirection);
				}
				[Token(Token = "0x6000BA0")]
				[Address(RVA = "0x1DE39D8", Offset = "0x1DE39D8", VA = "0x1DE39D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3350", Offset = "0x10C3350")]
				set
				{
				}
			}

			[Token(Token = "0x170001F1")]
			public bool IsSwitching
			{
				[Token(Token = "0x6000BA1")]
				[Address(RVA = "0x1DE39E0", Offset = "0x1DE39E0", VA = "0x1DE39E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3360", Offset = "0x10C3360")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000BA2")]
				[Address(RVA = "0x1DE39E8", Offset = "0x1DE39E8", VA = "0x1DE39E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3370", Offset = "0x10C3370")]
				set
				{
				}
			}

			[Token(Token = "0x170001F2")]
			public float Progress
			{
				[Token(Token = "0x6000BA3")]
				[Address(RVA = "0x1DE39F4", Offset = "0x1DE39F4", VA = "0x1DE39F4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0x1DE3A38", Offset = "0x1DE3A38", VA = "0x1DE3A38")]
			public void Start([NotNull] CurvySpline spline, float tf, float duration, MovementDirection direction)
			{
			}

			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x1DE3B48", Offset = "0x1DE3B48", VA = "0x1DE3B48")]
			public void Advance(CurvySpline spline, MoveModeEnum moveMode, float distance, CurvyClamping clamping)
			{
			}

			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x1DE3BA4", Offset = "0x1DE3BA4", VA = "0x1DE3BA4")]
			public void Stop()
			{
			}

			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0x1DE3BDC", Offset = "0x1DE3BDC", VA = "0x1DE3BDC")]
			public SplineSwitcher()
			{
			}
		}

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2A20", Offset = "0x10B2A20")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B2A20", Offset = "0x10B2A20")]
		protected CurvySpline m_Spline;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B2AD0", Offset = "0x10B2AD0")]
		private bool m_UseCache;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B2B1C", Offset = "0x10B2B1C")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2B1C", Offset = "0x10B2B1C")]
		private SplineControllerConnectionBehavior connectionBehavior;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2BD0", Offset = "0x10B2BD0")]
		[SerializeField]
		private bool allowDirectionChange;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2C38", Offset = "0x10B2C38")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2C38", Offset = "0x10B2C38")]
		private bool rejectCurrentSpline;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2D20", Offset = "0x10B2D20")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2D20", Offset = "0x10B2D20")]
		private bool rejectTooDivergentSplines;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2E08", Offset = "0x10B2E08")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10B2E08", Offset = "0x10B2E08")]
		private float maxAllowedDivergenceAngle;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B2E8C", Offset = "0x10B2E8C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2E8C", Offset = "0x10B2E8C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B2E8C", Offset = "0x10B2E8C")]
		private ConnectedControlPointsSelector connectionCustomSelector;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ArrayEx]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B2FBC", Offset = "0x10B2FBC")]
		[SerializeField]
		protected List<OnPositionReachedSettings> onPositionReachedList;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnControlPointReached;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnEndReached;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnSwitch;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected readonly SplineSwitcher Switcher;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private CurvySpline prePlaySpline;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly CurvySplineMoveEventArgs preAllocatedEventArgs;

		[Token(Token = "0x4000656")]
		private const string InvalidSegmentErrorMessage = "[Curvy] Controller {0} reached segment {1} which is invalid segment because it has a length of 0. Please fix the invalid segment to avoid issues with the controller";

		[Token(Token = "0x170001D6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C82A0", Offset = "0x10C82A0")]
		protected float SwitchStartTime
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x22A5D5C", Offset = "0x22A5D5C", VA = "0x22A5D5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C82D8", Offset = "0x10C82D8")]
		protected float SwitchDuration
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x22A5D78", Offset = "0x22A5D78", VA = "0x22A5D78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8310", Offset = "0x10C8310")]
		protected CurvySpline SwitchTarget
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x22A5D94", Offset = "0x22A5D94", VA = "0x22A5D94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8348", Offset = "0x10C8348")]
		protected float TfOnSwitchTarget
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x22A5DB0", Offset = "0x22A5DB0", VA = "0x22A5DB0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DA")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8380", Offset = "0x10C8380")]
		protected MovementDirection DirectionOnSwitchTarget
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x22A5DCC", Offset = "0x22A5DCC", VA = "0x22A5DCC")]
			get
			{
				return default(MovementDirection);
			}
		}

		[Token(Token = "0x170001DB")]
		public virtual CurvySpline Spline
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x22A5FB0", Offset = "0x22A5FB0", VA = "0x22A5FB0", Slot = "45")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x22A5FB8", Offset = "0x22A5FB8", VA = "0x22A5FB8", Slot = "46")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public bool UseCache
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x22A5FC0", Offset = "0x22A5FC0", VA = "0x22A5FC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x22A5FC8", Offset = "0x22A5FC8", VA = "0x22A5FC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DD")]
		public SplineControllerConnectionBehavior ConnectionBehavior
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x22A5FE8", Offset = "0x22A5FE8", VA = "0x22A5FE8")]
			get
			{
				return default(SplineControllerConnectionBehavior);
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x22A5FF0", Offset = "0x22A5FF0", VA = "0x22A5FF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public ConnectedControlPointsSelector ConnectionCustomSelector
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x22A5FF8", Offset = "0x22A5FF8", VA = "0x22A5FF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x22A6000", Offset = "0x22A6000", VA = "0x22A6000")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public bool AllowDirectionChange
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x22A6008", Offset = "0x22A6008", VA = "0x22A6008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0x22A6010", Offset = "0x22A6010", VA = "0x22A6010")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public bool RejectCurrentSpline
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x22A601C", Offset = "0x22A601C", VA = "0x22A601C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x22A6024", Offset = "0x22A6024", VA = "0x22A6024")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public bool RejectTooDivergentSplines
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x22A6030", Offset = "0x22A6030", VA = "0x22A6030")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x22A6038", Offset = "0x22A6038", VA = "0x22A6038")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public float MaxAllowedDivergenceAngle
		{
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x22A6044", Offset = "0x22A6044", VA = "0x22A6044")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0x22A604C", Offset = "0x22A604C", VA = "0x22A604C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public List<OnPositionReachedSettings> OnPositionReachedList
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0x22A6054", Offset = "0x22A6054", VA = "0x22A6054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x22A605C", Offset = "0x22A605C", VA = "0x22A605C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public CurvySplineMoveEvent OnControlPointReached
		{
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0x22A6064", Offset = "0x22A6064", VA = "0x22A6064")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x22A606C", Offset = "0x22A606C", VA = "0x22A606C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public CurvySplineMoveEvent OnEndReached
		{
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0x22A6074", Offset = "0x22A6074", VA = "0x22A6074")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x22A607C", Offset = "0x22A607C", VA = "0x22A607C")]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public override float Length
		{
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x22A6084", Offset = "0x22A6084", VA = "0x22A6084", Slot = "35")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E7")]
		public bool IsSwitching
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0x22A60E4", Offset = "0x22A60E4", VA = "0x22A60E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E8")]
		public float SwitchProgress
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x22A6100", Offset = "0x22A6100", VA = "0x22A6100")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E9")]
		public CurvySplineMoveEvent OnSwitch
		{
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x22A611C", Offset = "0x22A611C", VA = "0x22A611C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x22A6124", Offset = "0x22A6124", VA = "0x22A6124")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public override bool IsReady
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0x22A65B4", Offset = "0x22A65B4", VA = "0x22A65B4", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EB")]
		private bool ShowRandomConnectionOptions
		{
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x22A8D04", Offset = "0x22A8D04", VA = "0x22A8D04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x22A5DE8", Offset = "0x22A5DE8", VA = "0x22A5DE8")]
		public SplineController()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x22A612C", Offset = "0x22A612C", VA = "0x22A612C", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x22A62AC", Offset = "0x22A62AC", VA = "0x22A62AC", Slot = "47")]
		public virtual void SwitchTo(CurvySpline destinationSpline, float destinationTf, float duration)
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x22A63F0", Offset = "0x22A63F0", VA = "0x22A63F0")]
		public void FinishCurrentSwitch()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x22A6464", Offset = "0x22A6464", VA = "0x22A6464")]
		public void CancelCurrentSwitch()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x22A648C", Offset = "0x22A648C", VA = "0x22A648C")]
		public static float GetAngleBetweenConnectedSplines(CurvySplineSegment before, MovementDirection movementMode, CurvySplineSegment after, bool allowMovementModeChange)
		{
			return default(float);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x22A660C", Offset = "0x22A660C", VA = "0x22A660C", Slot = "26")]
		protected override void SavePrePlayState()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x22A6654", Offset = "0x22A6654", VA = "0x22A6654", Slot = "27")]
		protected override void RestorePrePlayState()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x22A668C", Offset = "0x22A668C", VA = "0x22A668C", Slot = "28")]
		protected override void ResetPrePlayState()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x22A66BC", Offset = "0x22A66BC", VA = "0x22A66BC", Slot = "39")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x22A6708", Offset = "0x22A6708", VA = "0x22A6708", Slot = "38")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x22A6754", Offset = "0x22A6754", VA = "0x22A6754", Slot = "40")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x22A67FC", Offset = "0x22A67FC", VA = "0x22A67FC", Slot = "41")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x22A6974", Offset = "0x22A6974", VA = "0x22A6974", Slot = "43")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x22A6A1C", Offset = "0x22A6A1C", VA = "0x22A6A1C", Slot = "42")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x22A6A9C", Offset = "0x22A6A9C", VA = "0x22A6A9C", Slot = "36")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x22A754C", Offset = "0x22A754C", VA = "0x22A754C", Slot = "37")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection direction, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x22A75A8", Offset = "0x22A75A8", VA = "0x22A75A8")]
		private static void SimulateAdvanceOnSpline(CurvySpline spline, ref float tf, ref MovementDirection direction, float distance, MoveModeEnum moveModeEnum, CurvyClamping curvyClamping)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x22A76DC", Offset = "0x22A76DC", VA = "0x22A76DC", Slot = "20")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x22A7790", Offset = "0x22A7790", VA = "0x22A7790", Slot = "21")]
		protected override void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x22A7A24", Offset = "0x22A7A24", VA = "0x22A7A24", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x22A7444", Offset = "0x22A7444", VA = "0x22A7444")]
		private void AdvanceSwitching(float distance)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x22A7908", Offset = "0x22A7908", VA = "0x22A7908")]
		private void GetSwitchingPositionAndRotation(Vector3 forwardOnCurrentSpline, Vector3 upOnCurrentSpline, Vector3 positionOnCurrentSpline, out Vector3 interpolatedPosition, out Quaternion interpolatedRotation)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x22A7AA0", Offset = "0x22A7AA0", VA = "0x22A7AA0")]
		private void ComputePositionAndRotationOnSwitchTarget(out Vector3 positionOnSwitchToSpline, out Quaternion rotationOnSwitchToSpline)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x22A7BAC", Offset = "0x22A7BAC", VA = "0x22A7BAC")]
		private static float MovementCompatibleGetPosition(SplineController controller, float clampedPosition, CurvyPositionMode positionMode, out CurvySplineSegment controlPoint, out bool isOnControlPoint)
		{
			return default(float);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x22A7D80", Offset = "0x22A7D80", VA = "0x22A7D80")]
		private static void MovementCompatibleSetPosition(SplineController controller, CurvyPositionMode positionMode, float specialClampedPosition)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x22A6B3C", Offset = "0x22A6B3C", VA = "0x22A6B3C")]
		private void EventAwareMove(float distance)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x22A7ED0", Offset = "0x22A7ED0", VA = "0x22A7ED0")]
		private void HandleOnPositionReachedEvents(CurvyPositionMode positionMode, float startPosition, float endPosition, float endPositionUnclamped, out float postEventsEndPosition, float currentDelta, CurvySplineSegment currentCp, ref bool cancelMovement)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x22A8740", Offset = "0x22A8740", VA = "0x22A8740")]
		private float? HandleOnPositionReachedEvent(CurvyPositionMode positionMode, float startPosition, float endPositionUnclamped, float currentDelta, CurvySplineSegment currentCp, ref bool cancelMovement, OnPositionReachedSettings settings, float? postEventEndPosition)
		{
			return null;
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x22A81F4", Offset = "0x22A81F4", VA = "0x22A81F4")]
		private void HandleReachingNewControlPoint(CurvySplineSegment controlPoint, float controlPointPosition, CurvyPositionMode positionMode, float currentDelta, ref bool cancelMovement, out CurvySplineSegment postEventsControlPoint, out bool postEventsIsControllerOnControlPoint, out float postEventsControlPointPosition)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x22A8B2C", Offset = "0x22A8B2C", VA = "0x22A8B2C")]
		private void InvokeEventHandler(CurvySplineMoveEvent @event, CurvySplineMoveEventArgs eventArgument, CurvyPositionMode positionMode, ref CurvySplineSegment postEventsControlPoint, ref bool postEventsIsControllerOnControlPoint, ref float postEventPosition)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x22A89C8", Offset = "0x22A89C8", VA = "0x22A89C8")]
		private void InvokeEventHandler(CurvySplineMoveEvent @event, CurvySplineMoveEventArgs eventArgument, CurvyPositionMode positionMode, out CurvySplineSegment postEventsControlPoint, out bool? postEventsIsControllerOnControlPoint, out float? postEventPosition)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x22A8508", Offset = "0x22A8508", VA = "0x22A8508")]
		private CurvySplineSegment HandleRandomConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection, ReadOnlyCollection<CurvySplineSegment> connectedControlPoints)
		{
			return null;
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x22A656C", Offset = "0x22A656C", VA = "0x22A656C")]
		private static MovementDirection GetPostConnectionDirection(CurvySplineSegment connectedControlPoint, MovementDirection currentDirection, bool directionChangeAllowed)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x22A8414", Offset = "0x22A8414", VA = "0x22A8414")]
		private CurvySplineSegment HandleFollowUpConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x22A8C88", Offset = "0x22A8C88", VA = "0x22A8C88")]
		private static MovementDirection HeadingToDirection(ConnectionHeadingEnum heading, CurvySplineSegment controlPoint, MovementDirection currentDirection)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x22A7E58", Offset = "0x22A7E58", VA = "0x22A7E58")]
		private static float GetControlPointPosition(CurvySplineSegment controlPoint, CurvyPositionMode positionMode)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200018E")]
	public enum SplineControllerConnectionBehavior
	{
		[Token(Token = "0x400065E")]
		CurrentSpline,
		[Token(Token = "0x400065F")]
		FollowUpSpline,
		[Token(Token = "0x4000660")]
		RandomSpline,
		[Token(Token = "0x4000661")]
		FollowUpOtherwiseRandom,
		[Token(Token = "0x4000662")]
		Custom
	}
	[Token(Token = "0x200018F")]
	public enum TargetComponent
	{
		[Token(Token = "0x4000664")]
		Transform,
		[Token(Token = "0x4000665")]
		KinematicRigidbody,
		[Token(Token = "0x4000666")]
		KinematicRigidbody2D
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3D5C", Offset = "0x10A3D5C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3D5C", Offset = "0x10A3D5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3D5C", Offset = "0x10A3D5C")]
	public class UITextSplineController : SplineController, IMeshModifier
	{
		[Token(Token = "0x2000191")]
		protected class GlyphPlain : IGlyph
		{
			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] V;

			[Token(Token = "0x400066C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x170001FA")]
			public Vector3 Center
			{
				[Token(Token = "0x6000BBE")]
				[Address(RVA = "0x1DE4158", Offset = "0x1DE4158", VA = "0x1DE4158", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0x1DE4178", Offset = "0x1DE4178", VA = "0x1DE4178")]
			public void Load(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x1DE42B0", Offset = "0x1DE42B0", VA = "0x1DE42B0")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x1DE4324", Offset = "0x1DE4324", VA = "0x1DE4324")]
			public void Save(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x1DE445C", Offset = "0x1DE445C", VA = "0x1DE445C", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0x1DE44CC", Offset = "0x1DE44CC", VA = "0x1DE44CC", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0x1DE45D0", Offset = "0x1DE45D0", VA = "0x1DE45D0")]
			public GlyphPlain()
			{
			}
		}

		[Token(Token = "0x2000192")]
		protected class GlyphQuad : IGlyph
		{
			[Token(Token = "0x400066D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UIVertex[] V;

			[Token(Token = "0x400066E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x170001FB")]
			public Vector3 Center
			{
				[Token(Token = "0x6000BC5")]
				[Address(RVA = "0x1DE4638", Offset = "0x1DE4638", VA = "0x1DE4638", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x1DE4658", Offset = "0x1DE4658", VA = "0x1DE4658")]
			public void Load(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x1DE48E4", Offset = "0x1DE48E4", VA = "0x1DE48E4")]
			public void LoadTris(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0x1DE4870", Offset = "0x1DE4870", VA = "0x1DE4870")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x1DE4AFC", Offset = "0x1DE4AFC", VA = "0x1DE4AFC")]
			public void Save(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0x1DE4CB4", Offset = "0x1DE4CB4", VA = "0x1DE4CB4")]
			public void Save(VertexHelper vh)
			{
			}

			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0x1DE4CD8", Offset = "0x1DE4CD8", VA = "0x1DE4CD8", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0x1DE4D48", Offset = "0x1DE4D48", VA = "0x1DE4D48", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0x1DE4E4C", Offset = "0x1DE4E4C", VA = "0x1DE4E4C")]
			public GlyphQuad()
			{
			}
		}

		[Token(Token = "0x2000193")]
		protected interface IGlyph
		{
			[Token(Token = "0x170001FC")]
			Vector3 Center
			{
				[Token(Token = "0x6000BCE")]
				get;
			}

			[Token(Token = "0x6000BCF")]
			void Transpose(Vector3 v);

			[Token(Token = "0x6000BD0")]
			void Rotate(Quaternion rotation);
		}

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B30D0", Offset = "0x10B30D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B30D0", Offset = "0x10B30D0")]
		[SerializeField]
		private bool staticOrientation;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Graphic m_Graphic;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RectTransform rectTransform;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Text text;

		[Token(Token = "0x170001F3")]
		public bool StaticOrientation
		{
			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0x2EB4328", Offset = "0x2EB4328", VA = "0x2EB4328")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x2EB4330", Offset = "0x2EB4330", VA = "0x2EB4330")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		protected override bool ShowOrientationSection
		{
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0x2EB433C", Offset = "0x2EB433C", VA = "0x2EB433C", Slot = "33")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F5")]
		protected override bool ShowOffsetSection
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x2EB4344", Offset = "0x2EB4344", VA = "0x2EB4344", Slot = "34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F6")]
		protected Text Text
		{
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x2EB434C", Offset = "0x2EB434C", VA = "0x2EB434C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F7")]
		protected RectTransform Rect
		{
			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0x2EB4400", Offset = "0x2EB4400", VA = "0x2EB4400")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		protected Graphic graphic
		{
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0x2EB44B4", Offset = "0x2EB44B4", VA = "0x2EB44B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		public override CurvySpline Spline
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0x2EB5324", Offset = "0x2EB5324", VA = "0x2EB5324", Slot = "45")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x2EB532C", Offset = "0x2EB532C", VA = "0x2EB532C", Slot = "46")]
			set
			{
			}
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x2EB4568", Offset = "0x2EB4568", VA = "0x2EB4568", Slot = "20")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x2EB45A8", Offset = "0x2EB45A8", VA = "0x2EB45A8", Slot = "48")]
		public void ModifyMesh(Mesh verts)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x2EB4CD4", Offset = "0x2EB4CD4", VA = "0x2EB4CD4", Slot = "49")]
		public void ModifyMesh(VertexHelper vertexHelper)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x2EB4778", Offset = "0x2EB4778", VA = "0x2EB4778")]
		private void UpdateGlyph(IGlyph glyph)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x2EB4E68", Offset = "0x2EB4E68", VA = "0x2EB4E68", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x2EB5068", Offset = "0x2EB5068", VA = "0x2EB5068", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x2EB5260", Offset = "0x2EB5260", VA = "0x2EB5260", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x2EB53E4", Offset = "0x2EB53E4", VA = "0x2EB53E4", Slot = "24")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x2EB540C", Offset = "0x2EB540C", VA = "0x2EB540C", Slot = "25")]
		protected override void UnbindEvents()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x2EB4F24", Offset = "0x2EB4F24", VA = "0x2EB4F24")]
		private void BindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x2EB5124", Offset = "0x2EB5124", VA = "0x2EB5124")]
		private void UnbindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x2EB5434", Offset = "0x2EB5434", VA = "0x2EB5434")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x2EB55D0", Offset = "0x2EB55D0", VA = "0x2EB55D0")]
		public UITextSplineController()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A3E04", Offset = "0x10A3E04")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3E04", Offset = "0x10A3E04")]
	public class VolumeController : CurvyController
	{
		[Token(Token = "0x400066F")]
		private const float CrossPositionRangeMin = -0.5f;

		[Token(Token = "0x4000670")]
		private const float CrossPositionRangeMax = 0.5f;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0x10B314C", Offset = "0x10B314C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B314C", Offset = "0x10B314C")]
		[SerializeField]
		private CGDataReference m_Volume;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B3208", Offset = "0x10B3208")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B32D0", Offset = "0x10B32D0")]
		[SerializeField]
		private float crossRelativePosition;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private CurvyClamping m_CrossClamping;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3378", Offset = "0x10B3378")]
		private float m_CrossInitialPosition;

		[Token(Token = "0x170001FD")]
		public CGDataReference Volume
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0x2EC3798", Offset = "0x2EC3798", VA = "0x2EC3798")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0x2EC37A0", Offset = "0x2EC37A0", VA = "0x2EC37A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		[CanBeNull]
		public CGVolume VolumeData
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0x2EC37A8", Offset = "0x2EC37A8", VA = "0x2EC37A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		public float CrossFrom
		{
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0x2EC381C", Offset = "0x2EC381C", VA = "0x2EC381C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0x2EC3824", Offset = "0x2EC3824", VA = "0x2EC3824")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public float CrossTo
		{
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x2EC3854", Offset = "0x2EC3854", VA = "0x2EC3854")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x2EC385C", Offset = "0x2EC385C", VA = "0x2EC385C")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public float CrossLength
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x2EC388C", Offset = "0x2EC388C", VA = "0x2EC388C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public CurvyClamping CrossClamping
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x2EC3898", Offset = "0x2EC3898", VA = "0x2EC3898")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x2EC38A0", Offset = "0x2EC38A0", VA = "0x2EC38A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public float CrossRelativePosition
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x2EC38A8", Offset = "0x2EC38A8", VA = "0x2EC38A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x2EC38D4", Offset = "0x2EC38D4", VA = "0x2EC38D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public override float Length
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x2EC3904", Offset = "0x2EC3904", VA = "0x2EC3904", Slot = "35")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000205")]
		public override bool IsReady
		{
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x2EC3A2C", Offset = "0x2EC3A2C", VA = "0x2EC3A2C", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000206")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x2EC3F80", Offset = "0x2EC3F80", VA = "0x2EC3F80")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x17000207")]
		private float MinCrossRelativePosition
		{
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x2EC3FF0", Offset = "0x2EC3FF0", VA = "0x2EC3FF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000208")]
		private float MaxCrossRelativePosition
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x2EC3FF8", Offset = "0x2EC3FF8", VA = "0x2EC3FF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x2EC3944", Offset = "0x2EC3944", VA = "0x2EC3944")]
		public float CrossRelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x2EC39B8", Offset = "0x2EC39B8", VA = "0x2EC39B8")]
		public float CrossAbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x2EC3A7C", Offset = "0x2EC3A7C", VA = "0x2EC3A7C", Slot = "39")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x2EC3AD8", Offset = "0x2EC3AD8", VA = "0x2EC3AD8", Slot = "38")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x2EC3B34", Offset = "0x2EC3B34", VA = "0x2EC3B34", Slot = "40")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x2EC3BD0", Offset = "0x2EC3BD0", VA = "0x2EC3BD0", Slot = "41")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x2EC3CD8", Offset = "0x2EC3CD8", VA = "0x2EC3CD8", Slot = "43")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x2EC3D74", Offset = "0x2EC3D74", VA = "0x2EC3D74", Slot = "42")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x2EC3E10", Offset = "0x2EC3E10", VA = "0x2EC3E10", Slot = "36")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x2EC3E8C", Offset = "0x2EC3E8C", VA = "0x2EC3E8C", Slot = "37")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection direction, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x2EC38C0", Offset = "0x2EC38C0", VA = "0x2EC38C0")]
		private float GetClampedCrossPosition(float position)
		{
			return default(float);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x2EC4000", Offset = "0x2EC4000", VA = "0x2EC4000", Slot = "44")]
		public override void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x2EC4058", Offset = "0x2EC4058", VA = "0x2EC4058")]
		public VolumeController()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Generator
{
	[Token(Token = "0x2000195")]
	public abstract class SplineInputModuleBase : CGModule
	{
		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B33D4", Offset = "0x10B33D4")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B33D4", Offset = "0x10B33D4")]
		[SerializeField]
		private bool m_UseCache;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B3444", Offset = "0x10B3444")]
		private bool m_UseGlobalSpace;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B3490", Offset = "0x10B3490")]
		protected CurvySplineSegment m_StartCP;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B34DC", Offset = "0x10B34DC")]
		[SerializeField]
		protected CurvySplineSegment m_EndCP;

		[Token(Token = "0x17000209")]
		public bool UseCache
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x2DB1728", Offset = "0x2DB1728", VA = "0x2DB1728")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x2DB1730", Offset = "0x2DB1730", VA = "0x2DB1730")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public CurvySplineSegment StartCP
		{
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0x2DB175C", Offset = "0x2DB175C", VA = "0x2DB175C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0x2DB1764", Offset = "0x2DB1764", VA = "0x2DB1764")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public CurvySplineSegment EndCP
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0x2DB1D08", Offset = "0x2DB1D08", VA = "0x2DB1D08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BF4")]
			[Address(RVA = "0x2DB1D10", Offset = "0x2DB1D10", VA = "0x2DB1D10")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public bool UseGlobalSpace
		{
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0x2DB1DC8", Offset = "0x2DB1DC8", VA = "0x2DB1DC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BF6")]
			[Address(RVA = "0x2DB1DD0", Offset = "0x2DB1DD0", VA = "0x2DB1DD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0x2DB1DFC", Offset = "0x2DB1DFC", VA = "0x2DB1DFC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020E")]
		public override bool IsInitialized
		{
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0x2DB1EA0", Offset = "0x2DB1EA0", VA = "0x2DB1EA0", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020F")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x2DB1F6C", Offset = "0x2DB1F6C", VA = "0x2DB1F6C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000210")]
		protected abstract CurvySpline InputSpline
		{
			[Token(Token = "0x6000C0C")]
			get;
			[Token(Token = "0x6000C0D")]
			set;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x2DB2088", Offset = "0x2DB2088", VA = "0x2DB2088")]
		public void SetRange(CurvySplineSegment rangeStart, CurvySplineSegment rangeEnd)
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x2DB2194", Offset = "0x2DB2194", VA = "0x2DB2194")]
		public void ClearRange()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x2DB21A0", Offset = "0x2DB21A0", VA = "0x2DB21A0", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x2DB21E8", Offset = "0x2DB21E8", VA = "0x2DB21E8", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x2DB23F4", Offset = "0x2DB23F4", VA = "0x2DB23F4", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x2DB2444", Offset = "0x2DB2444", VA = "0x2DB2444", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x2DB24D8", Offset = "0x2DB24D8", VA = "0x2DB24D8")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x2DB2640", Offset = "0x2DB2640", VA = "0x2DB2640")]
		private void OnInputSplineCoordinatesChanged(CurvySpline sender)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x2DB2634", Offset = "0x2DB2634", VA = "0x2DB2634")]
		private void ForceRefresh()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x2DB1FC4", Offset = "0x2DB1FC4", VA = "0x2DB1FC4")]
		private bool getPathClosed(CurvySpline spline)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x2DB27DC", Offset = "0x2DB27DC", VA = "0x2DB27DC")]
		[CanBeNull]
		protected CGData GetSplineData(CurvySpline spline, bool fullPath, CGDataRequestRasterization raster, CGDataRequestMetaCGOptions options)
		{
			return null;
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x2DB3F70", Offset = "0x2DB3F70", VA = "0x2DB3F70")]
		private static void ProcessControlPointOptions(ControlPointOption options, int positionsCount, List<SamplePointsMaterialGroup> shapeMaterialGroups, List<SamplePointUData> extendedUVData, List<DuplicateSamplePoint> duplicatePoints, ref SamplePointsMaterialGroup currentMaterialGroup, ref SamplePointsPatch currentPatch, out float currentDistance, out bool duplicatePoint)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x2DB4218", Offset = "0x2DB4218", VA = "0x2DB4218")]
		private static void FillData(CGShape dataToFill, SamplePointsMaterialGroup materialGroup, SubArrayList<float> sourceFs, SubArrayList<float> relativeFs, bool isFullPath, SubArrayList<Vector3> positions, SubArrayList<Vector3> tangents, SubArrayList<Vector3> normals, bool considerSplineTransform, Transform splineTransform, Transform generatorTransform)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x2DB3DD4", Offset = "0x2DB3DD4", VA = "0x2DB3DD4")]
		private static void AddPoint(float sourceF, float relativeF, bool isFullPath, Vector3 position, Vector3 tangent, Vector3 up, ref SubArrayList<float> sourceFList, ref SubArrayList<float> relativeFList, ref SubArrayList<Vector3> positionList, ref SubArrayList<Vector3> tangentList, ref SubArrayList<Vector3> upList)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x2DB45DC", Offset = "0x2DB45DC", VA = "0x2DB45DC")]
		private static bool MoveByAngleExt(CurvySpline spline, bool useCache, ref float tf, float maxDistance, float maxAngle, out Vector3 pos, out Vector3 tan, float stopTF, bool loop, float stepDist)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x2DB47EC", Offset = "0x2DB47EC", VA = "0x2DB47EC")]
		private static void CalculateExtendedUV(CurvySpline spline, float startTF, float endTF, List<SamplePointUData> ext, CGShape data)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x2DB50A0", Offset = "0x2DB50A0", VA = "0x2DB50A0")]
		private static MetaCGOptions findPreviousReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x2DB5210", Offset = "0x2DB5210", VA = "0x2DB5210")]
		private static MetaCGOptions findNextReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x2DB53B0", Offset = "0x2DB53B0", VA = "0x2DB53B0", Slot = "21")]
		protected virtual void OnSplineAssigned()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x2DB181C", Offset = "0x2DB181C", VA = "0x2DB181C")]
		protected void ValidateStartAndEndCps()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x2DB5630", Offset = "0x2DB5630", VA = "0x2DB5630")]
		protected SplineInputModuleBase()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public abstract class TRSModuleBase : CGModule
	{
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B3544", Offset = "0x10B3544")]
		private Vector3 m_Transpose;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B35AC", Offset = "0x10B35AC")]
		private Vector3 m_Rotation;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B3614", Offset = "0x10B3614")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000211")]
		public Vector3 Transpose
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0x2DB84C4", Offset = "0x2DB84C4", VA = "0x2DB84C4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0x2DB84D0", Offset = "0x2DB84D0", VA = "0x2DB84D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000212")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x2DB8554", Offset = "0x2DB8554", VA = "0x2DB8554")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x2DB8560", Offset = "0x2DB8560", VA = "0x2DB8560")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x2DB85E4", Offset = "0x2DB85E4", VA = "0x2DB85E4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x2DB85F0", Offset = "0x2DB85F0", VA = "0x2DB85F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x2DB8674", Offset = "0x2DB8674", VA = "0x2DB8674")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x2DB8718", Offset = "0x2DB8718", VA = "0x2DB8718")]
		protected Matrix4x4 ApplyTrsOnShape([NotNull] CGShape shape)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x2DB892C", Offset = "0x2DB892C", VA = "0x2DB892C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x2DB8974", Offset = "0x2DB8974", VA = "0x2DB8974", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x2DB89C4", Offset = "0x2DB89C4", VA = "0x2DB89C4")]
		protected TRSModuleBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000197")]
	public class CGBoundsGroup : CGWeightedItem
	{
		[Token(Token = "0x2000198")]
		public enum RotationModeEnum
		{
			[Token(Token = "0x4000699")]
			Full,
			[Token(Token = "0x400069A")]
			Direction,
			[Token(Token = "0x400069B")]
			Horizontal,
			[Token(Token = "0x400069C")]
			Independent
		}

		[Token(Token = "0x2000199")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A3E64", Offset = "0x10A3E64")]
		private enum DistributionModeEnum
		{
			[Token(Token = "0x400069E")]
			Parent,
			[Token(Token = "0x400069F")]
			Self
		}

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_Name;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B368C", Offset = "0x10B368C")]
		private bool m_KeepTogether;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_SpaceBefore;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_SpaceAfter;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_CrossBase;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B37E0", Offset = "0x10B37E0")]
		[SerializeField]
		private bool m_IgnoreModuleCrossBase;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B382C", Offset = "0x10B382C")]
		[SerializeField]
		private bool m_RandomizeItems;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B3878", Offset = "0x10B3878")]
		[SerializeField]
		[IntRegion]
		private IntRegion m_RepeatingItems;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B3904", Offset = "0x10B3904")]
		private bool m_RelativeTranslation;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_TranslationX;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_TranslationY;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_TranslationZ;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B3A30", Offset = "0x10B3A30")]
		[SerializeField]
		private RotationModeEnum m_RotationMode;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_RotationX;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_RotationY;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_RotationZ;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B3B5C", Offset = "0x10B3B5C")]
		[SerializeField]
		private bool m_UniformScaling;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_ScaleX;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_ScaleY;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_ScaleZ;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private List<CGBoundsGroupItem> m_Items;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3C94", Offset = "0x10B3C94")]
		private DistributionModeEnum m_DistributionMode;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3CF0", Offset = "0x10B3CF0")]
		[HideInInspector]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_PositionOffset;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3D94", Offset = "0x10B3D94")]
		[FloatRegion]
		private FloatRegion m_Height;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3E14", Offset = "0x10B3E14")]
		[HideInInspector]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3E70", Offset = "0x10B3E70")]
		[HideInInspector]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B3E70", Offset = "0x10B3E70")]
		private Vector3 m_RotationOffset;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B3F0C", Offset = "0x10B3F0C")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B3F0C", Offset = "0x10B3F0C")]
		private Vector3 m_RotationScatter;

		[Token(Token = "0x17000215")]
		public string Name
		{
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x28B857C", Offset = "0x28B857C", VA = "0x28B857C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0x28B8584", Offset = "0x28B8584", VA = "0x28B8584")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public bool KeepTogether
		{
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0x28B85CC", Offset = "0x28B85CC", VA = "0x28B85CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0x28B85D4", Offset = "0x28B85D4", VA = "0x28B85D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public FloatRegion SpaceBefore
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0x28B85F4", Offset = "0x28B85F4", VA = "0x28B85F4")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x28B8604", Offset = "0x28B8604", VA = "0x28B8604")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public FloatRegion SpaceAfter
		{
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0x28B8654", Offset = "0x28B8654", VA = "0x28B8654")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0x28B8664", Offset = "0x28B8664", VA = "0x28B8664")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public bool RandomizeItems
		{
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0x28B86B4", Offset = "0x28B86B4", VA = "0x28B86B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0x28B86BC", Offset = "0x28B86BC", VA = "0x28B86BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public IntRegion RepeatingItems
		{
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0x28B86DC", Offset = "0x28B86DC", VA = "0x28B86DC")]
			get
			{
				return default(IntRegion);
			}
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0x28B86EC", Offset = "0x28B86EC", VA = "0x28B86EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public FloatRegion CrossBase
		{
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0x28B873C", Offset = "0x28B873C", VA = "0x28B873C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x28B874C", Offset = "0x28B874C", VA = "0x28B874C")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public bool IgnoreModuleCrossBase
		{
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x28B879C", Offset = "0x28B879C", VA = "0x28B879C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x28B87A4", Offset = "0x28B87A4", VA = "0x28B87A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public RotationModeEnum RotationMode
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x28B87C4", Offset = "0x28B87C4", VA = "0x28B87C4")]
			get
			{
				return default(RotationModeEnum);
			}
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x28B87CC", Offset = "0x28B87CC", VA = "0x28B87CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public FloatRegion RotationX
		{
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0x28B87E0", Offset = "0x28B87E0", VA = "0x28B87E0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x28B87F0", Offset = "0x28B87F0", VA = "0x28B87F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public FloatRegion RotationY
		{
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x28B8840", Offset = "0x28B8840", VA = "0x28B8840")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x28B8850", Offset = "0x28B8850", VA = "0x28B8850")]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public FloatRegion RotationZ
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x28B88A0", Offset = "0x28B88A0", VA = "0x28B88A0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x28B88B0", Offset = "0x28B88B0", VA = "0x28B88B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public bool UniformScaling
		{
			[Token(Token = "0x6000C34")]
			[Address(RVA = "0x28B8900", Offset = "0x28B8900", VA = "0x28B8900")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x28B8908", Offset = "0x28B8908", VA = "0x28B8908")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public FloatRegion ScaleX
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x28B8928", Offset = "0x28B8928", VA = "0x28B8928")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x28B8938", Offset = "0x28B8938", VA = "0x28B8938")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public FloatRegion ScaleY
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x28B8988", Offset = "0x28B8988", VA = "0x28B8988")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x28B8998", Offset = "0x28B8998", VA = "0x28B8998")]
			set
			{
			}
		}

		[Token(Token = "0x17000224")]
		public FloatRegion ScaleZ
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x28B89E8", Offset = "0x28B89E8", VA = "0x28B89E8")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x28B89F8", Offset = "0x28B89F8", VA = "0x28B89F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000225")]
		public bool RelativeTranslation
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x28B8A48", Offset = "0x28B8A48", VA = "0x28B8A48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x28B8A50", Offset = "0x28B8A50", VA = "0x28B8A50")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public FloatRegion TranslationX
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x28B8A70", Offset = "0x28B8A70", VA = "0x28B8A70")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x28B8A80", Offset = "0x28B8A80", VA = "0x28B8A80")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public FloatRegion TranslationY
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x28B8AD0", Offset = "0x28B8AD0", VA = "0x28B8AD0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x28B8AE0", Offset = "0x28B8AE0", VA = "0x28B8AE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public FloatRegion TranslationZ
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x28B8B30", Offset = "0x28B8B30", VA = "0x28B8B30")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x28B8B40", Offset = "0x28B8B40", VA = "0x28B8B40")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public List<CGBoundsGroupItem> Items
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x28B8B90", Offset = "0x28B8B90", VA = "0x28B8B90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022A")]
		public int FirstRepeating
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x28B8B98", Offset = "0x28B8B98", VA = "0x28B8B98")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x28B8BA0", Offset = "0x28B8BA0", VA = "0x28B8BA0")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public int LastRepeating
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x28B8C44", Offset = "0x28B8C44", VA = "0x28B8C44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x28B8C4C", Offset = "0x28B8C4C", VA = "0x28B8C4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public int ItemCount
		{
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x28B8BF8", Offset = "0x28B8BF8", VA = "0x28B8BF8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022D")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x28B90B0", Offset = "0x28B90B0", VA = "0x28B90B0")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x1700022E")]
		private RegionOptions<float> PositionRangeOptions
		{
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x28B9144", Offset = "0x28B9144", VA = "0x28B9144")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x28B8CB0", Offset = "0x28B8CB0", VA = "0x28B8CB0")]
		public CGBoundsGroup(string name)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x28B8F60", Offset = "0x28B8F60", VA = "0x28B8F60")]
		public static void FillItemBag(WeightedRandom<int> bag, IEnumerable<CGWeightedItem> itemsWeights, int firstItem, int lastItem)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x28B91B4", Offset = "0x28B91B4", VA = "0x28B91B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3390", Offset = "0x10C3390")]
		public void ConvertObsoleteData()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public enum CGYesNoAuto
	{
		[Token(Token = "0x40006A1")]
		Yes,
		[Token(Token = "0x40006A2")]
		No,
		[Token(Token = "0x40006A3")]
		Auto
	}
	[Token(Token = "0x200019B")]
	public enum CGReferenceMode
	{
		[Token(Token = "0x40006A5")]
		Source,
		[Token(Token = "0x40006A6")]
		Self
	}
	[Token(Token = "0x200019C")]
	public enum CGKeepAspectMode
	{
		[Token(Token = "0x40006A8")]
		Off,
		[Token(Token = "0x40006A9")]
		ScaleU,
		[Token(Token = "0x40006AA")]
		ScaleV
	}
	[Token(Token = "0x200019D")]
	public enum CGColliderEnum
	{
		[Token(Token = "0x40006AC")]
		None,
		[Token(Token = "0x40006AD")]
		Mesh,
		[Token(Token = "0x40006AE")]
		Box,
		[Token(Token = "0x40006AF")]
		Sphere,
		[Token(Token = "0x40006B0")]
		Capsule
	}
	[Serializable]
	[Token(Token = "0x200019E")]
	public struct CGSpot : IEquatable<CGSpot>
	{
		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B3FA8", Offset = "0x10B3FA8")]
		[SerializeField]
		private int m_Index;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B4010", Offset = "0x10B4010")]
		private Vector3 m_Position;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B4080", Offset = "0x10B4080")]
		[SerializeField]
		private Quaternion m_Rotation;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B40F4", Offset = "0x10B40F4")]
		[SerializeField]
		private Vector3 m_Scale;

		[Token(Token = "0x1700022F")]
		public int Index
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x28C895C", Offset = "0x28C895C", VA = "0x28C895C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000230")]
		public Vector3 Position
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x28C8964", Offset = "0x28C8964", VA = "0x28C8964")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x28C8970", Offset = "0x28C8970", VA = "0x28C8970")]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0x28C89D4", Offset = "0x28C89D4", VA = "0x28C89D4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0x28C89E0", Offset = "0x28C89E0", VA = "0x28C89E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0x28C8A4C", Offset = "0x28C8A4C", VA = "0x28C8A4C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0x28C8A58", Offset = "0x28C8A58", VA = "0x28C8A58")]
			set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0x28C8ABC", Offset = "0x28C8ABC", VA = "0x28C8ABC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x28C8B1C", Offset = "0x28C8B1C", VA = "0x28C8B1C")]
		public CGSpot(int index)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x28C8BA8", Offset = "0x28C8BA8", VA = "0x28C8BA8")]
		public CGSpot(int index, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x28C8BD0", Offset = "0x28C8BD0", VA = "0x28C8BD0")]
		public void ToTransform(Transform transform)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x28C8C30", Offset = "0x28C8C30", VA = "0x28C8C30", Slot = "4")]
		public bool Equals(CGSpot other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x28C8CB0", Offset = "0x28C8CB0", VA = "0x28C8CB0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x28C8D4C", Offset = "0x28C8D4C", VA = "0x28C8D4C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x28C8DC0", Offset = "0x28C8DC0", VA = "0x28C8DC0")]
		public static bool operator ==(CGSpot left, CGSpot right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x28C8DF4", Offset = "0x28C8DF4", VA = "0x28C8DF4")]
		public static bool operator !=(CGSpot left, CGSpot right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200019F")]
	public class CGSpotComparer : IComparer
	{
		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x28C8E2C", Offset = "0x28C8E2C", VA = "0x28C8E2C", Slot = "4")]
		public int Compare(object x, object y)
		{
			return default(int);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x28C8EE8", Offset = "0x28C8EE8", VA = "0x28C8EE8")]
		public CGSpotComparer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A0")]
	public class CGMaterialSettings
	{
		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool SwapUV;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B4168", Offset = "0x10B4168")]
		public CGKeepAspectMode KeepAspect;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UVRotation;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVOffset;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVScale;

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x28BBEC8", Offset = "0x28BBEC8", VA = "0x28BBEC8")]
		public CGMaterialSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A1")]
	public class CGMaterialSettingsEx : CGMaterialSettings
	{
		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B41A0", Offset = "0x10B41A0")]
		public int MaterialID;

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x28BBF04", Offset = "0x28BBF04", VA = "0x28BBF04")]
		public CGMaterialSettingsEx()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A2")]
	public class CGMeshProperties
	{
		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Mesh m_Mesh;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material[] m_Material;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B41F8", Offset = "0x10B41F8")]
		private Vector3 m_Translation;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B4260", Offset = "0x10B4260")]
		private Vector3 m_Rotation;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B42C8", Offset = "0x10B42C8")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000234")]
		public Mesh Mesh
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0x28BBF08", Offset = "0x28BBF08", VA = "0x28BBF08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x28BBF10", Offset = "0x28BBF10", VA = "0x28BBF10")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public Material[] Material
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0x28BC044", Offset = "0x28BC044", VA = "0x28BC044")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x28BC04C", Offset = "0x28BC04C", VA = "0x28BC04C")]
			set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public Vector3 Translation
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0x28BC064", Offset = "0x28BC064", VA = "0x28BC064")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x28BC070", Offset = "0x28BC070", VA = "0x28BC070")]
			set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x28BC0D4", Offset = "0x28BC0D4", VA = "0x28BC0D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x28BC0E0", Offset = "0x28BC0E0", VA = "0x28BC0E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x28BC144", Offset = "0x28BC144", VA = "0x28BC144")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x28BC150", Offset = "0x28BC150", VA = "0x28BC150")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x28BC1B4", Offset = "0x28BC1B4", VA = "0x28BC1B4")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x28BC258", Offset = "0x28BC258", VA = "0x28BC258")]
		public CGMeshProperties()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x28BC2D0", Offset = "0x28BC2D0", VA = "0x28BC2D0")]
		public CGMeshProperties(Mesh mesh)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x28BC3F8", Offset = "0x28BC3F8", VA = "0x28BC3F8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C33C8", Offset = "0x10C33C8")]
		public void OnValidate()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class CGGameObjectProperties
	{
		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[CanBeNull]
		private GameObject m_Object;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B4368", Offset = "0x10B4368")]
		private Vector3 m_Translation;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B43D0", Offset = "0x10B43D0")]
		[SerializeField]
		private Vector3 m_Rotation;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B4438", Offset = "0x10B4438")]
		[SerializeField]
		private Vector3 m_Scale;

		[Token(Token = "0x1700023A")]
		[CanBeNull]
		public GameObject Object
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0x28BB578", Offset = "0x28BB578", VA = "0x28BB578")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0x28BB580", Offset = "0x28BB580", VA = "0x28BB580")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public Vector3 Translation
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x28BB61C", Offset = "0x28BB61C", VA = "0x28BB61C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x28BB628", Offset = "0x28BB628", VA = "0x28BB628")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0x28BB68C", Offset = "0x28BB68C", VA = "0x28BB68C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x28BB698", Offset = "0x28BB698", VA = "0x28BB698")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x28BB6FC", Offset = "0x28BB6FC", VA = "0x28BB6FC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x28BB708", Offset = "0x28BB708", VA = "0x28BB708")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0x28BB76C", Offset = "0x28BB76C", VA = "0x28BB76C")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x28BB810", Offset = "0x28BB810", VA = "0x28BB810")]
		public CGGameObjectProperties()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x28BB844", Offset = "0x28BB844", VA = "0x28BB844")]
		public CGGameObjectProperties(GameObject gameObject)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A4")]
	public class CGWeightedItem
	{
		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B44A0", Offset = "0x10B44A0")]
		[SerializeField]
		private float m_Weight;

		[Token(Token = "0x1700023F")]
		public float Weight
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x253F3BC", Offset = "0x253F3BC", VA = "0x253F3BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x253F3C4", Offset = "0x253F3C4", VA = "0x253F3C4")]
			set
			{
			}
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x253F3F8", Offset = "0x253F3F8", VA = "0x253F3F8")]
		public CGWeightedItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A5")]
	public class CGBoundsGroupItem : CGWeightedItem
	{
		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Index;

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x28B9388", Offset = "0x28B9388", VA = "0x28B9388")]
		public CGBoundsGroupItem()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public struct ControlPointOption : IEquatable<ControlPointOption>
	{
		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float TF;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Include;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int MaterialID;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool HardEdge;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MaxStepDistance;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UVEdge;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UVShift;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FirstU;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float SecondU;

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x2544940", Offset = "0x2544940", VA = "0x2544940")]
		public ControlPointOption(float tf, float dist, bool includeAnyways, int materialID, bool hardEdge, float maxStepDistance, bool uvEdge, bool uvShift, float firstU, float secondU)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x2544984", Offset = "0x2544984", VA = "0x2544984", Slot = "4")]
		public bool Equals(ControlPointOption other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x2544A9C", Offset = "0x2544A9C", VA = "0x2544A9C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x2544B38", Offset = "0x2544B38", VA = "0x2544B38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x2544C4C", Offset = "0x2544C4C", VA = "0x2544C4C")]
		public static bool operator ==(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x2544C80", Offset = "0x2544C80", VA = "0x2544C80")]
		public static bool operator !=(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A7")]
	public struct SamplePointsPatch : IEquatable<SamplePointsPatch>
	{
		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Start;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x17000240")]
		public int End
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0x22980B8", Offset = "0x22980B8", VA = "0x22980B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x22987C0", Offset = "0x22987C0", VA = "0x22987C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public int TriangleCount
		{
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0x2297FD4", Offset = "0x2297FD4", VA = "0x2297FD4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x22987F4", Offset = "0x22987F4", VA = "0x22987F4")]
		public SamplePointsPatch(int start)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x22987FC", Offset = "0x22987FC", VA = "0x22987FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x2298A34", Offset = "0x2298A34", VA = "0x2298A34", Slot = "4")]
		public bool Equals(SamplePointsPatch other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x2298A5C", Offset = "0x2298A5C", VA = "0x2298A5C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x2298AF0", Offset = "0x2298AF0", VA = "0x2298AF0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x2298B04", Offset = "0x2298B04", VA = "0x2298B04")]
		public static bool operator ==(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x2298B24", Offset = "0x2298B24", VA = "0x2298B24")]
		public static bool operator !=(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001A8")]
	public class SamplePointsMaterialGroup
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MaterialID;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SamplePointsPatch> Patches;

		[Token(Token = "0x17000242")]
		public int TriangleCount
		{
			[Token(Token = "0x6000C90")]
			[Address(RVA = "0x2297F20", Offset = "0x2297F20", VA = "0x2297F20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000243")]
		public int StartVertex
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x2297FE0", Offset = "0x2297FE0", VA = "0x2297FE0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000244")]
		public int EndVertex
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x2298040", Offset = "0x2298040", VA = "0x2298040")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000245")]
		public int VertexCount
		{
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0x22980C4", Offset = "0x22980C4", VA = "0x22980C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x22980F8", Offset = "0x22980F8", VA = "0x22980F8")]
		public SamplePointsMaterialGroup(int materialID)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x229818C", Offset = "0x229818C", VA = "0x229818C")]
		public SamplePointsMaterialGroup(int materialID, List<SamplePointsPatch> patches)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x22981D0", Offset = "0x22981D0", VA = "0x22981D0")]
		public void GetLengths(CGVolume volume, out float worldLength, out float uLength)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x229832C", Offset = "0x229832C", VA = "0x229832C")]
		public SamplePointsMaterialGroup Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A9")]
	public readonly struct DuplicateSamplePoint : IEquatable<DuplicateSamplePoint>
	{
		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B451C", Offset = "0x10B451C")]
		private readonly int <StartIndex>k__BackingField;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B452C", Offset = "0x10B452C")]
		private readonly int <EndIndex>k__BackingField;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B453C", Offset = "0x10B453C")]
		private readonly bool <IsHardEdge>k__BackingField;

		[Token(Token = "0x17000246")]
		public int StartIndex
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0x1FF70FC", Offset = "0x1FF70FC", VA = "0x1FF70FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3400", Offset = "0x10C3400")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000247")]
		public int EndIndex
		{
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0x1FF7104", Offset = "0x1FF7104", VA = "0x1FF7104")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3410", Offset = "0x10C3410")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000248")]
		public bool IsHardEdge
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0x1FF710C", Offset = "0x1FF710C", VA = "0x1FF710C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3420", Offset = "0x10C3420")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x1FF7114", Offset = "0x1FF7114", VA = "0x1FF7114")]
		public DuplicateSamplePoint(int startIndex, int endIndex, bool isHardEdge)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x1FF7124", Offset = "0x1FF7124", VA = "0x1FF7124", Slot = "4")]
		public bool Equals(DuplicateSamplePoint other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1FF7164", Offset = "0x1FF7164", VA = "0x1FF7164", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1FF7214", Offset = "0x1FF7214", VA = "0x1FF7214", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x1FF7260", Offset = "0x1FF7260", VA = "0x1FF7260")]
		public static bool operator ==(DuplicateSamplePoint left, DuplicateSamplePoint right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x1FF7298", Offset = "0x1FF7298", VA = "0x1FF7298")]
		public static bool operator !=(DuplicateSamplePoint left, DuplicateSamplePoint right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1FF72D0", Offset = "0x1FF72D0", VA = "0x1FF72D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001AA")]
	public struct SamplePointUData : IEquatable<SamplePointUData>
	{
		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Vertex;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool UVEdge;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool HardEdge;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float FirstU;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SecondU;

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x2297A00", Offset = "0x2297A00", VA = "0x2297A00")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3430", Offset = "0x10C3430")]
		public SamplePointUData(int vertexIndex, bool uvEdge, float firstU, float secondU)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x2297A18", Offset = "0x2297A18", VA = "0x2297A18")]
		public SamplePointUData(int vertexIndex, bool uvEdge, bool hardEdge, float firstU, float secondU)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x2297A34", Offset = "0x2297A34", VA = "0x2297A34")]
		public SamplePointUData(int vertexIndex, ControlPointOption controlPointsOption)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x2297A64", Offset = "0x2297A64", VA = "0x2297A64", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x2297D08", Offset = "0x2297D08", VA = "0x2297D08", Slot = "4")]
		public bool Equals(SamplePointUData other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x2297DA0", Offset = "0x2297DA0", VA = "0x2297DA0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x2297E28", Offset = "0x2297E28", VA = "0x2297E28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x2297EBC", Offset = "0x2297EBC", VA = "0x2297EBC")]
		public static bool operator ==(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x2297EEC", Offset = "0x2297EEC", VA = "0x2297EEC")]
		public static bool operator !=(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001AB")]
	public class SamplePointsMaterialGroupCollection : List<SamplePointsMaterialGroup>
	{
		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaterialID;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AspectCorrectionU;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float AspectCorrectionV;

		[Token(Token = "0x17000249")]
		public int TriangleCount
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x22983EC", Offset = "0x22983EC", VA = "0x22983EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C83D8", Offset = "0x10C83D8")]
		public float AspectCorrection
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x2298498", Offset = "0x2298498", VA = "0x2298498")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x22984A0", Offset = "0x22984A0", VA = "0x22984A0")]
			set
			{
			}
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x22984A8", Offset = "0x22984A8", VA = "0x22984A8")]
		public SamplePointsMaterialGroupCollection()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x2298528", Offset = "0x2298528", VA = "0x2298528")]
		public SamplePointsMaterialGroupCollection(int capacity)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x22985B8", Offset = "0x22985B8", VA = "0x22985B8")]
		public SamplePointsMaterialGroupCollection(IEnumerable<SamplePointsMaterialGroup> collection)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x2298648", Offset = "0x2298648", VA = "0x2298648")]
		public void CalculateAspectCorrection(CGVolume volume, CGMaterialSettingsEx matSettings)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AC")]
	public class CGDataReference
	{
		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private CGModule m_Module;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGModuleOutputSlot mSlot;

		[Token(Token = "0x1700024B")]
		public CGData[] Data
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x28B96A0", Offset = "0x28B96A0", VA = "0x28B96A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024C")]
		public CGModuleOutputSlot Slot
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x28B9714", Offset = "0x28B9714", VA = "0x28B9714")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024D")]
		public bool HasValue
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x28B99E4", Offset = "0x28B99E4", VA = "0x28B99E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024E")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x28B9A14", Offset = "0x28B9A14", VA = "0x28B9A14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024F")]
		public CGModule Module
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x28B9A20", Offset = "0x28B9A20", VA = "0x28B9A20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000250")]
		public string SlotName
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x28B9A28", Offset = "0x28B9A28", VA = "0x28B9A28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x28B9A30", Offset = "0x28B9A30", VA = "0x28B9A30")]
		public CGDataReference()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x28B9A38", Offset = "0x28B9A38", VA = "0x28B9A38")]
		public CGDataReference(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x28B9ABC", Offset = "0x28B9ABC", VA = "0x28B9ABC")]
		public CGDataReference(CurvyGenerator generator, string moduleName, string slotName)
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x28B9B6C", Offset = "0x28B9B6C", VA = "0x28B9B6C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000CBC")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CBD")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x28B9A78", Offset = "0x28B9A78", VA = "0x28B9A78")]
		public void setINTERNAL(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x28B9B04", Offset = "0x28B9B04", VA = "0x28B9B04")]
		public void setINTERNAL(CurvyGenerator generator, string moduleName, string slotName)
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A3EAC", Offset = "0x10A3EAC")]
	public sealed class CGDataInfoAttribute : Attribute
	{
		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Color Color;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x28B95A4", Offset = "0x28B95A4", VA = "0x28B95A4")]
		public CGDataInfoAttribute(Color color)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x28B95F0", Offset = "0x28B95F0", VA = "0x28B95F0")]
		public CGDataInfoAttribute(float r, float g, float b, float a = 1f)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x28B9664", Offset = "0x28B9664", VA = "0x28B9664")]
		public CGDataInfoAttribute(string htmlColor)
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public class CGData : IDisposable
	{
		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool disposed;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x17000251")]
		public virtual int Count
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0x28B94E4", Offset = "0x28B94E4", VA = "0x28B94E4", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x28B9390", Offset = "0x28B9390", VA = "0x28B9390", Slot = "5")]
		protected virtual bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x28B93F8", Offset = "0x28B93F8", VA = "0x28B93F8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x28B9470", Offset = "0x28B9470", VA = "0x28B9470", Slot = "1")]
		~CGData()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x28B94EC", Offset = "0x28B94EC", VA = "0x28B94EC")]
		public static implicit operator bool(CGData a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC8")]
		public virtual T Clone<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x28B94F8", Offset = "0x28B94F8", VA = "0x28B94F8")]
		protected int getGenericFIndex(SubArray<float> FMapArray, float fValue, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x28B83E0", Offset = "0x28B83E0", VA = "0x28B83E0")]
		public CGData()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3EC0", Offset = "0x10A3EC0")]
	public class CGShape : CGData
	{
		[Serializable]
		[Token(Token = "0x20001B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A3EEC", Offset = "0x10A3EEC")]
		private sealed class <>c
		{
			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SamplePointsMaterialGroup, SamplePointsMaterialGroup> <>9__53_0;

			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0x2236AAC", Offset = "0x2236AAC", VA = "0x2236AAC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0x2236AB4", Offset = "0x2236AB4", VA = "0x2236AB4")]
			internal SamplePointsMaterialGroup <Copy>b__53_0(SamplePointsMaterialGroup g)
			{
				return null;
			}
		}

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B456C", Offset = "0x10B456C")]
		private List<DuplicateSamplePoint> <DuplicatePoints>k__BackingField;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SamplePointsMaterialGroup> MaterialGroups;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool SourceIsManaged;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool Closed;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool Seamless;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Length;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SubArray<float> relativeDistances;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SubArray<float> sourceRelativeDistances;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SubArray<Vector3> positions;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SubArray<Vector3> normals;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SubArray<float> customValues;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float mCacheLastF;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int mCacheLastIndex;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float mCacheLastFrag;

		[Token(Token = "0x17000252")]
		public SubArray<float> RelativeDistances
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x28C61FC", Offset = "0x28C61FC", VA = "0x28C61FC")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x28C6208", Offset = "0x28C6208", VA = "0x28C6208")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public SubArray<float> SourceRelativeDistances
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0x28C630C", Offset = "0x28C630C", VA = "0x28C630C")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0x28C6318", Offset = "0x28C6318", VA = "0x28C6318")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public SubArray<Vector3> Positions
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0x28C641C", Offset = "0x28C641C", VA = "0x28C641C")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0x28C6428", Offset = "0x28C6428", VA = "0x28C6428")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public SubArray<Vector3> Normals
		{
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0x28C652C", Offset = "0x28C652C", VA = "0x28C652C")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0x28C6538", Offset = "0x28C6538", VA = "0x28C6538")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public SubArray<float> CustomValues
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0x28C663C", Offset = "0x28C663C", VA = "0x28C663C")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0x28C6648", Offset = "0x28C6648", VA = "0x28C6648")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public List<DuplicateSamplePoint> DuplicatePoints
		{
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0x28C674C", Offset = "0x28C674C", VA = "0x28C674C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3468", Offset = "0x10C3468")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x28C6754", Offset = "0x28C6754", VA = "0x28C6754")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3478", Offset = "0x10C3478")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8410", Offset = "0x10C8410")]
		public float[] F
		{
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0x28C675C", Offset = "0x28C675C", VA = "0x28C675C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x28C682C", Offset = "0x28C682C", VA = "0x28C682C")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8448", Offset = "0x10C8448")]
		public float[] SourceF
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x28C68A4", Offset = "0x28C68A4", VA = "0x28C68A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0x28C6974", Offset = "0x28C6974", VA = "0x28C6974")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8480", Offset = "0x10C8480")]
		public Vector3[] Position
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0x28C69EC", Offset = "0x28C69EC", VA = "0x28C69EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0x28C6ABC", Offset = "0x28C6ABC", VA = "0x28C6ABC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C84B8", Offset = "0x10C84B8")]
		public Vector3[] Normal
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0x28C6B34", Offset = "0x28C6B34", VA = "0x28C6B34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x28C6C04", Offset = "0x28C6C04", VA = "0x28C6C04")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C84F0", Offset = "0x10C84F0")]
		public float[] Map
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0x28C6C7C", Offset = "0x28C6C7C", VA = "0x28C6C7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0x28C6D4C", Offset = "0x28C6D4C", VA = "0x28C6D4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public override int Count
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x28C6DC4", Offset = "0x28C6DC4", VA = "0x28C6DC4", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x28C495C", Offset = "0x28C495C", VA = "0x28C495C")]
		public CGShape()
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x28C4E98", Offset = "0x28C4E98", VA = "0x28C4E98")]
		public CGShape(CGShape source)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x28C5598", Offset = "0x28C5598", VA = "0x28C5598", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE5")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x28C5964", Offset = "0x28C5964", VA = "0x28C5964")]
		public static void Copy(CGShape dest, CGShape source)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x28C6DCC", Offset = "0x28C6DCC", VA = "0x28C6DCC")]
		public void Copy(CGShape source)
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x28C6DD0", Offset = "0x28C6DD0", VA = "0x28C6DD0")]
		public float DistanceToF(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x28C6E04", Offset = "0x28C6E04", VA = "0x28C6E04")]
		public float FToDistance(float f)
		{
			return default(float);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x28C5F5C", Offset = "0x28C5F5C", VA = "0x28C5F5C")]
		public int GetFIndex(float f, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x28C6E30", Offset = "0x28C6E30", VA = "0x28C6E30")]
		public Vector3 InterpolatePosition(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x28C6EBC", Offset = "0x28C6EBC", VA = "0x28C6EBC")]
		public Vector3 InterpolateUp(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x28C6F48", Offset = "0x28C6F48", VA = "0x28C6F48")]
		public void Interpolate(float f, out Vector3 position, out Vector3 up)
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x28C7054", Offset = "0x28C7054", VA = "0x28C7054")]
		public void Move(ref float f, ref int direction, float speed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x28C7098", Offset = "0x28C7098", VA = "0x28C7098")]
		public void MoveBy(ref float f, ref int direction, float speedDist, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x28C7124", Offset = "0x28C7124", VA = "0x28C7124", Slot = "8")]
		public virtual void Recalculate()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x28C7560", Offset = "0x28C7560", VA = "0x28C7560")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3488", Offset = "0x10C3488")]
		public void RecalculateNormals(List<int> softEdges)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x28C7AD0", Offset = "0x28C7AD0", VA = "0x28C7AD0")]
		public void RecalculateNormals([NotNull] CurvySpline spline)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x28C7FA0", Offset = "0x28C7FA0", VA = "0x28C7FA0")]
		public void RecalculateNormals()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3EFC", Offset = "0x10A3EFC")]
	public class CGPath : CGShape
	{
		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SubArray<Vector3> directions;

		[Token(Token = "0x1700025E")]
		public SubArray<Vector3> Directions
		{
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0x28C45F8", Offset = "0x28C45F8", VA = "0x28C45F8")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0x28C4604", Offset = "0x28C4604", VA = "0x28C4604")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8528", Offset = "0x10C8528")]
		public Vector3[] Direction
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0x28C4708", Offset = "0x28C4708", VA = "0x28C4708")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0x28C47D8", Offset = "0x28C47D8", VA = "0x28C47D8")]
			set
			{
			}
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x28C4850", Offset = "0x28C4850", VA = "0x28C4850")]
		public CGPath()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x28C4D5C", Offset = "0x28C4D5C", VA = "0x28C4D5C")]
		public CGPath(CGPath source)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x28C5494", Offset = "0x28C5494", VA = "0x28C5494", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFE")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x28C5858", Offset = "0x28C5858", VA = "0x28C5858")]
		public static void Copy(CGPath dest, CGPath source)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x28C5DEC", Offset = "0x28C5DEC", VA = "0x28C5DEC")]
		public void Interpolate(float f, out Vector3 position, out Vector3 direction, out Vector3 up)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x28C5FE0", Offset = "0x28C5FE0", VA = "0x28C5FE0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C34C0", Offset = "0x10C34C0")]
		public void Interpolate(float f, float angleF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x28C604C", Offset = "0x28C604C", VA = "0x28C604C")]
		public Vector3 InterpolateDirection(float f)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20001B2")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3F28", Offset = "0x10A3F28")]
	public class CGVolume : CGPath
	{
		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool CrossClosed;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool CrossSeamless;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float CrossFShift;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SamplePointsMaterialGroupCollection CrossMaterialGroups;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private SubArray<Vector3> vertices;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private SubArray<Vector3> vertexNormals;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private SubArray<float> crossRelativeDistances;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SubArray<float> crossCustomValues;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private SubArray<Vector2> scales;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B457C", Offset = "0x10B457C")]
		private float[] _segmentLength;

		[Token(Token = "0x17000260")]
		public SubArray<Vector3> Vertices
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x28CF758", Offset = "0x28CF758", VA = "0x28CF758")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0x28CF764", Offset = "0x28CF764", VA = "0x28CF764")]
			set
			{
			}
		}

		[Token(Token = "0x17000261")]
		public SubArray<Vector3> VertexNormals
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0x28CF868", Offset = "0x28CF868", VA = "0x28CF868")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x28CF874", Offset = "0x28CF874", VA = "0x28CF874")]
			set
			{
			}
		}

		[Token(Token = "0x17000262")]
		public SubArray<float> CrossRelativeDistances
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x28CF978", Offset = "0x28CF978", VA = "0x28CF978")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x28CF984", Offset = "0x28CF984", VA = "0x28CF984")]
			set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public SubArray<float> CrossCustomValues
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x28CFA88", Offset = "0x28CFA88", VA = "0x28CFA88")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0x28CFA94", Offset = "0x28CFA94", VA = "0x28CFA94")]
			set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public SubArray<Vector2> Scales
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0x28CFB98", Offset = "0x28CFB98", VA = "0x28CFB98")]
			get
			{
				return default(SubArray<Vector2>);
			}
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0x28CFBA4", Offset = "0x28CFBA4", VA = "0x28CFBA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8560", Offset = "0x10C8560")]
		public Vector3[] Vertex
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x28CFCA8", Offset = "0x28CFCA8", VA = "0x28CFCA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0x28CFD78", Offset = "0x28CFD78", VA = "0x28CFD78")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8598", Offset = "0x10C8598")]
		public Vector3[] VertexNormal
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0x28CFDF0", Offset = "0x28CFDF0", VA = "0x28CFDF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x28CFEC0", Offset = "0x28CFEC0", VA = "0x28CFEC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C85D0", Offset = "0x10C85D0")]
		public float[] CrossF
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x28CFF38", Offset = "0x28CFF38", VA = "0x28CFF38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x28D0008", Offset = "0x28D0008", VA = "0x28D0008")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8608", Offset = "0x10C8608")]
		public float[] CrossMap
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x28D0080", Offset = "0x28D0080", VA = "0x28D0080")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x28D0150", Offset = "0x28D0150", VA = "0x28D0150")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8640", Offset = "0x10C8640")]
		public float[] SegmentLength
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x28D01C8", Offset = "0x28D01C8", VA = "0x28D01C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x28D024C", Offset = "0x28D024C", VA = "0x28D024C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public int CrossSize
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x28CB404", Offset = "0x28CB404", VA = "0x28CB404")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026B")]
		public int VertexCount
		{
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x28D025C", Offset = "0x28D025C", VA = "0x28D025C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x28D0264", Offset = "0x28D0264", VA = "0x28D0264")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C34F8", Offset = "0x10C34F8")]
		public CGVolume()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x28D0268", Offset = "0x28D0268", VA = "0x28D0268")]
		public CGVolume(int samplePoints, CGShape crossShape)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x28D0678", Offset = "0x28D0678", VA = "0x28D0678")]
		public CGVolume(CGPath path, CGShape crossShape)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x28D0AB8", Offset = "0x28D0AB8", VA = "0x28D0AB8")]
		public CGVolume(CGVolume source)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x28D0F1C", Offset = "0x28D0F1C", VA = "0x28D0F1C", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x28D1284", Offset = "0x28D1284", VA = "0x28D1284")]
		[NotNull]
		public static CGVolume Get([CanBeNull] CGVolume data, CGPath path, CGShape crossShape)
		{
			return null;
		}

		[Token(Token = "0x6000D1F")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x28D164C", Offset = "0x28D164C", VA = "0x28D164C")]
		public void InterpolateVolume(float f, float crossF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x28D1888", Offset = "0x28D1888", VA = "0x28D1888")]
		public Vector3 InterpolateVolumePosition(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x28D1A00", Offset = "0x28D1A00", VA = "0x28D1A00")]
		public Vector3 InterpolateVolumeDirection(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x28D1B08", Offset = "0x28D1B08", VA = "0x28D1B08")]
		public Vector3 InterpolateVolumeUp(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x28D1C58", Offset = "0x28D1C58", VA = "0x28D1C58")]
		public float GetCrossLength(float pathF)
		{
			return default(float);
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x28D1F04", Offset = "0x28D1F04", VA = "0x28D1F04")]
		public float CrossFToDistance(float f, float crossF, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x28D1F48", Offset = "0x28D1F48", VA = "0x28D1F48")]
		public float CrossDistanceToF(float f, float distance, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x28D1DC8", Offset = "0x28D1DC8", VA = "0x28D1DC8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3540", Offset = "0x10C3540")]
		public void GetSegmentIndices(float pathF, out int segment0Index, out int segment1Index, out float frag)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x28D1F90", Offset = "0x28D1F90", VA = "0x28D1F90")]
		public int GetSegmentIndex(int segment)
		{
			return default(int);
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x28D1F9C", Offset = "0x28D1F9C", VA = "0x28D1F9C")]
		public int GetCrossFIndex(float crossF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x28D1FE8", Offset = "0x28D1FE8", VA = "0x28D1FE8")]
		public int GetVertexIndex(float pathF, out float pathFrag)
		{
			return default(int);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x28D1834", Offset = "0x28D1834", VA = "0x28D1834")]
		public int GetVertexIndex(float pathF, float crossF, out float pathFrag, out float crossFrag)
		{
			return default(int);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x28D2010", Offset = "0x28D2010", VA = "0x28D2010")]
		public Vector3[] GetSegmentVertices(params int[] segmentIndices)
		{
			return null;
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x28D1E1C", Offset = "0x28D1E1C", VA = "0x28D1E1C")]
		private float calcSegmentLength(int segmentIndex)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001B3")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3F50", Offset = "0x10A3F50")]
	public class CGBounds : CGData
	{
		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Bounds? mBounds;

		[Token(Token = "0x1700026C")]
		public Bounds Bounds
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0x28B81E4", Offset = "0x28B81E4", VA = "0x28B81E4")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x28B8280", Offset = "0x28B8280", VA = "0x28B8280")]
			set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public float Depth
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x28B83A0", Offset = "0x28B83A0", VA = "0x28B83A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x28B83D8", Offset = "0x28B83D8", VA = "0x28B83D8")]
		public CGBounds()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x28B83E8", Offset = "0x28B83E8", VA = "0x28B83E8")]
		public CGBounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x28B8434", Offset = "0x28B8434", VA = "0x28B8434")]
		public CGBounds(CGBounds source)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x28B84C8", Offset = "0x28B84C8", VA = "0x28B84C8", Slot = "8")]
		public virtual void RecalculateBounds()
		{
		}

		[Token(Token = "0x6000D35")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x28B84F0", Offset = "0x28B84F0", VA = "0x28B84F0")]
		public static void Copy(CGBounds dest, CGBounds source)
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class CGVSubMesh : CGData
	{
		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material Material;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SubArray<int> triangles;

		[Token(Token = "0x1700026E")]
		public SubArray<int> TrianglesList
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0x28CF20C", Offset = "0x28CF20C", VA = "0x28CF20C")]
			get
			{
				return default(SubArray<int>);
			}
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0x28CF218", Offset = "0x28CF218", VA = "0x28CF218")]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8678", Offset = "0x10C8678")]
		public int[] Triangles
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0x28CF31C", Offset = "0x28CF31C", VA = "0x28CF31C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0x28CF3EC", Offset = "0x28CF3EC", VA = "0x28CF3EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000270")]
		public override int Count
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0x28CF464", Offset = "0x28CF464", VA = "0x28CF464", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x28CE350", Offset = "0x28CE350", VA = "0x28CE350")]
		public CGVSubMesh([Optional] Material material)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x28CBEBC", Offset = "0x28CBEBC", VA = "0x28CBEBC")]
		public CGVSubMesh(int[] triangles, [Optional] Material material)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x28CF46C", Offset = "0x28CF46C", VA = "0x28CF46C")]
		public CGVSubMesh(SubArray<int> triangles, [Optional] Material material)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x28CF0DC", Offset = "0x28CF0DC", VA = "0x28CF0DC")]
		public CGVSubMesh(int triangleCount, [Optional] Material material)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x28CB960", Offset = "0x28CB960", VA = "0x28CB960")]
		public CGVSubMesh(CGVSubMesh source)
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x28CF4C4", Offset = "0x28CF4C4", VA = "0x28CF4C4", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D42")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x28CF5C4", Offset = "0x28CF5C4", VA = "0x28CF5C4")]
		public static CGVSubMesh Get(CGVSubMesh data, int triangleCount, [Optional] Material material)
		{
			return null;
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x28CF6F4", Offset = "0x28CF6F4", VA = "0x28CF6F4")]
		public void ShiftIndices(int offset, int startIndex = 0)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x28CD5A4", Offset = "0x28CD5A4", VA = "0x28CD5A4")]
		public void Add(CGVSubMesh other, int shiftIndexOffset = 0)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3F74", Offset = "0x10A3F74")]
	public class CGVMesh : CGBounds
	{
		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CGVSubMesh[] SubMeshes;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SubArray<int>? sortedVertexIndices;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly object vertexIndicesLock;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SubArray<Vector3> vertices;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SubArray<Vector2> uvs;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SubArray<Vector2> uv2s;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SubArray<Vector3> normals;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SubArray<Vector4> tangents;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool hasPartialNormals;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool hasPartialTangents;

		[Token(Token = "0x17000271")]
		public SubArray<Vector3> Vertices
		{
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0x28C9FC0", Offset = "0x28C9FC0", VA = "0x28C9FC0")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0x28C9FCC", Offset = "0x28C9FCC", VA = "0x28C9FCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public SubArray<Vector2> UVs
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x28CA0E4", Offset = "0x28CA0E4", VA = "0x28CA0E4")]
			get
			{
				return default(SubArray<Vector2>);
			}
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x28CA0F0", Offset = "0x28CA0F0", VA = "0x28CA0F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public SubArray<Vector2> UV2s
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x28CA1F4", Offset = "0x28CA1F4", VA = "0x28CA1F4")]
			get
			{
				return default(SubArray<Vector2>);
			}
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x28CA200", Offset = "0x28CA200", VA = "0x28CA200")]
			set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public SubArray<Vector3> NormalsList
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x28CA304", Offset = "0x28CA304", VA = "0x28CA304")]
			get
			{
				return default(SubArray<Vector3>);
			}
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x28CA310", Offset = "0x28CA310", VA = "0x28CA310")]
			set
			{
			}
		}

		[Token(Token = "0x17000275")]
		public SubArray<Vector4> TangentsList
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x28CA414", Offset = "0x28CA414", VA = "0x28CA414")]
			get
			{
				return default(SubArray<Vector4>);
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x28CA420", Offset = "0x28CA420", VA = "0x28CA420")]
			set
			{
			}
		}

		[Token(Token = "0x17000276")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C86B0", Offset = "0x10C86B0")]
		public Vector3[] Vertex
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x28CA524", Offset = "0x28CA524", VA = "0x28CA524")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x28CA5F4", Offset = "0x28CA5F4", VA = "0x28CA5F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000277")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C86E8", Offset = "0x10C86E8")]
		public Vector2[] UV
		{
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x28CA66C", Offset = "0x28CA66C", VA = "0x28CA66C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x28CA73C", Offset = "0x28CA73C", VA = "0x28CA73C")]
			set
			{
			}
		}

		[Token(Token = "0x17000278")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8720", Offset = "0x10C8720")]
		public Vector2[] UV2
		{
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x28CA7B4", Offset = "0x28CA7B4", VA = "0x28CA7B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x28CA884", Offset = "0x28CA884", VA = "0x28CA884")]
			set
			{
			}
		}

		[Token(Token = "0x17000279")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8758", Offset = "0x10C8758")]
		public Vector3[] Normals
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x28CA8FC", Offset = "0x28CA8FC", VA = "0x28CA8FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x28CA9CC", Offset = "0x28CA9CC", VA = "0x28CA9CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700027A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8790", Offset = "0x10C8790")]
		public Vector4[] Tangents
		{
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x28CAA44", Offset = "0x28CAA44", VA = "0x28CAA44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x28CAB14", Offset = "0x28CAB14", VA = "0x28CAB14")]
			set
			{
			}
		}

		[Token(Token = "0x1700027B")]
		public override int Count
		{
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x28CAB8C", Offset = "0x28CAB8C", VA = "0x28CAB8C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700027C")]
		public bool HasUV
		{
			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x28CAB94", Offset = "0x28CAB94", VA = "0x28CAB94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027D")]
		public bool HasUV2
		{
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x28CABA4", Offset = "0x28CABA4", VA = "0x28CABA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027E")]
		public bool HasNormals
		{
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x28CABB4", Offset = "0x28CABB4", VA = "0x28CABB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027F")]
		public bool HasPartialNormals
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x28CABC4", Offset = "0x28CABC4", VA = "0x28CABC4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0x28CABCC", Offset = "0x28CABCC", VA = "0x28CABCC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000280")]
		public bool HasTangents
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x28CABD8", Offset = "0x28CABD8", VA = "0x28CABD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000281")]
		public bool HasPartialTangents
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x28CABE8", Offset = "0x28CABE8", VA = "0x28CABE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x28CABF0", Offset = "0x28CABF0", VA = "0x28CABF0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public int TriangleCount
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x28CABFC", Offset = "0x28CABFC", VA = "0x28CABFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x28CAC80", Offset = "0x28CAC80", VA = "0x28CAC80")]
		public CGVMesh()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x28CAC98", Offset = "0x28CAC98", VA = "0x28CAC98")]
		public CGVMesh(int vertexCount, bool addUV = false, bool addUV2 = false, bool addNormals = false, bool addTangents = false)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x28CB2EC", Offset = "0x28CB2EC", VA = "0x28CB2EC")]
		public CGVMesh(CGVolume volume)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x28CB344", Offset = "0x28CB344", VA = "0x28CB344")]
		public CGVMesh(CGVolume volume, IntRegion subset)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x28CB40C", Offset = "0x28CB40C", VA = "0x28CB40C")]
		public CGVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x28CBAAC", Offset = "0x28CBAAC", VA = "0x28CBAAC")]
		public CGVMesh([NotNull] CGMeshProperties meshProperties)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x28CBB04", Offset = "0x28CBB04", VA = "0x28CBB04")]
		public CGVMesh([NotNull] Mesh source, Material[] materials, Matrix4x4 trsMatrix)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x28CC0F8", Offset = "0x28CC0F8", VA = "0x28CC0F8", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6C")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x28CC4F4", Offset = "0x28CC4F4", VA = "0x28CC4F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3578", Offset = "0x10C3578")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x28CC580", Offset = "0x28CC580", VA = "0x28CC580")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C35B0", Offset = "0x10C35B0")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, IntRegion subset, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x28CC594", Offset = "0x28CC594", VA = "0x28CC594")]
		[NotNull]
		public static CGVMesh Get([CanBeNull] CGVMesh data, CGVolume source, IntRegion subset, bool addUV, bool addUV2, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x28CCA3C", Offset = "0x28CCA3C", VA = "0x28CCA3C")]
		public void SetSubMeshCount(int count)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x28CCA98", Offset = "0x28CCA98", VA = "0x28CCA98")]
		public void AddSubMesh([Optional] CGVSubMesh submesh)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x28CCB04", Offset = "0x28CCB04", VA = "0x28CCB04")]
		public void MergeVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x28CCB58", Offset = "0x28CCB58", VA = "0x28CCB58")]
		public void MergeVMesh(CGVMesh source, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x28CD6EC", Offset = "0x28CD6EC", VA = "0x28CD6EC")]
		public void MergeVMeshes(List<CGVMesh> vMeshes, int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x28CCE5C", Offset = "0x28CCE5C", VA = "0x28CCE5C")]
		private void MergeUVsNormalsAndTangents(CGVMesh source, int preMergeVertexCount)
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x28CD468", Offset = "0x28CD468", VA = "0x28CD468")]
		public CGVSubMesh GetMaterialSubMesh(Material mat, bool createIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x28CE474", Offset = "0x28CE474", VA = "0x28CE474")]
		public Mesh AsMesh()
		{
			return null;
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x28CE4F0", Offset = "0x28CE4F0", VA = "0x28CE4F0")]
		public void ToMesh(ref Mesh mesh, bool includeNormals = true, bool includeTangents = true)
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x28CE694", Offset = "0x28CE694", VA = "0x28CE694")]
		public Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x28CE798", Offset = "0x28CE798", VA = "0x28CE798", Slot = "8")]
		public override void RecalculateBounds()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x28CE994", Offset = "0x28CE994", VA = "0x28CE994")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C35F8", Offset = "0x10C35F8")]
		public void RecalculateUV2()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x28CBF5C", Offset = "0x28CBF5C", VA = "0x28CBF5C")]
		public void TRS(Matrix4x4 matrix)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x28CEA78", Offset = "0x28CEA78", VA = "0x28CEA78")]
		private void OnVerticesChanged()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x28CEC64", Offset = "0x28CEC64", VA = "0x28CEC64")]
		public SubArray<int> GetCachedSortedVertexIndices()
		{
			return default(SubArray<int>);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x28CEA88", Offset = "0x28CEA88", VA = "0x28CEA88")]
		private void ClearCachedSortedVertexIndices()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x28CE264", Offset = "0x28CE264", VA = "0x28CE264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3630", Offset = "0x10C3630")]
		private void <MergeVMeshes>g__ProcessTriangleArrays|74_0(List<SubArray<int>> subArrays, Material material1)
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3F98", Offset = "0x10A3F98")]
	public class CGGameObject : CGBounds
	{
		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject Object;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 Translate;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 Rotate;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 Scale;

		[Token(Token = "0x17000283")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x28BAE48", Offset = "0x28BAE48", VA = "0x28BAE48")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x28BAEEC", Offset = "0x28BAEEC", VA = "0x28BAEEC")]
		public CGGameObject()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x28BAF20", Offset = "0x28BAF20", VA = "0x28BAF20")]
		public CGGameObject(CGGameObjectProperties properties)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x28BB0AC", Offset = "0x28BB0AC", VA = "0x28BB0AC")]
		public CGGameObject(GameObject obj)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x28BAF68", Offset = "0x28BAF68", VA = "0x28BAF68")]
		public CGGameObject(GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x28BB148", Offset = "0x28BB148", VA = "0x28BB148")]
		public CGGameObject(CGGameObject source)
		{
		}

		[Token(Token = "0x6000D87")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x28BB1CC", Offset = "0x28BB1CC", VA = "0x28BB1CC", Slot = "8")]
		public override void RecalculateBounds()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0x10A3FD0", Offset = "0x10A3FD0")]
	public class CGSpots : CGData
	{
		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SubArray<CGSpot> spots;

		[Token(Token = "0x17000284")]
		public SubArray<CGSpot> Spots
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0x28C8EF0", Offset = "0x28C8EF0", VA = "0x28C8EF0")]
			get
			{
				return default(SubArray<CGSpot>);
			}
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x28C8EFC", Offset = "0x28C8EFC", VA = "0x28C8EFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C87C8", Offset = "0x10C87C8")]
		public CGSpot[] Points
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0x28C9000", Offset = "0x28C9000", VA = "0x28C9000")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x28C90D0", Offset = "0x28C90D0", VA = "0x28C90D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public override int Count
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x28C9148", Offset = "0x28C9148", VA = "0x28C9148", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x28C9150", Offset = "0x28C9150", VA = "0x28C9150")]
		public CGSpots()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x28C9260", Offset = "0x28C9260", VA = "0x28C9260")]
		public CGSpots(params CGSpot[] points)
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x28C92EC", Offset = "0x28C92EC", VA = "0x28C92EC")]
		public CGSpots(SubArray<CGSpot> spots)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x28C9330", Offset = "0x28C9330", VA = "0x28C9330")]
		public CGSpots(List<CGSpot> spots)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x28C948C", Offset = "0x28C948C", VA = "0x28C948C")]
		public CGSpots(params List<CGSpot>[] spots)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x28C9684", Offset = "0x28C9684", VA = "0x28C9684")]
		public CGSpots(CGSpots source)
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x28C97C0", Offset = "0x28C97C0", VA = "0x28C97C0", Slot = "5")]
		protected override bool Dispose(bool disposing)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D95")]
		public override T Clone<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x20001B8")]
	public abstract class CGDataRequestParameter
	{
		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x28BA188", Offset = "0x28BA188", VA = "0x28BA188")]
		public static implicit operator bool(CGDataRequestParameter a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x28B9C98", Offset = "0x28B9C98", VA = "0x28B9C98")]
		protected CGDataRequestParameter()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public class CGDataRequestMetaCGOptions : CGDataRequestParameter
	{
		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B45B4", Offset = "0x10B45B4")]
		public bool CheckHardEdges;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B45EC", Offset = "0x10B45EC")]
		public bool CheckMaterialID;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool IncludeControlPoints;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B4624", Offset = "0x10B4624")]
		public bool CheckExtendedUV;

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x28B9C34", Offset = "0x28B9C34", VA = "0x28B9C34")]
		public CGDataRequestMetaCGOptions(bool checkEdges, bool checkMaterials, bool includeCP, bool extendedUV)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x28B9CA0", Offset = "0x28B9CA0", VA = "0x28B9CA0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x28B9DB0", Offset = "0x28B9DB0", VA = "0x28B9DB0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x28B9E60", Offset = "0x28B9E60", VA = "0x28B9E60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BA")]
	public class CGDataRequestShapeRasterization : CGDataRequestRasterization
	{
		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SubArray<float> relativeDistances;

		[Token(Token = "0x17000287")]
		public SubArray<float> RelativeDistances
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x28BA7C8", Offset = "0x28BA7C8", VA = "0x28BA7C8")]
			get
			{
				return default(SubArray<float>);
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x28BA7D4", Offset = "0x28BA7D4", VA = "0x28BA7D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000288")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8800", Offset = "0x10C8800")]
		public float[] PathF
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x28BA7E4", Offset = "0x28BA7E4", VA = "0x28BA7E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x28BA8B4", Offset = "0x28BA8B4", VA = "0x28BA8B4")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x28BA934", Offset = "0x28BA934", VA = "0x28BA934")]
		public CGDataRequestShapeRasterization(SubArray<float> relativeDistance, float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x28BAA9C", Offset = "0x28BAA9C", VA = "0x28BAA9C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3640", Offset = "0x10C3640")]
		public CGDataRequestShapeRasterization(float[] pathF, float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x28BAC04", Offset = "0x28BAC04", VA = "0x28BAC04", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x28BAD30", Offset = "0x28BAD30", VA = "0x28BAD30", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x28BAD98", Offset = "0x28BAD98", VA = "0x28BAD98", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BB")]
	public class CGDataRequestRasterization : CGDataRequestParameter
	{
		[Token(Token = "0x20001BC")]
		public enum ModeEnum
		{
			[Token(Token = "0x400071D")]
			Even,
			[Token(Token = "0x400071E")]
			Optimized
		}

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Start;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RasterizedRelativeLength;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Resolution;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float AngleThreshold;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ModeEnum Mode;

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x28BA194", Offset = "0x28BA194", VA = "0x28BA194")]
		public CGDataRequestRasterization(float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x28BA214", Offset = "0x28BA214", VA = "0x28BA214")]
		public CGDataRequestRasterization(CGDataRequestRasterization source)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x28BA23C", Offset = "0x28BA23C", VA = "0x28BA23C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x28BA320", Offset = "0x28BA320", VA = "0x28BA320", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x28BA3DC", Offset = "0x28BA3DC", VA = "0x28BA3DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BD")]
	public interface INoProcessing
	{
	}
	[Token(Token = "0x20001BE")]
	public interface IExternalInput
	{
		[Token(Token = "0x17000289")]
		bool SupportsIPE
		{
			[Token(Token = "0x6000DAA")]
			get;
		}
	}
	[Token(Token = "0x20001BF")]
	public interface IOnRequestProcessing
	{
		[Token(Token = "0x6000DAB")]
		[ItemNotNull]
		[NotNull]
		CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests);
	}
	[Token(Token = "0x20001C0")]
	public interface IPathProvider
	{
		[Token(Token = "0x1700028A")]
		bool PathIsClosed
		{
			[Token(Token = "0x6000DAC")]
			get;
		}
	}
	[Token(Token = "0x20001C1")]
	public interface ICGResourceLoader
	{
		[Token(Token = "0x6000DAD")]
		[NotNull]
		UnityEngine.Component Create(CGModule cgModule, [NotNull] string context);

		[Token(Token = "0x6000DAE")]
		void Destroy(CGModule cgModule, UnityEngine.Component obj, [NotNull] string context, bool kill);
	}
	[Token(Token = "0x20001C2")]
	public interface ICGResourceCollection
	{
		[Token(Token = "0x1700028B")]
		int Count
		{
			[Token(Token = "0x6000DAF")]
			get;
		}

		[Token(Token = "0x1700028C")]
		UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000DB0")]
			get;
		}
	}
	[Token(Token = "0x20001C3")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A3FF4", Offset = "0x10A3FF4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A3FF4", Offset = "0x10A3FF4")]
	public class CGMeshResource : DuplicateEditorMesh, IPoolable
	{
		[Token(Token = "0x400071F")]
		public const MeshColliderCookingOptions EverMeshColliderCookingOptions = MeshColliderCookingOptions.CookForFasterSimulation | MeshColliderCookingOptions.EnableMeshCleaning | MeshColliderCookingOptions.WeldColocatedVertices | MeshColliderCookingOptions.UseFastMidphase;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer mRenderer;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider mCollider;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly HashSet<Mesh> UsedMeshes;

		[Token(Token = "0x1700028D")]
		public MeshRenderer Renderer
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x28BC400", Offset = "0x28BC400", VA = "0x28BC400")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		public Collider Collider
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x28BC4B4", Offset = "0x28BC4B4", VA = "0x28BC4B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x28BC568", Offset = "0x28BC568", VA = "0x28BC568")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C36C0", Offset = "0x10C36C0")]
		public Mesh Prepare()
		{
			return null;
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x28BC5C0", Offset = "0x28BC5C0", VA = "0x28BC5C0")]
		public bool ColliderMatches(CGColliderEnum type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x28BC7B0", Offset = "0x28BC7B0", VA = "0x28BC7B0")]
		public void RemoveCollider()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x28BC858", Offset = "0x28BC858", VA = "0x28BC858")]
		public bool UpdateCollider(CGColliderEnum mode, bool convex, bool isTrigger, PhysicMaterial material, MeshColliderCookingOptions meshCookingOptions = MeshColliderCookingOptions.CookForFasterSimulation | MeshColliderCookingOptions.EnableMeshCleaning | MeshColliderCookingOptions.WeldColocatedVertices | MeshColliderCookingOptions.UseFastMidphase)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x28BD01C", Offset = "0x28BD01C", VA = "0x28BD01C", Slot = "9")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x28BD088", Offset = "0x28BD088", VA = "0x28BD088", Slot = "10")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x28BD124", Offset = "0x28BD124", VA = "0x28BD124")]
		private static Mesh GetNewMesh()
		{
			return null;
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x28BD1EC", Offset = "0x28BD1EC", VA = "0x28BD1EC")]
		private static Mesh GetNewMesh([NotNull] Mesh oldMesh)
		{
			return null;
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x28BD2DC", Offset = "0x28BD2DC", VA = "0x28BD2DC")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x28BD4EC", Offset = "0x28BD4EC", VA = "0x28BD4EC")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x28BD5A4", Offset = "0x28BD5A4", VA = "0x28BD5A4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C36F8", Offset = "0x10C36F8")]
		private static bool UsesSharedMesh(CGMeshResource meshResource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x28BD7A8", Offset = "0x28BD7A8", VA = "0x28BD7A8")]
		public CGMeshResource()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C4")]
	public class CGMeshResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CGMeshResource> Items;

		[Token(Token = "0x1700028F")]
		public int Count
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x28BD83C", Offset = "0x28BD83C", VA = "0x28BD83C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000290")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x28BD888", Offset = "0x28BD888", VA = "0x28BD888", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x28BD8DC", Offset = "0x28BD8DC", VA = "0x28BD8DC")]
		public CGMeshResourceCollection()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[ExecuteAlways]
	public abstract class CGModule : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x20001C6")]
		private class DirtinessManager
		{
			[Serializable]
			[Token(Token = "0x20001C7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4088", Offset = "0x10A4088")]
			private sealed class <>c
			{
				[Token(Token = "0x400073E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x6000E1A")]
				[Address(RVA = "0x1DE6CB8", Offset = "0x1DE6CB8", VA = "0x1DE6CB8")]
				public <>c()
				{
				}

				[Token(Token = "0x6000E1B")]
				[Address(RVA = "0x1DE6CC0", Offset = "0x1DE6CC0", VA = "0x1DE6CC0")]
				internal void <.cctor>b__16_0(CGModule m)
				{
				}

				[Token(Token = "0x6000E1C")]
				[Address(RVA = "0x1DE6CE0", Offset = "0x1DE6CE0", VA = "0x1DE6CE0")]
				internal void <.cctor>b__16_1(CGModule m)
				{
				}
			}

			[Token(Token = "0x4000738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CGModule module;

			[Token(Token = "0x4000739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool isDirty;

			[Token(Token = "0x400073A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			private bool isStateChangeDirty;

			[Token(Token = "0x400073B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			private bool lastIsConfiguredState;

			[Token(Token = "0x400073C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Action<CGModule> SetDirtyAction;

			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static readonly Action<CGModule> SetTreeDirtyStateChangeAction;

			[Token(Token = "0x170002A2")]
			public bool IsDirty
			{
				[Token(Token = "0x6000E10")]
				[Address(RVA = "0x22348B8", Offset = "0x22348B8", VA = "0x22348B8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0x22348C0", Offset = "0x22348C0", VA = "0x22348C0")]
				set
				{
				}
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x223487C", Offset = "0x223487C", VA = "0x223487C")]
			public DirtinessManager([NotNull] CGModule module)
			{
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x2234CDC", Offset = "0x2234CDC", VA = "0x2234CDC")]
			public void UnsetDirtyFlag()
			{
			}

			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x2234CE4", Offset = "0x2234CE4", VA = "0x2234CE4")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x2234CF4", Offset = "0x2234CF4", VA = "0x2234CF4")]
			public void CheckOnStateChanged()
			{
			}

			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x2234D38", Offset = "0x2234D38", VA = "0x2234D38")]
			public void OnDestroy()
			{
			}

			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x2234D3C", Offset = "0x2234D3C", VA = "0x2234D3C")]
			private void SetTreeDirtyStateChange()
			{
			}

			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x22349F0", Offset = "0x22349F0", VA = "0x22349F0")]
			private void ForEachValidOutputModule(Action<CGModule> action)
			{
			}
		}

		[Token(Token = "0x20001C8")]
		private class Identifier
		{
			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CGModule module;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[CanBeNull]
			private string cachedStringID;

			[Token(Token = "0x170002A3")]
			public int ID
			{
				[Token(Token = "0x6000E1D")]
				[Address(RVA = "0x2234EF0", Offset = "0x2234EF0", VA = "0x2234EF0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000E1E")]
				[Address(RVA = "0x2234F0C", Offset = "0x2234F0C", VA = "0x2234F0C")]
				set
				{
				}
			}

			[Token(Token = "0x170002A4")]
			[NotNull]
			public string StringID
			{
				[Token(Token = "0x6000E1F")]
				[Address(RVA = "0x2234F30", Offset = "0x2234F30", VA = "0x2234F30")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0x2234FE4", Offset = "0x2234FE4", VA = "0x2234FE4")]
			public Identifier([NotNull] CGModule module)
			{
			}

			[Token(Token = "0x6000E21")]
			[Address(RVA = "0x2235018", Offset = "0x2235018", VA = "0x2235018")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x20001C9")]
		private class InformationProvider
		{
			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CGModule module;

			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ModuleInfoAttribute moduleInformation;

			[Token(Token = "0x170002A5")]
			[CanBeNull]
			public ModuleInfoAttribute Information
			{
				[Token(Token = "0x6000E23")]
				[Address(RVA = "0x2235058", Offset = "0x2235058", VA = "0x2235058")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x2235024", Offset = "0x2235024", VA = "0x2235024")]
			public InformationProvider([NotNull] CGModule module)
			{
			}

			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x223509C", Offset = "0x223509C", VA = "0x223509C")]
			[CanBeNull]
			private ModuleInfoAttribute GetInformation()
			{
				return null;
			}
		}

		[Token(Token = "0x20001CA")]
		private class ResourceNamer
		{
			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly CGModule cgModule;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly Dictionary<string, Dictionary<int, string>> resourcesNameCache;

			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x22351A4", Offset = "0x22351A4", VA = "0x22351A4")]
			public ResourceNamer(CGModule cgModule)
			{
			}

			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x2235244", Offset = "0x2235244", VA = "0x2235244")]
			public void ClearCache()
			{
			}

			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x2235298", Offset = "0x2235298", VA = "0x2235298")]
			[NotNull]
			private string GetResourceName([NotNull] string resourceName, int index)
			{
				return null;
			}

			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x2235648", Offset = "0x2235648", VA = "0x2235648")]
			public void Rename([NotNull] string resourceName, [NotNull] UnityEngine.Component resource, int index)
			{
			}
		}

		[Token(Token = "0x20001CB")]
		private class Slots
		{
			[Token(Token = "0x4000745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotNull]
			private readonly CGModule module;

			[Token(Token = "0x4000746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4A1C", Offset = "0x10B4A1C")]
			private readonly Dictionary<string, CGModuleInputSlot> <InputSlotsByName>k__BackingField;

			[Token(Token = "0x4000747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4A2C", Offset = "0x10B4A2C")]
			private readonly Dictionary<string, CGModuleOutputSlot> <OutputSlotsByName>k__BackingField;

			[Token(Token = "0x4000748")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4A3C", Offset = "0x10B4A3C")]
			private readonly List<CGModuleInputSlot> <InputSlots>k__BackingField;

			[Token(Token = "0x4000749")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4A4C", Offset = "0x10B4A4C")]
			private readonly List<CGModuleOutputSlot> <OutputSlots>k__BackingField;

			[Token(Token = "0x170002A6")]
			[NotNull]
			public Dictionary<string, CGModuleInputSlot> InputSlotsByName
			{
				[Token(Token = "0x6000E29")]
				[Address(RVA = "0x22356AC", Offset = "0x22356AC", VA = "0x22356AC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3914", Offset = "0x10C3914")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A7")]
			[NotNull]
			public Dictionary<string, CGModuleOutputSlot> OutputSlotsByName
			{
				[Token(Token = "0x6000E2A")]
				[Address(RVA = "0x22356B4", Offset = "0x22356B4", VA = "0x22356B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3924", Offset = "0x10C3924")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A8")]
			[NotNull]
			public List<CGModuleInputSlot> InputSlots
			{
				[Token(Token = "0x6000E2B")]
				[Address(RVA = "0x22356BC", Offset = "0x22356BC", VA = "0x22356BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3934", Offset = "0x10C3934")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A9")]
			[NotNull]
			public List<CGModuleOutputSlot> OutputSlots
			{
				[Token(Token = "0x6000E2C")]
				[Address(RVA = "0x22356C4", Offset = "0x22356C4", VA = "0x22356C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3944", Offset = "0x10C3944")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002AA")]
			public bool IsConfigured
			{
				[Token(Token = "0x6000E2D")]
				[Address(RVA = "0x22356CC", Offset = "0x22356CC", VA = "0x22356CC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0x223591C", Offset = "0x223591C", VA = "0x223591C")]
			public Slots([NotNull] CGModule module)
			{
			}

			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0x2235AA8", Offset = "0x2235AA8", VA = "0x2235AA8")]
			private void Setup()
			{
			}

			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x2235B7C", Offset = "0x2235B7C", VA = "0x2235B7C")]
			[CanBeNull]
			private CGModuleSlot GetSlot([NotNull] FieldInfo fieldInfo)
			{
				return null;
			}

			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x2235D50", Offset = "0x2235D50", VA = "0x2235D50")]
			private void Store([NotNull] CGModuleSlot slot)
			{
			}

			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x2235ED0", Offset = "0x2235ED0", VA = "0x2235ED0")]
			public void ReinitializeLinkedModulesLinkedSlots()
			{
			}

			[Token(Token = "0x6000E33")]
			[Address(RVA = "0x22360E8", Offset = "0x22360E8", VA = "0x22360E8")]
			private static void ReinitializeLinkedModulesLinkedSlots([NotNull] CGModuleSlot slot)
			{
			}

			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x22361E0", Offset = "0x22361E0", VA = "0x22361E0")]
			public void ReInitializeLinkedSlots()
			{
			}

			[Token(Token = "0x6000E35")]
			[Address(RVA = "0x2236428", Offset = "0x2236428", VA = "0x2236428")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C3964", Offset = "0x10C3964")]
			public void ResetInputSlotsLastDataCount()
			{
			}

			[Token(Token = "0x6000E36")]
			[Address(RVA = "0x2234BC0", Offset = "0x2234BC0", VA = "0x2234BC0")]
			public void ResetLasRequestedParameters()
			{
			}

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0x223642C", Offset = "0x223642C", VA = "0x223642C")]
			public void ClearOutputData()
			{
			}

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0x2236544", Offset = "0x2236544", VA = "0x2236544")]
			public CGModuleInputSlot GetInputSlot(string name)
			{
				return null;
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0x22365E0", Offset = "0x22365E0", VA = "0x22365E0")]
			public CGModuleOutputSlot GetOutputSlot(string name)
			{
				return null;
			}

			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0x223667C", Offset = "0x223667C", VA = "0x223667C")]
			public void CheckInputModulesNotDirty()
			{
			}
		}

		[Token(Token = "0x20001CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4098", Offset = "0x10A4098")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400074A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGModule <>4__this;

			[Token(Token = "0x400074B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int id;

			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0x2234824", Offset = "0x2234824", VA = "0x2234824")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0x223482C", Offset = "0x223482C", VA = "0x223482C")]
			internal bool <SetUniqueIdINTERNAL>b__0(CGModule m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40A8", Offset = "0x10A40A8")]
		private sealed class <>c__DisplayClass105_0
		{
			[Token(Token = "0x400074C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGModuleSlot source;

			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CGModuleSlot target;

			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x22347CC", Offset = "0x22347CC", VA = "0x22347CC")]
			public <>c__DisplayClass105_0()
			{
			}

			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x22347D4", Offset = "0x22347D4", VA = "0x22347D4")]
			internal bool <GetLink>b__0(CGModuleLink t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001CE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40B8", Offset = "0x10A40B8")]
		private sealed class <>c__DisplayClass106_0
		{
			[Token(Token = "0x400074E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGModuleSlot source;

			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x22347F8", Offset = "0x22347F8", VA = "0x22347F8")]
			public <>c__DisplayClass106_0()
			{
			}

			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x2234800", Offset = "0x2234800", VA = "0x2234800")]
			internal bool <GetLinks>b__0(CGModuleLink t)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20001CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40C8", Offset = "0x10A40C8")]
		private sealed class <>c
		{
			[Token(Token = "0x400074F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGModuleInputSlot, bool> <>9__115_0;

			[Token(Token = "0x4000751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGModuleInputSlot, int> <>9__115_1;

			[Token(Token = "0x4000752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CGModuleOutputSlot, IEnumerable<CGModuleSlot>> <>9__116_0;

			[Token(Token = "0x4000753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGModuleSlot, bool> <>9__116_1;

			[Token(Token = "0x4000754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<CGModuleSlot, CGModule> <>9__116_2;

			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x22346F0", Offset = "0x22346F0", VA = "0x22346F0")]
			public <>c()
			{
			}

			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x22346F8", Offset = "0x22346F8", VA = "0x22346F8")]
			internal bool <initializeSort>b__115_0(CGModuleInputSlot t)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x2234714", Offset = "0x2234714", VA = "0x2234714")]
			internal int <initializeSort>b__115_1(CGModuleInputSlot t)
			{
				return default(int);
			}

			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x223476C", Offset = "0x223476C", VA = "0x223476C")]
			internal IEnumerable<CGModuleSlot> <decrementChilds>b__116_0(CGModuleOutputSlot outputSlot)
			{
				return null;
			}

			[Token(Token = "0x6000E46")]
			[Address(RVA = "0x2234788", Offset = "0x2234788", VA = "0x2234788")]
			internal bool <decrementChilds>b__116_1(CGModuleSlot t)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E47")]
			[Address(RVA = "0x22347B4", Offset = "0x22347B4", VA = "0x22347B4")]
			internal CGModule <decrementChilds>b__116_2(CGModuleSlot t)
			{
				return null;
			}
		}

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10B465C", Offset = "0x10B465C")]
		protected CurvyCGEvent m_OnBeforeRefresh;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10B46B8", Offset = "0x10B46B8")]
		[SerializeField]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private string m_ModuleName;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private bool m_Active;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10B4774", Offset = "0x10B4774")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10B4774", Offset = "0x10B4774")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10B4774", Offset = "0x10B4774")]
		[SerializeField]
		private bool m_RandomizeSeed;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		[SerializeField]
		private int m_Seed;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private int m_UniqueID;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CurvyGenerator generator;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isInitialized;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[NotNull]
		private readonly ResourceNamer resourceNamer;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[NotNull]
		private readonly InformationProvider informationProvider;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[NotNull]
		private readonly DirtinessManager dirtinessManager;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[NotNull]
		private readonly Slots slots;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[NotNull]
		private readonly Identifier identifier;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TupleElementNamesAttribute", RVA = "0x10B48E0", Offset = "0x10B48E0")]
		[NotNull]
		private readonly List<(UnityEngine.Component, string)> resourceManagers;

		[NonSerialized]
		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<string> UIMessages;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public CGModuleProperties Properties;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public List<CGModuleLink> InputLinks;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public List<CGModuleLink> OutputLinks;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B49BC", Offset = "0x10B49BC")]
		internal int SortAncestors;

		[Token(Token = "0x17000291")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8838", Offset = "0x10C8838")]
		[CanBeNull]
		public ModuleInfoAttribute Info
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x28BDE7C", Offset = "0x28BDE7C", VA = "0x28BDE7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		public CurvyCGEvent OnBeforeRefresh
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x28BE72C", Offset = "0x28BE72C", VA = "0x28BE72C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x28BE734", Offset = "0x28BE734", VA = "0x28BE734")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x28BE74C", Offset = "0x28BE74C", VA = "0x28BE74C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x28BE754", Offset = "0x28BE754", VA = "0x28BE754")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public string ModuleName
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x28BE83C", Offset = "0x28BE83C", VA = "0x28BE83C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x28BE844", Offset = "0x28BE844", VA = "0x28BE844")]
			set
			{
			}
		}

		[Token(Token = "0x17000295")]
		public bool Active
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x28BE8B0", Offset = "0x28BE8B0", VA = "0x28BE8B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x28BE8B8", Offset = "0x28BE8B8", VA = "0x28BE8B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public int Seed
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x28BE944", Offset = "0x28BE944", VA = "0x28BE944")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x28BE94C", Offset = "0x28BE94C", VA = "0x28BE94C")]
			set
			{
			}
		}

		[Token(Token = "0x17000297")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x28BE984", Offset = "0x28BE984", VA = "0x28BE984")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0x28BE98C", Offset = "0x28BE98C", VA = "0x28BE98C")]
			set
			{
			}
		}

		[Token(Token = "0x17000298")]
		public bool Dirty
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x28BE9AC", Offset = "0x28BE9AC", VA = "0x28BE9AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x28BE924", Offset = "0x28BE924", VA = "0x28BE924")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public virtual bool IsConfigured
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x28BE9C8", Offset = "0x28BE9C8", VA = "0x28BE9C8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029A")]
		public virtual bool IsInitialized
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x28BEA38", Offset = "0x28BEA38", VA = "0x28BEA38", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029B")]
		public CurvyGenerator Generator
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x28B98AC", Offset = "0x28B98AC", VA = "0x28B98AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029C")]
		public int UniqueID
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x28BEA40", Offset = "0x28BEA40", VA = "0x28BEA40")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x28BEA5C", Offset = "0x28BEA5C", VA = "0x28BEA5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8870", Offset = "0x10C8870")]
		public bool CircularReferenceError
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x28BEACC", Offset = "0x28BEACC", VA = "0x28BEACC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x28BEAFC", Offset = "0x28BEAFC", VA = "0x28BEAFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		[NotNull]
		public Dictionary<string, CGModuleInputSlot> InputByName
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x28BEB50", Offset = "0x28BEB50", VA = "0x28BEB50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029F")]
		[NotNull]
		public Dictionary<string, CGModuleOutputSlot> OutputByName
		{
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x28BEB6C", Offset = "0x28BEB6C", VA = "0x28BEB6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A0")]
		[NotNull]
		public List<CGModuleInputSlot> Input
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x28BE470", Offset = "0x28BE470", VA = "0x28BE470")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A1")]
		[NotNull]
		public List<CGModuleOutputSlot> Output
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x28BE48C", Offset = "0x28BE48C", VA = "0x28BE48C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x28BDD1C", Offset = "0x28BDD1C", VA = "0x28BDD1C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3730", Offset = "0x10C3730")]
		public int SetUniqueIdINTERNAL()
		{
			return default(int);
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x28BDE98", Offset = "0x28BDE98", VA = "0x28BDE98")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3740", Offset = "0x10C3740")]
		internal ModuleInfoAttribute getInfo()
		{
			return null;
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x28BDF9C", Offset = "0x28BDF9C", VA = "0x28BDF9C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3750", Offset = "0x10C3750")]
		public void renameManagedResourcesINTERNAL()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x28BE1C4", Offset = "0x28BE1C4", VA = "0x28BE1C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3760", Offset = "0x10C3760")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x28BE1E0", Offset = "0x28BE1E0", VA = "0x28BE1E0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3770", Offset = "0x10C3770")]
		public List<CGModuleInputSlot> GetInputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x28BE4A8", Offset = "0x28BE4A8", VA = "0x28BE4A8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C37A8", Offset = "0x10C37A8")]
		public List<CGModuleOutputSlot> GetOutputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x28BE76C", Offset = "0x28BE76C", VA = "0x28BE76C")]
		protected CurvyCGEventArgs OnBeforeRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x28BE7D4", Offset = "0x28BE7D4", VA = "0x28BE7D4")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x28BEB88", Offset = "0x28BEB88", VA = "0x28BEB88", Slot = "11")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x28BEB8C", Offset = "0x28BEB8C", VA = "0x28BEB8C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x28BED0C", Offset = "0x28BED0C", VA = "0x28BED0C", Slot = "12")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x28BF4CC", Offset = "0x28BF4CC", VA = "0x28BF4CC", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x28BF51C", Offset = "0x28BF51C", VA = "0x28BF51C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x28BF520", Offset = "0x28BF520", VA = "0x28BF520", Slot = "13")]
		public new virtual void Reset()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x28BF784", Offset = "0x28BF784", VA = "0x28BF784", Slot = "14")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x28BF7E8", Offset = "0x28BF7E8", VA = "0x28BF7E8", Slot = "15")]
		public virtual bool DeleteAllOutputManagedResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x28BF7F0", Offset = "0x28BF7F0", VA = "0x28BF7F0", Slot = "16")]
		public virtual void OnStateChange()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x28BF864", Offset = "0x28BF864", VA = "0x28BF864", Slot = "17")]
		public virtual void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000DEF")]
		protected static T GetRequestParameter<T>(ref CGDataRequestParameter[] requests) where T : CGDataRequestParameter
		{
			return null;
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x28BF874", Offset = "0x28BF874", VA = "0x28BF874")]
		protected static void RemoveRequestParameter(ref CGDataRequestParameter[] requests, CGDataRequestParameter request)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x28BF934", Offset = "0x28BF934", VA = "0x28BF934")]
		public CGModule()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x28BEC24", Offset = "0x28BEC24", VA = "0x28BEC24")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x28BFF7C", Offset = "0x28BFF7C", VA = "0x28BFF7C")]
		[CanBeNull]
		public CGModuleLink GetOutputLink(CGModuleOutputSlot outputSlot, CGModuleInputSlot inputSlot)
		{
			return null;
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x28C008C", Offset = "0x28C008C", VA = "0x28C008C")]
		[NotNull]
		public List<CGModuleLink> GetOutputLinks(CGModuleOutputSlot outputSlot)
		{
			return null;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x28C01A4", Offset = "0x28C01A4", VA = "0x28C01A4")]
		[CanBeNull]
		public CGModuleLink GetInputLink(CGModuleInputSlot inputSlot, CGModuleOutputSlot outputSlot)
		{
			return null;
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x28C01AC", Offset = "0x28C01AC", VA = "0x28C01AC")]
		[NotNull]
		public List<CGModuleLink> GetInputLinks(CGModuleInputSlot inputSlot)
		{
			return null;
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x28C01B4", Offset = "0x28C01B4", VA = "0x28C01B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3820", Offset = "0x10C3820")]
		public CGModule CopyTo(CurvyGenerator targetGenerator)
		{
			return null;
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x28C02E8", Offset = "0x28C02E8", VA = "0x28C02E8")]
		public UnityEngine.Component AddManagedResource([NotNull] string resourceName, string context = "", int index = -1)
		{
			return null;
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x28BF3EC", Offset = "0x28BF3EC", VA = "0x28BF3EC")]
		public void DeleteManagedResource(string resourceName, UnityEngine.Component res, [NotNull] string context = "", bool dontUsePool = false)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x28C07C4", Offset = "0x28C07C4", VA = "0x28C07C4")]
		public bool IsManagedResource(UnityEngine.Component res)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x28C08AC", Offset = "0x28C08AC", VA = "0x28C08AC")]
		public List<IPool> GetAllPrefabPools()
		{
			return null;
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x28C093C", Offset = "0x28C093C", VA = "0x28C093C")]
		public void DeleteAllPrefabPools()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x28C09CC", Offset = "0x28C09CC", VA = "0x28C09CC")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x28C0A10", Offset = "0x28C0A10", VA = "0x28C0A10")]
		public CGModuleInputSlot GetInputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x28B99C8", Offset = "0x28B99C8", VA = "0x28B99C8")]
		public CGModuleOutputSlot GetOutputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x28BEEC0", Offset = "0x28BEEC0", VA = "0x28BEEC0")]
		public bool GetManagedResources(out List<UnityEngine.Component> components, out List<string> resourceNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x28BFE80", Offset = "0x28BFE80", VA = "0x28BFE80")]
		private void SetModuleName()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x28BE1A8", Offset = "0x28BE1A8", VA = "0x28BE1A8")]
		protected void RenameResource([NotNull] string resourceName, UnityEngine.Component resource, int index = -1)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x28BFF84", Offset = "0x28BFF84", VA = "0x28BFF84")]
		[CanBeNull]
		private static CGModuleLink GetLink(List<CGModuleLink> lst, CGModuleSlot source, CGModuleSlot target)
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x28C0094", Offset = "0x28C0094", VA = "0x28C0094")]
		[NotNull]
		private static List<CGModuleLink> GetLinks(List<CGModuleLink> lst, CGModuleSlot source)
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x28C0A2C", Offset = "0x28C0A2C", VA = "0x28C0A2C")]
		protected PrefabPool GetPrefabPool(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x28C0B5C", Offset = "0x28C0B5C", VA = "0x28C0B5C")]
		protected bool TryDeleteChildrenFromAssociatedPrefab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x28C0B64", Offset = "0x28C0B64", VA = "0x28C0B64")]
		internal void doRefresh()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x28C0CC0", Offset = "0x28C0CC0", VA = "0x28C0CC0")]
		private bool usesRandom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x28C0D14", Offset = "0x28C0D14", VA = "0x28C0D14")]
		public void checkOnStateChangedINTERNAL()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x28BFCA4", Offset = "0x28BFCA4", VA = "0x28BFCA4")]
		[NotNull]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3878", Offset = "0x10C3878")]
		private List<(UnityEngine.Component, string)> GetResourceManagers()
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x28C0D30", Offset = "0x28C0D30", VA = "0x28C0D30", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x28C0DC0", Offset = "0x28C0DC0", VA = "0x28C0DC0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C38C4", Offset = "0x10C38C4")]
		internal void initializeSort()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x28C0FE4", Offset = "0x28C0FE4", VA = "0x28C0FE4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C38D4", Offset = "0x10C38D4")]
		internal List<CGModule> decrementChilds()
		{
			return null;
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x28C17C4", Offset = "0x28C17C4", VA = "0x28C17C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C38E4", Offset = "0x10C38E4")]
		private bool <Reset>b__80_0(CGModule m)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public class CGModuleInputSlot : CGModuleSlot
	{
		[Serializable]
		[Token(Token = "0x20001D1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40D8", Offset = "0x10A40D8")]
		private sealed class <>c__14<T> where T : CGData
		{
			[Token(Token = "0x4000755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__14<T> <>9;

			[Token(Token = "0x4000756")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<CGData, bool> <>9__14_0;

			[Token(Token = "0x4000757")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<CGData, bool> <>9__14_1;

			[Token(Token = "0x6000E58")]
			public <>c__14()
			{
			}

			[Token(Token = "0x6000E59")]
			internal bool <GetData>b__14_0(CGData d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E5A")]
			internal bool <GetData>b__14_1(CGData d)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AB")]
		public InputSlotInfo InputInfo
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x28C1880", Offset = "0x28C1880", VA = "0x28C1880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x28C18E4", Offset = "0x28C18E4", VA = "0x28C18E4")]
		public CGModuleInputSlot()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x28C18F4", Offset = "0x28C18F4", VA = "0x28C18F4", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x28C1E04", Offset = "0x28C1E04", VA = "0x28C1E04", Slot = "4")]
		public override void LinkTo(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x28C21E8", Offset = "0x28C21E8", VA = "0x28C21E8", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x28C246C", Offset = "0x28C246C", VA = "0x28C246C")]
		public CGModuleOutputSlot SourceSlot(int index = 0)
		{
			return null;
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x28C259C", Offset = "0x28C259C", VA = "0x28C259C")]
		public bool CanLinkTo(CGModuleOutputSlot source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x28C2788", Offset = "0x28C2788", VA = "0x28C2788")]
		public static bool AreInputAndOutputSlotsCompatible(InputSlotInfo inputSlotInfo, bool inputSlotModuleIsOnRequest, OutputSlotInfo outputSlotInfo, bool outputSlotModuleIsOnRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x28C2808", Offset = "0x28C2808", VA = "0x28C2808")]
		private CGModule SourceModule(int index)
		{
			return null;
		}

		[Token(Token = "0x6000E51")]
		[CanBeNull]
		public T GetData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E52")]
		[CanBeNull]
		public T GetData<T>(out bool isDataDisposable, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E53")]
		[NotNull]
		public List<T> GetAllData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E54")]
		[NotNull]
		public List<T> GetAllData<T>(out bool isDataDisposable, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E55")]
		[NotNull]
		private CGData[] GetData<T>(int slotIndex, out bool isDataDisposable, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E56")]
		[NotNull]
		private static CGData[] CloneData<T>([NotNull] CGData[] source) where T : CGData
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class CGModuleLink
	{
		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_ModuleID;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_TargetModuleID;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string m_TargetSlotName;

		[Token(Token = "0x170002AC")]
		public int ModuleID
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x28C28A8", Offset = "0x28C28A8", VA = "0x28C28A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AD")]
		public string SlotName
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x28C28B0", Offset = "0x28C28B0", VA = "0x28C28B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		public int TargetModuleID
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x28C28B8", Offset = "0x28C28B8", VA = "0x28C28B8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002AF")]
		public string TargetSlotName
		{
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x28C28C0", Offset = "0x28C28C0", VA = "0x28C28C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x28C28C8", Offset = "0x28C28C8", VA = "0x28C28C8")]
		public CGModuleLink(int sourceID, string sourceSlotName, int targetID, string targetSlotName)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x28C1CFC", Offset = "0x28C1CFC", VA = "0x28C1CFC")]
		public CGModuleLink(CGModuleSlot source, CGModuleSlot target)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x28C2988", Offset = "0x28C2988", VA = "0x28C2988")]
		public bool IsSame(CGModuleLink o)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x28C2A00", Offset = "0x28C2A00", VA = "0x28C2A00")]
		public bool IsSame(CGModuleSlot source, CGModuleSlot target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x28C2B2C", Offset = "0x28C2B2C", VA = "0x28C2B2C")]
		public bool IsTo(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x28C2BD8", Offset = "0x28C2BD8", VA = "0x28C2BD8")]
		public bool IsFrom(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x28C2C84", Offset = "0x28C2C84", VA = "0x28C2C84")]
		public bool IsUsing(CGModule module)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x28C2CF4", Offset = "0x28C2CF4", VA = "0x28C2CF4")]
		public bool IsBetween(CGModuleSlot one, CGModuleSlot another)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x28C2D6C", Offset = "0x28C2D6C", VA = "0x28C2D6C")]
		public void SetModuleIDIINTERNAL(int moduleID, int targetModuleID)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x28C1CF0", Offset = "0x28C1CF0", VA = "0x28C1CF0")]
		public static implicit operator bool(CGModuleLink a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x28C2D78", Offset = "0x28C2D78", VA = "0x28C2D78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class CGModuleOutputSlot : CGModuleSlot
	{
		[Serializable]
		[Token(Token = "0x20001D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40E8", Offset = "0x10A40E8")]
		private sealed class <>c__15<T> where T : CGData
		{
			[Token(Token = "0x400075E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__15<T> <>9;

			[Token(Token = "0x400075F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, bool> <>9__15_0;

			[Token(Token = "0x6000E7B")]
			public <>c__15()
			{
			}

			[Token(Token = "0x6000E7C")]
			internal bool <SetData>b__15_0(T d)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20001D5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A40F8", Offset = "0x10A40F8")]
		private sealed class <>c
		{
			[Token(Token = "0x4000760")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000761")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGData, bool> <>9__16_0;

			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x2236A34", Offset = "0x2236A34", VA = "0x2236A34")]
			public <>c()
			{
			}

			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x2236A3C", Offset = "0x2236A3C", VA = "0x2236A3C")]
			internal bool <SetData>b__16_0(CGData d)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[NotNull]
		[ItemNotNull]
		private CGData[] data;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[CanBeNull]
		public CGDataRequestParameter[] LastRequestParameters;

		[Token(Token = "0x170002B0")]
		[ItemNotNull]
		[NotNull]
		public CGData[] Data
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0x28C2F78", Offset = "0x28C2F78", VA = "0x28C2F78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0x28C2F80", Offset = "0x28C2F80", VA = "0x28C2F80")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C39FC", Offset = "0x10C39FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		[CanBeNull]
		public OutputSlotInfo OutputInfo
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x28C2708", Offset = "0x28C2708", VA = "0x28C2708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B2")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8990", Offset = "0x10C8990")]
		public bool HasData
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0x28C39B0", Offset = "0x28C39B0", VA = "0x28C39B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x28C2F88", Offset = "0x28C2F88", VA = "0x28C2F88", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x28C3380", Offset = "0x28C3380", VA = "0x28C3380", Slot = "4")]
		public override void LinkTo(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x28C33C8", Offset = "0x28C33C8", VA = "0x28C33C8", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x28C34FC", Offset = "0x28C34FC", VA = "0x28C34FC")]
		public void ClearData()
		{
		}

		[Token(Token = "0x6000E71")]
		public void SetDataToElement<T>([NotNull] T element) where T : CGData
		{
		}

		[Token(Token = "0x6000E72")]
		public void SetDataToCollection<T>([ItemNotNull][NotNull] T[] elements) where T : CGData
		{
		}

		[Token(Token = "0x6000E74")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3A34", Offset = "0x10C3A34")]
		public void SetData<T>([ItemNotNull][CanBeNull] List<T> newData) where T : CGData
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x28C39D4", Offset = "0x28C39D4", VA = "0x28C39D4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3A6C", Offset = "0x10C3A6C")]
		public void SetData([CanBeNull] params CGData[] newData)
		{
		}

		[Token(Token = "0x6000E76")]
		[CanBeNull]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3AA4", Offset = "0x10C3AA4")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E77")]
		[CanBeNull]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3AF0", Offset = "0x10C3AF0")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x28C35D0", Offset = "0x28C35D0", VA = "0x28C35D0")]
		private void AssignNewData([ItemNotNull][NotNull] CGData[] newData)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x28C3C08", Offset = "0x28C3C08", VA = "0x28C3C08")]
		public CGModuleOutputSlot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public class CGModuleProperties
	{
		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect Dimensions;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinWidth;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LabelWidth;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color BackgroundColor;

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x28BFC68", Offset = "0x28BFC68", VA = "0x28BFC68")]
		public CGModuleProperties()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class CGModuleSlot
	{
		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4AE4", Offset = "0x10B4AE4")]
		private CGModule <Module>k__BackingField;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4AF4", Offset = "0x10B4AF4")]
		private SlotInfo <Info>k__BackingField;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4B04", Offset = "0x10B4B04")]
		private Vector2 <Origin>k__BackingField;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4B14", Offset = "0x10B4B14")]
		private Rect <DropZone>k__BackingField;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<CGModuleSlot> mLinkedSlots;

		[Token(Token = "0x170002B3")]
		public CGModule Module
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x28C3CEC", Offset = "0x28C3CEC", VA = "0x28C3CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B3C", Offset = "0x10C3B3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0x28C3CF4", Offset = "0x28C3CF4", VA = "0x28C3CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B4C", Offset = "0x10C3B4C")]
			internal set
			{
			}
		}

		[Token(Token = "0x170002B4")]
		public SlotInfo Info
		{
			[Token(Token = "0x6000E83")]
			[Address(RVA = "0x28C3CFC", Offset = "0x28C3CFC", VA = "0x28C3CFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B5C", Offset = "0x10C3B5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0x28C3D04", Offset = "0x28C3D04", VA = "0x28C3D04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B6C", Offset = "0x10C3B6C")]
			internal set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public Vector2 Origin
		{
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x28C3D0C", Offset = "0x28C3D0C", VA = "0x28C3D0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B7C", Offset = "0x10C3B7C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000E86")]
			[Address(RVA = "0x28C3D14", Offset = "0x28C3D14", VA = "0x28C3D14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B8C", Offset = "0x10C3B8C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public Rect DropZone
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0x28C3D1C", Offset = "0x28C3D1C", VA = "0x28C3D1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3B9C", Offset = "0x10C3B9C")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x28C3D28", Offset = "0x28C3D28", VA = "0x28C3D28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3BAC", Offset = "0x10C3BAC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public bool IsLinked
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0x28C3D34", Offset = "0x28C3D34", VA = "0x28C3D34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B8")]
		public bool IsLinkedAndConfigured
		{
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0x28C3D98", Offset = "0x28C3D98", VA = "0x28C3D98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B9")]
		public IOnRequestProcessing OnRequestModule
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0x28C26BC", Offset = "0x28C26BC", VA = "0x28C26BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BA")]
		public IPathProvider PathProvider
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0x28C3E7C", Offset = "0x28C3E7C", VA = "0x28C3E7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BB")]
		public IExternalInput ExternalInput
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0x28C3EC8", Offset = "0x28C3EC8", VA = "0x28C3EC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BC")]
		public List<CGModuleSlot> LinkedSlots
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0x28C1734", Offset = "0x28C1734", VA = "0x28C1734")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BD")]
		public int Count
		{
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x28C254C", Offset = "0x28C254C", VA = "0x28C254C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BE")]
		public string Name
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x28C2930", Offset = "0x28C2930", VA = "0x28C2930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x28C18EC", Offset = "0x28C18EC", VA = "0x28C18EC")]
		public CGModuleSlot()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x28C1E4C", Offset = "0x28C1E4C", VA = "0x28C1E4C")]
		public bool HasLinkTo(CGModuleSlot other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x28C3F14", Offset = "0x28C3F14", VA = "0x28C3F14")]
		public List<CGModule> GetLinkedModules()
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x28C20DC", Offset = "0x28C20DC", VA = "0x28C20DC", Slot = "4")]
		public virtual void LinkTo(CGModuleSlot other)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x28C1F14", Offset = "0x28C1F14", VA = "0x28C1F14")]
		protected static void LinkInputAndOutput(CGModuleSlot inputSlot, CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x28C231C", Offset = "0x28C231C", VA = "0x28C231C", Slot = "5")]
		public virtual void UnlinkFrom([NotNull] CGModuleSlot other)
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x28C4038", Offset = "0x28C4038", VA = "0x28C4038", Slot = "6")]
		public virtual void UnlinkAll()
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x28C1DF8", Offset = "0x28C1DF8", VA = "0x28C1DF8")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x28C1CEC", Offset = "0x28C1CEC", VA = "0x28C1CEC", Slot = "7")]
		protected virtual void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x28C41A4", Offset = "0x28C41A4", VA = "0x28C41A4")]
		public void SetInfoFromField(FieldInfo fieldInfo)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x28C44D4", Offset = "0x28C44D4", VA = "0x28C44D4")]
		public static implicit operator bool(CGModuleSlot a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x28C44E0", Offset = "0x28C44E0", VA = "0x28C44E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001D8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A4108", Offset = "0x10A4108")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A4108", Offset = "0x10A4108")]
	public sealed class ResourceLoaderAttribute : Attribute
	{
		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ResourceName;

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x1CC2EA4", Offset = "0x1CC2EA4", VA = "0x1CC2EA4")]
		public ResourceLoaderAttribute([NotNull] string resName)
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public static class CGResourceHandler
	{
		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, ICGResourceLoader> resourceLoadersCache;

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x28BBA9C", Offset = "0x28BBA9C", VA = "0x28BBA9C")]
		public static void RegisterResourceLoader(string resourceName, ICGResourceLoader loader)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x28C040C", Offset = "0x28C040C", VA = "0x28C040C")]
		[NotNull]
		public static UnityEngine.Component CreateResource(CGModule module, [NotNull] string resName, [NotNull] string context)
		{
			return null;
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x28C05E4", Offset = "0x28C05E4", VA = "0x28C05E4")]
		public static void DestroyResource(CGModule module, [NotNull] string resName, UnityEngine.Component obj, [NotNull] string context, bool kill)
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class CGSplineResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x28C8720", Offset = "0x28C8720", VA = "0x28C8720")]
		[AttributeAttribute(Name = "EnvironmentAgnosticInitializeOnLoadMethodAttribute", RVA = "0x10C3BCC", Offset = "0x10C3BCC")]
		protected static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x28C87C4", Offset = "0x28C87C4", VA = "0x28C87C4", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x28C88C0", Offset = "0x28C88C0", VA = "0x28C88C0", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x28C87BC", Offset = "0x28C87BC", VA = "0x28C87BC")]
		public CGSplineResourceLoader()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class CGShapeResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x28C8510", Offset = "0x28C8510", VA = "0x28C8510")]
		[AttributeAttribute(Name = "EnvironmentAgnosticInitializeOnLoadMethodAttribute", RVA = "0x10C3BE0", Offset = "0x10C3BE0")]
		protected static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x28C85B4", Offset = "0x28C85B4", VA = "0x28C85B4", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x28C8684", Offset = "0x28C8684", VA = "0x28C8684", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x28C85AC", Offset = "0x28C85AC", VA = "0x28C85AC")]
		public CGShapeResourceLoader()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class CGMeshResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x28BD960", Offset = "0x28BD960", VA = "0x28BD960")]
		[AttributeAttribute(Name = "EnvironmentAgnosticInitializeOnLoadMethodAttribute", RVA = "0x10C3BF4", Offset = "0x10C3BF4")]
		protected static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x28BDA04", Offset = "0x28BDA04", VA = "0x28BDA04", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x28BDA84", Offset = "0x28BDA84", VA = "0x28BDA84", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x28BD9FC", Offset = "0x28BD9FC", VA = "0x28BD9FC")]
		public CGMeshResourceLoader()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class CGGameObjectResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x28BB9F8", Offset = "0x28BB9F8", VA = "0x28BB9F8")]
		[AttributeAttribute(Name = "EnvironmentAgnosticInitializeOnLoadMethodAttribute", RVA = "0x10C3C08", Offset = "0x10C3C08")]
		protected static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x28BBBD4", Offset = "0x28BBBD4", VA = "0x28BBBD4", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x28BBCFC", Offset = "0x28BBCFC", VA = "0x28BBCFC", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x28BBA94", Offset = "0x28BBA94", VA = "0x28BBA94")]
		public CGGameObjectResourceLoader()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001DE")]
	public class CGGameObjectResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transform> Items;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> PoolNames;

		[Token(Token = "0x170002BF")]
		public int Count
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0x28BB888", Offset = "0x28BB888", VA = "0x28BB888", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002C0")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0x28BB8D4", Offset = "0x28BB8D4", VA = "0x28BB8D4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x28BB928", Offset = "0x28BB928", VA = "0x28BB928")]
		public CGGameObjectResourceCollection()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public static class CGUtility
	{
		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x28C98C0", Offset = "0x28C98C0", VA = "0x28C98C0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3C1C", Offset = "0x10C3C1C")]
		public static Vector2[] CalculateUV2(Vector2[] uv)
		{
			return null;
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x28C9930", Offset = "0x28C9930", VA = "0x28C9930")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3C54", Offset = "0x10C3C54")]
		public static void CalculateUV2(Vector2[] uv, Vector2[] uv2, int elementsNumber)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x28C9A10", Offset = "0x28C9A10", VA = "0x28C9A10")]
		public static List<ControlPointOption> GetControlPointsWithOptions(CGDataRequestMetaCGOptions options, CurvySpline shape, float startDist, float endDist, bool optimize, out int initialMaterialID, out float initialMaxStep)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E0")]
	[ExecuteAlways]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4158", Offset = "0x10A4158")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10A4158", Offset = "0x10A4158")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A4158", Offset = "0x10A4158")]
	public class CurvyGenerator : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x20001E1")]
		private class ModuleSorter
		{
			[Serializable]
			[Token(Token = "0x20001E2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4210", Offset = "0x10A4210")]
			private sealed class <>c
			{
				[Token(Token = "0x4000781")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x4000782")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public static Func<CGModuleInputSlot, bool> <>9__8_1;

				[Token(Token = "0x4000783")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public static Func<CGModuleInputSlot, int> <>9__8_2;

				[Token(Token = "0x4000784")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public static Comparison<CGModule> <>9__8_0;

				[Token(Token = "0x4000785")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public static Func<CGModuleOutputSlot, IEnumerable<CGModuleSlot>> <>9__8_3;

				[Token(Token = "0x6000F02")]
				[Address(RVA = "0x1DE6D68", Offset = "0x1DE6D68", VA = "0x1DE6D68")]
				public <>c()
				{
				}

				[Token(Token = "0x6000F03")]
				[Address(RVA = "0x1DE6D70", Offset = "0x1DE6D70", VA = "0x1DE6D70")]
				internal bool <Sort>b__8_1(CGModuleInputSlot t)
				{
					return default(bool);
				}

				[Token(Token = "0x6000F04")]
				[Address(RVA = "0x1DE6D8C", Offset = "0x1DE6D8C", VA = "0x1DE6D8C")]
				internal int <Sort>b__8_2(CGModuleInputSlot t)
				{
					return default(int);
				}

				[Token(Token = "0x6000F05")]
				[Address(RVA = "0x1DE6DE4", Offset = "0x1DE6DE4", VA = "0x1DE6DE4")]
				internal int <Sort>b__8_0(CGModule a, CGModule b)
				{
					return default(int);
				}

				[Token(Token = "0x6000F06")]
				[Address(RVA = "0x1DE6E3C", Offset = "0x1DE6E3C", VA = "0x1DE6E3C")]
				internal IEnumerable<CGModuleSlot> <Sort>b__8_3(CGModuleOutputSlot outputSlot)
				{
					return null;
				}
			}

			[Token(Token = "0x400077E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ItemNotNull]
			[NotNull]
			private readonly HashSet<CGModule> modulesWithCircularReferences;

			[Token(Token = "0x400077F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[NotNull]
			private readonly Dictionary<CGModule, int> modulesAncestorCount;

			[Token(Token = "0x4000780")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4E88", Offset = "0x10B4E88")]
			private bool <SortingNeeded>k__BackingField;

			[Token(Token = "0x170002CC")]
			public bool SortingNeeded
			{
				[Token(Token = "0x6000EFB")]
				[Address(RVA = "0x2238F64", Offset = "0x2238F64", VA = "0x2238F64")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3E74", Offset = "0x10C3E74")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000EFC")]
				[Address(RVA = "0x2238F6C", Offset = "0x2238F6C", VA = "0x2238F6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3E84", Offset = "0x10C3E84")]
				set
				{
				}
			}

			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0x2238F78", Offset = "0x2238F78", VA = "0x2238F78")]
			public bool HasCircularReference([NotNull] CGModule module)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x2238FDC", Offset = "0x2238FDC", VA = "0x2238FDC")]
			public void EnsureIsSorted(List<CGModule> modules)
			{
			}

			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0x2239008", Offset = "0x2239008", VA = "0x2239008")]
			private void Sort([NotNull] List<CGModule> modules)
			{
			}

			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x2239C54", Offset = "0x2239C54", VA = "0x2239C54")]
			public ModuleSorter()
			{
			}
		}

		[Token(Token = "0x20001E3")]
		private class ModulesSynchronizer
		{
			[Token(Token = "0x4000786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool hasPendingRequest;

			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x2239D2C", Offset = "0x2239D2C", VA = "0x2239D2C")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C3E94", Offset = "0x10C3E94")]
			public void RequestSynchronization()
			{
			}

			[Token(Token = "0x6000F08")]
			[Address(RVA = "0x2239D38", Offset = "0x2239D38", VA = "0x2239D38")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C3ECC", Offset = "0x10C3ECC")]
			public void CancelRequests()
			{
			}

			[Token(Token = "0x6000F09")]
			[Address(RVA = "0x2239D40", Offset = "0x2239D40", VA = "0x2239D40")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C3F04", Offset = "0x10C3F04")]
			public void ProcessRequests([NotNull] CurvyGenerator curvyGenerator)
			{
			}

			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0x2239D50", Offset = "0x2239D50", VA = "0x2239D50")]
			[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C3F3C", Offset = "0x10C3F3C")]
			private static void AddMissingChildModules([NotNull] CurvyGenerator curvyGenerator)
			{
			}

			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0x2239ED8", Offset = "0x2239ED8", VA = "0x2239ED8")]
			public ModulesSynchronizer()
			{
			}
		}

		[Token(Token = "0x20001E4")]
		private class Timer
		{
			[Token(Token = "0x4000787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double lastTimestamp;

			[Token(Token = "0x170002CD")]
			private static double Now
			{
				[Token(Token = "0x6000F0C")]
				[Address(RVA = "0x2239EE0", Offset = "0x2239EE0", VA = "0x2239EE0")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x2239EE8", Offset = "0x2239EE8", VA = "0x2239EE8")]
			private void ValidateTimes(float timeLimit, float editorTimeLimit)
			{
			}

			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0x2239F30", Offset = "0x2239F30", VA = "0x2239F30")]
			public bool Update(float timeLimit, float editorTimeLimit)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0x2239FB4", Offset = "0x2239FB4", VA = "0x2239FB4")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x2239FBC", Offset = "0x2239FBC", VA = "0x2239FBC")]
			public Timer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4220", Offset = "0x10A4220")]
		private sealed class <>c
		{
			[Token(Token = "0x4000788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000789")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGModule, int> <>9__10_0;

			[Token(Token = "0x400078A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGModule, int> <>9__36_0;

			[Token(Token = "0x400078B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CGModule, CGModule> <>9__36_1;

			[Token(Token = "0x400078C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGModule, bool> <>9__56_0;

			[Token(Token = "0x400078D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<CGModule, float> <>9__56_1;

			[Token(Token = "0x400078E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<CGModule, bool> <>9__62_0;

			[Token(Token = "0x400078F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<CGModule, int> <>9__84_0;

			[Token(Token = "0x4000790")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Action<CGModule> <>9__85_0;

			[Token(Token = "0x4000791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Func<CGModuleInputSlot, IEnumerable<CGModule>> <>9__87_0;

			[Token(Token = "0x4000792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Func<CGModule, float> <>9__87_1;

			[Token(Token = "0x4000793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static Func<CGModuleInputSlot, IEnumerable<CGModule>> <>9__88_0;

			[Token(Token = "0x4000794")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static Func<CGModule, int> <>9__91_0;

			[Token(Token = "0x4000795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static Func<IGrouping<int, CGModule>, bool> <>9__91_1;

			[Token(Token = "0x4000796")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static Func<CGModule, bool> <>9__93_0;

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0x2238A90", Offset = "0x2238A90", VA = "0x2238A90")]
			public <>c()
			{
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x2238A98", Offset = "0x2238A98", VA = "0x2238A98")]
			internal int <get_m_LastModuleID>b__10_0(CGModule m)
			{
				return default(int);
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0x2238AB4", Offset = "0x2238AB4", VA = "0x2238AB4")]
			internal int <get_ModulesByID>b__36_0(CGModule m)
			{
				return default(int);
			}

			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x2238AD0", Offset = "0x2238AD0", VA = "0x2238AD0")]
			internal CGModule <get_ModulesByID>b__36_1(CGModule m)
			{
				return null;
			}

			[Token(Token = "0x6000F16")]
			[Address(RVA = "0x2238AD8", Offset = "0x2238AD8", VA = "0x2238AD8")]
			internal bool <ReorderModules>b__56_0(CGModule m)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F17")]
			[Address(RVA = "0x2238B38", Offset = "0x2238B38", VA = "0x2238B38")]
			internal float <ReorderModules>b__56_1(CGModule m)
			{
				return default(float);
			}

			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x2238B60", Offset = "0x2238B60", VA = "0x2238B60")]
			internal bool <GetModules>b__62_0(CGModule t)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x2238BB8", Offset = "0x2238BB8", VA = "0x2238BB8")]
			internal int <CorrectDuplicateModuleIDs>b__84_0(CGModule module)
			{
				return default(int);
			}

			[Token(Token = "0x6000F1A")]
			[Address(RVA = "0x2238BD4", Offset = "0x2238BD4", VA = "0x2238BD4")]
			internal void <ResetAllModuleLinks>b__85_0(CGModule m)
			{
			}

			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0x2238C48", Offset = "0x2238C48", VA = "0x2238C48")]
			internal IEnumerable<CGModule> <ReorderEndpointRecursiveInputs>b__87_0(CGModuleInputSlot i)
			{
				return null;
			}

			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0x2238C64", Offset = "0x2238C64", VA = "0x2238C64")]
			internal float <ReorderEndpointRecursiveInputs>b__87_1(CGModule m)
			{
				return default(float);
			}

			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0x2238C8C", Offset = "0x2238C8C", VA = "0x2238C8C")]
			internal IEnumerable<CGModule> <UpdateModulesRecursiveInputs>b__88_0(CGModuleInputSlot i)
			{
				return null;
			}

			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0x2238CA8", Offset = "0x2238CA8", VA = "0x2238CA8")]
			internal int <get_HasModulesWithSameID>b__91_0(CGModule module)
			{
				return default(int);
			}

			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0x2238CC4", Offset = "0x2238CC4", VA = "0x2238CC4")]
			internal bool <get_HasModulesWithSameID>b__91_1(IGrouping<int, CGModule> group)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F20")]
			[Address(RVA = "0x2238D1C", Offset = "0x2238D1C", VA = "0x2238D1C")]
			internal bool <SaveAllOutputManagedResources>b__93_0(CGModule m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4230", Offset = "0x10A4230")]
		private sealed class <>c__DisplayClass64_0
		{
			[Token(Token = "0x4000797")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int moduleID;

			[Token(Token = "0x6000F21")]
			[Address(RVA = "0x2238D98", Offset = "0x2238D98", VA = "0x2238D98")]
			public <>c__DisplayClass64_0()
			{
			}

			[Token(Token = "0x6000F22")]
			[Address(RVA = "0x2238DA0", Offset = "0x2238DA0", VA = "0x2238DA0")]
			internal bool <GetModule>b__0(CGModule m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4240", Offset = "0x10A4240")]
		private sealed class <>c__DisplayClass78_0
		{
			[Token(Token = "0x4000798")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGModule module;

			[Token(Token = "0x4000799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int id;

			[Token(Token = "0x6000F23")]
			[Address(RVA = "0x2238DDC", Offset = "0x2238DDC", VA = "0x2238DDC")]
			public <>c__DisplayClass78_0()
			{
			}

			[Token(Token = "0x6000F24")]
			[Address(RVA = "0x2238DE4", Offset = "0x2238DE4", VA = "0x2238DE4")]
			internal bool <GetModuleUniqueID>b__0(CGModule m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4250", Offset = "0x10A4250")]
		private sealed class <>c__DisplayClass81_0
		{
			[Token(Token = "0x400079A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGModule module;

			[Token(Token = "0x400079B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string uniqueName;

			[Token(Token = "0x6000F25")]
			[Address(RVA = "0x2238E34", Offset = "0x2238E34", VA = "0x2238E34")]
			public <>c__DisplayClass81_0()
			{
			}

			[Token(Token = "0x6000F26")]
			[Address(RVA = "0x2238E3C", Offset = "0x2238E3C", VA = "0x2238E3C")]
			internal bool <IsModuleNameUnique>b__0(CGModule m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4260", Offset = "0x10A4260")]
		private sealed class <>c__DisplayClass88_0
		{
			[Token(Token = "0x400079C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs;

			[Token(Token = "0x6000F27")]
			[Address(RVA = "0x2238E9C", Offset = "0x2238E9C", VA = "0x2238E9C")]
			public <>c__DisplayClass88_0()
			{
			}

			[Token(Token = "0x6000F28")]
			[Address(RVA = "0x2238EA4", Offset = "0x2238EA4", VA = "0x2238EA4")]
			internal IEnumerable<CGModule> <UpdateModulesRecursiveInputs>b__1(CGModule i)
			{
				return null;
			}
		}

		[Token(Token = "0x20001EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4270", Offset = "0x10A4270")]
		private sealed class <>c__DisplayClass93_0
		{
			[Token(Token = "0x400079D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject result;

			[Token(Token = "0x6000F29")]
			[Address(RVA = "0x2238EB0", Offset = "0x2238EB0", VA = "0x2238EB0")]
			public <>c__DisplayClass93_0()
			{
			}

			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0x2238EB8", Offset = "0x2238EB8", VA = "0x2238EB8")]
			internal void <SaveAllOutputManagedResources>b__1(CGModule m)
			{
			}
		}

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B4B24", Offset = "0x10B4B24")]
		private bool m_ShowDebug;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B4B70", Offset = "0x10B4B70")]
		[SerializeField]
		private bool m_AutoRefresh;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Positive]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B4BBC", Offset = "0x10B4BBC")]
		private int m_RefreshDelay;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B4C9C", Offset = "0x10B4C9C")]
		[Positive]
		[SerializeField]
		private int m_RefreshDelayEditor;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B4D7C", Offset = "0x10B4D7C")]
		[SerializeField]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<CGModule> Modules;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B4E00", Offset = "0x10B4E00")]
		private bool <Destroying>k__BackingField;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool isInitialized;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool isInitializedPhaseOne;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PoolManager poolManager;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[NotNull]
		private readonly Timer autoRefreshTimer;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[NotNull]
		private readonly ModuleSorter moduleSorter;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[NotNull]
		private readonly ModulesSynchronizer modulesSynchronizer;

		[Token(Token = "0x400077C")]
		private const int ModulesReorderingDeltaX = 50;

		[Token(Token = "0x400077D")]
		private const int ModulesReorderingDeltaY = 20;

		[Token(Token = "0x170002C1")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C89C8", Offset = "0x10C89C8")]
		internal int m_LastModuleID
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0x254F044", Offset = "0x254F044", VA = "0x254F044")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0x254F168", Offset = "0x254F168", VA = "0x254F168")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public bool ShowDebug
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0x254F1BC", Offset = "0x254F1BC", VA = "0x254F1BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0x254F1C4", Offset = "0x254F1C4", VA = "0x254F1C4")]
			set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public bool AutoRefresh
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0x254F1E4", Offset = "0x254F1E4", VA = "0x254F1E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0x254F1EC", Offset = "0x254F1EC", VA = "0x254F1EC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public int RefreshDelay
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0x254F20C", Offset = "0x254F20C", VA = "0x254F20C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0x254F214", Offset = "0x254F214", VA = "0x254F214")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public int RefreshDelayEditor
		{
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0x254F24C", Offset = "0x254F24C", VA = "0x254F24C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0x254F254", Offset = "0x254F254", VA = "0x254F254")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0x2545C94", Offset = "0x2545C94", VA = "0x2545C94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C7")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0x254F28C", Offset = "0x254F28C", VA = "0x254F28C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0x254F294", Offset = "0x254F294", VA = "0x254F294")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x254F2AC", Offset = "0x254F2AC", VA = "0x254F2AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C9")]
		public bool Destroying
		{
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x254F2B4", Offset = "0x254F2B4", VA = "0x254F2B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3C8C", Offset = "0x10C3C8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x254F2BC", Offset = "0x254F2BC", VA = "0x254F2BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3C9C", Offset = "0x10C3C9C")]
			private set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8A00", Offset = "0x10C8A00")]
		public Dictionary<int, CGModule> ModulesByID
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x254F2C8", Offset = "0x254F2C8", VA = "0x254F2C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x254F4AC", Offset = "0x254F4AC", VA = "0x254F4AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002CB")]
		private bool HasModulesWithSameID
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x2552BD4", Offset = "0x2552BD4", VA = "0x2552BD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x254F500", Offset = "0x254F500", VA = "0x254F500", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x254F53C", Offset = "0x254F53C", VA = "0x254F53C", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x254F564", Offset = "0x254F564", VA = "0x254F564")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x254F570", Offset = "0x254F570", VA = "0x254F570")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x254F8BC", Offset = "0x254F8BC", VA = "0x254F8BC")]
		public static CurvyGenerator Create()
		{
			return null;
		}

		[Token(Token = "0x6000ECF")]
		public T AddModule<T>() where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x254FA18", Offset = "0x254FA18", VA = "0x254FA18")]
		[NotNull]
		public CGModule AddModule(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x254FB40", Offset = "0x254FB40", VA = "0x254FB40")]
		public void AddModule([NotNull] CGModule module)
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x254FF18", Offset = "0x254FF18", VA = "0x254FF18")]
		public void RemoveModule([NotNull] CGModule module)
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x254FFB8", Offset = "0x254FFB8", VA = "0x254FFB8")]
		public void ArrangeModules()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x25502CC", Offset = "0x25502CC", VA = "0x25502CC")]
		public void ReorderModules()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x2551228", Offset = "0x2551228", VA = "0x2551228")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x255136C", Offset = "0x255136C", VA = "0x255136C")]
		public void DeleteModule(CGModule module)
		{
		}

		[Token(Token = "0x6000ED7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3CBC", Offset = "0x10C3CBC")]
		public List<T> FindModules<T>() where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000ED8")]
		public List<T> FindModules<T>(bool includeOnRequestProcessing) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x25513F4", Offset = "0x25513F4", VA = "0x25513F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3CF4", Offset = "0x10C3CF4")]
		public List<CGModule> GetModules()
		{
			return null;
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x25513FC", Offset = "0x25513FC", VA = "0x25513FC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3D2C", Offset = "0x10C3D2C")]
		public List<CGModule> GetModules(bool includeOnRequestProcessing)
		{
			return null;
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x2551594", Offset = "0x2551594", VA = "0x2551594")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3D64", Offset = "0x10C3D64")]
		public CGModule GetModule(int moduleID)
		{
			return null;
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x255159C", Offset = "0x255159C", VA = "0x255159C")]
		[CanBeNull]
		public CGModule GetModule(int moduleID, bool includeOnRequestProcessing)
		{
			return null;
		}

		[Token(Token = "0x6000EDD")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3DAC", Offset = "0x10C3DAC")]
		public T GetModule<T>(int moduleID) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		public T GetModule<T>(int moduleID, bool includeOnRequestProcessing) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x2551710", Offset = "0x2551710", VA = "0x2551710")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3DE4", Offset = "0x10C3DE4")]
		public CGModule GetModule(string moduleName)
		{
			return null;
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x2551718", Offset = "0x2551718", VA = "0x2551718")]
		public CGModule GetModule(string moduleName, bool includeOnRequestProcessing)
		{
			return null;
		}

		[Token(Token = "0x6000EE1")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3E1C", Offset = "0x10C3E1C")]
		public T GetModule<T>(string moduleName) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		public T GetModule<T>(string moduleName, bool includeOnRequestProcessing) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x255186C", Offset = "0x255186C", VA = "0x255186C")]
		public CGModuleOutputSlot GetModuleOutputSlot(int moduleId, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x2551928", Offset = "0x2551928", VA = "0x2551928")]
		public CGModuleOutputSlot GetModuleOutputSlot(string moduleName, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x254F584", Offset = "0x254F584", VA = "0x254F584")]
		public void Initialize(bool force = false)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x2552418", Offset = "0x2552418", VA = "0x2552418")]
		public void Refresh(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x254F850", Offset = "0x254F850", VA = "0x254F850")]
		public void TryAutoRefresh()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x25526C4", Offset = "0x25526C4", VA = "0x25526C4")]
		public bool DeleteAllOutputManagedResources(out bool associatedPrefabWasModified)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x254FE78", Offset = "0x254FE78", VA = "0x254FE78")]
		public string GetModuleUniqueName(CGModule module)
		{
			return null;
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x254FD2C", Offset = "0x254FD2C", VA = "0x254FD2C")]
		public int GetModuleUniqueID(CGModule module)
		{
			return default(int);
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x255265C", Offset = "0x255265C", VA = "0x255265C")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x255290C", Offset = "0x255290C", VA = "0x255290C", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x2552800", Offset = "0x2552800", VA = "0x2552800")]
		private bool IsModuleNameUnique(CGModule module, string uniqueName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x2552954", Offset = "0x2552954", VA = "0x2552954")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3E54", Offset = "0x10C3E54")]
		public string getUniqueModuleNameINTERNAL(string name)
		{
			return null;
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x2552B98", Offset = "0x2552B98", VA = "0x2552B98")]
		internal void sortModulesINTERNAL()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x2551B20", Offset = "0x2551B20", VA = "0x2551B20")]
		private bool CorrectDuplicateModuleIDs()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x25522EC", Offset = "0x25522EC", VA = "0x25522EC")]
		private void ResetAllModuleLinks()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x2552BB8", Offset = "0x2552BB8", VA = "0x2552BB8")]
		public bool HasCircularReference([NotNull] CGModule module)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x2550CA8", Offset = "0x2550CA8", VA = "0x2550CA8")]
		private static void ReorderEndpointRecursiveInputs(CGModule endPoint, HashSet<int> reordredModuleIds, Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x255095C", Offset = "0x255095C", VA = "0x255095C")]
		private static HashSet<CGModule> UpdateModulesRecursiveInputs(Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs, CGModule moduleToAdd)
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x25519E4", Offset = "0x25519E4", VA = "0x25519E4")]
		private void SetModulesFromChildren()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x2552DDC", Offset = "0x2552DDC", VA = "0x2552DDC")]
		public bool DeleteAllOutputManagedResourcesFromAssociatedPrefab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x2552DE4", Offset = "0x2552DE4", VA = "0x2552DE4")]
		public void SaveAllOutputManagedResources()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x25530EC", Offset = "0x25530EC", VA = "0x25530EC")]
		public CurvyGenerator()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x255325C", Offset = "0x255325C", VA = "0x255325C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3E64", Offset = "0x10C3E64")]
		private bool <SetModulesFromChildren>b__89_0(CGModule m)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EB")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A4280", Offset = "0x10A4280")]
	public sealed class InputSlotInfo : SlotInfo
	{
		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool RequestDataOnly;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool Optional;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool ModifiesData;

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x15B40D0", Offset = "0x15B40D0", VA = "0x15B40D0")]
		public InputSlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x15B40D8", Offset = "0x15B40D8", VA = "0x15B40D8")]
		public InputSlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x15B40E8", Offset = "0x15B40E8", VA = "0x15B40E8")]
		public bool IsValidFrom(Type outType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A42B4", Offset = "0x10A42B4")]
	public sealed class ModuleInfoAttribute : Attribute, IComparable
	{
		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string MenuName;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ModuleName;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UsesRandom;

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x3129CB8", Offset = "0x3129CB8", VA = "0x3129CB8")]
		public ModuleInfoAttribute(string name)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x3129CEC", Offset = "0x3129CEC", VA = "0x3129CEC", Slot = "6")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001ED")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A42C8", Offset = "0x10A42C8")]
	public class OutputSlotInfo : SlotInfo
	{
		[Token(Token = "0x170002CE")]
		public Type DataType
		{
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x313046C", Offset = "0x313046C", VA = "0x313046C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x31304A0", Offset = "0x31304A0", VA = "0x31304A0")]
		public OutputSlotInfo([NotNull] Type type)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x31304AC", Offset = "0x31304AC", VA = "0x31304AC")]
		public OutputSlotInfo(string name, [NotNull] Type type)
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A42FC", Offset = "0x10A42FC")]
	public class ShapeOutputSlotInfo : OutputSlotInfo
	{
		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OutputsVariableShape;

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x229A7E0", Offset = "0x229A7E0", VA = "0x229A7E0")]
		public ShapeOutputSlotInfo()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x229A7E8", Offset = "0x229A7E8", VA = "0x229A7E8")]
		public ShapeOutputSlotInfo(string name)
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A4330", Offset = "0x10A4330")]
	public class SlotInfo : Attribute, IComparable
	{
		[Token(Token = "0x20001F0")]
		public enum SlotArrayType
		{
			[Token(Token = "0x40007AD")]
			Unknown,
			[Token(Token = "0x40007AE")]
			Normal,
			[Token(Token = "0x40007AF")]
			Hidden
		}

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[ItemNotNull]
		[NotNull]
		public readonly Type[] DataTypes;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string displayName;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Tooltip;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Array;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SlotArrayType ArrayType;

		[Token(Token = "0x170002CF")]
		public string DisplayName
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0x229AD04", Offset = "0x229AD04", VA = "0x229AD04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x229AD1C", Offset = "0x229AD1C", VA = "0x229AD1C")]
			set
			{
			}
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x229AD24", Offset = "0x229AD24", VA = "0x229AD24")]
		protected SlotInfo(string name, [ItemNotNull][NotNull] params Type[] type)
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x229AD7C", Offset = "0x229AD7C", VA = "0x229AD7C")]
		protected SlotInfo([ItemNotNull][NotNull] params Type[] type)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x229AD88", Offset = "0x229AD88", VA = "0x229AD88", Slot = "6")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x229AE24", Offset = "0x229AE24", VA = "0x229AE24")]
		public void CheckDataTypes()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Generator.Modules
{
	[Token(Token = "0x20001F1")]
	public enum ScaleMode
	{
		[Token(Token = "0x40007B1")]
		Simple,
		[Token(Token = "0x40007B2")]
		Advanced
	}
	[Token(Token = "0x20001F2")]
	public class ScaleParameters
	{
		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ScaleMode ScaleMode;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly CGReferenceMode ScaleReference;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool ScaleUniform;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly float ScaleOffset;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float ScaleX;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly float ScaleY;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly AnimationCurve ScaleMultiplierX;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly AnimationCurve ScaleMultiplierY;

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x2298B44", Offset = "0x2298B44", VA = "0x2298B44")]
		public ScaleParameters(ScaleMode scaleMode, CGReferenceMode scaleReference, bool scaleUniform, float scaleOffset, float scaleX, float scaleY, AnimationCurve scaleMultiplierX, AnimationCurve scaleMultiplierY)
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public abstract class ScalingModule : CGModule
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B4ED0", Offset = "0x10B4ED0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B4ED0", Offset = "0x10B4ED0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B4ED0", Offset = "0x10B4ED0")]
		private ScaleMode m_ScaleMode;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B4F88", Offset = "0x10B4F88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B4F88", Offset = "0x10B4F88")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B4F88", Offset = "0x10B4F88")]
		private CGReferenceMode m_ScaleReference;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B5094", Offset = "0x10B5094")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B5094", Offset = "0x10B5094")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5094", Offset = "0x10B5094")]
		private float m_ScaleOffset;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B51A0", Offset = "0x10B51A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B51A0", Offset = "0x10B51A0")]
		private bool m_ScaleUniform;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B522C", Offset = "0x10B522C")]
		private float m_ScaleX;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5278", Offset = "0x10B5278")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0x10B5278", Offset = "0x10B5278")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B5278", Offset = "0x10B5278")]
		private AnimationCurve m_ScaleCurveX;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5384", Offset = "0x10B5384")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B5384", Offset = "0x10B5384")]
		private float m_ScaleY;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5454", Offset = "0x10B5454")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B5454", Offset = "0x10B5454")]
		[SerializeField]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0x10B5454", Offset = "0x10B5454")]
		private AnimationCurve m_ScaleCurveY;

		[Token(Token = "0x170002D0")]
		public ScaleMode ScaleMode
		{
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0x2298BD8", Offset = "0x2298BD8", VA = "0x2298BD8")]
			get
			{
				return default(ScaleMode);
			}
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0x2298BE0", Offset = "0x2298BE0", VA = "0x2298BE0")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public CGReferenceMode ScaleReference
		{
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x2298C04", Offset = "0x2298C04", VA = "0x2298C04")]
			get
			{
				return default(CGReferenceMode);
			}
			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0x2298C0C", Offset = "0x2298C0C", VA = "0x2298C0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public bool ScaleUniform
		{
			[Token(Token = "0x6000F40")]
			[Address(RVA = "0x2298C30", Offset = "0x2298C30", VA = "0x2298C30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x2298C38", Offset = "0x2298C38", VA = "0x2298C38")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public float ScaleOffset
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x2298C64", Offset = "0x2298C64", VA = "0x2298C64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x2298C6C", Offset = "0x2298C6C", VA = "0x2298C6C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public float ScaleX
		{
			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x2298C8C", Offset = "0x2298C8C", VA = "0x2298C8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F45")]
			[Address(RVA = "0x2298C94", Offset = "0x2298C94", VA = "0x2298C94")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public AnimationCurve ScaleMultiplierX
		{
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0x2298CB4", Offset = "0x2298CB4", VA = "0x2298CB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0x2298CBC", Offset = "0x2298CBC", VA = "0x2298CBC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public float ScaleY
		{
			[Token(Token = "0x6000F48")]
			[Address(RVA = "0x2298D04", Offset = "0x2298D04", VA = "0x2298D04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F49")]
			[Address(RVA = "0x2298D0C", Offset = "0x2298D0C", VA = "0x2298D0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public AnimationCurve ScaleMultiplierY
		{
			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0x2298D2C", Offset = "0x2298D2C", VA = "0x2298D2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0x2298D34", Offset = "0x2298D34", VA = "0x2298D34")]
			set
			{
			}
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x2298D7C", Offset = "0x2298D7C", VA = "0x2298D7C", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x2298ECC", Offset = "0x2298ECC", VA = "0x2298ECC")]
		public Vector2 GetScale(float relativeDistance)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x2298FD4", Offset = "0x2298FD4", VA = "0x2298FD4")]
		protected Vector2 GetScale(int sampleIndex, SubArray<float> relativeDistances, SubArray<float> sourceRelativeDistances)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x2298EF0", Offset = "0x2298EF0", VA = "0x2298EF0")]
		protected static Vector2 GetScale(float relativeDistance, ScaleMode mode, float offset, bool isUniform, float scaleX, AnimationCurve scaleMultiplierX, float scaleY, AnimationCurve scaleMultiplierY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x22990E0", Offset = "0x22990E0", VA = "0x22990E0")]
		protected static float GetRelativeDistance(int sampleIndex, CGReferenceMode cgReferenceMode, SubArray<float> relativeDistances, SubArray<float> sourceRelativeDistances)
		{
			return default(float);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x2299164", Offset = "0x2299164", VA = "0x2299164")]
		protected static Vector2 GetAdvancedScale(float relativeDistance, float scaleOffset, bool isUniform, float scaleX, AnimationCurve scaleMultiplierX, float scaleY, AnimationCurve scaleMultiplierY)
		{
			return default(Vector2);
		}

		[MethodImpl(256)]
		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x22991F8", Offset = "0x22991F8", VA = "0x22991F8")]
		protected static Vector2 GetSimpleScale(bool isUniform, float scaleX, float scaleY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x2299204", Offset = "0x2299204", VA = "0x2299204")]
		protected ScalingModule()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4344", Offset = "0x10A4344")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4344", Offset = "0x10A4344")]
	public class BuildRasterizedPath : CGModule, IPathProvider
	{
		[Token(Token = "0x40007C3")]
		private const int MinResolution = 1;

		[Token(Token = "0x40007C4")]
		private const int MaxResolution = 100;

		[Token(Token = "0x40007C5")]
		private const float MinAngleThreshold = 0.1f;

		[Token(Token = "0x40007C6")]
		private const float MaxAngleThreshold = 120f;

		[Token(Token = "0x40007C7")]
		private const int DefaultResolution = 50;

		[Token(Token = "0x40007C8")]
		private const int DefaultAngleThreshold = 10;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B55B0", Offset = "0x10B55B0")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B5688", Offset = "0x10B5688")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_Range;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B579C", Offset = "0x10B579C")]
		[SerializeField]
		private int m_Resolution;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B5820", Offset = "0x10B5820")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5820", Offset = "0x10B5820")]
		private float m_AngleTreshold;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B5920", Offset = "0x10B5920")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B5920", Offset = "0x10B5920")]
		private bool useBuggedRange;

		[Token(Token = "0x170002D8")]
		public float From
		{
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0x200BF78", Offset = "0x200BF78", VA = "0x200BF78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0x200BF80", Offset = "0x200BF80", VA = "0x200BF80")]
			set
			{
			}
		}

		[Token(Token = "0x170002D9")]
		public float To
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0x200BFD0", Offset = "0x200BFD0", VA = "0x200BFD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0x200BFD8", Offset = "0x200BFD8", VA = "0x200BFD8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DA")]
		public float Length
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0x200C0A4", Offset = "0x200C0A4", VA = "0x200C0A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0x200C0E4", Offset = "0x200C0E4", VA = "0x200C0E4")]
			set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		public int Resolution
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0x200C158", Offset = "0x200C158", VA = "0x200C158")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0x200C160", Offset = "0x200C160", VA = "0x200C160")]
			set
			{
			}
		}

		[Token(Token = "0x170002DC")]
		public bool Optimize
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x200C1BC", Offset = "0x200C1BC", VA = "0x200C1BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x200C1C4", Offset = "0x200C1C4", VA = "0x200C1C4")]
			set
			{
			}
		}

		[Token(Token = "0x170002DD")]
		public float AngleThreshold
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x200C1F0", Offset = "0x200C1F0", VA = "0x200C1F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x200C1F8", Offset = "0x200C1F8", VA = "0x200C1F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		[CanBeNull]
		public CGPath Path
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x200C254", Offset = "0x200C254", VA = "0x200C254")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DF")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x200C300", Offset = "0x200C300", VA = "0x200C300", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E0")]
		public bool UseBuggedRange
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x200C3F0", Offset = "0x200C3F0", VA = "0x200C3F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x200C3F8", Offset = "0x200C3F8", VA = "0x200C3F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		private bool ClampPath
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x200C074", Offset = "0x200C074", VA = "0x200C074")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E2")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x200C424", Offset = "0x200C424", VA = "0x200C424")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x200C544", Offset = "0x200C544", VA = "0x200C544", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x200C58C", Offset = "0x200C58C", VA = "0x200C58C", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x200C610", Offset = "0x200C610", VA = "0x200C610", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x200C820", Offset = "0x200C820", VA = "0x200C820")]
		public BuildRasterizedPath()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A43DC", Offset = "0x10A43DC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A43DC", Offset = "0x10A43DC")]
	public class BuildShapeExtrusion : ScalingModule, IPathProvider
	{
		[Token(Token = "0x20001F6")]
		public enum CrossShiftModeEnum
		{
			[Token(Token = "0x40007EF")]
			None,
			[Token(Token = "0x40007F0")]
			ByOrientation,
			[Token(Token = "0x40007F1")]
			Custom
		}

		[Token(Token = "0x20001F7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10A4474", Offset = "0x10A4474")]
		public enum ScaleModeEnum
		{
			[Token(Token = "0x40007F3")]
			Simple,
			[Token(Token = "0x40007F4")]
			Advanced
		}

		[Token(Token = "0x20001F8")]
		public struct Statistics : IEquatable<Statistics>
		{
			[Token(Token = "0x40007F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B6648", Offset = "0x10B6648")]
			private int <PathSampleCount>k__BackingField;

			[Token(Token = "0x40007F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B6658", Offset = "0x10B6658")]
			private int <CrossSampleCount>k__BackingField;

			[Token(Token = "0x40007F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B6668", Offset = "0x10B6668")]
			private int <MaterialGroupsCount>k__BackingField;

			[Token(Token = "0x17000305")]
			public int PathSampleCount
			{
				[Token(Token = "0x6000FAE")]
				[Address(RVA = "0x2233DC4", Offset = "0x2233DC4", VA = "0x2233DC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3FF4", Offset = "0x10C3FF4")]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6000FAF")]
				[Address(RVA = "0x2233DCC", Offset = "0x2233DCC", VA = "0x2233DCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C402C", Offset = "0x10C402C")]
				[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C402C", Offset = "0x10C402C")]
				set
				{
				}
			}

			[Token(Token = "0x17000306")]
			public int CrossSampleCount
			{
				[Token(Token = "0x6000FB0")]
				[Address(RVA = "0x2233DD4", Offset = "0x2233DD4", VA = "0x2233DD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4064", Offset = "0x10C4064")]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6000FB1")]
				[Address(RVA = "0x2233DDC", Offset = "0x2233DDC", VA = "0x2233DDC")]
				[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C409C", Offset = "0x10C409C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C409C", Offset = "0x10C409C")]
				set
				{
				}
			}

			[Token(Token = "0x17000307")]
			public int MaterialGroupsCount
			{
				[Token(Token = "0x6000FB2")]
				[Address(RVA = "0x2233DE4", Offset = "0x2233DE4", VA = "0x2233DE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C40D4", Offset = "0x10C40D4")]
				readonly get
				{
					return default(int);
				}
				[Token(Token = "0x6000FB3")]
				[Address(RVA = "0x2233DEC", Offset = "0x2233DEC", VA = "0x2233DEC")]
				[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C410C", Offset = "0x10C410C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C410C", Offset = "0x10C410C")]
				set
				{
				}
			}

			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x2233DF4", Offset = "0x2233DF4", VA = "0x2233DF4")]
			public void Set(int pathSamples, int crossSamples, int crossGroups)
			{
			}

			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x2233E00", Offset = "0x2233E00", VA = "0x2233E00", Slot = "4")]
			public bool Equals(Statistics other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x2233E34", Offset = "0x2233E34", VA = "0x2233E34", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x2233ED8", Offset = "0x2233ED8", VA = "0x2233ED8", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x2233EF8", Offset = "0x2233EF8", VA = "0x2233EF8")]
			public static bool operator ==(Statistics left, Statistics right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x2233F28", Offset = "0x2233F28", VA = "0x2233F28")]
			public static bool operator !=(Statistics left, Statistics right)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20001F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A44AC", Offset = "0x10A44AC")]
		private sealed class <>c
		{
			[Token(Token = "0x40007F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40007F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGShape, int> <>9__131_1;

			[Token(Token = "0x40007FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<CGShape> <>9__131_0;

			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x2233D80", Offset = "0x2233D80", VA = "0x2233D80")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x2233D88", Offset = "0x2233D88", VA = "0x2233D88")]
			internal int <Refresh>b__131_1(CGShape c)
			{
				return default(int);
			}

			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0x2233DA8", Offset = "0x2233DA8", VA = "0x2233DA8")]
			internal void <Refresh>b__131_0(CGShape c)
			{
			}
		}

		[Token(Token = "0x40007D0")]
		private const int MinResolution = 1;

		[Token(Token = "0x40007D1")]
		private const int MaxResolution = 100;

		[Token(Token = "0x40007D2")]
		private const float MinAngleThreshold = 0.1f;

		[Token(Token = "0x40007D3")]
		private const float MaxAngleThreshold = 120f;

		[Token(Token = "0x40007D4")]
		private const int MinShiftValue = 0;

		[Token(Token = "0x40007D5")]
		private const int MaxShiftValue = 1;

		[Token(Token = "0x40007D6")]
		private const int MinHollowInset = 0;

		[Token(Token = "0x40007D7")]
		private const int MaxHollowInset = 1;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B599C", Offset = "0x10B599C")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B5A58", Offset = "0x10B5A58")]
		public CGModuleInputSlot InCross;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B5B20", Offset = "0x10B5B20")]
		[HideInInspector]
		public CGModuleOutputSlot OutVolume;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B5B90", Offset = "0x10B5B90")]
		[HideInInspector]
		public CGModuleOutputSlot OutVolumeHollow;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[FloatRegion]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B5C00", Offset = "0x10B5C00")]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B5C8C", Offset = "0x10B5C8C")]
		[SerializeField]
		private int m_Resolution;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5D10", Offset = "0x10B5D10")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B5D10", Offset = "0x10B5D10")]
		private float m_AngleThreshold;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[FloatRegion]
		[SerializeField]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10B5E24", Offset = "0x10B5E24")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B5E24", Offset = "0x10B5E24")]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B5EDC", Offset = "0x10B5EDC")]
		private int m_CrossResolution;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B5F64", Offset = "0x10B5F64")]
		private bool m_CrossOptimize;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B5FC4", Offset = "0x10B5FC4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B5FC4", Offset = "0x10B5FC4")]
		private float m_CrossAngleThreshold;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B60D8", Offset = "0x10B60D8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B60D8", Offset = "0x10B60D8")]
		[SerializeField]
		private bool m_CrossIncludeControlpoints;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B6164", Offset = "0x10B6164")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B6164", Offset = "0x10B6164")]
		private bool m_CrossHardEdges;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B6200", Offset = "0x10B6200")]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B6200", Offset = "0x10B6200")]
		private bool m_CrossMaterials;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x133")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B629C", Offset = "0x10B629C")]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10B629C", Offset = "0x10B629C")]
		private bool m_CrossExtendedUV;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B6338", Offset = "0x10B6338")]
		private CrossShiftModeEnum m_CrossShiftMode;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B63B4", Offset = "0x10B63B4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B63B4", Offset = "0x10B63B4")]
		private float m_CrossShiftValue;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B64AC", Offset = "0x10B64AC")]
		[SerializeField]
		private bool m_CrossReverseNormals;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B6514", Offset = "0x10B6514")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B6514", Offset = "0x10B6514")]
		private float m_HollowInset;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B65D8", Offset = "0x10B65D8")]
		private bool m_HollowReverseNormals;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B6638", Offset = "0x10B6638")]
		private Statistics <ExtrusionStatistics>k__BackingField;

		[Token(Token = "0x170002E3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8A48", Offset = "0x10C8A48")]
		public int PathSamples
		{
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0x200C8E4", Offset = "0x200C8E4", VA = "0x200C8E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0x200C8EC", Offset = "0x200C8EC", VA = "0x200C8EC")]
			private set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8A80", Offset = "0x10C8A80")]
		public int CrossSamples
		{
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0x200C8F4", Offset = "0x200C8F4", VA = "0x200C8F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0x200C8FC", Offset = "0x200C8FC", VA = "0x200C8FC")]
			private set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8AB8", Offset = "0x10C8AB8")]
		public int CrossGroups
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0x200C904", Offset = "0x200C904", VA = "0x200C904")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0x200C90C", Offset = "0x200C90C", VA = "0x200C90C")]
			private set
			{
			}
		}

		[Token(Token = "0x170002E6")]
		public float From
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x200C914", Offset = "0x200C914", VA = "0x200C914")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x200C91C", Offset = "0x200C91C", VA = "0x200C91C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		public float To
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x200C96C", Offset = "0x200C96C", VA = "0x200C96C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0x200C974", Offset = "0x200C974", VA = "0x200C974")]
			set
			{
			}
		}

		[Token(Token = "0x170002E8")]
		public float Length
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0x200CAF4", Offset = "0x200CAF4", VA = "0x200CAF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0x200CB24", Offset = "0x200CB24", VA = "0x200CB24")]
			set
			{
			}
		}

		[Token(Token = "0x170002E9")]
		public int Resolution
		{
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0x200CB88", Offset = "0x200CB88", VA = "0x200CB88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0x200CB90", Offset = "0x200CB90", VA = "0x200CB90")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public bool Optimize
		{
			[Token(Token = "0x6000F78")]
			[Address(RVA = "0x200CBEC", Offset = "0x200CBEC", VA = "0x200CBEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0x200CBF4", Offset = "0x200CBF4", VA = "0x200CBF4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public float AngleThreshold
		{
			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0x200CC20", Offset = "0x200CC20", VA = "0x200CC20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0x200CC28", Offset = "0x200CC28", VA = "0x200CC28")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		public float CrossFrom
		{
			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0x200CC84", Offset = "0x200CC84", VA = "0x200CC84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0x200CC8C", Offset = "0x200CC8C", VA = "0x200CC8C")]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public float CrossTo
		{
			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0x200CCDC", Offset = "0x200CCDC", VA = "0x200CCDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0x200CCE4", Offset = "0x200CCE4", VA = "0x200CCE4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public float CrossLength
		{
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x200CE64", Offset = "0x200CE64", VA = "0x200CE64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F81")]
			[Address(RVA = "0x200CE94", Offset = "0x200CE94", VA = "0x200CE94")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public int CrossResolution
		{
			[Token(Token = "0x6000F82")]
			[Address(RVA = "0x200CEF8", Offset = "0x200CEF8", VA = "0x200CEF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x200CF00", Offset = "0x200CF00", VA = "0x200CF00")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		public bool CrossOptimize
		{
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x200CF5C", Offset = "0x200CF5C", VA = "0x200CF5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x200CF64", Offset = "0x200CF64", VA = "0x200CF64")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public float CrossAngleThreshold
		{
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x200CF90", Offset = "0x200CF90", VA = "0x200CF90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x200CF98", Offset = "0x200CF98", VA = "0x200CF98")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public bool CrossIncludeControlPoints
		{
			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x200CFF4", Offset = "0x200CFF4", VA = "0x200CFF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x200CFFC", Offset = "0x200CFFC", VA = "0x200CFFC")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8AF0", Offset = "0x10C8AF0")]
		public bool CrossHardEdges
		{
			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x200D028", Offset = "0x200D028", VA = "0x200D028")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0x200D030", Offset = "0x200D030", VA = "0x200D030")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8B28", Offset = "0x10C8B28")]
		public bool CrossMaterials
		{
			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x200D05C", Offset = "0x200D05C", VA = "0x200D05C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x200D064", Offset = "0x200D064", VA = "0x200D064")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8B60", Offset = "0x10C8B60")]
		public bool CrossExtendedUV
		{
			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0x200D090", Offset = "0x200D090", VA = "0x200D090")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x200D098", Offset = "0x200D098", VA = "0x200D098")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public CrossShiftModeEnum CrossShiftMode
		{
			[Token(Token = "0x6000F90")]
			[Address(RVA = "0x200D0C4", Offset = "0x200D0C4", VA = "0x200D0C4")]
			get
			{
				return default(CrossShiftModeEnum);
			}
			[Token(Token = "0x6000F91")]
			[Address(RVA = "0x200D0CC", Offset = "0x200D0CC", VA = "0x200D0CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public float CrossShiftValue
		{
			[Token(Token = "0x6000F92")]
			[Address(RVA = "0x200D0F0", Offset = "0x200D0F0", VA = "0x200D0F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x200D0F8", Offset = "0x200D0F8", VA = "0x200D0F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public bool CrossReverseNormals
		{
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0x200D14C", Offset = "0x200D14C", VA = "0x200D14C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0x200D154", Offset = "0x200D154", VA = "0x200D154")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8B98", Offset = "0x10C8B98")]
		public new ScaleModeEnum ScaleMode
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x200D180", Offset = "0x200D180", VA = "0x200D180")]
			get
			{
				return default(ScaleModeEnum);
			}
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0x200D190", Offset = "0x200D190", VA = "0x200D190")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public float HollowInset
		{
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x200D1A0", Offset = "0x200D1A0", VA = "0x200D1A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F99")]
			[Address(RVA = "0x200D1A8", Offset = "0x200D1A8", VA = "0x200D1A8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public bool HollowReverseNormals
		{
			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0x200D1FC", Offset = "0x200D1FC", VA = "0x200D1FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x200D204", Offset = "0x200D204", VA = "0x200D204")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public IExternalInput Cross
		{
			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x200D230", Offset = "0x200D230", VA = "0x200D230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FD")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8BD0", Offset = "0x10C8BD0")]
		public Vector3 CrossPosition
		{
			[Token(Token = "0x6000F9D")]
			[Address(RVA = "0x200D28C", Offset = "0x200D28C", VA = "0x200D28C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0x200D368", Offset = "0x200D368", VA = "0x200D368")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8BE0", Offset = "0x10C8BE0")]
		public Quaternion CrossRotation
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0x200D3BC", Offset = "0x200D3BC", VA = "0x200D3BC")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0x200D4CC", Offset = "0x200D4CC", VA = "0x200D4CC")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0x200D520", Offset = "0x200D520", VA = "0x200D520", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000300")]
		public Statistics ExtrusionStatistics
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x200D5EC", Offset = "0x200D5EC", VA = "0x200D5EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3F74", Offset = "0x10C3F74")]
			get
			{
				return default(Statistics);
			}
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0x200D5FC", Offset = "0x200D5FC", VA = "0x200D5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C3F84", Offset = "0x10C3F84")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3F84", Offset = "0x10C3F84")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		private bool ClampPath
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0x200CA00", Offset = "0x200CA00", VA = "0x200CA00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000302")]
		private bool ClampCross
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0x200CD70", Offset = "0x200CD70", VA = "0x200CD70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000303")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0x200D608", Offset = "0x200D608", VA = "0x200D608")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x17000304")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0x200D728", Offset = "0x200D728", VA = "0x200D728")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x200D848", Offset = "0x200D848", VA = "0x200D848", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x200D890", Offset = "0x200D890", VA = "0x200D890", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x200DA34", Offset = "0x200DA34", VA = "0x200DA34", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x200EB54", Offset = "0x200EB54", VA = "0x200EB54")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C3FBC", Offset = "0x10C3FBC")]
		public new Vector3 GetScale(float relativeDistance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x200EB70", Offset = "0x200EB70", VA = "0x200EB70", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x200EB9C", Offset = "0x200EB9C", VA = "0x200EB9C")]
		public BuildShapeExtrusion()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A44BC", Offset = "0x10A44BC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A44BC", Offset = "0x10A44BC")]
	public class BuildVolumeCaps : CGModule
	{
		[Serializable]
		[Token(Token = "0x20001FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4554", Offset = "0x10A4554")]
		private sealed class <>c
		{
			[Token(Token = "0x4000808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CGVolume> <>9__43_0;

			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0x2233FBC", Offset = "0x2233FBC", VA = "0x2233FBC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0x2233FC4", Offset = "0x2233FC4", VA = "0x2233FC4")]
			internal void <Refresh>b__43_0(CGVolume h)
			{
			}
		}

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B6678", Offset = "0x10B6678")]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B671C", Offset = "0x10B671C")]
		[HideInInspector]
		public CGModuleInputSlot InVolumeHoles;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B67D8", Offset = "0x10B67D8")]
		[HideInInspector]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B6850", Offset = "0x10B6850")]
		[SerializeField]
		private CGYesNoAuto m_StartCap;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private CGYesNoAuto m_EndCap;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B68AC", Offset = "0x10B68AC")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		[SerializeField]
		private bool m_GenerateUV2;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B6918", Offset = "0x10B6918")]
		[SerializeField]
		[Inline]
		private CGMaterialSettings m_StartMaterialSettings;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B6974", Offset = "0x10B6974")]
		[SerializeField]
		private Material m_StartMaterial;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B69DC", Offset = "0x10B69DC")]
		private bool m_CloneStartCap;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0x10B6A28", Offset = "0x10B6A28")]
		[SerializeField]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0x10B6A28", Offset = "0x10B6A28")]
		private CGMaterialSettings m_EndMaterialSettings;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B6AE8", Offset = "0x10B6AE8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B6AE8", Offset = "0x10B6AE8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10B6AE8", Offset = "0x10B6AE8")]
		[SerializeField]
		private Material m_EndMaterial;

		[Token(Token = "0x17000308")]
		public bool GenerateUV
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x200ECDC", Offset = "0x200ECDC", VA = "0x200ECDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x200ECE4", Offset = "0x200ECE4", VA = "0x200ECE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public bool GenerateUV2
		{
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0x200ED10", Offset = "0x200ED10", VA = "0x200ED10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0x200ED18", Offset = "0x200ED18", VA = "0x200ED18")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0x200ED44", Offset = "0x200ED44", VA = "0x200ED44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0x200ED4C", Offset = "0x200ED4C", VA = "0x200ED4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public CGYesNoAuto StartCap
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x200ED78", Offset = "0x200ED78", VA = "0x200ED78")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x200ED80", Offset = "0x200ED80", VA = "0x200ED80")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public Material StartMaterial
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x200EDA4", Offset = "0x200EDA4", VA = "0x200EDA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0x200EDAC", Offset = "0x200EDAC", VA = "0x200EDAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public CGMaterialSettings StartMaterialSettings
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0x200EE5C", Offset = "0x200EE5C", VA = "0x200EE5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030E")]
		public CGYesNoAuto EndCap
		{
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0x200EE64", Offset = "0x200EE64", VA = "0x200EE64")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0x200EE6C", Offset = "0x200EE6C", VA = "0x200EE6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public bool CloneStartCap
		{
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0x200EE90", Offset = "0x200EE90", VA = "0x200EE90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0x200EE98", Offset = "0x200EE98", VA = "0x200EE98")]
			set
			{
			}
		}

		[Token(Token = "0x17000310")]
		public CGMaterialSettings EndMaterialSettings
		{
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0x200EEC4", Offset = "0x200EEC4", VA = "0x200EEC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000311")]
		public Material EndMaterial
		{
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0x200EECC", Offset = "0x200EECC", VA = "0x200EECC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0x200EED4", Offset = "0x200EED4", VA = "0x200EED4")]
			set
			{
			}
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x200EF80", Offset = "0x200EF80", VA = "0x200EF80", Slot = "11")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x200F06C", Offset = "0x200F06C", VA = "0x200F06C", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x200F204", Offset = "0x200F204", VA = "0x200F204", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x20109D8", Offset = "0x20109D8", VA = "0x20109D8")]
		private static Matrix4x4 getMatrix(CGVolume vol, int index, bool inverse)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x2010E58", Offset = "0x2010E58", VA = "0x2010E58")]
		private static void flipTris(SubArray<int> indices, int start, int end)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x2010BB8", Offset = "0x2010BB8", VA = "0x2010BB8")]
		private static SubArray<Vector3> applyMatrix(SubArray<Vector3> vt, Matrix4x4 matrix, out Bounds bounds)
		{
			return default(SubArray<Vector3>);
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x2010840", Offset = "0x2010840", VA = "0x2010840")]
		private static ContourVertex[] make2DSegment(CGVolume vol, int segmentIndex)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x2010ECC", Offset = "0x2010ECC", VA = "0x2010ECC")]
		private static void applyUV(SubArray<Vector3> vts, SubArray<Vector2> uvArray, int index, int count, CGMaterialSettings mat, Bounds bounds)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x2011154", Offset = "0x2011154", VA = "0x2011154")]
		private static void applyUV2(SubArray<Vector3> vertice, SubArray<Vector2> uv2Array, int index, int count, Bounds bounds)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x2011264", Offset = "0x2011264", VA = "0x2011264")]
		public BuildVolumeCaps()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4564", Offset = "0x10A4564")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4564", Offset = "0x10A4564")]
	public class BuildVolumeMesh : CGModule
	{
		[Token(Token = "0x400080A")]
		private const float DefaultUnscalingOrigin = 0.5f;

		[Token(Token = "0x400080B")]
		private const int DefaultSplitLength = 100;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B6BF0", Offset = "0x10B6BF0")]
		[HideInInspector]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B6C94", Offset = "0x10B6C94")]
		[HideInInspector]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x10B6D0C", Offset = "0x10B6D0C")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B6D0C", Offset = "0x10B6D0C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0x10B6D0C", Offset = "0x10B6D0C")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B6DA4", Offset = "0x10B6DA4")]
		private bool m_GenerateUV;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B6DFC", Offset = "0x10B6DFC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B6DFC", Offset = "0x10B6DFC")]
		[SerializeField]
		private bool unscaleU;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B6ED0", Offset = "0x10B6ED0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B6ED0", Offset = "0x10B6ED0")]
		private float unscalingOrigin;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private bool m_GenerateUV2;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B6FF0", Offset = "0x10B6FF0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B6FF0", Offset = "0x10B6FF0")]
		private bool m_Split;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B706C", Offset = "0x10B706C")]
		[Positive]
		private float m_SplitLength;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B7138", Offset = "0x10B7138")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x10B7138", Offset = "0x10B7138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7138", Offset = "0x10B7138")]
		private bool splitUV2;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[SerializeField]
		private List<CGMaterialSettingsEx> m_MaterialSettings;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		private Material[] m_Material;

		[Token(Token = "0x17000312")]
		public bool GenerateUV
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0x20113AC", Offset = "0x20113AC", VA = "0x20113AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0x20113B4", Offset = "0x20113B4", VA = "0x20113B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public bool GenerateUV2
		{
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0x20113E0", Offset = "0x20113E0", VA = "0x20113E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0x20113E8", Offset = "0x20113E8", VA = "0x20113E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public bool UnscaleU
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0x2011414", Offset = "0x2011414", VA = "0x2011414")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0x201141C", Offset = "0x201141C", VA = "0x201141C")]
			set
			{
			}
		}

		[Token(Token = "0x17000315")]
		public float UnscalingOrigin
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0x2011448", Offset = "0x2011448", VA = "0x2011448")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0x2011450", Offset = "0x2011450", VA = "0x2011450")]
			set
			{
			}
		}

		[Token(Token = "0x17000316")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0x2011470", Offset = "0x2011470", VA = "0x2011470")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0x2011478", Offset = "0x2011478", VA = "0x2011478")]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		public bool Split
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0x20114A4", Offset = "0x20114A4", VA = "0x20114A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0x20114AC", Offset = "0x20114AC", VA = "0x20114AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000318")]
		public float SplitLength
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0x20114D8", Offset = "0x20114D8", VA = "0x20114D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0x20114E0", Offset = "0x20114E0", VA = "0x20114E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000319")]
		public bool SplitUV2
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0x2011534", Offset = "0x2011534", VA = "0x2011534")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0x201153C", Offset = "0x201153C", VA = "0x201153C")]
			set
			{
			}
		}

		[Token(Token = "0x1700031A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8BF0", Offset = "0x10C8BF0")]
		public List<CGMaterialSettingsEx> MaterialSetttings
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0x2011568", Offset = "0x2011568", VA = "0x2011568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		public List<CGMaterialSettingsEx> MaterialSettings
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0x2011570", Offset = "0x2011570", VA = "0x2011570")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		public int MaterialCount
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0x2011578", Offset = "0x2011578", VA = "0x2011578")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700031D")]
		private bool IsSplitUV2Togglable
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0x2013244", Offset = "0x2013244", VA = "0x2013244")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x20115C4", Offset = "0x20115C4", VA = "0x20115C4", Slot = "11")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x20116EC", Offset = "0x20116EC", VA = "0x20116EC", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x2011978", Offset = "0x2011978", VA = "0x2011978", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x2011604", Offset = "0x2011604", VA = "0x2011604")]
		public int AddMaterial()
		{
			return default(int);
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x20128FC", Offset = "0x20128FC", VA = "0x20128FC")]
		public void RemoveMaterial(int index)
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x2012A84", Offset = "0x2012A84", VA = "0x2012A84")]
		public void SetMaterial(int index, Material mat)
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x2012BFC", Offset = "0x2012BFC", VA = "0x2012BFC")]
		public Material GetMaterial(int index)
		{
			return null;
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x2012334", Offset = "0x2012334", VA = "0x2012334")]
		private void build([NotNull] CGVMesh vmesh, CGVolume vol, IntRegion subset, List<SamplePointsMaterialGroupCollection> materialIdGroups)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x2012C58", Offset = "0x2012C58", VA = "0x2012C58")]
		private static void prepareSubMeshes([NotNull] CGVMesh vmesh, List<SamplePointsMaterialGroupCollection> groupsBySubMeshes, int extrusions, ref Material[] materials)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x2012E0C", Offset = "0x2012E0C", VA = "0x2012E0C")]
		private void createMaterialGroupUV(CGVMesh vmesh, CGVolume volume, SamplePointsMaterialGroup materialGroup, int matIndex, float aspectCorrectionV, float aspectCorrectionU, int sample, int baseVertex)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x2013020", Offset = "0x2013020", VA = "0x2013020")]
		private void createMaterialGroupUV2(CGVMesh vmesh, CGVolume volume, SamplePointsMaterialGroup materialGroup, int sample, int baseVertex)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x201311C", Offset = "0x201311C", VA = "0x201311C")]
		private static void createPatchTriangles(int[] triangles, ref int triIdx, int curVTIndex, int patchSize, int crossSize, bool reverse)
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x2011E88", Offset = "0x2011E88", VA = "0x2011E88")]
		private List<SamplePointsMaterialGroupCollection> getMaterialIDGroups(CGVolume volume)
		{
			return null;
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x20129C8", Offset = "0x20129C8", VA = "0x20129C8")]
		private bool validateMaterialIndex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x2013264", Offset = "0x2013264", VA = "0x2013264")]
		public BuildVolumeMesh()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A45FC", Offset = "0x10A45FC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A45FC", Offset = "0x10A45FC")]
	public class BuildVolumeSpots : CGModule, ISerializationCallbackReceiver
	{
		[Token(Token = "0x20001FE")]
		private struct EditorData : IEquatable<EditorData>
		{
			[Token(Token = "0x400082C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7AD0", Offset = "0x10B7AD0")]
			private readonly int <SpotsCount>k__BackingField;

			[Token(Token = "0x400082D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7AE0", Offset = "0x10B7AE0")]
			private readonly bool <InputIsAVolume>k__BackingField;

			[Token(Token = "0x400082E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7AF0", Offset = "0x10B7AF0")]
			private readonly string[] <BoundsNames>k__BackingField;

			[Token(Token = "0x17000331")]
			public readonly int SpotsCount
			{
				[Token(Token = "0x6001033")]
				[Address(RVA = "0x2234104", Offset = "0x2234104", VA = "0x2234104")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4144", Offset = "0x10C4144")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000332")]
			public readonly bool InputIsAVolume
			{
				[Token(Token = "0x6001034")]
				[Address(RVA = "0x223410C", Offset = "0x223410C", VA = "0x223410C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C417C", Offset = "0x10C417C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000333")]
			[ItemNotNull]
			[NotNull]
			public readonly string[] BoundsNames
			{
				[Token(Token = "0x6001035")]
				[Address(RVA = "0x2234114", Offset = "0x2234114", VA = "0x2234114")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C41B4", Offset = "0x10C41B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001036")]
			[Address(RVA = "0x223411C", Offset = "0x223411C", VA = "0x223411C")]
			public EditorData([NotNull] IReadOnlyList<CGBounds> bounds, bool inputIsAVolume, int spotsCount)
			{
			}

			[Token(Token = "0x6001037")]
			[Address(RVA = "0x2234154", Offset = "0x2234154", VA = "0x2234154")]
			[NotNull]
			[Pure]
			private static string[] GetBoundsNames([NotNull] IReadOnlyList<CGBounds> bounds)
			{
				return null;
			}

			[Token(Token = "0x6001038")]
			[Address(RVA = "0x2234218", Offset = "0x2234218", VA = "0x2234218", Slot = "4")]
			public bool Equals(EditorData other)
			{
				return default(bool);
			}

			[Token(Token = "0x6001039")]
			[Address(RVA = "0x2234270", Offset = "0x2234270", VA = "0x2234270", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x600103A")]
			[Address(RVA = "0x22342F8", Offset = "0x22342F8", VA = "0x22342F8", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x600103B")]
			[Address(RVA = "0x2234360", Offset = "0x2234360", VA = "0x2234360")]
			public static bool operator ==(EditorData left, EditorData right)
			{
				return default(bool);
			}

			[Token(Token = "0x600103C")]
			[Address(RVA = "0x2234390", Offset = "0x2234390", VA = "0x2234390")]
			public static bool operator !=(EditorData left, EditorData right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001FF")]
		private sealed class EndGroupData : IDisposable
		{
			[Token(Token = "0x400082F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B00", Offset = "0x10B7B00")]
			private readonly CGBoundsGroup <BoundsGroup>k__BackingField;

			[Token(Token = "0x4000830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B10", Offset = "0x10B7B10")]
			private readonly SubArray<int> <ItemIndices>k__BackingField;

			[Token(Token = "0x4000831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B20", Offset = "0x10B7B20")]
			private readonly float <GroupDepth>k__BackingField;

			[Token(Token = "0x4000832")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B30", Offset = "0x10B7B30")]
			private readonly CGBounds[] <ItemBounds>k__BackingField;

			[Token(Token = "0x4000833")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B40", Offset = "0x10B7B40")]
			private readonly float <SpaceBefore>k__BackingField;

			[Token(Token = "0x4000834")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B7B50", Offset = "0x10B7B50")]
			private readonly float <SpaceAfter>k__BackingField;

			[Token(Token = "0x4000835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool disposed;

			[Token(Token = "0x17000334")]
			internal CGBoundsGroup BoundsGroup
			{
				[Token(Token = "0x600103D")]
				[Address(RVA = "0x22343C4", Offset = "0x22343C4", VA = "0x22343C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4224", Offset = "0x10C4224")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000335")]
			internal SubArray<int> ItemIndices
			{
				[Token(Token = "0x600103E")]
				[Address(RVA = "0x22343CC", Offset = "0x22343CC", VA = "0x22343CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4234", Offset = "0x10C4234")]
				get
				{
					return default(SubArray<int>);
				}
			}

			[Token(Token = "0x17000336")]
			internal float GroupDepth
			{
				[Token(Token = "0x600103F")]
				[Address(RVA = "0x22343D8", Offset = "0x22343D8", VA = "0x22343D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4244", Offset = "0x10C4244")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000337")]
			internal CGBounds[] ItemBounds
			{
				[Token(Token = "0x6001040")]
				[Address(RVA = "0x22343E0", Offset = "0x22343E0", VA = "0x22343E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4254", Offset = "0x10C4254")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000338")]
			internal float SpaceBefore
			{
				[Token(Token = "0x6001041")]
				[Address(RVA = "0x22343E8", Offset = "0x22343E8", VA = "0x22343E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4264", Offset = "0x10C4264")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000339")]
			internal float SpaceAfter
			{
				[Token(Token = "0x6001042")]
				[Address(RVA = "0x22343F0", Offset = "0x22343F0", VA = "0x22343F0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4274", Offset = "0x10C4274")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0x22343F8", Offset = "0x22343F8", VA = "0x22343F8")]
			internal EndGroupData(CGBoundsGroup boundsGroup, SubArray<int> itemIndices, float groupDepth, CGBounds[] itemBounds, float spaceBefore, float spaceAfter)
			{
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0x2234494", Offset = "0x2234494", VA = "0x2234494")]
			private bool Dispose(bool disposing)
			{
				return default(bool);
			}

			[Token(Token = "0x6001045")]
			[Address(RVA = "0x22345B0", Offset = "0x22345B0", VA = "0x22345B0", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001046")]
			[Address(RVA = "0x2234620", Offset = "0x2234620", VA = "0x2234620", Slot = "1")]
			~EndGroupData()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000200")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A469C", Offset = "0x10A469C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, GUIContent> <>9__57_0;

			[Token(Token = "0x6001048")]
			[Address(RVA = "0x2234044", Offset = "0x2234044", VA = "0x2234044")]
			public <>c()
			{
			}

			[Token(Token = "0x6001049")]
			[Address(RVA = "0x223404C", Offset = "0x223404C", VA = "0x223404C")]
			internal GUIContent <get_BoundsNames>b__57_0(string n)
			{
				return null;
			}
		}

		[Token(Token = "0x2000201")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A46AC", Offset = "0x10A46AC")]
		private sealed class <>c__DisplayClass75_0
		{
			[Token(Token = "0x4000838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EndGroupData endGroupData;

			[Token(Token = "0x4000839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float availableSpace;

			[Token(Token = "0x600104A")]
			[Address(RVA = "0x22340AC", Offset = "0x22340AC", VA = "0x22340AC")]
			public <>c__DisplayClass75_0()
			{
			}

			[Token(Token = "0x600104B")]
			[Address(RVA = "0x22340B4", Offset = "0x22340B4", VA = "0x22340B4")]
			internal bool <Refresh>b__0(CGBounds i)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000818")]
		private const int MinCrossBase = -1;

		[Token(Token = "0x4000819")]
		private const int MaxCrossBase = 1;

		[Token(Token = "0x400081A")]
		private const int MinRange = 0;

		[Token(Token = "0x400081B")]
		private const int MaxRange = 1;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B72A4", Offset = "0x10B72A4")]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B738C", Offset = "0x10B738C")]
		[HideInInspector]
		public CGModuleInputSlot InBounds;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B7444", Offset = "0x10B7444")]
		[HideInInspector]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private bool m_WasUpgraded;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B74EC", Offset = "0x10B74EC")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B74EC", Offset = "0x10B74EC")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_Range;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B75A4", Offset = "0x10B75A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B75A4", Offset = "0x10B75A4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B75A4", Offset = "0x10B75A4")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B75A4", Offset = "0x10B75A4")]
		[SerializeField]
		private bool m_UseVolume;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B76DC", Offset = "0x10B76DC")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B76DC", Offset = "0x10B76DC")]
		private float m_CrossBase;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B7770", Offset = "0x10B7770")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7770", Offset = "0x10B7770")]
		private AnimationCurve m_CrossCurve;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10B77FC", Offset = "0x10B77FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B77FC", Offset = "0x10B77FC")]
		[SerializeField]
		private bool m_Simulate;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7878", Offset = "0x10B7878")]
		private bool m_UseBuggedRNG;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B78C4", Offset = "0x10B78C4")]
		[ArrayEx]
		[SerializeField]
		private List<CGBoundsGroup> m_Groups;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[IntRegion]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B792C", Offset = "0x10B792C")]
		private IntRegion m_RepeatingGroups;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B79C4", Offset = "0x10B79C4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B79C4", Offset = "0x10B79C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B79C4", Offset = "0x10B79C4")]
		private bool m_FitEnd;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public CGSpots SimulatedSpots;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private EditorData editorData;

		[Token(Token = "0x1700031E")]
		public FloatRegion Range
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0x201352C", Offset = "0x201352C", VA = "0x201352C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6001002")]
			[Address(RVA = "0x201353C", Offset = "0x201353C", VA = "0x201353C")]
			set
			{
			}
		}

		[Token(Token = "0x1700031F")]
		public bool UseVolume
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0x20135A8", Offset = "0x20135A8", VA = "0x20135A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001004")]
			[Address(RVA = "0x20135B0", Offset = "0x20135B0", VA = "0x20135B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000320")]
		public bool Simulate
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0x20135DC", Offset = "0x20135DC", VA = "0x20135DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001006")]
			[Address(RVA = "0x20135E4", Offset = "0x20135E4", VA = "0x20135E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000321")]
		public bool UseBuggedRng
		{
			[Token(Token = "0x6001007")]
			[Address(RVA = "0x2013610", Offset = "0x2013610", VA = "0x2013610")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001008")]
			[Address(RVA = "0x2013618", Offset = "0x2013618", VA = "0x2013618")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public float CrossBase
		{
			[Token(Token = "0x6001009")]
			[Address(RVA = "0x2013644", Offset = "0x2013644", VA = "0x2013644")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600100A")]
			[Address(RVA = "0x201364C", Offset = "0x201364C", VA = "0x201364C")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public AnimationCurve CrossCurve
		{
			[Token(Token = "0x600100B")]
			[Address(RVA = "0x20136A0", Offset = "0x20136A0", VA = "0x20136A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100C")]
			[Address(RVA = "0x20136A8", Offset = "0x20136A8", VA = "0x20136A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public List<CGBoundsGroup> Groups
		{
			[Token(Token = "0x600100D")]
			[Address(RVA = "0x20136F0", Offset = "0x20136F0", VA = "0x20136F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600100E")]
			[Address(RVA = "0x20136F8", Offset = "0x20136F8", VA = "0x20136F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000325")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x600100F")]
			[Address(RVA = "0x2013710", Offset = "0x2013710", VA = "0x2013710")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x6001010")]
			[Address(RVA = "0x2013718", Offset = "0x2013718", VA = "0x2013718")]
			set
			{
			}
		}

		[Token(Token = "0x17000326")]
		public int FirstRepeating
		{
			[Token(Token = "0x6001011")]
			[Address(RVA = "0x201373C", Offset = "0x201373C", VA = "0x201373C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001012")]
			[Address(RVA = "0x2013744", Offset = "0x2013744", VA = "0x2013744")]
			set
			{
			}
		}

		[Token(Token = "0x17000327")]
		public int LastRepeating
		{
			[Token(Token = "0x6001013")]
			[Address(RVA = "0x20137D4", Offset = "0x20137D4", VA = "0x20137D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001014")]
			[Address(RVA = "0x20137DC", Offset = "0x20137DC", VA = "0x20137DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000328")]
		public bool FitEnd
		{
			[Token(Token = "0x6001015")]
			[Address(RVA = "0x201385C", Offset = "0x201385C", VA = "0x201385C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001016")]
			[Address(RVA = "0x2013864", Offset = "0x2013864", VA = "0x2013864")]
			set
			{
			}
		}

		[Token(Token = "0x17000329")]
		public int GroupCount
		{
			[Token(Token = "0x6001017")]
			[Address(RVA = "0x2013890", Offset = "0x2013890", VA = "0x2013890")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700032A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8C28", Offset = "0x10C8C28")]
		public GUIContent[] BoundsNames
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x20138DC", Offset = "0x20138DC", VA = "0x20138DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8C60", Offset = "0x10C8C60")]
		public int[] BoundsIndices
		{
			[Token(Token = "0x6001019")]
			[Address(RVA = "0x2013A1C", Offset = "0x2013A1C", VA = "0x2013A1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032C")]
		public int Count
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x2013AC4", Offset = "0x2013AC4", VA = "0x2013AC4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700032D")]
		private int LastGroupIndex
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0x20137B4", Offset = "0x20137B4", VA = "0x20137B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700032E")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x2013AD4", Offset = "0x2013AD4", VA = "0x2013AD4")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x1700032F")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x2013B44", Offset = "0x2013B44", VA = "0x2013B44")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x17000330")]
		private bool ShowFitEnd
		{
			[Token(Token = "0x600102F")]
			[Address(RVA = "0x2016CD4", Offset = "0x2016CD4", VA = "0x2016CD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x20133A4", Offset = "0x20133A4", VA = "0x20133A4")]
		public BuildVolumeSpots()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x2013ACC", Offset = "0x2013ACC", VA = "0x2013ACC")]
		private bool IsInputAVolume()
		{
			return default(bool);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x2013BD8", Offset = "0x2013BD8", VA = "0x2013BD8", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x2013C10", Offset = "0x2013C10", VA = "0x2013C10", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x2013E8C", Offset = "0x2013E8C", VA = "0x2013E8C", Slot = "16")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x2013ED4", Offset = "0x2013ED4", VA = "0x2013ED4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x2013F74", Offset = "0x2013F74", VA = "0x2013F74", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x2013D8C", Offset = "0x2013D8C", VA = "0x2013D8C")]
		public CGBoundsGroup AddGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x20161C0", Offset = "0x20161C0", VA = "0x20161C0")]
		public void RemoveGroup(CGBoundsGroup group)
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x2015BAC", Offset = "0x2015BAC", VA = "0x2015BAC")]
		private static SubArray<int> GetGroupItemIndices(CGBoundsGroup boundsGroup, WeightedRandom<int> groupItemBag)
		{
			return default(SubArray<int>);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x2015E24", Offset = "0x2015E24", VA = "0x2015E24")]
		private float GetGroupDepth(List<CGBounds> bounds, SubArray<int> groupItemIndices, float spaceBefore, float spaceAfter, out CGBounds[] itemsBounds)
		{
			return default(float);
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x201591C", Offset = "0x201591C", VA = "0x201591C")]
		private bool AddGroupItems(List<CGBounds> bounds, CGPath path, int groupIndex, ref SubArrayList<CGSpot> spots, float remainingLength, float startDistance, ref float currentDistance, out bool failedAddingAllItems, Dictionary<CGBoundsGroup, WeightedRandom<int>> itemsBagDictionary, int MaxSpotsCount)
		{
			return default(bool);
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x2015F9C", Offset = "0x2015F9C", VA = "0x2015F9C")]
		private void AddGroupItems(CGPath path, CGBoundsGroup group, ref SubArrayList<CGSpot> spots, float remainingLength, float startDistance, ref float currentDistance, out bool failedAddingAllItems, SubArray<int> itemIndices, float groupDepth, CGBounds[] itemBounds, float spaceBefore, float spaceAfter)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x2016234", Offset = "0x2016234", VA = "0x2016234")]
		private CGSpot GetSpot(CGPath path, int itemID, CGBoundsGroup boundsGroup, CGBounds bounds, float currentDistance, float startDistance)
		{
			return default(CGSpot);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x2015DD0", Offset = "0x2015DD0", VA = "0x2015DD0")]
		private static float GetRegionNextValue(FloatRegion floatRegion)
		{
			return default(float);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x2016B08", Offset = "0x2016B08", VA = "0x2016B08")]
		private void GetTRS(CGBoundsGroup boundsGroup, Vector3 tangent, Vector3 up, out Quaternion rotation, out Vector3 translation, out Vector3 scale)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x20166B4", Offset = "0x20166B4", VA = "0x20166B4")]
		private void GetTRS630(CGBoundsGroup boundsGroup, Vector3 tangent, Vector3 up, out Quaternion rotation, out Vector3 translation, out Vector3 scale)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x20155C0", Offset = "0x20155C0", VA = "0x20155C0")]
		private Dictionary<CGBoundsGroup, WeightedRandom<int>> Prepare(out WeightedRandom<int> groupBag)
		{
			return null;
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x2016D30", Offset = "0x2016D30", VA = "0x2016D30", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x2016D58", Offset = "0x2016D58", VA = "0x2016D58", Slot = "18")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x2016D5C", Offset = "0x2016D5C", VA = "0x2016D5C", Slot = "19")]
		public void OnAfterDeserialize()
		{
		}
	}
	[Token(Token = "0x2000202")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A46BC", Offset = "0x10A46BC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A46BC", Offset = "0x10A46BC")]
	public class ConformPath : CGModule, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x400083A")]
		private const int DefaultMaxDistance = 100;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B7B60", Offset = "0x10B7B60")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B7C38", Offset = "0x10B7C38")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7CA8", Offset = "0x10B7CA8")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0x10B7CA8", Offset = "0x10B7CA8")]
		[SerializeField]
		private Vector3 m_Direction;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7D34", Offset = "0x10B7D34")]
		private float m_MaxDistance;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7D80", Offset = "0x10B7D80")]
		private float m_Offset;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7DCC", Offset = "0x10B7DCC")]
		[SerializeField]
		private bool m_Warp;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B7E18", Offset = "0x10B7E18")]
		private LayerMask m_LayerMask;

		[Token(Token = "0x1700033A")]
		public Vector3 Direction
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0x2543E50", Offset = "0x2543E50", VA = "0x2543E50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x2543E5C", Offset = "0x2543E5C", VA = "0x2543E5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033B")]
		public float MaxDistance
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0x2543EE0", Offset = "0x2543EE0", VA = "0x2543EE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0x2543EE8", Offset = "0x2543EE8", VA = "0x2543EE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700033C")]
		public float Offset
		{
			[Token(Token = "0x6001050")]
			[Address(RVA = "0x2543F08", Offset = "0x2543F08", VA = "0x2543F08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001051")]
			[Address(RVA = "0x2543F10", Offset = "0x2543F10", VA = "0x2543F10")]
			set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public bool Warp
		{
			[Token(Token = "0x6001052")]
			[Address(RVA = "0x2543F30", Offset = "0x2543F30", VA = "0x2543F30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001053")]
			[Address(RVA = "0x2543F38", Offset = "0x2543F38", VA = "0x2543F38")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public LayerMask LayerMask
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0x2543F64", Offset = "0x2543F64", VA = "0x2543F64")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0x2543F6C", Offset = "0x2543F6C", VA = "0x2543F6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0x25440C4", Offset = "0x25440C4", VA = "0x25440C4", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x2543FD8", Offset = "0x2543FD8", VA = "0x2543FD8", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x2544010", Offset = "0x2544010", VA = "0x2544010", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x25441B4", Offset = "0x25441B4", VA = "0x25441B4", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x25443E4", Offset = "0x25443E4", VA = "0x25443E4")]
		public static void Conform(CGPath path, Transform pathTransform, LayerMask layers, Vector3 projectionDirection, float offset, float rayLength, bool warp)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x25443FC", Offset = "0x25443FC", VA = "0x25443FC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C4284", Offset = "0x10C4284")]
		public static CGPath Conform(Transform pathTransform, CGPath path, LayerMask layers, Vector3 projectionDirection, float offset, float rayLength, bool warp)
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x254473C", Offset = "0x254473C", VA = "0x254473C")]
		public ConformPath()
		{
		}
	}
	[Token(Token = "0x2000203")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4754", Offset = "0x10A4754")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4754", Offset = "0x10A4754")]
	public class CreateGameObject : ResourceExportingModule
	{
		[Serializable]
		[Token(Token = "0x2000204")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A47D0", Offset = "0x10A47D0")]
		private sealed class <>c
		{
			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400084A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CGGameObject> <>9__24_0;

			[Token(Token = "0x600106E")]
			[Address(RVA = "0x2236D98", Offset = "0x2236D98", VA = "0x2236D98")]
			public <>c()
			{
			}

			[Token(Token = "0x600106F")]
			[Address(RVA = "0x2236DA0", Offset = "0x2236DA0", VA = "0x2236DA0")]
			internal void <Refresh>b__24_0(CGGameObject d)
			{
			}
		}

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B7E64", Offset = "0x10B7E64")]
		[HideInInspector]
		public CGModuleInputSlot InGameObjectArray;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B7F38", Offset = "0x10B7F38")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0x10B7FFC", Offset = "0x10B7FFC")]
		[SerializeField]
		private CGGameObjectResourceCollection m_Resources;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B8050", Offset = "0x10B8050")]
		private bool m_MakeStatic;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0x10B809C", Offset = "0x10B809C")]
		[SerializeField]
		private int m_Layer;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8104", Offset = "0x10B8104")]
		private bool applyLayerOnChildren;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly Dictionary<Transform, string> usedPoolsDictionary;

		[Token(Token = "0x17000340")]
		public int Layer
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x2544D78", Offset = "0x2544D78", VA = "0x2544D78")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x2544D80", Offset = "0x2544D80", VA = "0x2544D80")]
			set
			{
			}
		}

		[Token(Token = "0x17000341")]
		public bool ApplyLayerOnChildren
		{
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x2544DD8", Offset = "0x2544DD8", VA = "0x2544DD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x2544DE0", Offset = "0x2544DE0", VA = "0x2544DE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		public bool MakeStatic
		{
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x2544E0C", Offset = "0x2544E0C", VA = "0x2544E0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x2544E14", Offset = "0x2544E14", VA = "0x2544E14")]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public CGGameObjectResourceCollection GameObjects
		{
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x2544E40", Offset = "0x2544E40", VA = "0x2544E40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000344")]
		public int GameObjectCount
		{
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x2544E48", Offset = "0x2544E48", VA = "0x2544E48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x2544E64", Offset = "0x2544E64", VA = "0x2544E64", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x2544ED4", Offset = "0x2544ED4", VA = "0x2544ED4", Slot = "12")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x2544F1C", Offset = "0x2544F1C", VA = "0x2544F1C", Slot = "15")]
		public override bool DeleteAllOutputManagedResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x25451C4", Offset = "0x25451C4", VA = "0x25451C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C42BC", Offset = "0x10C42BC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x25451D4", Offset = "0x25451D4", VA = "0x25451D4", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x2545D48", Offset = "0x2545D48", VA = "0x2545D48", Slot = "18")]
		protected override GameObject SaveResourceToScene(UnityEngine.Component managedResource, Transform newParent)
		{
			return null;
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x2545DB4", Offset = "0x2545DB4", VA = "0x2545DB4", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x2545E14", Offset = "0x2545E14", VA = "0x2545E14")]
		public CreateGameObject()
		{
		}
	}
	[Token(Token = "0x2000205")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A47E0", Offset = "0x10A47E0")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A47E0", Offset = "0x10A47E0")]
	public class CreateMesh : ResourceExportingModule, ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x2000206")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A485C", Offset = "0x10A485C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CGVMesh> <>9__121_0;

			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<CGSpots> <>9__121_1;

			[Token(Token = "0x400086C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CGSpots, bool> <>9__129_0;

			[Token(Token = "0x400086D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGSpots, int> <>9__129_1;

			[Token(Token = "0x60010BB")]
			[Address(RVA = "0x2236E20", Offset = "0x2236E20", VA = "0x2236E20")]
			public <>c()
			{
			}

			[Token(Token = "0x60010BC")]
			[Address(RVA = "0x2236E28", Offset = "0x2236E28", VA = "0x2236E28")]
			internal void <Refresh>b__121_0(CGVMesh d)
			{
			}

			[Token(Token = "0x60010BD")]
			[Address(RVA = "0x2236E44", Offset = "0x2236E44", VA = "0x2236E44")]
			internal void <Refresh>b__121_1(CGSpots d)
			{
			}

			[Token(Token = "0x60010BE")]
			[Address(RVA = "0x2236E60", Offset = "0x2236E60", VA = "0x2236E60")]
			internal bool <ToOneDimensionalArray>b__129_0(CGSpots s)
			{
				return default(bool);
			}

			[Token(Token = "0x60010BF")]
			[Address(RVA = "0x2236E6C", Offset = "0x2236E6C", VA = "0x2236E6C")]
			internal int <ToOneDimensionalArray>b__129_1(CGSpots s)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000207")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A486C", Offset = "0x10A486C")]
		private sealed class <>c__DisplayClass122_0
		{
			[Token(Token = "0x400086E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CreateMesh <>4__this;

			[Token(Token = "0x400086F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SubArray<int> meshIds;

			[Token(Token = "0x60010C0")]
			[Address(RVA = "0x2236E8C", Offset = "0x2236E8C", VA = "0x2236E8C")]
			public <>c__DisplayClass122_0()
			{
			}

			[Token(Token = "0x60010C1")]
			[Address(RVA = "0x2236E94", Offset = "0x2236E94", VA = "0x2236E94")]
			internal void <UpdateColliders>b__0(int i)
			{
			}
		}

		[Token(Token = "0x400084B")]
		private const string DefaultTag = "Untagged";

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B8150", Offset = "0x10B8150")]
		public CGModuleInputSlot InVMeshArray;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B8224", Offset = "0x10B8224")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0x10B8300", Offset = "0x10B8300")]
		[SerializeField]
		private CGMeshResourceCollection m_MeshResources;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8354", Offset = "0x10B8354")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B8354", Offset = "0x10B8354")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8354", Offset = "0x10B8354")]
		private bool m_Combine;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8454", Offset = "0x10B8454")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8454", Offset = "0x10B8454")]
		[SerializeField]
		private bool unwrapUV2;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B852C", Offset = "0x10B852C")]
		[SerializeField]
		private bool m_GroupMeshes;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8578", Offset = "0x10B8578")]
		[SerializeField]
		private bool includeNormals;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B85C4", Offset = "0x10B85C4")]
		private bool includeTangents;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8610", Offset = "0x10B8610")]
		[SerializeField]
		private CGYesNoAuto m_AddNormals;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[HideInInspector]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B86D8", Offset = "0x10B86D8")]
		[SerializeField]
		private CGYesNoAuto m_AddTangents;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B87A0", Offset = "0x10B87A0")]
		private bool m_AddUV2;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8868", Offset = "0x10B8868")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8868", Offset = "0x10B8868")]
		[SerializeField]
		private bool m_MakeStatic;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0x10B8944", Offset = "0x10B8944")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8944", Offset = "0x10B8944")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8944", Offset = "0x10B8944")]
		private int m_Layer;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B8A60", Offset = "0x10B8A60")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8A60", Offset = "0x10B8A60")]
		[SerializeField]
		[AttributeAttribute(Name = "TagAttribute", RVA = "0x10B8A60", Offset = "0x10B8A60")]
		private string m_Tag;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B8B74", Offset = "0x10B8B74")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8B74", Offset = "0x10B8B74")]
		private bool m_RendererEnabled;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8C50", Offset = "0x10B8C50")]
		[SerializeField]
		private ShadowCastingMode m_CastShadows;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8D08", Offset = "0x10B8D08")]
		private bool m_ReceiveShadows;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8DC0", Offset = "0x10B8DC0")]
		private LightProbeUsage m_LightProbeUsage;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8E78", Offset = "0x10B8E78")]
		private bool m_UseLightProbes;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8F40", Offset = "0x10B8F40")]
		[SerializeField]
		private ReflectionProbeUsage m_ReflectionProbes;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B8FF8", Offset = "0x10B8FF8")]
		private Transform m_AnchorOverride;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B90B0", Offset = "0x10B90B0")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B90B0", Offset = "0x10B90B0")]
		private CGColliderEnum m_Collider;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B918C", Offset = "0x10B918C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B918C", Offset = "0x10B918C")]
		private bool m_Convex;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B92B0", Offset = "0x10B92B0")]
		[SerializeField]
		private bool m_IsTrigger;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B9368", Offset = "0x10B9368")]
		[AttributeAttribute(Name = "EnumFlagAttribute", RVA = "0x10B9368", Offset = "0x10B9368")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B9368", Offset = "0x10B9368")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B9368", Offset = "0x10B9368")]
		[SerializeField]
		private MeshColliderCookingOptions m_CookingOptions;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10B94E8", Offset = "0x10B94E8")]
		[SerializeField]
		private bool m_AutoUpdateColliders;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private PhysicMaterial m_Material;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10B9560", Offset = "0x10B9560")]
		private int <VertexCount>k__BackingField;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly CGSpotComparer cgSpotComparer;

		[Token(Token = "0x17000345")]
		public bool Combine
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x2545F34", Offset = "0x2545F34", VA = "0x2545F34")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x2545F3C", Offset = "0x2545F3C", VA = "0x2545F3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000346")]
		public bool UnwrapUV2
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x2545F68", Offset = "0x2545F68", VA = "0x2545F68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x2545FC0", Offset = "0x2545FC0", VA = "0x2545FC0")]
			set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public bool GroupMeshes
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x2546058", Offset = "0x2546058", VA = "0x2546058")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x2546060", Offset = "0x2546060", VA = "0x2546060")]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public bool IncludeNormals
		{
			[Token(Token = "0x6001076")]
			[Address(RVA = "0x254608C", Offset = "0x254608C", VA = "0x254608C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x2546094", Offset = "0x2546094", VA = "0x2546094")]
			set
			{
			}
		}

		[Token(Token = "0x17000349")]
		public bool IncludeTangents
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x25460C0", Offset = "0x25460C0", VA = "0x25460C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x25460C8", Offset = "0x25460C8", VA = "0x25460C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700034A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8CA8", Offset = "0x10C8CA8")]
		public CGYesNoAuto AddNormals
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x25460F4", Offset = "0x25460F4", VA = "0x25460F4")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x25460FC", Offset = "0x25460FC", VA = "0x25460FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8CE0", Offset = "0x10C8CE0")]
		public CGYesNoAuto AddTangents
		{
			[Token(Token = "0x600107C")]
			[Address(RVA = "0x2546120", Offset = "0x2546120", VA = "0x2546120")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x2546128", Offset = "0x2546128", VA = "0x2546128")]
			set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C8D18", Offset = "0x10C8D18")]
		public bool AddUV2
		{
			[Token(Token = "0x600107E")]
			[Address(RVA = "0x254614C", Offset = "0x254614C", VA = "0x254614C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600107F")]
			[Address(RVA = "0x2546154", Offset = "0x2546154", VA = "0x2546154")]
			set
			{
			}
		}

		[Token(Token = "0x1700034D")]
		public int Layer
		{
			[Token(Token = "0x6001080")]
			[Address(RVA = "0x2546180", Offset = "0x2546180", VA = "0x2546180")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001081")]
			[Address(RVA = "0x2546188", Offset = "0x2546188", VA = "0x2546188")]
			set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public string Tag
		{
			[Token(Token = "0x6001082")]
			[Address(RVA = "0x25461E0", Offset = "0x25461E0", VA = "0x25461E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001083")]
			[Address(RVA = "0x25461E8", Offset = "0x25461E8", VA = "0x25461E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public bool MakeStatic
		{
			[Token(Token = "0x6001084")]
			[Address(RVA = "0x2546250", Offset = "0x2546250", VA = "0x2546250")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001085")]
			[Address(RVA = "0x2546258", Offset = "0x2546258", VA = "0x2546258")]
			set
			{
			}
		}

		[Token(Token = "0x17000350")]
		public bool RendererEnabled
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x2546284", Offset = "0x2546284", VA = "0x2546284")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001087")]
			[Address(RVA = "0x254628C", Offset = "0x254628C", VA = "0x254628C")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public ShadowCastingMode CastShadows
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x25462B8", Offset = "0x25462B8", VA = "0x25462B8")]
			get
			{
				return default(ShadowCastingMode);
			}
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x25462C0", Offset = "0x25462C0", VA = "0x25462C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public bool ReceiveShadows
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0x25462E4", Offset = "0x25462E4", VA = "0x25462E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600108B")]
			[Address(RVA = "0x25462EC", Offset = "0x25462EC", VA = "0x25462EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000353")]
		public bool UseLightProbes
		{
			[Token(Token = "0x600108C")]
			[Address(RVA = "0x2546318", Offset = "0x2546318", VA = "0x2546318")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600108D")]
			[Address(RVA = "0x2546320", Offset = "0x2546320", VA = "0x2546320")]
			set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public LightProbeUsage LightProbeUsage
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0x254634C", Offset = "0x254634C", VA = "0x254634C")]
			get
			{
				return default(LightProbeUsage);
			}
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x2546354", Offset = "0x2546354", VA = "0x2546354")]
			set
			{
			}
		}

		[Token(Token = "0x17000355")]
		public ReflectionProbeUsage ReflectionProbes
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0x2546378", Offset = "0x2546378", VA = "0x2546378")]
			get
			{
				return default(ReflectionProbeUsage);
			}
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x2546380", Offset = "0x2546380", VA = "0x2546380")]
			set
			{
			}
		}

		[Token(Token = "0x17000356")]
		public Transform AnchorOverride
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0x25463A4", Offset = "0x25463A4", VA = "0x25463A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001093")]
			[Address(RVA = "0x25463AC", Offset = "0x25463AC", VA = "0x25463AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public CGColliderEnum Collider
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0x2546458", Offset = "0x2546458", VA = "0x2546458")]
			get
			{
				return default(CGColliderEnum);
			}
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x2546460", Offset = "0x2546460", VA = "0x2546460")]
			set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public bool AutoUpdateColliders
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x2546484", Offset = "0x2546484", VA = "0x2546484")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001097")]
			[Address(RVA = "0x254648C", Offset = "0x254648C", VA = "0x254648C")]
			set
			{
			}
		}

		[Token(Token = "0x17000359")]
		public bool Convex
		{
			[Token(Token = "0x6001098")]
			[Address(RVA = "0x25464B8", Offset = "0x25464B8", VA = "0x25464B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001099")]
			[Address(RVA = "0x25464C0", Offset = "0x25464C0", VA = "0x25464C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public bool IsTrigger
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0x25464EC", Offset = "0x25464EC", VA = "0x25464EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600109B")]
			[Address(RVA = "0x25464F4", Offset = "0x25464F4", VA = "0x25464F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700035B")]
		public MeshColliderCookingOptions CookingOptions
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x2546520", Offset = "0x2546520", VA = "0x2546520")]
			get
			{
				return default(MeshColliderCookingOptions);
			}
			[Token(Token = "0x600109D")]
			[Address(RVA = "0x2546528", Offset = "0x2546528", VA = "0x2546528")]
			set
			{
			}
		}

		[Token(Token = "0x1700035C")]
		public PhysicMaterial Material
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x254654C", Offset = "0x254654C", VA = "0x254654C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600109F")]
			[Address(RVA = "0x2546554", Offset = "0x2546554", VA = "0x2546554")]
			set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public CGMeshResourceCollection Meshes
		{
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0x2546600", Offset = "0x2546600", VA = "0x2546600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035E")]
		public int MeshCount
		{
			[Token(Token = "0x60010A1")]
			[Address(RVA = "0x2546608", Offset = "0x2546608", VA = "0x2546608")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035F")]
		public int VertexCount
		{
			[Token(Token = "0x60010A2")]
			[Address(RVA = "0x2546624", Offset = "0x2546624", VA = "0x2546624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C42F4", Offset = "0x10C42F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010A3")]
			[Address(RVA = "0x254662C", Offset = "0x254662C", VA = "0x254662C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4304", Offset = "0x10C4304")]
			private set
			{
			}
		}

		[Token(Token = "0x17000360")]
		private bool CanGroupMeshes
		{
			[Token(Token = "0x60010A4")]
			[Address(RVA = "0x2546634", Offset = "0x2546634", VA = "0x2546634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000361")]
		private bool CanModifyStaticFlag
		{
			[Token(Token = "0x60010A5")]
			[Address(RVA = "0x2546650", Offset = "0x2546650", VA = "0x2546650")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000362")]
		private bool CanUpdate
		{
			[Token(Token = "0x60010A6")]
			[Address(RVA = "0x2546658", Offset = "0x2546658", VA = "0x2546658")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000363")]
		private bool EnableIsTrigger
		{
			[Token(Token = "0x60010A7")]
			[Address(RVA = "0x2546694", Offset = "0x2546694", VA = "0x2546694")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x25466EC", Offset = "0x25466EC", VA = "0x25466EC", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x25469E4", Offset = "0x25469E4", VA = "0x25469E4")]
		public CreateMesh()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x2546B78", Offset = "0x2546B78", VA = "0x2546B78", Slot = "15")]
		public override bool DeleteAllOutputManagedResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x2546FC4", Offset = "0x2546FC4", VA = "0x2546FC4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x10C4314", Offset = "0x10C4314")]
		public void Clear()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x2546FD4", Offset = "0x2546FD4", VA = "0x2546FD4", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x2548594", Offset = "0x2548594", VA = "0x2548594")]
		public void UpdateColliders()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x2548A84", Offset = "0x2548A84", VA = "0x2548A84", Slot = "19")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x2548A88", Offset = "0x2548A88", VA = "0x2548A88", Slot = "20")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x2548464", Offset = "0x2548464", VA = "0x2548464")]
		private void CreateMeshes(List<CGVMesh> vMeshes, bool combine, [NotNull] List<CGMeshResource> createdMeshes)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x2547D44", Offset = "0x2547D44", VA = "0x2547D44")]
		private void CreateSpotMeshes(List<CGVMesh> vMeshes, SubArray<CGSpot> spots, bool combine, bool spotsIsACopy, [NotNull] List<CGMeshResource> createdMeshes)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x2548B70", Offset = "0x2548B70", VA = "0x2548B70")]
		private CGMeshResource WriteVMeshToMesh(CGVMesh vmesh, List<CGMeshResource> cgMeshResources)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x2548DEC", Offset = "0x2548DEC", VA = "0x2548DEC")]
		private CGMeshResource GetNewMesh(int currentMeshCount)
		{
			return null;
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x2547868", Offset = "0x2547868", VA = "0x2547868")]
		private static SubArray<CGSpot>? ToOneDimensionalArray(List<CGSpots> spotsList, out bool arrayIsCopy)
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x2548FB0", Offset = "0x2548FB0", VA = "0x2548FB0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C434C", Offset = "0x10C434C")]
		private void ValidateMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x2549034", Offset = "0x2549034", VA = "0x2549034", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x254903C", Offset = "0x254903C", VA = "0x254903C")]
		public void SaveToAsset()
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x2549090", Offset = "0x2549090", VA = "0x2549090")]
		public void SaveToSceneAndAsset()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x25490E4", Offset = "0x25490E4", VA = "0x25490E4", Slot = "18")]
		protected override GameObject SaveResourceToScene(UnityEngine.Component managedResource, Transform newParent)
		{
			return null;
		}
	}
	[Token(Token = "0x2000208")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A487C", Offset = "0x10A487C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A487C", Offset = "0x10A487C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A487C", Offset = "0x10A487C")]
	public class CreatePathLineRenderer : CGModule
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9570", Offset = "0x10B9570")]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private LineRenderer mLineRenderer;

		[Token(Token = "0x17000364")]
		public LineRenderer LineRenderer
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0x2549250", Offset = "0x2549250", VA = "0x2549250")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x2549304", Offset = "0x2549304", VA = "0x2549304", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x2549380", Offset = "0x2549380", VA = "0x2549380", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x2549508", Offset = "0x2549508", VA = "0x2549508")]
		public CreatePathLineRenderer()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A495C", Offset = "0x10A495C")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A495C", Offset = "0x10A495C")]
	public class DebugRasterizedPath : CGModule
	{
		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B963C", Offset = "0x10B963C")]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B9708", Offset = "0x10B9708")]
		public bool ShowNormals;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B9740", Offset = "0x10B9740")]
		public bool ShowOrientation;

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x1FF46C8", Offset = "0x1FF46C8", VA = "0x1FF46C8", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x1FF46F4", Offset = "0x1FF46F4", VA = "0x1FF46F4")]
		public DebugRasterizedPath()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A49F4", Offset = "0x10A49F4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A49F4", Offset = "0x10A49F4")]
	public class DebugVMesh : CGModule
	{
		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9778", Offset = "0x10B9778")]
		[HideInInspector]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B9844", Offset = "0x10B9844")]
		public bool ShowVertices;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool ShowVertexID;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool ShowUV;

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x1FF476C", Offset = "0x1FF476C", VA = "0x1FF476C", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x1FF4798", Offset = "0x1FF4798", VA = "0x1FF4798")]
		public DebugVMesh()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4A70", Offset = "0x10A4A70")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4A70", Offset = "0x10A4A70")]
	public class DebugVolume : CGModule
	{
		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B987C", Offset = "0x10B987C")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B9940", Offset = "0x10B9940")]
		public bool ShowPathSamples;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool ShowCrossSamples;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[IntRegion]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10B9978", Offset = "0x10B9978")]
		public IntRegion LimitCross;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool ShowNormals;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool ShowIndex;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		public bool ShowMap;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Color PathColor;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Color VolumeColor;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Color NormalColor;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B9A30", Offset = "0x10B9A30")]
		public bool Interpolate;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B9A68", Offset = "0x10B9A68")]
		public float InterpolatePathF;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10B9ABC", Offset = "0x10B9ABC")]
		public float InterpolateCrossF;

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x1FF4808", Offset = "0x1FF4808", VA = "0x1FF4808", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x1FF48A8", Offset = "0x1FF48A8", VA = "0x1FF48A8")]
		public DebugVolume()
		{
		}
	}
	[Token(Token = "0x200020C")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4AEC", Offset = "0x10A4AEC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4AEC", Offset = "0x10A4AEC")]
	public class DeformMesh : ScalingModule
	{
		[Serializable]
		[Token(Token = "0x200020D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4B84", Offset = "0x10A4B84")]
		private sealed class <>c
		{
			[Token(Token = "0x400088D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400088E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CGSpots> <>9__12_1;

			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<CGVMesh> <>9__12_0;

			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CGSpots, bool> <>9__17_0;

			[Token(Token = "0x4000891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGSpots, int> <>9__17_1;

			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x2243C44", Offset = "0x2243C44", VA = "0x2243C44")]
			public <>c()
			{
			}

			[Token(Token = "0x60010D9")]
			[Address(RVA = "0x2243C4C", Offset = "0x2243C4C", VA = "0x2243C4C")]
			internal void <Refresh>b__12_1(CGSpots s)
			{
			}

			[Token(Token = "0x60010DA")]
			[Address(RVA = "0x2243C68", Offset = "0x2243C68", VA = "0x2243C68")]
			internal void <Refresh>b__12_0(CGVMesh m)
			{
			}

			[Token(Token = "0x60010DB")]
			[Address(RVA = "0x2243C84", Offset = "0x2243C84", VA = "0x2243C84")]
			internal bool <ToOneDimensionalArray>b__17_0(CGSpots s)
			{
				return default(bool);
			}

			[Token(Token = "0x60010DC")]
			[Address(RVA = "0x2243C90", Offset = "0x2243C90", VA = "0x2243C90")]
			internal int <ToOneDimensionalArray>b__17_1(CGSpots s)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200020E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4B94", Offset = "0x10A4B94")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x4000892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGPath path;

			[Token(Token = "0x4000893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<CGVMesh> inputMeshes;

			[Token(Token = "0x4000894")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CGVMesh[] outputMeshes;

			[Token(Token = "0x4000895")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SubArray<CGSpot> outputSpots;

			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool stretchToEnd;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float smallestVertexDistance;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float stretchingAdditionalDistanceRatio;

			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ScaleParameters scaleParameters;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool isCurveEvaluationNeeded;

			[Token(Token = "0x60010DD")]
			[Address(RVA = "0x2243CB0", Offset = "0x2243CB0", VA = "0x2243CB0")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x2243CB8", Offset = "0x2243CB8", VA = "0x2243CB8")]
			internal void <DeformMeshes>b__0(CGSpot spot, int spotIndex, int elementsCount)
			{
			}
		}

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9B10", Offset = "0x10B9B10")]
		[HideInInspector]
		public CGModuleInputSlot InVMeshes;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9BE4", Offset = "0x10B9BE4")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9CC4", Offset = "0x10B9CC4")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B9DA0", Offset = "0x10B9DA0")]
		public CGModuleOutputSlot OutVMeshes;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B9E38", Offset = "0x10B9E38")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10B9ECC", Offset = "0x10B9ECC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10B9ECC", Offset = "0x10B9ECC")]
		[SerializeField]
		private bool stretchToEnd;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly ThreadPoolWorker<CGSpot> threadWorker;

		[Token(Token = "0x17000365")]
		public bool StretchToEnd
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x1FF4988", Offset = "0x1FF4988", VA = "0x1FF4988")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0x1FF4990", Offset = "0x1FF4990", VA = "0x1FF4990")]
			set
			{
			}
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x1FF49BC", Offset = "0x1FF49BC", VA = "0x1FF49BC", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x1FF4A04", Offset = "0x1FF4A04", VA = "0x1FF4A04", Slot = "12")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x1FF4A64", Offset = "0x1FF4A64", VA = "0x1FF4A64", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x1FF6204", Offset = "0x1FF6204", VA = "0x1FF6204")]
		public static void DeformMeshes([NotNull] List<CGVMesh> inputMeshes, SubArray<CGSpot> inputSpots, SubArray<CGSpot> outputSpots, [NotNull] CGVMesh[] outputMeshes, [NotNull] CGPath path, bool stretchToEnd, ThreadPoolWorker<CGSpot> threadPoolWorker)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x1FF59C0", Offset = "0x1FF59C0", VA = "0x1FF59C0")]
		public static void DeformMeshes([NotNull] List<CGVMesh> inputMeshes, SubArray<CGSpot> inputSpots, SubArray<CGSpot> outputSpots, [NotNull] CGVMesh[] outputMeshes, [NotNull] CGPath path, bool stretchToEnd, ThreadPoolWorker<CGSpot> threadPoolWorker, ScaleParameters scaleParameters)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x1FF6334", Offset = "0x1FF6334", VA = "0x1FF6334")]
		private static bool IsCurveEvaluationNeeded(ScaleParameters scaleParameters)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x1FF63D0", Offset = "0x1FF63D0", VA = "0x1FF63D0")]
		private static float GetSpotDistance(CGPath path, Vector3 spotPosition, Vector3[] pathPoints, int maxIndex, float[] pathRelativeDistances, float pathLength)
		{
			return default(float);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x1FF54E4", Offset = "0x1FF54E4", VA = "0x1FF54E4")]
		private static SubArray<CGSpot>? ToOneDimensionalArray(List<CGSpots> spotsList, out bool arrayIsCopy)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x1FF64F4", Offset = "0x1FF64F4", VA = "0x1FF64F4")]
		public DeformMesh()
		{
		}
	}
	[Token(Token = "0x200020F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4BA4", Offset = "0x10A4BA4")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4BA4", Offset = "0x10A4BA4")]
	public class GameObjectToMesh : CGModule
	{
		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10B9F3C", Offset = "0x10B9F3C")]
		public CGModuleInputSlot InGameObjects;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10B9FF8", Offset = "0x10B9FF8")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BA074", Offset = "0x10BA074")]
		[SerializeField]
		private bool useChildrenMeshes;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BA0C0", Offset = "0x10BA0C0")]
		private bool centerMesh;

		[Token(Token = "0x17000366")]
		public bool UseChildrenMeshes
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0x2F2D85C", Offset = "0x2F2D85C", VA = "0x2F2D85C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0x2F2D864", Offset = "0x2F2D864", VA = "0x2F2D864")]
			set
			{
			}
		}

		[Token(Token = "0x17000367")]
		public bool CenterMesh
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0x2F2D890", Offset = "0x2F2D890", VA = "0x2F2D890")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x2F2D898", Offset = "0x2F2D898", VA = "0x2F2D898")]
			set
			{
			}
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x2F2D8C4", Offset = "0x2F2D8C4", VA = "0x2F2D8C4", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x2F2D928", Offset = "0x2F2D928", VA = "0x2F2D928", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x2F2E498", Offset = "0x2F2E498", VA = "0x2F2E498")]
		public static Mesh CombineMeshFilters(MeshFilter[] meshFilters, out List<Material> materials, Matrix4x4 originTrs, [CanBeNull] List<string> errorMessages)
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x2F2EA60", Offset = "0x2F2EA60", VA = "0x2F2EA60")]
		public GameObjectToMesh()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4C3C", Offset = "0x10A4C3C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4C3C", Offset = "0x10A4C3C")]
	public class InputGameObject : CGModule
	{
		[Serializable]
		[Token(Token = "0x2000211")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4CD4", Offset = "0x10A4CD4")]
		private sealed class <>c
		{
			[Token(Token = "0x40008A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40008A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGGameObjectProperties, bool> <>9__7_0;

			[Token(Token = "0x40008A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGGameObjectProperties, CGGameObject> <>9__7_1;

			[Token(Token = "0x40008A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<CGGameObjectProperties> <>9__9_0;

			[Token(Token = "0x60010EF")]
			[Address(RVA = "0x1DDD94C", Offset = "0x1DDD94C", VA = "0x1DDD94C")]
			public <>c()
			{
			}

			[Token(Token = "0x60010F0")]
			[Address(RVA = "0x1DDD954", Offset = "0x1DDD954", VA = "0x1DDD954")]
			internal bool <Refresh>b__7_0(CGGameObjectProperties go)
			{
				return default(bool);
			}

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x1DDD9C8", Offset = "0x1DDD9C8", VA = "0x1DDD9C8")]
			internal CGGameObject <Refresh>b__7_1(CGGameObjectProperties go)
			{
				return null;
			}

			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x1DDDA28", Offset = "0x1DDDA28", VA = "0x1DDDA28")]
			internal bool <WarnAboutInvalidInputs>b__9_0(CGGameObjectProperties g)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA10C", Offset = "0x10BA10C")]
		[HideInInspector]
		public CGModuleOutputSlot OutGameObject;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[ArrayEx]
		private List<CGGameObjectProperties> m_GameObjects;

		[Token(Token = "0x17000368")]
		public List<CGGameObjectProperties> GameObjects
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0x15B30F8", Offset = "0x15B30F8", VA = "0x15B30F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000369")]
		public bool SupportsIPE
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x15B3100", Offset = "0x15B3100", VA = "0x15B3100")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x15B3108", Offset = "0x15B3108", VA = "0x15B3108", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x15B3168", Offset = "0x15B3168", VA = "0x15B3168", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x15B33F4", Offset = "0x15B33F4", VA = "0x15B33F4", Slot = "17")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x15B3454", Offset = "0x15B3454", VA = "0x15B3454")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C4384", Offset = "0x10C4384")]
		private void WarnAboutInvalidInputs()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x15B35DC", Offset = "0x15B35DC", VA = "0x15B35DC")]
		public InputGameObject()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4CE4", Offset = "0x10A4CE4")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4CE4", Offset = "0x10A4CE4")]
	public class InputMesh : CGModule, IExternalInput
	{
		[Serializable]
		[Token(Token = "0x2000213")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4D7C", Offset = "0x10A4D7C")]
		private sealed class <>c
		{
			[Token(Token = "0x40008A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40008A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGMeshProperties, bool> <>9__8_0;

			[Token(Token = "0x40008A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGMeshProperties, CGVMesh> <>9__8_1;

			[Token(Token = "0x40008AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<CGMeshProperties> <>9__10_0;

			[Token(Token = "0x40008AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGMeshProperties, Mesh> <>9__10_1;

			[Token(Token = "0x40008AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<Mesh, bool> <>9__10_2;

			[Token(Token = "0x60010FD")]
			[Address(RVA = "0x1DDDB00", Offset = "0x1DDDB00", VA = "0x1DDDB00")]
			public <>c()
			{
			}

			[Token(Token = "0x60010FE")]
			[Address(RVA = "0x1DDDB08", Offset = "0x1DDDB08", VA = "0x1DDDB08")]
			internal bool <Refresh>b__8_0(CGMeshProperties p)
			{
				return default(bool);
			}

			[Token(Token = "0x60010FF")]
			[Address(RVA = "0x1DDDB7C", Offset = "0x1DDDB7C", VA = "0x1DDDB7C")]
			internal CGVMesh <Refresh>b__8_1(CGMeshProperties p)
			{
				return null;
			}

			[Token(Token = "0x6001100")]
			[Address(RVA = "0x1DDDBDC", Offset = "0x1DDDBDC", VA = "0x1DDDBDC")]
			internal bool <WarnAboutInvalidInputs>b__10_0(CGMeshProperties m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001101")]
			[Address(RVA = "0x1DDDC50", Offset = "0x1DDDC50", VA = "0x1DDDC50")]
			internal Mesh <WarnAboutInvalidInputs>b__10_1(CGMeshProperties p)
			{
				return null;
			}

			[Token(Token = "0x6001102")]
			[Address(RVA = "0x1DDDC68", Offset = "0x1DDDC68", VA = "0x1DDDC68")]
			internal bool <WarnAboutInvalidInputs>b__10_2(Mesh m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA1BC", Offset = "0x10BA1BC")]
		[HideInInspector]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ArrayEx]
		[SerializeField]
		private List<CGMeshProperties> m_Meshes;

		[Token(Token = "0x1700036A")]
		public List<CGMeshProperties> Meshes
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x15B3698", Offset = "0x15B3698", VA = "0x15B3698")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036B")]
		public bool SupportsIPE
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x15B36A0", Offset = "0x15B36A0", VA = "0x15B36A0", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x15B36A8", Offset = "0x15B36A8", VA = "0x15B36A8", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x15B37AC", Offset = "0x15B37AC", VA = "0x15B37AC", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x15B380C", Offset = "0x15B380C", VA = "0x15B380C", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x15B3A98", Offset = "0x15B3A98", VA = "0x15B3A98", Slot = "17")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x15B3AF8", Offset = "0x15B3AF8", VA = "0x15B3AF8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x10C43BC", Offset = "0x10C43BC")]
		private void WarnAboutInvalidInputs()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x15B3EB0", Offset = "0x15B3EB0", VA = "0x15B3EB0")]
		public InputMesh()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x15B4018", Offset = "0x15B4018", VA = "0x15B4018")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C43F4", Offset = "0x10C43F4")]
		private void <WarnAboutInvalidInputs>b__10_3(Mesh m)
		{
		}
	}
	[Token(Token = "0x2000214")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4D8C", Offset = "0x10A4D8C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4D8C", Offset = "0x10A4D8C")]
	public class InputSplinePath : SplineInputModuleBase, IExternalInput, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA26C", Offset = "0x10BA26C")]
		public CGModuleOutputSlot Path;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10BA2DC", Offset = "0x10BA2DC")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0x10BA2DC", Offset = "0x10BA2DC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10BA2DC", Offset = "0x10BA2DC")]
		private CurvySpline m_Spline;

		[Token(Token = "0x1700036C")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001103")]
			[Address(RVA = "0x15B41F0", Offset = "0x15B41F0", VA = "0x15B41F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001104")]
			[Address(RVA = "0x15B41F8", Offset = "0x15B41F8", VA = "0x15B41F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700036D")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x15B42D0", Offset = "0x15B42D0", VA = "0x15B42D0", Slot = "22")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700036E")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x15B459C", Offset = "0x15B459C", VA = "0x15B459C", Slot = "19")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x15B45A4", Offset = "0x15B45A4", VA = "0x15B45A4", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x15B42D8", Offset = "0x15B42D8", VA = "0x15B42D8", Slot = "23")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x15B44F8", Offset = "0x15B44F8", VA = "0x15B44F8", Slot = "17")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x15B45A8", Offset = "0x15B45A8", VA = "0x15B45A8")]
		public InputSplinePath()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4E24", Offset = "0x10A4E24")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4E24", Offset = "0x10A4E24")]
	public class InputSplineShape : SplineInputModuleBase, IExternalInput, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA398", Offset = "0x10BA398")]
		[HideInInspector]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0x10BA408", Offset = "0x10BA408")]
		[SerializeField]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0x10BA408", Offset = "0x10BA408")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0x10BA408", Offset = "0x10BA408")]
		private CurvySpline m_Shape;

		[Token(Token = "0x1700036F")]
		public CurvySpline Shape
		{
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x15B4618", Offset = "0x15B4618", VA = "0x15B4618")]
			get
			{
				return null;
			}
			[Token(Token = "0x600110C")]
			[Address(RVA = "0x15B4620", Offset = "0x15B4620", VA = "0x15B4620")]
			set
			{
			}
		}

		[Token(Token = "0x17000370")]
		public bool SupportsIPE
		{
			[Token(Token = "0x600110D")]
			[Address(RVA = "0x15B46F8", Offset = "0x15B46F8", VA = "0x15B46F8", Slot = "22")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000371")]
		public bool FreeForm
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0x15B46FC", Offset = "0x15B46FC", VA = "0x15B46FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600110F")]
			[Address(RVA = "0x15B47E0", Offset = "0x15B47E0", VA = "0x15B47E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000372")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x15B4BD4", Offset = "0x15B4BD4", VA = "0x15B4BD4", Slot = "19")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001114")]
			[Address(RVA = "0x15B4BDC", Offset = "0x15B4BDC", VA = "0x15B4BDC", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x15B4940", Offset = "0x15B4940", VA = "0x15B4940", Slot = "23")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001111")]
		public T SetManagedShape<T>() where T : CurvyShape2D
		{
			return null;
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x15B4B18", Offset = "0x15B4B18", VA = "0x15B4B18")]
		public void RemoveManagedShape()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x15B4BE0", Offset = "0x15B4BE0", VA = "0x15B4BE0", Slot = "21")]
		protected override void OnSplineAssigned()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x15B4C7C", Offset = "0x15B4C7C", VA = "0x15B4C7C")]
		public InputSplineShape()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4EBC", Offset = "0x10A4EBC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4EBC", Offset = "0x10A4EBC")]
	public class InputSpots : CGModule
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA4C4", Offset = "0x10BA4C4")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[ArrayEx]
		[SerializeField]
		private List<CGSpot> m_Spots;

		[Token(Token = "0x17000373")]
		public List<CGSpot> Spots
		{
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x15B4CEC", Offset = "0x15B4CEC", VA = "0x15B4CEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x15B4CF4", Offset = "0x15B4CF4", VA = "0x15B4CF4")]
			set
			{
			}
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x15B4D3C", Offset = "0x15B4D3C", VA = "0x15B4D3C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x15B4D74", Offset = "0x15B4D74", VA = "0x15B4D74", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x15B4DD4", Offset = "0x15B4DD4", VA = "0x15B4DD4", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x15B4E94", Offset = "0x15B4E94", VA = "0x15B4E94")]
		public InputSpots()
		{
		}
	}
	[Token(Token = "0x2000217")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4F54", Offset = "0x10A4F54")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4F54", Offset = "0x10A4F54")]
	public class InputTransformSpots : CGModule
	{
		[Serializable]
		[Token(Token = "0x2000218")]
		public struct TransformSpot : IEquatable<TransformSpot>
		{
			[Token(Token = "0x40008B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			private int index;

			[Token(Token = "0x40008B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			private Transform transform;

			[Token(Token = "0x17000375")]
			public int Index
			{
				[Token(Token = "0x6001127")]
				[Address(RVA = "0x1DDDDD0", Offset = "0x1DDDDD0", VA = "0x1DDDDD0")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000376")]
			public Transform Transform
			{
				[Token(Token = "0x6001128")]
				[Address(RVA = "0x1DDDDD8", Offset = "0x1DDDDD8", VA = "0x1DDDDD8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001129")]
			[Address(RVA = "0x1DDDDE0", Offset = "0x1DDDDE0", VA = "0x1DDDDE0", Slot = "4")]
			public bool Equals(TransformSpot other)
			{
				return default(bool);
			}

			[Token(Token = "0x600112A")]
			[Address(RVA = "0x1DDDE04", Offset = "0x1DDDE04", VA = "0x1DDDE04", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0x1DDDEA0", Offset = "0x1DDDEA0", VA = "0x1DDDEA0", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x600112C")]
			[Address(RVA = "0x1DDDF4C", Offset = "0x1DDDF4C", VA = "0x1DDDF4C")]
			public static bool operator ==(TransformSpot left, TransformSpot right)
			{
				return default(bool);
			}

			[Token(Token = "0x600112D")]
			[Address(RVA = "0x1DDDF6C", Offset = "0x1DDDF6C", VA = "0x1DDDF6C")]
			public static bool operator !=(TransformSpot left, TransformSpot right)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000219")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A4FEC", Offset = "0x10A4FEC")]
		private sealed class <>c
		{
			[Token(Token = "0x40008B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40008B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<TransformSpot, bool> <>9__9_0;

			[Token(Token = "0x600112F")]
			[Address(RVA = "0x1DDDD60", Offset = "0x1DDDD60", VA = "0x1DDDD60")]
			public <>c()
			{
			}

			[Token(Token = "0x6001130")]
			[Address(RVA = "0x1DDDD68", Offset = "0x1DDDD68", VA = "0x1DDDD68")]
			internal bool <Refresh>b__9_0(TransformSpot s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA56C", Offset = "0x10BA56C")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[ArrayEx]
		private List<TransformSpot> transformSpots;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly Dictionary<CGSpot, TransformSpot> outputToInputDictionary;

		[Token(Token = "0x17000374")]
		public List<TransformSpot> TransformSpots
		{
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x15B4F50", Offset = "0x15B4F50", VA = "0x15B4F50")]
			get
			{
				return null;
			}
			[Token(Token = "0x600111E")]
			[Address(RVA = "0x15B4F58", Offset = "0x15B4F58", VA = "0x15B4F58")]
			set
			{
			}
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x15B4FA0", Offset = "0x15B4FA0", VA = "0x15B4FA0", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x15B4FD8", Offset = "0x15B4FD8", VA = "0x15B4FD8", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x15B4FE0", Offset = "0x15B4FE0", VA = "0x15B4FE0", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x15B5040", Offset = "0x15B5040", VA = "0x15B5040")]
		private void Update()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x15B5200", Offset = "0x15B5200", VA = "0x15B5200", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x15B5488", Offset = "0x15B5488", VA = "0x15B5488", Slot = "5")]
		protected override void ResetOnEnable()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x15B54E8", Offset = "0x15B54E8", VA = "0x15B54E8")]
		public InputTransformSpots()
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x15B55F0", Offset = "0x15B55F0", VA = "0x15B55F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4404", Offset = "0x10C4404")]
		private CGSpot <Refresh>b__9_1(TransformSpot s)
		{
			return default(CGSpot);
		}
	}
	[Token(Token = "0x200021A")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A4FFC", Offset = "0x10A4FFC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A4FFC", Offset = "0x10A4FFC")]
	public class ModifierMixPaths : CGModule, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008BA")]
		private const int MixMinValue = -1;

		[Token(Token = "0x40008BB")]
		private const int MixMaxValue = 1;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BA634", Offset = "0x10BA634")]
		public CGModuleInputSlot InPathA;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BA6F8", Offset = "0x10BA6F8")]
		public CGModuleInputSlot InPathB;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BA7BC", Offset = "0x10BA7BC")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10BA82C", Offset = "0x10BA82C")]
		private float m_Mix;

		[Token(Token = "0x17000377")]
		public float Mix
		{
			[Token(Token = "0x6001131")]
			[Address(RVA = "0x31269C4", Offset = "0x31269C4", VA = "0x31269C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001132")]
			[Address(RVA = "0x31269CC", Offset = "0x31269CC", VA = "0x31269CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000378")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001133")]
			[Address(RVA = "0x3126A20", Offset = "0x3126A20", VA = "0x3126A20", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x3126BA8", Offset = "0x3126BA8", VA = "0x3126BA8", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x3126BF0", Offset = "0x3126BF0", VA = "0x3126BF0", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x3126C1C", Offset = "0x3126C1C", VA = "0x3126C1C", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x3126E3C", Offset = "0x3126E3C", VA = "0x3126E3C")]
		[CanBeNull]
		public static CGPath MixPath([CanBeNull] CGPath pathA, [CanBeNull] CGPath pathB, float mix, [NotNull] List<string> warningsContainer)
		{
			return null;
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x3127D44", Offset = "0x3127D44", VA = "0x3127D44")]
		public ModifierMixPaths()
		{
		}
	}
	[Token(Token = "0x200021B")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A5094", Offset = "0x10A5094")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A5094", Offset = "0x10A5094")]
	public class ModifierMixShapes : CGModule, IOnRequestProcessing, IPathProvider
	{
		[Serializable]
		[Token(Token = "0x200021C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A512C", Offset = "0x10A512C")]
		private sealed class <>c
		{
			[Token(Token = "0x40008C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40008C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SamplePointsMaterialGroup, SamplePointsMaterialGroup> <>9__15_0;

			[Token(Token = "0x6001143")]
			[Address(RVA = "0x1DE01A0", Offset = "0x1DE01A0", VA = "0x1DE01A0")]
			public <>c()
			{
			}

			[Token(Token = "0x6001144")]
			[Address(RVA = "0x1DE01A8", Offset = "0x1DE01A8", VA = "0x1DE01A8")]
			internal SamplePointsMaterialGroup <InterpolateShape>b__15_0(SamplePointsMaterialGroup g)
			{
				return null;
			}
		}

		[Token(Token = "0x40008C0")]
		private const int MixMinValue = -1;

		[Token(Token = "0x40008C1")]
		private const int MixMaxValue = 1;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BA8B8", Offset = "0x10BA8B8")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BA97C", Offset = "0x10BA97C")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BAA40", Offset = "0x10BAA40")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10BAAB0", Offset = "0x10BAAB0")]
		private float m_Mix;

		[Token(Token = "0x17000379")]
		public float Mix
		{
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x3127E18", Offset = "0x3127E18", VA = "0x3127E18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600113A")]
			[Address(RVA = "0x3127E20", Offset = "0x3127E20", VA = "0x3127E20")]
			set
			{
			}
		}

		[Token(Token = "0x1700037A")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600113B")]
			[Address(RVA = "0x3127E74", Offset = "0x3127E74", VA = "0x3127E74", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x3127FFC", Offset = "0x3127FFC", VA = "0x3127FFC", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x3128044", Offset = "0x3128044", VA = "0x3128044", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x3128070", Offset = "0x3128070", VA = "0x3128070", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x3128294", Offset = "0x3128294", VA = "0x3128294")]
		[CanBeNull]
		public static CGShape MixShapes([CanBeNull] CGShape shapeA, [CanBeNull] CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x3127244", Offset = "0x3127244", VA = "0x3127244")]
		public static void InterpolateShape([NotNull] CGShape resultShape, CGShape shapeA, CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x3128348", Offset = "0x3128348", VA = "0x3128348")]
		public ModifierMixShapes()
		{
		}
	}
	[Token(Token = "0x200021D")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A513C", Offset = "0x10A513C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A513C", Offset = "0x10A513C")]
	public class ModifierPathRelativeTranslation : CGModule, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x200021E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A51D4", Offset = "0x10A51D4")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x40008CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGPath data;

			[Token(Token = "0x40008CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ModifierPathRelativeTranslation <>4__this;

			[Token(Token = "0x6001152")]
			[Address(RVA = "0x1DE01C4", Offset = "0x1DE01C4", VA = "0x1DE01C4")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0x1DE01CC", Offset = "0x1DE01CC", VA = "0x1DE01CC")]
			internal void <OnSlotDataRequest>b__0(int i)
			{
			}
		}

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BAB3C", Offset = "0x10BAB3C")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BAC14", Offset = "0x10BAC14")]
		[HideInInspector]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BAC84", Offset = "0x10BAC84")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10BAC84", Offset = "0x10BAC84")]
		[SerializeField]
		private float lateralTranslation;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0x10BAD10", Offset = "0x10BAD10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BAD10", Offset = "0x10BAD10")]
		[SerializeField]
		private AnimationCurve multiplier;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BAD9C", Offset = "0x10BAD9C")]
		[SerializeField]
		private float angle;

		[Token(Token = "0x1700037B")]
		public float LateralTranslation
		{
			[Token(Token = "0x6001145")]
			[Address(RVA = "0x312841C", Offset = "0x312841C", VA = "0x312841C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001146")]
			[Address(RVA = "0x3128424", Offset = "0x3128424", VA = "0x3128424")]
			set
			{
			}
		}

		[Token(Token = "0x1700037C")]
		public float Angle
		{
			[Token(Token = "0x6001147")]
			[Address(RVA = "0x3128444", Offset = "0x3128444", VA = "0x3128444")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001148")]
			[Address(RVA = "0x312844C", Offset = "0x312844C", VA = "0x312844C")]
			set
			{
			}
		}

		[Token(Token = "0x1700037D")]
		public AnimationCurve Multiplier
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0x31284B4", Offset = "0x31284B4", VA = "0x31284B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600114A")]
			[Address(RVA = "0x31284BC", Offset = "0x31284BC", VA = "0x31284BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700037E")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0x3128504", Offset = "0x3128504", VA = "0x3128504", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x31285F4", Offset = "0x31285F4", VA = "0x31285F4", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x3128934", Offset = "0x3128934", VA = "0x3128934")]
		private static void TranslatePoint(int index, CGPath data, bool evaluateTranslationMultiplier, float translation, AnimationCurve translationMultiplier, float angle)
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x3128B2C", Offset = "0x3128B2C", VA = "0x3128B2C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x3128B74", Offset = "0x3128B74", VA = "0x3128B74", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x3128BE4", Offset = "0x3128BE4", VA = "0x3128BE4", Slot = "7")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x3128C10", Offset = "0x3128C10", VA = "0x3128C10")]
		public ModifierPathRelativeTranslation()
		{
		}
	}
	[Token(Token = "0x200021F")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A51E4", Offset = "0x10A51E4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A51E4", Offset = "0x10A51E4")]
	public class ModifierTRSMesh : TRSModuleBase
	{
		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BADE8", Offset = "0x10BADE8")]
		public CGModuleInputSlot InVMesh;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BAEA8", Offset = "0x10BAEA8")]
		[HideInInspector]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x3128CE0", Offset = "0x3128CE0", VA = "0x3128CE0", Slot = "14")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x3128F18", Offset = "0x3128F18", VA = "0x3128F18")]
		public ModifierTRSMesh()
		{
		}
	}
	[Token(Token = "0x2000220")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A527C", Offset = "0x10A527C")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A527C", Offset = "0x10A527C")]
	public class ModifierTRSPath : TRSModuleBase, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BAF20", Offset = "0x10BAF20")]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BAFF4", Offset = "0x10BAFF4")]
		[HideInInspector]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x1700037F")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001156")]
			[Address(RVA = "0x3128FC0", Offset = "0x3128FC0", VA = "0x3128FC0", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x31290B0", Offset = "0x31290B0", VA = "0x31290B0", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x3129304", Offset = "0x3129304", VA = "0x3129304")]
		public ModifierTRSPath()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A5314", Offset = "0x10A5314")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A5314", Offset = "0x10A5314")]
	public class ModifierTRSShape : TRSModuleBase, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BB064", Offset = "0x10BB064")]
		[HideInInspector]
		public CGModuleInputSlot InShape;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0x10BB138", Offset = "0x10BB138")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x17000380")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0x31293AC", Offset = "0x31293AC", VA = "0x31293AC", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x312949C", Offset = "0x312949C", VA = "0x312949C", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x312964C", Offset = "0x312964C", VA = "0x312964C")]
		public ModifierTRSShape()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A53AC", Offset = "0x10A53AC")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A53AC", Offset = "0x10A53AC")]
	public class ModifierVariableMixShapes : CGModule, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BB1A8", Offset = "0x10BB1A8")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0x10BB26C", Offset = "0x10BB26C")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "ShapeOutputSlotInfo", RVA = "0x10BB330", Offset = "0x10BB330")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0x10BB384", Offset = "0x10BB384")]
		private AnimationCurve m_MixCurve;

		[Token(Token = "0x17000381")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0x31296F4", Offset = "0x31296F4", VA = "0x31296F4", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000382")]
		public AnimationCurve MixCurve
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0x312987C", Offset = "0x312987C", VA = "0x312987C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600115E")]
			[Address(RVA = "0x3129884", Offset = "0x3129884", VA = "0x3129884")]
			set
			{
			}
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x31298CC", Offset = "0x31298CC", VA = "0x31298CC", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x3129914", Offset = "0x3129914", VA = "0x3129914", Slot = "18")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x3129BBC", Offset = "0x3129BBC", VA = "0x3129BBC")]
		public ModifierVariableMixShapes()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0x10A5444", Offset = "0x10A5444")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x10A5444", Offset = "0x10A5444")]
	public class Note : CGModule, INoProcessing
	{
		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x10BB3E4", Offset = "0x10BB3E4")]
		[SerializeField]
		private string m_Note;

		[Token(Token = "0x17000383")]
		public string NoteText
		{
			[Token(Token = "0x6001162")]
			[Address(RVA = "0x312EA4C", Offset = "0x312EA4C", VA = "0x312EA4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001163")]
			[Address(RVA = "0x312EA54", Offset = "0x312EA54", VA = "0x312EA54")]
			set
			{
			}
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x312EA9C", Offset = "0x312EA9C", VA = "0x312EA9C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x312EAE4", Offset = "0x312EAE4", VA = "0x312EAE4", Slot = "13")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x312EB14", Offset = "0x312EB14", VA = "0x312EB14")]
		public Note()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public abstract class ResourceExportingModule : CGModule
	{
		[Token(Token = "0x6001167")]
		[Address(RVA = "0x1CC2C74", Offset = "0x1CC2C74", VA = "0x1CC2C74")]
		public GameObject SaveToScene([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001168")]
		protected abstract GameObject SaveResourceToScene(UnityEngine.Component managedResource, Transform newParent);

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x1CC2E9C", Offset = "0x1CC2E9C", VA = "0x1CC2E9C")]
		protected ResourceExportingModule()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Examples
{
	[Token(Token = "0x2000225")]
	[ExecuteAlways]
	public class ChaseCam : MonoBehaviour
	{
		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform MoveTo;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform RollTo;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float ChaseTime;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 mVelocity;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 mRollVelocity;

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x25414AC", Offset = "0x25414AC", VA = "0x25414AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x25416D0", Offset = "0x25416D0", VA = "0x25416D0")]
		public ChaseCam()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class E01_HeightMetadata : CurvyInterpolatableMetadataBase<float>
	{
		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10BB434", Offset = "0x10BB434")]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x17000384")]
		public override float MetaDataValue
		{
			[Token(Token = "0x600116C")]
			[Address(RVA = "0x1FFA3F4", Offset = "0x1FFA3F4", VA = "0x1FFA3F4", Slot = "10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x1FFA3FC", Offset = "0x1FFA3FC", VA = "0x1FFA3FC", Slot = "11")]
		public override float Interpolate(CurvyInterpolatableMetadataBase<float> nextMetadata, float interpolationTime)
		{
			return default(float);
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x1FFA4DC", Offset = "0x1FFA4DC", VA = "0x1FFA4DC")]
		public E01_HeightMetadata()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class E01_MetaDataController : SplineController
	{
		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10BB4AC", Offset = "0x10BB4AC")]
		[SerializeField]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10BB4AC", Offset = "0x10BB4AC")]
		private float m_MaxHeight;

		[Token(Token = "0x17000385")]
		public float MaxHeight
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x1FFA528", Offset = "0x1FFA528", VA = "0x1FFA528")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x1FFA530", Offset = "0x1FFA530", VA = "0x1FFA530")]
			set
			{
			}
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x1FFA544", Offset = "0x1FFA544", VA = "0x1FFA544", Slot = "31")]
		protected override void UserAfterInit()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x1FFA6CC", Offset = "0x1FFA6CC", VA = "0x1FFA6CC", Slot = "32")]
		protected override void UserAfterUpdate()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x1FFA548", Offset = "0x1FFA548", VA = "0x1FFA548")]
		private void setHeight()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x1FFA6D0", Offset = "0x1FFA6D0", VA = "0x1FFA6D0")]
		public E01_MetaDataController()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class E02_AnimationHelper : MonoBehaviour
	{
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x1FFA6E0", Offset = "0x1FFA6E0", VA = "0x1FFA6E0")]
		public void Play(Animation animation)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x1FFA6FC", Offset = "0x1FFA6FC", VA = "0x1FFA6FC")]
		public void RewindThenPlay(Animation animation)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x1FFA734", Offset = "0x1FFA734", VA = "0x1FFA734")]
		public E02_AnimationHelper()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class E04_PaintSpline : MonoBehaviour
	{
		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StepDistance;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController Controller;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text InfoText;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvySpline mSpline;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mLastControlPointPos;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mResetSpline;

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x1FFA73C", Offset = "0x1FFA73C", VA = "0x1FFA73C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x1FFA798", Offset = "0x1FFA798", VA = "0x1FFA798")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x1FFA984", Offset = "0x1FFA984", VA = "0x1FFA984")]
		private CurvySplineSegment addCP(Vector3 mousePos)
		{
			return null;
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x1FFAA98", Offset = "0x1FFAA98", VA = "0x1FFAA98")]
		public E04_PaintSpline()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[ExecuteAlways]
	public class E05_MoveToNearestPoint : MonoBehaviour
	{
		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Lookup;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySpline Spline;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text StatisticsText;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider Density;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly TimeMeasure Timer;

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1FFAAB0", Offset = "0x1FFAAB0", VA = "0x1FFAAB0")]
		private void Update()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1FFACB0", Offset = "0x1FFACB0", VA = "0x1FFACB0")]
		public void OnSliderChange()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1FFAD14", Offset = "0x1FFAD14", VA = "0x1FFAD14")]
		public E05_MoveToNearestPoint()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class E05_SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x1FFAD88", Offset = "0x1FFAD88", VA = "0x1FFAD88")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x1FFB030", Offset = "0x1FFB030", VA = "0x1FFB030")]
		public E05_SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class E10_MotorController : SplineController
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10BB5A4", Offset = "0x10BB5A4")]
		public float MaxSpeed;

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x1FFB044", Offset = "0x1FFB044", VA = "0x1FFB044", Slot = "14")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x1FFB0F4", Offset = "0x1FFB0F4", VA = "0x1FFB0F4")]
		public E10_MotorController()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5504", Offset = "0x10A5504")]
	public class E11_RigidBodySplineController : MonoBehaviour
	{
		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController CameraController;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float VSpeed;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float HSpeed;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CenterDrag;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float JumpForce;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody mRigidBody;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mTF;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float velocity;

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x1FFB104", Offset = "0x1FFB104", VA = "0x1FFB104")]
		private void Start()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x1FFB160", Offset = "0x1FFB160", VA = "0x1FFB160")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1FFB23C", Offset = "0x1FFB23C", VA = "0x1FFB23C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1FFB554", Offset = "0x1FFB554", VA = "0x1FFB554")]
		public E11_RigidBodySplineController()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class E12_MDJunctionControl : CurvyMetadataBase
	{
		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool UseJunction;

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x1FFB568", Offset = "0x1FFB568", VA = "0x1FFB568")]
		public void Toggle()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x1FFB578", Offset = "0x1FFB578", VA = "0x1FFB578")]
		public E12_MDJunctionControl()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class E12_ToggleBehaviourByTrigger : MonoBehaviour
	{
		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Behaviour UIElement;

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x1FFB580", Offset = "0x1FFB580", VA = "0x1FFB580")]
		private void OnTriggerEnter()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x1FFB624", Offset = "0x1FFB624", VA = "0x1FFB624")]
		public E12_ToggleBehaviourByTrigger()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[ExecuteAlways]
	public class E12_TrainCarManager : MonoBehaviour
	{
		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SplineController Waggon;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController FrontAxis;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SplineController BackAxis;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private E12_TrainManager mTrain;

		[Token(Token = "0x17000386")]
		public float Position
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x1FFB62C", Offset = "0x1FFB62C", VA = "0x1FFB62C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x1FFB648", Offset = "0x1FFB648", VA = "0x1FFB648")]
			set
			{
			}
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x1FFB6FC", Offset = "0x1FFB6FC", VA = "0x1FFB6FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x1FFB8C4", Offset = "0x1FFB8C4", VA = "0x1FFB8C4")]
		public void setup()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x1FFB9DC", Offset = "0x1FFB9DC", VA = "0x1FFB9DC")]
		private void setController(SplineController c, CurvySpline spline, float speed)
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x1FFBAD8", Offset = "0x1FFBAD8", VA = "0x1FFBAD8")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1FFBBA8", Offset = "0x1FFBBA8", VA = "0x1FFBBA8")]
		public E12_TrainCarManager()
		{
		}
	}
	[Token(Token = "0x2000231")]
	[ExecuteAlways]
	public class E12_TrainManager : MonoBehaviour
	{
		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Speed;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Position;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CarSize;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AxisDistance;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CarGap;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Limit;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isSetup;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private E12_TrainCarManager[] Cars;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1FFBBB0", Offset = "0x1FFBBB0", VA = "0x1FFBBB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x1FFBDD8", Offset = "0x1FFBDD8", VA = "0x1FFBDD8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x1FFBDE0", Offset = "0x1FFBDE0", VA = "0x1FFBDE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x1FFBBB4", Offset = "0x1FFBBB4", VA = "0x1FFBBB4")]
		private void setup()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x1FFBFF8", Offset = "0x1FFBFF8", VA = "0x1FFBFF8")]
		public E12_TrainManager()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[ExecuteAlways]
	public class E13_TrainCarDrifter : MonoBehaviour
	{
		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float wheelSpacing;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bodyOffset;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SplineController controllerWheelLeading;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SplineController controllerWheelTrailing;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform trainCar;

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x1FFC00C", Offset = "0x1FFC00C", VA = "0x1FFC00C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x1FFC030", Offset = "0x1FFC030", VA = "0x1FFC030")]
		private void Update()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x1FFC480", Offset = "0x1FFC480", VA = "0x1FFC480")]
		public E13_TrainCarDrifter()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class E21_VolumeControllerInput : MonoBehaviour
	{
		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngularVelocity;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem explosionEmitter;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VolumeController volumeController;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rotatedTransform;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxSpeed;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float accelerationForward;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float accelerationBackward;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mGameOver;

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x1FFC498", Offset = "0x1FFC498", VA = "0x1FFC498")]
		private void Awake()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x1FFC550", Offset = "0x1FFC550", VA = "0x1FFC550")]
		private void Start()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x1FFC640", Offset = "0x1FFC640", VA = "0x1FFC640")]
		private void ResetController()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x1FFC698", Offset = "0x1FFC698", VA = "0x1FFC698")]
		private void Update()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x1FFC8F8", Offset = "0x1FFC8F8", VA = "0x1FFC8F8")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x1FFC8FC", Offset = "0x1FFC8FC", VA = "0x1FFC8FC")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x1FFC994", Offset = "0x1FFC994", VA = "0x1FFC994")]
		private void StartOver()
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x1FFC9B8", Offset = "0x1FFC9B8", VA = "0x1FFC9B8")]
		public E21_VolumeControllerInput()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x1FFC9E0", Offset = "0x1FFC9E0", VA = "0x1FFC9E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4434", Offset = "0x10C4434")]
		private void <Start>b__9_0(CurvyController arg0)
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class E24_TerrainUpdater : MonoBehaviour
	{
		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvyGenerator CurvyGenerator;

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x1FFC9E4", Offset = "0x1FFC9E4", VA = "0x1FFC9E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x1FFCA80", Offset = "0x1FFCA80", VA = "0x1FFCA80")]
		public E24_TerrainUpdater()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class E25_CameraLook : MonoBehaviour
	{
		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BB5E8", Offset = "0x10BB5E8")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x1FFCA88", Offset = "0x1FFCA88", VA = "0x1FFCA88")]
		protected void Update()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x1FFCB88", Offset = "0x1FFCB88", VA = "0x1FFCB88")]
		public E25_CameraLook()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class E25_SplineControllerInputRail : MonoBehaviour
	{
		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float acceleration;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limit;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController splineController;

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x1FFCB98", Offset = "0x1FFCB98", VA = "0x1FFCB98")]
		private void Update()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x1FFCC50", Offset = "0x1FFCC50", VA = "0x1FFCC50")]
		public E25_SplineControllerInputRail()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class E27_MixingAnimator : MonoBehaviour
	{
		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ModifierVariableMixShapes VariableMixShapes;

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x1FFCC64", Offset = "0x1FFCC64", VA = "0x1FFCC64")]
		private void Update()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x1FFCD00", Offset = "0x1FFCD00", VA = "0x1FFCD00")]
		public E27_MixingAnimator()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class E29_ControlPointMover : MonoBehaviour
	{
		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Variation;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Magnitude;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Period;

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x1FFCD08", Offset = "0x1FFCD08", VA = "0x1FFCD08")]
		private void Start()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x1FFCD44", Offset = "0x1FFCD44", VA = "0x1FFCD44")]
		private void Update()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x1FFCDF4", Offset = "0x1FFCDF4", VA = "0x1FFCDF4")]
		public E29_ControlPointMover()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class E50_RunnerController : SplineController
	{
		[Token(Token = "0x200023A")]
		private enum GuideMode
		{
			[Token(Token = "0x400092D")]
			Guided,
			[Token(Token = "0x400092E")]
			Jumping,
			[Token(Token = "0x400092F")]
			FreeFall
		}

		[Token(Token = "0x200023B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5594", Offset = "0x10A5594")]
		private sealed class <Jump>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000930")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000931")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000932")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public E50_RunnerController <>4__this;

			[Token(Token = "0x4000933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <start>5__2;

			[Token(Token = "0x4000934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <f>5__3;

			[Token(Token = "0x17000387")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011B8")]
				[Address(RVA = "0x2244E44", Offset = "0x2244E44", VA = "0x2244E44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000388")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011BA")]
				[Address(RVA = "0x2244E8C", Offset = "0x2244E8C", VA = "0x2244E8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011B5")]
			[Address(RVA = "0x2244CDC", Offset = "0x2244CDC", VA = "0x2244CDC")]
			[DebuggerHidden]
			public <Jump>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60011B6")]
			[Address(RVA = "0x2244D08", Offset = "0x2244D08", VA = "0x2244D08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x2244D0C", Offset = "0x2244D0C", VA = "0x2244D0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x2244E4C", Offset = "0x2244E4C", VA = "0x2244E4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10BB628", Offset = "0x10BB628")]
		public float JumpHeight;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float JumpSpeed;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float Gravity;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private GuideMode mMode;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float jumpHeight;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float fallingSpeed;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private E50_SplineRefMetadata mPossibleSwitchTarget;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int mSwitchInProgress;

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x1FFCE04", Offset = "0x1FFCE04", VA = "0x1FFCE04", Slot = "6")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x1FFCE30", Offset = "0x1FFCE30", VA = "0x1FFCE30", Slot = "20")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x1FFD17C", Offset = "0x1FFD17C", VA = "0x1FFD17C")]
		private void Switch(int dir)
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x1FFD104", Offset = "0x1FFD104", VA = "0x1FFD104")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C4444", Offset = "0x10C4444")]
		private IEnumerator Jump()
		{
			return null;
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x1FFD2B8", Offset = "0x1FFD2B8", VA = "0x1FFD2B8")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x1FFD3C8", Offset = "0x1FFD3C8", VA = "0x1FFD3C8")]
		public void UseFollowUpOrFall(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x1FFD574", Offset = "0x1FFD574", VA = "0x1FFD574")]
		public E50_RunnerController()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class E50_SplineRefMetadata : CurvyMetadataBase
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public new CurvySpline Spline;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvySplineSegment CP;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Options;

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x1FFD5D4", Offset = "0x1FFD5D4", VA = "0x1FFD5D4")]
		public E50_SplineRefMetadata()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class E51_InfiniteTrack : MonoBehaviour
	{
		[Token(Token = "0x200023E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A55A4", Offset = "0x10A55A4")]
		private sealed class <setup>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400094E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public E51_InfiniteTrack <>4__this;

			[Token(Token = "0x400094F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000389")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011CA")]
				[Address(RVA = "0x2245238", Offset = "0x2245238", VA = "0x2245238", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011CC")]
				[Address(RVA = "0x2245280", Offset = "0x2245280", VA = "0x2245280", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x2244E94", Offset = "0x2244E94", VA = "0x2244E94")]
			[DebuggerHidden]
			public <setup>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x2244EC0", Offset = "0x2244EC0", VA = "0x2244EC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x2244EC4", Offset = "0x2244EC4", VA = "0x2244EC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011CB")]
			[Address(RVA = "0x2245240", Offset = "0x2245240", VA = "0x2245240", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline TrackSpline;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyController Controller;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material RoadMaterial;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text TxtStats;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		public float CurvationX;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		public float CurvationY;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		public float CPStepSize;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Positive]
		public int HeadCP;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Positive]
		public int TailCP;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x10BB6BC", Offset = "0x10BB6BC")]
		public int Sections;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x10BB714", Offset = "0x10BB714")]
		public int SectionCPCount;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int mInitState;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool mUpdateSpline;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int mUpdateIn;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CurvyGenerator[] mGenerators;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int mCurrentGen;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastSectionEndV;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 mDir;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly TimeMeasure timeSpline;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly TimeMeasure timeCG;

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x1FFD5DC", Offset = "0x1FFD5DC", VA = "0x1FFD5DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x1FFD6CC", Offset = "0x1FFD6CC", VA = "0x1FFD6CC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x1FFD8B4", Offset = "0x1FFD8B4", VA = "0x1FFD8B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C44F4", Offset = "0x10C44F4")]
		private IEnumerator setup()
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x1FFD92C", Offset = "0x1FFD92C", VA = "0x1FFD92C")]
		private CurvyGenerator buildGenerator()
		{
			return null;
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x1FFD74C", Offset = "0x1FFD74C", VA = "0x1FFD74C")]
		private void advanceTrack()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x1FFDF80", Offset = "0x1FFDF80", VA = "0x1FFDF80")]
		private void advanceSections()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x1FFD5E0", Offset = "0x1FFD5E0", VA = "0x1FFD5E0")]
		private void updateStats()
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x1FFE018", Offset = "0x1FFE018", VA = "0x1FFE018")]
		private void updateSectionGenerator(CurvyGenerator gen, int startCP, int endCP)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x1FFE2DC", Offset = "0x1FFE2DC", VA = "0x1FFE2DC")]
		public void Track_OnControlPointReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x1FFDD40", Offset = "0x1FFDD40", VA = "0x1FFDD40")]
		private void addTrackCP()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x1FFE304", Offset = "0x1FFE304", VA = "0x1FFE304")]
		public E51_InfiniteTrack()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class E97_PoolTestRunner : MonoBehaviour
	{
		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text PoolCountInfo;

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x1FFE3C4", Offset = "0x1FFE3C4", VA = "0x1FFE3C4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x1FFE4B0", Offset = "0x1FFE4B0", VA = "0x1FFE4B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x1FFE3C8", Offset = "0x1FFE3C8", VA = "0x1FFE3C8")]
		private void checkForSpline()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x1FFE634", Offset = "0x1FFE634", VA = "0x1FFE634")]
		public void AddCP()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x1FFE6F8", Offset = "0x1FFE6F8", VA = "0x1FFE6F8")]
		public void DeleteCP()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x1FFE7FC", Offset = "0x1FFE7FC", VA = "0x1FFE7FC")]
		public void ClearSpline()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x1FFE88C", Offset = "0x1FFE88C", VA = "0x1FFE88C")]
		public void DeleteSpline()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x1FFE928", Offset = "0x1FFE928", VA = "0x1FFE928")]
		public E97_PoolTestRunner()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class E98_CurvyCamController : SplineController
	{
		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0x10BB76C", Offset = "0x10BB76C")]
		public float MinSpeed;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float MaxSpeed;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float Mass;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float Down;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float Up;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float Fric;

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x1FFE930", Offset = "0x1FFE930", VA = "0x1FFE930", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x1FFE960", Offset = "0x1FFE960", VA = "0x1FFE960", Slot = "36")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x1FFEA3C", Offset = "0x1FFEA3C", VA = "0x1FFEA3C")]
		public E98_CurvyCamController()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class E99_PerformanceAPI : MonoBehaviour
	{
		[Token(Token = "0x4000958")]
		private const int LOOPS = 20;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> mTests;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<string> mTestResults;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvyInterpolation mInterpolation;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private CurvyOrientation mOrientation;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int mCacheSize;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int mControlPointCount;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int mTotalSplineLength;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mUseCache;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool mUseMultiThreads;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int mCurrentTest;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mExecuting;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TimeMeasure Timer;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MethodInfo mGUIMethod;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MethodInfo mRunMethod;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool mInterpolate_UseDistance;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int mRefresh_Mode;

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x1FFEA50", Offset = "0x1FFEA50", VA = "0x1FFEA50")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x1FFEAE4", Offset = "0x1FFEAE4", VA = "0x1FFEAE4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x20006DC", Offset = "0x20006DC", VA = "0x20006DC")]
		private void GUI_Interpolate()
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x2000884", Offset = "0x2000884", VA = "0x2000884")]
		private void Test_Interpolate()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x2000D28", Offset = "0x2000D28", VA = "0x2000D28")]
		private void GUI_Refresh()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x20010D4", Offset = "0x20010D4", VA = "0x20010D4")]
		private void Work()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x2001130", Offset = "0x2001130", VA = "0x2001130")]
		private void work()
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x200118C", Offset = "0x200118C", VA = "0x200118C")]
		private void Test_Refresh()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x2000B28", Offset = "0x2000B28", VA = "0x2000B28")]
		private CurvySpline getSpline()
		{
			return null;
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x2000B9C", Offset = "0x2000B9C", VA = "0x2000B9C")]
		private void AddCPs(ref CurvySpline spline, int count, int totalLength)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x20013E8", Offset = "0x20013E8", VA = "0x20013E8")]
		private void runTest()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x2001424", Offset = "0x2001424", VA = "0x2001424")]
		public E99_PerformanceAPI()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class E99_PerformanceDynamicSpline : MonoBehaviour
	{
		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySpline mSpline;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyGenerator Generator;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive]
		public int UpdateInterval;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0x10BB7C0", Offset = "0x10BB7C0")]
		public int CPCount;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float Radius;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AlwaysClear;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool UpdateCG;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mAngleStep;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mCurrentAngle;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mLastUpdateTime;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TimeMeasure ExecTimes;

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x27F7170", Offset = "0x27F7170", VA = "0x27F7170")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x27F71CC", Offset = "0x27F71CC", VA = "0x27F71CC")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x27F733C", Offset = "0x27F733C", VA = "0x27F733C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x27F723C", Offset = "0x27F723C", VA = "0x27F723C")]
		private void addCP()
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x27F74AC", Offset = "0x27F74AC", VA = "0x27F74AC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x27F7F8C", Offset = "0x27F7F8C", VA = "0x27F7F8C")]
		public E99_PerformanceDynamicSpline()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class SceneSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Text;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dropdown DropDown;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, string> scenesAlternativeNames;

		[Token(Token = "0x1700038B")]
		private int CurrentLevel
		{
			[Token(Token = "0x60011EB")]
			[Address(RVA = "0x22996BC", Offset = "0x22996BC", VA = "0x22996BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60011EC")]
			[Address(RVA = "0x2299730", Offset = "0x2299730", VA = "0x2299730")]
			set
			{
			}
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x2299304", Offset = "0x2299304", VA = "0x2299304")]
		private void Start()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x22994A0", Offset = "0x22994A0", VA = "0x22994A0")]
		private List<string> getScenes()
		{
			return null;
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x22997B0", Offset = "0x22997B0", VA = "0x22997B0")]
		private void OnValueChanged(int value)
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x22997CC", Offset = "0x22997CC", VA = "0x22997CC")]
		public SceneSwitcher()
		{
		}
	}
}
namespace ToolBuddy.ThirdParty.VectorGraphics
{
	[Token(Token = "0x2000244")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A55B4", Offset = "0x10A55B4")]
	public struct Matrix2D
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m00;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m10;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m01;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m11;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m02;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m12;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Matrix2D zeroMatrix;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly Matrix2D identityMatrix;

		[Token(Token = "0x1700038C")]
		public float Item
		{
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x31223F4", Offset = "0x31223F4", VA = "0x31223F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x312249C", Offset = "0x312249C", VA = "0x312249C")]
			set
			{
			}
		}

		[Token(Token = "0x1700038D")]
		public float Item
		{
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x31223FC", Offset = "0x31223FC", VA = "0x31223FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x31224A4", Offset = "0x31224A4", VA = "0x31224A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700038E")]
		public static Matrix2D zero
		{
			[Token(Token = "0x6001208")]
			[Address(RVA = "0x3122CE4", Offset = "0x3122CE4", VA = "0x3122CE4")]
			get
			{
				return default(Matrix2D);
			}
		}

		[Token(Token = "0x1700038F")]
		public static Matrix2D identity
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0x3122D58", Offset = "0x3122D58", VA = "0x3122D58")]
			get
			{
				return default(Matrix2D);
			}
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x31223E4", Offset = "0x31223E4", VA = "0x31223E4")]
		public Matrix2D(Vector2 column0, Vector2 column1, Vector2 column2)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x3122544", Offset = "0x3122544", VA = "0x3122544", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x3122648", Offset = "0x3122648", VA = "0x3122648", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x3122728", Offset = "0x3122728", VA = "0x3122728")]
		public static Matrix2D operator *(Matrix2D lhs, Matrix2D rhs)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x3122790", Offset = "0x3122790", VA = "0x3122790")]
		public static Vector2 operator *(Matrix2D lhs, Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x31227B0", Offset = "0x31227B0", VA = "0x31227B0")]
		public static bool operator ==(Matrix2D lhs, Matrix2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x3122818", Offset = "0x3122818", VA = "0x3122818")]
		public static bool operator !=(Matrix2D lhs, Matrix2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x31225B4", Offset = "0x31225B4", VA = "0x31225B4")]
		public Vector2 GetColumn(int index)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x31228DC", Offset = "0x31228DC", VA = "0x31228DC")]
		public Vector3 GetRow(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x3122968", Offset = "0x3122968", VA = "0x3122968")]
		public void SetColumn(int index, Vector2 column)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x31229AC", Offset = "0x31229AC", VA = "0x31229AC")]
		public void SetRow(int index, Vector3 row)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x31229FC", Offset = "0x31229FC", VA = "0x31229FC")]
		public Vector2 MultiplyPoint(Vector2 point)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x3122A1C", Offset = "0x3122A1C", VA = "0x3122A1C")]
		public Vector2 MultiplyVector(Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x3122A34", Offset = "0x3122A34", VA = "0x3122A34")]
		public Matrix2D Inverse()
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x3122B74", Offset = "0x3122B74", VA = "0x3122B74")]
		public static Matrix2D Scale(Vector2 vector)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x3122B8C", Offset = "0x3122B8C", VA = "0x3122B8C")]
		public static Matrix2D Translate(Vector2 vector)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x3122BA0", Offset = "0x3122BA0", VA = "0x3122BA0")]
		public static Matrix2D RotateRH(float angleRadians)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x3122C2C", Offset = "0x3122C2C", VA = "0x3122C2C")]
		public static Matrix2D RotateLH(float angleRadians)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x3122C74", Offset = "0x3122C74", VA = "0x3122C74")]
		public static Matrix2D SkewX(float angleRadians)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x3122CAC", Offset = "0x3122CAC", VA = "0x3122CAC")]
		public static Matrix2D SkewY(float angleRadians)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x3122DCC", Offset = "0x3122DCC", VA = "0x3122DCC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x312304C", Offset = "0x312304C", VA = "0x312304C")]
		public string ToString(string format)
		{
			return null;
		}
	}
	[Token(Token = "0x2000245")]
	public enum ViewportOptions
	{
		[Token(Token = "0x4000980")]
		DontPreserve,
		[Token(Token = "0x4000981")]
		PreserveViewport,
		[Token(Token = "0x4000982")]
		OnlyApplyRootViewBox
	}
	[Token(Token = "0x2000246")]
	public class SVGParser
	{
		[Token(Token = "0x2000247")]
		public struct SceneInfo
		{
			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB830", Offset = "0x10BB830")]
			private readonly Scene <Scene>k__BackingField;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB840", Offset = "0x10BB840")]
			private readonly Rect <SceneViewport>k__BackingField;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB850", Offset = "0x10BB850")]
			private readonly Dictionary<SceneNode, float> <NodeOpacity>k__BackingField;

			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB860", Offset = "0x10BB860")]
			private readonly Dictionary<string, SceneNode> <NodeIDs>k__BackingField;

			[Token(Token = "0x17000390")]
			public readonly Scene Scene
			{
				[Token(Token = "0x6001211")]
				[Address(RVA = "0x1DE27CC", Offset = "0x1DE27CC", VA = "0x1DE27CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C45A4", Offset = "0x10C45A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000391")]
			public readonly Rect SceneViewport
			{
				[Token(Token = "0x6001212")]
				[Address(RVA = "0x1DE27D4", Offset = "0x1DE27D4", VA = "0x1DE27D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C45DC", Offset = "0x10C45DC")]
				get
				{
					return default(Rect);
				}
			}

			[Token(Token = "0x17000392")]
			public readonly Dictionary<SceneNode, float> NodeOpacity
			{
				[Token(Token = "0x6001213")]
				[Address(RVA = "0x1DE27E0", Offset = "0x1DE27E0", VA = "0x1DE27E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4614", Offset = "0x10C4614")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000393")]
			public readonly Dictionary<string, SceneNode> NodeIDs
			{
				[Token(Token = "0x6001214")]
				[Address(RVA = "0x1DE27E8", Offset = "0x1DE27E8", VA = "0x1DE27E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C464C", Offset = "0x10C464C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001210")]
			[Address(RVA = "0x1DE2754", Offset = "0x1DE2754", VA = "0x1DE2754")]
			internal SceneInfo(Scene scene, Rect sceneViewport, Dictionary<SceneNode, float> nodeOpacities, Dictionary<string, SceneNode> nodeIDs)
			{
			}
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x22945B8", Offset = "0x22945B8", VA = "0x22945B8")]
		public static SceneInfo ImportSVG(TextReader textReader, float dpi = 0f, float pixelsPerUnit = 1f, int windowWidth = 0, int windowHeight = 0, bool clipViewport = false)
		{
			return default(SceneInfo);
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x2294608", Offset = "0x2294608", VA = "0x2294608")]
		public static SceneInfo ImportSVG(TextReader textReader, ViewportOptions viewportOptions, float dpi = 0f, float pixelsPerUnit = 1f, int windowWidth = 0, int windowHeight = 0)
		{
			return default(SceneInfo);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x2294DBC", Offset = "0x2294DBC", VA = "0x2294DBC")]
		public SVGParser()
		{
		}
	}
	[Token(Token = "0x2000248")]
	internal class XmlReaderIterator
	{
		[Token(Token = "0x2000249")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A55EC", Offset = "0x10A55EC")]
		internal class Node
		{
			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private XmlReader reader;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int depth;

			[Token(Token = "0x400098B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private string name;

			[Token(Token = "0x17000394")]
			public string Name
			{
				[Token(Token = "0x600121D")]
				[Address(RVA = "0x1DE6838", Offset = "0x1DE6838", VA = "0x1DE6838")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000395")]
			public string Item
			{
				[Token(Token = "0x600121E")]
				[Address(RVA = "0x1DE6840", Offset = "0x1DE6840", VA = "0x1DE6840")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000396")]
			public int Depth
			{
				[Token(Token = "0x6001222")]
				[Address(RVA = "0x1DE6C4C", Offset = "0x1DE6C4C", VA = "0x1DE6C4C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600121C")]
			[Address(RVA = "0x1DE67C4", Offset = "0x1DE67C4", VA = "0x1DE67C4")]
			public Node(XmlReader reader)
			{
			}

			[Token(Token = "0x600121F")]
			[Address(RVA = "0x1DE6864", Offset = "0x1DE6864", VA = "0x1DE6864")]
			public SVGPropertySheet GetAttributes()
			{
				return null;
			}

			[Token(Token = "0x6001220")]
			[Address(RVA = "0x1DE6990", Offset = "0x1DE6990", VA = "0x1DE6990")]
			public SVGFormatException GetException(string message)
			{
				return null;
			}

			[Token(Token = "0x6001221")]
			[Address(RVA = "0x1DE6A04", Offset = "0x1DE6A04", VA = "0x1DE6A04")]
			public SVGFormatException GetUnsupportedAttribValException(string attrib)
			{
				return null;
			}
		}

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private XmlReader reader;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool currentElementVisited;

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x2EC5388", Offset = "0x2EC5388", VA = "0x2EC5388")]
		public XmlReaderIterator(XmlReader reader)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x2EC53BC", Offset = "0x2EC53BC", VA = "0x2EC53BC")]
		public bool GoToRoot(string tagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x2EC541C", Offset = "0x2EC541C", VA = "0x2EC541C")]
		public Node VisitCurrent()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x2EC5488", Offset = "0x2EC5488", VA = "0x2EC5488")]
		public bool IsEmptyElement()
		{
			return default(bool);
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x2EC54AC", Offset = "0x2EC54AC", VA = "0x2EC54AC")]
		public bool GoToNextChild(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x2EC5584", Offset = "0x2EC5584", VA = "0x2EC5584")]
		public void SkipCurrentChildTree(Node node)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x2EC55CC", Offset = "0x2EC55CC", VA = "0x2EC55CC")]
		public string ReadTextWithinElement()
		{
			return null;
		}
	}
	[Token(Token = "0x200024A")]
	internal class SVGFormatException : Exception
	{
		[Token(Token = "0x17000397")]
		public static SVGFormatException StackError
		{
			[Token(Token = "0x6001226")]
			[Address(RVA = "0x229454C", Offset = "0x229454C", VA = "0x229454C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x2294078", Offset = "0x2294078", VA = "0x2294078")]
		public SVGFormatException()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x22940DC", Offset = "0x22940DC", VA = "0x22940DC")]
		public SVGFormatException(string message)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x22944C0", Offset = "0x22944C0", VA = "0x22944C0")]
		public SVGFormatException(XmlReader reader, string message)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x2294164", Offset = "0x2294164", VA = "0x2294164")]
		private static string ComposeMessage(XmlReader reader, string message)
		{
			return null;
		}
	}
	[Token(Token = "0x200024B")]
	internal class SVGDictionary : Dictionary<string, object>
	{
		[Token(Token = "0x6001228")]
		[Address(RVA = "0x1CC7858", Offset = "0x1CC7858", VA = "0x1CC7858")]
		public SVGDictionary()
		{
		}
	}
	[Token(Token = "0x200024C")]
	internal class SVGPostponedFills : Dictionary<IFill, string>
	{
		[Token(Token = "0x6001229")]
		[Address(RVA = "0x2294DC4", Offset = "0x2294DC4", VA = "0x2294DC4")]
		public SVGPostponedFills()
		{
		}
	}
	[Token(Token = "0x200024D")]
	internal class SVGDocument
	{
		[Token(Token = "0x200024E")]
		private enum ViewBoxAlign
		{
			[Token(Token = "0x40009B1")]
			Min,
			[Token(Token = "0x40009B2")]
			Mid,
			[Token(Token = "0x40009B3")]
			Max
		}

		[Token(Token = "0x200024F")]
		private enum ViewBoxAspectRatio
		{
			[Token(Token = "0x40009B5")]
			DontPreserve,
			[Token(Token = "0x40009B6")]
			FitLargestDim,
			[Token(Token = "0x40009B7")]
			FitSmallestDim
		}

		[Token(Token = "0x2000250")]
		private struct ViewBoxInfo
		{
			[Token(Token = "0x40009B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rect ViewBox;

			[Token(Token = "0x40009B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ViewBoxAspectRatio AspectRatio;

			[Token(Token = "0x40009BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ViewBoxAlign AlignX;

			[Token(Token = "0x40009BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ViewBoxAlign AlignY;

			[Token(Token = "0x40009BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool IsEmpty;
		}

		[Token(Token = "0x2000251")]
		private struct HierarchyUpdate
		{
			[Token(Token = "0x40009BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SceneNode Parent;

			[Token(Token = "0x40009BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SceneNode NewNode;

			[Token(Token = "0x40009BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SceneNode ReplaceNode;
		}

		[Token(Token = "0x2000252")]
		private delegate void ElemHandler();

		[Token(Token = "0x2000253")]
		private class Handlers : Dictionary<string, ElemHandler>
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0x1DE26E8", Offset = "0x1DE26E8", VA = "0x1DE26E8")]
			public Handlers(int capacity)
			{
			}
		}

		[Token(Token = "0x2000254")]
		private enum DimType
		{
			[Token(Token = "0x40009C1")]
			Width,
			[Token(Token = "0x40009C2")]
			Height,
			[Token(Token = "0x40009C3")]
			Length
		}

		[Token(Token = "0x2000255")]
		private struct NodeGlobalSceneState
		{
			[Token(Token = "0x40009C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector2 ContainerSize;
		}

		[Token(Token = "0x2000256")]
		private class GradientExData
		{
			[Token(Token = "0x40009C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool WorldRelative;

			[Token(Token = "0x40009C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Matrix2D FillTransform;

			[Token(Token = "0x600126D")]
			[Address(RVA = "0x1DE26E0", Offset = "0x1DE26E0", VA = "0x1DE26E0")]
			public GradientExData()
			{
			}
		}

		[Token(Token = "0x2000257")]
		private class LinearGradientExData : GradientExData
		{
			[Token(Token = "0x40009C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string X1;

			[Token(Token = "0x40009C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string Y1;

			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string X2;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string Y2;

			[Token(Token = "0x600126E")]
			[Address(RVA = "0x1DE2744", Offset = "0x1DE2744", VA = "0x1DE2744")]
			public LinearGradientExData()
			{
			}
		}

		[Token(Token = "0x2000258")]
		private class RadialGradientExData : GradientExData
		{
			[Token(Token = "0x40009CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool Parsed;

			[Token(Token = "0x40009CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string Cx;

			[Token(Token = "0x40009CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string Cy;

			[Token(Token = "0x40009CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string Fx;

			[Token(Token = "0x40009CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string Fy;

			[Token(Token = "0x40009D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string R;

			[Token(Token = "0x600126F")]
			[Address(RVA = "0x1DE274C", Offset = "0x1DE274C", VA = "0x1DE274C")]
			public RadialGradientExData()
			{
			}
		}

		[Token(Token = "0x2000259")]
		private struct ClipData
		{
			[Token(Token = "0x40009D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool WorldRelative;
		}

		[Token(Token = "0x200025A")]
		private struct PatternData
		{
			[Token(Token = "0x40009D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool WorldRelative;

			[Token(Token = "0x40009D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool ContentWorldRelative;

			[Token(Token = "0x40009D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Matrix2D PatternTransform;
		}

		[Token(Token = "0x200025B")]
		private struct MaskData
		{
			[Token(Token = "0x40009D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool WorldRelative;

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool ContentWorldRelative;
		}

		[Token(Token = "0x200025C")]
		private struct NodeWithParent
		{
			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SceneNode node;

			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SceneNode parent;
		}

		[Token(Token = "0x200025D")]
		private struct NodeReferenceData
		{
			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SceneNode node;

			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rect viewport;

			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string id;
		}

		[Token(Token = "0x200025E")]
		private struct PostponedStopData
		{
			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GradientFill fill;
		}

		[Token(Token = "0x200025F")]
		private struct PostponedClip
		{
			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SceneNode node;
		}

		[Token(Token = "0x400098C")]
		internal const float SVGLengthFactor = 1.4142135f;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static char[] whiteSpaceNumberChars;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private XmlReaderIterator docReader;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Scene scene;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float dpiScale;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int windowWidth;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int windowHeight;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector2 scenePos;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector2 sceneSize;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SVGDictionary svgObjects;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, Handlers> subTags;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<GradientFill, GradientExData> gradientExInfo;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<SceneNode, ViewBoxInfo> symbolViewBoxes;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<SceneNode, NodeGlobalSceneState> nodeGlobalSceneState;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<SceneNode, float> nodeOpacity;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<string, SceneNode> nodeIDs;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<SceneNode, SVGStyleResolver.StyleLayer> nodeStyleLayers;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<SceneNode, ClipData> clipData;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<SceneNode, PatternData> patternData;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<SceneNode, MaskData> maskData;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<string, List<NodeReferenceData>> postponedSymbolData;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<string, List<PostponedStopData>> postponedStopData;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, List<PostponedClip>> postponedClip;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private SVGPostponedFills postponedFills;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<NodeWithParent> invisibleNodes;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Stack<Vector2> currentContainerSize;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Stack<Vector2> currentViewBoxSize;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Stack<SceneNode> currentSceneNode;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GradientFill currentGradientFill;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private string currentGradientId;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private string currentGradientLink;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ElemHandler[] allElems;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HashSet<ElemHandler> elemsToAddToHierarchy;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private SVGStyleResolver styles;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool applyRootViewBox;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		internal Rect sceneViewport;

		[Token(Token = "0x17000398")]
		public Dictionary<SceneNode, float> NodeOpacities
		{
			[Token(Token = "0x600122C")]
			[Address(RVA = "0x1CC91DC", Offset = "0x1CC91DC", VA = "0x1CC91DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000399")]
		public Dictionary<string, SceneNode> NodeIDs
		{
			[Token(Token = "0x600122D")]
			[Address(RVA = "0x1CC91E4", Offset = "0x1CC91E4", VA = "0x1CC91E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039A")]
		internal static string StockBlackNonZeroFillName
		{
			[Token(Token = "0x600122E")]
			[Address(RVA = "0x1CC7790", Offset = "0x1CC7790", VA = "0x1CC7790")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039B")]
		internal static string StockBlackOddEvenFillName
		{
			[Token(Token = "0x600122F")]
			[Address(RVA = "0x1CC774C", Offset = "0x1CC774C", VA = "0x1CC774C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x1CC78A4", Offset = "0x1CC78A4", VA = "0x1CC78A4")]
		public SVGDocument(XmlReader docReader, float dpi, Scene scene, int windowWidth, int windowHeight, bool applyRootViewBox)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x1CC8C24", Offset = "0x1CC8C24", VA = "0x1CC8C24")]
		public void Import()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x1CC91EC", Offset = "0x1CC91EC", VA = "0x1CC91EC")]
		private void ParseChildren(XmlReaderIterator.Node node, string nodeName)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x1CC95EC", Offset = "0x1CC95EC", VA = "0x1CC95EC")]
		private void circle()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x1CCA374", Offset = "0x1CCA374", VA = "0x1CCA374")]
		private void defs()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x1CCA4E0", Offset = "0x1CCA4E0", VA = "0x1CCA4E0")]
		private void ellipse()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x1CCA8EC", Offset = "0x1CCA8EC", VA = "0x1CCA8EC")]
		private void g()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x1CCAA08", Offset = "0x1CCAA08", VA = "0x1CCAA08")]
		private void image()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x1CCCA4C", Offset = "0x1CCCA4C", VA = "0x1CCCA4C")]
		private void line()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x1CCCEBC", Offset = "0x1CCCEBC", VA = "0x1CCCEBC")]
		private void linearGradient()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x1CCDC70", Offset = "0x1CCDC70", VA = "0x1CCDC70")]
		private void path()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x1CCDFDC", Offset = "0x1CCDFDC", VA = "0x1CCDFDC")]
		private void polygon()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x1CCE710", Offset = "0x1CCE710", VA = "0x1CCE710")]
		private void polyline()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x1CCEE1C", Offset = "0x1CCEE1C", VA = "0x1CCEE1C")]
		private void radialGradient()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x1CCF67C", Offset = "0x1CCF67C", VA = "0x1CCF67C")]
		private void clipPath()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x1CCFC34", Offset = "0x1CCFC34", VA = "0x1CCFC34")]
		private void pattern()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x1CD015C", Offset = "0x1CD015C", VA = "0x1CD015C")]
		private void mask()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x1CD048C", Offset = "0x1CD048C", VA = "0x1CD048C")]
		private void rect()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x1CD09BC", Offset = "0x1CD09BC", VA = "0x1CD09BC")]
		private void stop()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x1CC8D98", Offset = "0x1CC8D98", VA = "0x1CC8D98")]
		private void svg()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x1CD1254", Offset = "0x1CD1254", VA = "0x1CD1254")]
		private void symbol()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x1CD16F8", Offset = "0x1CD16F8", VA = "0x1CD16F8")]
		private void use()
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x1CD1BD0", Offset = "0x1CD1BD0", VA = "0x1CD1BD0")]
		private void style()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x1CCBF84", Offset = "0x1CCBF84", VA = "0x1CCBF84")]
		private void ResolveReferencedNode(SceneNode referencedNode, NodeReferenceData refData, bool isDeferred)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x1CD1D24", Offset = "0x1CD1D24", VA = "0x1CD1D24")]
		private SceneNode CloneSceneNode(SceneNode node)
		{
			return null;
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x1CD221C", Offset = "0x1CD221C", VA = "0x1CD221C")]
		private Shape CloneShape(Shape shape)
		{
			return null;
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x1CD23D8", Offset = "0x1CD23D8", VA = "0x1CD23D8")]
		private BezierContour CloneContour(BezierContour c)
		{
			return default(BezierContour);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x1CD24D8", Offset = "0x1CD24D8", VA = "0x1CD24D8")]
		private IFill CloneFill(IFill fill)
		{
			return null;
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x1CD2824", Offset = "0x1CD2824", VA = "0x1CD2824")]
		private PathProperties ClonePathProps(PathProperties props)
		{
			return default(PathProperties);
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x1CCD6BC", Offset = "0x1CCD6BC", VA = "0x1CCD6BC")]
		private GradientFill CloneGradientFill(GradientFill other)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x1CD2A08", Offset = "0x1CD2A08", VA = "0x1CD2A08")]
		private int AttribIntVal(string attribName)
		{
			return default(int);
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x1CD2A10", Offset = "0x1CD2A10", VA = "0x1CD2A10")]
		private int AttribIntVal(string attribName, int defaultVal)
		{
			return default(int);
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x1CD2A5C", Offset = "0x1CD2A5C", VA = "0x1CD2A5C")]
		private float AttribFloatVal(string attribName)
		{
			return default(float);
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x1CD0F80", Offset = "0x1CD0F80", VA = "0x1CD0F80")]
		private float AttribFloatVal(string attribName, float defaultVal)
		{
			return default(float);
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x1CD2A64", Offset = "0x1CD2A64", VA = "0x1CD2A64")]
		private float AttribLengthVal(XmlReaderIterator.Node node, string attribName, DimType dimType)
		{
			return default(float);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x1CCA068", Offset = "0x1CCA068", VA = "0x1CCA068")]
		private float AttribLengthVal(XmlReaderIterator.Node node, string attribName, float defaultUnitVal, DimType dimType)
		{
			return default(float);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x1CCD764", Offset = "0x1CCD764", VA = "0x1CCD764")]
		private float AttribLengthVal(string val, XmlReaderIterator.Node node, string attribName, float defaultUnitVal, DimType dimType)
		{
			return default(float);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x1CCA114", Offset = "0x1CCA114", VA = "0x1CCA114")]
		private void AddToSVGDictionaryIfPossible(XmlReaderIterator.Node node, object vectorElement)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x1CCB55C", Offset = "0x1CCB55C", VA = "0x1CCB55C")]
		private Rect ParseViewport(XmlReaderIterator.Node node, SceneNode sceneNode, Vector2 defaultViewportSize)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x1CD0FC8", Offset = "0x1CD0FC8", VA = "0x1CD0FC8")]
		private ViewBoxInfo ParseViewBox(XmlReaderIterator.Node node, SceneNode sceneNode, Rect sceneViewport)
		{
			return default(ViewBoxInfo);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x1CCB694", Offset = "0x1CCB694", VA = "0x1CCB694")]
		private void ParseViewBoxAspectRatio(XmlReaderIterator.Node node, ref ViewBoxInfo viewBoxInfo)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x1CCBBC4", Offset = "0x1CCBBC4", VA = "0x1CCBBC4")]
		private void ApplyViewBox(SceneNode sceneNode, ViewBoxInfo viewBoxInfo, Rect sceneViewport)
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x1CC9B6C", Offset = "0x1CC9B6C", VA = "0x1CC9B6C")]
		private Stroke ParseStrokeAttributeSet(XmlReaderIterator.Node node, out PathCorner strokeCorner, out PathEnding strokeEnding, Inheritance inheritance = Inheritance.Inherited)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x1CC99C8", Offset = "0x1CC99C8", VA = "0x1CC99C8")]
		private void ParseID(XmlReaderIterator.Node node, SceneNode sceneNode)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x1CC9ABC", Offset = "0x1CC9ABC", VA = "0x1CC9ABC")]
		private float ParseOpacity(SceneNode sceneNode)
		{
			return default(float);
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x1CCA0D8", Offset = "0x1CCA0D8", VA = "0x1CCA0D8")]
		private void ParseClipAndMask(XmlReaderIterator.Node node, SceneNode sceneNode)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x1CD2A6C", Offset = "0x1CD2A6C", VA = "0x1CD2A6C")]
		private void ParseClip(XmlReaderIterator.Node node, SceneNode sceneNode)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x1CCFA08", Offset = "0x1CCFA08", VA = "0x1CCFA08")]
		private void ApplyClipper(SceneNode clipper, SceneNode target, bool worldRelative)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x1CD2CCC", Offset = "0x1CD2CCC", VA = "0x1CD2CCC")]
		private void ParseMask(XmlReaderIterator.Node node, SceneNode sceneNode)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x1CCB388", Offset = "0x1CCB388", VA = "0x1CCB388")]
		private Texture2D DecodeTextureData(string dataURI)
		{
			return null;
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x1CC9098", Offset = "0x1CC9098", VA = "0x1CC9098")]
		private void PostProcess(SceneNode root)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x1CD2FA8", Offset = "0x1CD2FA8", VA = "0x1CD2FA8")]
		private void AdjustFills(SceneNode root)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x1CD39EC", Offset = "0x1CD39EC", VA = "0x1CD39EC")]
		private void AdjustGradientFill(SceneNode node, Matrix2D worldTransform, IFill fill, BezierContour[] contours, ref Matrix2D computedTransform)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x1CD44F4", Offset = "0x1CD44F4", VA = "0x1CD44F4")]
		private SceneNode AdjustPatternFill(SceneNode node, Matrix2D worldTransform, Shape shape)
		{
			return null;
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x1CC909C", Offset = "0x1CC909C", VA = "0x1CC909C")]
		private void RemoveInvisibleNodes()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x1CCA1C8", Offset = "0x1CCA1C8", VA = "0x1CCA1C8")]
		private bool ShouldDeclareSupportedChildren(XmlReaderIterator.Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x1CCA23C", Offset = "0x1CCA23C", VA = "0x1CCA23C")]
		private void SupportElems(XmlReaderIterator.Node node, params ElemHandler[] handlers)
		{
		}
	}
	[Token(Token = "0x2000260")]
	internal enum Inheritance
	{
		[Token(Token = "0x40009DF")]
		None,
		[Token(Token = "0x40009E0")]
		Inherited
	}
	[Token(Token = "0x2000261")]
	internal class SVGStyleResolver
	{
		[Token(Token = "0x2000262")]
		public struct NodeData
		{
			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public XmlReaderIterator.Node node;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string name;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> classes;

			[Token(Token = "0x40009E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string id;
		}

		[Token(Token = "0x2000263")]
		public class StyleLayer
		{
			[Token(Token = "0x40009E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SVGStyleSheet styleSheet;

			[Token(Token = "0x40009E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SVGPropertySheet attributeSheet;

			[Token(Token = "0x40009EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NodeData nodeData;

			[Token(Token = "0x600127E")]
			[Address(RVA = "0x1DE2FF4", Offset = "0x1DE2FF4", VA = "0x1DE2FF4")]
			public StyleLayer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5624", Offset = "0x10A5624")]
		private sealed class <>c
		{
			[Token(Token = "0x40009EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40009EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, string> <>9__0_0;

			[Token(Token = "0x6001280")]
			[Address(RVA = "0x1DE2854", Offset = "0x1DE2854", VA = "0x1DE2854")]
			public <>c()
			{
			}

			[Token(Token = "0x6001281")]
			[Address(RVA = "0x1DE285C", Offset = "0x1DE285C", VA = "0x1DE285C")]
			internal string <PushNode>b__0_0(string x)
			{
				return null;
			}
		}

		[Token(Token = "0x2000265")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5634", Offset = "0x10A5634")]
		private sealed class <SortedClasses>d__12 : IEnumerable<string>, IEnumerable, IEnumerator<string>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string <>2__current;

			[Token(Token = "0x40009EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40009F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SVGStyleResolver <>4__this;

			[Token(Token = "0x40009F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<string> classes;

			[Token(Token = "0x40009F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<string> <>3__classes;

			[Token(Token = "0x40009F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<string>.Enumerator <>7__wrap1;

			[Token(Token = "0x40009F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerator<string> <>7__wrap2;

			[Token(Token = "0x1700039C")]
			private string System.Collections.Generic.IEnumerator<System.String>.Current
			{
				[Token(Token = "0x6001287")]
				[Address(RVA = "0x1DE2EE0", Offset = "0x1DE2EE0", VA = "0x1DE2EE0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001289")]
				[Address(RVA = "0x1DE2F28", Offset = "0x1DE2F28", VA = "0x1DE2F28", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001282")]
			[Address(RVA = "0x1DE2878", Offset = "0x1DE2878", VA = "0x1DE2878")]
			[DebuggerHidden]
			public <SortedClasses>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001283")]
			[Address(RVA = "0x1DE28B0", Offset = "0x1DE28B0", VA = "0x1DE28B0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001284")]
			[Address(RVA = "0x1DE2A50", Offset = "0x1DE2A50", VA = "0x1DE2A50", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001285")]
			[Address(RVA = "0x1DE2940", Offset = "0x1DE2940", VA = "0x1DE2940")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001286")]
			[Address(RVA = "0x1DE2994", Offset = "0x1DE2994", VA = "0x1DE2994")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001288")]
			[Address(RVA = "0x1DE2EE8", Offset = "0x1DE2EE8", VA = "0x1DE2EE8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600128A")]
			[Address(RVA = "0x1DE2F30", Offset = "0x1DE2F30", VA = "0x1DE2F30", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600128B")]
			[Address(RVA = "0x1DE2FF0", Offset = "0x1DE2FF0", VA = "0x1DE2FF0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<StyleLayer> layers;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SVGStyleSheet globalStyleSheet;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<SceneNode, StyleLayer> nodeLayers;

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x2294E5C", Offset = "0x2294E5C", VA = "0x2294E5C")]
		public void PushNode(XmlReaderIterator.Node node)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x22955D4", Offset = "0x22955D4", VA = "0x22955D4")]
		public void PopNode()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x2295570", Offset = "0x2295570", VA = "0x2295570")]
		public void PushLayer(StyleLayer layer)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x22955D8", Offset = "0x22955D8", VA = "0x22955D8")]
		public void PopLayer()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x2295664", Offset = "0x2295664", VA = "0x2295664")]
		public StyleLayer PeekLayer()
		{
			return null;
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x22956D8", Offset = "0x22956D8", VA = "0x22956D8")]
		public void SaveLayerForSceneNode(SceneNode node)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x229574C", Offset = "0x229574C", VA = "0x229574C")]
		public StyleLayer GetLayerForScenNode(SceneNode node)
		{
			return null;
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x22957E8", Offset = "0x22957E8", VA = "0x22957E8")]
		public void SetGlobalStyleSheet(SVGStyleSheet sheet)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x2295D50", Offset = "0x2295D50", VA = "0x2295D50")]
		public string Evaluate(string attribName, Inheritance inheritance = Inheritance.None)
		{
			return null;
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x2295E30", Offset = "0x2295E30", VA = "0x2295E30")]
		private bool LookupStyleOrAttribute(StyleLayer layer, string attribName, Inheritance inheritance, out string attrib)
		{
			return default(bool);
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x2295F48", Offset = "0x2295F48", VA = "0x2295F48")]
		private bool LookupProperty(NodeData nodeData, string attribName, SVGStyleSheet sheet, out string val)
		{
			return default(bool);
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x229618C", Offset = "0x229618C", VA = "0x229618C")]
		private bool LookupPropertyInSheet(SVGStyleSheet sheet, string attribName, string selector, out string val)
		{
			return default(bool);
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x2295244", Offset = "0x2295244", VA = "0x2295244")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C4684", Offset = "0x10C4684")]
		private IEnumerable<string> SortedClasses(List<string> classes)
		{
			return null;
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x2296298", Offset = "0x2296298", VA = "0x2296298")]
		public SVGStyleResolver()
		{
		}
	}
	[Token(Token = "0x2000266")]
	internal class SVGAttribParser
	{
		[Token(Token = "0x2000267")]
		private enum AttribPath
		{
			[Token(Token = "0x4000A00")]
			Path
		}

		[Token(Token = "0x2000268")]
		private enum AttribTransform
		{
			[Token(Token = "0x4000A02")]
			Transform
		}

		[Token(Token = "0x2000269")]
		private enum AttribStroke
		{
			[Token(Token = "0x4000A04")]
			Stroke
		}

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LinkedList<BezierSegment> currentContour;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<BezierContour> contours;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 penPos;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string attribString;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private char pathCommand;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Matrix2D transform;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IFill fill;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string attribName;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int stringPos;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NamedWebColorDictionary namedColors;

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x1CC3A60", Offset = "0x1CC3A60", VA = "0x1CC3A60")]
		public static List<BezierContour> ParsePath(XmlReaderIterator.Node node)
		{
			return null;
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x1CC49E0", Offset = "0x1CC49E0", VA = "0x1CC49E0")]
		public static Matrix2D ParseTransform(XmlReaderIterator.Node node)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x1CC4A54", Offset = "0x1CC4A54", VA = "0x1CC4A54")]
		public static Matrix2D ParseTransform(XmlReaderIterator.Node node, string attribName)
		{
			return default(Matrix2D);
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x1CC54D4", Offset = "0x1CC54D4", VA = "0x1CC54D4")]
		public static IFill ParseFill(XmlReaderIterator.Node node, SVGDictionary dict, SVGPostponedFills postponedFills, SVGStyleResolver styles, Inheritance inheritance = Inheritance.Inherited)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x1CC54F8", Offset = "0x1CC54F8", VA = "0x1CC54F8")]
		public static IFill ParseFill(XmlReaderIterator.Node node, SVGDictionary dict, SVGPostponedFills postponedFills, SVGStyleResolver styles, Inheritance inheritance, out bool isDefaultFill)
		{
			return null;
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x1CC5EF4", Offset = "0x1CC5EF4", VA = "0x1CC5EF4")]
		public static Stroke ParseStrokeAndOpacity(XmlReaderIterator.Node node, SVGDictionary dict, SVGStyleResolver styles, Inheritance inheritance = Inheritance.Inherited)
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x1CC6128", Offset = "0x1CC6128", VA = "0x1CC6128")]
		public static Color ParseColor(string colorString)
		{
			return default(Color);
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x1CC66C8", Offset = "0x1CC66C8", VA = "0x1CC66C8")]
		public static string ParseURLRef(string url)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x1CC6774", Offset = "0x1CC6774", VA = "0x1CC6774")]
		public static object ParseRelativeRef(string iri, SVGDictionary dict)
		{
			return null;
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x1CC6898", Offset = "0x1CC6898", VA = "0x1CC6898")]
		public static string CleanIri(string iri)
		{
			return null;
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x1CC3BD0", Offset = "0x1CC3BD0", VA = "0x1CC3BD0")]
		private SVGAttribParser(string attrib, AttribPath attribPath)
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x1CC4C44", Offset = "0x1CC4C44", VA = "0x1CC4C44")]
		private SVGAttribParser(string attrib, string attribNameVal, AttribTransform attribTransform)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x1CC5850", Offset = "0x1CC5850", VA = "0x1CC5850")]
		private SVGAttribParser(string attrib, string attribName, float opacity, FillMode mode, SVGDictionary dict, SVGPostponedFills postponedFills, bool allowReference = true)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x1CC6B4C", Offset = "0x1CC6B4C", VA = "0x1CC6B4C")]
		private void ConcludePath(bool joinEnds)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x1CC6AFC", Offset = "0x1CC6AFC", VA = "0x1CC6AFC")]
		private Vector2 NextVector2(bool relative = false)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x1CC6E50", Offset = "0x1CC6E50", VA = "0x1CC6E50")]
		private float NextFloat()
		{
			return default(float);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x1CC57DC", Offset = "0x1CC57DC", VA = "0x1CC57DC")]
		internal static float ParseFloat(string s)
		{
			return default(float);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x1CC71E0", Offset = "0x1CC71E0", VA = "0x1CC71E0")]
		private bool NextBool()
		{
			return default(bool);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x1CC697C", Offset = "0x1CC697C", VA = "0x1CC697C")]
		private char NextPathCommand(bool noCommandInheritance = false)
		{
			return default(char);
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x1CC7264", Offset = "0x1CC7264", VA = "0x1CC7264")]
		private string NextStringCommand()
		{
			return null;
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x1CC7494", Offset = "0x1CC7494", VA = "0x1CC7494")]
		private void SkipSymbol(char s)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x1CC76F0", Offset = "0x1CC76F0", VA = "0x1CC76F0")]
		private bool PeekSymbol(char s)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x1CC77D4", Offset = "0x1CC77D4", VA = "0x1CC77D4")]
		private void SkipWhitespaces()
		{
		}
	}
	[Token(Token = "0x200026A")]
	internal class NamedWebColorDictionary : Dictionary<string, Color>
	{
		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x312B3F8", Offset = "0x312B3F8", VA = "0x312B3F8")]
		public NamedWebColorDictionary()
		{
		}
	}
	[Token(Token = "0x200026B")]
	internal class SVGPropertySheet : Dictionary<string, string>
	{
		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x2294E10", Offset = "0x2294E10", VA = "0x2294E10")]
		public SVGPropertySheet()
		{
		}
	}
	[Token(Token = "0x200026C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A5644", Offset = "0x10A5644")]
	internal class SVGStyleSheet
	{
		[Token(Token = "0x200026D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A567C", Offset = "0x10A567C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string key;

			[Token(Token = "0x60012AB")]
			[Address(RVA = "0x1DE30A8", Offset = "0x1DE30A8", VA = "0x1DE30A8")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60012AC")]
			[Address(RVA = "0x1DE30B0", Offset = "0x1DE30B0", VA = "0x1DE30B0")]
			internal bool <get_Item>b__0(KeyValuePair<string, SVGPropertySheet> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200026E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A568C", Offset = "0x10A568C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string key;

			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x1DE3104", Offset = "0x1DE3104", VA = "0x1DE3104")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x1DE310C", Offset = "0x1DE310C", VA = "0x1DE310C")]
			internal bool <set_Item>b__0(KeyValuePair<string, SVGPropertySheet> x)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200026F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A569C", Offset = "0x10A569C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<string, SVGPropertySheet>, string> <>9__5_0;

			[Token(Token = "0x60012B0")]
			[Address(RVA = "0x1DE3060", Offset = "0x1DE3060", VA = "0x1DE3060")]
			public <>c()
			{
			}

			[Token(Token = "0x60012B1")]
			[Address(RVA = "0x1DE3068", Offset = "0x1DE3068", VA = "0x1DE3068")]
			internal string <get_selectors>b__5_0(KeyValuePair<string, SVGPropertySheet> x)
			{
				return null;
			}
		}

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<KeyValuePair<string, SVGPropertySheet>> m_Selectors;

		[Token(Token = "0x1700039E")]
		public SVGPropertySheet Item
		{
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0x2295BFC", Offset = "0x2295BFC", VA = "0x2295BFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0x22953D0", Offset = "0x22953D0", VA = "0x22953D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700039F")]
		public IEnumerable<string> selectors
		{
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0x2295AD8", Offset = "0x2295AD8", VA = "0x2295AD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A0")]
		public int Count
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0x229639C", Offset = "0x229639C", VA = "0x229639C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x22963E8", Offset = "0x22963E8", VA = "0x22963E8")]
		public void Clear()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x22952D8", Offset = "0x22952D8", VA = "0x22952D8")]
		public SVGStyleSheet()
		{
		}
	}
	[Token(Token = "0x2000270")]
	internal static class SVGStyleSheetUtils
	{
		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x229643C", Offset = "0x229643C", VA = "0x229643C")]
		public static SVGStyleSheet Parse(string cssText)
		{
			return null;
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x229535C", Offset = "0x229535C", VA = "0x229535C")]
		public static SVGPropertySheet ParseInline(string cssText)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x2296C2C", Offset = "0x2296C2C", VA = "0x2296C2C")]
		private static bool ParseSelector(List<string> tokens, SVGStyleSheet sheet)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x2296A9C", Offset = "0x2296A9C", VA = "0x2296A9C")]
		private static void CombineProperties(SVGPropertySheet first, SVGPropertySheet second)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x2297338", Offset = "0x2297338", VA = "0x2297338")]
		private static SVGPropertySheet CopyProperties(SVGPropertySheet props)
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x2297140", Offset = "0x2297140", VA = "0x2297140")]
		private static bool ParseProperties(List<string> tokens, SVGPropertySheet props)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x22974B8", Offset = "0x22974B8", VA = "0x22974B8")]
		private static bool ParseProperty(List<string> tokens, out string name, out string value)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x22977A0", Offset = "0x22977A0", VA = "0x22977A0")]
		private static string ParseParenValue(List<string> tokens)
		{
			return null;
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x2296824", Offset = "0x2296824", VA = "0x2296824")]
		public static List<string> Tokenize(string cssText)
		{
			return null;
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x22972BC", Offset = "0x22972BC", VA = "0x22972BC")]
		private static string PeekToken(List<string> tokens)
		{
			return null;
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x2297218", Offset = "0x2297218", VA = "0x2297218")]
		private static string PopToken(List<string> tokens)
		{
			return null;
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x22979A0", Offset = "0x22979A0", VA = "0x22979A0")]
		private static bool IsSeparator(char ch)
		{
			return default(bool);
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x2297978", Offset = "0x2297978", VA = "0x2297978")]
		private static bool IsWhitespace(char ch)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000271")]
	public static class VectorUtils
	{
		[Token(Token = "0x2000272")]
		public enum Alignment
		{
			[Token(Token = "0x4000A0D")]
			Center,
			[Token(Token = "0x4000A0E")]
			TopLeft,
			[Token(Token = "0x4000A0F")]
			TopCenter,
			[Token(Token = "0x4000A10")]
			TopRight,
			[Token(Token = "0x4000A11")]
			LeftCenter,
			[Token(Token = "0x4000A12")]
			RightCenter,
			[Token(Token = "0x4000A13")]
			BottomLeft,
			[Token(Token = "0x4000A14")]
			BottomCenter,
			[Token(Token = "0x4000A15")]
			BottomRight,
			[Token(Token = "0x4000A16")]
			Custom,
			[Token(Token = "0x4000A17")]
			SVGOrigin
		}

		[Token(Token = "0x2000273")]
		internal enum WindingDir
		{
			[Token(Token = "0x4000A19")]
			CW,
			[Token(Token = "0x4000A1A")]
			CCW
		}

		[Token(Token = "0x2000274")]
		public struct TessellationOptions
		{
			[Token(Token = "0x4000A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float m_MaxCordDev;

			[Token(Token = "0x4000A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private float m_MaxCordDevSq;

			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private float m_MaxTanAngleDev;

			[Token(Token = "0x4000A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private float m_MaxTanAngleDevCosine;

			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float m_StepSize;

			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB870", Offset = "0x10BB870")]
			private float <StepDistance>k__BackingField;

			[Token(Token = "0x170003A1")]
			public float StepDistance
			{
				[Token(Token = "0x600130F")]
				[Address(RVA = "0x1DE65B8", Offset = "0x1DE65B8", VA = "0x1DE65B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4874", Offset = "0x10C4874")]
				readonly get
				{
					return default(float);
				}
				[Token(Token = "0x6001310")]
				[Address(RVA = "0x1DE65C0", Offset = "0x1DE65C0", VA = "0x1DE65C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C48AC", Offset = "0x10C48AC")]
				set
				{
				}
			}

			[Token(Token = "0x170003A2")]
			public float MaxCordDeviation
			{
				[Token(Token = "0x6001311")]
				[Address(RVA = "0x1DE65C8", Offset = "0x1DE65C8", VA = "0x1DE65C8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001312")]
				[Address(RVA = "0x1DE65D0", Offset = "0x1DE65D0", VA = "0x1DE65D0")]
				set
				{
				}
			}

			[Token(Token = "0x170003A3")]
			internal float MaxCordDeviationSquared
			{
				[Token(Token = "0x6001313")]
				[Address(RVA = "0x1DE6610", Offset = "0x1DE6610", VA = "0x1DE6610")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003A4")]
			public float MaxTanAngleDeviation
			{
				[Token(Token = "0x6001314")]
				[Address(RVA = "0x1DE6618", Offset = "0x1DE6618", VA = "0x1DE6618")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001315")]
				[Address(RVA = "0x1DE6620", Offset = "0x1DE6620", VA = "0x1DE6620")]
				set
				{
				}
			}

			[Token(Token = "0x170003A5")]
			internal float MaxTanAngleDeviationCosine
			{
				[Token(Token = "0x6001316")]
				[Address(RVA = "0x1DE66B4", Offset = "0x1DE66B4", VA = "0x1DE66B4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003A6")]
			public float SamplingStepSize
			{
				[Token(Token = "0x6001317")]
				[Address(RVA = "0x1DE66BC", Offset = "0x1DE66BC", VA = "0x1DE66BC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001318")]
				[Address(RVA = "0x1DE66C4", Offset = "0x1DE66C4", VA = "0x1DE66C4")]
				set
				{
				}
			}
		}

		[Token(Token = "0x2000275")]
		private class JoiningInfo
		{
			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector2 JoinPos;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2 TanAtEnd;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector2 TanAtStart;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2 NormAtEnd;

			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 NormAtStart;

			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2 PosThicknessStart;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2 NegThicknessStart;

			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector2 PosThicknessEnd;

			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector2 NegThicknessEnd;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector2 PosThicknessClosingPoint;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector2 NegThicknessClosingPoint;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool RoundPosThickness;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
			public bool SimpleJoin;

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Vector2 InnerCornerVertex;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public float InnerCornerDistToEnd;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float InnerCornerDistFromStart;

			[Token(Token = "0x6001319")]
			[Address(RVA = "0x1DE65B0", Offset = "0x1DE65B0", VA = "0x1DE65B0")]
			public JoiningInfo()
			{
			}
		}

		[Token(Token = "0x2000276")]
		public struct SceneNodeWorldTransform
		{
			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SceneNode Node;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SceneNode Parent;

			[Token(Token = "0x4000A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Matrix2D WorldTransform;

			[Token(Token = "0x4000A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float WorldOpacity;
		}

		[Token(Token = "0x2000277")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A56AC", Offset = "0x10A56AC")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4000A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pixelsToUnits;

			[Token(Token = "0x4000A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector2 pivot;

			[Token(Token = "0x4000A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float spriteWidth;

			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float spriteHeight;

			[Token(Token = "0x600131A")]
			[Address(RVA = "0x1DE4FE8", Offset = "0x1DE4FE8", VA = "0x1DE4FE8")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x600131B")]
			[Address(RVA = "0x1DE4FF0", Offset = "0x1DE4FF0", VA = "0x1DE4FF0")]
			internal Vector2 <RenderSprite>b__0(Vector2 v)
			{
				return default(Vector2);
			}
		}

		[Serializable]
		[Token(Token = "0x2000278")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A56BC", Offset = "0x10A56BC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Color32, Color> <>9__10_1;

			[Token(Token = "0x4000A3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<double> <>9__81_0;

			[Token(Token = "0x4000A3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<double, float> <>9__81_1;

			[Token(Token = "0x600131D")]
			[Address(RVA = "0x1DE4F18", Offset = "0x1DE4F18", VA = "0x1DE4F18")]
			public <>c()
			{
			}

			[Token(Token = "0x600131E")]
			[Address(RVA = "0x1DE4F20", Offset = "0x1DE4F20", VA = "0x1DE4F20")]
			internal Color <RenderSprite>b__10_1(Color32 c)
			{
				return default(Color);
			}

			[Token(Token = "0x600131F")]
			[Address(RVA = "0x1DE4F2C", Offset = "0x1DE4F2C", VA = "0x1DE4F2C")]
			internal bool <CubicRoots>b__81_0(double x)
			{
				return default(bool);
			}

			[Token(Token = "0x6001320")]
			[Address(RVA = "0x1DE4FE0", Offset = "0x1DE4FE0", VA = "0x1DE4FE0")]
			internal float <CubicRoots>b__81_1(double x)
			{
				return default(float);
			}
		}

		[Token(Token = "0x2000279")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A56CC", Offset = "0x10A56CC")]
		private sealed class <SceneNodes>d__68 : IEnumerable<SceneNode>, IEnumerable, IEnumerator<SceneNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private SceneNode <>2__current;

			[Token(Token = "0x4000A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private SceneNode root;

			[Token(Token = "0x4000A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SceneNode <>3__root;

			[Token(Token = "0x4000A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<SceneNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x4000A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private IEnumerator<SceneNode> <>7__wrap2;

			[Token(Token = "0x170003A7")]
			private SceneNode System.Collections.Generic.IEnumerator<ToolBuddy.ThirdParty.VectorGraphics.SceneNode>.Current
			{
				[Token(Token = "0x6001326")]
				[Address(RVA = "0x1DE55B0", Offset = "0x1DE55B0", VA = "0x1DE55B0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001328")]
				[Address(RVA = "0x1DE55F8", Offset = "0x1DE55F8", VA = "0x1DE55F8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001321")]
			[Address(RVA = "0x1DE5014", Offset = "0x1DE5014", VA = "0x1DE5014")]
			[DebuggerHidden]
			public <SceneNodes>d__68(int <>1__state)
			{
			}

			[Token(Token = "0x6001322")]
			[Address(RVA = "0x1DE504C", Offset = "0x1DE504C", VA = "0x1DE504C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001323")]
			[Address(RVA = "0x1DE51EC", Offset = "0x1DE51EC", VA = "0x1DE51EC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001324")]
			[Address(RVA = "0x1DE5198", Offset = "0x1DE5198", VA = "0x1DE5198")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001325")]
			[Address(RVA = "0x1DE50DC", Offset = "0x1DE50DC", VA = "0x1DE50DC")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001327")]
			[Address(RVA = "0x1DE55B8", Offset = "0x1DE55B8", VA = "0x1DE55B8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001329")]
			[Address(RVA = "0x1DE5600", Offset = "0x1DE5600", VA = "0x1DE5600", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<SceneNode> System.Collections.Generic.IEnumerable<ToolBuddy.ThirdParty.VectorGraphics.SceneNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600132A")]
			[Address(RVA = "0x1DE56B0", Offset = "0x1DE56B0", VA = "0x1DE56B0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200027A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A56DC", Offset = "0x10A56DC")]
		private sealed class <WorldTransformedSceneNodes>d__70 : IEnumerable<SceneNodeWorldTransform>, IEnumerable, IEnumerator<SceneNodeWorldTransform>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private SceneNodeWorldTransform <>2__current;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Dictionary<SceneNode, float> nodeOpacities;

			[Token(Token = "0x4000A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Dictionary<SceneNode, float> <>3__nodeOpacities;

			[Token(Token = "0x4000A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private SceneNode child;

			[Token(Token = "0x4000A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public SceneNode <>3__child;

			[Token(Token = "0x4000A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private SceneNodeWorldTransform parent;

			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public SceneNodeWorldTransform <>3__parent;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private SceneNodeWorldTransform <childWorldTransform>5__2;

			[Token(Token = "0x4000A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private List<SceneNode>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private IEnumerator<SceneNodeWorldTransform> <>7__wrap3;

			[Token(Token = "0x170003A9")]
			private SceneNodeWorldTransform System.Collections.Generic.IEnumerator<ToolBuddy.ThirdParty.VectorGraphics.VectorUtils.SceneNodeWorldTransform>.Current
			{
				[Token(Token = "0x6001330")]
				[Address(RVA = "0x1DE640C", Offset = "0x1DE640C", VA = "0x1DE640C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(SceneNodeWorldTransform);
				}
			}

			[Token(Token = "0x170003AA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001332")]
				[Address(RVA = "0x1DE6464", Offset = "0x1DE6464", VA = "0x1DE6464", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600132B")]
			[Address(RVA = "0x1DE5C8C", Offset = "0x1DE5C8C", VA = "0x1DE5C8C")]
			[DebuggerHidden]
			public <WorldTransformedSceneNodes>d__70(int <>1__state)
			{
			}

			[Token(Token = "0x600132C")]
			[Address(RVA = "0x1DE5CC4", Offset = "0x1DE5CC4", VA = "0x1DE5CC4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600132D")]
			[Address(RVA = "0x1DE5E64", Offset = "0x1DE5E64", VA = "0x1DE5E64", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600132E")]
			[Address(RVA = "0x1DE5E10", Offset = "0x1DE5E10", VA = "0x1DE5E10")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600132F")]
			[Address(RVA = "0x1DE5D54", Offset = "0x1DE5D54", VA = "0x1DE5D54")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001331")]
			[Address(RVA = "0x1DE6424", Offset = "0x1DE6424", VA = "0x1DE6424", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001333")]
			[Address(RVA = "0x1DE64D0", Offset = "0x1DE64D0", VA = "0x1DE64D0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<SceneNodeWorldTransform> System.Collections.Generic.IEnumerable<ToolBuddy.ThirdParty.VectorGraphics.VectorUtils.SceneNodeWorldTransform>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001334")]
			[Address(RVA = "0x1DE65AC", Offset = "0x1DE65AC", VA = "0x1DE65AC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200027B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A56EC", Offset = "0x10A56EC")]
		private sealed class <SegmentsInPath>d__75 : IEnumerable<BezierSegment>, IEnumerable, IEnumerator<BezierSegment>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private BezierSegment <>2__current;

			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerable<BezierPathSegment> segments;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IEnumerable<BezierPathSegment> <>3__segments;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private bool closed;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool <>3__closed;

			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private IEnumerator<BezierPathSegment> <e>5__2;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private BezierPathSegment <s2>5__3;

			[Token(Token = "0x170003AB")]
			private BezierSegment System.Collections.Generic.IEnumerator<ToolBuddy.ThirdParty.VectorGraphics.BezierSegment>.Current
			{
				[Token(Token = "0x6001338")]
				[Address(RVA = "0x1DE5B1C", Offset = "0x1DE5B1C", VA = "0x1DE5B1C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(BezierSegment);
				}
			}

			[Token(Token = "0x170003AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600133A")]
				[Address(RVA = "0x1DE5B6C", Offset = "0x1DE5B6C", VA = "0x1DE5B6C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001335")]
			[Address(RVA = "0x1DE56B4", Offset = "0x1DE56B4", VA = "0x1DE56B4")]
			[DebuggerHidden]
			public <SegmentsInPath>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6001336")]
			[Address(RVA = "0x1DE56EC", Offset = "0x1DE56EC", VA = "0x1DE56EC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001337")]
			[Address(RVA = "0x1DE56F0", Offset = "0x1DE56F0", VA = "0x1DE56F0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001339")]
			[Address(RVA = "0x1DE5B2C", Offset = "0x1DE5B2C", VA = "0x1DE5B2C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600133B")]
			[Address(RVA = "0x1DE5BD0", Offset = "0x1DE5BD0", VA = "0x1DE5BD0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<BezierSegment> System.Collections.Generic.IEnumerable<ToolBuddy.ThirdParty.VectorGraphics.BezierSegment>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600133C")]
			[Address(RVA = "0x1DE5C88", Offset = "0x1DE5C88", VA = "0x1DE5C88", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material s_ExpandEdgesMat;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly float Epsilon;

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x2EB66EC", Offset = "0x2EB66EC", VA = "0x2EB66EC")]
		internal static BezierPathSegment[] BuildEllipsePath(Vector2 p0, Vector2 p1, float rotation, float rx, float ry, bool largeArc, bool sweep)
		{
			return null;
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x2EB6924", Offset = "0x2EB6924", VA = "0x2EB6924")]
		private static void ComputeEllipseParameters(Vector2 p0, Vector2 p1, float phi, float rx, float ry, bool fa, bool fs, out Vector2 c, out float theta1, out float sweepTheta, out float adjustedRx, out float adjustedRy)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x2EB75D0", Offset = "0x2EB75D0", VA = "0x2EB75D0")]
		private static void EnsureRadiiAreLargeEnough(Vector2 p, ref float rx, ref float ry)
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x2EB764C", Offset = "0x2EB764C", VA = "0x2EB764C")]
		public static BezierContour BuildRectangleContour(Rect rect, Vector2 radiusTL, Vector2 radiusTR, Vector2 radiusBR, Vector2 radiusBL)
		{
			return default(BezierContour);
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x2EB80E4", Offset = "0x2EB80E4", VA = "0x2EB80E4")]
		private static void FlipYAxis(IList<Vector2> vertices)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x2EB86AC", Offset = "0x2EB86AC", VA = "0x2EB86AC")]
		internal static void AdjustWinding(Vector2[] vertices, ushort[] indices, WindingDir dir)
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x2EB8958", Offset = "0x2EB8958", VA = "0x2EB8958")]
		private static void FlipRangeIfNecessary(List<Vector2> vertices, List<ushort> indices, int indexStart, int indexEnd, bool flipYAxis)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x2EB8CC4", Offset = "0x2EB8CC4", VA = "0x2EB8CC4")]
		internal static void RenderFromArrays(Vector2[] vertices, ushort[] indices, Vector2[] uvs, Color[] colors, Vector2[] settings, Texture2D texture, Material mat, bool clear = true)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x2EB8EE0", Offset = "0x2EB8EE0", VA = "0x2EB8EE0")]
		public static void RenderSprite(Sprite sprite, Material mat, bool clear = true)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x2EB9364", Offset = "0x2EB9364", VA = "0x2EB9364")]
		public static Texture2D RenderSpriteToTexture2D(Sprite sprite, int width, int height, Material mat, int antiAliasing = 1, bool expandEdges = false)
		{
			return null;
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x2EB9860", Offset = "0x2EB9860", VA = "0x2EB9860")]
		internal static Vector2 GetPivot(Alignment alignment, Vector2 customPivot, Rect bbox, bool flipYAxis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x2EB995C", Offset = "0x2EB995C", VA = "0x2EB995C")]
		public static void TessellatePath(BezierContour contour, PathProperties pathProps, TessellationOptions tessellateOptions, out Vector2[] vertices, out ushort[] indices)
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x2EBB0E8", Offset = "0x2EBB0E8", VA = "0x2EBB0E8")]
		private static Vector2[] TraceShape(BezierContour contour, Stroke stroke, TessellationOptions tessellateOptions)
		{
			return null;
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x2EBB61C", Offset = "0x2EBB61C", VA = "0x2EBB61C")]
		private static bool TryGetMoreRemainingUnits(ref float unitsRemaining, PathDistanceForwardIterator pathIt, float startingLength, float distance, float stepDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x2EBA3C0", Offset = "0x2EBA3C0", VA = "0x2EBA3C0")]
		private static void HandleNewSegmentJoining(PathDistanceForwardIterator pathIt, PathPatternIterator patternIt, JoiningInfo[] joiningInfo, float halfThickness, float[] segmentLengths)
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x2EBAF9C", Offset = "0x2EBAF9C", VA = "0x2EBAF9C")]
		private static void SkipRange(float distance, PathDistanceForwardIterator pathIt, PathPatternIterator patternIt, PathProperties pathProps, JoiningInfo[] joiningInfo, float[] segmentLengths)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x2EBA9A8", Offset = "0x2EBA9A8", VA = "0x2EBA9A8")]
		private static void TessellateRange(float distance, PathDistanceForwardIterator pathIt, PathPatternIterator patternIt, PathProperties pathProps, TessellationOptions tessellateOptions, JoiningInfo[] joiningInfo, float[] segmentLengths, float totalLength, int rangeIndex, List<Vector2> verts, List<ushort> inds)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x2EBCF6C", Offset = "0x2EBCF6C", VA = "0x2EBCF6C")]
		private static void AddSegment(BezierSegment segment, float toT, float halfThickness, JoiningInfo[] joinInfo, float segmentLengthSoFar, List<Vector2> verts, List<ushort> inds)
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x2EBBA34", Offset = "0x2EBBA34", VA = "0x2EBBA34")]
		private static JoiningInfo ForeseeJoining(BezierSegment end, BezierSegment start, float halfThickness, float endSegmentLength)
		{
			return null;
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x2EBD598", Offset = "0x2EBD598", VA = "0x2EBD598")]
		private static Vector2[] LineBezierThicknessIntersect(BezierSegment seg, float thickness, Vector2 lineFrom, Vector2 lineTo, out float distanceToIntersection, out Vector2 intersection)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x2EBD7F8", Offset = "0x2EBD7F8", VA = "0x2EBD7F8")]
		private static bool PointOnLineIsWithinSegment(Vector2 lineFrom, Vector2 lineTo, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x2EBC0E0", Offset = "0x2EBC0E0", VA = "0x2EBC0E0")]
		private static void GenerateJoining(JoiningInfo joinInfo, PathCorner corner, float halfThickness, float tippedCornerLimit, TessellationOptions tessellateOptions, List<Vector2> verts, List<ushort> inds)
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x2EBC9D4", Offset = "0x2EBC9D4", VA = "0x2EBC9D4")]
		private static void GenerateTip(BezierSegment segment, bool atStart, float t, PathEnding ending, float halfThickness, TessellationOptions tessellateOptions, List<Vector2> verts, List<ushort> inds)
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x2EBD918", Offset = "0x2EBD918", VA = "0x2EBD918")]
		private static int CalculateArcSteps(float radius, float fromAngle, float toAngle, TessellationOptions tessellateOptions)
		{
			return default(int);
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x2EBDA7C", Offset = "0x2EBDA7C", VA = "0x2EBDA7C")]
		public static void TessellateRect(Rect rect, out Vector2[] vertices, out ushort[] indices)
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x2EBDC18", Offset = "0x2EBDC18", VA = "0x2EBDC18")]
		public static void TessellateRectBorder(Rect rect, float halfThickness, out Vector2[] vertices, out ushort[] indices)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x2EB6D0C", Offset = "0x2EB6D0C", VA = "0x2EB6D0C")]
		public static BezierPathSegment[] BezierSegmentToPath(BezierSegment segment)
		{
			return null;
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x2EBE254", Offset = "0x2EBE254", VA = "0x2EBE254")]
		public static BezierPathSegment[] BezierSegmentsToPath(BezierSegment[] segments)
		{
			return null;
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x2EBB738", Offset = "0x2EBB738", VA = "0x2EBB738")]
		public static BezierSegment PathSegmentAtIndex(IList<BezierPathSegment> path, int index)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x2EBE4D4", Offset = "0x2EBE4D4", VA = "0x2EBE4D4")]
		public static bool PathEndsPerfectlyMatch(IList<BezierPathSegment> path)
		{
			return default(bool);
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x2EBE754", Offset = "0x2EBE754", VA = "0x2EBE754")]
		public static void MakeRectangleShape(Shape rectShape, Rect rect)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x2EBE848", Offset = "0x2EBE848", VA = "0x2EBE848")]
		public static void MakeRectangleShape(Shape rectShape, Rect rect, Vector2 radiusTL, Vector2 radiusTR, Vector2 radiusBR, Vector2 radiusBL)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x2EBE9C4", Offset = "0x2EBE9C4", VA = "0x2EBE9C4")]
		public static void MakeEllipseShape(Shape ellipseShape, Vector2 pos, float radiusX, float radiusY)
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x2EBEAA8", Offset = "0x2EBEAA8", VA = "0x2EBEAA8")]
		public static void MakeCircleShape(Shape circleShape, Vector2 pos, float radius)
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x2EBEB34", Offset = "0x2EBEB34", VA = "0x2EBEB34")]
		public static Rect Bounds(BezierPathSegment[] path)
		{
			return default(Rect);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x2EB8328", Offset = "0x2EB8328", VA = "0x2EB8328")]
		public static Rect Bounds(IEnumerable<Vector2> vertices)
		{
			return default(Rect);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x2EB6CCC", Offset = "0x2EB6CCC", VA = "0x2EB6CCC")]
		public static BezierSegment MakeLine(Vector2 from, Vector2 to)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x2EBF254", Offset = "0x2EBF254", VA = "0x2EBF254")]
		public static BezierSegment QuadraticToCubic(Vector2 p0, Vector2 p1, Vector2 p2)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x2EB800C", Offset = "0x2EB800C", VA = "0x2EB800C")]
		public static BezierPathSegment[] MakePathLine(Vector2 from, Vector2 to)
		{
			return null;
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x2EBF298", Offset = "0x2EBF298", VA = "0x2EBF298")]
		internal static BezierSegment MakeArcQuarter(Vector2 center, float startAngleRads, float sweepAngleRads)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x2EB6D9C", Offset = "0x2EB6D9C", VA = "0x2EB6D9C")]
		public static BezierPathSegment[] MakeArc(Vector2 center, float startAngleRads, float sweepAngleRads, float radius)
		{
			return null;
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x2EBF428", Offset = "0x2EBF428", VA = "0x2EBF428")]
		internal static int QuadrantAtAngle(float angle)
		{
			return default(int);
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x2EBF4A4", Offset = "0x2EBF4A4", VA = "0x2EBF4A4")]
		internal static BezierSegment ArcSegmentForQuadrant(int quadrant)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x2EBD584", Offset = "0x2EBD584", VA = "0x2EBD584")]
		public static BezierSegment FlipSegment(BezierSegment segment)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x2EBEFAC", Offset = "0x2EBEFAC", VA = "0x2EBEFAC")]
		public static void Bounds(BezierSegment segment, out Vector2 min, out Vector2 max)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x2EBFE58", Offset = "0x2EBFE58", VA = "0x2EBFE58")]
		public static Vector2 Eval(BezierSegment segment, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x2EBD254", Offset = "0x2EBD254", VA = "0x2EBD254")]
		public static Vector2 EvalTangent(BezierSegment segment, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x2EBFEB8", Offset = "0x2EBFEB8", VA = "0x2EBFEB8")]
		public static Vector2 EvalNormal(BezierSegment segment, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x2EBFF54", Offset = "0x2EBFF54", VA = "0x2EBFF54")]
		public static Vector2 EvalFull(BezierSegment segment, float t, out Vector2 tangent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x2EBD1A0", Offset = "0x2EBD1A0", VA = "0x2EBD1A0")]
		public static Vector2 EvalFull(BezierSegment segment, float t, out Vector2 tangent, out Vector2 normal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x2EB9F90", Offset = "0x2EB9F90", VA = "0x2EB9F90")]
		public static float[] SegmentsLengths(IList<BezierPathSegment> segments, bool closed, float precision = 0.001f)
		{
			return null;
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x2EC03F0", Offset = "0x2EC03F0", VA = "0x2EC03F0")]
		public static float SegmentsLength(IList<BezierPathSegment> segments, bool closed, float precision = 0.001f)
		{
			return default(float);
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x2EC0138", Offset = "0x2EC0138", VA = "0x2EC0138")]
		public static float SegmentLength(BezierSegment segment, float precision = 0.001f)
		{
			return default(float);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x2EC09C8", Offset = "0x2EC09C8", VA = "0x2EC09C8")]
		internal static float SegmentLengthIterative(BezierSegment segment, int steps = 10)
		{
			return default(float);
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x2EC0954", Offset = "0x2EC0954", VA = "0x2EC0954")]
		internal static bool HasLargeCoordinates(BezierSegment segment)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x2EC0DF4", Offset = "0x2EC0DF4", VA = "0x2EC0DF4")]
		private static float AdaptiveQuadraticApproxSplitPoint(BezierSegment segment, float precision)
		{
			return default(float);
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x2EC0AE4", Offset = "0x2EC0AE4", VA = "0x2EC0AE4")]
		private static float MidPointQuadraticApproxLength(BezierSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x2EBF9B0", Offset = "0x2EBF9B0", VA = "0x2EBF9B0")]
		public static void SplitSegment(BezierSegment segment, float t, out BezierSegment b1, out BezierSegment b2)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x2EBFBF4", Offset = "0x2EBFBF4", VA = "0x2EBFBF4")]
		public static BezierSegment TransformSegment(BezierSegment segment, Vector2 translation, float rotation, Vector2 scaling)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x2EC0E64", Offset = "0x2EC0E64", VA = "0x2EC0E64")]
		public static BezierSegment TransformSegment(BezierSegment segment, Matrix2D matrix)
		{
			return default(BezierSegment);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x2EB7390", Offset = "0x2EB7390", VA = "0x2EB7390")]
		public static BezierPathSegment[] TransformBezierPath(BezierPathSegment[] path, Vector2 translation, float rotation, Vector2 scaling)
		{
			return null;
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x2EC0FC4", Offset = "0x2EC0FC4", VA = "0x2EC0FC4")]
		public static BezierPathSegment[] TransformBezierPath(BezierPathSegment[] path, Matrix2D matrix)
		{
			return null;
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x2EC1184", Offset = "0x2EC1184", VA = "0x2EC1184")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C4754", Offset = "0x10C4754")]
		public static IEnumerable<SceneNode> SceneNodes(SceneNode root)
		{
			return null;
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x2EC11FC", Offset = "0x2EC11FC", VA = "0x2EC11FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C47B4", Offset = "0x10C47B4")]
		private static IEnumerable<SceneNodeWorldTransform> WorldTransformedSceneNodes(SceneNode child, Dictionary<SceneNode, float> nodeOpacities, SceneNodeWorldTransform parent)
		{
			return null;
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x2EC12B0", Offset = "0x2EC12B0", VA = "0x2EC12B0")]
		public static IEnumerable<SceneNodeWorldTransform> WorldTransformedSceneNodes(SceneNode root, Dictionary<SceneNode, float> nodeOpacities)
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x2EC1408", Offset = "0x2EC1408", VA = "0x2EC1408")]
		public static void RealignVerticesInBounds(IList<Vector2> vertices, Rect bounds, bool flip)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x2EC1624", Offset = "0x2EC1624", VA = "0x2EC1624")]
		public static void FlipVerticesInBounds(IList<Vector2> vertices, Rect bounds)
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x2EC180C", Offset = "0x2EC180C", VA = "0x2EC180C")]
		internal static void ClampVerticesInBounds(IList<Vector2> vertices, Rect bounds)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x2EBEF20", Offset = "0x2EBEF20", VA = "0x2EBEF20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C4814", Offset = "0x10C4814")]
		public static IEnumerable<BezierSegment> SegmentsInPath(IEnumerable<BezierPathSegment> segments, bool closed = false)
		{
			return null;
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x2EBFDA0", Offset = "0x2EBFDA0", VA = "0x2EBFDA0")]
		private static void SolveQuadratic(float a, float b, float c, out float s1, out float s2)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x2EBD41C", Offset = "0x2EBD41C", VA = "0x2EBD41C")]
		public static Vector2 IntersectLines(Vector2 line1Pt1, Vector2 line1Pt2, Vector2 line2Pt1, Vector2 line2Pt2)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x2EC1A3C", Offset = "0x2EC1A3C", VA = "0x2EC1A3C")]
		public static Vector2 IntersectLineSegments(Vector2 line1Pt1, Vector2 line1Pt2, Vector2 line2Pt1, Vector2 line2Pt2)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x2EBD55C", Offset = "0x2EBD55C", VA = "0x2EBD55C")]
		private static bool PointOnTheLeftOfLine(Vector2 lineFrom, Vector2 lineTo, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x2EBF63C", Offset = "0x2EBF63C", VA = "0x2EBF63C")]
		public static float[] FindBezierLineIntersections(BezierSegment segment, Vector2 p0, Vector2 p1)
		{
			return null;
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x2EC1BE0", Offset = "0x2EC1BE0", VA = "0x2EC1BE0")]
		private static float[] CubicRoots(double a, double b, double c, double d)
		{
			return null;
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x2EC1AF8", Offset = "0x2EC1AF8", VA = "0x2EC1AF8")]
		private static Vector2[] BezierCoefficients(BezierSegment segment)
		{
			return null;
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x2EC22C8", Offset = "0x2EC22C8", VA = "0x2EC22C8")]
		public static Rect SceneNodeBounds(SceneNode root)
		{
			return default(Rect);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x2EC29D0", Offset = "0x2EC29D0", VA = "0x2EC29D0")]
		public static Rect ApproximateSceneNodeBounds(SceneNode root)
		{
			return default(Rect);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x2EBFAC0", Offset = "0x2EBFAC0", VA = "0x2EBFAC0")]
		internal static bool IsEmptySegment(BezierSegment bs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200027C")]
	public enum GradientFillType
	{
		[Token(Token = "0x4000A5A")]
		Linear,
		[Token(Token = "0x4000A5B")]
		Radial
	}
	[Token(Token = "0x200027D")]
	public enum PathCorner
	{
		[Token(Token = "0x4000A5D")]
		Tipped,
		[Token(Token = "0x4000A5E")]
		Round,
		[Token(Token = "0x4000A5F")]
		Beveled
	}
	[Token(Token = "0x200027E")]
	public enum PathEnding
	{
		[Token(Token = "0x4000A61")]
		Chop,
		[Token(Token = "0x4000A62")]
		Square,
		[Token(Token = "0x4000A63")]
		Round
	}
	[Token(Token = "0x200027F")]
	public enum FillMode
	{
		[Token(Token = "0x4000A65")]
		NonZero,
		[Token(Token = "0x4000A66")]
		OddEven
	}
	[Token(Token = "0x2000280")]
	public enum AddressMode
	{
		[Token(Token = "0x4000A68")]
		Wrap,
		[Token(Token = "0x4000A69")]
		Clamp,
		[Token(Token = "0x4000A6A")]
		Mirror
	}
	[Token(Token = "0x2000281")]
	public struct GradientStop
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB880", Offset = "0x10BB880")]
		private Color <Color>k__BackingField;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB890", Offset = "0x10BB890")]
		private float <StopPercentage>k__BackingField;

		[Token(Token = "0x170003AD")]
		public Color Color
		{
			[Token(Token = "0x600133D")]
			[Address(RVA = "0x2F2F588", Offset = "0x2F2F588", VA = "0x2F2F588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4A0C", Offset = "0x10C4A0C")]
			readonly get
			{
				return default(Color);
			}
			[Token(Token = "0x600133E")]
			[Address(RVA = "0x2F2F594", Offset = "0x2F2F594", VA = "0x2F2F594")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4A44", Offset = "0x10C4A44")]
			set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		public float StopPercentage
		{
			[Token(Token = "0x600133F")]
			[Address(RVA = "0x2F2F5A0", Offset = "0x2F2F5A0", VA = "0x2F2F5A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4A54", Offset = "0x10C4A54")]
			readonly get
			{
				return default(float);
			}
			[Token(Token = "0x6001340")]
			[Address(RVA = "0x2F2F5A8", Offset = "0x2F2F5A8", VA = "0x2F2F5A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4A8C", Offset = "0x10C4A8C")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000282")]
	public struct BezierSegment
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 P0;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 P1;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 P2;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 P3;
	}
	[Token(Token = "0x2000283")]
	public struct BezierPathSegment
	{
		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 P0;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 P1;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 P2;
	}
	[Token(Token = "0x2000284")]
	public struct BezierContour
	{
		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8A0", Offset = "0x10BB8A0")]
		private BezierPathSegment[] <Segments>k__BackingField;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8B0", Offset = "0x10BB8B0")]
		private bool <Closed>k__BackingField;

		[Token(Token = "0x170003AF")]
		public BezierPathSegment[] Segments
		{
			[Token(Token = "0x6001341")]
			[Address(RVA = "0x200BF54", Offset = "0x200BF54", VA = "0x200BF54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4A9C", Offset = "0x10C4A9C")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x6001342")]
			[Address(RVA = "0x200BF5C", Offset = "0x200BF5C", VA = "0x200BF5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4AD4", Offset = "0x10C4AD4")]
			set
			{
			}
		}

		[Token(Token = "0x170003B0")]
		public bool Closed
		{
			[Token(Token = "0x6001343")]
			[Address(RVA = "0x200BF64", Offset = "0x200BF64", VA = "0x200BF64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4AE4", Offset = "0x10C4AE4")]
			readonly get
			{
				return default(bool);
			}
			[Token(Token = "0x6001344")]
			[Address(RVA = "0x200BF6C", Offset = "0x200BF6C", VA = "0x200BF6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B1C", Offset = "0x10C4B1C")]
			set
			{
			}
		}
	}
	[Token(Token = "0x2000285")]
	public interface IFill
	{
		[Token(Token = "0x170003B1")]
		FillMode Mode
		{
			[Token(Token = "0x6001345")]
			get;
			[Token(Token = "0x6001346")]
			set;
		}

		[Token(Token = "0x170003B2")]
		float Opacity
		{
			[Token(Token = "0x6001347")]
			get;
			[Token(Token = "0x6001348")]
			set;
		}
	}
	[Token(Token = "0x2000286")]
	public class SolidFill : IFill
	{
		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8C0", Offset = "0x10BB8C0")]
		private Color <Color>k__BackingField;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_Opacity;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8D0", Offset = "0x10BB8D0")]
		private FillMode <Mode>k__BackingField;

		[Token(Token = "0x170003B3")]
		public Color Color
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0x229B290", Offset = "0x229B290", VA = "0x229B290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B2C", Offset = "0x10C4B2C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600134A")]
			[Address(RVA = "0x229B29C", Offset = "0x229B29C", VA = "0x229B29C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B3C", Offset = "0x10C4B3C")]
			set
			{
			}
		}

		[Token(Token = "0x170003B4")]
		public float Opacity
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0x229B2A8", Offset = "0x229B2A8", VA = "0x229B2A8", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600134C")]
			[Address(RVA = "0x229B2B0", Offset = "0x229B2B0", VA = "0x229B2B0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170003B5")]
		public FillMode Mode
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0x229B2B8", Offset = "0x229B2B8", VA = "0x229B2B8", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B4C", Offset = "0x10C4B4C")]
			get
			{
				return default(FillMode);
			}
			[Token(Token = "0x600134E")]
			[Address(RVA = "0x229B2C0", Offset = "0x229B2C0", VA = "0x229B2C0", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B5C", Offset = "0x10C4B5C")]
			set
			{
			}
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x229B2C8", Offset = "0x229B2C8", VA = "0x229B2C8")]
		public SolidFill()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class GradientFill : IFill
	{
		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8E0", Offset = "0x10BB8E0")]
		private GradientFillType <Type>k__BackingField;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB8F0", Offset = "0x10BB8F0")]
		private GradientStop[] <Stops>k__BackingField;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB900", Offset = "0x10BB900")]
		private FillMode <Mode>k__BackingField;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_Opacity;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB910", Offset = "0x10BB910")]
		private AddressMode <Addressing>k__BackingField;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB920", Offset = "0x10BB920")]
		private Vector2 <RadialFocus>k__BackingField;

		[Token(Token = "0x170003B6")]
		public GradientFillType Type
		{
			[Token(Token = "0x6001350")]
			[Address(RVA = "0x2F2F518", Offset = "0x2F2F518", VA = "0x2F2F518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B6C", Offset = "0x10C4B6C")]
			get
			{
				return default(GradientFillType);
			}
			[Token(Token = "0x6001351")]
			[Address(RVA = "0x2F2F520", Offset = "0x2F2F520", VA = "0x2F2F520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B7C", Offset = "0x10C4B7C")]
			set
			{
			}
		}

		[Token(Token = "0x170003B7")]
		public GradientStop[] Stops
		{
			[Token(Token = "0x6001352")]
			[Address(RVA = "0x2F2F528", Offset = "0x2F2F528", VA = "0x2F2F528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B8C", Offset = "0x10C4B8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001353")]
			[Address(RVA = "0x2F2F530", Offset = "0x2F2F530", VA = "0x2F2F530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4B9C", Offset = "0x10C4B9C")]
			set
			{
			}
		}

		[Token(Token = "0x170003B8")]
		public FillMode Mode
		{
			[Token(Token = "0x6001354")]
			[Address(RVA = "0x2F2F538", Offset = "0x2F2F538", VA = "0x2F2F538", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BAC", Offset = "0x10C4BAC")]
			get
			{
				return default(FillMode);
			}
			[Token(Token = "0x6001355")]
			[Address(RVA = "0x2F2F540", Offset = "0x2F2F540", VA = "0x2F2F540", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BBC", Offset = "0x10C4BBC")]
			set
			{
			}
		}

		[Token(Token = "0x170003B9")]
		public float Opacity
		{
			[Token(Token = "0x6001356")]
			[Address(RVA = "0x2F2F548", Offset = "0x2F2F548", VA = "0x2F2F548", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001357")]
			[Address(RVA = "0x2F2F550", Offset = "0x2F2F550", VA = "0x2F2F550", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170003BA")]
		public AddressMode Addressing
		{
			[Token(Token = "0x6001358")]
			[Address(RVA = "0x2F2F558", Offset = "0x2F2F558", VA = "0x2F2F558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BCC", Offset = "0x10C4BCC")]
			get
			{
				return default(AddressMode);
			}
			[Token(Token = "0x6001359")]
			[Address(RVA = "0x2F2F560", Offset = "0x2F2F560", VA = "0x2F2F560")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BDC", Offset = "0x10C4BDC")]
			set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public Vector2 RadialFocus
		{
			[Token(Token = "0x600135A")]
			[Address(RVA = "0x2F2F568", Offset = "0x2F2F568", VA = "0x2F2F568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BEC", Offset = "0x10C4BEC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600135B")]
			[Address(RVA = "0x2F2F570", Offset = "0x2F2F570", VA = "0x2F2F570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4BFC", Offset = "0x10C4BFC")]
			set
			{
			}
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x2F2F578", Offset = "0x2F2F578", VA = "0x2F2F578")]
		public GradientFill()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class TextureFill : IFill
	{
		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB930", Offset = "0x10BB930")]
		private Texture2D <Texture>k__BackingField;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB940", Offset = "0x10BB940")]
		private FillMode <Mode>k__BackingField;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_Opacity;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB950", Offset = "0x10BB950")]
		private AddressMode <Addressing>k__BackingField;

		[Token(Token = "0x170003BC")]
		public Texture2D Texture
		{
			[Token(Token = "0x600135D")]
			[Address(RVA = "0x2DBDA74", Offset = "0x2DBDA74", VA = "0x2DBDA74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C0C", Offset = "0x10C4C0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600135E")]
			[Address(RVA = "0x2DBDA7C", Offset = "0x2DBDA7C", VA = "0x2DBDA7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C1C", Offset = "0x10C4C1C")]
			set
			{
			}
		}

		[Token(Token = "0x170003BD")]
		public FillMode Mode
		{
			[Token(Token = "0x600135F")]
			[Address(RVA = "0x2DBDA84", Offset = "0x2DBDA84", VA = "0x2DBDA84", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C2C", Offset = "0x10C4C2C")]
			get
			{
				return default(FillMode);
			}
			[Token(Token = "0x6001360")]
			[Address(RVA = "0x2DBDA8C", Offset = "0x2DBDA8C", VA = "0x2DBDA8C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C3C", Offset = "0x10C4C3C")]
			set
			{
			}
		}

		[Token(Token = "0x170003BE")]
		public float Opacity
		{
			[Token(Token = "0x6001361")]
			[Address(RVA = "0x2DBDA94", Offset = "0x2DBDA94", VA = "0x2DBDA94", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001362")]
			[Address(RVA = "0x2DBDA9C", Offset = "0x2DBDA9C", VA = "0x2DBDA9C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170003BF")]
		public AddressMode Addressing
		{
			[Token(Token = "0x6001363")]
			[Address(RVA = "0x2DBDAA4", Offset = "0x2DBDAA4", VA = "0x2DBDAA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C4C", Offset = "0x10C4C4C")]
			get
			{
				return default(AddressMode);
			}
			[Token(Token = "0x6001364")]
			[Address(RVA = "0x2DBDAAC", Offset = "0x2DBDAAC", VA = "0x2DBDAAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C5C", Offset = "0x10C4C5C")]
			set
			{
			}
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x2DBDAB4", Offset = "0x2DBDAB4", VA = "0x2DBDAB4")]
		public TextureFill()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class PatternFill : IFill
	{
		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB960", Offset = "0x10BB960")]
		private FillMode <Mode>k__BackingField;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_Opacity;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB970", Offset = "0x10BB970")]
		private SceneNode <Pattern>k__BackingField;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB980", Offset = "0x10BB980")]
		private Rect <Rect>k__BackingField;

		[Token(Token = "0x170003C0")]
		public FillMode Mode
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0x3131E04", Offset = "0x3131E04", VA = "0x3131E04", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C6C", Offset = "0x10C4C6C")]
			get
			{
				return default(FillMode);
			}
			[Token(Token = "0x6001367")]
			[Address(RVA = "0x3131E0C", Offset = "0x3131E0C", VA = "0x3131E0C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C7C", Offset = "0x10C4C7C")]
			set
			{
			}
		}

		[Token(Token = "0x170003C1")]
		public float Opacity
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0x3131E14", Offset = "0x3131E14", VA = "0x3131E14", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x3131E1C", Offset = "0x3131E1C", VA = "0x3131E1C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170003C2")]
		public SceneNode Pattern
		{
			[Token(Token = "0x600136A")]
			[Address(RVA = "0x3131E24", Offset = "0x3131E24", VA = "0x3131E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C8C", Offset = "0x10C4C8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600136B")]
			[Address(RVA = "0x3131E2C", Offset = "0x3131E2C", VA = "0x3131E2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4C9C", Offset = "0x10C4C9C")]
			set
			{
			}
		}

		[Token(Token = "0x170003C3")]
		public Rect Rect
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0x3131E34", Offset = "0x3131E34", VA = "0x3131E34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CAC", Offset = "0x10C4CAC")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x3131E40", Offset = "0x3131E40", VA = "0x3131E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CBC", Offset = "0x10C4CBC")]
			set
			{
			}
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x3131E4C", Offset = "0x3131E4C", VA = "0x3131E4C")]
		public PatternFill()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class Stroke
	{
		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB990", Offset = "0x10BB990")]
		private IFill <Fill>k__BackingField;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Matrix2D m_FillTransform;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9A0", Offset = "0x10BB9A0")]
		private float <HalfThickness>k__BackingField;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9B0", Offset = "0x10BB9B0")]
		private float[] <Pattern>k__BackingField;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9C0", Offset = "0x10BB9C0")]
		private float <PatternOffset>k__BackingField;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9D0", Offset = "0x10BB9D0")]
		private float <TippedCornerLimit>k__BackingField;

		[Token(Token = "0x170003C4")]
		public Color Color
		{
			[Token(Token = "0x600136F")]
			[Address(RVA = "0x2DB825C", Offset = "0x2DB825C", VA = "0x2DB825C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001370")]
			[Address(RVA = "0x2DB82FC", Offset = "0x2DB82FC", VA = "0x2DB82FC")]
			set
			{
			}
		}

		[Token(Token = "0x170003C5")]
		public IFill Fill
		{
			[Token(Token = "0x6001371")]
			[Address(RVA = "0x2DB8390", Offset = "0x2DB8390", VA = "0x2DB8390")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CCC", Offset = "0x10C4CCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001372")]
			[Address(RVA = "0x2DB8398", Offset = "0x2DB8398", VA = "0x2DB8398")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CDC", Offset = "0x10C4CDC")]
			set
			{
			}
		}

		[Token(Token = "0x170003C6")]
		public Matrix2D FillTransform
		{
			[Token(Token = "0x6001373")]
			[Address(RVA = "0x2DB83A0", Offset = "0x2DB83A0", VA = "0x2DB83A0")]
			get
			{
				return default(Matrix2D);
			}
			[Token(Token = "0x6001374")]
			[Address(RVA = "0x2DB83B4", Offset = "0x2DB83B4", VA = "0x2DB83B4")]
			set
			{
			}
		}

		[Token(Token = "0x170003C7")]
		public float HalfThickness
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0x2DB83C8", Offset = "0x2DB83C8", VA = "0x2DB83C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CEC", Offset = "0x10C4CEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001376")]
			[Address(RVA = "0x2DB83D0", Offset = "0x2DB83D0", VA = "0x2DB83D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4CFC", Offset = "0x10C4CFC")]
			set
			{
			}
		}

		[Token(Token = "0x170003C8")]
		public float[] Pattern
		{
			[Token(Token = "0x6001377")]
			[Address(RVA = "0x2DB83D8", Offset = "0x2DB83D8", VA = "0x2DB83D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D0C", Offset = "0x10C4D0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001378")]
			[Address(RVA = "0x2DB83E0", Offset = "0x2DB83E0", VA = "0x2DB83E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D1C", Offset = "0x10C4D1C")]
			set
			{
			}
		}

		[Token(Token = "0x170003C9")]
		public float PatternOffset
		{
			[Token(Token = "0x6001379")]
			[Address(RVA = "0x2DB83E8", Offset = "0x2DB83E8", VA = "0x2DB83E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D2C", Offset = "0x10C4D2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600137A")]
			[Address(RVA = "0x2DB83F0", Offset = "0x2DB83F0", VA = "0x2DB83F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D3C", Offset = "0x10C4D3C")]
			set
			{
			}
		}

		[Token(Token = "0x170003CA")]
		public float TippedCornerLimit
		{
			[Token(Token = "0x600137B")]
			[Address(RVA = "0x2DB83F8", Offset = "0x2DB83F8", VA = "0x2DB83F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D4C", Offset = "0x10C4D4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600137C")]
			[Address(RVA = "0x2DB8400", Offset = "0x2DB8400", VA = "0x2DB8400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D5C", Offset = "0x10C4D5C")]
			set
			{
			}
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x2DB8408", Offset = "0x2DB8408", VA = "0x2DB8408")]
		public Stroke()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public struct PathProperties
	{
		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9E0", Offset = "0x10BB9E0")]
		private Stroke <Stroke>k__BackingField;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BB9F0", Offset = "0x10BB9F0")]
		private PathEnding <Head>k__BackingField;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA00", Offset = "0x10BBA00")]
		private PathEnding <Tail>k__BackingField;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA10", Offset = "0x10BBA10")]
		private PathCorner <Corners>k__BackingField;

		[Token(Token = "0x170003CB")]
		public Stroke Stroke
		{
			[Token(Token = "0x600137E")]
			[Address(RVA = "0x3131D48", Offset = "0x3131D48", VA = "0x3131D48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4D6C", Offset = "0x10C4D6C")]
			readonly get
			{
				return null;
			}
			[Token(Token = "0x600137F")]
			[Address(RVA = "0x3131D50", Offset = "0x3131D50", VA = "0x3131D50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4DA4", Offset = "0x10C4DA4")]
			set
			{
			}
		}

		[Token(Token = "0x170003CC")]
		public PathEnding Head
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x3131D58", Offset = "0x3131D58", VA = "0x3131D58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4DB4", Offset = "0x10C4DB4")]
			readonly get
			{
				return default(PathEnding);
			}
			[Token(Token = "0x6001381")]
			[Address(RVA = "0x3131D60", Offset = "0x3131D60", VA = "0x3131D60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4DEC", Offset = "0x10C4DEC")]
			set
			{
			}
		}

		[Token(Token = "0x170003CD")]
		public PathEnding Tail
		{
			[Token(Token = "0x6001382")]
			[Address(RVA = "0x3131D68", Offset = "0x3131D68", VA = "0x3131D68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4DFC", Offset = "0x10C4DFC")]
			readonly get
			{
				return default(PathEnding);
			}
			[Token(Token = "0x6001383")]
			[Address(RVA = "0x3131D70", Offset = "0x3131D70", VA = "0x3131D70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4E34", Offset = "0x10C4E34")]
			set
			{
			}
		}

		[Token(Token = "0x170003CE")]
		public PathCorner Corners
		{
			[Token(Token = "0x6001384")]
			[Address(RVA = "0x3131D78", Offset = "0x3131D78", VA = "0x3131D78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4E44", Offset = "0x10C4E44")]
			readonly get
			{
				return default(PathCorner);
			}
			[Token(Token = "0x6001385")]
			[Address(RVA = "0x3131D80", Offset = "0x3131D80", VA = "0x3131D80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4E7C", Offset = "0x10C4E7C")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200028C")]
	public class Shape
	{
		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA20", Offset = "0x10BBA20")]
		private BezierContour[] <Contours>k__BackingField;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA30", Offset = "0x10BBA30")]
		private IFill <Fill>k__BackingField;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Matrix2D m_FillTransform;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA40", Offset = "0x10BBA40")]
		private PathProperties <PathProps>k__BackingField;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA50", Offset = "0x10BBA50")]
		private bool <IsConvex>k__BackingField;

		[Token(Token = "0x170003CF")]
		public BezierContour[] Contours
		{
			[Token(Token = "0x6001386")]
			[Address(RVA = "0x229A750", Offset = "0x229A750", VA = "0x229A750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4E8C", Offset = "0x10C4E8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001387")]
			[Address(RVA = "0x229A758", Offset = "0x229A758", VA = "0x229A758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4E9C", Offset = "0x10C4E9C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D0")]
		public IFill Fill
		{
			[Token(Token = "0x6001388")]
			[Address(RVA = "0x229A760", Offset = "0x229A760", VA = "0x229A760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4EAC", Offset = "0x10C4EAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001389")]
			[Address(RVA = "0x229A768", Offset = "0x229A768", VA = "0x229A768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4EBC", Offset = "0x10C4EBC")]
			set
			{
			}
		}

		[Token(Token = "0x170003D1")]
		public Matrix2D FillTransform
		{
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x229A770", Offset = "0x229A770", VA = "0x229A770")]
			get
			{
				return default(Matrix2D);
			}
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x229A784", Offset = "0x229A784", VA = "0x229A784")]
			set
			{
			}
		}

		[Token(Token = "0x170003D2")]
		public PathProperties PathProps
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x229A798", Offset = "0x229A798", VA = "0x229A798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4ECC", Offset = "0x10C4ECC")]
			get
			{
				return default(PathProperties);
			}
			[Token(Token = "0x600138D")]
			[Address(RVA = "0x229A7AC", Offset = "0x229A7AC", VA = "0x229A7AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4EDC", Offset = "0x10C4EDC")]
			set
			{
			}
		}

		[Token(Token = "0x170003D3")]
		public bool IsConvex
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x229A7CC", Offset = "0x229A7CC", VA = "0x229A7CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4EEC", Offset = "0x10C4EEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600138F")]
			[Address(RVA = "0x229A7D4", Offset = "0x229A7D4", VA = "0x229A7D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4EFC", Offset = "0x10C4EFC")]
			set
			{
			}
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x2294C44", Offset = "0x2294C44", VA = "0x2294C44")]
		public Shape()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class SceneNode
	{
		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA60", Offset = "0x10BBA60")]
		private List<SceneNode> <Children>k__BackingField;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA70", Offset = "0x10BBA70")]
		private List<Shape> <Shapes>k__BackingField;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Matrix2D m_Transform;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA80", Offset = "0x10BBA80")]
		private SceneNode <Clipper>k__BackingField;

		[Token(Token = "0x170003D4")]
		public List<SceneNode> Children
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0x22992AC", Offset = "0x22992AC", VA = "0x22992AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F0C", Offset = "0x10C4F0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001392")]
			[Address(RVA = "0x22992B4", Offset = "0x22992B4", VA = "0x22992B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F1C", Offset = "0x10C4F1C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D5")]
		public List<Shape> Shapes
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0x22992BC", Offset = "0x22992BC", VA = "0x22992BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F2C", Offset = "0x10C4F2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001394")]
			[Address(RVA = "0x22992C4", Offset = "0x22992C4", VA = "0x22992C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F3C", Offset = "0x10C4F3C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D6")]
		public Matrix2D Transform
		{
			[Token(Token = "0x6001395")]
			[Address(RVA = "0x22992CC", Offset = "0x22992CC", VA = "0x22992CC")]
			get
			{
				return default(Matrix2D);
			}
			[Token(Token = "0x6001396")]
			[Address(RVA = "0x22992E0", Offset = "0x22992E0", VA = "0x22992E0")]
			set
			{
			}
		}

		[Token(Token = "0x170003D7")]
		public SceneNode Clipper
		{
			[Token(Token = "0x6001397")]
			[Address(RVA = "0x22992F4", Offset = "0x22992F4", VA = "0x22992F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F4C", Offset = "0x10C4F4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001398")]
			[Address(RVA = "0x22992FC", Offset = "0x22992FC", VA = "0x22992FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F5C", Offset = "0x10C4F5C")]
			set
			{
			}
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x2294D00", Offset = "0x2294D00", VA = "0x2294D00")]
		public SceneNode()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class Scene
	{
		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBA90", Offset = "0x10BBA90")]
		private SceneNode <Root>k__BackingField;

		[Token(Token = "0x170003D8")]
		public SceneNode Root
		{
			[Token(Token = "0x600139A")]
			[Address(RVA = "0x229929C", Offset = "0x229929C", VA = "0x229929C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F6C", Offset = "0x10C4F6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600139B")]
			[Address(RVA = "0x22992A4", Offset = "0x22992A4", VA = "0x22992A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F7C", Offset = "0x10C4F7C")]
			set
			{
			}
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x2294C3C", Offset = "0x2294C3C", VA = "0x2294C3C")]
		public Scene()
		{
		}
	}
	[Token(Token = "0x200028F")]
	internal class PathDistanceForwardIterator
	{
		[Token(Token = "0x2000290")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A56FC", Offset = "0x10A56FC")]
		private class BezierLoop : IList<BezierPathSegment>, ICollection<BezierPathSegment>, IEnumerable<BezierPathSegment>, IEnumerable
		{
			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IList<BezierPathSegment> OpenPath;

			[Token(Token = "0x170003E0")]
			public BezierPathSegment Item
			{
				[Token(Token = "0x60013A9")]
				[Address(RVA = "0x1DE0B2C", Offset = "0x1DE0B2C", VA = "0x1DE0B2C", Slot = "4")]
				get
				{
					return default(BezierPathSegment);
				}
				[Token(Token = "0x60013AA")]
				[Address(RVA = "0x1DE0D00", Offset = "0x1DE0D00", VA = "0x1DE0D00", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x170003E1")]
			public int Count
			{
				[Token(Token = "0x60013AB")]
				[Address(RVA = "0x1DE0D40", Offset = "0x1DE0D40", VA = "0x1DE0D40", Slot = "9")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170003E2")]
			public bool IsReadOnly
			{
				[Token(Token = "0x60013AC")]
				[Address(RVA = "0x1DE0DF4", Offset = "0x1DE0DF4", VA = "0x1DE0DF4", Slot = "10")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60013A8")]
			[Address(RVA = "0x1DE0AF8", Offset = "0x1DE0AF8", VA = "0x1DE0AF8")]
			public BezierLoop(IList<BezierPathSegment> openPath)
			{
			}

			[Token(Token = "0x60013AD")]
			[Address(RVA = "0x1DE0DFC", Offset = "0x1DE0DFC", VA = "0x1DE0DFC", Slot = "11")]
			public void Add(BezierPathSegment item)
			{
			}

			[Token(Token = "0x60013AE")]
			[Address(RVA = "0x1DE0E3C", Offset = "0x1DE0E3C", VA = "0x1DE0E3C", Slot = "12")]
			public void Clear()
			{
			}

			[Token(Token = "0x60013AF")]
			[Address(RVA = "0x1DE0E40", Offset = "0x1DE0E40", VA = "0x1DE0E40", Slot = "13")]
			public bool Contains(BezierPathSegment item)
			{
				return default(bool);
			}

			[Token(Token = "0x60013B0")]
			[Address(RVA = "0x1DE0E80", Offset = "0x1DE0E80", VA = "0x1DE0E80", Slot = "14")]
			public void CopyTo(BezierPathSegment[] array, int arrayIndex)
			{
			}

			[Token(Token = "0x60013B1")]
			[Address(RVA = "0x1DE0EC0", Offset = "0x1DE0EC0", VA = "0x1DE0EC0", Slot = "16")]
			public IEnumerator<BezierPathSegment> GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60013B2")]
			[Address(RVA = "0x1DE0F00", Offset = "0x1DE0F00", VA = "0x1DE0F00", Slot = "6")]
			public int IndexOf(BezierPathSegment item)
			{
				return default(int);
			}

			[Token(Token = "0x60013B3")]
			[Address(RVA = "0x1DE0F40", Offset = "0x1DE0F40", VA = "0x1DE0F40", Slot = "7")]
			public void Insert(int index, BezierPathSegment item)
			{
			}

			[Token(Token = "0x60013B4")]
			[Address(RVA = "0x1DE0F80", Offset = "0x1DE0F80", VA = "0x1DE0F80", Slot = "15")]
			public bool Remove(BezierPathSegment item)
			{
				return default(bool);
			}

			[Token(Token = "0x60013B5")]
			[Address(RVA = "0x1DE0FC0", Offset = "0x1DE0FC0", VA = "0x1DE0FC0", Slot = "8")]
			public void RemoveAt(int index)
			{
			}

			[Token(Token = "0x60013B6")]
			[Address(RVA = "0x1DE1000", Offset = "0x1DE1000", VA = "0x1DE1000", Slot = "17")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000291")]
		public enum Result
		{
			[Token(Token = "0x4000AAA")]
			Stepped,
			[Token(Token = "0x4000AAB")]
			NewSegment,
			[Token(Token = "0x4000AAC")]
			Ended
		}

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAA0", Offset = "0x10BBAA0")]
		private readonly IList<BezierPathSegment> <Segments>k__BackingField;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool closed;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private readonly bool needTangentsDuringEval;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float maxCordDeviationSq;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float maxTanAngleDevCosine;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly float stepSizeT;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int currentSegment;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float currentT;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float segmentLengthSoFar;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lengthSoFar;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 lastPointEval;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 currentTTangent;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BezierSegment currentBezSeg;

		[Token(Token = "0x170003D9")]
		public IList<BezierPathSegment> Segments
		{
			[Token(Token = "0x60013A0")]
			[Address(RVA = "0x313195C", Offset = "0x313195C", VA = "0x313195C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F8C", Offset = "0x10C4F8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DA")]
		public bool Closed
		{
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0x3131964", Offset = "0x3131964", VA = "0x3131964")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003DB")]
		public int CurrentSegment
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x313196C", Offset = "0x313196C", VA = "0x313196C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003DC")]
		public float CurrentT
		{
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x3131974", Offset = "0x3131974", VA = "0x3131974")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003DD")]
		public float LengthSoFar
		{
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0x313197C", Offset = "0x313197C", VA = "0x313197C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003DE")]
		public float SegmentLengthSoFar
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x3131984", Offset = "0x3131984", VA = "0x3131984")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003DF")]
		public bool Ended
		{
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0x3131880", Offset = "0x3131880", VA = "0x3131880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x3130CD8", Offset = "0x3130CD8", VA = "0x3130CD8")]
		public PathDistanceForwardIterator(IList<BezierPathSegment> pathSegments, bool closed, float maxCordDeviationSq, float maxTanAngleDevCosine, float stepSizeT)
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x3131160", Offset = "0x3131160", VA = "0x3131160")]
		private float PointToLineDistanceSq(Vector2 point, Vector2 lineStart, Vector2 lineEnd)
		{
			return default(float);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x3131270", Offset = "0x3131270", VA = "0x3131270")]
		public Result AdvanceBy(float units, out float unitsRemaining)
		{
			return default(Result);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x313198C", Offset = "0x313198C", VA = "0x313198C")]
		public Vector2 EvalCurrent()
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000292")]
	internal class PathPatternIterator
	{
		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[] pattern;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int currentSegment;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool solid;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float segmentLength;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float patternLength;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float patternOffset;

		[Token(Token = "0x170003E3")]
		public float SegmentLength
		{
			[Token(Token = "0x60013BB")]
			[Address(RVA = "0x3131D38", Offset = "0x3131D38", VA = "0x3131D38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003E4")]
		public bool IsSolid
		{
			[Token(Token = "0x60013BC")]
			[Address(RVA = "0x3131D40", Offset = "0x3131D40", VA = "0x3131D40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x3131A20", Offset = "0x3131A20", VA = "0x3131A20")]
		public PathPatternIterator(float[] pattern, float patternOffset = 0f)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x3131CA8", Offset = "0x3131CA8", VA = "0x3131CA8")]
		public void Advance()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x3131D08", Offset = "0x3131D08", VA = "0x3131D08")]
		public bool IsSolidAt(float unitsFromPathStart)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x3131B70", Offset = "0x3131B70", VA = "0x3131B70")]
		public bool IsSolidAt(float unitsFromPathStart, out int patternSegmentIndex, out float patternSegmentLength)
		{
			return default(bool);
		}
	}
}
namespace ToolBuddy.Pooling
{
	[Token(Token = "0x2000293")]
	public class ArrayPoolsProvider
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Type, object> arrayPools;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object lockObject;

		[Token(Token = "0x60013BD")]
		public static ArrayPool<T> GetPool<T>()
		{
			return null;
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x2005E4C", Offset = "0x2005E4C", VA = "0x2005E4C")]
		public ArrayPoolsProvider()
		{
		}
	}
}
namespace ToolBuddy.Pooling.Pools
{
	[Token(Token = "0x2000294")]
	public class ArrayPool<T>
	{
		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SubArray<T> emptySubArray;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly System.Random random;

		[Token(Token = "0x4000AB7")]
		private const int keysInitialCapacity = 200;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] poolKeys;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[][] poolValues;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int arraysCount;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private long elementsCount;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private long elementsCapacity;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAB0", Offset = "0x10BBAB0")]
		private bool <LogAllocations>k__BackingField;

		[Token(Token = "0x170003E5")]
		public long ElementsCapacity
		{
			[Token(Token = "0x60013C0")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60013C1")]
			set
			{
			}
		}

		[Token(Token = "0x170003E6")]
		public bool LogAllocations
		{
			[Token(Token = "0x60013C2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4F9C", Offset = "0x10C4F9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013C3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4FAC", Offset = "0x10C4FAC")]
			set
			{
			}
		}

		[Token(Token = "0x170003E7")]
		public ArrayPoolUsageData UsageData
		{
			[Token(Token = "0x60013C4")]
			get
			{
				return default(ArrayPoolUsageData);
			}
		}

		[Token(Token = "0x60013C5")]
		public ArrayPool(long elementsCapacity)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013C6")]
		public SubArray<T> Allocate(int minimalSize, bool clearArray = true)
		{
			return default(SubArray<T>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013C7")]
		public SubArray<T> AllocateExactSize(int exactSize, bool clearArray = true)
		{
			return default(SubArray<T>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013C8")]
		public void Free(SubArray<T> subArray)
		{
		}

		[Token(Token = "0x60013C9")]
		public void Free([NotNull] T[] array)
		{
		}

		[Token(Token = "0x60013CA")]
		public void Resize(ref SubArray<T> subArray, int newMinimalSize, bool clearNewSpace = true)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013CB")]
		public void ResizeAndClear(ref SubArray<T> subArray, int newMinimalSize)
		{
		}

		[Token(Token = "0x60013CC")]
		public void ResizeCopyless(ref SubArray<T> subArray, int newMinimalSize)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013CD")]
		public SubArray<T> Clone(T[] source)
		{
			return default(SubArray<T>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013CE")]
		public SubArray<T> Clone(SubArray<T> source)
		{
			return default(SubArray<T>);
		}

		[Token(Token = "0x60013CF")]
		private SubArray<T> Allocate(int size, bool exactSize, bool clearArray, out bool isArrayCleared)
		{
			return default(SubArray<T>);
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013D0")]
		private void ApplyCapacity(long capacity)
		{
		}

		[Token(Token = "0x60013D1")]
		private T[] RemoveElementAt(int elementIndex)
		{
			return null;
		}

		[Token(Token = "0x60013D2")]
		private static int BinarySearch(int[] array, int length, int value)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000295")]
	public readonly struct ArrayPoolUsageData
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAC0", Offset = "0x10BBAC0")]
		private readonly long <ElementsCount>k__BackingField;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAD0", Offset = "0x10BBAD0")]
		private readonly int <ArraysCount>k__BackingField;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAE0", Offset = "0x10BBAE0")]
		private readonly long <ElementsCapacity>k__BackingField;

		[Token(Token = "0x170003E8")]
		public long ElementsCount
		{
			[Token(Token = "0x60013D3")]
			[Address(RVA = "0x20055CC", Offset = "0x20055CC", VA = "0x20055CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4FBC", Offset = "0x10C4FBC")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170003E9")]
		public int ArraysCount
		{
			[Token(Token = "0x60013D4")]
			[Address(RVA = "0x20055D4", Offset = "0x20055D4", VA = "0x20055D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4FCC", Offset = "0x10C4FCC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003EA")]
		public long ElementsCapacity
		{
			[Token(Token = "0x60013D5")]
			[Address(RVA = "0x20055DC", Offset = "0x20055DC", VA = "0x20055DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4FDC", Offset = "0x10C4FDC")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x20055E4", Offset = "0x20055E4", VA = "0x20055E4")]
		public ArrayPoolUsageData(long elementsCount, int arraysCount, long elementsCapacity)
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x20055F4", Offset = "0x20055F4", VA = "0x20055F4")]
		public bool Equals(ArrayPoolUsageData other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x2005630", Offset = "0x2005630", VA = "0x2005630", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x20056D4", Offset = "0x20056D4", VA = "0x20056D4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x200573C", Offset = "0x200573C", VA = "0x200573C")]
		public static bool operator ==(ArrayPoolUsageData a, ArrayPoolUsageData b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x2005778", Offset = "0x2005778", VA = "0x2005778")]
		public static bool operator !=(ArrayPoolUsageData a, ArrayPoolUsageData b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x20057B4", Offset = "0x20057B4", VA = "0x20057B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace ToolBuddy.Pooling.Collections
{
	[Token(Token = "0x2000296")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A5744", Offset = "0x10A5744")]
	public readonly struct SubArray<T>
	{
		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly T[] Array;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int Count;

		[Token(Token = "0x170003EB")]
		public T Item
		{
			[Token(Token = "0x60013DD")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60013DE")]
			set
			{
			}
		}

		[Token(Token = "0x60013DF")]
		public SubArray([NotNull] T[] array)
		{
		}

		[Token(Token = "0x60013E0")]
		public SubArray(T[] array, int count)
		{
		}

		[Token(Token = "0x60013E1")]
		public T[] CopyToArray(ArrayPool<T> arrayPool)
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013E3")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E4")]
		public bool Equals(SubArray<T> obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E5")]
		public static bool operator ==(SubArray<T> a, SubArray<T> b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013E6")]
		public static bool operator !=(SubArray<T> a, SubArray<T> b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000297")]
	public struct SubArrayList<T>
	{
		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ArrayPool<T> typePool;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SubArray<T> subArray;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBAF0", Offset = "0x10BBAF0")]
		private int <Count>k__BackingField;

		[Token(Token = "0x170003EC")]
		public T[] Array
		{
			[Token(Token = "0x60013E7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003ED")]
		public int Count
		{
			[Token(Token = "0x60013E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C4FEC", Offset = "0x10C4FEC")]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x60013E9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5024", Offset = "0x10C5024")]
			private set
			{
			}
		}

		[Token(Token = "0x60013EA")]
		public SubArrayList(int initialCapacity, ArrayPool<T> typePool)
		{
		}

		[Token(Token = "0x60013EB")]
		public void Add(T element)
		{
		}

		[Token(Token = "0x60013EC")]
		public SubArray<T> ToSubArray()
		{
			return default(SubArray<T>);
		}

		[Token(Token = "0x60013ED")]
		public bool Equals(SubArrayList<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EE")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EF")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013F0")]
		public static bool operator ==(SubArrayList<T> a, SubArrayList<T> b)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F1")]
		public static bool operator !=(SubArrayList<T> a, SubArrayList<T> b)
		{
			return default(bool);
		}
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x2000298")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A5790", Offset = "0x10A5790")]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x200A004", Offset = "0x200A004", VA = "0x200A004")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A57A4", Offset = "0x10A57A4")]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x1CC2C3C", Offset = "0x1CC2C3C", VA = "0x1CC2C3C")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x200029A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A57B8", Offset = "0x10A57B8")]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x1CC2C44", Offset = "0x1CC2C44", VA = "0x1CC2C44")]
		public RelatingAttribute()
		{
		}
	}
}
namespace HexabodyVR.SampleScene
{
	[Token(Token = "0x200029B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A57CC", Offset = "0x10A57CC")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBB00", Offset = "0x10BBB00")]
		private Rigidbody <Rigidbody>k__BackingField;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Delay;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float TimeToMaxSpeed;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 _target;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _speed;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _timer;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _waiting;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _start;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _endTarget;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _elapsed;

		[Token(Token = "0x170003EE")]
		public Rigidbody Rigidbody
		{
			[Token(Token = "0x60013F5")]
			[Address(RVA = "0x312A738", Offset = "0x312A738", VA = "0x312A738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5034", Offset = "0x10C5034")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F6")]
			[Address(RVA = "0x312A740", Offset = "0x312A740", VA = "0x312A740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5044", Offset = "0x10C5044")]
			set
			{
			}
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x312A748", Offset = "0x312A748", VA = "0x312A748")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x312A7EC", Offset = "0x312A7EC", VA = "0x312A7EC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x312A9B4", Offset = "0x312A9B4", VA = "0x312A9B4")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A582C", Offset = "0x10A582C")]
	public class SpiderHands : MonoBehaviour
	{
		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Distance;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float PullSpeed;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask GrabLayer;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HexaXRInputs Controller;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Grabbing;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform Anchor;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Rigidbody Body;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Spring;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Damper;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float CrossHairMaxScale;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject Crosshair;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ConfigurableJoint Joint;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BasicGrabber BasicGrabber;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LineRenderer LineRenderer;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 _hitPoint;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _distance;

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x22A46AC", Offset = "0x22A46AC", VA = "0x22A46AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x22A4738", Offset = "0x22A4738", VA = "0x22A4738")]
		private void Start()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x22A4768", Offset = "0x22A4768", VA = "0x22A4768")]
		private void Update()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x22A47DC", Offset = "0x22A47DC", VA = "0x22A47DC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x22A4998", Offset = "0x22A4998", VA = "0x22A4998")]
		private void Aim()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x22A4E68", Offset = "0x22A4E68", VA = "0x22A4E68")]
		public SpiderHands()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A588C", Offset = "0x10A588C")]
	public class SpinningElevator : MonoBehaviour
	{
		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float AnglesPerSecond;

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x22A4E90", Offset = "0x22A4E90", VA = "0x22A4E90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x22A4EFC", Offset = "0x22A4EFC", VA = "0x22A4EFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x22A4FB0", Offset = "0x22A4FB0", VA = "0x22A4FB0")]
		public SpinningElevator()
		{
		}
	}
}
namespace HexabodyVR.PlayerController
{
	[Token(Token = "0x200029E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A58EC", Offset = "0x10A58EC")]
	public class BasicGrabber : MonoBehaviour
	{
		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Radius;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask GrabLayer;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HexaXRInputs Controller;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Grabbing;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform Anchor;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Collider[] _colliders;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SpiderHands SpiderHands;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBB10", Offset = "0x10BBB10")]
		private ConfigurableJoint <Joint>k__BackingField;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BBB20", Offset = "0x10BBB20")]
		private Rigidbody <GrabbedBody>k__BackingField;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent Grabbed;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent Released;

		[Token(Token = "0x170003EF")]
		public ConfigurableJoint Joint
		{
			[Token(Token = "0x6001403")]
			[Address(RVA = "0x200B940", Offset = "0x200B940", VA = "0x200B940")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5054", Offset = "0x10C5054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001404")]
			[Address(RVA = "0x200B948", Offset = "0x200B948", VA = "0x200B948")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5064", Offset = "0x10C5064")]
			private set
			{
			}
		}

		[Token(Token = "0x170003F0")]
		public Rigidbody GrabbedBody
		{
			[Token(Token = "0x6001405")]
			[Address(RVA = "0x200B950", Offset = "0x200B950", VA = "0x200B950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5074", Offset = "0x10C5074")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001406")]
			[Address(RVA = "0x200B958", Offset = "0x200B958", VA = "0x200B958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5084", Offset = "0x10C5084")]
			private set
			{
			}
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x200B960", Offset = "0x200B960", VA = "0x200B960")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x200B9BC", Offset = "0x200B9BC", VA = "0x200B9BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x200BE7C", Offset = "0x200BE7C", VA = "0x200BE7C")]
		public BasicGrabber()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x10A594C", Offset = "0x10A594C")]
	internal class CircularBuffer<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20002A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5984", Offset = "0x10A5984")]
		private sealed class <GetEnumerator>d__24 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CircularBuffer<T> <>4__this;

			[Token(Token = "0x4000AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ArraySegment<T>[] <>7__wrap1;

			[Token(Token = "0x4000AF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>7__wrap2;

			[Token(Token = "0x4000AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ArraySegment<T> <segment>5__4;

			[Token(Token = "0x4000AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__5;

			[Token(Token = "0x170003F6")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6001424")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x170003F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001426")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001421")]
			[DebuggerHidden]
			public <GetEnumerator>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6001422")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001423")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001425")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T[] _buffer;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _start;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _end;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x170003F1")]
		public int Capacity
		{
			[Token(Token = "0x600140C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003F2")]
		public bool IsFull
		{
			[Token(Token = "0x600140D")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003F3")]
		public bool IsEmpty
		{
			[Token(Token = "0x600140E")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003F4")]
		public int Size
		{
			[Token(Token = "0x600140F")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003F5")]
		public T Item
		{
			[Token(Token = "0x6001412")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001413")]
			set
			{
			}
		}

		[Token(Token = "0x600140A")]
		public CircularBuffer(int capacity)
		{
		}

		[Token(Token = "0x600140B")]
		public CircularBuffer(int capacity, T[] items)
		{
		}

		[Token(Token = "0x6001410")]
		public T Front()
		{
			return (T)null;
		}

		[Token(Token = "0x6001411")]
		public T Back()
		{
			return (T)null;
		}

		[Token(Token = "0x6001414")]
		public void Dequeue(T item)
		{
		}

		[Token(Token = "0x6001415")]
		public void Enqueue(T item)
		{
		}

		[Token(Token = "0x6001416")]
		public void PopBack()
		{
		}

		[Token(Token = "0x6001417")]
		public void PopFront()
		{
		}

		[Token(Token = "0x6001418")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6001419")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5094", Offset = "0x10C5094")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600141A")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600141B")]
		private void ThrowIfEmpty(string message = "Cannot access an empty buffer.")
		{
		}

		[Token(Token = "0x600141C")]
		private void Increment(ref int index)
		{
		}

		[Token(Token = "0x600141D")]
		private void Decrement(ref int index)
		{
		}

		[Token(Token = "0x600141E")]
		private int InternalIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600141F")]
		private ArraySegment<T> ArrayOne()
		{
			return default(ArraySegment<T>);
		}

		[Token(Token = "0x6001420")]
		private ArraySegment<T> ArrayTwo()
		{
			return default(ArraySegment<T>);
		}
	}
	[Token(Token = "0x20002A1")]
	public class HexaBodyInputWrapper : MonoBehaviour
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HexaXRInputs LeftController;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HexaXRInputs RightController;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CrouchThreshold;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float StandThreshold;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HexaBodyPlayerInputs PlayerInputs;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool EnableDebugCalibrationButton;

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x2F300E0", Offset = "0x2F300E0", VA = "0x2F300E0")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x2F303C4", Offset = "0x2F303C4", VA = "0x2F303C4", Slot = "4")]
		protected virtual bool GetSprinting()
		{
			return default(bool);
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x2F302B4", Offset = "0x2F302B4", VA = "0x2F302B4")]
		protected bool GetCrouch()
		{
			return default(bool);
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x2F30304", Offset = "0x2F30304", VA = "0x2F30304")]
		protected bool GetStand()
		{
			return default(bool);
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x2F30350", Offset = "0x2F30350", VA = "0x2F30350")]
		protected bool GetJump()
		{
			return default(bool);
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x2F30430", Offset = "0x2F30430", VA = "0x2F30430")]
		public HexaBodyInputWrapper()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5994", Offset = "0x10A5994")]
	public class HexaBodyPlayer : MonoBehaviour
	{
		[Token(Token = "0x20002A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A59F4", Offset = "0x10A59F4")]
		private sealed class <Jumping>d__142 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer <>4__this;

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <crouchPercent>5__2;

			[Token(Token = "0x17000400")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001457")]
				[Address(RVA = "0x1DDB3E0", Offset = "0x1DDB3E0", VA = "0x1DDB3E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000401")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001459")]
				[Address(RVA = "0x1DDB428", Offset = "0x1DDB428", VA = "0x1DDB428", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001454")]
			[Address(RVA = "0x1DDB120", Offset = "0x1DDB120", VA = "0x1DDB120")]
			[DebuggerHidden]
			public <Jumping>d__142(int <>1__state)
			{
			}

			[Token(Token = "0x6001455")]
			[Address(RVA = "0x1DDB14C", Offset = "0x1DDB14C", VA = "0x1DDB14C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001456")]
			[Address(RVA = "0x1DDB150", Offset = "0x1DDB150", VA = "0x1DDB150", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001458")]
			[Address(RVA = "0x1DDB3E8", Offset = "0x1DDB3E8", VA = "0x1DDB3E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5A04", Offset = "0x10A5A04")]
		private sealed class <JumpRetract>d__143 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer <>4__this;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float crouchPercent;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <start>5__2;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <elapsed>5__3;

			[Token(Token = "0x4000B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <time>5__4;

			[Token(Token = "0x4000B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <jumped>5__5;

			[Token(Token = "0x17000402")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600145D")]
				[Address(RVA = "0x1DDB0D0", Offset = "0x1DDB0D0", VA = "0x1DDB0D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000403")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600145F")]
				[Address(RVA = "0x1DDB118", Offset = "0x1DDB118", VA = "0x1DDB118", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600145A")]
			[Address(RVA = "0x1DDAAB8", Offset = "0x1DDAAB8", VA = "0x1DDAAB8")]
			[DebuggerHidden]
			public <JumpRetract>d__143(int <>1__state)
			{
			}

			[Token(Token = "0x600145B")]
			[Address(RVA = "0x1DDAAE4", Offset = "0x1DDAAE4", VA = "0x1DDAAE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600145C")]
			[Address(RVA = "0x1DDAAE8", Offset = "0x1DDAAE8", VA = "0x1DDAAE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600145E")]
			[Address(RVA = "0x1DDB0D8", Offset = "0x1DDB0D8", VA = "0x1DDB0D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BBB30", Offset = "0x10BBB30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBB30", Offset = "0x10BBB30")]
		public float Acceleration;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBB90", Offset = "0x10BBB90")]
		public float Deacelleration;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBBC8", Offset = "0x10BBBC8")]
		public float RunAcceleration;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBC00", Offset = "0x10BBC00")]
		public ForceMode RollMode;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBC38", Offset = "0x10BBC38")]
		public float WalkSpeed;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBC70", Offset = "0x10BBC70")]
		public float RunSpeed;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBCA8", Offset = "0x10BBCA8")]
		public AnimationCurve CrouchSpeedCurve;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBCE0", Offset = "0x10BBCE0")]
		public AnimationCurve CrouchAccelerationCurve;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBD18", Offset = "0x10BBD18")]
		public AnimationCurve SlopeCurve;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBD50", Offset = "0x10BBD50")]
		public float CameraMoveThreshold;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBD88", Offset = "0x10BBD88")]
		public float SprintDoubleClickThreshold;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BBDC0", Offset = "0x10BBDC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBDC0", Offset = "0x10BBDC0")]
		public float PlayerHeight;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBE20", Offset = "0x10BBE20")]
		public float LegPercent;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBE58", Offset = "0x10BBE58")]
		public float NeckFactor;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBE90", Offset = "0x10BBE90")]
		public float BumperOffset;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBEC8", Offset = "0x10BBEC8")]
		public SitStand SitStanding;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BBF00", Offset = "0x10BBF00")]
		public bool SmoothTurn;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float SmoothTurnThreshold;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BBF38", Offset = "0x10BBF38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBF38", Offset = "0x10BBF38")]
		public float SlopeAngle;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBF98", Offset = "0x10BBF98")]
		public float GroundedRayLength;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LayerMask GroundedLayerMask;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BBFD0", Offset = "0x10BBFD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BBFD0", Offset = "0x10BBFD0")]
		public float StandingForce;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC030", Offset = "0x10BC030")]
		public float StandingDamper;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC068", Offset = "0x10BC068")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC068", Offset = "0x10BC068")]
		public float JumpForce;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC0C8", Offset = "0x10BC0C8")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC100", Offset = "0x10BC100")]
		public AnimationCurve JumpRetractCurve;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC138", Offset = "0x10BC138")]
		public float RetractForce;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC170", Offset = "0x10BC170")]
		public float LandingForce;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC1A8", Offset = "0x10BC1A8")]
		public float LandingDamper;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC1E0", Offset = "0x10BC1E0")]
		public float RetractSpeed;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC218", Offset = "0x10BC218")]
		public float LandingSpeed;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC250", Offset = "0x10BC250")]
		public float BallJumpMass;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC288", Offset = "0x10BC288")]
		public float JumpTimeout;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC2C0", Offset = "0x10BC2C0")]
		public float LevelOneHeight;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float LevelTwoHeight;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float LevelThreeHeight;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC2F8", Offset = "0x10BC2F8")]
		public float CrouchThreshold;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC330", Offset = "0x10BC330")]
		public float CrouchSpeed;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC368", Offset = "0x10BC368")]
		public float ContinueCrouchThreshold;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC3A0", Offset = "0x10BC3A0")]
		public HexaCameraRig CameraRig;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform Camera;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Transform CameraScale;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform Neck;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform UpperBody;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform NeckAnchor;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform Bumper;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform MantleCheck;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC3D8", Offset = "0x10BC3D8")]
		public Rigidbody LocoBall;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Rigidbody Torso;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Rigidbody Knee;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Rigidbody HeadRigidbody;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC410", Offset = "0x10BC410")]
		public CapsuleCollider LegsCapsule;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public CapsuleCollider CapsuleTorso;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public SphereCollider LocoSphere;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public SphereCollider BumperSphere;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public CapsuleCollider NeckCapsule;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC448", Offset = "0x10BC448")]
		public ConfigurableJoint JointLegTorso;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public ConfigurableJoint JointLegBall;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public ConfigurableJoint JointHead;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC480", Offset = "0x10BC480")]
		public Transform LeftController;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform RightController;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC4B8", Offset = "0x10BC4B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC4B8", Offset = "0x10BC4B8")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x10BC4B8", Offset = "0x10BC4B8")]
		public float CalibratedHeight;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float SittingOffset;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float FloorOffsetAdjustment;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float VirtualWaistHeight;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public float WaistHeight;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public float WaistToBallHeight;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float CrouchOffset;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float TargetCrouchOffset;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float TargetLegHeight;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float LegHeight;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float FakeCrouchAmount;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float RealCrouchOffset;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC52C", Offset = "0x10BC52C")]
		public float PelvisHeightOffset;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float RealCrouchHeightOffset;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float NeckBendOffset;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float MinCameraHeightOffset;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public float MaxCameraHeightOffset;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float HeadOffset;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float MinCameraHeight;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public Vector3 CameraRigPosition;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Vector3 PreviousCameraRigPosition;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		private float _jumpSpring;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		private float _groundAngle;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[SerializeField]
		private CrouchLevel _crouchLevel;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		private float _jumpTime;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[SerializeField]
		private LegStage _legStage;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private Vector3 _lastCameraDirection;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[SerializeField]
		private Vector3 _previousPosition;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		private float _actualSpeed;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private float _originalLocoRadius;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private float _originalBumperRadius;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private float _ballMass;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private bool _jump;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float _crouchTimer;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private float _crouchPercent;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private float _scale;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Vector3 _neckDirection;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private float _timeSinceLastPress;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private bool _awaitingSecondClick;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Coroutine _retractRoutine;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Coroutine _jumpRoutine;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC5E4", Offset = "0x10BC5E4")]
		private bool <Sprinting>k__BackingField;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC5F4", Offset = "0x10BC5F4")]
		private Quaternion <GroundRotation>k__BackingField;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC604", Offset = "0x10BC604")]
		private HexaBodyPlayerInputs <Inputs>k__BackingField;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC614", Offset = "0x10BC614")]
		private Vector3 <Forward>k__BackingField;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC624", Offset = "0x10BC624")]
		private Vector3 <Right>k__BackingField;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BC634", Offset = "0x10BC634")]
		private bool <IsGrounded>k__BackingField;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private Vector3 _previousAnchor;

		[Token(Token = "0x170003F8")]
		public bool Sprinting
		{
			[Token(Token = "0x600142D")]
			[Address(RVA = "0x2F30CA4", Offset = "0x2F30CA4", VA = "0x2F30CA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5144", Offset = "0x10C5144")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600142E")]
			[Address(RVA = "0x2F30CAC", Offset = "0x2F30CAC", VA = "0x2F30CAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5154", Offset = "0x10C5154")]
			set
			{
			}
		}

		[Token(Token = "0x170003F9")]
		public Quaternion GroundRotation
		{
			[Token(Token = "0x600142F")]
			[Address(RVA = "0x2F30CB8", Offset = "0x2F30CB8", VA = "0x2F30CB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5164", Offset = "0x10C5164")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001430")]
			[Address(RVA = "0x2F30CCC", Offset = "0x2F30CCC", VA = "0x2F30CCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5174", Offset = "0x10C5174")]
			private set
			{
			}
		}

		[Token(Token = "0x170003FA")]
		public HexaBodyPlayerInputs Inputs
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0x2F30CE0", Offset = "0x2F30CE0", VA = "0x2F30CE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5184", Offset = "0x10C5184")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001432")]
			[Address(RVA = "0x2F30CE8", Offset = "0x2F30CE8", VA = "0x2F30CE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5194", Offset = "0x10C5194")]
			private set
			{
			}
		}

		[Token(Token = "0x170003FB")]
		public Vector3 Forward
		{
			[Token(Token = "0x6001433")]
			[Address(RVA = "0x2F30CF8", Offset = "0x2F30CF8", VA = "0x2F30CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51A4", Offset = "0x10C51A4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001434")]
			[Address(RVA = "0x2F30D08", Offset = "0x2F30D08", VA = "0x2F30D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51B4", Offset = "0x10C51B4")]
			private set
			{
			}
		}

		[Token(Token = "0x170003FC")]
		public Vector3 Right
		{
			[Token(Token = "0x6001435")]
			[Address(RVA = "0x2F30D18", Offset = "0x2F30D18", VA = "0x2F30D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51C4", Offset = "0x10C51C4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001436")]
			[Address(RVA = "0x2F30D28", Offset = "0x2F30D28", VA = "0x2F30D28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51D4", Offset = "0x10C51D4")]
			private set
			{
			}
		}

		[Token(Token = "0x170003FD")]
		public bool IsGrounded
		{
			[Token(Token = "0x6001437")]
			[Address(RVA = "0x2F30D38", Offset = "0x2F30D38", VA = "0x2F30D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51E4", Offset = "0x10C51E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001438")]
			[Address(RVA = "0x2F30D40", Offset = "0x2F30D40", VA = "0x2F30D40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C51F4", Offset = "0x10C51F4")]
			set
			{
			}
		}

		[Token(Token = "0x170003FE")]
		public float CameraHeight
		{
			[Token(Token = "0x6001439")]
			[Address(RVA = "0x2F30D4C", Offset = "0x2F30D4C", VA = "0x2F30D4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003FF")]
		public float EyeLevel
		{
			[Token(Token = "0x600143A")]
			[Address(RVA = "0x2F30D9C", Offset = "0x2F30D9C", VA = "0x2F30D9C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x2F30DAC", Offset = "0x2F30DAC", VA = "0x2F30DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x2F30E58", Offset = "0x2F30E58", VA = "0x2F30E58")]
		public void CalibrateHeight(float height)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x2F30EB0", Offset = "0x2F30EB0", VA = "0x2F30EB0")]
		[SerializeField]
		private void Update()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x2F311E0", Offset = "0x2F311E0", VA = "0x2F311E0")]
		private void UpdateCrouch()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x2F317AC", Offset = "0x2F317AC", VA = "0x2F317AC")]
		private void ForceCrouchHeight(CrouchLevel level)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x2F31704", Offset = "0x2F31704", VA = "0x2F31704")]
		private void SetLegHeight(float offset)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x2F316A0", Offset = "0x2F316A0", VA = "0x2F316A0")]
		private void SetCrouchLevel(CrouchLevel level)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x2F314F0", Offset = "0x2F314F0", VA = "0x2F314F0")]
		public void ApplyCameraOffsets()
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x2F317D4", Offset = "0x2F317D4", VA = "0x2F317D4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x2F31DC8", Offset = "0x2F31DC8", VA = "0x2F31DC8")]
		private void Jump()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x2F321E0", Offset = "0x2F321E0", VA = "0x2F321E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5214", Offset = "0x10C5214")]
		private IEnumerator Jumping()
		{
			return null;
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x2F32258", Offset = "0x2F32258", VA = "0x2F32258")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5274", Offset = "0x10C5274")]
		private IEnumerator JumpRetract(float crouchPercent)
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x2F322E0", Offset = "0x2F322E0", VA = "0x2F322E0")]
		private void ScaleBalls(bool shrink)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x2F3160C", Offset = "0x2F3160C", VA = "0x2F3160C")]
		private void CheckInputs()
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x2F32378", Offset = "0x2F32378", VA = "0x2F32378")]
		private bool HandleHMDMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x2F32764", Offset = "0x2F32764", VA = "0x2F32764")]
		private void HandleHMDRotation()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x2F31E28", Offset = "0x2F31E28", VA = "0x2F31E28")]
		private void Move()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x2F3293C", Offset = "0x2F3293C", VA = "0x2F3293C")]
		private void Stop()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x2F328FC", Offset = "0x2F328FC", VA = "0x2F328FC")]
		private void ZeroXZ(Rigidbody rigid)
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x2F31C04", Offset = "0x2F31C04", VA = "0x2F31C04")]
		private void CheckGrounded()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x2F32874", Offset = "0x2F32874", VA = "0x2F32874")]
		private Vector2 CheckWASD()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x2F32994", Offset = "0x2F32994", VA = "0x2F32994", Slot = "4")]
		protected virtual void CheckSprinting()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x2F32A84", Offset = "0x2F32A84", VA = "0x2F32A84")]
		public void SetSitStandMode(bool sitting)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x2F311A8", Offset = "0x2F311A8", VA = "0x2F311A8")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x2F32AA4", Offset = "0x2F32AA4", VA = "0x2F32AA4")]
		public HexaBodyPlayer()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5A14", Offset = "0x10A5A14")]
	public class HexaBodyPlayer2 : MonoBehaviour
	{
		[Token(Token = "0x20002A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5A74", Offset = "0x10A5A74")]
		private sealed class <SnapTurn>d__152 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer2 <>4__this;

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float sign;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion <finish>5__2;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsed>5__3;

			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <time>5__4;

			[Token(Token = "0x1700040D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001491")]
				[Address(RVA = "0x1DDBF10", Offset = "0x1DDBF10", VA = "0x1DDBF10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001493")]
				[Address(RVA = "0x1DDBF58", Offset = "0x1DDBF58", VA = "0x1DDBF58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600148E")]
			[Address(RVA = "0x1DDBCF8", Offset = "0x1DDBCF8", VA = "0x1DDBCF8")]
			[DebuggerHidden]
			public <SnapTurn>d__152(int <>1__state)
			{
			}

			[Token(Token = "0x600148F")]
			[Address(RVA = "0x1DDBD24", Offset = "0x1DDBD24", VA = "0x1DDBD24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001490")]
			[Address(RVA = "0x1DDBD28", Offset = "0x1DDBD28", VA = "0x1DDBD28", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001492")]
			[Address(RVA = "0x1DDBF18", Offset = "0x1DDBF18", VA = "0x1DDBF18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5A84", Offset = "0x10A5A84")]
		private sealed class <Jumping>d__156 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer2 <>4__this;

			[Token(Token = "0x1700040F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001497")]
				[Address(RVA = "0x1DDBCA8", Offset = "0x1DDBCA8", VA = "0x1DDBCA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000410")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001499")]
				[Address(RVA = "0x1DDBCF0", Offset = "0x1DDBCF0", VA = "0x1DDBCF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001494")]
			[Address(RVA = "0x1DDB9F0", Offset = "0x1DDB9F0", VA = "0x1DDB9F0")]
			[DebuggerHidden]
			public <Jumping>d__156(int <>1__state)
			{
			}

			[Token(Token = "0x6001495")]
			[Address(RVA = "0x1DDBA1C", Offset = "0x1DDBA1C", VA = "0x1DDBA1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001496")]
			[Address(RVA = "0x1DDBA20", Offset = "0x1DDBA20", VA = "0x1DDBA20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0x1DDBCB0", Offset = "0x1DDBCB0", VA = "0x1DDBCB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5A94", Offset = "0x10A5A94")]
		private sealed class <JumpRetract>d__158 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer2 <>4__this;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x4000BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <start>5__3;

			[Token(Token = "0x4000BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <target>5__4;

			[Token(Token = "0x4000BFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <elapsed>5__5;

			[Token(Token = "0x4000C00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <velocity>5__6;

			[Token(Token = "0x4000C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <jumped>5__7;

			[Token(Token = "0x17000411")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600149D")]
				[Address(RVA = "0x1DDB9A0", Offset = "0x1DDB9A0", VA = "0x1DDB9A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000412")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600149F")]
				[Address(RVA = "0x1DDB9E8", Offset = "0x1DDB9E8", VA = "0x1DDB9E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600149A")]
			[Address(RVA = "0x1DDB430", Offset = "0x1DDB430", VA = "0x1DDB430")]
			[DebuggerHidden]
			public <JumpRetract>d__158(int <>1__state)
			{
			}

			[Token(Token = "0x600149B")]
			[Address(RVA = "0x1DDB45C", Offset = "0x1DDB45C", VA = "0x1DDB45C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600149C")]
			[Address(RVA = "0x1DDB460", Offset = "0x1DDB460", VA = "0x1DDB460", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600149E")]
			[Address(RVA = "0x1DDB9A8", Offset = "0x1DDB9A8", VA = "0x1DDB9A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC644", Offset = "0x10BC644")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC644", Offset = "0x10BC644")]
		public float AirAcceleration;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC6A4", Offset = "0x10BC6A4")]
		public float Acceleration;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC6DC", Offset = "0x10BC6DC")]
		public float Deacelleration;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC714", Offset = "0x10BC714")]
		public float RunAcceleration;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC74C", Offset = "0x10BC74C")]
		public float WalkSpeed;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC784", Offset = "0x10BC784")]
		public float RunSpeed;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC7BC", Offset = "0x10BC7BC")]
		public AnimationCurve CrouchSpeedCurve;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC7F4", Offset = "0x10BC7F4")]
		public AnimationCurve CrouchAccelerationCurve;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC82C", Offset = "0x10BC82C")]
		public AnimationCurve SlopeCurve;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC864", Offset = "0x10BC864")]
		public AnimationCurve SlopeSpeedCurve;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC89C", Offset = "0x10BC89C")]
		public float CameraMoveThreshold;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC8D4", Offset = "0x10BC8D4")]
		public float SprintDoubleClickThreshold;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BC90C", Offset = "0x10BC90C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC90C", Offset = "0x10BC90C")]
		public float PlayerHeight;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC96C", Offset = "0x10BC96C")]
		public float LegPercent;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC9A4", Offset = "0x10BC9A4")]
		public float NeckFactor;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BC9DC", Offset = "0x10BC9DC")]
		public float BumperOffset;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCA14", Offset = "0x10BCA14")]
		public SitStand SitStanding;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCA4C", Offset = "0x10BCA4C")]
		public float CameraCeilingOffset;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCA84", Offset = "0x10BCA84")]
		public bool SmoothTurn;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float SmoothTurnThreshold;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float SnapTurnSpeed;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float SnapAmount;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCABC", Offset = "0x10BCABC")]
		public float SnapThreshold;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCAF4", Offset = "0x10BCAF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCAF4", Offset = "0x10BCAF4")]
		public float SlopeAngle;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCB54", Offset = "0x10BCB54")]
		public float GroundedRayLength;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public LayerMask GroundedLayerMask;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCB8C", Offset = "0x10BCB8C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCB8C", Offset = "0x10BCB8C")]
		public float StandingForce;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCBEC", Offset = "0x10BCBEC")]
		public float StandingDamper;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float StandingMaxForce;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCC24", Offset = "0x10BCC24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCC24", Offset = "0x10BCC24")]
		public float JumpForce;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCC84", Offset = "0x10BCC84")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCCBC", Offset = "0x10BCCBC")]
		public float BallJumpMass;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCCF4", Offset = "0x10BCCF4")]
		public float JumpTimeout;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public CrouchLevel RetractLevel;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCD2C", Offset = "0x10BCD2C")]
		public float LevelOneHeight;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float LevelTwoHeight;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float LevelThreeHeight;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCD64", Offset = "0x10BCD64")]
		public float CrouchThreshold;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCD9C", Offset = "0x10BCD9C")]
		public float CrouchSpeed;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BCDD4", Offset = "0x10BCDD4")]
		public float ContinueCrouchThreshold;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float JumpCrouchSpeed;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCE0C", Offset = "0x10BCE0C")]
		public HexaCameraRig CameraRig;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Transform Camera;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform NeckPivot;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform CameraScale;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform Neck;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform UpperBody;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform NeckAnchor;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Transform Bumper;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Transform MantleCheck;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCE44", Offset = "0x10BCE44")]
		public Rigidbody LocoBall;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Rigidbody Torso;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Rigidbody Knee;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Rigidbody HeadRigidbody;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCE7C", Offset = "0x10BCE7C")]
		public CapsuleCollider LegsCapsule;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public CapsuleCollider CapsuleTorso;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public SphereCollider LocoSphere;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public SphereCollider BumperSphere;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public CapsuleCollider NeckCapsule;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCEB4", Offset = "0x10BCEB4")]
		public ConfigurableJoint JointLegTorso;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public ConfigurableJoint JointLegBall;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public ConfigurableJoint JointHead;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCEEC", Offset = "0x10BCEEC")]
		public Transform LeftController;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Transform RightController;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCF24", Offset = "0x10BCF24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCF24", Offset = "0x10BCF24")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x10BCF24", Offset = "0x10BCF24")]
		public float CalibratedHeight;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public float SittingOffset;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float FloorOffsetAdjustment;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float VirtualWaistHeight;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float WaistHeight;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float WaistToBallHeight;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float CrouchOffset;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float TargetCrouchOffset;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float LegHeight;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float FakeCrouchAmount;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float RealCrouchOffset;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float NeckBendOffset;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCF98", Offset = "0x10BCF98")]
		public float PelvisHeightOffset;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public float RealCrouchHeightOffset;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float MinCameraHeightOffset;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float MaxCameraHeightOffset;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public float HeadOffset;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float MinCameraHeight;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Vector3 CameraRigPosition;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public Vector3 PreviousCameraRigPosition;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BCFD0", Offset = "0x10BCFD0")]
		private float _jumpForce;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[SerializeField]
		private float _groundAngle;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private CrouchLevel _crouchLevel;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[SerializeField]
		private float _jumpTime;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[SerializeField]
		private LegStage _legStage;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[SerializeField]
		private float _actualSpeed;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		private float _crouchPercent;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD07C", Offset = "0x10BD07C")]
		private float _verticalSpeed;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		private float _locoAngularVelocity;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[SerializeField]
		private float _targetAngularVelocity;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[SerializeField]
		private float _modifiedTargetSpeed;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		[SerializeField]
		private float _modifiedTargetAcceleration;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float _originalLocoRadius;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float _originalBumperRadius;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private float _ballMass;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private float _kneeMass;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private bool _jump;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float _crouchTimer;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private float _scale;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private float _timeSinceLastPress;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private bool _awaitingSecondClick;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private Vector3 _previousCamera;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Vector3 _crouchVelocity;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private Vector3 _jumpVelocity;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD108", Offset = "0x10BD108")]
		private bool <Sprinting>k__BackingField;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD118", Offset = "0x10BD118")]
		private Quaternion <GroundRotation>k__BackingField;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD128", Offset = "0x10BD128")]
		private HexaBodyPlayerInputs <Inputs>k__BackingField;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD138", Offset = "0x10BD138")]
		private Vector3 <Forward>k__BackingField;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD148", Offset = "0x10BD148")]
		private Vector3 <Right>k__BackingField;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BD158", Offset = "0x10BD158")]
		private bool <IsGrounded>k__BackingField;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private float _previousTurnAxis;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private bool _turning;

		[Token(Token = "0x17000404")]
		public bool Sprinting
		{
			[Token(Token = "0x6001460")]
			[Address(RVA = "0x2F32B74", Offset = "0x2F32B74", VA = "0x2F32B74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5374", Offset = "0x10C5374")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001461")]
			[Address(RVA = "0x2F32B7C", Offset = "0x2F32B7C", VA = "0x2F32B7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5384", Offset = "0x10C5384")]
			set
			{
			}
		}

		[Token(Token = "0x17000405")]
		public Quaternion GroundRotation
		{
			[Token(Token = "0x6001462")]
			[Address(RVA = "0x2F32B88", Offset = "0x2F32B88", VA = "0x2F32B88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5394", Offset = "0x10C5394")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001463")]
			[Address(RVA = "0x2F32B9C", Offset = "0x2F32B9C", VA = "0x2F32B9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53A4", Offset = "0x10C53A4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000406")]
		public HexaBodyPlayerInputs Inputs
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x2F32BB0", Offset = "0x2F32BB0", VA = "0x2F32BB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53B4", Offset = "0x10C53B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001465")]
			[Address(RVA = "0x2F32BB8", Offset = "0x2F32BB8", VA = "0x2F32BB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53C4", Offset = "0x10C53C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000407")]
		public Vector3 Forward
		{
			[Token(Token = "0x6001466")]
			[Address(RVA = "0x2F32BC8", Offset = "0x2F32BC8", VA = "0x2F32BC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53D4", Offset = "0x10C53D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001467")]
			[Address(RVA = "0x2F32BD8", Offset = "0x2F32BD8", VA = "0x2F32BD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53E4", Offset = "0x10C53E4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000408")]
		public Vector3 Right
		{
			[Token(Token = "0x6001468")]
			[Address(RVA = "0x2F32BE8", Offset = "0x2F32BE8", VA = "0x2F32BE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C53F4", Offset = "0x10C53F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001469")]
			[Address(RVA = "0x2F32BF8", Offset = "0x2F32BF8", VA = "0x2F32BF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5404", Offset = "0x10C5404")]
			private set
			{
			}
		}

		[Token(Token = "0x17000409")]
		public bool IsGrounded
		{
			[Token(Token = "0x600146A")]
			[Address(RVA = "0x2F32C08", Offset = "0x2F32C08", VA = "0x2F32C08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5414", Offset = "0x10C5414")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600146B")]
			[Address(RVA = "0x2F32C10", Offset = "0x2F32C10", VA = "0x2F32C10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5424", Offset = "0x10C5424")]
			set
			{
			}
		}

		[Token(Token = "0x1700040A")]
		public float CameraHeight
		{
			[Token(Token = "0x600146C")]
			[Address(RVA = "0x2F32C1C", Offset = "0x2F32C1C", VA = "0x2F32C1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700040B")]
		public float EyeLevel
		{
			[Token(Token = "0x600146D")]
			[Address(RVA = "0x2F32C6C", Offset = "0x2F32C6C", VA = "0x2F32C6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700040C")]
		private float Mass
		{
			[Token(Token = "0x600147C")]
			[Address(RVA = "0x2F342E8", Offset = "0x2F342E8", VA = "0x2F342E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x2F32C74", Offset = "0x2F32C74", VA = "0x2F32C74")]
		private void Start()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x2F32D38", Offset = "0x2F32D38", VA = "0x2F32D38")]
		public void CalibrateHeight(float height)
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x2F32D90", Offset = "0x2F32D90", VA = "0x2F32D90")]
		[SerializeField]
		private void Update()
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x2F330B4", Offset = "0x2F330B4", VA = "0x2F330B4")]
		private void UpdateCrouch()
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x2F33584", Offset = "0x2F33584", VA = "0x2F33584")]
		private void ForceCrouchHeight(CrouchLevel level)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x2F334A0", Offset = "0x2F334A0", VA = "0x2F334A0")]
		private void SetLegHeight(float offset)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x2F33478", Offset = "0x2F33478", VA = "0x2F33478")]
		private void SetCrouchLevel(CrouchLevel level)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x2F335B0", Offset = "0x2F335B0", VA = "0x2F335B0")]
		private float GetCrouchOffset(CrouchLevel level)
		{
			return default(float);
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x2F3330C", Offset = "0x2F3330C", VA = "0x2F3330C")]
		public void ApplyCameraOffsets()
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x2F33608", Offset = "0x2F33608", VA = "0x2F33608")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x2F340F8", Offset = "0x2F340F8", VA = "0x2F340F8")]
		private void UpdateHead()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x2F336A4", Offset = "0x2F336A4", VA = "0x2F336A4")]
		private void UpdateLegs()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x2F33F98", Offset = "0x2F33F98", VA = "0x2F33F98")]
		private void Turn()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x2F34260", Offset = "0x2F34260", VA = "0x2F34260")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5444", Offset = "0x10C5444")]
		private IEnumerator SnapTurn(float sign)
		{
			return null;
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x2F33B58", Offset = "0x2F33B58", VA = "0x2F33B58")]
		private void Jump()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x2F34378", Offset = "0x2F34378", VA = "0x2F34378")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C54A4", Offset = "0x10C54A4")]
		private IEnumerator Jumping()
		{
			return null;
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x2F343F0", Offset = "0x2F343F0", VA = "0x2F343F0")]
		private void ResetLegs()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x2F34434", Offset = "0x2F34434", VA = "0x2F34434")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5504", Offset = "0x10C5504")]
		private IEnumerator JumpRetract()
		{
			return null;
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x2F344AC", Offset = "0x2F344AC", VA = "0x2F344AC")]
		private void ScaleBalls(bool shrink)
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x2F333F4", Offset = "0x2F333F4", VA = "0x2F333F4")]
		private void CheckInputs()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x2F34544", Offset = "0x2F34544", VA = "0x2F34544")]
		private bool HandleHMDMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x2F347BC", Offset = "0x2F347BC", VA = "0x2F347BC")]
		private void HandleHMDRotation()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x2F348CC", Offset = "0x2F348CC", VA = "0x2F348CC")]
		private void AirMove(Vector3 direction)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x2F34950", Offset = "0x2F34950", VA = "0x2F34950")]
		private void AirAccelerate(Rigidbody rb, Vector3 direction)
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x2F33BA8", Offset = "0x2F33BA8", VA = "0x2F33BA8")]
		private void Move()
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0x2F33994", Offset = "0x2F33994", VA = "0x2F33994")]
		private void CheckGrounded()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x2F349EC", Offset = "0x2F349EC", VA = "0x2F349EC")]
		private Vector2 CheckWASD()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x2F34A74", Offset = "0x2F34A74", VA = "0x2F34A74", Slot = "4")]
		protected virtual void CheckSprinting()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x2F34B64", Offset = "0x2F34B64", VA = "0x2F34B64")]
		public void SetSitStandMode(bool sitting)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x2F3307C", Offset = "0x2F3307C", VA = "0x2F3307C")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x2F34B84", Offset = "0x2F34B84", VA = "0x2F34B84")]
		public HexaBodyPlayer2()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5AA4", Offset = "0x10A5AA4")]
	public class HexaBodyPlayer3 : MonoBehaviour
	{
		[Token(Token = "0x20002AA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5B04", Offset = "0x10A5B04")]
		private sealed class <CalibrateHeightOnStartRoutine>d__161 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer3 <>4__this;

			[Token(Token = "0x1700041C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014DF")]
				[Address(RVA = "0x1DDC518", Offset = "0x1DDC518", VA = "0x1DDC518", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700041D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014E1")]
				[Address(RVA = "0x1DDC560", Offset = "0x1DDC560", VA = "0x1DDC560", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014DC")]
			[Address(RVA = "0x1DDC358", Offset = "0x1DDC358", VA = "0x1DDC358")]
			[DebuggerHidden]
			public <CalibrateHeightOnStartRoutine>d__161(int <>1__state)
			{
			}

			[Token(Token = "0x60014DD")]
			[Address(RVA = "0x1DDC384", Offset = "0x1DDC384", VA = "0x1DDC384", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014DE")]
			[Address(RVA = "0x1DDC388", Offset = "0x1DDC388", VA = "0x1DDC388", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014E0")]
			[Address(RVA = "0x1DDC520", Offset = "0x1DDC520", VA = "0x1DDC520", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5B14", Offset = "0x10A5B14")]
		private sealed class <SnapTurn>d__181 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer3 <>4__this;

			[Token(Token = "0x4000C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float sign;

			[Token(Token = "0x4000C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion <finish>5__2;

			[Token(Token = "0x4000C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsed>5__3;

			[Token(Token = "0x4000C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <time>5__4;

			[Token(Token = "0x1700041E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014E5")]
				[Address(RVA = "0x1DDD038", Offset = "0x1DDD038", VA = "0x1DDD038", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700041F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014E7")]
				[Address(RVA = "0x1DDD080", Offset = "0x1DDD080", VA = "0x1DDD080", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014E2")]
			[Address(RVA = "0x1DDCE20", Offset = "0x1DDCE20", VA = "0x1DDCE20")]
			[DebuggerHidden]
			public <SnapTurn>d__181(int <>1__state)
			{
			}

			[Token(Token = "0x60014E3")]
			[Address(RVA = "0x1DDCE4C", Offset = "0x1DDCE4C", VA = "0x1DDCE4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014E4")]
			[Address(RVA = "0x1DDCE50", Offset = "0x1DDCE50", VA = "0x1DDCE50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014E6")]
			[Address(RVA = "0x1DDD040", Offset = "0x1DDD040", VA = "0x1DDD040", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5B24", Offset = "0x10A5B24")]
		private sealed class <Jumping>d__185 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer3 <>4__this;

			[Token(Token = "0x17000420")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014EB")]
				[Address(RVA = "0x1DDCDD0", Offset = "0x1DDCDD0", VA = "0x1DDCDD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000421")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014ED")]
				[Address(RVA = "0x1DDCE18", Offset = "0x1DDCE18", VA = "0x1DDCE18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014E8")]
			[Address(RVA = "0x1DDCB30", Offset = "0x1DDCB30", VA = "0x1DDCB30")]
			[DebuggerHidden]
			public <Jumping>d__185(int <>1__state)
			{
			}

			[Token(Token = "0x60014E9")]
			[Address(RVA = "0x1DDCB5C", Offset = "0x1DDCB5C", VA = "0x1DDCB5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014EA")]
			[Address(RVA = "0x1DDCB60", Offset = "0x1DDCB60", VA = "0x1DDCB60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014EC")]
			[Address(RVA = "0x1DDCDD8", Offset = "0x1DDCDD8", VA = "0x1DDCDD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002AD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5B34", Offset = "0x10A5B34")]
		private sealed class <JumpRetract>d__189 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer3 <>4__this;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <time>5__2;

			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <start>5__3;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <target>5__4;

			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <elapsed>5__5;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <velocity>5__6;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <jumped>5__7;

			[Token(Token = "0x17000422")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F1")]
				[Address(RVA = "0x1DDCAE0", Offset = "0x1DDCAE0", VA = "0x1DDCAE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000423")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F3")]
				[Address(RVA = "0x1DDCB28", Offset = "0x1DDCB28", VA = "0x1DDCB28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014EE")]
			[Address(RVA = "0x1DDC568", Offset = "0x1DDC568", VA = "0x1DDC568")]
			[DebuggerHidden]
			public <JumpRetract>d__189(int <>1__state)
			{
			}

			[Token(Token = "0x60014EF")]
			[Address(RVA = "0x1DDC594", Offset = "0x1DDC594", VA = "0x1DDC594", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F0")]
			[Address(RVA = "0x1DDC598", Offset = "0x1DDC598", VA = "0x1DDC598", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F2")]
			[Address(RVA = "0x1DDCAE8", Offset = "0x1DDCAE8", VA = "0x1DDCAE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002AE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5B44", Offset = "0x10A5B44")]
		private sealed class <After>d__193 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer3 <>4__this;

			[Token(Token = "0x17000424")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F7")]
				[Address(RVA = "0x1DDC308", Offset = "0x1DDC308", VA = "0x1DDC308", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000425")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F9")]
				[Address(RVA = "0x1DDC350", Offset = "0x1DDC350", VA = "0x1DDC350", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014F4")]
			[Address(RVA = "0x1DDBF60", Offset = "0x1DDBF60", VA = "0x1DDBF60")]
			[DebuggerHidden]
			public <After>d__193(int <>1__state)
			{
			}

			[Token(Token = "0x60014F5")]
			[Address(RVA = "0x1DDBF8C", Offset = "0x1DDBF8C", VA = "0x1DDBF8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F6")]
			[Address(RVA = "0x1DDBF90", Offset = "0x1DDBF90", VA = "0x1DDBF90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F8")]
			[Address(RVA = "0x1DDC310", Offset = "0x1DDC310", VA = "0x1DDC310", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD168", Offset = "0x10BD168")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD168", Offset = "0x10BD168")]
		public float AirAcceleration;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD1C8", Offset = "0x10BD1C8")]
		public float Acceleration;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD200", Offset = "0x10BD200")]
		public float Deacelleration;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD238", Offset = "0x10BD238")]
		public float RunAcceleration;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD270", Offset = "0x10BD270")]
		public float WalkSpeed;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD2A8", Offset = "0x10BD2A8")]
		public float RunSpeed;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD2E0", Offset = "0x10BD2E0")]
		public AnimationCurve CrouchSpeedCurve;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD318", Offset = "0x10BD318")]
		public AnimationCurve CrouchAccelerationCurve;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD350", Offset = "0x10BD350")]
		public AnimationCurve SlopeCurve;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD388", Offset = "0x10BD388")]
		public AnimationCurve SlopeSpeedCurve;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD3C0", Offset = "0x10BD3C0")]
		public float CameraMoveThreshold;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD3F8", Offset = "0x10BD3F8")]
		public PhysicMaterial SlipperyMaterial;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD430", Offset = "0x10BD430")]
		public float SprintDoubleClickThreshold;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD468", Offset = "0x10BD468")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD468", Offset = "0x10BD468")]
		public float PlayerHeight;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD4C8", Offset = "0x10BD4C8")]
		public float LegPercent;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD500", Offset = "0x10BD500")]
		public float BumperOffset;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD538", Offset = "0x10BD538")]
		public SitStand SitStanding;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD570", Offset = "0x10BD570")]
		public float CameraCeilingOffset;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float PelvisMaxOffset;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve PelvisOffset;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float DefaultArmLength;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD5A8", Offset = "0x10BD5A8")]
		public bool SmoothTurn;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float SmoothTurnThreshold;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float SnapTurnSpeed;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float SnapAmount;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD5E0", Offset = "0x10BD5E0")]
		public float SnapThreshold;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD618", Offset = "0x10BD618")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD618", Offset = "0x10BD618")]
		public float SlopeAngle;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD678", Offset = "0x10BD678")]
		public float GroundedRayLength;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public LayerMask GroundedLayerMask;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD6B0", Offset = "0x10BD6B0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD6B0", Offset = "0x10BD6B0")]
		public float StandingForce;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD710", Offset = "0x10BD710")]
		public float StandingDamper;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float StandingMaxForce;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD748", Offset = "0x10BD748")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD748", Offset = "0x10BD748")]
		public float JumpForce;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD7A8", Offset = "0x10BD7A8")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD7E0", Offset = "0x10BD7E0")]
		public float BallJumpMass;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD818", Offset = "0x10BD818")]
		public float JumpTimeout;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public CrouchLevel RetractLevel;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD850", Offset = "0x10BD850")]
		public float LevelOneHeight;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float LevelTwoHeight;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float LevelThreeHeight;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD888", Offset = "0x10BD888")]
		public float CrouchThreshold;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD8C0", Offset = "0x10BD8C0")]
		public float CrouchSpeed;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BD8F8", Offset = "0x10BD8F8")]
		public float ContinueCrouchThreshold;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float JumpCrouchSpeed;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD930", Offset = "0x10BD930")]
		public HexaCameraRig CameraRig;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform Camera;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform NeckPivot;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform CameraScale;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Transform Neck;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Transform Bumper;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Transform Legs;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Transform Chest;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Transform ChestAnchor;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Transform LeftShoulder;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Transform RightShoulder;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD968", Offset = "0x10BD968")]
		public bool ShowShapes;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Transform ChestCapsule;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Transform KneeCapsule;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Transform PelvisCapsule;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public Transform LocoSphere;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform FenderSphere;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD9A0", Offset = "0x10BD9A0")]
		public Rigidbody LocoBall;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Rigidbody Torso;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Rigidbody Knee;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Rigidbody HeadRigidbody;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Rigidbody LeftHandRigidBody;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Rigidbody RightHandRigidBody;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BD9D8", Offset = "0x10BD9D8")]
		public CapsuleCollider KneeCollider;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public CapsuleCollider ChestCollider;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public SphereCollider LocoCollider;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public SphereCollider FenderCollider;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public CapsuleCollider NeckCollider;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public CapsuleCollider PelvisCollider;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDA10", Offset = "0x10BDA10")]
		public ConfigurableJoint JointLegTorso;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public ConfigurableJoint JointLegBall;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public ConfigurableJoint JointHead;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDA48", Offset = "0x10BDA48")]
		public Transform LeftController;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public Transform RightController;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDA80", Offset = "0x10BDA80")]
		public bool CalibrateHeightOnStart;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x10BDAB8", Offset = "0x10BDAB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDAB8", Offset = "0x10BDAB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDAB8", Offset = "0x10BDAB8")]
		public float CalibratedHeight;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float SittingOffset;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public float FloorOffsetAdjustment;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float WaistHeight;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public float WaistToBallHeight;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public float CrouchOffset;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float TargetCrouchOffset;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public float LegHeight;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public float FakeCrouchAmount;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float RealCrouchOffset;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public float NeckBendOffset;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDB2C", Offset = "0x10BDB2C")]
		public float PelvisHeightOffset;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public float RealCrouchHeightOffset;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public float MinCameraHeightOffset;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public float MaxCameraHeightOffset;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float HeadOffset;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		public float MinCameraHeight;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public Vector3 CameraRigPosition;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public Vector3 PreviousCameraRigPosition;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDB64", Offset = "0x10BDB64")]
		[SerializeField]
		private float _jumpForce;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		[SerializeField]
		private float _groundAngle;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[SerializeField]
		private CrouchLevel _crouchLevel;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[SerializeField]
		private float _jumpTime;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[SerializeField]
		private LegStage _legStage;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		[SerializeField]
		private float _actualSpeed;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[SerializeField]
		private float _standingPercent;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDC10", Offset = "0x10BDC10")]
		[SerializeField]
		private float _verticalSpeed;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[SerializeField]
		private float _locoAngularVelocity;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[SerializeField]
		private float _targetAngularVelocity;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[SerializeField]
		private float _modifiedTargetSpeed;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		[SerializeField]
		private float _modifiedTargetAcceleration;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private float _originalLocoRadius;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private float _originalBumperRadius;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private float _ballMass;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private float _kneeMass;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private float _headMass;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private float _pelvisMass;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private bool _jump;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private float _crouchTimer;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private float _scale;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private float _timeSinceLastPress;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private bool _awaitingSecondClick;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private Vector3 _previousCamera;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Vector3 _crouchVelocity;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private Vector3 _jumpVelocity;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private bool _previousShowShapes;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private float _previousSlopeAngle;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private PhysicMaterial _previousLocoMaterial;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private bool _slippery;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private ConfigurableJoint _leftArmJoint;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private ConfigurableJoint _rightArmJoint;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Vector3 _cameraStartingPosition;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDC9C", Offset = "0x10BDC9C")]
		private bool <Sprinting>k__BackingField;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDCAC", Offset = "0x10BDCAC")]
		private Quaternion <GroundRotation>k__BackingField;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDCBC", Offset = "0x10BDCBC")]
		private HexaBodyPlayerInputs <Inputs>k__BackingField;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDCCC", Offset = "0x10BDCCC")]
		private Vector3 <Forward>k__BackingField;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDCDC", Offset = "0x10BDCDC")]
		private Vector3 <Right>k__BackingField;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDCEC", Offset = "0x10BDCEC")]
		private bool <IsGrounded>k__BackingField;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public float PelvisSpeed;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private float _previousTurnAxis;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		private bool _turning;

		[Token(Token = "0x17000413")]
		public bool Sprinting
		{
			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x2F34C5C", Offset = "0x2F34C5C", VA = "0x2F34C5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5654", Offset = "0x10C5654")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x2F34C64", Offset = "0x2F34C64", VA = "0x2F34C64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5664", Offset = "0x10C5664")]
			set
			{
			}
		}

		[Token(Token = "0x17000414")]
		public Quaternion GroundRotation
		{
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x2F34C70", Offset = "0x2F34C70", VA = "0x2F34C70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5674", Offset = "0x10C5674")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x2F34C84", Offset = "0x2F34C84", VA = "0x2F34C84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5684", Offset = "0x10C5684")]
			private set
			{
			}
		}

		[Token(Token = "0x17000415")]
		public HexaBodyPlayerInputs Inputs
		{
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x2F34C98", Offset = "0x2F34C98", VA = "0x2F34C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5694", Offset = "0x10C5694")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0x2F34CA0", Offset = "0x2F34CA0", VA = "0x2F34CA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56A4", Offset = "0x10C56A4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000416")]
		public Vector3 Forward
		{
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0x2F34CB0", Offset = "0x2F34CB0", VA = "0x2F34CB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56B4", Offset = "0x10C56B4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0x2F34CC0", Offset = "0x2F34CC0", VA = "0x2F34CC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56C4", Offset = "0x10C56C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000417")]
		public Vector3 Right
		{
			[Token(Token = "0x60014A8")]
			[Address(RVA = "0x2F34CD0", Offset = "0x2F34CD0", VA = "0x2F34CD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56D4", Offset = "0x10C56D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60014A9")]
			[Address(RVA = "0x2F34CE0", Offset = "0x2F34CE0", VA = "0x2F34CE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56E4", Offset = "0x10C56E4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000418")]
		public bool IsGrounded
		{
			[Token(Token = "0x60014AA")]
			[Address(RVA = "0x2F34CF0", Offset = "0x2F34CF0", VA = "0x2F34CF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C56F4", Offset = "0x10C56F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0x2F34CF8", Offset = "0x2F34CF8", VA = "0x2F34CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5704", Offset = "0x10C5704")]
			set
			{
			}
		}

		[Token(Token = "0x17000419")]
		public float CameraHeight
		{
			[Token(Token = "0x60014AC")]
			[Address(RVA = "0x2F34D04", Offset = "0x2F34D04", VA = "0x2F34D04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700041A")]
		public float EyeLevel
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0x2F34D54", Offset = "0x2F34D54", VA = "0x2F34D54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700041B")]
		private float Mass
		{
			[Token(Token = "0x60014C1")]
			[Address(RVA = "0x2F3739C", Offset = "0x2F3739C", VA = "0x2F3739C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x2F34D5C", Offset = "0x2F34D5C", VA = "0x2F34D5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x2F34E84", Offset = "0x2F34E84", VA = "0x2F34E84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5714", Offset = "0x10C5714")]
		private IEnumerator CalibrateHeightOnStartRoutine()
		{
			return null;
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x2F353D0", Offset = "0x2F353D0", VA = "0x2F353D0")]
		public void CalibrateHeight(float height)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x2F35428", Offset = "0x2F35428", VA = "0x2F35428")]
		public void EnableSlippery()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x2F354A4", Offset = "0x2F354A4", VA = "0x2F354A4")]
		public void DisableSlippery()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x2F354E0", Offset = "0x2F354E0", VA = "0x2F354E0")]
		[SerializeField]
		private void Update()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x2F35614", Offset = "0x2F35614", VA = "0x2F35614")]
		private void UpdateCrouch()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x2F35D40", Offset = "0x2F35D40", VA = "0x2F35D40")]
		private void ForceCrouchHeight(CrouchLevel level)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x2F35C54", Offset = "0x2F35C54", VA = "0x2F35C54")]
		private void SetLegHeight(float offset)
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x2F35C2C", Offset = "0x2F35C2C", VA = "0x2F35C2C")]
		private void SetCrouchLevel(CrouchLevel level)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x2F35D6C", Offset = "0x2F35D6C", VA = "0x2F35D6C")]
		private float GetCrouchOffset(CrouchLevel level)
		{
			return default(float);
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x2F3586C", Offset = "0x2F3586C", VA = "0x2F3586C")]
		public void ApplyCameraOffsets()
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x2F35DC4", Offset = "0x2F35DC4", VA = "0x2F35DC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x2F371C8", Offset = "0x2F371C8", VA = "0x2F371C8")]
		private void UpdateShoulderAnchors()
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x2F36A64", Offset = "0x2F36A64", VA = "0x2F36A64")]
		private void UpdateBody()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x2F368FC", Offset = "0x2F368FC", VA = "0x2F368FC")]
		private void UpdateHead()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x2F35E70", Offset = "0x2F35E70", VA = "0x2F35E70")]
		private void UpdateLegs()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x2F3679C", Offset = "0x2F3679C", VA = "0x2F3679C")]
		private void Turn()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x2F37314", Offset = "0x2F37314", VA = "0x2F37314")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5784", Offset = "0x10C5784")]
		private IEnumerator SnapTurn(float sign)
		{
			return null;
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x2F362A8", Offset = "0x2F362A8", VA = "0x2F362A8")]
		private void Jump()
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x2F3742C", Offset = "0x2F3742C", VA = "0x2F3742C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C57E4", Offset = "0x10C57E4")]
		private IEnumerator Jumping()
		{
			return null;
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x2F374A4", Offset = "0x2F374A4", VA = "0x2F374A4", Slot = "4")]
		public virtual void ApplyJumpMass()
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x2F34E3C", Offset = "0x2F34E3C", VA = "0x2F34E3C")]
		private void CacheMass()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x2F374EC", Offset = "0x2F374EC", VA = "0x2F374EC", Slot = "5")]
		public virtual void ResetMass()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x2F37530", Offset = "0x2F37530", VA = "0x2F37530")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5844", Offset = "0x10C5844")]
		private IEnumerator JumpRetract()
		{
			return null;
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x2F375A8", Offset = "0x2F375A8", VA = "0x2F375A8")]
		private void ScaleBalls(bool shrink)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x2F35958", Offset = "0x2F35958", VA = "0x2F35958")]
		private void CheckInputs()
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x2F37640", Offset = "0x2F37640", VA = "0x2F37640")]
		private bool HandleHMDMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x2F378B4", Offset = "0x2F378B4", VA = "0x2F378B4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C58A4", Offset = "0x10C58A4")]
		private IEnumerator After()
		{
			return null;
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x2F3792C", Offset = "0x2F3792C", VA = "0x2F3792C")]
		private void AirMove(Vector3 direction)
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x2F379B0", Offset = "0x2F379B0", VA = "0x2F379B0")]
		private void AirAccelerate(Rigidbody rb, Vector3 direction)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x2F362F8", Offset = "0x2F362F8", VA = "0x2F362F8")]
		private void Move()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x2F360E4", Offset = "0x2F360E4", VA = "0x2F360E4")]
		private void CheckGrounded()
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x2F37A4C", Offset = "0x2F37A4C", VA = "0x2F37A4C")]
		private Vector2 CheckWASD()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x2F37AD4", Offset = "0x2F37AD4", VA = "0x2F37AD4", Slot = "6")]
		protected virtual void CheckSprinting()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x2F37BC4", Offset = "0x2F37BC4", VA = "0x2F37BC4")]
		public void SetSitStandMode(bool sitting)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x2F355DC", Offset = "0x2F355DC", VA = "0x2F355DC")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x2F34FB8", Offset = "0x2F34FB8", VA = "0x2F34FB8")]
		public void SetArmLength(float armLength)
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x2F37BE4", Offset = "0x2F37BE4", VA = "0x2F37BE4")]
		private void CheckShapes()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x2F359DC", Offset = "0x2F359DC", VA = "0x2F359DC")]
		private void UpdateShapes()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x2F34EFC", Offset = "0x2F34EFC", VA = "0x2F34EFC")]
		private void SetupShapes()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x2F37C2C", Offset = "0x2F37C2C", VA = "0x2F37C2C")]
		public void MoveToPosition(Vector3 locoBallBottom)
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x2F38134", Offset = "0x2F38134", VA = "0x2F38134")]
		public void FaceDirection(Vector3 forward)
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x2F3805C", Offset = "0x2F3805C", VA = "0x2F3805C")]
		public void Stop()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x2F3825C", Offset = "0x2F3825C", VA = "0x2F3825C")]
		public HexaBodyPlayer3()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class HexaBodyPlayerInputs : MonoBehaviour
	{
		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDCFC", Offset = "0x10BDCFC")]
		public bool KeyboardDebug;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode CrouchKey;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode StandKey;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode JumpKey;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode RunKey;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode RecalibrateKey;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 MovementAxis;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 TurnAxis;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool SprintRequiresDoubleClick;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool SprintingPressed;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool RecalibratePressed;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public bool JumpPressed;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool CrouchPressed;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool StandPressed;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal PlayerInputState JumpState;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal PlayerInputState CrouchState;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal PlayerInputState StandState;

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x322AE58", Offset = "0x322AE58", VA = "0x322AE58")]
		private void Update()
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x322AEF8", Offset = "0x322AEF8", VA = "0x322AEF8")]
		protected void ResetState(ref PlayerInputState buttonState)
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x322AF04", Offset = "0x322AF04", VA = "0x322AF04")]
		protected void SetState(ref PlayerInputState buttonState, bool pressed)
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x322AF30", Offset = "0x322AF30", VA = "0x322AF30")]
		public HexaBodyPlayerInputs()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class CollisionDetector : MonoBehaviour
	{
		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsColliding;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool PreviousCollided;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool JustUncollided;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 AverageNormal;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 CollisionImpulse;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 CollisionForce;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 MaxImpulse;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.Component[] CollisionHandlers;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ICollisionHandler[] _handlers;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly CircularBuffer<Vector3> _buffer;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Collider WallCollider;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HexaBodyPlayer4 hexaBody;

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x2541990", Offset = "0x2541990", VA = "0x2541990", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x2541C28", Offset = "0x2541C28", VA = "0x2541C28")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0x2541CF8", Offset = "0x2541CF8", VA = "0x2541CF8", Slot = "5")]
		protected virtual void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x2541E18", Offset = "0x2541E18", VA = "0x2541E18", Slot = "6")]
		protected virtual void OnCollisionStay(Collision other)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0x2541F38", Offset = "0x2541F38", VA = "0x2541F38", Slot = "7")]
		protected virtual void HandleCollision(Collision other)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x2542088", Offset = "0x2542088", VA = "0x2542088")]
		public float Average(float lookBackTime, Vector3 min, Vector3 max)
		{
			return default(float);
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x254222C", Offset = "0x254222C", VA = "0x254222C")]
		public CollisionDetector()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public interface ICollisionHandler
	{
		[Token(Token = "0x6001505")]
		void HandleCollision(Collision c, CollisionMethod method);
	}
	[Token(Token = "0x20002B2")]
	public enum CollisionMethod
	{
		[Token(Token = "0x4000CC6")]
		OnEnter,
		[Token(Token = "0x4000CC7")]
		OnStay
	}
	[Token(Token = "0x20002B3")]
	public class HexaBodyInputs : HexaBodyInputsBase
	{
		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public HexaXRInputs LeftController;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HexaXRInputs RightController;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDD34", Offset = "0x10BDD34")]
		public float CrouchXThreshold;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDD6C", Offset = "0x10BDD6C")]
		public float CrouchYThreshold;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDDA4", Offset = "0x10BDDA4")]
		public bool EnableDebugCalibrationButton;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDDDC", Offset = "0x10BDDDC")]
		public bool KeyboardDebug;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float KeyboardCrouchRate;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public KeyCode CrouchKey;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public KeyCode StandKey;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public KeyCode JumpKey;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public KeyCode RunKey;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public KeyCode RecalibrateKey;

		[Token(Token = "0x6001506")]
		[Address(RVA = "0x2F30448", Offset = "0x2F30448", VA = "0x2F30448", Slot = "7")]
		protected override bool UpdateJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x2F304B8", Offset = "0x2F304B8", VA = "0x2F304B8", Slot = "8")]
		protected override float UpdateCrouchRate()
		{
			return default(float);
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x2F3057C", Offset = "0x2F3057C", VA = "0x2F3057C", Slot = "13")]
		protected override bool UpdateLeftCenterTrackpadPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x2F30624", Offset = "0x2F30624", VA = "0x2F30624", Slot = "14")]
		protected override bool UpdateRightCenterTrackpadPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x2F306CC", Offset = "0x2F306CC", VA = "0x2F306CC", Slot = "15")]
		protected virtual Vector2 CheckWASD()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x2F30754", Offset = "0x2F30754", VA = "0x2F30754", Slot = "9")]
		protected override Vector2 UpdateMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x2F307E4", Offset = "0x2F307E4", VA = "0x2F307E4", Slot = "10")]
		protected override Vector2 UpdateTurnAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x2F30828", Offset = "0x2F30828", VA = "0x2F30828", Slot = "11")]
		protected override bool UpdateSprinting()
		{
			return default(bool);
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x2F30900", Offset = "0x2F30900", VA = "0x2F30900", Slot = "12")]
		protected override bool UpdateRecalibrate()
		{
			return default(bool);
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x2F3097C", Offset = "0x2F3097C", VA = "0x2F3097C")]
		public HexaBodyInputs()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public abstract class HexaBodyInputsBase : MonoBehaviour
	{
		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDE14", Offset = "0x10BDE14")]
		public bool CanMove;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool CanTurn;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool CanCrouch;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool CanJump;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDE4C", Offset = "0x10BDE4C")]
		public Vector2 MovementAxis;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 TurnAxis;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool SprintRequiresDoubleClick;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool SprintingPressed;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool RecalibratePressed;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool leftCenterTrackpadPressed;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool leftCenterTrackpadJustReleasedPress;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool rightCenterTrackpadPressed;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool rightCenterTrackpadJustReleasedPress;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool JumpPressed;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float CrouchRate;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool HasMovement;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BDE84", Offset = "0x10BDE84")]
		private float <MovementMagnitude>k__BackingField;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PlayerInputState JumpState;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal PlayerInputState CrouchState;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PlayerInputState leftCenterTrackpadState;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayerInputState rightCenterTrackpadState;

		[Token(Token = "0x17000426")]
		public float MovementMagnitude
		{
			[Token(Token = "0x6001510")]
			[Address(RVA = "0x2F309C4", Offset = "0x2F309C4", VA = "0x2F309C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5A94", Offset = "0x10C5A94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001511")]
			[Address(RVA = "0x2F309CC", Offset = "0x2F309CC", VA = "0x2F309CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AA4", Offset = "0x10C5AA4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x2F309D4", Offset = "0x2F309D4", VA = "0x2F309D4", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x2F30A08", Offset = "0x2F30A08", VA = "0x2F30A08", Slot = "5")]
		protected virtual void SetStates()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x2F30B24", Offset = "0x2F30B24", VA = "0x2F30B24", Slot = "6")]
		protected virtual void GatherInputs()
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x2F30C64", Offset = "0x2F30C64", VA = "0x2F30C64")]
		protected void ResetFields()
		{
		}

		[Token(Token = "0x6001516")]
		protected abstract bool UpdateJump();

		[Token(Token = "0x6001517")]
		protected abstract float UpdateCrouchRate();

		[Token(Token = "0x6001518")]
		protected abstract Vector2 UpdateMovementAxis();

		[Token(Token = "0x6001519")]
		protected abstract Vector2 UpdateTurnAxis();

		[Token(Token = "0x600151A")]
		protected abstract bool UpdateSprinting();

		[Token(Token = "0x600151B")]
		protected abstract bool UpdateRecalibrate();

		[Token(Token = "0x600151C")]
		protected abstract bool UpdateLeftCenterTrackpadPressed();

		[Token(Token = "0x600151D")]
		protected abstract bool UpdateRightCenterTrackpadPressed();

		[Token(Token = "0x600151E")]
		[Address(RVA = "0x2F30AEC", Offset = "0x2F30AEC", VA = "0x2F30AEC")]
		protected void ResetState(ref PlayerInputState buttonState)
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x2F30AF8", Offset = "0x2F30AF8", VA = "0x2F30AF8")]
		protected void SetState(ref PlayerInputState buttonState, bool pressed)
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x2F309B4", Offset = "0x2F309B4", VA = "0x2F309B4")]
		protected HexaBodyInputsBase()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5B54", Offset = "0x10A5B54")]
	public class HexaBodyPlayer4 : MonoBehaviour
	{
		[Token(Token = "0x20002B6")]
		public enum WallRunActivation
		{
			[Token(Token = "0x4000E12")]
			ButtonPress,
			[Token(Token = "0x4000E13")]
			ButtonHold,
			[Token(Token = "0x4000E14")]
			AutoWallRun,
			[Token(Token = "0x4000E15")]
			Disabled
		}

		[Serializable]
		[Token(Token = "0x20002B7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5BB4", Offset = "0x10A5BB4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<HexaHandsBase, bool> <>9__313_0;

			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<HexaHandsBase, bool> <>9__313_1;

			[Token(Token = "0x60015AA")]
			[Address(RVA = "0x1DDD0EC", Offset = "0x1DDD0EC", VA = "0x1DDD0EC")]
			public <>c()
			{
			}

			[Token(Token = "0x60015AB")]
			[Address(RVA = "0x1DDD0F4", Offset = "0x1DDD0F4", VA = "0x1DDD0F4")]
			internal bool <Start>b__313_0(HexaHandsBase e)
			{
				return default(bool);
			}

			[Token(Token = "0x60015AC")]
			[Address(RVA = "0x1DDD114", Offset = "0x1DDD114", VA = "0x1DDD114")]
			internal bool <Start>b__313_1(HexaHandsBase e)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5BC4", Offset = "0x10A5BC4")]
		private sealed class <SnapTurn>d__368 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaBodyPlayer4 <>4__this;

			[Token(Token = "0x4000E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float sign;

			[Token(Token = "0x4000E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion <finish>5__2;

			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsed>5__3;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <time>5__4;

			[Token(Token = "0x1700043F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015B0")]
				[Address(RVA = "0x1DDD408", Offset = "0x1DDD408", VA = "0x1DDD408", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000440")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015B2")]
				[Address(RVA = "0x1DDD450", Offset = "0x1DDD450", VA = "0x1DDD450", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015AD")]
			[Address(RVA = "0x1DDD144", Offset = "0x1DDD144", VA = "0x1DDD144")]
			[DebuggerHidden]
			public <SnapTurn>d__368(int <>1__state)
			{
			}

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x1DDD170", Offset = "0x1DDD170", VA = "0x1DDD170", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015AF")]
			[Address(RVA = "0x1DDD174", Offset = "0x1DDD174", VA = "0x1DDD174", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015B1")]
			[Address(RVA = "0x1DDD410", Offset = "0x1DDD410", VA = "0x1DDD410", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool debugHexabody;

		[Token(Token = "0x4000CEA")]
		public const string HeightKey = "SaveHeight";

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Timeline hexaBodyTimeline;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BDE94", Offset = "0x10BDE94")]
		public float JumpDamper;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float JumpVelGoal;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float JumpVelActual;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float JumpHeightGoal;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float JumpHeightActual;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool SaveHeadHeight;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDECC", Offset = "0x10BDECC")]
		public float JumpCrouchAmount;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDF04", Offset = "0x10BDF04")]
		public AnimationCurve JumpHeightCurve;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDF3C", Offset = "0x10BDF3C")]
		public AnimationCurve RetractCurve;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDF74", Offset = "0x10BDF74")]
		public AnimationCurve StompCurve;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDFAC", Offset = "0x10BDFAC")]
		public float RetractLevel;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BDFE4", Offset = "0x10BDFE4")]
		public float JumpTimeout;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE01C", Offset = "0x10BE01C")]
		public float StompSpeed;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE054", Offset = "0x10BE054")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE054", Offset = "0x10BE054")]
		public float JumpMovementBonus;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE0B4", Offset = "0x10BE0B4")]
		public float JumpSprintBonus;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE0EC", Offset = "0x10BE0EC")]
		public AnimationCurve JumpMovementCurve;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE124", Offset = "0x10BE124")]
		public AnimationCurve JumpMovementDirectionCurve;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE15C", Offset = "0x10BE15C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE15C", Offset = "0x10BE15C")]
		public float AirAcceleration;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float originalAirAcceleration;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool usingFlightTrigger;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool usingFlightMode;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool headControlledVerticalFlight;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		public bool usingLimitedVerticalFlight;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool SuperSpeedActivated;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float SuperSpeedMultiplier;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float locoBallSlerpMaxForce;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool LinearAcceleration;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI currentGoalVelocity;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TextMeshProUGUI airStopActive;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE1BC", Offset = "0x10BE1BC")]
		public float WalkSpeed;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE1F4", Offset = "0x10BE1F4")]
		public float RunSpeed;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE22C", Offset = "0x10BE22C")]
		public float SmoothTime;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE264", Offset = "0x10BE264")]
		public float MaxAcceleration;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE29C", Offset = "0x10BE29C")]
		public AnimationCurve CrouchSpeedCurve;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE2D4", Offset = "0x10BE2D4")]
		public AnimationCurve SlopeMaxSpeedCurve;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE30C", Offset = "0x10BE30C")]
		public AnimationCurve SlopeFrictionCurve;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE344", Offset = "0x10BE344")]
		public AnimationCurve DirectionAcceleration;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE37C", Offset = "0x10BE37C")]
		public float CameraMoveThreshold;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE3B4", Offset = "0x10BE3B4")]
		public float SprintDoubleClickThreshold;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE3EC", Offset = "0x10BE3EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE3EC", Offset = "0x10BE3EC")]
		public float EyeHeight;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE44C", Offset = "0x10BE44C")]
		public float PlayerWaistHeight;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE484", Offset = "0x10BE484")]
		public float BumperOffset;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE4BC", Offset = "0x10BE4BC")]
		public SitStand SitStanding;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE4F4", Offset = "0x10BE4F4")]
		public float TipToesOffset;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE52C", Offset = "0x10BE52C")]
		public float CameraCeilingOffset;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE564", Offset = "0x10BE564")]
		public float PelvisMaxOffset;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE59C", Offset = "0x10BE59C")]
		public AnimationCurve PelvisOffset;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE5D4", Offset = "0x10BE5D4")]
		public float DefaultArmLength;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public bool playerCanTurnWithJoystick;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE60C", Offset = "0x10BE60C")]
		public bool SmoothTurn;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float SmoothTurnThreshold;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float SnapTurnSpeed;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float SnapAmount;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE644", Offset = "0x10BE644")]
		public float SnapThreshold;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE67C", Offset = "0x10BE67C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE67C", Offset = "0x10BE67C")]
		public float GroundedRayLength;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE6DC", Offset = "0x10BE6DC")]
		public LayerMask GroundedLayerMask;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] defaultCrouch;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE714", Offset = "0x10BE714")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE714", Offset = "0x10BE714")]
		public float[] CrouchLevels;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE774", Offset = "0x10BE774")]
		public float RunningCrouchLevel;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE7AC", Offset = "0x10BE7AC")]
		public float WalkingCrouchLevel;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE7E4", Offset = "0x10BE7E4")]
		public float AirCrouchMaxHeight;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE81C", Offset = "0x10BE81C")]
		public float CrouchThreshold;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE854", Offset = "0x10BE854")]
		public float MaxCrouchSpeed;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE88C", Offset = "0x10BE88C")]
		public float PassiveCrouchSpeed;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE8C4", Offset = "0x10BE8C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE8C4", Offset = "0x10BE8C4")]
		public int SolverIterations;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BE924", Offset = "0x10BE924")]
		public int SolverVelocityIterations;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE95C", Offset = "0x10BE95C")]
		public HexaCameraRig CameraRig;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform Camera;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform NeckPivot;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform CameraScale;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Transform Neck;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Transform Bumper;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Transform Legs;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Transform Chest;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Transform ChestAnchor;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public Transform LeftShoulder;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public Transform RightShoulder;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE994", Offset = "0x10BE994")]
		public bool ShowShapes;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public Transform ChestCapsule;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Transform KneeCapsule;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Transform PelvisCapsule;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public Transform LocoSphere;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public Transform FenderSphere;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BE9CC", Offset = "0x10BE9CC")]
		public List<Rigidbody> playerRigidbodies;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public Rigidbody LocoBall;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Rigidbody Pelvis;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Rigidbody Knee;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public Rigidbody Head;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public Rigidbody LeftHandRigidBody;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Rigidbody RightHandRigidBody;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEA04", Offset = "0x10BEA04")]
		public List<Collider> playerColliders;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public CapsuleCollider KneeCollider;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public CapsuleCollider ChestCollider;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public SphereCollider LocoCollider;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public SphereCollider FenderCollider;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public CapsuleCollider NeckCollider;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public CapsuleCollider PelvisCollider;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEA3C", Offset = "0x10BEA3C")]
		public HexaHandsBase LeftHand;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public HexaHandsBase RightHand;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEA74", Offset = "0x10BEA74")]
		public ConfigurableJoint JointLegTorso;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public ConfigurableJoint JointLegBall;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public ConfigurableJoint JointHead;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEAAC", Offset = "0x10BEAAC")]
		public Transform LeftController;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public Transform RightController;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BEAE4", Offset = "0x10BEAE4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEAE4", Offset = "0x10BEAE4")]
		public bool CalibrateHeightOnStart;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x299")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BEB44", Offset = "0x10BEB44")]
		public bool SaveCalibrationHeight;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public float CalibratedHeight;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public float SittingOffset;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		public float FloorOffsetAdjustment;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public float ActualWaistHeight;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public float ActualCrouchAmount;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public float WaistToBallHeight;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		public float CrouchTarget;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[SerializeField]
		private float _crouchAmount;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		public float TargetWaistHeight;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public float FakeCrouchAmount;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		public float RealCrouchOffset;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public float NeckBendOffset;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEB8C", Offset = "0x10BEB8C")]
		public float PelvisHeightOffset;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public float RealCrouchHeightOffset;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		public float MinCameraHeightOffset;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public float MaxCameraHeightOffset;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		public float HeadOffset;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private float MinCameraHeight;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEBC4", Offset = "0x10BEBC4")]
		[SerializeField]
		private float _groundAngle;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		[SerializeField]
		private float _jumpTime;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		[SerializeField]
		private float _actualSpeed;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[SerializeField]
		public float _standingPercent;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		public float crouchLimit;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		[SerializeField]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEC40", Offset = "0x10BEC40")]
		private float _verticalSpeed;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		[SerializeField]
		private float _locoAngularVelocity;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[SerializeField]
		private float _targetAngularVelocity;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		public float CrouchSpeed;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public float _originalLocoRadius;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		public float _originalBumperRadius;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private float _ballMass;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private float _kneeMass;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private float _headMass;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private float _pelvisMass;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private bool _jump;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		public float _scale;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private float _timeSinceLastPress;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private bool _awaitingSecondClick;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32D")]
		private bool _previousShowShapes;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		protected LegStatus _legStatus;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		protected Vector3 goalVelocity;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Vector3 _acceleration;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		private Vector3 _cameraStartingPosition;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private float _timeToPeak;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		private float _jumpCrouchStart;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private float _cachedHeadHeight;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private WaitForFixedUpdate _wffu;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private float _headDrag;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private float _pelvisDrag;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private float _kneeDrag;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		private float _ballDrag;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private float _dynamicFriction;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		private float _staticFriction;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private bool _frictionOverriden;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		protected float crouchAmountAtJump;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		[SerializeField]
		private float _jumpTimer;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		public float currentRegularTurnSpeed;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public float slowTimeTurnSpeed;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		private float _previousTurnAxis;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private bool _turning;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public ConfigurableJoint _leftArmJoint;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public ConfigurableJoint _rightArmJoint;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private LocoBallCollision _locoGrounder;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private float _stompCounter;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		[SerializeField]
		private JumpStage _jumpStage;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private bool _waitingForCameraMovement;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		public JointDrive _legYDrive;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public JointDrive originalYDrive;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BECCC", Offset = "0x10BECCC")]
		public bool addBoostToJump;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public float jumpBoost;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3EC")]
		public float originalJumpBoost;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public float jumpBoostFromVelocity;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
		public ForceMode jumpBoostForceMode;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public float JumpBoostMax;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3FC")]
		public float originalJumpBoostMax;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private bool _jumpMassApplied;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x401")]
		private bool _jumpDriveApplied;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x402")]
		public bool IsGrounded;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x403")]
		public bool _airCrouch;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		private float StopAirCrouch;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private float StartAirCrouch;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED04", Offset = "0x10BED04")]
		private bool <Sprinting>k__BackingField;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED14", Offset = "0x10BED14")]
		private float <TurnSpeed>k__BackingField;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x414")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED24", Offset = "0x10BED24")]
		private Vector3 <HMDSpeed>k__BackingField;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED34", Offset = "0x10BED34")]
		private Quaternion <GroundRotation>k__BackingField;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED44", Offset = "0x10BED44")]
		private HexaBodyInputsBase <Inputs>k__BackingField;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BED54", Offset = "0x10BED54")]
		private Transform <DirectionTransform>k__BackingField;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public Vector3 currentBodyOrientationDown;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44C")]
		public Vector3 currentBodyOrientationUp;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BED64", Offset = "0x10BED64")]
		public float originalLocoballMass;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		public float originalKneeMass;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public float originalHeadMass;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x464")]
		public float originalPelvisMass;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		public float originalLeftHandMass;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46C")]
		public float originalRightHandMass;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BED9C", Offset = "0x10BED9C")]
		public WallRunType wallRunType;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
		public bool wallRunPowerEnabled;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x475")]
		public bool canTestForWallRun;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x476")]
		public bool wallRunActivated;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x477")]
		public bool isDiving;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		public bool needToRotateTowardsWall;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x479")]
		public bool finishedCurrentRotationTowardsWall;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47A")]
		public bool jumpButtonWasHeldForWebZipWallRun;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47C")]
		public ForceMode wallRunForceMode;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		public Vector3 currentGravityDirection;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48C")]
		public float gravityForce;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		public float WallRunAcceleration;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x494")]
		public float slowToHoverSpeed;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		public float wallRunLocoballRadius;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49C")]
		public float wallRunPlaneDistanceModifier;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		public CapsuleCollider wallDistanceCapsule;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		public Collider wallColliderToRunOn;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		public Transform transformDirectionForWallRunRaycast;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		public float wallRunRaycastDistance;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		public List<Transform> transformsForFullBodyReset;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		public Transform wallRunPlane;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		public float currentVelocityAngle;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D4")]
		public bool isLookingAwayFromWall;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private Vector3 flatDirection;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		public bool foundWallNormal;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E5")]
		public bool wallRunDirectionIsForward;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		public float wallRunDotProductWithUp;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
		public float wallRunDotProductWithCurrentGravity;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private bool skipNextActivationCheck;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F1")]
		public bool usingRaycastForWallRun;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F2")]
		public bool usingCollisionForWallRun;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F3")]
		public bool hasWallRunCollider;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F4")]
		public bool simpleDirectionWallRunning;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F5")]
		public bool hasInput;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F6")]
		public bool hasVerticalMovementInput;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F7")]
		public bool withinVerticalFlightRange;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		public float verticalFlightLimit;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4FC")]
		public float currentDistanceToGround;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		public List<Vector3> colliderScales;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		public List<Vector3> colliderPositions;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BEDD4", Offset = "0x10BEDD4")]
		private bool <WasGrounded>k__BackingField;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
		public float MaxCrouch;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		public float currentCameraHeight;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BEDE4", Offset = "0x10BEDE4")]
		private float <GravityOffset>k__BackingField;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		public WallRunActivation currentWallRunActivation;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x524")]
		public bool cameraRigIsMoving;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private float _min;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52C")]
		public bool useCustomJointLegTorsoAnchor;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		public Vector3 customJointLegTorsoAnchor;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BEDF4", Offset = "0x10BEDF4")]
		public Transform pelvisTargetDebugSphere;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		public bool clampPelvisTargetYWhenWallRunning;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x549")]
		public bool projectUpdateBodyDirectionToPlane;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54C")]
		public Vector3 localDir;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		public float currentGravityOffset;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55C")]
		public float neckDelta;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		public float additionalNeckDelta;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x564")]
		public Vector3 currentPelvisTarget;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		public float currentPelvisOffset;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x574")]
		public bool currentlyTurning;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		public float currentTurnAmount;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57C")]
		public bool useCustomDeltaForHMDMovement;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		public Vector3 delta;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private string noWallRunTag;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private bool lockWallRunByTimer;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59C")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BEE2C", Offset = "0x10BEE2C")]
		public float superSpeedLedgeCheckForwardModifier;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		public float superSpeedLedgeCheckRaycastDistanceModifier;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A4")]
		public float superSpeedLedgeHeightThreshold;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		private RaycastHit ledgeCheckRaycastHit;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D4")]
		private int ledgeCheckRaycastStep;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		public bool usingSuperStrengthMass;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5DC")]
		public float currentBodyMassMultiplier;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		public float originalJointLegTorsoSpring;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E4")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x10BEE64", Offset = "0x10BEE64")]
		public bool canChargeJump;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E5")]
		public bool hasChargedJump;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		public float jumpChargeTime;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5EC")]
		public float firstJumpBoostTimeThreshold;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		public float secondJumpBoostTimeThreshold;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F4")]
		public float thirdJumpBoostTimeThreshold;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		public bool firstJumpBoostTimeThresholdMet;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F9")]
		public bool secondJumpBoostTimeThresholdMet;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5FA")]
		public bool thirdJumpBoostTimeThresholdMet;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5FC")]
		public float firstJumpBoostIncrease;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		public float secondJumpBoostIncrease;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x604")]
		public float thirdJumpBoostIncrease;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		public HVRController leftController;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		public HVRController rightController;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		public List<GameObject> currentJumpEffects;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		public float VibrateFrequency;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x624")]
		[HideInInspector]
		public float VibrateAmplitude;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		[HideInInspector]
		public float VibrateDuration;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62C")]
		private float currentLeftHandJumpBoost;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		private float currentRightHandJumpBoost;

		[Token(Token = "0x17000427")]
		public float BodyWeight
		{
			[Token(Token = "0x6001522")]
			[Address(RVA = "0x3220F04", Offset = "0x3220F04", VA = "0x3220F04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000428")]
		public bool Sprinting
		{
			[Token(Token = "0x6001523")]
			[Address(RVA = "0x3220F88", Offset = "0x3220F88", VA = "0x3220F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AB4", Offset = "0x10C5AB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001524")]
			[Address(RVA = "0x3220F90", Offset = "0x3220F90", VA = "0x3220F90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AC4", Offset = "0x10C5AC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000429")]
		public float TurnSpeed
		{
			[Token(Token = "0x6001525")]
			[Address(RVA = "0x3220F9C", Offset = "0x3220F9C", VA = "0x3220F9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AD4", Offset = "0x10C5AD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001526")]
			[Address(RVA = "0x3220FA4", Offset = "0x3220FA4", VA = "0x3220FA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AE4", Offset = "0x10C5AE4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700042A")]
		public Vector3 HMDSpeed
		{
			[Token(Token = "0x6001527")]
			[Address(RVA = "0x3220FAC", Offset = "0x3220FAC", VA = "0x3220FAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5AF4", Offset = "0x10C5AF4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001528")]
			[Address(RVA = "0x3220FBC", Offset = "0x3220FBC", VA = "0x3220FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B04", Offset = "0x10C5B04")]
			private set
			{
			}
		}

		[Token(Token = "0x1700042B")]
		public Quaternion GroundRotation
		{
			[Token(Token = "0x6001529")]
			[Address(RVA = "0x3220FCC", Offset = "0x3220FCC", VA = "0x3220FCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B14", Offset = "0x10C5B14")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600152A")]
			[Address(RVA = "0x3220FE0", Offset = "0x3220FE0", VA = "0x3220FE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B24", Offset = "0x10C5B24")]
			private set
			{
			}
		}

		[Token(Token = "0x1700042C")]
		public HexaBodyInputsBase Inputs
		{
			[Token(Token = "0x600152B")]
			[Address(RVA = "0x3220FF4", Offset = "0x3220FF4", VA = "0x3220FF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B34", Offset = "0x10C5B34")]
			get
			{
				return null;
			}
			[Token(Token = "0x600152C")]
			[Address(RVA = "0x3220FFC", Offset = "0x3220FFC", VA = "0x3220FFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B44", Offset = "0x10C5B44")]
			private set
			{
			}
		}

		[Token(Token = "0x1700042D")]
		public Vector3 cameraForward
		{
			[Token(Token = "0x600152D")]
			[Address(RVA = "0x322100C", Offset = "0x322100C", VA = "0x322100C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700042E")]
		public Vector3 cameraRight
		{
			[Token(Token = "0x600152E")]
			[Address(RVA = "0x3221028", Offset = "0x3221028", VA = "0x3221028")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700042F")]
		public Vector3 cameraUp
		{
			[Token(Token = "0x600152F")]
			[Address(RVA = "0x3221044", Offset = "0x3221044", VA = "0x3221044")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000430")]
		public Transform DirectionTransform
		{
			[Token(Token = "0x6001530")]
			[Address(RVA = "0x3221060", Offset = "0x3221060", VA = "0x3221060")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B54", Offset = "0x10C5B54")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x3221068", Offset = "0x3221068", VA = "0x3221068")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B64", Offset = "0x10C5B64")]
			set
			{
			}
		}

		[Token(Token = "0x17000431")]
		public float CrouchAmount
		{
			[Token(Token = "0x6001532")]
			[Address(RVA = "0x3221078", Offset = "0x3221078", VA = "0x3221078")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x3221080", Offset = "0x3221080", VA = "0x3221080")]
			set
			{
			}
		}

		[Token(Token = "0x17000432")]
		public bool WasGrounded
		{
			[Token(Token = "0x6001534")]
			[Address(RVA = "0x3221088", Offset = "0x3221088", VA = "0x3221088")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B74", Offset = "0x10C5B74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001535")]
			[Address(RVA = "0x3221090", Offset = "0x3221090", VA = "0x3221090")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B84", Offset = "0x10C5B84")]
			set
			{
			}
		}

		[Token(Token = "0x17000433")]
		public float Gravity
		{
			[Token(Token = "0x6001536")]
			[Address(RVA = "0x322109C", Offset = "0x322109C", VA = "0x322109C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000434")]
		public float MaxVerticalAcceleration
		{
			[Token(Token = "0x6001537")]
			[Address(RVA = "0x32210B8", Offset = "0x32210B8", VA = "0x32210B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000435")]
		public float CameraHeight
		{
			[Token(Token = "0x6001538")]
			[Address(RVA = "0x32211F8", Offset = "0x32211F8", VA = "0x32211F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000436")]
		public float EyeLevel
		{
			[Token(Token = "0x6001539")]
			[Address(RVA = "0x3221248", Offset = "0x3221248", VA = "0x3221248")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000437")]
		public bool IsStanding
		{
			[Token(Token = "0x600153A")]
			[Address(RVA = "0x3221250", Offset = "0x3221250", VA = "0x3221250")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000438")]
		public bool IsJumpCycle
		{
			[Token(Token = "0x600153B")]
			[Address(RVA = "0x3221260", Offset = "0x3221260", VA = "0x3221260")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000439")]
		public bool IsJumping
		{
			[Token(Token = "0x600153C")]
			[Address(RVA = "0x3221270", Offset = "0x3221270", VA = "0x3221270")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700043A")]
		public float LowerMass
		{
			[Token(Token = "0x600153D")]
			[Address(RVA = "0x3221120", Offset = "0x3221120", VA = "0x3221120")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700043B")]
		public float CombinedMass
		{
			[Token(Token = "0x600153E")]
			[Address(RVA = "0x3220F50", Offset = "0x3220F50", VA = "0x3220F50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700043C")]
		public float UpperMass
		{
			[Token(Token = "0x600153F")]
			[Address(RVA = "0x3221170", Offset = "0x3221170", VA = "0x3221170")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700043D")]
		public float GravityOffset
		{
			[Token(Token = "0x6001540")]
			[Address(RVA = "0x3221294", Offset = "0x3221294", VA = "0x3221294")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5B94", Offset = "0x10C5B94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001541")]
			[Address(RVA = "0x322129C", Offset = "0x322129C", VA = "0x322129C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5BA4", Offset = "0x10C5BA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700043E")]
		protected JumpStage JumpStage
		{
			[Token(Token = "0x6001542")]
			[Address(RVA = "0x32212A4", Offset = "0x32212A4", VA = "0x32212A4")]
			get
			{
				return default(JumpStage);
			}
			[Token(Token = "0x6001543")]
			[Address(RVA = "0x32212AC", Offset = "0x32212AC", VA = "0x32212AC")]
			set
			{
			}
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0x3220E70", Offset = "0x3220E70", VA = "0x3220E70")]
		static HexaBodyPlayer4()
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x32212F0", Offset = "0x32212F0", VA = "0x32212F0")]
		public void SetTurningRotationSpeed(float newTurningSpeed)
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x3221320", Offset = "0x3221320", VA = "0x3221320")]
		public void SetSnapTurningSpeed(float newSnapTurningSpeed)
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x3221328", Offset = "0x3221328", VA = "0x3221328")]
		public void SetSnapTurningAngle(float newSnapTurningAngle)
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x3221330", Offset = "0x3221330", VA = "0x3221330", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x3221EE8", Offset = "0x3221EE8", VA = "0x3221EE8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x32222AC", Offset = "0x32222AC", VA = "0x32222AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5BB4", Offset = "0x10C5BB4")]
		public void FullBodyReset()
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x322232C", Offset = "0x322232C", VA = "0x322232C")]
		public void SlowMotionChanged(bool isInSlowMotion, bool slowedByChronos)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x32223EC", Offset = "0x32223EC", VA = "0x32223EC", Slot = "6")]
		protected virtual void ValidateFields()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x3222574", Offset = "0x3222574", VA = "0x3222574")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x32225D4", Offset = "0x32225D4", VA = "0x32225D4")]
		public void CalibrateHeight(float height)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x322294C", Offset = "0x322294C", VA = "0x322294C")]
		private void Update()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x3222D10", Offset = "0x3222D10", VA = "0x3222D10")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x3222EE8", Offset = "0x3222EE8", VA = "0x3222EE8")]
		private void CalcJumpHeight()
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x3223870", Offset = "0x3223870", VA = "0x3223870", Slot = "7")]
		protected virtual bool CheckCameraMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x32239C8", Offset = "0x32239C8", VA = "0x32239C8", Slot = "8")]
		protected virtual void CalibrateFromSaved()
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x3223260", Offset = "0x3223260", VA = "0x3223260")]
		private void UpdateLegs()
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x3223A10", Offset = "0x3223A10", VA = "0x3223A10", Slot = "9")]
		protected virtual void UpdateMaxCrouch()
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x3223B2C", Offset = "0x3223B2C", VA = "0x3223B2C", Slot = "10")]
		protected virtual void UpdateCrouchAmount()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x32245A8", Offset = "0x32245A8", VA = "0x32245A8", Slot = "11")]
		protected virtual void UpdateCrouchTarget()
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x32244F4", Offset = "0x32244F4", VA = "0x32244F4")]
		private float GetCrouchTarget(float crouchAmount)
		{
			return default(float);
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x322470C", Offset = "0x322470C", VA = "0x322470C", Slot = "12")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5BEC", Offset = "0x10C5BEC")]
		protected virtual void StopJumpCycle()
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0x32247E4", Offset = "0x32247E4", VA = "0x32247E4", Slot = "13")]
		public virtual void ApplyJumpDrive()
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0x3224890", Offset = "0x3224890", VA = "0x3224890", Slot = "14")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5C24", Offset = "0x10C5C24")]
		public virtual void ResetYDrive()
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x3222F74", Offset = "0x3222F74", VA = "0x3222F74")]
		private void StartJumping()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x32249B0", Offset = "0x32249B0", VA = "0x32249B0", Slot = "15")]
		protected virtual void Jumping()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x3224B04", Offset = "0x3224B04", VA = "0x3224B04", Slot = "16")]
		protected virtual void StartRetracting()
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x3224E98", Offset = "0x3224E98", VA = "0x3224E98", Slot = "17")]
		protected virtual void Retracting()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0x3224F88", Offset = "0x3224F88", VA = "0x3224F88", Slot = "18")]
		protected virtual void Landing()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0x32250C0", Offset = "0x32250C0", VA = "0x32250C0", Slot = "19")]
		protected virtual void Stomping()
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0x32250F4", Offset = "0x32250F4", VA = "0x32250F4", Slot = "20")]
		protected virtual bool GetCanAirCrouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x32232D0", Offset = "0x32232D0", VA = "0x32232D0")]
		private void UpdateLegHeight()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x3223F58", Offset = "0x3223F58", VA = "0x3223F58")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5C5C", Offset = "0x10C5C5C")]
		protected void Stand()
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x32252A8", Offset = "0x32252A8", VA = "0x32252A8")]
		public void SetCrouchLevel(int level)
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0x32252F8", Offset = "0x32252F8", VA = "0x32252F8")]
		public void SetCrouchPercent(float percent)
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0x3224700", Offset = "0x3224700", VA = "0x3224700")]
		public float GetCrouchLevel(float crouchPercent)
		{
			return default(float);
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0x3225308", Offset = "0x3225308", VA = "0x3225308", Slot = "21")]
		protected virtual void ApplyCameraOffsets()
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0x3225430", Offset = "0x3225430", VA = "0x3225430", Slot = "22")]
		protected virtual void UpdateBody()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0x322593C", Offset = "0x322593C", VA = "0x322593C", Slot = "23")]
		protected virtual void UpdateNeck()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x3225B2C", Offset = "0x3225B2C", VA = "0x3225B2C", Slot = "24")]
		protected virtual void UpdateChest(Vector3 localDir, Vector3 dir)
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x3225DE4", Offset = "0x3225DE4", VA = "0x3225DE4", Slot = "25")]
		protected virtual void UpdateLegCollider()
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x32257D8", Offset = "0x32257D8", VA = "0x32257D8")]
		private void UpdateHead()
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0x3225FD0", Offset = "0x3225FD0", VA = "0x3225FD0", Slot = "26")]
		protected virtual void Turn()
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x322600C", Offset = "0x322600C", VA = "0x322600C", Slot = "27")]
		protected virtual void ProcessSmoothTurn()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x3226130", Offset = "0x3226130", VA = "0x3226130", Slot = "28")]
		protected virtual void ProcessSnapTurn()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x3226200", Offset = "0x3226200", VA = "0x3226200", Slot = "29")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5C94", Offset = "0x10C5C94")]
		protected virtual IEnumerator SnapTurn(float sign)
		{
			return null;
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0x3222A4C", Offset = "0x3222A4C", VA = "0x3222A4C")]
		private void CheckInputs()
		{
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0x3226288", Offset = "0x3226288", VA = "0x3226288")]
		private bool HandleHMDMovement()
		{
			return default(bool);
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0x322664C", Offset = "0x322664C", VA = "0x322664C")]
		public void ApplyCustomGravity()
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x3226728", Offset = "0x3226728", VA = "0x3226728")]
		public void ChangeGravityDirection(Vector3 newCustomGravityDirection)
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0x3226864", Offset = "0x3226864", VA = "0x3226864")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5CF4", Offset = "0x10C5CF4")]
		public void RestoreGravity()
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0x322690C", Offset = "0x322690C", VA = "0x322690C")]
		public void MoveWallRunPlaneToSurface(Vector3 point, Vector3 wallHitNormal)
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0x322304C", Offset = "0x322304C", VA = "0x322304C")]
		public void CheckWallRun()
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0x3226C48", Offset = "0x3226C48", VA = "0x3226C48")]
		public bool RaycastToFindRunnableWallWithInputDirection()
		{
			return default(bool);
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0x3227594", Offset = "0x3227594", VA = "0x3227594")]
		public bool RaycastToFindRunnableWallWithCustomDirection(Vector3 customDirection, float customRaycastDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x32271C0", Offset = "0x32271C0", VA = "0x32271C0")]
		public bool CheckForCurrentRunnableWall()
		{
			return default(bool);
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x32278E0", Offset = "0x32278E0", VA = "0x32278E0")]
		public void PauseCanTestForWallRun()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x32278F0", Offset = "0x32278F0", VA = "0x32278F0")]
		public void CanCheckForWallRunAgain()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x32273DC", Offset = "0x32273DC", VA = "0x32273DC")]
		private void ActivateWallRunFromRaycast(RaycastHit velocityHit)
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0x322704C", Offset = "0x322704C", VA = "0x322704C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5D2C", Offset = "0x10C5D2C")]
		public void StopWallRun()
		{
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0x3227900", Offset = "0x3227900", VA = "0x3227900", Slot = "30")]
		protected virtual void Move()
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x3228104", Offset = "0x3228104", VA = "0x3228104", Slot = "31")]
		protected virtual void AirMove(Vector3 direction)
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x3227E04", Offset = "0x3227E04", VA = "0x3227E04")]
		public void AirStop(bool StopHandsWithBody = false)
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x322826C", Offset = "0x322826C", VA = "0x322826C", Slot = "32")]
		protected virtual void GroundMove(Vector3 direction, bool hasInput)
		{
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x322870C", Offset = "0x322870C", VA = "0x322870C", Slot = "33")]
		protected virtual Vector3 GetJumpMoveVelocity(Vector3 direction, bool hasInput)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x3228858", Offset = "0x3228858", VA = "0x3228858", Slot = "34")]
		protected virtual void CheckGrounded()
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x3228A20", Offset = "0x3228A20", VA = "0x3228A20", Slot = "35")]
		protected virtual void CheckGroundForLedges()
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x32297F0", Offset = "0x32297F0", VA = "0x32297F0", Slot = "36")]
		protected virtual void CheckSprinting()
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x32298D8", Offset = "0x32298D8", VA = "0x32298D8")]
		public void SetSitStandMode(bool sitting)
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x32298FC", Offset = "0x32298FC", VA = "0x32298FC")]
		public void Calibrate(float heightToSet = 0f)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x322993C", Offset = "0x322993C", VA = "0x322993C")]
		public void FaceDirection(Vector3 forward)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x3229A48", Offset = "0x3229A48", VA = "0x3229A48", Slot = "37")]
		public virtual void NormalizeVelocity()
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x32248F4", Offset = "0x32248F4", VA = "0x32248F4")]
		public void RemoveDrag()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x3224778", Offset = "0x3224778", VA = "0x3224778")]
		public void ResetDrag()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x3223724", Offset = "0x3223724", VA = "0x3223724")]
		private void UpdateShoulderAnchors()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x3229AD0", Offset = "0x3229AD0", VA = "0x3229AD0", Slot = "38")]
		protected virtual Vector3 GetPelvisPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x3229B24", Offset = "0x3229B24", VA = "0x3229B24", Slot = "39")]
		protected virtual float GetPelvisOffset()
		{
			return default(float);
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x3229B60", Offset = "0x3229B60", VA = "0x3229B60", Slot = "40")]
		protected virtual void ScaleBalls(bool shrink)
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0x3221A60", Offset = "0x3221A60", VA = "0x3221A60")]
		public void SetArmLength(float armLength)
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x3229C24", Offset = "0x3229C24", VA = "0x3229C24")]
		private void CheckShapes()
		{
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0x3222AC0", Offset = "0x3222AC0", VA = "0x3222AC0")]
		private void UpdateShapes()
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0x32219A4", Offset = "0x32219A4", VA = "0x32219A4")]
		private void SetupShapes()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0x3229C6C", Offset = "0x3229C6C", VA = "0x3229C6C")]
		public void MoveToPosition(Vector3 locoBallBottom)
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x322A294", Offset = "0x322A294", VA = "0x322A294")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x10C5D64", Offset = "0x10C5D64")]
		public void TeleportToPoint()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0x3229290", Offset = "0x3229290", VA = "0x3229290")]
		public void MoveToPositionWithoutStop(Vector3 teleportPoint)
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x322A180", Offset = "0x322A180", VA = "0x322A180")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x322A2D4", Offset = "0x322A2D4", VA = "0x322A2D4", Slot = "41")]
		public virtual void ApplyJumpMass()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x3221E78", Offset = "0x3221E78", VA = "0x3221E78")]
		private void CacheMass()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x322A400", Offset = "0x322A400", VA = "0x322A400", Slot = "42")]
		protected virtual void ResetMass()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x322A484", Offset = "0x322A484", VA = "0x322A484")]
		public void IncreaseBodyMass(float bodyMassMultiplier, bool increaseBodyStrength = true, bool increaseOneHand = false, HVRHandSide handSide = HVRHandSide.Left)
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x322A704", Offset = "0x322A704", VA = "0x322A704")]
		public void DecreaseBodyMass(float bodyMassMultiplier, bool decreaseBodyStrength = true, bool decreaseOneHand = false, HVRHandSide handSide = HVRHandSide.Left)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x322A9A8", Offset = "0x322A9A8", VA = "0x322A9A8")]
		public void ResetTorsoStrengtToOriginal()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0x322A9E0", Offset = "0x322A9E0", VA = "0x322A9E0")]
		public void ResetMassToOriginal()
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x3226520", Offset = "0x3226520", VA = "0x3226520")]
		public Vector3 Move(Vector3 moveDelta)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x3228184", Offset = "0x3228184", VA = "0x3228184")]
		public void AddVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x3228684", Offset = "0x3228684", VA = "0x3228684")]
		private void ApplyFrictionFactor(float factor)
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x322AA74", Offset = "0x322AA74", VA = "0x322AA74")]
		public void OverrideBallFriction(float dynamicFriction, float staticFriction)
		{
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0x322AAE8", Offset = "0x322AAE8", VA = "0x322AAE8")]
		public void StopFrictionOverride()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x3223F60", Offset = "0x3223F60", VA = "0x3223F60")]
		public void ChargeJump()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x3224D00", Offset = "0x3224D00", VA = "0x3224D00")]
		public void ResetJumpBoost()
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x322AAF4", Offset = "0x322AAF4", VA = "0x322AAF4")]
		public void GetJumpBoostPowerTiers(float maxJumpValue, bool isRightHandPower, float jumpBoostMaxMultiplier = 1f)
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x322AB8C", Offset = "0x322AB8C", VA = "0x322AB8C")]
		public HexaBodyPlayer4()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public enum WallRunType
	{
		[Token(Token = "0x4000E21")]
		None,
		[Token(Token = "0x4000E22")]
		Normal,
		[Token(Token = "0x4000E23")]
		Advanced
	}
	[Token(Token = "0x20002BA")]
	public class LocoBallCollision : MonoBehaviour
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HexaBodyPlayer4 hexaBody;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BodyWeightTime;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEEBC", Offset = "0x10BEEBC")]
		public float AverageBodyWeight;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float GroundAngle;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float GroundDot;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CircularBuffer<float> _buffer;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CollisionDetector _collisionDetector;

		[Token(Token = "0x17000441")]
		public CollisionDetector CollisionDetector
		{
			[Token(Token = "0x60015B3")]
			[Address(RVA = "0x15BB1AC", Offset = "0x15BB1AC", VA = "0x15BB1AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x15BB1B4", Offset = "0x15BB1B4", VA = "0x15BB1B4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x15BB340", Offset = "0x15BB340", VA = "0x15BB340")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x15BB3F8", Offset = "0x15BB3F8", VA = "0x15BB3F8")]
		private void Average(CircularBuffer<float> buffer, float force, float time, float resetTime, float maxAllowed, ref float avg)
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x15BB544", Offset = "0x15BB544", VA = "0x15BB544")]
		public LocoBallCollision()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class HexaCameraRig : MonoBehaviour
	{
		[Token(Token = "0x20002BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5BD4", Offset = "0x10A5BD4")]
		private sealed class <UpdateTrackingOrigin>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000443")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015C3")]
				[Address(RVA = "0x1DDD4E4", Offset = "0x1DDD4E4", VA = "0x1DDD4E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000444")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015C5")]
				[Address(RVA = "0x1DDD52C", Offset = "0x1DDD52C", VA = "0x1DDD52C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x1DDD458", Offset = "0x1DDD458", VA = "0x1DDD458")]
			[DebuggerHidden]
			public <UpdateTrackingOrigin>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60015C1")]
			[Address(RVA = "0x1DDD484", Offset = "0x1DDD484", VA = "0x1DDD484", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015C2")]
			[Address(RVA = "0x1DDD488", Offset = "0x1DDD488", VA = "0x1DDD488", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015C4")]
			[Address(RVA = "0x1DDD4EC", Offset = "0x1DDD4EC", VA = "0x1DDD4EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEEF4", Offset = "0x10BEEF4")]
		public Transform Camera;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FloorOffsetTransform;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CameraYOffset;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TrackingOriginModeFlags TrackingSpace;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TrackingOriginModeFlags _previousTrackingSpace;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool canUpdateFloortOffset;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _floorOffset;

		[Token(Token = "0x17000442")]
		public float FloorOffset
		{
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0x322AF4C", Offset = "0x322AF4C", VA = "0x322AF4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x322541C", Offset = "0x322541C", VA = "0x322541C")]
			set
			{
			}
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x322AF88", Offset = "0x322AF88", VA = "0x322AF88")]
		private void Start()
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x322AF54", Offset = "0x322AF54", VA = "0x322AF54")]
		public void UpdateFloorOffset()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x322AFC8", Offset = "0x322AFC8", VA = "0x322AFC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x322AF94", Offset = "0x322AF94", VA = "0x322AF94")]
		private void Setup()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x322AFFC", Offset = "0x322AFFC", VA = "0x322AFFC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5DEC", Offset = "0x10C5DEC")]
		private IEnumerator UpdateTrackingOrigin(TrackingOriginModeFlags originFlags)
		{
			return null;
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x322B058", Offset = "0x322B058", VA = "0x322B058")]
		public HexaCameraRig()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class HexaHands : HexaHandsBase
	{
		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEF3C", Offset = "0x10BEF3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEF3C", Offset = "0x10BEF3C")]
		public float Spring;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float Damper;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float MaxForce;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float SlerpSpring;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float SlerpDamper;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float SlerpMaxForce;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public BasicGrabber Grabber;

		[Token(Token = "0x17000445")]
		public override bool IsLeft
		{
			[Token(Token = "0x60015C6")]
			[Address(RVA = "0x322B070", Offset = "0x322B070", VA = "0x322B070", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x322B144", Offset = "0x322B144", VA = "0x322B144", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x322BAC8", Offset = "0x322BAC8", VA = "0x322BAC8")]
		private void OnReleased()
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x322BADC", Offset = "0x322BADC", VA = "0x322BADC")]
		private void OnGrabbed()
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x322BAEC", Offset = "0x322BAEC", VA = "0x322BAEC", Slot = "22")]
		protected override void SetStrength(StrengthState state)
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x322BC0C", Offset = "0x322BC0C", VA = "0x322BC0C", Slot = "16")]
		protected override HandGrabState GetHandState()
		{
			return default(HandGrabState);
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x322BD24", Offset = "0x322BD24", VA = "0x322BD24", Slot = "11")]
		protected override bool CanUnstuck()
		{
			return default(bool);
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0x322BDE0", Offset = "0x322BDE0", VA = "0x322BDE0")]
		public HexaHands()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10A5BE4", Offset = "0x10A5BE4")]
	public abstract class HexaHandsBase : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002BF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5C44", Offset = "0x10A5C44")]
		private sealed class <>c
		{
			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__54_1;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Collider, bool> <>9__56_0;

			[Token(Token = "0x60015F1")]
			[Address(RVA = "0x1DDD598", Offset = "0x1DDD598", VA = "0x1DDD598")]
			public <>c()
			{
			}

			[Token(Token = "0x60015F2")]
			[Address(RVA = "0x1DDD5A0", Offset = "0x1DDD5A0", VA = "0x1DDD5A0")]
			internal bool <Awake>b__54_1(Collider e)
			{
				return default(bool);
			}

			[Token(Token = "0x60015F3")]
			[Address(RVA = "0x1DDD630", Offset = "0x1DDD630", VA = "0x1DDD630")]
			internal bool <CleanColliders>b__56_0(Collider e)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5C54", Offset = "0x10A5C54")]
		private sealed class <CleanColliders>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HexaHandsBase <>4__this;

			[Token(Token = "0x1700044C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015F7")]
				[Address(RVA = "0x1DDD86C", Offset = "0x1DDD86C", VA = "0x1DDD86C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700044D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015F9")]
				[Address(RVA = "0x1DDD8B4", Offset = "0x1DDD8B4", VA = "0x1DDD8B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015F4")]
			[Address(RVA = "0x1DDD694", Offset = "0x1DDD694", VA = "0x1DDD694")]
			[DebuggerHidden]
			public <CleanColliders>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x60015F5")]
			[Address(RVA = "0x1DDD6C0", Offset = "0x1DDD6C0", VA = "0x1DDD6C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015F6")]
			[Address(RVA = "0x1DDD6C4", Offset = "0x1DDD6C4", VA = "0x1DDD6C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015F8")]
			[Address(RVA = "0x1DDD874", Offset = "0x1DDD874", VA = "0x1DDD874", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigidBody;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BEF9C", Offset = "0x10BEF9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BEF9C", Offset = "0x10BEF9C")]
		public Transform Target;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BEFFC", Offset = "0x10BEFFC")]
		public Transform Shoulder;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HexaHandsBase OtherHand;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HexaBodyPlayer4 HexaBody;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform Pelvis;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF034", Offset = "0x10BF034")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF034", Offset = "0x10BF034")]
		public float ArmLength;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int SolverIterations;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int SolverVelocityIterations;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float InertiaTensor;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF094", Offset = "0x10BF094")]
		public bool EnableStuckDetection;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float StuckForce;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float StuckTime;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float StuckResetTime;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float DistanceThreshold;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF0CC", Offset = "0x10BF0CC")]
		public bool EnableDownwardStuckDetection;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float DownStuckTime;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float DownStuckResetTime;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float DownStuckRatio;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float DownDistanceThreshold;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float DownMaxAllowedForce;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF104", Offset = "0x10BF104")]
		public LayerMask UnstuckHandLayerIgnore;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF13C", Offset = "0x10BF13C")]
		public Collider[] HandColliders;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF174", Offset = "0x10BF174")]
		public HandGrabState HandState;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public StrengthState CurrentStrengthState;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float MaxStuckForce;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float MaxDownwardStuck;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float AverageStuckForce;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float AverageDownwardStuck;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 _previousControllerPosition;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion _previousRotation;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion _jointOffset;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool _hasHexa;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly CircularBuffer<float> PullBuffer;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly CircularBuffer<float> DownwardStuckBuffer;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly CircularBuffer<float> HeldForceBuffer;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly CircularBuffer<float> HandForceBuffer;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF1AC", Offset = "0x10BF1AC")]
		private Rigidbody <RigidBody>k__BackingField;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF1BC", Offset = "0x10BF1BC")]
		private ConfigurableJoint <Joint>k__BackingField;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private CollisionDetector _collision;

		[Token(Token = "0x17000446")]
		public abstract bool IsLeft
		{
			[Token(Token = "0x60015CE")]
			get;
		}

		[Token(Token = "0x17000447")]
		public virtual float BodyMass
		{
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x322BF50", Offset = "0x322BF50", VA = "0x322BF50", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000448")]
		public float BodyWeight
		{
			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x322BFF8", Offset = "0x322BFF8", VA = "0x322BFF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000449")]
		public Rigidbody RigidBody
		{
			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x322C03C", Offset = "0x322C03C", VA = "0x322C03C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5E9C", Offset = "0x10C5E9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x322C044", Offset = "0x322C044", VA = "0x322C044")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5EAC", Offset = "0x10C5EAC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044A")]
		public ConfigurableJoint Joint
		{
			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x322C04C", Offset = "0x322C04C", VA = "0x322C04C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5EBC", Offset = "0x10C5EBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x322C054", Offset = "0x322C054", VA = "0x322C054")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5ECC", Offset = "0x10C5ECC")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700044B")]
		public CollisionDetector Collision
		{
			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x322C064", Offset = "0x322C064", VA = "0x322C064")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x322B368", Offset = "0x322B368", VA = "0x322B368", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x322C0E4", Offset = "0x322C0E4", VA = "0x322C0E4", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x322C06C", Offset = "0x322C06C", VA = "0x322C06C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C5EDC", Offset = "0x10C5EDC")]
		private IEnumerator CleanColliders()
		{
			return null;
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x322C0E8", Offset = "0x322C0E8", VA = "0x322C0E8")]
		public void TakeJointOffset()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x322C190", Offset = "0x322C190", VA = "0x322C190", Slot = "8")]
		protected virtual void SetupJoint()
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x322C284", Offset = "0x322C284", VA = "0x322C284", Slot = "9")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x322C690", Offset = "0x322C690", VA = "0x322C690", Slot = "10")]
		protected virtual void UpdateHandStrength()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x322C694", Offset = "0x322C694", VA = "0x322C694", Slot = "11")]
		protected virtual bool CanUnstuck()
		{
			return default(bool);
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x322C458", Offset = "0x322C458", VA = "0x322C458")]
		private void UpdateStuckDetection()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x322C69C", Offset = "0x322C69C", VA = "0x322C69C")]
		private void Average(CircularBuffer<float> buffer, float force, float time, float resetTime, float maxAllowed, ref float avg, ref float max)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x322C800", Offset = "0x322C800", VA = "0x322C800", Slot = "12")]
		protected virtual bool StuckDetection(Vector3 dir, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x322C98C", Offset = "0x322C98C", VA = "0x322C98C", Slot = "13")]
		protected virtual bool DownwardStuckDetection(Vector3 dir, float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x322CAD4", Offset = "0x322CAD4", VA = "0x322CAD4", Slot = "14")]
		protected virtual void Unstuck()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x322CF64", Offset = "0x322CF64", VA = "0x322CF64", Slot = "15")]
		protected virtual void UpdateHandState()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x322CFA4", Offset = "0x322CFA4", VA = "0x322CFA4", Slot = "16")]
		protected virtual HandGrabState GetHandState()
		{
			return default(HandGrabState);
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x322CFAC", Offset = "0x322CFAC", VA = "0x322CFAC", Slot = "17")]
		protected virtual void SetHandState(HandGrabState newState)
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0x322CFD0", Offset = "0x322CFD0", VA = "0x322CFD0", Slot = "18")]
		protected virtual void OnHandStateChanged(HandGrabState newState, HandGrabState oldState)
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0x322CFD4", Offset = "0x322CFD4", VA = "0x322CFD4", Slot = "19")]
		protected virtual void UpdateRotation()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x322C2FC", Offset = "0x322C2FC", VA = "0x322C2FC")]
		protected void UpdateJointAnchors()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x322D084", Offset = "0x322D084", VA = "0x322D084", Slot = "20")]
		protected virtual void UpdateTargetVelocity()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0x322D3E8", Offset = "0x322D3E8", VA = "0x322D3E8", Slot = "21")]
		protected virtual void SetStrengthState(StrengthState state)
		{
		}

		[Token(Token = "0x60015EB")]
		protected abstract void SetStrength(StrengthState state);

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0x322D308", Offset = "0x322D308", VA = "0x322D308")]
		public static Vector3 AngularVelocity(Quaternion current, Quaternion previous)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0x322CE8C", Offset = "0x322CE8C", VA = "0x322CE8C")]
		public static Bounds GetColliderBounds(Collider[] colliders)
		{
			return default(Bounds);
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x322BDFC", Offset = "0x322BDFC", VA = "0x322BDFC")]
		protected HexaHandsBase()
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x322D40C", Offset = "0x322D40C", VA = "0x322D40C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5F3C", Offset = "0x10C5F3C")]
		private bool <Awake>b__54_0(HexaHandsBase e)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002C1")]
	public static class Kinematics
	{
		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x15B9BA4", Offset = "0x15B9BA4", VA = "0x15B9BA4")]
		public static float DistanceToStop(float v0, float a)
		{
			return default(float);
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x15B9BB4", Offset = "0x15B9BB4", VA = "0x15B9BB4")]
		public static float TimeToStop(float d, float v0)
		{
			return default(float);
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x15B9BCC", Offset = "0x15B9BCC", VA = "0x15B9BCC")]
		public static float SolveTimeToVelocity(float d, float v0, float vFinal)
		{
			return default(float);
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x15B9BE0", Offset = "0x15B9BE0", VA = "0x15B9BE0")]
		public static float SolveTime(float v, float a)
		{
			return default(float);
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x15B9BE8", Offset = "0x15B9BE8", VA = "0x15B9BE8")]
		public static float GetJumpVelocity(float gravity, float height)
		{
			return default(float);
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x15B9C08", Offset = "0x15B9C08", VA = "0x15B9C08")]
		public static float GetHeight(float v0, float gravity)
		{
			return default(float);
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0x15B9C1C", Offset = "0x15B9C1C", VA = "0x15B9C1C")]
		public static float SolveAccelerationByDistance(float d, float t, float v0)
		{
			return default(float);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x15B9C38", Offset = "0x15B9C38", VA = "0x15B9C38")]
		public static float SolveAccelerationByVelocity(float v0, float vFinal, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x15B9C44", Offset = "0x15B9C44", VA = "0x15B9C44")]
		public static void Solve(float d, float v0, float a, float vMax, out bool accelerate, out bool deaccelerate)
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public enum CrouchLevel
	{
		[Token(Token = "0x4000E6A")]
		Standing,
		[Token(Token = "0x4000E6B")]
		KneeBent,
		[Token(Token = "0x4000E6C")]
		Squat,
		[Token(Token = "0x4000E6D")]
		SuperSquat,
		[Token(Token = "0x4000E6E")]
		ButtOnTheFloor
	}
	[Token(Token = "0x20002C3")]
	public enum LegStage
	{
		[Token(Token = "0x4000E70")]
		Standing,
		[Token(Token = "0x4000E71")]
		Jumping,
		[Token(Token = "0x4000E72")]
		JumpRetract,
		[Token(Token = "0x4000E73")]
		Landing
	}
	[Token(Token = "0x20002C4")]
	public enum SitStand
	{
		[Token(Token = "0x4000E75")]
		Sitting,
		[Token(Token = "0x4000E76")]
		Standing
	}
	[Token(Token = "0x20002C5")]
	public enum LegStatus
	{
		[Token(Token = "0x4000E78")]
		Standing,
		[Token(Token = "0x4000E79")]
		Jumping
	}
	[Token(Token = "0x20002C6")]
	public enum JumpStage
	{
		[Token(Token = "0x4000E7B")]
		Jumping,
		[Token(Token = "0x4000E7C")]
		Retracting,
		[Token(Token = "0x4000E7D")]
		Landing,
		[Token(Token = "0x4000E7E")]
		Stomping,
		[Token(Token = "0x4000E7F")]
		LandingGrounded
	}
	[Serializable]
	[Token(Token = "0x20002C7")]
	public struct PlayerInputState
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Active;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool JustActivated;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool JustDeactivated;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Value;
	}
	[Token(Token = "0x20002C8")]
	public enum HandGrabState
	{
		[Token(Token = "0x4000E85")]
		None,
		[Token(Token = "0x4000E86")]
		DynamicGrab,
		[Token(Token = "0x4000E87")]
		KinematicGrab,
		[Token(Token = "0x4000E88")]
		Climbing
	}
	[Token(Token = "0x20002C9")]
	public enum StrengthState
	{
		[Token(Token = "0x4000E8A")]
		Default,
		[Token(Token = "0x4000E8B")]
		OneHandSupport,
		[Token(Token = "0x4000E8C")]
		TwoHandSupport,
		[Token(Token = "0x4000E8D")]
		OneHandKinematic,
		[Token(Token = "0x4000E8E")]
		TwoHandKinematic,
		[Token(Token = "0x4000E8F")]
		OneHandClimbing,
		[Token(Token = "0x4000E90")]
		TwoHandClimbing,
		[Token(Token = "0x4000E91")]
		Weak,
		[Token(Token = "0x4000E92")]
		AverageHuman,
		[Token(Token = "0x4000E93")]
		StrongHuman,
		[Token(Token = "0x4000E94")]
		DefaultSuperheroStrength,
		[Token(Token = "0x4000E95")]
		SuperStrengthLow,
		[Token(Token = "0x4000E96")]
		SuperStrengthMedium,
		[Token(Token = "0x4000E97")]
		SuperStrengthHigh,
		[Token(Token = "0x4000E98")]
		SuperStrengthMax,
		[Token(Token = "0x4000E99")]
		SuperStrengthGod,
		[Token(Token = "0x4000E9A")]
		AlteredStrength
	}
	[Serializable]
	[Token(Token = "0x20002CA")]
	public class HexaJointDrive
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Spring;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Damper;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxForce;

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x322D480", Offset = "0x322D480", VA = "0x322D480")]
		public HexaJointDrive(float spring, float damper, float maxForce)
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0x322D4C8", Offset = "0x322D4C8", VA = "0x322D4C8")]
		public JointDrive CreateJointDrive()
		{
			return default(JointDrive);
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x322D52C", Offset = "0x322D52C", VA = "0x322D52C")]
		public void Apply(ConfigurableJoint joint)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CB")]
	public class HexaAngularJointDrive
	{
		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Spring;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Damper;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxForce;

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x2F30060", Offset = "0x2F30060", VA = "0x2F30060")]
		public JointDrive CreateJointDrive()
		{
			return default(JointDrive);
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x2F300C4", Offset = "0x2F300C4", VA = "0x2F300C4")]
		public HexaAngularJointDrive()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class HexaXRInputs : MonoBehaviour
	{
		[Token(Token = "0x20002CD")]
		private enum ButtonReadType
		{
			[Token(Token = "0x4000EDD")]
			None,
			[Token(Token = "0x4000EDE")]
			Binary,
			[Token(Token = "0x4000EDF")]
			Axis1D,
			[Token(Token = "0x4000EE0")]
			Axis2DUp,
			[Token(Token = "0x4000EE1")]
			Axis2DDown,
			[Token(Token = "0x4000EE2")]
			Axis2DLeft,
			[Token(Token = "0x4000EE3")]
			Axis2DRight
		}

		[Token(Token = "0x20002CE")]
		private struct ButtonInfo
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ButtonReadType type;

			[Token(Token = "0x600161B")]
			[Address(RVA = "0x1DDD8BC", Offset = "0x1DDD8BC", VA = "0x1DDD8BC")]
			public ButtonInfo(string name, ButtonReadType type)
			{
			}
		}

		[Token(Token = "0x4000EA1")]
		public const string OpenVR = "openvr";

		[Token(Token = "0x4000EA2")]
		public const string WindowsMR = "windowsmr";

		[Token(Token = "0x4000EA3")]
		public const string Vive = "vive";

		[Token(Token = "0x4000EA4")]
		public const string Cosmos = "cosmos";

		[Token(Token = "0x4000EA5")]
		public const string Oculus = "oculus";

		[Token(Token = "0x4000EA6")]
		public const string Knuckles = "knuckles";

		[Token(Token = "0x4000EA7")]
		public const string WMRController = "spatial";

		[Token(Token = "0x4000EA8")]
		public const string HTC = "htc";

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ControllerOffset;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsLeft;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 ThumbstickDeadZone;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float GripThreshold;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float TriggerThreshold;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Axis2DUpThreshold;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Axis2DDownThreshold;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Axis2DLeftThreshold;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Axis2DRightThreshold;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 OpenVRPositionOffset;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 OpenVRRotationOffset;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF1CC", Offset = "0x10BF1CC")]
		public PlayerInputState GripButtonState;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public PlayerInputState TriggerButtonState;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public PlayerInputState PrimaryButtonState;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public PlayerInputState SecondaryButtonState;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public PlayerInputState MenuButtonState;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public PlayerInputState JoystickButtonState;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public PlayerInputState TrackpadButtonState;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public PlayerInputState TrackPadUp;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public PlayerInputState TrackPadLeft;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public PlayerInputState TrackPadRight;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public PlayerInputState TrackPadDown;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Vector2 JoystickAxis;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector2 TrackpadAxis;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool PrimaryButton;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool SecondaryButton;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
		public bool JoystickClicked;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC7")]
		public bool TrackPadClicked;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool MenuButton;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float Grip;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool GripButton;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float Trigger;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector3 Velocity;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Vector3 AngularVelocity;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF204", Offset = "0x10BF204")]
		private bool <IsActive>k__BackingField;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public XRNode XRNode;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool IsWindowsMR;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool IsOpenVR;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public bool IsVive;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		public bool IsKnuckles;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public bool IsOculus;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
		public bool IsCosmos;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
		public bool HasTrackPad;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFF")]
		public bool IsXRInputs;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputDevice _device;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _steamInit;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected InputFeatureUsage<Vector2> JoystickAxisFeature;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected InputFeatureUsage<Vector2> TrackPadAxisFeature;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public HexaXRInputFeatures JoystickFeature;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public HexaXRInputFeatures TrackpadFeature;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ButtonInfo[] s_ButtonData;

		[Token(Token = "0x1700044E")]
		public bool IsActive
		{
			[Token(Token = "0x6001608")]
			[Address(RVA = "0x322D73C", Offset = "0x322D73C", VA = "0x322D73C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5F9C", Offset = "0x10C5F9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001609")]
			[Address(RVA = "0x322D744", Offset = "0x322D744", VA = "0x322D744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5FAC", Offset = "0x10C5FAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public bool WindowsWithTrackPad
		{
			[Token(Token = "0x600160A")]
			[Address(RVA = "0x322D750", Offset = "0x322D750", VA = "0x322D750")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000450")]
		public InputDevice Device
		{
			[Token(Token = "0x600160B")]
			[Address(RVA = "0x322D770", Offset = "0x322D770", VA = "0x322D770")]
			get
			{
				return default(InputDevice);
			}
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0x322D7B4", Offset = "0x322D7B4", VA = "0x322D7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0x322D7C0", Offset = "0x322D7C0", VA = "0x322D7C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0x322D7C4", Offset = "0x322D7C4", VA = "0x322D7C4")]
		private void Update()
		{
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0x322D7C8", Offset = "0x322D7C8", VA = "0x322D7C8")]
		private void UpdateInputs()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0x322D8CC", Offset = "0x322D8CC", VA = "0x322D8CC")]
		private void UpdateDevice()
		{
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0x322E1C0", Offset = "0x322E1C0", VA = "0x322E1C0")]
		private void UpdateControllerOffset()
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x322DB04", Offset = "0x322DB04", VA = "0x322DB04")]
		protected void UpdateInput()
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x322DB64", Offset = "0x322DB64", VA = "0x322DB64")]
		private void CorrectDeadzone()
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x322DB98", Offset = "0x322DB98", VA = "0x322DB98")]
		protected void CheckButtonState(HexaButtons button, ref PlayerInputState buttonState)
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0x322E2CC", Offset = "0x322E2CC", VA = "0x322E2CC")]
		protected void ResetButton(ref PlayerInputState buttonState)
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x322E2D8", Offset = "0x322E2D8", VA = "0x322E2D8")]
		protected void SetButtonState(ref PlayerInputState buttonState, bool pressed)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x322E304", Offset = "0x322E304", VA = "0x322E304")]
		public bool IsPressed(InputDevice device, HexaXRInputFeatures inputFeature, float threshold = 0f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x322DFC0", Offset = "0x322DFC0", VA = "0x322DFC0")]
		private void CheckControllerType(string manufacturer, string controllerName)
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x322E47C", Offset = "0x322E47C", VA = "0x322E47C")]
		public HexaXRInputs()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public enum HexaButtons
	{
		[Token(Token = "0x4000EE7")]
		Grip,
		[Token(Token = "0x4000EE8")]
		Trigger,
		[Token(Token = "0x4000EE9")]
		Primary,
		[Token(Token = "0x4000EEA")]
		PrimaryTouch,
		[Token(Token = "0x4000EEB")]
		Secondary,
		[Token(Token = "0x4000EEC")]
		SecondaryTouch,
		[Token(Token = "0x4000EED")]
		Menu,
		[Token(Token = "0x4000EEE")]
		JoystickButton,
		[Token(Token = "0x4000EEF")]
		TrackPadButton,
		[Token(Token = "0x4000EF0")]
		JoystickTouch,
		[Token(Token = "0x4000EF1")]
		TriggerTouch,
		[Token(Token = "0x4000EF2")]
		ThumbTouch,
		[Token(Token = "0x4000EF3")]
		TriggerNearTouch,
		[Token(Token = "0x4000EF4")]
		ThumbNearTouch,
		[Token(Token = "0x4000EF5")]
		TrackPadLeft,
		[Token(Token = "0x4000EF6")]
		TrackPadRight,
		[Token(Token = "0x4000EF7")]
		TrackPadUp,
		[Token(Token = "0x4000EF8")]
		TrackPadDown
	}
	[Token(Token = "0x20002D0")]
	public enum HexaXRInputFeatures
	{
		[Token(Token = "0x4000EFA")]
		None,
		[Token(Token = "0x4000EFB")]
		MenuButton,
		[Token(Token = "0x4000EFC")]
		Trigger,
		[Token(Token = "0x4000EFD")]
		Grip,
		[Token(Token = "0x4000EFE")]
		TriggerPressed,
		[Token(Token = "0x4000EFF")]
		GripPressed,
		[Token(Token = "0x4000F00")]
		PrimaryButton,
		[Token(Token = "0x4000F01")]
		PrimaryTouch,
		[Token(Token = "0x4000F02")]
		SecondaryButton,
		[Token(Token = "0x4000F03")]
		SecondaryTouch,
		[Token(Token = "0x4000F04")]
		Primary2DAxisTouch,
		[Token(Token = "0x4000F05")]
		Primary2DAxisClick,
		[Token(Token = "0x4000F06")]
		Secondary2DAxisTouch,
		[Token(Token = "0x4000F07")]
		Secondary2DAxisClick,
		[Token(Token = "0x4000F08")]
		PrimaryAxis2DUp,
		[Token(Token = "0x4000F09")]
		PrimaryAxis2DDown,
		[Token(Token = "0x4000F0A")]
		PrimaryAxis2DLeft,
		[Token(Token = "0x4000F0B")]
		PrimaryAxis2DRight,
		[Token(Token = "0x4000F0C")]
		SecondaryAxis2DUp,
		[Token(Token = "0x4000F0D")]
		SecondaryAxis2DDown,
		[Token(Token = "0x4000F0E")]
		SecondaryAxis2DLeft,
		[Token(Token = "0x4000F0F")]
		SecondaryAxis2DRight
	}
	[Token(Token = "0x20002D1")]
	public class ObjectCollisionDisabler : MonoBehaviour
	{
		[Token(Token = "0x20002D2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5C64", Offset = "0x10A5C64")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<Transform, bool> <>9__2;

			[Token(Token = "0x600161F")]
			[Address(RVA = "0x1DE03D0", Offset = "0x1DE03D0", VA = "0x1DE03D0")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001620")]
			[Address(RVA = "0x1DE03D8", Offset = "0x1DE03D8", VA = "0x1DE03D8")]
			internal bool <DisableCollisions>b__2(Transform e)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20002D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5C74", Offset = "0x10A5C74")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__4_0;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Collider, bool> <>9__4_1;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Collider, bool> <>9__4_3;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<Collider, bool> <>9__4_4;

			[Token(Token = "0x6001622")]
			[Address(RVA = "0x1DE0338", Offset = "0x1DE0338", VA = "0x1DE0338")]
			public <>c()
			{
			}

			[Token(Token = "0x6001623")]
			[Address(RVA = "0x1DE0340", Offset = "0x1DE0340", VA = "0x1DE0340")]
			internal bool <DisableCollisions>b__4_0(Collider e)
			{
				return default(bool);
			}

			[Token(Token = "0x6001624")]
			[Address(RVA = "0x1DE035C", Offset = "0x1DE035C", VA = "0x1DE035C")]
			internal bool <DisableCollisions>b__4_1(Collider e)
			{
				return default(bool);
			}

			[Token(Token = "0x6001625")]
			[Address(RVA = "0x1DE0388", Offset = "0x1DE0388", VA = "0x1DE0388")]
			internal bool <DisableCollisions>b__4_3(Collider e)
			{
				return default(bool);
			}

			[Token(Token = "0x6001626")]
			[Address(RVA = "0x1DE03A4", Offset = "0x1DE03A4", VA = "0x1DE03A4")]
			internal bool <DisableCollisions>b__4_4(Collider e)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool TriggersOnly;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IncludeTriggers;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Transform> Transforms;

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x312EB1C", Offset = "0x312EB1C", VA = "0x312EB1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x312EB20", Offset = "0x312EB20", VA = "0x312EB20")]
		public void DisableCollisions()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x312F600", Offset = "0x312F600", VA = "0x312F600")]
		public ObjectCollisionDisabler()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class ObjectEnabledWatcher : MonoBehaviour
	{
		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Enabled;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent Disabled;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useEnabledEvent;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool useDisabledEvent;

		[Token(Token = "0x6001627")]
		[Address(RVA = "0x312F684", Offset = "0x312F684", VA = "0x312F684")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0x312F6AC", Offset = "0x312F6AC", VA = "0x312F6AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0x312F6D4", Offset = "0x312F6D4", VA = "0x312F6D4")]
		public ObjectEnabledWatcher()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class TimeManager : MonoBehaviour
	{
		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF214", Offset = "0x10BF214")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF214", Offset = "0x10BF214")]
		public bool SmoothFixedTimeStep;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF274", Offset = "0x10BF274")]
		public int FrameSamples;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF2AC", Offset = "0x10BF2AC")]
		public int MinTimeStep;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF2E4", Offset = "0x10BF2E4")]
		public int MaxTimeStep;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF31C", Offset = "0x10BF31C")]
		private float <RefreshRate>k__BackingField;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF32C", Offset = "0x10BF32C")]
		public bool Debug;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DebugRefreshRate;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CircularBuffer<float> _buffer;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float averageFrameDelta;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF364", Offset = "0x10BF364")]
		private static TimeManager <Instance>k__BackingField;

		[Token(Token = "0x17000451")]
		public float RefreshRate
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0x2DBF5FC", Offset = "0x2DBF5FC", VA = "0x2DBF5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5FBC", Offset = "0x10C5FBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600162B")]
			[Address(RVA = "0x2DBF604", Offset = "0x2DBF604", VA = "0x2DBF604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5FCC", Offset = "0x10C5FCC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000452")]
		public static TimeManager Instance
		{
			[Token(Token = "0x600162C")]
			[Address(RVA = "0x2DBF60C", Offset = "0x2DBF60C", VA = "0x2DBF60C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5FDC", Offset = "0x10C5FDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600162D")]
			[Address(RVA = "0x2DBF658", Offset = "0x2DBF658", VA = "0x2DBF658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C5FEC", Offset = "0x10C5FEC")]
			private set
			{
			}
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0x2DBF6AC", Offset = "0x2DBF6AC", VA = "0x2DBF6AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0x2DBF7EC", Offset = "0x2DBF7EC", VA = "0x2DBF7EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0x2DBF890", Offset = "0x2DBF890", VA = "0x2DBF890")]
		private void SetTimeStep()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0x2DBF91C", Offset = "0x2DBF91C", VA = "0x2DBF91C")]
		private void ResetBuffer()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x2DBF9A8", Offset = "0x2DBF9A8", VA = "0x2DBF9A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x2DBFB34", Offset = "0x2DBFB34", VA = "0x2DBFB34")]
		public void OverrideRefreshRate(float refresh)
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0x2DBFB54", Offset = "0x2DBFB54", VA = "0x2DBFB54")]
		public void ResetRefreshRate()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0x2DBFBDC", Offset = "0x2DBFBDC", VA = "0x2DBFBDC")]
		public TimeManager()
		{
		}
	}
}
namespace ES3Types
{
	[Token(Token = "0x20002D6")]
	[Preserve]
	public class ES3Type_ES3Prefab : ES3Type
	{
		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001636")]
		[Address(RVA = "0x3F94934", Offset = "0x3F94934", VA = "0x3F94934")]
		public ES3Type_ES3Prefab()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x3F949FC", Offset = "0x3F949FC", VA = "0x3F949FC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001638")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D7")]
	public class ES3Type_ES3PrefabInternal : ES3Type
	{
		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x3F94A04", Offset = "0x3F94A04", VA = "0x3F94A04")]
		public ES3Type_ES3PrefabInternal()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x3F94ACC", Offset = "0x3F94ACC", VA = "0x3F94ACC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600163C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600163D")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class ES32DArrayType : ES3CollectionType
	{
		[Token(Token = "0x600163F")]
		[Address(RVA = "0x28002D8", Offset = "0x28002D8", VA = "0x28002D8")]
		public ES32DArrayType(Type type)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x28003E4", Offset = "0x28003E4", VA = "0x28003E4", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode unityObjectType)
		{
		}

		[Token(Token = "0x6001641")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x2800600", Offset = "0x2800600", VA = "0x2800600", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001643")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x2800880", Offset = "0x2800880", VA = "0x2800880", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class ES33DArrayType : ES3CollectionType
	{
		[Token(Token = "0x6001645")]
		[Address(RVA = "0x2800B50", Offset = "0x2800B50", VA = "0x2800B50")]
		public ES33DArrayType(Type type)
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x2800B54", Offset = "0x2800B54", VA = "0x2800B54", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001647")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x2800E08", Offset = "0x2800E08", VA = "0x2800E08", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001649")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x280115C", Offset = "0x280115C", VA = "0x280115C", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002DA")]
	[Preserve]
	public class ES3ArrayType : ES3CollectionType
	{
		[Token(Token = "0x600164B")]
		[Address(RVA = "0x28014CC", Offset = "0x28014CC", VA = "0x28014CC")]
		public ES3ArrayType(Type type)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x28014D0", Offset = "0x28014D0", VA = "0x28014D0")]
		public ES3ArrayType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x2801550", Offset = "0x2801550", VA = "0x2801550", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x28016D4", Offset = "0x28016D4", VA = "0x28016D4", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600164F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001650")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0x280198C", Offset = "0x280198C", VA = "0x280198C", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002DB")]
	[Preserve]
	public abstract class ES3CollectionType : ES3Type
	{
		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type elementType;

		[Token(Token = "0x6001652")]
		public abstract object Read(ES3Reader reader);

		[Token(Token = "0x6001653")]
		public abstract void ReadInto(ES3Reader reader, object obj);

		[Token(Token = "0x6001654")]
		public abstract void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode);

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x28002DC", Offset = "0x28002DC", VA = "0x28002DC")]
		public ES3CollectionType(Type type)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x2801510", Offset = "0x2801510", VA = "0x2801510")]
		public ES3CollectionType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x2806C94", Offset = "0x2806C94", VA = "0x2806C94", Slot = "4")]
		[Preserve]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001658")]
		protected virtual bool ReadICollection<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001659")]
		protected virtual void ReadICollectionInto<T>(ES3Reader reader, ICollection<T> collection, ES3Type elementType)
		{
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0x2806CA4", Offset = "0x2806CA4", VA = "0x2806CA4", Slot = "12")]
		[Preserve]
		protected virtual void ReadICollectionInto(ES3Reader reader, ICollection collection, ES3Type elementType)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[Preserve]
	public class ES3DictionaryType : ES3Type
	{
		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ES3Type keyType;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ES3Type valueType;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ES3Reflection.ES3ReflectedMethod readMethod;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected ES3Reflection.ES3ReflectedMethod readIntoMethod;

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x2807F08", Offset = "0x2807F08", VA = "0x2807F08")]
		public ES3DictionaryType(Type type)
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x2808048", Offset = "0x2808048", VA = "0x2808048")]
		public ES3DictionaryType(Type type, ES3Type keyType, ES3Type valueType)
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x28080B4", Offset = "0x28080B4", VA = "0x28080B4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x28080D8", Offset = "0x28080D8", VA = "0x28080D8")]
		public void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x600165F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001660")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x28084E8", Offset = "0x28084E8", VA = "0x28084E8")]
		public object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x28088BC", Offset = "0x28088BC", VA = "0x28088BC")]
		public void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002DD")]
	[Preserve]
	public class ES3HashSetType : ES3CollectionType
	{
		[Token(Token = "0x6001663")]
		[Address(RVA = "0x280A548", Offset = "0x280A548", VA = "0x280A548")]
		public ES3HashSetType(Type type)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x280A54C", Offset = "0x280A54C", VA = "0x280A54C", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001665")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x280AB2C", Offset = "0x280AB2C", VA = "0x280AB2C", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001667")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x280B0AC", Offset = "0x280B0AC", VA = "0x280B0AC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[Preserve]
	public class ES3ListType : ES3CollectionType
	{
		[Token(Token = "0x6001669")]
		[Address(RVA = "0x280EE44", Offset = "0x280EE44", VA = "0x280EE44")]
		public ES3ListType(Type type)
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x280EE48", Offset = "0x280EE48", VA = "0x280EE48")]
		public ES3ListType(Type type, ES3Type elementType)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x280EE88", Offset = "0x280EE88", VA = "0x280EE88", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x600166C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600166D")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x280F26C", Offset = "0x280F26C", VA = "0x280F26C", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x280F454", Offset = "0x280F454", VA = "0x280F454", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002DF")]
	[Preserve]
	public class ES3QueueType : ES3CollectionType
	{
		[Token(Token = "0x6001670")]
		[Address(RVA = "0x2810DE0", Offset = "0x2810DE0", VA = "0x2810DE0")]
		public ES3QueueType(Type type)
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x2810DE4", Offset = "0x2810DE4", VA = "0x2810DE4", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001672")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001673")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x28111B4", Offset = "0x28111B4", VA = "0x28111B4", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x28114AC", Offset = "0x28114AC", VA = "0x28114AC", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002E0")]
	[Preserve]
	public class ES3StackType : ES3CollectionType
	{
		[Serializable]
		[Token(Token = "0x20002E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A5D04", Offset = "0x10A5D04")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<MethodInfo, bool> <>9__4_0;

			[Token(Token = "0x600167D")]
			[Address(RVA = "0x1DD9EF4", Offset = "0x1DD9EF4", VA = "0x1DD9EF4")]
			public <>c()
			{
			}

			[Token(Token = "0x600167E")]
			[Address(RVA = "0x1DD9EFC", Offset = "0x1DD9EFC", VA = "0x1DD9EFC")]
			internal bool <Read>b__4_0(MethodInfo t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x3F8C510", Offset = "0x3F8C510", VA = "0x3F8C510")]
		public ES3StackType(Type type)
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x3F8C518", Offset = "0x3F8C518", VA = "0x3F8C518", Slot = "9")]
		public override void Write(object obj, ES3Writer writer, ES3.ReferenceMode memberReferenceMode)
		{
		}

		[Token(Token = "0x6001678")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001679")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x3F8C8E8", Offset = "0x3F8C8E8", VA = "0x3F8C8E8", Slot = "7")]
		public override object Read(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x3F8CD60", Offset = "0x3F8CD60", VA = "0x3F8CD60", Slot = "8")]
		public override void ReadInto(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002E2")]
	[Preserve]
	public abstract class ES3ComponentType : ES3UnityObjectType
	{
		[Token(Token = "0x4000F31")]
		protected const string gameObjectPropertyName = "goID";

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x28071D4", Offset = "0x28071D4", VA = "0x28071D4")]
		public ES3ComponentType(Type type)
		{
		}

		[Token(Token = "0x6001680")]
		protected abstract void WriteComponent(object obj, ES3Writer writer);

		[Token(Token = "0x6001681")]
		protected abstract void ReadComponent<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6001682")]
		[Address(RVA = "0x28071DC", Offset = "0x28071DC", VA = "0x28071DC", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001683")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001684")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001685")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0x2807954", Offset = "0x2807954", VA = "0x2807954")]
		private static UnityEngine.Component GetOrAddComponent(GameObject go, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0x2807A10", Offset = "0x2807A10", VA = "0x2807A10")]
		public static UnityEngine.Component CreateComponent(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E3")]
	[Preserve]
	public abstract class ES3ObjectType : ES3Type
	{
		[Token(Token = "0x6001688")]
		[Address(RVA = "0x280FACC", Offset = "0x280FACC", VA = "0x280FACC")]
		public ES3ObjectType(Type type)
		{
		}

		[Token(Token = "0x6001689")]
		protected abstract void WriteObject(object obj, ES3Writer writer);

		[Token(Token = "0x600168A")]
		protected abstract object ReadObject<T>(ES3Reader reader);

		[Token(Token = "0x600168B")]
		protected virtual void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x280FAD4", Offset = "0x280FAD4", VA = "0x280FAD4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600168D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600168E")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x20002E4")]
	[Preserve]
	public abstract class ES3ScriptableObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x600168F")]
		[Address(RVA = "0x3F89334", Offset = "0x3F89334", VA = "0x3F89334")]
		public ES3ScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x6001690")]
		protected abstract void WriteScriptableObject(object obj, ES3Writer writer);

		[Token(Token = "0x6001691")]
		protected abstract void ReadScriptableObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x3F8933C", Offset = "0x3F8933C", VA = "0x3F8933C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001693")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001694")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001695")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E5")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10A5D44", Offset = "0x10A5D44")]
	[Preserve]
	public abstract class ES3Type
	{
		[Token(Token = "0x4000F32")]
		public const string typeFieldName = "__type";

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ES3Member[] members;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPrimitive;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isValueType;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isCollection;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool isDictionary;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isEnum;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isES3TypeUnityObject;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isReflectedType;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isUnsupported;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int priority;

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x3F8D6B0", Offset = "0x3F8D6B0", VA = "0x3F8D6B0")]
		protected ES3Type(Type type)
		{
		}

		[Token(Token = "0x6001697")]
		public abstract void Write(object obj, ES3Writer writer);

		[Token(Token = "0x6001698")]
		public abstract object Read<T>(ES3Reader reader);

		[Token(Token = "0x6001699")]
		public virtual void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x3F8D95C", Offset = "0x3F8D95C", VA = "0x3F8D95C")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer)
		{
			return default(bool);
		}

		[Token(Token = "0x600169B")]
		protected void ReadUsingDerivedType<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x3F8DA6C", Offset = "0x3F8DA6C", VA = "0x3F8DA6C")]
		internal string ReadPropertyName(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x3F8DAC8", Offset = "0x3F8DAC8", VA = "0x3F8DAC8")]
		protected void WriteProperties(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x3F8DC18", Offset = "0x3F8DC18", VA = "0x3F8DC18")]
		protected object ReadProperties(ES3Reader reader, object obj)
		{
			return null;
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x3F8DC0C", Offset = "0x3F8DC0C", VA = "0x3F8DC0C")]
		protected void GetMembers(bool safe)
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x3F8F6F4", Offset = "0x3F8F6F4", VA = "0x3F8F6F4")]
		protected void GetMembers(bool safe, string[] memberNames)
		{
		}
	}
	[Token(Token = "0x20002E6")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x10A5D80", Offset = "0x10A5D80")]
	public class ES3PropertiesAttribute : Attribute
	{
		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string[] members;

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x2810DAC", Offset = "0x2810DAC", VA = "0x2810DAC")]
		public ES3PropertiesAttribute(params string[] members)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	[Preserve]
	public abstract class ES3UnityObjectType : ES3ObjectType
	{
		[Token(Token = "0x60016A2")]
		[Address(RVA = "0x3370108", Offset = "0x3370108", VA = "0x3370108")]
		public ES3UnityObjectType(Type type)
		{
		}

		[Token(Token = "0x60016A3")]
		protected abstract void WriteUnityObject(object obj, ES3Writer writer);

		[Token(Token = "0x60016A4")]
		protected abstract void ReadUnityObject<T>(ES3Reader reader, object obj);

		[Token(Token = "0x60016A5")]
		protected abstract object ReadUnityObject<T>(ES3Reader reader);

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x3376630", Offset = "0x3376630", VA = "0x3376630", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x3376644", Offset = "0x3376644", VA = "0x3376644", Slot = "13")]
		public virtual void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x60016A8")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60016A9")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x33768BC", Offset = "0x33768BC", VA = "0x33768BC")]
		protected bool WriteUsingDerivedType(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002E8")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A5DA4", Offset = "0x10A5DA4")]
	public class ES3Type_Random : ES3ObjectType
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x485F1A8", Offset = "0x485F1A8", VA = "0x485F1A8")]
		public ES3Type_Random()
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x485F274", Offset = "0x485F274", VA = "0x485F274", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016AD")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60016AE")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E9")]
	public class ES3Type_RandomArray : ES3ArrayType
	{
		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x485F37C", Offset = "0x485F37C", VA = "0x485F37C")]
		public ES3Type_RandomArray()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[Preserve]
	public class ES3Type_DateTime : ES3Type
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x3F94634", Offset = "0x3F94634", VA = "0x3F94634")]
		public ES3Type_DateTime()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x3F946FC", Offset = "0x3F946FC", VA = "0x3F946FC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016B3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002EB")]
	public class ES3Type_DateTimeArray : ES3ArrayType
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x3F94838", Offset = "0x3F94838", VA = "0x3F94838")]
		public ES3Type_DateTimeArray()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	[Preserve]
	public class ES3Type_ES3Ref : ES3Type
	{
		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x3F94C70", Offset = "0x3F94C70", VA = "0x3F94C70")]
		public ES3Type_ES3Ref()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x3F94D40", Offset = "0x3F94D40", VA = "0x3F94D40", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016B8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002ED")]
	public class ES3Type_ES3RefArray : ES3ArrayType
	{
		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x3F94E50", Offset = "0x3F94E50", VA = "0x3F94E50")]
		public ES3Type_ES3RefArray()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class ES3Type_ES3RefDictionary : ES3DictionaryType
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x3F94FC4", Offset = "0x3F94FC4", VA = "0x3F94FC4")]
		public ES3Type_ES3RefDictionary()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	[Preserve]
	public class ES3Type_UIntPtr : ES3Type
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x3371F54", Offset = "0x3371F54", VA = "0x3371F54")]
		public ES3Type_UIntPtr()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x3372028", Offset = "0x3372028", VA = "0x3372028", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016C0")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F0")]
	public class ES3Type_UIntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x33720C0", Offset = "0x33720C0", VA = "0x33720C0")]
		public ES3Type_UIntPtrArray()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	[Preserve]
	public class ES3Type_bool : ES3Type
	{
		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x3373950", Offset = "0x3373950", VA = "0x3373950")]
		public ES3Type_bool()
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x3373A24", Offset = "0x3373A24", VA = "0x3373A24", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016C5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F2")]
	public class ES3Type_boolArray : ES3ArrayType
	{
		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x3373ABC", Offset = "0x3373ABC", VA = "0x3373ABC")]
		public ES3Type_boolArray()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	[Preserve]
	public class ES3Type_byte : ES3Type
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x3373BB8", Offset = "0x3373BB8", VA = "0x3373BB8")]
		public ES3Type_byte()
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x3373C8C", Offset = "0x3373C8C", VA = "0x3373C8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016CA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F4")]
	[Preserve]
	public class ES3Type_byteArray : ES3Type
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x3373D24", Offset = "0x3373D24", VA = "0x3373D24")]
		public ES3Type_byteArray()
		{
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0x3373DF8", Offset = "0x3373DF8", VA = "0x3373DF8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016CE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F5")]
	[Preserve]
	public class ES3Type_char : ES3Type
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x3373E90", Offset = "0x3373E90", VA = "0x3373E90")]
		public ES3Type_char()
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x3373F64", Offset = "0x3373F64", VA = "0x3373F64", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016D2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F6")]
	public class ES3Type_charArray : ES3ArrayType
	{
		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x3373FFC", Offset = "0x3373FFC", VA = "0x3373FFC")]
		public ES3Type_charArray()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	[Preserve]
	public class ES3Type_decimal : ES3Type
	{
		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x33740F8", Offset = "0x33740F8", VA = "0x33740F8")]
		public ES3Type_decimal()
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x33741CC", Offset = "0x33741CC", VA = "0x33741CC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016D7")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F8")]
	public class ES3Type_decimalArray : ES3ArrayType
	{
		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x3374264", Offset = "0x3374264", VA = "0x3374264")]
		public ES3Type_decimalArray()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	[Preserve]
	public class ES3Type_double : ES3Type
	{
		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x3374360", Offset = "0x3374360", VA = "0x3374360")]
		public ES3Type_double()
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x3374434", Offset = "0x3374434", VA = "0x3374434", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016DC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FA")]
	public class ES3Type_doubleArray : ES3ArrayType
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x33744CC", Offset = "0x33744CC", VA = "0x33744CC")]
		public ES3Type_doubleArray()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	[Preserve]
	public class ES3Type_enum : ES3Type
	{
		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Type underlyingType;

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x33745C8", Offset = "0x33745C8", VA = "0x33745C8")]
		public ES3Type_enum(Type type)
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x33746A4", Offset = "0x33746A4", VA = "0x33746A4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016E1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FC")]
	[Preserve]
	public class ES3Type_float : ES3Type
	{
		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x3375190", Offset = "0x3375190", VA = "0x3375190")]
		public ES3Type_float()
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x3375264", Offset = "0x3375264", VA = "0x3375264", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016E5")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FD")]
	public class ES3Type_floatArray : ES3ArrayType
	{
		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x33752FC", Offset = "0x33752FC", VA = "0x33752FC")]
		public ES3Type_floatArray()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	[Preserve]
	public class ES3Type_int : ES3Type
	{
		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x33753F8", Offset = "0x33753F8", VA = "0x33753F8")]
		public ES3Type_int()
		{
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x33754CC", Offset = "0x33754CC", VA = "0x33754CC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016EA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FF")]
	public class ES3Type_intArray : ES3ArrayType
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x3375564", Offset = "0x3375564", VA = "0x3375564")]
		public ES3Type_intArray()
		{
		}
	}
	[Token(Token = "0x2000300")]
	[Preserve]
	public class ES3Type_IntPtr : ES3Type
	{
		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x3F99354", Offset = "0x3F99354", VA = "0x3F99354")]
		public ES3Type_IntPtr()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x3F99424", Offset = "0x3F99424", VA = "0x3F99424", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016EF")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000301")]
	public class ES3Type_IntPtrArray : ES3ArrayType
	{
		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x3F994C8", Offset = "0x3F994C8", VA = "0x3F994C8")]
		public ES3Type_IntPtrArray()
		{
		}
	}
	[Token(Token = "0x2000302")]
	[Preserve]
	public class ES3Type_long : ES3Type
	{
		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x3375660", Offset = "0x3375660", VA = "0x3375660")]
		public ES3Type_long()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x3375734", Offset = "0x3375734", VA = "0x3375734", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016F4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000303")]
	public class ES3Type_longArray : ES3ArrayType
	{
		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x33757CC", Offset = "0x33757CC", VA = "0x33757CC")]
		public ES3Type_longArray()
		{
		}
	}
	[Token(Token = "0x2000304")]
	[Preserve]
	public class ES3Type_sbyte : ES3Type
	{
		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x33758C8", Offset = "0x33758C8", VA = "0x33758C8")]
		public ES3Type_sbyte()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x337599C", Offset = "0x337599C", VA = "0x337599C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016F9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000305")]
	public class ES3Type_sbyteArray : ES3ArrayType
	{
		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x3375A34", Offset = "0x3375A34", VA = "0x3375A34")]
		public ES3Type_sbyteArray()
		{
		}
	}
	[Token(Token = "0x2000306")]
	[Preserve]
	public class ES3Type_short : ES3Type
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x3375B30", Offset = "0x3375B30", VA = "0x3375B30")]
		public ES3Type_short()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x3375C04", Offset = "0x3375C04", VA = "0x3375C04", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60016FE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000307")]
	public class ES3Type_shortArray : ES3ArrayType
	{
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x3375C9C", Offset = "0x3375C9C", VA = "0x3375C9C")]
		public ES3Type_shortArray()
		{
		}
	}
	[Token(Token = "0x2000308")]
	[Preserve]
	public class ES3Type_string : ES3Type
	{
		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x3375D98", Offset = "0x3375D98", VA = "0x3375D98")]
		public ES3Type_string()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x3375E6C", Offset = "0x3375E6C", VA = "0x3375E6C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001703")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000309")]
	public class ES3Type_StringArray : ES3ArrayType
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x4865E20", Offset = "0x4865E20", VA = "0x4865E20")]
		public ES3Type_StringArray()
		{
		}
	}
	[Token(Token = "0x200030A")]
	[Preserve]
	public class ES3Type_uint : ES3Type
	{
		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x3375EF8", Offset = "0x3375EF8", VA = "0x3375EF8")]
		public ES3Type_uint()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x3375FCC", Offset = "0x3375FCC", VA = "0x3375FCC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001708")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200030B")]
	public class ES3Type_uintArray : ES3ArrayType
	{
		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x3376064", Offset = "0x3376064", VA = "0x3376064")]
		public ES3Type_uintArray()
		{
		}
	}
	[Token(Token = "0x200030C")]
	[Preserve]
	public class ES3Type_ulong : ES3Type
	{
		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x3376160", Offset = "0x3376160", VA = "0x3376160")]
		public ES3Type_ulong()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x3376234", Offset = "0x3376234", VA = "0x3376234", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600170D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200030D")]
	public class ES3Type_ulongArray : ES3ArrayType
	{
		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x33762CC", Offset = "0x33762CC", VA = "0x33762CC")]
		public ES3Type_ulongArray()
		{
		}
	}
	[Token(Token = "0x200030E")]
	[Preserve]
	public class ES3Type_ushort : ES3Type
	{
		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x33763C8", Offset = "0x33763C8", VA = "0x33763C8")]
		public ES3Type_ushort()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x337649C", Offset = "0x337649C", VA = "0x337649C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001712")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200030F")]
	public class ES3Type_ushortArray : ES3ArrayType
	{
		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x3376534", Offset = "0x3376534", VA = "0x3376534")]
		public ES3Type_ushortArray()
		{
		}
	}
	[Token(Token = "0x2000310")]
	[Preserve]
	internal class ES3ReflectedComponentType : ES3ComponentType
	{
		[Token(Token = "0x6001715")]
		[Address(RVA = "0x2814F0C", Offset = "0x2814F0C", VA = "0x2814F0C")]
		public ES3ReflectedComponentType(Type type)
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x2814F44", Offset = "0x2814F44", VA = "0x2814F44", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001717")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000311")]
	[Preserve]
	internal class ES3ReflectedObjectType : ES3ObjectType
	{
		[Token(Token = "0x6001718")]
		[Address(RVA = "0x2814F4C", Offset = "0x2814F4C", VA = "0x2814F4C")]
		public ES3ReflectedObjectType(Type type)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x2814F84", Offset = "0x2814F84", VA = "0x2814F84", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600171A")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600171B")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000312")]
	[Preserve]
	internal class ES3ReflectedScriptableObjectType : ES3ScriptableObjectType
	{
		[Token(Token = "0x600171C")]
		[Address(RVA = "0x2814F8C", Offset = "0x2814F8C", VA = "0x2814F8C")]
		public ES3ReflectedScriptableObjectType(Type type)
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x2814FC4", Offset = "0x2814FC4", VA = "0x2814FC4", Slot = "14")]
		protected override void WriteScriptableObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600171E")]
		protected override void ReadScriptableObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000313")]
	[Preserve]
	internal class ES3ReflectedType : ES3Type
	{
		[Token(Token = "0x600171F")]
		[Address(RVA = "0x2814FCC", Offset = "0x2814FCC", VA = "0x2814FCC")]
		public ES3ReflectedType(Type type)
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x2814FF8", Offset = "0x2814FF8", VA = "0x2814FF8")]
		public ES3ReflectedType(Type type, string[] members)
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x2815038", Offset = "0x2815038", VA = "0x2815038", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001722")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001723")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000314")]
	[Preserve]
	internal class ES3ReflectedUnityObjectType : ES3UnityObjectType
	{
		[Token(Token = "0x6001724")]
		[Address(RVA = "0x281542C", Offset = "0x281542C", VA = "0x281542C")]
		public ES3ReflectedUnityObjectType(Type type)
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x2815464", Offset = "0x2815464", VA = "0x2815464", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001726")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001727")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000315")]
	[Preserve]
	internal class ES3ReflectedValueType : ES3Type
	{
		[Token(Token = "0x6001728")]
		[Address(RVA = "0x281546C", Offset = "0x281546C", VA = "0x281546C")]
		public ES3ReflectedValueType(Type type)
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x28154A4", Offset = "0x28154A4", VA = "0x28154A4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600172A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600172B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000316")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A600C", Offset = "0x10A600C")]
	public class ES3Type_BoxCollider : ES3ComponentType
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x3F916D4", Offset = "0x3F916D4", VA = "0x3F916D4")]
		public ES3Type_BoxCollider()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x3F917A0", Offset = "0x3F917A0", VA = "0x3F917A0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600172E")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000317")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6128", Offset = "0x10A6128")]
	public class ES3Type_BoxCollider2D : ES3ComponentType
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x3F91A48", Offset = "0x3F91A48", VA = "0x3F91A48")]
		public ES3Type_BoxCollider2D()
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x3F91B14", Offset = "0x3F91B14", VA = "0x3F91B14", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001732")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000318")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6260", Offset = "0x10A6260")]
	public class ES3Type_Camera : ES3ComponentType
	{
		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x3F91E5C", Offset = "0x3F91E5C", VA = "0x3F91E5C")]
		public ES3Type_Camera()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x3F91F28", Offset = "0x3F91F28", VA = "0x3F91F28", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001736")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000319")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6670", Offset = "0x10A6670")]
	public class ES3Type_CapsuleCollider : ES3ComponentType
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x3F92ACC", Offset = "0x3F92ACC", VA = "0x3F92ACC")]
		public ES3Type_CapsuleCollider()
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x3F92B98", Offset = "0x3F92B98", VA = "0x3F92B98", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600173A")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200031A")]
	[Preserve]
	public class ES3Type_EventSystem : ES3ComponentType
	{
		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x3F95568", Offset = "0x3F95568", VA = "0x3F95568")]
		public ES3Type_EventSystem()
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x3F95634", Offset = "0x3F95634", VA = "0x3F95634", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600173E")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200031B")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A67D4", Offset = "0x10A67D4")]
	[Preserve]
	public class ES3Type_Image : ES3ComponentType
	{
		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x3F9850C", Offset = "0x3F9850C", VA = "0x3F9850C")]
		public ES3Type_Image()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x3F985E4", Offset = "0x3F985E4", VA = "0x3F985E4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001742")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class ES3Type_ImageArray : ES3ArrayType
	{
		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x3F98E9C", Offset = "0x3F98E9C", VA = "0x3F98E9C")]
		public ES3Type_ImageArray()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6A94", Offset = "0x10A6A94")]
	public class ES3Type_MeshCollider : ES3ComponentType
	{
		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x48BCADC", Offset = "0x48BCADC", VA = "0x48BCADC")]
		public ES3Type_MeshCollider()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x48BCBA8", Offset = "0x48BCBA8", VA = "0x48BCBA8", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001747")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class ES3Type_MeshColliderArray : ES3ArrayType
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x48BCECC", Offset = "0x48BCECC", VA = "0x48BCECC")]
		public ES3Type_MeshColliderArray()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6BE8", Offset = "0x10A6BE8")]
	[Preserve]
	public class ES3Type_MeshFilter : ES3ComponentType
	{
		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x48BCFC8", Offset = "0x48BCFC8", VA = "0x48BCFC8")]
		public ES3Type_MeshFilter()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x48BD094", Offset = "0x48BD094", VA = "0x48BD094", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600174C")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class ES3Type_MeshFilterArray : ES3ArrayType
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x48BD140", Offset = "0x48BD140", VA = "0x48BD140")]
		public ES3Type_MeshFilterArray()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6C78", Offset = "0x10A6C78")]
	[Preserve]
	public class ES3Type_MeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x48BD23C", Offset = "0x48BD23C", VA = "0x48BD23C")]
		public ES3Type_MeshRenderer()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x48BD308", Offset = "0x48BD308", VA = "0x48BD308", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001751")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class ES3Type_MeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x485BC98", Offset = "0x485BC98", VA = "0x485BC98")]
		public ES3Type_MeshRendererArray()
		{
		}
	}
	[Token(Token = "0x2000323")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A6EC8", Offset = "0x10A6EC8")]
	public class ES3Type_ParticleSystem : ES3ComponentType
	{
		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x485D324", Offset = "0x485D324", VA = "0x485D324")]
		public ES3Type_ParticleSystem()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x485D3F0", Offset = "0x485D3F0", VA = "0x485D3F0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001756")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000324")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7230", Offset = "0x10A7230")]
	[Preserve]
	public class ES3Type_PolygonCollider2D : ES3ComponentType
	{
		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x485E674", Offset = "0x485E674", VA = "0x485E674")]
		public ES3Type_PolygonCollider2D()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x485E740", Offset = "0x485E740", VA = "0x485E740", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600175A")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class ES3Type_PolygonCollider2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x485ECC8", Offset = "0x485ECC8", VA = "0x485ECC8")]
		public ES3Type_PolygonCollider2DArray()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A73A0", Offset = "0x10A73A0")]
	public class ES3Type_RawImage : ES3ComponentType
	{
		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x485F478", Offset = "0x485F478", VA = "0x485F478")]
		public ES3Type_RawImage()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x485F550", Offset = "0x485F550", VA = "0x485F550", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600175F")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class ES3Type_RawImageArray : ES3ArrayType
	{
		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x485FAAC", Offset = "0x485FAAC", VA = "0x485FAAC")]
		public ES3Type_RawImageArray()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7548", Offset = "0x10A7548")]
	public class ES3Type_Rigidbody : ES3ComponentType
	{
		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x4860E00", Offset = "0x4860E00", VA = "0x4860E00")]
		public ES3Type_Rigidbody()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x4860ED8", Offset = "0x4860ED8", VA = "0x4860ED8", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001764")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class ES3UserType_RigidbodyArray : ES3ArrayType
	{
		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x3376AD0", Offset = "0x3376AD0", VA = "0x3376AD0")]
		public ES3UserType_RigidbodyArray()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7824", Offset = "0x10A7824")]
	public class ES3Type_SphereCollider : ES3ComponentType
	{
		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001767")]
		[Address(RVA = "0x4864A08", Offset = "0x4864A08", VA = "0x4864A08")]
		public ES3Type_SphereCollider()
		{
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0x4864AD4", Offset = "0x4864AD4", VA = "0x4864AD4", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001769")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032B")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7940", Offset = "0x10A7940")]
	public class ES3Type_Text : ES3ComponentType
	{
		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x336F510", Offset = "0x336F510", VA = "0x336F510")]
		public ES3Type_Text()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x336F5DC", Offset = "0x336F5DC", VA = "0x336F5DC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600176D")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032C")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7C38", Offset = "0x10A7C38")]
	public class ES3Type_Transform : ES3ComponentType
	{
		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int countRead;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ES3Type Instance;

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x3371830", Offset = "0x3371830", VA = "0x3371830")]
		public ES3Type_Transform()
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x33718FC", Offset = "0x33718FC", VA = "0x33718FC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001771")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032D")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7D38", Offset = "0x10A7D38")]
	public class ES3Type_AnimationCurve : ES3Type
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x3F90730", Offset = "0x3F90730", VA = "0x3F90730")]
		public ES3Type_AnimationCurve()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x3F907F8", Offset = "0x3F907F8", VA = "0x3F907F8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001775")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001776")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200032E")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7E00", Offset = "0x10A7E00")]
	[Preserve]
	public class ES3Type_AudioClip : ES3UnityObjectType
	{
		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x3F9099C", Offset = "0x3F9099C", VA = "0x3F9099C")]
		public ES3Type_AudioClip()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x3F90A68", Offset = "0x3F90A68", VA = "0x3F90A68", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600177A")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600177B")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200032F")]
	public class ES3Type_AudioClipArray : ES3ArrayType
	{
		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x3F90CB0", Offset = "0x3F90CB0", VA = "0x3F90CB0")]
		public ES3Type_AudioClipArray()
		{
		}
	}
	[Token(Token = "0x2000330")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A7F00", Offset = "0x10A7F00")]
	public class ES3Type_BoneWeight : ES3Type
	{
		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x3F90DAC", Offset = "0x3F90DAC", VA = "0x3F90DAC")]
		public ES3Type_BoneWeight()
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x3F90E74", Offset = "0x3F90E74", VA = "0x3F90E74", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001780")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000331")]
	public class ES3Type_BoneWeightArray : ES3ArrayType
	{
		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x3F91270", Offset = "0x3F91270", VA = "0x3F91270")]
		public ES3Type_BoneWeightArray()
		{
		}
	}
	[Token(Token = "0x2000332")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8054", Offset = "0x10A8054")]
	[Preserve]
	public class ES3Type_Bounds : ES3Type
	{
		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x3F9136C", Offset = "0x3F9136C", VA = "0x3F9136C")]
		public ES3Type_Bounds()
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x3F91434", Offset = "0x3F91434", VA = "0x3F91434", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001785")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000333")]
	public class ES3Type_BoundsArray : ES3ArrayType
	{
		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x3F915D8", Offset = "0x3F915D8", VA = "0x3F915D8")]
		public ES3Type_BoundsArray()
		{
		}
	}
	[Token(Token = "0x2000334")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8100", Offset = "0x10A8100")]
	[Preserve]
	public class ES3Type_CollisionModule : ES3Type
	{
		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x3F93020", Offset = "0x3F93020", VA = "0x3F93020")]
		public ES3Type_CollisionModule()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x3F930E8", Offset = "0x3F930E8", VA = "0x3F930E8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600178A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600178B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000335")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A836C", Offset = "0x10A836C")]
	[Preserve]
	public class ES3Type_Color : ES3Type
	{
		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x3F937E8", Offset = "0x3F937E8", VA = "0x3F937E8")]
		public ES3Type_Color()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x3F938B0", Offset = "0x3F938B0", VA = "0x3F938B0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600178F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000336")]
	public class ES3Type_ColorArray : ES3ArrayType
	{
		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x3F93EF0", Offset = "0x3F93EF0", VA = "0x3F93EF0")]
		public ES3Type_ColorArray()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8450", Offset = "0x10A8450")]
	[Preserve]
	public class ES3Type_Color32 : ES3Type
	{
		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x3F93ACC", Offset = "0x3F93ACC", VA = "0x3F93ACC")]
		public ES3Type_Color32()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x3F93B94", Offset = "0x3F93B94", VA = "0x3F93B94", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001794")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x3F93DAC", Offset = "0x3F93DAC", VA = "0x3F93DAC")]
		public static bool Equals(Color32 a, Color32 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000338")]
	public class ES3Type_Color32Array : ES3ArrayType
	{
		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x3F93DF4", Offset = "0x3F93DF4", VA = "0x3F93DF4")]
		public ES3Type_Color32Array()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8534", Offset = "0x10A8534")]
	[Preserve]
	public class ES3Type_ColorBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x3F93FEC", Offset = "0x3F93FEC", VA = "0x3F93FEC")]
		public ES3Type_ColorBySpeedModule()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x3F940B4", Offset = "0x3F940B4", VA = "0x3F940B4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600179A")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600179B")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A85FC", Offset = "0x10A85FC")]
	public class ES3Type_ColorOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x3F94360", Offset = "0x3F94360", VA = "0x3F94360")]
		public ES3Type_ColorOverLifetimeModule()
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x3F94428", Offset = "0x3F94428", VA = "0x3F94428", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600179F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017A0")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033B")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A86A8", Offset = "0x10A86A8")]
	[Preserve]
	public class ES3Type_EmissionModule : ES3Type
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x3F9513C", Offset = "0x3F9513C", VA = "0x3F9513C")]
		public ES3Type_EmissionModule()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x3F95204", Offset = "0x3F95204", VA = "0x3F95204", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017A4")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017A5")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033C")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A87A8", Offset = "0x10A87A8")]
	[Preserve]
	public class ES3Type_ExternalForcesModule : ES3Type
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x3F9563C", Offset = "0x3F9563C", VA = "0x3F9563C")]
		public ES3Type_ExternalForcesModule()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x3F95704", Offset = "0x3F95704", VA = "0x3F95704", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017A9")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017AA")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033D")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8854", Offset = "0x10A8854")]
	[Preserve]
	public class ES3Type_Flare : ES3Type
	{
		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x3F958E4", Offset = "0x3F958E4", VA = "0x3F958E4")]
		public ES3Type_Flare()
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x3F959AC", Offset = "0x3F959AC", VA = "0x3F959AC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017AE")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017AF")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class ES3Type_FlareArray : ES3ArrayType
	{
		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x3F95A84", Offset = "0x3F95A84", VA = "0x3F95A84")]
		public ES3Type_FlareArray()
		{
		}
	}
	[Token(Token = "0x200033F")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A88E4", Offset = "0x10A88E4")]
	public class ES3Type_Font : ES3UnityObjectType
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x3F95B80", Offset = "0x3F95B80", VA = "0x3F95B80")]
		public ES3Type_Font()
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x3F95C4C", Offset = "0x3F95C4C", VA = "0x3F95C4C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017B4")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017B5")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000340")]
	public class ES3Type_FontArray : ES3ArrayType
	{
		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x3F95D78", Offset = "0x3F95D78", VA = "0x3F95D78")]
		public ES3Type_FontArray()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8990", Offset = "0x10A8990")]
	public class ES3Type_ForceOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x3F95E74", Offset = "0x3F95E74", VA = "0x3F95E74")]
		public ES3Type_ForceOverLifetimeModule()
		{
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x3F95F3C", Offset = "0x3F95F3C", VA = "0x3F95F3C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017BA")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017BB")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000342")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8B00", Offset = "0x10A8B00")]
	public class ES3Type_GameObject : ES3UnityObjectType
	{
		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10A8C38", Offset = "0x10A8C38")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type type;

			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Predicate<UnityEngine.Component> <>9__0;

			[Token(Token = "0x60017C8")]
			[Address(RVA = "0x1DD9F28", Offset = "0x1DD9F28", VA = "0x1DD9F28")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60017C9")]
			[Address(RVA = "0x1DD9F30", Offset = "0x1DD9F30", VA = "0x1DD9F30")]
			internal bool <ReadComponents>b__0(UnityEngine.Component x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000F95")]
		private const string prefabPropertyName = "es3Prefab";

		[Token(Token = "0x4000F96")]
		private const string transformPropertyName = "transformID";

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool saveChildren;

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x3F9642C", Offset = "0x3F9642C", VA = "0x3F9642C")]
		public ES3Type_GameObject()
		{
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x3F964F8", Offset = "0x3F964F8", VA = "0x3F964F8", Slot = "13")]
		public override void WriteObject(object obj, ES3Writer writer, ES3.ReferenceMode mode)
		{
		}

		[Token(Token = "0x60017BF")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017C0")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x3F970E8", Offset = "0x3F970E8", VA = "0x3F970E8")]
		private void ReadComponents(ES3Reader reader, GameObject go)
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x3F97770", Offset = "0x3F97770", VA = "0x3F97770")]
		private GameObject CreateNewGameObject(ES3ReferenceMgrBase refMgr, long id)
		{
			return null;
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x3F96DCC", Offset = "0x3F96DCC", VA = "0x3F96DCC")]
		public static List<GameObject> GetChildren(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x3F97804", Offset = "0x3F97804", VA = "0x3F97804", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017C5")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x60017C6")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000344")]
	public class ES3Type_GameObjectArray : ES3ArrayType
	{
		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x3F9780C", Offset = "0x3F9780C", VA = "0x3F9780C")]
		public ES3Type_GameObjectArray()
		{
		}
	}
	[Token(Token = "0x2000345")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8C48", Offset = "0x10A8C48")]
	[Preserve]
	public class ES3Type_Gradient : ES3Type
	{
		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x3F97908", Offset = "0x3F97908", VA = "0x3F97908")]
		public ES3Type_Gradient()
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x3F979D0", Offset = "0x3F979D0", VA = "0x3F979D0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017CD")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017CE")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000346")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8D10", Offset = "0x10A8D10")]
	public class ES3Type_GradientAlphaKey : ES3Type
	{
		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x3F97B80", Offset = "0x3F97B80", VA = "0x3F97B80")]
		public ES3Type_GradientAlphaKey()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x3F97C48", Offset = "0x3F97C48", VA = "0x3F97C48", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017D2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000347")]
	public class ES3Type_GradientAlphaKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x3F97DB8", Offset = "0x3F97DB8", VA = "0x3F97DB8")]
		public ES3Type_GradientAlphaKeyArray()
		{
		}
	}
	[Token(Token = "0x2000348")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8DBC", Offset = "0x10A8DBC")]
	[Preserve]
	public class ES3Type_GradientColorKey : ES3Type
	{
		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x3F97EB4", Offset = "0x3F97EB4", VA = "0x3F97EB4")]
		public ES3Type_GradientColorKey()
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x3F97F7C", Offset = "0x3F97F7C", VA = "0x3F97F7C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017D7")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000349")]
	public class ES3Type_GradientColorKeyArray : ES3ArrayType
	{
		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x3F98138", Offset = "0x3F98138", VA = "0x3F98138")]
		public ES3Type_GradientColorKeyArray()
		{
		}
	}
	[Token(Token = "0x200034A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8E68", Offset = "0x10A8E68")]
	public class ES3Type_Guid : ES3Type
	{
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x3F98234", Offset = "0x3F98234", VA = "0x3F98234")]
		public ES3Type_Guid()
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x3F982FC", Offset = "0x3F982FC", VA = "0x3F982FC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017DC")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200034B")]
	public class ES3Type_GuidArray : ES3ArrayType
	{
		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x3F98410", Offset = "0x3F98410", VA = "0x3F98410")]
		public ES3Type_GuidArray()
		{
		}
	}
	[Token(Token = "0x200034C")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8EF8", Offset = "0x10A8EF8")]
	public class ES3Type_InheritVelocityModule : ES3Type
	{
		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x3F98F98", Offset = "0x3F98F98", VA = "0x3F98F98")]
		public ES3Type_InheritVelocityModule()
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x3F99060", Offset = "0x3F99060", VA = "0x3F99060", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017E1")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017E2")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200034D")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A8FDC", Offset = "0x10A8FDC")]
	[Preserve]
	public class ES3Type_Keyframe : ES3Type
	{
		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x3F995C4", Offset = "0x3F995C4", VA = "0x3F995C4")]
		public ES3Type_Keyframe()
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x3F9968C", Offset = "0x3F9968C", VA = "0x3F9968C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017E6")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200034E")]
	public class ES3Type_KeyframeArray : ES3ArrayType
	{
		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x3F998DC", Offset = "0x3F998DC", VA = "0x3F998DC")]
		public ES3Type_KeyframeArray()
		{
		}
	}
	[Token(Token = "0x200034F")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A90C0", Offset = "0x10A90C0")]
	public class ES3Type_LayerMask : ES3Type
	{
		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x3F999D8", Offset = "0x3F999D8", VA = "0x3F999D8")]
		public ES3Type_LayerMask()
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x3F99AA0", Offset = "0x3F99AA0", VA = "0x3F99AA0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017EB")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000350")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9188", Offset = "0x10A9188")]
	[Preserve]
	public class ES3Type_Light : ES3ComponentType
	{
		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x3F99BD4", Offset = "0x3F99BD4", VA = "0x3F99BD4")]
		public ES3Type_Light()
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x3F99CA0", Offset = "0x3F99CA0", VA = "0x3F99CA0", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017EF")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000351")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9464", Offset = "0x10A9464")]
	[Preserve]
	public class ES3Type_LightsModule : ES3Type
	{
		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x3F9A598", Offset = "0x3F9A598", VA = "0x3F9A598")]
		public ES3Type_LightsModule()
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x3F9A660", Offset = "0x3F9A660", VA = "0x3F9A660", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017F3")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017F4")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000352")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9628", Offset = "0x10A9628")]
	[Preserve]
	public class ES3Type_LimitVelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x3F9AC84", Offset = "0x3F9AC84", VA = "0x3F9AC84")]
		public ES3Type_LimitVelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x3F9AD4C", Offset = "0x3F9AD4C", VA = "0x3F9AD4C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017F8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017F9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000353")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A97EC", Offset = "0x10A97EC")]
	public class ES3Type_MainModule : ES3Type
	{
		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x3F9B350", Offset = "0x3F9B350", VA = "0x3F9B350")]
		public ES3Type_MainModule()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x3F9B418", Offset = "0x3F9B418", VA = "0x3F9B418", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60017FD")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60017FE")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000354")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9C6C", Offset = "0x10A9C6C")]
	[Preserve]
	public class ES3Type_Material : ES3UnityObjectType
	{
		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x48B5850", Offset = "0x48B5850", VA = "0x48B5850")]
		public ES3Type_Material()
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x48B591C", Offset = "0x48B591C", VA = "0x48B591C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001802")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001803")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000355")]
	public class ES3Type_MaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x48BBE64", Offset = "0x48BBE64", VA = "0x48BBE64")]
		public ES3Type_MaterialArray()
		{
		}
	}
	[Token(Token = "0x2000356")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9D6C", Offset = "0x10A9D6C")]
	[Preserve]
	public class ES3Type_Matrix4x4 : ES3Type
	{
		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x48BBF60", Offset = "0x48BBF60", VA = "0x48BBF60")]
		public ES3Type_Matrix4x4()
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x48BC02C", Offset = "0x48BC02C", VA = "0x48BC02C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001808")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000357")]
	public class ES3Type_Matrix4x4Array : ES3ArrayType
	{
		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x48BC2A0", Offset = "0x48BC2A0", VA = "0x48BC2A0")]
		public ES3Type_Matrix4x4Array()
		{
		}
	}
	[Token(Token = "0x2000358")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10A9E50", Offset = "0x10A9E50")]
	[Preserve]
	public class ES3Type_Mesh : ES3UnityObjectType
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x48BC39C", Offset = "0x48BC39C", VA = "0x48BC39C")]
		public ES3Type_Mesh()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x48BC468", Offset = "0x48BC468", VA = "0x48BC468", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600180D")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600180E")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000359")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA04C", Offset = "0x10AA04C")]
	public class ES3Type_MinMaxCurve : ES3Type
	{
		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x485BD94", Offset = "0x485BD94", VA = "0x485BD94")]
		public ES3Type_MinMaxCurve()
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x485BE60", Offset = "0x485BE60", VA = "0x485BE60", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001812")]
		[Preserve]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001813")]
		[Preserve]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200035A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA1A0", Offset = "0x10AA1A0")]
	public class ES3Type_MinMaxGradient : ES3Type
	{
		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x485C21C", Offset = "0x485C21C", VA = "0x485C21C")]
		public ES3Type_MinMaxGradient()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x485C2E8", Offset = "0x485C2E8", VA = "0x485C2E8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001817")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035B")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA2D8", Offset = "0x10AA2D8")]
	public class ES3Type_NoiseModule : ES3Type
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x485C674", Offset = "0x485C674", VA = "0x485C674")]
		public ES3Type_NoiseModule()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x485C740", Offset = "0x485C740", VA = "0x485C740", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600181B")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600181C")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200035C")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA640", Offset = "0x10AA640")]
	public class ES3Type_PhysicMaterial : ES3ObjectType
	{
		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x485DEC4", Offset = "0x485DEC4", VA = "0x485DEC4")]
		public ES3Type_PhysicMaterial()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x485DF90", Offset = "0x485DF90", VA = "0x485DF90", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001820")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001821")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035D")]
	public class ES3Type_PhysicMaterialArray : ES3ArrayType
	{
		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x485E238", Offset = "0x485E238", VA = "0x485E238")]
		public ES3Type_PhysicMaterialArray()
		{
		}
	}
	[Token(Token = "0x200035E")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA740", Offset = "0x10AA740")]
	[Preserve]
	public class ES3Type_PhysicsMaterial2D : ES3ObjectType
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x485E334", Offset = "0x485E334", VA = "0x485E334")]
		public ES3Type_PhysicsMaterial2D()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x485E400", Offset = "0x485E400", VA = "0x485E400", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001826")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001827")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200035F")]
	public class ES3Type_PhysicsMaterial2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x485E578", Offset = "0x485E578", VA = "0x485E578")]
		public ES3Type_PhysicsMaterial2DArray()
		{
		}
	}
	[Token(Token = "0x2000360")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA7EC", Offset = "0x10AA7EC")]
	[Preserve]
	public class ES3Type_Quaternion : ES3Type
	{
		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x485EDC4", Offset = "0x485EDC4", VA = "0x485EDC4")]
		public ES3Type_Quaternion()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x485EE90", Offset = "0x485EE90", VA = "0x485EE90", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600182C")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000361")]
	public class ES3Type_QuaternionArray : ES3ArrayType
	{
		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x485F0AC", Offset = "0x485F0AC", VA = "0x485F0AC")]
		public ES3Type_QuaternionArray()
		{
		}
	}
	[Token(Token = "0x2000362")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA8D0", Offset = "0x10AA8D0")]
	[Preserve]
	public class ES3Type_Rect : ES3Type
	{
		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x485FBA8", Offset = "0x485FBA8", VA = "0x485FBA8")]
		public ES3Type_Rect()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x485FC74", Offset = "0x485FC74", VA = "0x485FC74", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001831")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000363")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AA9B4", Offset = "0x10AA9B4")]
	public class ES3Type_RectTransform : ES3ComponentType
	{
		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x485FEB4", Offset = "0x485FEB4", VA = "0x485FEB4")]
		public ES3Type_RectTransform()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x485FF80", Offset = "0x485FF80", VA = "0x485FF80", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001835")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000364")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AAB78", Offset = "0x10AAB78")]
	[Preserve]
	public class ES3Type_RenderTexture : ES3ObjectType
	{
		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x4860500", Offset = "0x4860500", VA = "0x4860500")]
		public ES3Type_RenderTexture()
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x48605CC", Offset = "0x48605CC", VA = "0x48605CC", Slot = "7")]
		protected override void WriteObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001839")]
		protected override void ReadObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x600183A")]
		protected override object ReadObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000365")]
	public class ES3Type_RenderTextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x4860D04", Offset = "0x4860D04", VA = "0x4860D04")]
		public ES3Type_RenderTextureArray()
		{
		}
	}
	[Token(Token = "0x2000366")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AAF6C", Offset = "0x10AAF6C")]
	[Preserve]
	public class ES3Type_RotationBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x4861908", Offset = "0x4861908", VA = "0x4861908")]
		public ES3Type_RotationBySpeedModule()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x48619D4", Offset = "0x48619D4", VA = "0x48619D4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600183F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001840")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000367")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB0DC", Offset = "0x10AB0DC")]
	public class ES3Type_RotationOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x4861EFC", Offset = "0x4861EFC", VA = "0x4861EFC")]
		public ES3Type_RotationOverLifetimeModule()
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x4861FC8", Offset = "0x4861FC8", VA = "0x4861FC8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001844")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001845")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000368")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB230", Offset = "0x10AB230")]
	public class ES3Type_Shader : ES3Type
	{
		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x486245C", Offset = "0x486245C", VA = "0x486245C")]
		public ES3Type_Shader()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x4862528", Offset = "0x4862528", VA = "0x4862528", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001849")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600184A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class ES3Type_ShaderArray : ES3ArrayType
	{
		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x48626C8", Offset = "0x48626C8", VA = "0x48626C8")]
		public ES3Type_ShaderArray()
		{
		}
	}
	[Token(Token = "0x200036A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB2DC", Offset = "0x10AB2DC")]
	public class ES3Type_ShapeModule : ES3Type
	{
		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x48627C4", Offset = "0x48627C4", VA = "0x48627C4")]
		public ES3Type_ShapeModule()
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x4862890", Offset = "0x4862890", VA = "0x4862890", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600184F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001850")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036B")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB564", Offset = "0x10AB564")]
	public class ES3Type_SizeBySpeedModule : ES3Type
	{
		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x4863074", Offset = "0x4863074", VA = "0x4863074")]
		public ES3Type_SizeBySpeedModule()
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x4863140", Offset = "0x4863140", VA = "0x4863140", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001854")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001855")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036C")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB70C", Offset = "0x10AB70C")]
	[Preserve]
	public class ES3Type_SizeOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x4863728", Offset = "0x4863728", VA = "0x4863728")]
		public ES3Type_SizeOverLifetimeModule()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x48637F4", Offset = "0x48637F4", VA = "0x48637F4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001859")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036D")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AB898", Offset = "0x10AB898")]
	public class ES3Type_SkinnedMeshRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x4863D48", Offset = "0x4863D48", VA = "0x4863D48")]
		public ES3Type_SkinnedMeshRenderer()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x4863E14", Offset = "0x4863E14", VA = "0x4863E14", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600185E")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class ES3Type_SkinnedMeshRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x486490C", Offset = "0x486490C", VA = "0x486490C")]
		public ES3Type_SkinnedMeshRendererArray()
		{
		}
	}
	[Token(Token = "0x200036F")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ABB90", Offset = "0x10ABB90")]
	[Preserve]
	public class ES3Type_Sprite : ES3UnityObjectType
	{
		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x4864E60", Offset = "0x4864E60", VA = "0x4864E60")]
		public ES3Type_Sprite()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x4864F2C", Offset = "0x4864F2C", VA = "0x4864F2C", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001863")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001864")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000370")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ABC90", Offset = "0x10ABC90")]
	[Preserve]
	public class ES3Type_SpriteRenderer : ES3ComponentType
	{
		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x4865320", Offset = "0x4865320", VA = "0x4865320")]
		public ES3Type_SpriteRenderer()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x48653EC", Offset = "0x48653EC", VA = "0x48653EC", Slot = "14")]
		protected override void WriteComponent(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001868")]
		protected override void ReadComponent<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000371")]
	public class ES3Type_SpriteRendererArray : ES3ArrayType
	{
		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x4865D24", Offset = "0x4865D24", VA = "0x4865D24")]
		public ES3Type_SpriteRendererArray()
		{
		}
	}
	[Token(Token = "0x2000372")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ABF34", Offset = "0x10ABF34")]
	public class ES3Type_SubEmittersModule : ES3Type
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x4865F1C", Offset = "0x4865F1C", VA = "0x4865F1C")]
		public ES3Type_SubEmittersModule()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x4865FE8", Offset = "0x4865FE8", VA = "0x4865FE8", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600186D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600186E")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000373")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ABFFC", Offset = "0x10ABFFC")]
	[Preserve]
	public class ES3Type_Texture : ES3Type
	{
		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x336FDB0", Offset = "0x336FDB0", VA = "0x336FDB0")]
		public ES3Type_Texture()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x336FE7C", Offset = "0x336FE7C", VA = "0x336FE7C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001872")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001873")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000374")]
	public class ES3Type_TextureArray : ES3ArrayType
	{
		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x33707A4", Offset = "0x33707A4", VA = "0x33707A4")]
		public ES3Type_TextureArray()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC0FC", Offset = "0x10AC0FC")]
	[Preserve]
	public class ES3Type_Texture2D : ES3UnityObjectType
	{
		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x3370030", Offset = "0x3370030", VA = "0x3370030")]
		public ES3Type_Texture2D()
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x3370138", Offset = "0x3370138", VA = "0x3370138", Slot = "10")]
		protected override void WriteUnityObject(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001878")]
		protected override void ReadUnityObject<T>(ES3Reader reader, object obj)
		{
		}

		[Token(Token = "0x6001879")]
		protected override object ReadUnityObject<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x3370610", Offset = "0x3370610", VA = "0x3370610")]
		protected bool IsReadable(Texture2D instance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000376")]
	public class ES3Type_Texture2DArray : ES3ArrayType
	{
		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x33706A8", Offset = "0x33706A8", VA = "0x33706A8")]
		public ES3Type_Texture2DArray()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC1FC", Offset = "0x10AC1FC")]
	[Preserve]
	public class ES3Type_TextureSheetAnimationModule : ES3Type
	{
		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x33708A0", Offset = "0x33708A0", VA = "0x33708A0")]
		public ES3Type_TextureSheetAnimationModule()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x337096C", Offset = "0x337096C", VA = "0x337096C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600187F")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001880")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000378")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC3F8", Offset = "0x10AC3F8")]
	public class ES3Type_TrailModule : ES3Type
	{
		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x3370FB8", Offset = "0x3370FB8", VA = "0x3370FB8")]
		public ES3Type_TrailModule()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x3371084", Offset = "0x3371084", VA = "0x3371084", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001884")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x6001885")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x2000379")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC610", Offset = "0x10AC610")]
	public class ES3Type_TriggerModule : ES3Type
	{
		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x3371B54", Offset = "0x3371B54", VA = "0x3371B54")]
		public ES3Type_TriggerModule()
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x3371C20", Offset = "0x3371C20", VA = "0x3371C20", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001889")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x600188A")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
	[Token(Token = "0x200037A")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC72C", Offset = "0x10AC72C")]
	public class ES3Type_Vector2 : ES3Type
	{
		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x33721BC", Offset = "0x33721BC", VA = "0x33721BC")]
		public ES3Type_Vector2()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x3372288", Offset = "0x3372288", VA = "0x3372288", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600188E")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200037B")]
	public class ES3Type_Vector2Array : ES3ArrayType
	{
		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x33723F8", Offset = "0x33723F8", VA = "0x33723F8")]
		public ES3Type_Vector2Array()
		{
		}
	}
	[Token(Token = "0x200037C")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC7D8", Offset = "0x10AC7D8")]
	public class ES3Type_Vector2Int : ES3Type
	{
		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x33724F4", Offset = "0x33724F4", VA = "0x33724F4")]
		public ES3Type_Vector2Int()
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x33725C0", Offset = "0x33725C0", VA = "0x33725C0", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001893")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200037D")]
	public class ES3Type_Vector2IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x3372734", Offset = "0x3372734", VA = "0x3372734")]
		public ES3Type_Vector2IntArray()
		{
		}
	}
	[Token(Token = "0x200037E")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC884", Offset = "0x10AC884")]
	[Preserve]
	public class ES3Type_Vector3 : ES3Type
	{
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x3372830", Offset = "0x3372830", VA = "0x3372830")]
		public ES3Type_Vector3()
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x33728FC", Offset = "0x33728FC", VA = "0x33728FC", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x6001898")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x200037F")]
	public class ES3Type_Vector3Array : ES3ArrayType
	{
		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x3372AC4", Offset = "0x3372AC4", VA = "0x3372AC4")]
		public ES3Type_Vector3Array()
		{
		}
	}
	[Token(Token = "0x2000380")]
	[Preserve]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10AC94C", Offset = "0x10AC94C")]
	public class ES3Type_Vector3Int : ES3Type
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x3372BC0", Offset = "0x3372BC0", VA = "0x3372BC0")]
		public ES3Type_Vector3Int()
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x3372C8C", Offset = "0x3372C8C", VA = "0x3372C8C", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x600189D")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}
	}
	[Token(Token = "0x2000381")]
	public class ES3Type_Vector3IntArray : ES3ArrayType
	{
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x3372E8C", Offset = "0x3372E8C", VA = "0x3372E8C")]
		public ES3Type_Vector3IntArray()
		{
		}
	}
	[Token(Token = "0x2000382")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ACA14", Offset = "0x10ACA14")]
	[Preserve]
	public class ES3Type_Vector4 : ES3Type
	{
		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x3372F88", Offset = "0x3372F88", VA = "0x3372F88")]
		public ES3Type_Vector4()
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x3373054", Offset = "0x3373054", VA = "0x3373054", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60018A2")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x337326C", Offset = "0x337326C", VA = "0x337326C")]
		public static bool Equals(Vector4 a, Vector4 b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000383")]
	public class ES3Type_Vector4Array : ES3ArrayType
	{
		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x337330C", Offset = "0x337330C", VA = "0x337330C")]
		public ES3Type_Vector4Array()
		{
		}
	}
	[Token(Token = "0x2000384")]
	[AttributeAttribute(Name = "ES3PropertiesAttribute", RVA = "0x10ACAF8", Offset = "0x10ACAF8")]
	[Preserve]
	public class ES3Type_VelocityOverLifetimeModule : ES3Type
	{
		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ES3Type Instance;

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x3373408", Offset = "0x3373408", VA = "0x3373408")]
		public ES3Type_VelocityOverLifetimeModule()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x33734D4", Offset = "0x33734D4", VA = "0x33734D4", Slot = "4")]
		public override void Write(object obj, ES3Writer writer)
		{
		}

		[Token(Token = "0x60018A8")]
		public override object Read<T>(ES3Reader reader)
		{
			return null;
		}

		[Token(Token = "0x60018A9")]
		public override void ReadInto<T>(ES3Reader reader, object obj)
		{
		}
	}
}
namespace ES3Internal
{
	[Token(Token = "0x2000385")]
	internal static class ES3Debug
	{
		[Token(Token = "0x4000FDC")]
		private const string disableInfoMsg = "\n<i>To disable these messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Info'</i>";

		[Token(Token = "0x4000FDD")]
		private const string disableWarningMsg = "\n<i>To disable warnings from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Warnings'</i>";

		[Token(Token = "0x4000FDE")]
		private const string disableErrorMsg = "\n<i>To disable these error messages from Easy Save, go to Window > Easy Save 3 > Settings, and uncheck 'Log Errors'</i>";

		[Token(Token = "0x4000FDF")]
		private const char indentChar = '-';

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x2807C28", Offset = "0x2807C28", VA = "0x2807C28")]
		public static void Log(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x2801F84", Offset = "0x2801F84", VA = "0x2801F84")]
		public static void LogWarning(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x2803AC4", Offset = "0x2803AC4", VA = "0x2803AC4")]
		public static void LogError(string msg, [Optional] UnityEngine.Object context, int indent = 0)
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x2807E14", Offset = "0x2807E14", VA = "0x2807E14")]
		private static string Indent(int size)
		{
			return null;
		}
	}
	[Token(Token = "0x2000386")]
	public static class ES3Hash
	{
		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x280A37C", Offset = "0x280A37C", VA = "0x280A37C")]
		public static string SHA1Hash(string input)
		{
			return null;
		}
	}
	[Token(Token = "0x2000387")]
	public abstract class EncryptionAlgorithm
	{
		[Token(Token = "0x60018B0")]
		public abstract byte[] Encrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x60018B1")]
		public abstract byte[] Decrypt(byte[] bytes, string password, int bufferSize);

		[Token(Token = "0x60018B2")]
		public abstract void Encrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x60018B3")]
		public abstract void Decrypt(Stream input, Stream output, string password, int bufferSize);

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x3379668", Offset = "0x3379668", VA = "0x3379668")]
		protected static void CopyStream(Stream input, Stream output, int bufferSize)
		{
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x337974C", Offset = "0x337974C", VA = "0x337974C")]
		protected EncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class AESEncryptionAlgorithm : EncryptionAlgorithm
	{
		[Token(Token = "0x4000FE0")]
		private const int ivSize = 16;

		[Token(Token = "0x4000FE1")]
		private const int keySize = 16;

		[Token(Token = "0x4000FE2")]
		private const int pwIterations = 100;

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x20015B4", Offset = "0x20015B4", VA = "0x20015B4", Slot = "4")]
		public override byte[] Encrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x2001824", Offset = "0x2001824", VA = "0x2001824", Slot = "5")]
		public override byte[] Decrypt(byte[] bytes, string password, int bufferSize)
		{
			return null;
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x2001A94", Offset = "0x2001A94", VA = "0x2001A94", Slot = "6")]
		public override void Encrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x2001EEC", Offset = "0x2001EEC", VA = "0x2001EEC", Slot = "7")]
		public override void Decrypt(Stream input, Stream output, string password, int bufferSize)
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x200232C", Offset = "0x200232C", VA = "0x200232C")]
		public AESEncryptionAlgorithm()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class UnbufferedCryptoStream : MemoryStream
	{
		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Stream stream;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly bool isReadStream;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string password;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int bufferSize;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private EncryptionAlgorithm alg;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool disposed;

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x2EB55D8", Offset = "0x2EB55D8", VA = "0x2EB55D8")]
		public UnbufferedCryptoStream(Stream stream, bool isReadStream, string password, int bufferSize, EncryptionAlgorithm alg)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x2EB56A4", Offset = "0x2EB56A4", VA = "0x2EB56A4", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200038A")]
	public struct ES3Data
	{
		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ES3Type type;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] bytes;

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x2807B18", Offset = "0x2807B18", VA = "0x2807B18")]
		public ES3Data(Type type, byte[] bytes)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x2807BF4", Offset = "0x2807BF4", VA = "0x2807BF4")]
		public ES3Data(ES3Type type, byte[] bytes)
		{
		}
	}
	[Token(Token = "0x200038B")]
	public static class ES3IO
	{
		[Token(Token = "0x200038C")]
		public enum ES3FileMode
		{
			[Token(Token = "0x4000FEF")]
			Read,
			[Token(Token = "0x4000FF0")]
			Write,
			[Token(Token = "0x4000FF1")]
			Append
		}

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string persistentDataPath;

		[Token(Token = "0x4000FEC")]
		internal const string backupFileSuffix = ".bac";

		[Token(Token = "0x4000FED")]
		internal const string temporaryFileSuffix = ".tmp";

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x27FF938", Offset = "0x27FF938", VA = "0x27FF938")]
		public static DateTime GetTimestamp(string filePath)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x27F9B18", Offset = "0x27F9B18", VA = "0x27F9B18")]
		public static string GetExtension(string path)
		{
			return null;
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x27FBBB4", Offset = "0x27FBBB4", VA = "0x27FBBB4")]
		public static void DeleteFile(string filePath)
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x27FC230", Offset = "0x27FC230", VA = "0x27FC230")]
		public static bool FileExists(string filePath)
		{
			return default(bool);
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x27FCBB0", Offset = "0x27FCBB0", VA = "0x27FCBB0")]
		public static void MoveFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x27FC238", Offset = "0x27FC238", VA = "0x27FC238")]
		public static void CopyFile(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x27FD728", Offset = "0x27FD728", VA = "0x27FD728")]
		public static void MoveDirectory(string sourcePath, string destPath)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x27FD0F8", Offset = "0x27FD0F8", VA = "0x27FD0F8")]
		public static void CreateDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x27FD69C", Offset = "0x27FD69C", VA = "0x27FD69C")]
		public static bool DirectoryExists(string directoryPath)
		{
			return default(bool);
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x280A22C", Offset = "0x280A22C", VA = "0x280A22C")]
		public static string GetDirectoryPath(string path, char seperator = '/')
		{
			return null;
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x280B100", Offset = "0x280B100", VA = "0x280B100")]
		public static bool UsesForwardSlash(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x27FD224", Offset = "0x27FD224", VA = "0x27FD224")]
		public static string CombinePathAndFilename(string directoryPath, string fileOrDirectoryName)
		{
			return null;
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x27FF174", Offset = "0x27FF174", VA = "0x27FF174")]
		public static string[] GetDirectories(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x27FD6A4", Offset = "0x27FD6A4", VA = "0x27FD6A4")]
		public static void DeleteDirectory(string directoryPath)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x27FEF18", Offset = "0x27FEF18", VA = "0x27FEF18")]
		public static string[] GetFiles(string path, bool getFullPaths = true)
		{
			return null;
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x280B158", Offset = "0x280B158", VA = "0x280B158")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x280B160", Offset = "0x280B160", VA = "0x280B160")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x27F8AF8", Offset = "0x27F8AF8", VA = "0x27F8AF8")]
		public static void CommitBackup(ES3Settings settings)
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class ES3Prefab : MonoBehaviour
	{
		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long prefabId;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ES3RefIdDictionary localRefs;

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x2810118", Offset = "0x2810118", VA = "0x2810118")]
		public void Awake()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x28102FC", Offset = "0x28102FC", VA = "0x28102FC")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x2810378", Offset = "0x2810378", VA = "0x2810378")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x28104B0", Offset = "0x28104B0", VA = "0x28104B0")]
		public Dictionary<string, string> GetReferences()
		{
			return null;
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x2810718", Offset = "0x2810718", VA = "0x2810718")]
		public void ApplyReferences(Dictionary<long, long> localToGlobal)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x2810458", Offset = "0x2810458", VA = "0x2810458")]
		public static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x2810CEC", Offset = "0x2810CEC", VA = "0x2810CEC")]
		public ES3Prefab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200038E")]
	[DisallowMultipleComponent]
	public abstract class ES3ReferenceMgrBase : MonoBehaviour
	{
		[Token(Token = "0x200038F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACC5C", Offset = "0x10ACC5C")]
		private sealed class <>c__DisplayClass29_0
		{
			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Object obj;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<KeyValuePair<long, UnityEngine.Object>, bool> <>9__0;

			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x1DD95A4", Offset = "0x1DD95A4", VA = "0x1DD95A4")]
			public <>c__DisplayClass29_0()
			{
			}

			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x1DD95AC", Offset = "0x1DD95AC", VA = "0x1DD95AC")]
			internal bool <Remove>b__0(KeyValuePair<long, UnityEngine.Object> kvp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACC6C", Offset = "0x10ACC6C")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long referenceID;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<KeyValuePair<UnityEngine.Object, long>, bool> <>9__0;

			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x1DD9630", Offset = "0x1DD9630", VA = "0x1DD9630")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x1DD9638", Offset = "0x1DD9638", VA = "0x1DD9638")]
			internal bool <Remove>b__0(KeyValuePair<UnityEngine.Object, long> kvp)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000391")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACC7C", Offset = "0x10ACC7C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<long, UnityEngine.Object>, bool> <>9__31_0;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<KeyValuePair<long, UnityEngine.Object>, long> <>9__31_1;

			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x1DD9498", Offset = "0x1DD9498", VA = "0x1DD9498")]
			public <>c()
			{
			}

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x1DD94A0", Offset = "0x1DD94A0", VA = "0x1DD94A0")]
			internal bool <RemoveNullOrInvalidValues>b__31_0(KeyValuePair<long, UnityEngine.Object> pair)
			{
				return default(bool);
			}

			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x1DD9564", Offset = "0x1DD9564", VA = "0x1DD9564")]
			internal long <RemoveNullOrInvalidValues>b__31_1(KeyValuePair<long, UnityEngine.Object> pair)
			{
				return default(long);
			}
		}

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object _lock;

		[Token(Token = "0x4000FF5")]
		public const string referencePropertyName = "_ES3Ref";

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ES3ReferenceMgrBase _current;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static HashSet<ES3ReferenceMgrBase> mgrs;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static System.Random rng;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool openPrefabs;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ES3Prefab> prefabs;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public ES3IdRefDictionary idRef;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ES3RefIdDictionary _refId;

		[Token(Token = "0x17000453")]
		public static ES3ReferenceMgrBase Current
		{
			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x280748C", Offset = "0x280748C", VA = "0x280748C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000454")]
		public bool IsInitialised
		{
			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x2812540", Offset = "0x2812540", VA = "0x2812540")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000455")]
		public ES3RefIdDictionary refId
		{
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x28125A0", Offset = "0x28125A0", VA = "0x28125A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x2812794", Offset = "0x2812794", VA = "0x2812794")]
			set
			{
			}
		}

		[Token(Token = "0x17000456")]
		public ES3GlobalReferences GlobalReferences
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x281279C", Offset = "0x281279C", VA = "0x281279C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x28127A4", Offset = "0x28127A4", VA = "0x28127A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x2812B94", Offset = "0x2812B94", VA = "0x2812B94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x2812A58", Offset = "0x2812A58", VA = "0x2812A58")]
		public void Merge(ES3ReferenceMgrBase otherMgr)
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x2812C20", Offset = "0x2812C20", VA = "0x2812C20")]
		public long Get(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x2812E6C", Offset = "0x2812E6C", VA = "0x2812E6C")]
		internal UnityEngine.Object Get(long id, Type type, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x2813408", Offset = "0x2813408", VA = "0x2813408")]
		public UnityEngine.Object Get(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x2813414", Offset = "0x2813414", VA = "0x2813414")]
		public ES3Prefab GetPrefab(long id, bool suppressWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x2813810", Offset = "0x2813810", VA = "0x2813810")]
		public long GetPrefab(ES3Prefab prefabToFind, bool suppressWarnings = false)
		{
			return default(long);
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x28077A0", Offset = "0x28077A0", VA = "0x28077A0")]
		public long Add(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x2810950", Offset = "0x2810950", VA = "0x2810950")]
		public long Add(UnityEngine.Object obj, long id)
		{
			return default(long);
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x2813C1C", Offset = "0x2813C1C", VA = "0x2813C1C")]
		public bool AddPrefab(ES3Prefab prefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x2813CBC", Offset = "0x2813CBC", VA = "0x2813CBC")]
		public void Remove(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x28141D8", Offset = "0x28141D8", VA = "0x28141D8")]
		public void Remove(long referenceID)
		{
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x2814700", Offset = "0x2814700", VA = "0x2814700")]
		public void RemoveNullOrInvalidValues()
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x2814A7C", Offset = "0x2814A7C", VA = "0x2814A7C")]
		public void Clear()
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x2814BA8", Offset = "0x2814BA8", VA = "0x2814BA8")]
		public bool Contains(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x2814C10", Offset = "0x2814C10", VA = "0x2814C10")]
		public bool Contains(long referenceID)
		{
			return default(bool);
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x2814C74", Offset = "0x2814C74", VA = "0x2814C74")]
		public void ChangeId(long oldId, long newId)
		{
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x2810B3C", Offset = "0x2810B3C", VA = "0x2810B3C")]
		internal static long GetNewRefID()
		{
			return default(long);
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x2810450", Offset = "0x2810450", VA = "0x2810450")]
		internal static bool CanBeSaved(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x2812450", Offset = "0x2812450", VA = "0x2812450")]
		protected ES3ReferenceMgrBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000392")]
	public class ES3IdRefDictionary : ES3SerializableDictionary<long, UnityEngine.Object>
	{
		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x280B1C4", Offset = "0x280B1C4", VA = "0x280B1C4", Slot = "45")]
		protected override bool KeysAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x280B1D0", Offset = "0x280B1D0", VA = "0x280B1D0", Slot = "46")]
		protected override bool ValuesAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x280B244", Offset = "0x280B244", VA = "0x280B244")]
		public ES3IdRefDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000393")]
	[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10ACC8C", Offset = "0x10ACC8C")]
	public class ES3RefIdDictionary : ES3SerializableDictionary<UnityEngine.Object, long>
	{
		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x2812370", Offset = "0x2812370", VA = "0x2812370", Slot = "45")]
		protected override bool KeysAreEqual(UnityEngine.Object a, UnityEngine.Object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x28123E4", Offset = "0x28123E4", VA = "0x28123E4", Slot = "46")]
		protected override bool ValuesAreEqual(long a, long b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x2810D60", Offset = "0x2810D60", VA = "0x2810D60")]
		public ES3RefIdDictionary()
		{
		}
	}
	[Token(Token = "0x2000394")]
	public static class ES3Reflection
	{
		[Token(Token = "0x2000395")]
		public struct ES3ReflectedMember
		{
			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private FieldInfo fieldInfo;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private PropertyInfo propertyInfo;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isProperty;

			[Token(Token = "0x17000458")]
			public bool IsNull
			{
				[Token(Token = "0x600192C")]
				[Address(RVA = "0x1DD98C8", Offset = "0x1DD98C8", VA = "0x1DD98C8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000459")]
			public string Name
			{
				[Token(Token = "0x600192D")]
				[Address(RVA = "0x1DD9914", Offset = "0x1DD9914", VA = "0x1DD9914")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700045A")]
			public Type MemberType
			{
				[Token(Token = "0x600192E")]
				[Address(RVA = "0x1DD9948", Offset = "0x1DD9948", VA = "0x1DD9948")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700045B")]
			public bool IsPublic
			{
				[Token(Token = "0x600192F")]
				[Address(RVA = "0x1DD9994", Offset = "0x1DD9994", VA = "0x1DD9994")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700045C")]
			public bool IsProtected
			{
				[Token(Token = "0x6001930")]
				[Address(RVA = "0x1DD9A34", Offset = "0x1DD9A34", VA = "0x1DD9A34")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700045D")]
			public bool IsStatic
			{
				[Token(Token = "0x6001931")]
				[Address(RVA = "0x1DD9A88", Offset = "0x1DD9A88", VA = "0x1DD9A88")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001932")]
			[Address(RVA = "0x1DD9ADC", Offset = "0x1DD9ADC", VA = "0x1DD9ADC")]
			public ES3ReflectedMember(object fieldPropertyInfo)
			{
			}

			[Token(Token = "0x6001933")]
			[Address(RVA = "0x1DD9CBC", Offset = "0x1DD9CBC", VA = "0x1DD9CBC")]
			public void SetValue(object obj, object value)
			{
			}

			[Token(Token = "0x6001934")]
			[Address(RVA = "0x1DD9D04", Offset = "0x1DD9D04", VA = "0x1DD9D04")]
			public object GetValue(object obj)
			{
				return null;
			}
		}

		[Token(Token = "0x2000396")]
		public class ES3ReflectedMethod
		{
			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private MethodInfo method;

			[Token(Token = "0x6001935")]
			[Address(RVA = "0x1DD9D54", Offset = "0x1DD9D54", VA = "0x1DD9D54")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
			{
			}

			[Token(Token = "0x6001936")]
			[Address(RVA = "0x1DD9DD8", Offset = "0x1DD9DD8", VA = "0x1DD9DD8")]
			public ES3ReflectedMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes, BindingFlags bindingAttr)
			{
			}

			[Token(Token = "0x6001937")]
			[Address(RVA = "0x1DD9E6C", Offset = "0x1DD9E6C", VA = "0x1DD9E6C")]
			public object Invoke(object obj, [Optional] object[] parameters)
			{
				return null;
			}
		}

		[Token(Token = "0x2000397")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACCA0", Offset = "0x10ACCA0")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type derivedType;

			[Token(Token = "0x6001938")]
			[Address(RVA = "0x1DD97E8", Offset = "0x1DD97E8", VA = "0x1DD97E8")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6001939")]
			[Address(RVA = "0x1DD97F0", Offset = "0x1DD97F0", VA = "0x1DD97F0")]
			internal bool <GetDerivedTypes>b__2(<>f__AnonymousType0<Assembly, Type> <>h__TransparentIdentifier0)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000398")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACCB0", Offset = "0x10ACCB0")]
		private sealed class <>c
		{
			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Assembly, IEnumerable<Type>> <>9__27_0;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Assembly, Type, <>f__AnonymousType0<Assembly, Type>> <>9__27_1;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<<>f__AnonymousType0<Assembly, Type>, Type> <>9__27_3;

			[Token(Token = "0x600193B")]
			[Address(RVA = "0x1DD96F0", Offset = "0x1DD96F0", VA = "0x1DD96F0")]
			public <>c()
			{
			}

			[Token(Token = "0x600193C")]
			[Address(RVA = "0x1DD96F8", Offset = "0x1DD96F8", VA = "0x1DD96F8")]
			internal IEnumerable<Type> <GetDerivedTypes>b__27_0(Assembly assembly)
			{
				return null;
			}

			[Token(Token = "0x600193D")]
			[Address(RVA = "0x1DD971C", Offset = "0x1DD971C", VA = "0x1DD971C")]
			internal <>f__AnonymousType0<Assembly, Type> <GetDerivedTypes>b__27_1(Assembly assembly, Type type)
			{
				return null;
			}

			[Token(Token = "0x600193E")]
			[Address(RVA = "0x1DD97A0", Offset = "0x1DD97A0", VA = "0x1DD97A0")]
			internal Type <GetDerivedTypes>b__27_3(<>f__AnonymousType0<Assembly, Type> <>h__TransparentIdentifier0)
			{
				return null;
			}
		}

		[Token(Token = "0x2000399")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACCC0", Offset = "0x10ACCC0")]
		private sealed class <>c__DisplayClass46_0
		{
			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string methodName;

			[Token(Token = "0x600193F")]
			[Address(RVA = "0x1DD9880", Offset = "0x1DD9880", VA = "0x1DD9880")]
			public <>c__DisplayClass46_0()
			{
			}

			[Token(Token = "0x6001940")]
			[Address(RVA = "0x1DD9888", Offset = "0x1DD9888", VA = "0x1DD9888")]
			internal bool <GetMethods>b__0(MethodInfo t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001004")]
		public const string memberFieldPrefix = "m_";

		[Token(Token = "0x4001005")]
		public const string componentTagFieldName = "tag";

		[Token(Token = "0x4001006")]
		public const string componentNameFieldName = "name";

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] excludedPropertyNames;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Type serializableAttributeType;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Type serializeFieldAttributeType;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Type obsoleteAttributeType;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Type nonSerializedAttributeType;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Type es3SerializableAttributeType;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Type es3NonSerializableAttributeType;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Type[] EmptyTypes;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Assembly[] _assemblies;

		[Token(Token = "0x17000457")]
		private static Assembly[] Assemblies
		{
			[Token(Token = "0x6001902")]
			[Address(RVA = "0x28154AC", Offset = "0x28154AC", VA = "0x28154AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x2806B1C", Offset = "0x2806B1C", VA = "0x2806B1C")]
		public static Type[] GetElementTypes(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x28157D8", Offset = "0x28157D8", VA = "0x28157D8")]
		public static List<FieldInfo> GetSerializableFields(Type type, [Optional] List<FieldInfo> serializableFields, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x28161B8", Offset = "0x28161B8", VA = "0x28161B8")]
		public static List<PropertyInfo> GetSerializableProperties(Type type, [Optional] List<PropertyInfo> serializableProperties, bool safe = true, [Optional] string[] memberNames, BindingFlags bindings = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)
		{
			return null;
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x2815E30", Offset = "0x2815E30", VA = "0x2815E30")]
		public static bool TypeIsSerializable(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x2808730", Offset = "0x2808730", VA = "0x2808730")]
		public static object CreateInstance(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x280AF0C", Offset = "0x280AF0C", VA = "0x280AF0C")]
		public static object CreateInstance(Type type, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x2801904", Offset = "0x2801904", VA = "0x2801904")]
		public static Array ArrayCreateInstance(Type type, int length)
		{
			return null;
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x2800878", Offset = "0x2800878", VA = "0x2800878")]
		public static Array ArrayCreateInstance(Type type, int[] dimensions)
		{
			return null;
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x280AE44", Offset = "0x280AE44", VA = "0x280AE44")]
		public static Type MakeGenericType(Type type, Type genericParam)
		{
			return null;
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x2816AA4", Offset = "0x2816AA4", VA = "0x2816AA4")]
		public static ES3ReflectedMember[] GetSerializableMembers(Type type, bool safe = true, [Optional] string[] memberNames)
		{
			return null;
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x2811E54", Offset = "0x2811E54", VA = "0x2811E54")]
		public static ES3ReflectedMember GetES3ReflectedProperty(Type type, string propertyName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x281207C", Offset = "0x281207C", VA = "0x281207C")]
		public static ES3ReflectedMember GetES3ReflectedMember(Type type, string fieldName)
		{
			return default(ES3ReflectedMember);
		}

		[Token(Token = "0x600190F")]
		public static IList<T> GetInstances<T>()
		{
			return null;
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x28170A4", Offset = "0x28170A4", VA = "0x28170A4")]
		public static IList<Type> GetDerivedTypes(Type derivedType)
		{
			return null;
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x281540C", Offset = "0x281540C", VA = "0x281540C")]
		public static bool IsAssignableFrom(Type a, Type b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x281748C", Offset = "0x281748C", VA = "0x281748C")]
		public static Type GetGenericTypeDefinition(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x280AE24", Offset = "0x280AE24", VA = "0x280AE24")]
		public static Type[] GetGenericArguments(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x28174AC", Offset = "0x28174AC", VA = "0x28174AC")]
		public static int GetArrayRank(Type type)
		{
			return default(int);
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x28174CC", Offset = "0x28174CC", VA = "0x28174CC")]
		public static string GetAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x28174EC", Offset = "0x28174EC", VA = "0x28174EC")]
		public static ES3ReflectedMethod GetMethod(Type type, string methodName, Type[] genericParameters, Type[] parameterTypes)
		{
			return null;
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x2816984", Offset = "0x2816984", VA = "0x2816984")]
		public static bool TypeIsArray(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x28157B8", Offset = "0x28157B8", VA = "0x28157B8")]
		public static Type GetElementType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x2817574", Offset = "0x2817574", VA = "0x2817574")]
		public static bool IsAbstract(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x281758C", Offset = "0x281758C", VA = "0x281758C")]
		public static bool IsInterface(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x2815798", Offset = "0x2815798", VA = "0x2815798")]
		public static bool IsGenericType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x281696C", Offset = "0x281696C", VA = "0x281696C")]
		public static bool IsValueType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x28175A4", Offset = "0x28175A4", VA = "0x28175A4")]
		public static bool IsEnum(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x281699C", Offset = "0x281699C", VA = "0x281699C")]
		public static bool HasParameterlessConstructor(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x28175C4", Offset = "0x28175C4", VA = "0x28175C4")]
		public static ConstructorInfo GetParameterlessConstructor(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x281763C", Offset = "0x281763C", VA = "0x281763C")]
		public static string GetShortAssemblyQualifiedName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x2816DE4", Offset = "0x2816DE4", VA = "0x2816DE4")]
		public static PropertyInfo GetProperty(Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x2816F40", Offset = "0x2816F40", VA = "0x2816F40")]
		public static FieldInfo GetField(Type type, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x2817728", Offset = "0x2817728", VA = "0x2817728")]
		public static MethodInfo[] GetMethods(Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x281685C", Offset = "0x281685C", VA = "0x281685C")]
		public static bool IsPrimitive(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x2815E24", Offset = "0x2815E24", VA = "0x2815E24")]
		public static bool AttributeIsDefined(MemberInfo info, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x2816838", Offset = "0x2816838", VA = "0x2816838")]
		public static bool AttributeIsDefined(Type type, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x2817850", Offset = "0x2817850", VA = "0x2817850")]
		public static bool ImplementsInterface(Type type, Type interfaceType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x280FCB0", Offset = "0x280FCB0", VA = "0x280FCB0")]
		public static Type BaseType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x280BC14", Offset = "0x280BC14", VA = "0x280BC14")]
		public static Type GetType(string typeString)
		{
			return null;
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x28178F8", Offset = "0x28178F8", VA = "0x28178F8")]
		public static string GetTypeString(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200039A")]
	public abstract class ES3SerializableDictionary<TKey, TVal> : Dictionary<TKey, TVal>, ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x200039B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACCD0", Offset = "0x10ACCD0")]
		private sealed class <>c
		{
			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<KeyValuePair<TKey, TVal>, bool> <>9__6_0;

			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<KeyValuePair<TKey, TVal>, TKey> <>9__6_1;

			[Token(Token = "0x6001949")]
			public <>c()
			{
			}

			[Token(Token = "0x600194A")]
			internal bool <RemoveNullValues>b__6_0(KeyValuePair<TKey, TVal> pair)
			{
				return default(bool);
			}

			[Token(Token = "0x600194B")]
			internal TKey <RemoveNullValues>b__6_1(KeyValuePair<TKey, TVal> pair)
			{
				return (TKey)null;
			}
		}

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TKey> _Keys;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TVal> _Values;

		[Token(Token = "0x6001941")]
		protected abstract bool KeysAreEqual(TKey a, TKey b);

		[Token(Token = "0x6001942")]
		protected abstract bool ValuesAreEqual(TVal a, TVal b);

		[Token(Token = "0x6001943")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001944")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001945")]
		public int RemoveNullValues()
		{
			return default(int);
		}

		[Token(Token = "0x6001946")]
		public bool ChangeKey(TKey oldKey, TKey newKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001947")]
		protected ES3SerializableDictionary()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class ES3JSONReader : ES3Reader
	{
		[Token(Token = "0x400101F")]
		private const char endOfStreamChar = '\uffff';

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StreamReader baseReader;

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x280B298", Offset = "0x280B298", VA = "0x280B298")]
		internal ES3JSONReader(Stream stream, ES3Settings settings, bool readHeaderAndFooter = true)
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x280B4FC", Offset = "0x280B4FC", VA = "0x280B4FC", Slot = "21")]
		public override string ReadPropertyName()
		{
			return null;
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x280BA74", Offset = "0x280BA74", VA = "0x280BA74", Slot = "22")]
		protected override Type ReadKeyPrefix(bool ignoreType = false)
		{
			return null;
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x280C6B8", Offset = "0x280C6B8", VA = "0x280C6B8", Slot = "23")]
		protected override void ReadKeySuffix()
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x280C6C8", Offset = "0x280C6C8", VA = "0x280C6C8", Slot = "27")]
		internal override bool StartReadObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x280C9D0", Offset = "0x280C9D0", VA = "0x280C9D0", Slot = "28")]
		internal override void EndReadObject()
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x280CA10", Offset = "0x280CA10", VA = "0x280CA10", Slot = "29")]
		internal override bool StartReadDictionary()
		{
			return default(bool);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x280CA20", Offset = "0x280CA20", VA = "0x280CA20", Slot = "30")]
		internal override void EndReadDictionary()
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x280CA24", Offset = "0x280CA24", VA = "0x280CA24", Slot = "31")]
		internal override bool StartReadDictionaryKey()
		{
			return default(bool);
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x280CA68", Offset = "0x280CA68", VA = "0x280CA68", Slot = "32")]
		internal override void EndReadDictionaryKey()
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x280CA70", Offset = "0x280CA70", VA = "0x280CA70", Slot = "33")]
		internal override void StartReadDictionaryValue()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x280CA74", Offset = "0x280CA74", VA = "0x280CA74", Slot = "34")]
		internal override bool EndReadDictionaryValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x280CB3C", Offset = "0x280CB3C", VA = "0x280CB3C", Slot = "35")]
		internal override bool StartReadCollection()
		{
			return default(bool);
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x280CB44", Offset = "0x280CB44", VA = "0x280CB44", Slot = "36")]
		internal override void EndReadCollection()
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x280CB48", Offset = "0x280CB48", VA = "0x280CB48", Slot = "37")]
		internal override bool StartReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x280CB8C", Offset = "0x280CB8C", VA = "0x280CB8C", Slot = "38")]
		internal override bool EndReadCollectionItem()
		{
			return default(bool);
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x280CC54", Offset = "0x280CC54", VA = "0x280CC54")]
		private void ReadString(StreamWriter writer, bool skip = false)
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x280CD90", Offset = "0x280CD90", VA = "0x280CD90", Slot = "24")]
		internal override byte[] ReadElement(bool skip = false)
		{
			return null;
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x280CD2C", Offset = "0x280CD2C", VA = "0x280CD2C")]
		private char ReadOrSkipChar(StreamWriter writer, bool skip)
		{
			return default(char);
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x280B75C", Offset = "0x280B75C", VA = "0x280B75C")]
		private char ReadCharIgnoreWhitespace(bool ignoreTrailingWhitespace = true)
		{
			return default(char);
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x280C6F0", Offset = "0x280C6F0", VA = "0x280C6F0")]
		private bool ReadNullOrCharIgnoreWhitespace(char expectedChar)
		{
			return default(bool);
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x280B868", Offset = "0x280B868", VA = "0x280B868")]
		private char ReadCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x280D30C", Offset = "0x280D30C", VA = "0x280D30C")]
		private bool ReadQuotationMarkOrNullIgnoreWhitespace()
		{
			return default(bool);
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x280D4F4", Offset = "0x280D4F4", VA = "0x280D4F4")]
		private char PeekCharIgnoreWhitespace(char expectedChar)
		{
			return default(char);
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x280B6C8", Offset = "0x280B6C8", VA = "0x280B6C8")]
		private char PeekCharIgnoreWhitespace()
		{
			return default(char);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x280D6FC", Offset = "0x280D6FC", VA = "0x280D6FC")]
		private void SkipWhiteSpace()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x280B448", Offset = "0x280B448", VA = "0x280B448")]
		private void SkipOpeningBraceOfFile()
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x280D2D4", Offset = "0x280D2D4", VA = "0x280D2D4")]
		private static bool IsWhiteSpace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x280D250", Offset = "0x280D250", VA = "0x280D250")]
		private static bool IsOpeningBrace(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x280D264", Offset = "0x280D264", VA = "0x280D264")]
		private static bool IsEndOfValue(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x280B748", Offset = "0x280B748", VA = "0x280B748")]
		private static bool IsTerminator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x280B83C", Offset = "0x280B83C", VA = "0x280B83C")]
		private static bool IsQuotationMark(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x280D77C", Offset = "0x280D77C", VA = "0x280D77C")]
		private static bool IsEndOfStream(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x280D78C", Offset = "0x280D78C", VA = "0x280D78C")]
		private string GetValueString()
		{
			return null;
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x280D864", Offset = "0x280D864", VA = "0x280D864", Slot = "18")]
		internal override string Read_string()
		{
			return null;
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x280DA28", Offset = "0x280DA28", VA = "0x280DA28", Slot = "20")]
		internal override long Read_ref()
		{
			return default(long);
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x280DB6C", Offset = "0x280DB6C", VA = "0x280DB6C", Slot = "8")]
		internal override char Read_char()
		{
			return default(char);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x280DBEC", Offset = "0x280DBEC", VA = "0x280DBEC", Slot = "6")]
		internal override float Read_float()
		{
			return default(float);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x280DC6C", Offset = "0x280DC6C", VA = "0x280DC6C", Slot = "5")]
		internal override int Read_int()
		{
			return default(int);
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x280DC84", Offset = "0x280DC84", VA = "0x280DC84", Slot = "7")]
		internal override bool Read_bool()
		{
			return default(bool);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x280DCF8", Offset = "0x280DCF8", VA = "0x280DCF8", Slot = "9")]
		internal override decimal Read_decimal()
		{
			return default(decimal);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x280DDAC", Offset = "0x280DDAC", VA = "0x280DDAC", Slot = "10")]
		internal override double Read_double()
		{
			return default(double);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x280DE60", Offset = "0x280DE60", VA = "0x280DE60", Slot = "11")]
		internal override long Read_long()
		{
			return default(long);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x280DE78", Offset = "0x280DE78", VA = "0x280DE78", Slot = "12")]
		internal override ulong Read_ulong()
		{
			return default(ulong);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x280DE90", Offset = "0x280DE90", VA = "0x280DE90", Slot = "17")]
		internal override uint Read_uint()
		{
			return default(uint);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x280DEA8", Offset = "0x280DEA8", VA = "0x280DEA8", Slot = "13")]
		internal override byte Read_byte()
		{
			return default(byte);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x280DEC4", Offset = "0x280DEC4", VA = "0x280DEC4", Slot = "14")]
		internal override sbyte Read_sbyte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x280DEE0", Offset = "0x280DEE0", VA = "0x280DEE0", Slot = "15")]
		internal override short Read_short()
		{
			return default(short);
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x280DEFC", Offset = "0x280DEFC", VA = "0x280DEFC", Slot = "16")]
		internal override ushort Read_ushort()
		{
			return default(ushort);
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x280DF18", Offset = "0x280DF18", VA = "0x280DF18", Slot = "19")]
		internal override byte[] Read_byteArray()
		{
			return null;
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x280DF98", Offset = "0x280DF98", VA = "0x280DF98", Slot = "25")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class ES3GlobalReferences : ScriptableObject
	{
		[Token(Token = "0x1700045E")]
		public static ES3GlobalReferences Instance
		{
			[Token(Token = "0x600197F")]
			[Address(RVA = "0x280A358", Offset = "0x280A358", VA = "0x280A358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x280A360", Offset = "0x280A360", VA = "0x280A360")]
		public UnityEngine.Object Get(long id)
		{
			return null;
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x280A368", Offset = "0x280A368", VA = "0x280A368")]
		public long GetOrAdd(UnityEngine.Object obj)
		{
			return default(long);
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x280A370", Offset = "0x280A370", VA = "0x280A370")]
		public void RemoveInvalidKeys()
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x280A374", Offset = "0x280A374", VA = "0x280A374")]
		public ES3GlobalReferences()
		{
		}
	}
	[Token(Token = "0x200039E")]
	public class ES3DefaultSettings : MonoBehaviour
	{
		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ES3SerializableSettings settings;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoUpdateReferences;

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x2807E7C", Offset = "0x2807E7C", VA = "0x2807E7C")]
		public ES3DefaultSettings()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public enum ES3FileMode
	{
		[Token(Token = "0x4001024")]
		Read,
		[Token(Token = "0x4001025")]
		Write,
		[Token(Token = "0x4001026")]
		Append
	}
	[Token(Token = "0x20003A0")]
	public class ES3FileStream : FileStream
	{
		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDisposed;

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x280A020", Offset = "0x280A020", VA = "0x280A020")]
		public ES3FileStream(string path, ES3FileMode fileMode, int bufferSize, bool useAsync)
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x280A0F0", Offset = "0x280A0F0", VA = "0x280A0F0")]
		protected static string GetPath(string path, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x280A1FC", Offset = "0x280A1FC", VA = "0x280A1FC")]
		protected static FileMode GetFileMode(ES3FileMode fileMode)
		{
			return default(FileMode);
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x280A21C", Offset = "0x280A21C", VA = "0x280A21C")]
		protected static FileAccess GetFileAccess(ES3FileMode fileMode)
		{
			return default(FileAccess);
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x280A338", Offset = "0x280A338", VA = "0x280A338", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003A1")]
	internal class ES3PlayerPrefsStream : MemoryStream
	{
		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string path;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool append;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isWriteStream;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool isDisposed;

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x280FCD0", Offset = "0x280FCD0", VA = "0x280FCD0")]
		public ES3PlayerPrefsStream(string path)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x280FE14", Offset = "0x280FE14", VA = "0x280FE14")]
		public ES3PlayerPrefsStream(string path, int bufferSize, bool append = false)
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0x280FD20", Offset = "0x280FD20", VA = "0x280FD20")]
		private static byte[] GetData(string path, bool isWriteStream)
		{
			return null;
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x280FE6C", Offset = "0x280FE6C", VA = "0x280FE6C", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003A2")]
	internal class ES3ResourcesStream : MemoryStream
	{
		[Token(Token = "0x1700045F")]
		public bool Exists
		{
			[Token(Token = "0x600198E")]
			[Address(RVA = "0x3F891D4", Offset = "0x3F891D4", VA = "0x3F891D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x3F891F8", Offset = "0x3F891F8", VA = "0x3F891F8")]
		public ES3ResourcesStream(string path)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x3F89228", Offset = "0x3F89228", VA = "0x3F89228")]
		private static byte[] GetData(string path)
		{
			return null;
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x3F89328", Offset = "0x3F89328", VA = "0x3F89328", Slot = "20")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public static class ES3Stream
	{
		[Token(Token = "0x6001992")]
		[Address(RVA = "0x3F8B268", Offset = "0x3F8B268", VA = "0x3F8B268")]
		public static Stream CreateStream(ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x3F8D2B8", Offset = "0x3F8D2B8", VA = "0x3F8D2B8")]
		public static Stream CreateStream(Stream stream, ES3Settings settings, ES3FileMode fileMode)
		{
			return null;
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x3F8D698", Offset = "0x3F8D698", VA = "0x3F8D698")]
		public static void CopyTo(Stream source, Stream destination)
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class ES3Member
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type type;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isProperty;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ES3Reflection.ES3ReflectedMember reflectedMember;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useReflection;

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x280F9D0", Offset = "0x280F9D0", VA = "0x280F9D0")]
		public ES3Member(string name, Type type, bool isProperty)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x280FA30", Offset = "0x280FA30", VA = "0x280FA30")]
		public ES3Member(ES3Reflection.ES3ReflectedMember reflectedMember)
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[Preserve]
	public static class ES3TypeMgr
	{
		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10BF3C4", Offset = "0x10BF3C4")]
		public static Dictionary<Type, ES3Type> types;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ES3Type lastAccessedType;

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x3F8AEE0", Offset = "0x3F8AEE0", VA = "0x3F8AEE0")]
		public static ES3Type GetOrCreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x3F9058C", Offset = "0x3F9058C", VA = "0x3F9058C")]
		public static ES3Type GetES3Type(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x3F8D780", Offset = "0x3F8D780", VA = "0x3F8D780")]
		internal static void Add(Type type, ES3Type es3Type)
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x3F8FB18", Offset = "0x3F8FB18", VA = "0x3F8FB18")]
		internal static ES3Type CreateES3Type(Type type, bool throwException = true)
		{
			return null;
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x3F8F8A8", Offset = "0x3F8F8A8", VA = "0x3F8F8A8")]
		internal static void Init()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class ES3WebClass
	{
		[Token(Token = "0x20003A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACCF0", Offset = "0x10ACCF0")]
		private sealed class <SendWebRequest>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ES3WebClass <>4__this;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityWebRequest webRequest;

			[Token(Token = "0x17000463")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019AB")]
				[Address(RVA = "0x1DDA078", Offset = "0x1DDA078", VA = "0x1DDA078", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000464")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019AD")]
				[Address(RVA = "0x1DDA0C0", Offset = "0x1DDA0C0", VA = "0x1DDA0C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x1DD9FC4", Offset = "0x1DD9FC4", VA = "0x1DD9FC4")]
			[DebuggerHidden]
			public <SendWebRequest>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60019A9")]
			[Address(RVA = "0x1DD9FF0", Offset = "0x1DD9FF0", VA = "0x1DD9FF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019AA")]
			[Address(RVA = "0x1DD9FF4", Offset = "0x1DD9FF4", VA = "0x1DD9FF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019AC")]
			[Address(RVA = "0x1DDA080", Offset = "0x1DDA080", VA = "0x1DDA080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string url;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string apiKey;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<KeyValuePair<string, string>> formData;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected UnityWebRequest _webRequest;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isDone;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string error;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public long errorCode;

		[Token(Token = "0x17000460")]
		public float uploadProgress
		{
			[Token(Token = "0x600199D")]
			[Address(RVA = "0x3376BCC", Offset = "0x3376BCC", VA = "0x3376BCC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000461")]
		public float downloadProgress
		{
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x3376BE4", Offset = "0x3376BE4", VA = "0x3376BE4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000462")]
		public bool isError
		{
			[Token(Token = "0x600199F")]
			[Address(RVA = "0x3376BFC", Offset = "0x3376BFC", VA = "0x3376BFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x3376C3C", Offset = "0x3376C3C", VA = "0x3376C3C")]
		public static bool IsNetworkError(UnityWebRequest www)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x3376C64", Offset = "0x3376C64", VA = "0x3376C64")]
		protected ES3WebClass(string url, string apiKey)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x3376D18", Offset = "0x3376D18", VA = "0x3376D18")]
		public void AddPOSTField(string fieldName, string value)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x3376DBC", Offset = "0x3376DBC", VA = "0x3376DBC")]
		protected string GetUser(string user, string password)
		{
			return null;
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x3376E5C", Offset = "0x3376E5C", VA = "0x3376E5C")]
		protected WWWForm CreateWWWForm()
		{
			return null;
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0x3376FBC", Offset = "0x3376FBC", VA = "0x3376FBC")]
		protected bool HandleError(UnityWebRequest webRequest, bool errorIfDataIsDownloaded)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x33771B0", Offset = "0x33771B0", VA = "0x33771B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C603C", Offset = "0x10C603C")]
		protected IEnumerator SendWebRequest(UnityWebRequest webRequest)
		{
			return null;
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0x3377244", Offset = "0x3377244", VA = "0x3377244", Slot = "4")]
		protected virtual void Reset()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	internal enum ES3SpecialByte : byte
	{
		[Token(Token = "0x4001040")]
		Null = 0,
		[Token(Token = "0x4001041")]
		Bool = 1,
		[Token(Token = "0x4001042")]
		Byte = 2,
		[Token(Token = "0x4001043")]
		Sbyte = 3,
		[Token(Token = "0x4001044")]
		Char = 4,
		[Token(Token = "0x4001045")]
		Decimal = 5,
		[Token(Token = "0x4001046")]
		Double = 6,
		[Token(Token = "0x4001047")]
		Float = 7,
		[Token(Token = "0x4001048")]
		Int = 8,
		[Token(Token = "0x4001049")]
		Uint = 9,
		[Token(Token = "0x400104A")]
		Long = 10,
		[Token(Token = "0x400104B")]
		Ulong = 11,
		[Token(Token = "0x400104C")]
		Short = 12,
		[Token(Token = "0x400104D")]
		Ushort = 13,
		[Token(Token = "0x400104E")]
		String = 14,
		[Token(Token = "0x400104F")]
		ByteArray = 15,
		[Token(Token = "0x4001050")]
		Collection = 128,
		[Token(Token = "0x4001051")]
		Dictionary = 129,
		[Token(Token = "0x4001052")]
		CollectionItem = 130,
		[Token(Token = "0x4001053")]
		Object = 254,
		[Token(Token = "0x4001054")]
		Terminator = byte.MaxValue
	}
	[Token(Token = "0x20003A9")]
	internal static class ES3Binary
	{
		[Token(Token = "0x4001055")]
		internal const string ObjectTerminator = ".";

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Dictionary<ES3SpecialByte, Type> IdToType;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly Dictionary<Type, ES3SpecialByte> TypeToId;

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x280311C", Offset = "0x280311C", VA = "0x280311C")]
		internal static ES3SpecialByte TypeToByte(Type type)
		{
			return default(ES3SpecialByte);
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x28031CC", Offset = "0x28031CC", VA = "0x28031CC")]
		internal static Type ByteToType(ES3SpecialByte b)
		{
			return null;
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x280322C", Offset = "0x280322C", VA = "0x280322C")]
		internal static Type ByteToType(byte b)
		{
			return null;
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x2803328", Offset = "0x2803328", VA = "0x2803328")]
		internal static bool IsPrimitive(ES3SpecialByte b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003AA")]
	internal class ES3CacheWriter : ES3Writer
	{
		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ES3File es3File;

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x28039D4", Offset = "0x28039D4", VA = "0x28039D4")]
		internal ES3CacheWriter(ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x60019B4")]
		public override void Write<T>(string key, object value)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x2803A78", Offset = "0x2803A78", VA = "0x2803A78", Slot = "39")]
		internal override void Write(string key, Type type, byte[] value)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x2803CA8", Offset = "0x2803CA8", VA = "0x2803CA8", Slot = "41")]
		[AttributeAttribute(Name = "EditorBrowsableAttribute", RVA = "0x10C60EC", Offset = "0x10C60EC")]
		public override void Write(Type type, string key, object value)
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x2803D14", Offset = "0x2803D14", VA = "0x2803D14", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x2803D18", Offset = "0x2803D18", VA = "0x2803D18", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x2803D1C", Offset = "0x2803D1C", VA = "0x2803D1C", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x2803D20", Offset = "0x2803D20", VA = "0x2803D20", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x2803D24", Offset = "0x2803D24", VA = "0x2803D24", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x2803D28", Offset = "0x2803D28", VA = "0x2803D28", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x2803D2C", Offset = "0x2803D2C", VA = "0x2803D2C", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x2803D30", Offset = "0x2803D30", VA = "0x2803D30", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x2803D34", Offset = "0x2803D34", VA = "0x2803D34", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x2803D38", Offset = "0x2803D38", VA = "0x2803D38", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x2803D3C", Offset = "0x2803D3C", VA = "0x2803D3C", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x2803D40", Offset = "0x2803D40", VA = "0x2803D40", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x2803D44", Offset = "0x2803D44", VA = "0x2803D44", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x2803D48", Offset = "0x2803D48", VA = "0x2803D48", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x2803D4C", Offset = "0x2803D4C", VA = "0x2803D4C", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x2803D50", Offset = "0x2803D50", VA = "0x2803D50", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x2803D54", Offset = "0x2803D54", VA = "0x2803D54")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x2803D5C", Offset = "0x2803D5C", VA = "0x2803D5C")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x2803D60", Offset = "0x2803D60", VA = "0x2803D60", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x2803D64", Offset = "0x2803D64", VA = "0x2803D64", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x2803D68", Offset = "0x2803D68", VA = "0x2803D68", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x2803D6C", Offset = "0x2803D6C", VA = "0x2803D6C", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x2803D74", Offset = "0x2803D74", VA = "0x2803D74", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x2803D78", Offset = "0x2803D78", VA = "0x2803D78", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x2803D7C", Offset = "0x2803D7C", VA = "0x2803D7C", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x2803D80", Offset = "0x2803D80", VA = "0x2803D80", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x2803D84", Offset = "0x2803D84", VA = "0x2803D84", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x2803D88", Offset = "0x2803D88", VA = "0x2803D88", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x2803D8C", Offset = "0x2803D8C", VA = "0x2803D8C", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x2803D90", Offset = "0x2803D90", VA = "0x2803D90", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x2803D94", Offset = "0x2803D94", VA = "0x2803D94", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x2803D98", Offset = "0x2803D98", VA = "0x2803D98", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x2803D9C", Offset = "0x2803D9C", VA = "0x2803D9C", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x2803DA0", Offset = "0x2803DA0", VA = "0x2803DA0", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0x2803DA4", Offset = "0x2803DA4", VA = "0x2803DA4", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x2803DA8", Offset = "0x2803DA8", VA = "0x2803DA8", Slot = "22")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	internal class ES3JSONWriter : ES3Writer
	{
		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal StreamWriter baseWriter;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFirstProperty;

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x280DFB4", Offset = "0x280DFB4", VA = "0x280DFB4")]
		public ES3JSONWriter(Stream stream, ES3Settings settings)
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x280DFC0", Offset = "0x280DFC0", VA = "0x280DFC0")]
		internal ES3JSONWriter(Stream stream, ES3Settings settings, bool writeHeaderAndFooter, bool mergeKeys)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x280E078", Offset = "0x280E078", VA = "0x280E078", Slot = "24")]
		internal override void WritePrimitive(int value)
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x280E09C", Offset = "0x280E09C", VA = "0x280E09C", Slot = "25")]
		internal override void WritePrimitive(float value)
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x280E158", Offset = "0x280E158", VA = "0x280E158", Slot = "26")]
		internal override void WritePrimitive(bool value)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x280E1E0", Offset = "0x280E1E0", VA = "0x280E1E0", Slot = "27")]
		internal override void WritePrimitive(decimal value)
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x280E284", Offset = "0x280E284", VA = "0x280E284", Slot = "28")]
		internal override void WritePrimitive(double value)
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x280E340", Offset = "0x280E340", VA = "0x280E340", Slot = "29")]
		internal override void WritePrimitive(long value)
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x280E364", Offset = "0x280E364", VA = "0x280E364", Slot = "30")]
		internal override void WritePrimitive(ulong value)
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x280E388", Offset = "0x280E388", VA = "0x280E388", Slot = "31")]
		internal override void WritePrimitive(uint value)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x280E3AC", Offset = "0x280E3AC", VA = "0x280E3AC", Slot = "32")]
		internal override void WritePrimitive(byte value)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x280E440", Offset = "0x280E440", VA = "0x280E440", Slot = "33")]
		internal override void WritePrimitive(sbyte value)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x280E4D4", Offset = "0x280E4D4", VA = "0x280E4D4", Slot = "34")]
		internal override void WritePrimitive(short value)
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x280E568", Offset = "0x280E568", VA = "0x280E568", Slot = "35")]
		internal override void WritePrimitive(ushort value)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x280E5FC", Offset = "0x280E5FC", VA = "0x280E5FC", Slot = "36")]
		internal override void WritePrimitive(char value)
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x280E640", Offset = "0x280E640", VA = "0x280E640", Slot = "38")]
		internal override void WritePrimitive(byte[] value)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x280E6C8", Offset = "0x280E6C8", VA = "0x280E6C8", Slot = "37")]
		internal override void WritePrimitive(string value)
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x280E8F8", Offset = "0x280E8F8", VA = "0x280E8F8", Slot = "5")]
		internal override void WriteNull()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x280E958", Offset = "0x280E958", VA = "0x280E958")]
		private static bool CharacterRequiresEscaping(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x280E98C", Offset = "0x280E98C", VA = "0x280E98C")]
		private void WriteCommaIfRequired()
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x280EA68", Offset = "0x280EA68", VA = "0x280EA68", Slot = "23")]
		internal override void WriteRawProperty(string name, byte[] value)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x280EB04", Offset = "0x280EB04", VA = "0x280EB04", Slot = "6")]
		internal override void StartWriteFile()
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x280EB4C", Offset = "0x280EB4C", VA = "0x280EB4C", Slot = "7")]
		internal override void EndWriteFile()
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x280EBA4", Offset = "0x280EBA4", VA = "0x280EBA4", Slot = "10")]
		internal override void StartWriteProperty(string name)
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0x280EC64", Offset = "0x280EC64", VA = "0x280EC64", Slot = "11")]
		internal override void EndWriteProperty(string name)
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x280EC6C", Offset = "0x280EC6C", VA = "0x280EC6C", Slot = "8")]
		internal override void StartWriteObject(string name)
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x280ECB0", Offset = "0x280ECB0", VA = "0x280ECB0", Slot = "9")]
		internal override void EndWriteObject(string name)
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x280ECF8", Offset = "0x280ECF8", VA = "0x280ECF8", Slot = "12")]
		internal override void StartWriteCollection()
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0x280ED3C", Offset = "0x280ED3C", VA = "0x280ED3C", Slot = "13")]
		internal override void EndWriteCollection()
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x280ED80", Offset = "0x280ED80", VA = "0x280ED80", Slot = "14")]
		internal override void StartWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x60019F9")]
		[Address(RVA = "0x280EDAC", Offset = "0x280EDAC", VA = "0x280EDAC", Slot = "15")]
		internal override void EndWriteCollectionItem(int index)
		{
		}

		[Token(Token = "0x60019FA")]
		[Address(RVA = "0x280EDB0", Offset = "0x280EDB0", VA = "0x280EDB0", Slot = "16")]
		internal override void StartWriteDictionary()
		{
		}

		[Token(Token = "0x60019FB")]
		[Address(RVA = "0x280EDC0", Offset = "0x280EDC0", VA = "0x280EDC0", Slot = "17")]
		internal override void EndWriteDictionary()
		{
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x280EDD0", Offset = "0x280EDD0", VA = "0x280EDD0", Slot = "18")]
		internal override void StartWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x280EDFC", Offset = "0x280EDFC", VA = "0x280EDFC", Slot = "19")]
		internal override void EndWriteDictionaryKey(int index)
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x280EE20", Offset = "0x280EE20", VA = "0x280EE20", Slot = "20")]
		internal override void StartWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x280EE24", Offset = "0x280EE24", VA = "0x280EE24", Slot = "21")]
		internal override void EndWriteDictionaryValue(int index)
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x280EE28", Offset = "0x280EE28", VA = "0x280EE28", Slot = "22")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x280E9D8", Offset = "0x280E9D8", VA = "0x280E9D8")]
		public void WriteNewlineAndTabs()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x20003AC")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x20003AD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD10", Offset = "0x10ACD10")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x6001A11")]
			[Address(RVA = "0x2242498", Offset = "0x2242498", VA = "0x2242498")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x22424A0", Offset = "0x22424A0", VA = "0x22424A0")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001A13")]
			[Address(RVA = "0x22424BC", Offset = "0x22424BC", VA = "0x22424BC")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003AE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD20", Offset = "0x10ACD20")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400105C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x6001A14")]
			[Address(RVA = "0x22424D8", Offset = "0x22424D8", VA = "0x22424D8")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001A15")]
			[Address(RVA = "0x22424E0", Offset = "0x22424E0", VA = "0x22424E0")]
			internal float <DOPitch>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x22424FC", Offset = "0x22424FC", VA = "0x22424FC")]
			internal void <DOPitch>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003AF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD30", Offset = "0x10ACD30")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x400105D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixer target;

			[Token(Token = "0x400105E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string floatName;

			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x2242518", Offset = "0x2242518", VA = "0x2242518")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x2242520", Offset = "0x2242520", VA = "0x2242520")]
			internal float <DOSetFloat>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x2242560", Offset = "0x2242560", VA = "0x2242560")]
			internal void <DOSetFloat>b__1(float x)
			{
			}
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x1FEC3F0", Offset = "0x1FEC3F0", VA = "0x1FEC3F0")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x1FEC5C0", Offset = "0x1FEC5C0", VA = "0x1FEC5C0")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x1FEC768", Offset = "0x1FEC768", VA = "0x1FEC768")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x1FEC924", Offset = "0x1FEC924", VA = "0x1FEC924")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x1FEC998", Offset = "0x1FEC998", VA = "0x1FEC998")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x1FECA0C", Offset = "0x1FECA0C", VA = "0x1FECA0C")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x1FECA70", Offset = "0x1FECA70", VA = "0x1FECA70")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x1FECAF4", Offset = "0x1FECAF4", VA = "0x1FECAF4")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x1FECB58", Offset = "0x1FECB58", VA = "0x1FECB58")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1FECBBC", Offset = "0x1FECBBC", VA = "0x1FECBBC")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x1FECC20", Offset = "0x1FECC20", VA = "0x1FECC20")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x1FECC84", Offset = "0x1FECC84", VA = "0x1FECC84")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x1FECCF0", Offset = "0x1FECCF0", VA = "0x1FECCF0")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x1FECD58", Offset = "0x1FECD58", VA = "0x1FECD58")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x1FECDBC", Offset = "0x1FECDBC", VA = "0x1FECDBC")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003B0")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x20003B1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD50", Offset = "0x10ACD50")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400105F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A25")]
			[Address(RVA = "0x2242584", Offset = "0x2242584", VA = "0x2242584")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001A26")]
			[Address(RVA = "0x224258C", Offset = "0x224258C", VA = "0x224258C")]
			internal Vector3 <DOMove>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003B2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD60", Offset = "0x10ACD60")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A27")]
			[Address(RVA = "0x22426CC", Offset = "0x22426CC", VA = "0x22426CC")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0x22426D4", Offset = "0x22426D4", VA = "0x22426D4")]
			internal Vector3 <DOMoveX>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003B3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD70", Offset = "0x10ACD70")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A29")]
			[Address(RVA = "0x22426F0", Offset = "0x22426F0", VA = "0x22426F0")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0x22426F8", Offset = "0x22426F8", VA = "0x22426F8")]
			internal Vector3 <DOMoveY>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD80", Offset = "0x10ACD80")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0x2242714", Offset = "0x2242714", VA = "0x2242714")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0x224271C", Offset = "0x224271C", VA = "0x224271C")]
			internal Vector3 <DOMoveZ>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003B5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACD90", Offset = "0x10ACD90")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4001063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0x2242738", Offset = "0x2242738", VA = "0x2242738")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0x2242740", Offset = "0x2242740", VA = "0x2242740")]
			internal Quaternion <DORotate>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003B6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDA0", Offset = "0x10ACDA0")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4001064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0x224275C", Offset = "0x224275C", VA = "0x224275C")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001A30")]
			[Address(RVA = "0x2242764", Offset = "0x2242764", VA = "0x2242764")]
			internal Quaternion <DOLookAt>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003B7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDB0", Offset = "0x10ACDB0")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x4001068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x400106A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 endValue;

			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Tween yTween;

			[Token(Token = "0x6001A31")]
			[Address(RVA = "0x2242780", Offset = "0x2242780", VA = "0x2242780")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001A32")]
			[Address(RVA = "0x2242788", Offset = "0x2242788", VA = "0x2242788")]
			internal Vector3 <DOJump>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A33")]
			[Address(RVA = "0x22427A4", Offset = "0x22427A4", VA = "0x22427A4")]
			internal void <DOJump>b__1()
			{
			}

			[Token(Token = "0x6001A34")]
			[Address(RVA = "0x22427D8", Offset = "0x22427D8", VA = "0x22427D8")]
			internal Vector3 <DOJump>b__2()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A35")]
			[Address(RVA = "0x22427F4", Offset = "0x22427F4", VA = "0x22427F4")]
			internal Vector3 <DOJump>b__3()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0x2242810", Offset = "0x2242810", VA = "0x2242810")]
			internal void <DOJump>b__4()
			{
			}
		}

		[Token(Token = "0x20003B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDC0", Offset = "0x10ACDC0")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0x22428D0", Offset = "0x22428D0", VA = "0x22428D0")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6001A38")]
			[Address(RVA = "0x22428D8", Offset = "0x22428D8", VA = "0x22428D8")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003B9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDD0", Offset = "0x10ACDD0")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x400106D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x400106E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x6001A39")]
			[Address(RVA = "0x22428F4", Offset = "0x22428F4", VA = "0x22428F4")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001A3A")]
			[Address(RVA = "0x22428FC", Offset = "0x22428FC", VA = "0x22428FC")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A3B")]
			[Address(RVA = "0x2242918", Offset = "0x2242918", VA = "0x2242918")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003BA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDE0", Offset = "0x10ACDE0")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x400106F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001A3C")]
			[Address(RVA = "0x2242A18", Offset = "0x2242A18", VA = "0x2242A18")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x2242A20", Offset = "0x2242A20", VA = "0x2242A20")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACDF0", Offset = "0x10ACDF0")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4001070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x4001071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x22425A8", Offset = "0x22425A8", VA = "0x22425A8")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x22425B0", Offset = "0x22425B0", VA = "0x22425B0")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001A40")]
			[Address(RVA = "0x22425CC", Offset = "0x22425CC", VA = "0x22425CC")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x1FECE20", Offset = "0x1FECE20", VA = "0x1FECE20")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x1FECFFC", Offset = "0x1FECFFC", VA = "0x1FECFFC")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0x1FED1CC", Offset = "0x1FED1CC", VA = "0x1FED1CC")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x1FED39C", Offset = "0x1FED39C", VA = "0x1FED39C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x1FED56C", Offset = "0x1FED56C", VA = "0x1FED56C")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x1FED744", Offset = "0x1FED744", VA = "0x1FED744")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x1FED998", Offset = "0x1FED998", VA = "0x1FED998")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x1FEDECC", Offset = "0x1FEDECC", VA = "0x1FEDECC")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x1FEE148", Offset = "0x1FEE148", VA = "0x1FEE148")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x1FEE3E4", Offset = "0x1FEE3E4", VA = "0x1FEE3E4")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x1FEE5D4", Offset = "0x1FEE5D4", VA = "0x1FEE5D4")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x20003BC")]
	public static class DOTweenModuleUnityVersion
	{
		[Token(Token = "0x20003BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE10", Offset = "0x10ACE10")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x4001073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x6001A51")]
			[Address(RVA = "0x2242A3C", Offset = "0x2242A3C", VA = "0x2242A3C")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001A52")]
			[Address(RVA = "0x2242A44", Offset = "0x2242A44", VA = "0x2242A44")]
			internal Vector2 <DOOffset>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001A53")]
			[Address(RVA = "0x2242A68", Offset = "0x2242A68", VA = "0x2242A68")]
			internal void <DOOffset>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003BE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE20", Offset = "0x10ACE20")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x6001A54")]
			[Address(RVA = "0x2242A8C", Offset = "0x2242A8C", VA = "0x2242A8C")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001A55")]
			[Address(RVA = "0x2242A94", Offset = "0x2242A94", VA = "0x2242A94")]
			internal Vector2 <DOTiling>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001A56")]
			[Address(RVA = "0x2242AB8", Offset = "0x2242AB8", VA = "0x2242AB8")]
			internal void <DOTiling>b__1(Vector2 x)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003BF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE30", Offset = "0x10ACE30")]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A57")]
			[Address(RVA = "0x2242ADC", Offset = "0x2242ADC", VA = "0x2242ADC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A58")]
			[Address(RVA = "0x2242D20", Offset = "0x2242D20", VA = "0x2242D20", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE40", Offset = "0x10ACE40")]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x400107A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400107B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400107C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400107D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A59")]
			[Address(RVA = "0x2243430", Offset = "0x2243430", VA = "0x2243430", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0x2243698", Offset = "0x2243698", VA = "0x2243698", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE50", Offset = "0x10ACE50")]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400107F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0x2242F84", Offset = "0x2242F84", VA = "0x2242F84", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x22431B4", Offset = "0x22431B4", VA = "0x22431B4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE60", Offset = "0x10ACE60")]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4001082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x4001086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x2242D2C", Offset = "0x2242D2C", VA = "0x2242D2C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x2242F78", Offset = "0x2242F78", VA = "0x2242F78", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE70", Offset = "0x10ACE70")]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001089")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400108A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x400108B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0x22431C0", Offset = "0x22431C0", VA = "0x22431C0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x2243424", Offset = "0x2243424", VA = "0x2243424", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACE80", Offset = "0x10ACE80")]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x400108C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400108D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400108E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400108F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x22436A4", Offset = "0x22436A4", VA = "0x22436A4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x22438DC", Offset = "0x22438DC", VA = "0x22438DC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x1FEE7E4", Offset = "0x1FEE7E4", VA = "0x1FEE7E4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x1FEE9D4", Offset = "0x1FEE9D4", VA = "0x1FEE9D4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x1FEEBD8", Offset = "0x1FEEBD8", VA = "0x1FEEBD8")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x1FEEC98", Offset = "0x1FEEC98", VA = "0x1FEEC98")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x1FEED58", Offset = "0x1FEED58", VA = "0x1FEED58")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x1FEEE18", Offset = "0x1FEEE18", VA = "0x1FEEE18")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x1FEEEE8", Offset = "0x1FEEEE8", VA = "0x1FEEEE8")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x1FEEFB8", Offset = "0x1FEEFB8", VA = "0x1FEEFB8")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x1FEF078", Offset = "0x1FEF078", VA = "0x1FEF078")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x1FEF2A0", Offset = "0x1FEF2A0", VA = "0x1FEF2A0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x1FEF4C8", Offset = "0x1FEF4C8", VA = "0x1FEF4C8")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C6340", Offset = "0x10C6340")]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x1FEF5E4", Offset = "0x1FEF5E4", VA = "0x1FEF5E4")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C63B0", Offset = "0x10C63B0")]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x1FEF700", Offset = "0x1FEF700", VA = "0x1FEF700")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C6420", Offset = "0x10C6420")]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x1FEF81C", Offset = "0x1FEF81C", VA = "0x1FEF81C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C6490", Offset = "0x10C6490")]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x1FEF948", Offset = "0x1FEF948", VA = "0x1FEF948")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C6500", Offset = "0x10C6500")]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x1FEFA74", Offset = "0x1FEFA74", VA = "0x1FEFA74")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x10C6570", Offset = "0x10C6570")]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x20003C5")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x20003C6")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4001090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000465")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A63")]
				[Address(RVA = "0x22421A0", Offset = "0x22421A0", VA = "0x22421A0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x22421D4", Offset = "0x22421D4", VA = "0x22421D4")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x20003C7")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4001091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000466")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A65")]
				[Address(RVA = "0x2242398", Offset = "0x2242398", VA = "0x2242398", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A66")]
			[Address(RVA = "0x22423FC", Offset = "0x22423FC", VA = "0x22423FC")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x20003C8")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4001092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000467")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A67")]
				[Address(RVA = "0x224229C", Offset = "0x224229C", VA = "0x224229C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A68")]
			[Address(RVA = "0x22422B8", Offset = "0x22422B8", VA = "0x22422B8")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x20003C9")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x4001093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x17000468")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A69")]
				[Address(RVA = "0x2242208", Offset = "0x2242208", VA = "0x2242208", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x2242254", Offset = "0x2242254", VA = "0x2242254")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x20003CA")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x4001095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x17000469")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A6B")]
				[Address(RVA = "0x22422EC", Offset = "0x22422EC", VA = "0x22422EC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x2242350", Offset = "0x2242350", VA = "0x2242350")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x20003CB")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x4001097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700046A")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001A6D")]
				[Address(RVA = "0x2242430", Offset = "0x2242430", VA = "0x2242430", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x2242464", Offset = "0x2242464", VA = "0x2242464")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20003CC")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x20003CD")]
		public static class Physics
		{
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0x22438E8", Offset = "0x22438E8", VA = "0x22438E8")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6001A72")]
			[Address(RVA = "0x22439EC", Offset = "0x22439EC", VA = "0x22439EC")]
			public static bool HasRigidbody2D(UnityEngine.Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A73")]
			[Address(RVA = "0x22439F4", Offset = "0x22439F4", VA = "0x22439F4")]
			[Preserve]
			public static bool HasRigidbody(UnityEngine.Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6001A74")]
			[Address(RVA = "0x2243A8C", Offset = "0x2243A8C", VA = "0x2243A8C")]
			[Preserve]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x1FEFB90", Offset = "0x1FEFB90", VA = "0x1FEFB90")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x1FEFC54", Offset = "0x1FEFC54", VA = "0x1FEFC54")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
namespace DarkTonic.MasterAudio
{
	[Token(Token = "0x20003CE")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10ACE90", Offset = "0x10ACE90")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10ACE90", Offset = "0x10ACE90")]
	public class AmbientSound : MonoBehaviour
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string AmbientSoundGroup;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string variationName;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float playVolume;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MasterAudio.AmbientSoundExitMode exitMode;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exitFadeTime;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AmbientSoundReEnterMode reEnterMode;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float reEnterFadeTime;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF3E8", Offset = "0x10BF3E8")]
		public bool FollowCaller;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF420", Offset = "0x10BF420")]
		public bool UseClosestColliderPosition;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool UseTopCollider;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool IncludeChildColliders;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF458", Offset = "0x10BF458")]
		public Transform RuntimeFollower;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _trans;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float colliderMaxDistance;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public long lastTimeMaxDistanceCalced;

		[Token(Token = "0x1700046B")]
		public bool IsValidSoundGroup
		{
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x2003798", Offset = "0x2003798", VA = "0x2003798")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046C")]
		public Transform Trans
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x2003994", Offset = "0x2003994", VA = "0x2003994")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x20035DC", Offset = "0x20035DC", VA = "0x20035DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0x2003640", Offset = "0x2003640", VA = "0x2003640")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x200382C", Offset = "0x200382C", VA = "0x200382C")]
		private void StopTrackers()
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x2003A34", Offset = "0x2003A34", VA = "0x2003A34")]
		public void CalculateRadius()
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x2003B28", Offset = "0x2003B28", VA = "0x2003B28")]
		public AudioSource GetNamedOrFirstAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x2003D10", Offset = "0x2003D10", VA = "0x2003D10")]
		public List<AudioSource> GetAllVariationAudioSources()
		{
			return null;
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x2003F40", Offset = "0x2003F40", VA = "0x2003F40")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x20041C0", Offset = "0x20041C0", VA = "0x20041C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x2004440", Offset = "0x2004440", VA = "0x2004440")]
		public void StartTrackers()
		{
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x2004670", Offset = "0x2004670", VA = "0x2004670")]
		public AmbientSound()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10ACEE0", Offset = "0x10ACEE0")]
	public class ButtonClicker : MonoBehaviour
	{
		[Token(Token = "0x40010A9")]
		public const float SmallSizeMultiplier = 0.9f;

		[Token(Token = "0x40010AA")]
		public const float LargeSizeMultiplier = 1.1f;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool resizeOnClick;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool resizeClickAllSiblings;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool resizeOnHover;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool resizeHoverAllSiblings;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mouseDownSound;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string mouseUpSound;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mouseClickSound;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mouseOverSound;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mouseOutSound;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalSize;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _smallerSize;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _largerSize;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _trans;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Dictionary<Transform, Vector3> _siblingClickScaleByTransform;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Dictionary<Transform, Vector3> _siblingHoverScaleByTransform;

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x28B76BC", Offset = "0x28B76BC", VA = "0x28B76BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x28B7930", Offset = "0x28B7930", VA = "0x28B7930")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x28B7B8C", Offset = "0x28B7B8C", VA = "0x28B7B8C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x28B7C2C", Offset = "0x28B7C2C", VA = "0x28B7C2C")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x28B7E88", Offset = "0x28B7E88", VA = "0x28B7E88")]
		public ButtonClicker()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10ACF18", Offset = "0x10ACF18")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10ACF18", Offset = "0x10ACF18")]
	public class EventSounds : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x20003D1")]
		public enum UnityUIVersion
		{
			[Token(Token = "0x4001134")]
			Legacy,
			[Token(Token = "0x4001135")]
			uGUI
		}

		[Token(Token = "0x20003D2")]
		public enum EventType
		{
			[Token(Token = "0x4001137")]
			OnStart,
			[Token(Token = "0x4001138")]
			OnVisible,
			[Token(Token = "0x4001139")]
			OnInvisible,
			[Token(Token = "0x400113A")]
			OnCollision,
			[Token(Token = "0x400113B")]
			OnTriggerEnter,
			[Token(Token = "0x400113C")]
			OnTriggerExit,
			[Token(Token = "0x400113D")]
			OnMouseEnter,
			[Token(Token = "0x400113E")]
			OnMouseClick,
			[Token(Token = "0x400113F")]
			OnSpawned,
			[Token(Token = "0x4001140")]
			OnDespawned,
			[Token(Token = "0x4001141")]
			OnEnable,
			[Token(Token = "0x4001142")]
			OnDisable,
			[Token(Token = "0x4001143")]
			OnCollision2D,
			[Token(Token = "0x4001144")]
			OnTriggerEnter2D,
			[Token(Token = "0x4001145")]
			OnTriggerExit2D,
			[Token(Token = "0x4001146")]
			OnParticleCollision,
			[Token(Token = "0x4001147")]
			UserDefinedEvent,
			[Token(Token = "0x4001148")]
			OnCollisionExit,
			[Token(Token = "0x4001149")]
			OnCollisionExit2D,
			[Token(Token = "0x400114A")]
			OnMouseUp,
			[Token(Token = "0x400114B")]
			OnMouseExit,
			[Token(Token = "0x400114C")]
			OnMouseDrag,
			[Token(Token = "0x400114D")]
			NGUIOnClick,
			[Token(Token = "0x400114E")]
			NGUIMouseDown,
			[Token(Token = "0x400114F")]
			NGUIMouseUp,
			[Token(Token = "0x4001150")]
			NGUIMouseEnter,
			[Token(Token = "0x4001151")]
			NGUIMouseExit,
			[Token(Token = "0x4001152")]
			MechanimStateChanged,
			[Token(Token = "0x4001153")]
			UnitySliderChanged,
			[Token(Token = "0x4001154")]
			UnityButtonClicked,
			[Token(Token = "0x4001155")]
			UnityPointerDown,
			[Token(Token = "0x4001156")]
			UnityPointerUp,
			[Token(Token = "0x4001157")]
			UnityPointerEnter,
			[Token(Token = "0x4001158")]
			UnityPointerExit,
			[Token(Token = "0x4001159")]
			UnityDrag,
			[Token(Token = "0x400115A")]
			UnityDrop,
			[Token(Token = "0x400115B")]
			UnityScroll,
			[Token(Token = "0x400115C")]
			UnityUpdateSelected,
			[Token(Token = "0x400115D")]
			UnitySelect,
			[Token(Token = "0x400115E")]
			UnityDeselect,
			[Token(Token = "0x400115F")]
			UnityMove,
			[Token(Token = "0x4001160")]
			UnityInitializePotentialDrag,
			[Token(Token = "0x4001161")]
			UnityBeginDrag,
			[Token(Token = "0x4001162")]
			UnityEndDrag,
			[Token(Token = "0x4001163")]
			UnitySubmit,
			[Token(Token = "0x4001164")]
			UnityCancel,
			[Token(Token = "0x4001165")]
			UnityToggle,
			[Token(Token = "0x4001166")]
			OnTriggerStay,
			[Token(Token = "0x4001167")]
			OnTriggerStay2D,
			[Token(Token = "0x4001168")]
			CodeTriggeredEvent1,
			[Token(Token = "0x4001169")]
			CodeTriggeredEvent2
		}

		[Token(Token = "0x20003D3")]
		public enum GlidePitchType
		{
			[Token(Token = "0x400116B")]
			None,
			[Token(Token = "0x400116C")]
			RaisePitch,
			[Token(Token = "0x400116D")]
			LowerPitch
		}

		[Token(Token = "0x20003D4")]
		public enum VariationType
		{
			[Token(Token = "0x400116F")]
			PlaySpecific,
			[Token(Token = "0x4001170")]
			PlayRandom
		}

		[Token(Token = "0x20003D5")]
		public enum PreviousSoundStopMode
		{
			[Token(Token = "0x4001172")]
			None,
			[Token(Token = "0x4001173")]
			Stop,
			[Token(Token = "0x4001174")]
			FadeOut
		}

		[Token(Token = "0x20003D6")]
		public enum RetriggerLimMode
		{
			[Token(Token = "0x4001176")]
			None,
			[Token(Token = "0x4001177")]
			FrameBased,
			[Token(Token = "0x4001178")]
			TimeBased
		}

		[Token(Token = "0x20003D7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACF68", Offset = "0x10ACF68")]
		private sealed class <CoUpdate>d__129 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400117A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400117B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSounds <>4__this;

			[Token(Token = "0x17000470")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AC7")]
				[Address(RVA = "0x1DDA6DC", Offset = "0x1DDA6DC", VA = "0x1DDA6DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000471")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AC9")]
				[Address(RVA = "0x1DDA724", Offset = "0x1DDA724", VA = "0x1DDA724", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0x1DDA510", Offset = "0x1DDA510", VA = "0x1DDA510")]
			[DebuggerHidden]
			public <CoUpdate>d__129(int <>1__state)
			{
			}

			[Token(Token = "0x6001AC5")]
			[Address(RVA = "0x1DDA53C", Offset = "0x1DDA53C", VA = "0x1DDA53C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AC6")]
			[Address(RVA = "0x1DDA540", Offset = "0x1DDA540", VA = "0x1DDA540", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0x1DDA6E4", Offset = "0x1DDA6E4", VA = "0x1DDA6E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACF78", Offset = "0x10ACF78")]
		private sealed class <>c__DisplayClass178_0
		{
			[Token(Token = "0x400117C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioEvent aEvent;

			[Token(Token = "0x400117D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EventSounds <>4__this;

			[Token(Token = "0x400117E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action <>9__2;

			[Token(Token = "0x400117F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action <>9__3;

			[Token(Token = "0x4001180")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action <>9__4;

			[Token(Token = "0x4001181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action <>9__5;

			[Token(Token = "0x4001182")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action <>9__6;

			[Token(Token = "0x4001183")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action <>9__7;

			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0x1DDA0C8", Offset = "0x1DDA0C8", VA = "0x1DDA0C8")]
			public <>c__DisplayClass178_0()
			{
			}

			[Token(Token = "0x6001ACB")]
			[Address(RVA = "0x1DDA0D0", Offset = "0x1DDA0D0", VA = "0x1DDA0D0")]
			internal void <PerformSingleAction>b__0()
			{
			}

			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0x1DDA158", Offset = "0x1DDA158", VA = "0x1DDA158")]
			internal void <PerformSingleAction>b__1()
			{
			}

			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0x1DDA1E0", Offset = "0x1DDA1E0", VA = "0x1DDA1E0")]
			internal void <PerformSingleAction>b__2()
			{
			}

			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0x1DDA268", Offset = "0x1DDA268", VA = "0x1DDA268")]
			internal void <PerformSingleAction>b__3()
			{
			}

			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0x1DDA2F0", Offset = "0x1DDA2F0", VA = "0x1DDA2F0")]
			internal void <PerformSingleAction>b__4()
			{
			}

			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0x1DDA378", Offset = "0x1DDA378", VA = "0x1DDA378")]
			internal void <PerformSingleAction>b__5()
			{
			}

			[Token(Token = "0x6001AD1")]
			[Address(RVA = "0x1DDA400", Offset = "0x1DDA400", VA = "0x1DDA400")]
			internal void <PerformSingleAction>b__6()
			{
			}

			[Token(Token = "0x6001AD2")]
			[Address(RVA = "0x1DDA488", Offset = "0x1DDA488", VA = "0x1DDA488")]
			internal void <PerformSingleAction>b__7()
			{
			}
		}

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSounds;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showPoolManager;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showNGUI;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEvent eventToGizmo;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityUIVersion unityUIMode;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool logMissingEvents;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<string> LayerTagFilterEvents;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<MasterAudio.PlaylistCommand> PlaylistCommandsWithAll;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioEventGroup startSound;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioEventGroup visibleSound;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioEventGroup invisibleSound;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioEventGroup collisionSound;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioEventGroup collisionExitSound;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioEventGroup triggerSound;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioEventGroup triggerExitSound;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioEventGroup triggerStaySound;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioEventGroup mouseEnterSound;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioEventGroup mouseExitSound;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioEventGroup mouseClickSound;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioEventGroup mouseUpSound;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioEventGroup mouseDragSound;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioEventGroup spawnedSound;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioEventGroup despawnedSound;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioEventGroup enableSound;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioEventGroup disableSound;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioEventGroup collision2dSound;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioEventGroup collisionExit2dSound;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioEventGroup triggerEnter2dSound;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioEventGroup triggerStay2dSound;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioEventGroup triggerExit2dSound;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioEventGroup particleCollisionSound;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioEventGroup nguiOnClickSound;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioEventGroup nguiMouseDownSound;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioEventGroup nguiMouseUpSound;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioEventGroup nguiMouseEnterSound;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioEventGroup nguiMouseExitSound;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioEventGroup codeTriggeredEvent1Sound;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioEventGroup codeTriggeredEvent2Sound;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioEventGroup unitySliderChangedSound;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioEventGroup unityButtonClickedSound;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public AudioEventGroup unityPointerDownSound;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioEventGroup unityDragSound;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public AudioEventGroup unityPointerUpSound;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioEventGroup unityPointerEnterSound;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public AudioEventGroup unityPointerExitSound;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AudioEventGroup unityDropSound;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AudioEventGroup unityScrollSound;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AudioEventGroup unityUpdateSelectedSound;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public AudioEventGroup unitySelectSound;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public AudioEventGroup unityDeselectSound;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioEventGroup unityMoveSound;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public AudioEventGroup unityInitializePotentialDragSound;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public AudioEventGroup unityBeginDragSound;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioEventGroup unityEndDragSound;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public AudioEventGroup unitySubmitSound;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public AudioEventGroup unityCancelSound;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public AudioEventGroup unityToggleSound;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public List<AudioEventGroup> userDefinedSounds;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<AudioEventGroup> mechanimStateChangedSounds;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useStartSound;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useVisibleSound;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool useInvisibleSound;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CB")]
		public bool useCollisionSound;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public bool useCollisionExitSound;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		public bool useTriggerEnterSound;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		public bool useTriggerExitSound;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		public bool useTriggerStaySound;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool useMouseEnterSound;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		public bool useMouseExitSound;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D2")]
		public bool useMouseClickSound;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D3")]
		public bool useMouseUpSound;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public bool useMouseDragSound;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
		public bool useSpawnedSound;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
		public bool useDespawnedSound;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D7")]
		public bool useEnableSound;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool useDisableSound;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		public bool useCollision2dSound;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
		public bool useCollisionExit2dSound;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
		public bool useTriggerEnter2dSound;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool useTriggerStay2dSound;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		public bool useTriggerExit2dSound;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
		public bool useParticleCollisionSound;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DF")]
		public bool useNguiOnClickSound;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public bool useNguiMouseDownSound;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		public bool useNguiMouseUpSound;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E2")]
		public bool useNguiMouseEnterSound;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E3")]
		public bool useNguiMouseExitSound;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public bool useCodeTriggeredEvent1Sound;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		public bool useCodeTriggeredEvent2Sound;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E6")]
		public bool useUnitySliderChangedSound;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E7")]
		public bool useUnityButtonClickedSound;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool useUnityPointerDownSound;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
		public bool useUnityDragSound;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EA")]
		public bool useUnityPointerUpSound;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EB")]
		public bool useUnityPointerEnterSound;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public bool useUnityPointerExitSound;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1ED")]
		public bool useUnityDropSound;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EE")]
		public bool useUnityScrollSound;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EF")]
		public bool useUnityUpdateSelectedSound;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public bool useUnitySelectSound;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		public bool useUnityDeselectSound;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F2")]
		public bool useUnityMoveSound;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F3")]
		public bool useUnityInitializePotentialDragSound;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public bool useUnityBeginDragSound;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F5")]
		public bool useUnityEndDragSound;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F6")]
		public bool useUnitySubmitSound;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F7")]
		public bool useUnityCancelSound;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public bool useUnityToggleSound;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Slider _slider;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Toggle _toggle;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Button _button;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool _isVisible;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
		private bool _needsCoroutine;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private float? _triggerEnterTime;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private float? _triggerEnter2dTime;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Transform _trans;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<AudioEventGroup> _validMechanimStateChangedSounds;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Animator _anim;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private AudioEventGroup eventsToPlayDuringStart;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool startHappened;

		[Token(Token = "0x1700046D")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0x3379AC8", Offset = "0x3379AC8", VA = "0x3379AC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046E")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x6001AA7")]
			[Address(RVA = "0x337B524", Offset = "0x337B524", VA = "0x337B524")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700046F")]
		private Transform Trans
		{
			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0x337EDCC", Offset = "0x337EDCC", VA = "0x337EDCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x33799A0", Offset = "0x33799A0", VA = "0x33799A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x3379D44", Offset = "0x3379D44", VA = "0x3379D44", Slot = "10")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x3379EA4", Offset = "0x3379EA4", VA = "0x3379EA4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6680", Offset = "0x10C6680")]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x3379F1C", Offset = "0x3379F1C", VA = "0x3379F1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x337A630", Offset = "0x337A630", VA = "0x337A630")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x337A658", Offset = "0x337A658", VA = "0x337A658")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x337A674", Offset = "0x337A674", VA = "0x337A674")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x337A9C0", Offset = "0x337A9C0", VA = "0x337A9C0")]
		private void RestorePersistentSliders()
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x337AD50", Offset = "0x337AD50", VA = "0x337AD50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x337B19C", Offset = "0x337B19C", VA = "0x337B19C")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x337B2B8", Offset = "0x337B2B8", VA = "0x337B2B8")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x337B2D8", Offset = "0x337B2D8", VA = "0x337B2D8")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x337B2F8", Offset = "0x337B2F8", VA = "0x337B2F8")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x337B318", Offset = "0x337B318", VA = "0x337B318")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x337B338", Offset = "0x337B338", VA = "0x337B338")]
		private void OnDrag(Vector2 delta)
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x337B33C", Offset = "0x337B33C", VA = "0x337B33C")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x337B35C", Offset = "0x337B35C", VA = "0x337B35C")]
		private void OnDrop(GameObject go)
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x337B360", Offset = "0x337B360", VA = "0x337B360")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x337B380", Offset = "0x337B380", VA = "0x337B380")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x337B3A0", Offset = "0x337B3A0", VA = "0x337B3A0")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x337B3C0", Offset = "0x337B3C0", VA = "0x337B3C0")]
		private void OnSelect(bool isSelected)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x337B3C4", Offset = "0x337B3C4", VA = "0x337B3C4")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x337B3E4", Offset = "0x337B3E4", VA = "0x337B3E4")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x337B404", Offset = "0x337B404", VA = "0x337B404")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x337B424", Offset = "0x337B424", VA = "0x337B424")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x337B444", Offset = "0x337B444", VA = "0x337B444")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x337B464", Offset = "0x337B464", VA = "0x337B464")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x337B484", Offset = "0x337B484", VA = "0x337B484")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x337B4A4", Offset = "0x337B4A4", VA = "0x337B4A4")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x337B4C4", Offset = "0x337B4C4", VA = "0x337B4C4")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x337B4F4", Offset = "0x337B4F4", VA = "0x337B4F4")]
		private void ToggleChanged(bool newValue)
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x337B50C", Offset = "0x337B50C", VA = "0x337B50C")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x337B534", Offset = "0x337B534", VA = "0x337B534")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x337B56C", Offset = "0x337B56C", VA = "0x337B56C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x337B58C", Offset = "0x337B58C", VA = "0x337B58C")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x337B5C4", Offset = "0x337B5C4", VA = "0x337B5C4")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x337B614", Offset = "0x337B614", VA = "0x337B614")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x337B634", Offset = "0x337B634", VA = "0x337B634")]
		public void ActivateCodeTriggeredEvent1()
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x337B64C", Offset = "0x337B64C", VA = "0x337B64C")]
		public void ActivateCodeTriggeredEvent2()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x337B664", Offset = "0x337B664", VA = "0x337B664")]
		public void CalculateRadius(AudioEvent anEvent)
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x337B70C", Offset = "0x337B70C", VA = "0x337B70C")]
		public AudioSource GetNamedOrFirstAudioSource(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x337B8F8", Offset = "0x337B8F8", VA = "0x337B8F8")]
		public List<AudioSource> GetAllVariationAudioSources(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x337BB2C", Offset = "0x337BB2C", VA = "0x337BB2C")]
		public AudioEventGroup GetMechanimAudioEventGroup(string stateName)
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x337A3C4", Offset = "0x337A3C4", VA = "0x337A3C4")]
		public bool PlaySounds(AudioEventGroup eventGrp, EventType eType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x337E9DC", Offset = "0x337E9DC", VA = "0x337E9DC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x337EBD4", Offset = "0x337EBD4", VA = "0x337EBD4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x337BBE4", Offset = "0x337BBE4", VA = "0x337BBE4")]
		private static bool CheckForRetriggerLimit(AudioEventGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x337BC7C", Offset = "0x337BC7C", VA = "0x337BC7C")]
		private void PerformSingleAction(AudioEventGroup grp, AudioEvent aEvent, EventType eType)
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x337EE6C", Offset = "0x337EE6C", VA = "0x337EE6C")]
		private void LogIfCustomEventMissing(AudioEventGroup eventGroup)
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x3379F8C", Offset = "0x3379F8C", VA = "0x3379F8C", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x337F174", Offset = "0x337F174", VA = "0x337F174", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x337F250", Offset = "0x337F250", VA = "0x337F250", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x337ACB4", Offset = "0x337ACB4", VA = "0x337ACB4", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x337B108", Offset = "0x337B108", VA = "0x337B108", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x337F328", Offset = "0x337F328", VA = "0x337F328", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x3379AD8", Offset = "0x3379AD8", VA = "0x3379AD8")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x6001AC0")]
		private void AddUGUIHandler<T>(bool useSound) where T : EventSoundsUGUIHandler
		{
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x337F37C", Offset = "0x337F37C", VA = "0x337F37C")]
		public EventSounds()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class EventSoundsUGUIHandler : MonoBehaviour
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BF490", Offset = "0x10BF490")]
		private EventSounds <eventSounds>k__BackingField;

		[Token(Token = "0x17000472")]
		public EventSounds eventSounds
		{
			[Token(Token = "0x6001AD3")]
			[Address(RVA = "0x3380324", Offset = "0x3380324", VA = "0x3380324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6730", Offset = "0x10C6730")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0x338032C", Offset = "0x338032C", VA = "0x338032C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6740", Offset = "0x10C6740")]
			set
			{
			}
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x337F9B4", Offset = "0x337F9B4", VA = "0x337F9B4")]
		public EventSoundsUGUIHandler()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class EventSoundsPointerEnterHandler : EventSoundsUGUIHandler, IPointerEnterHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x337FF1C", Offset = "0x337FF1C", VA = "0x337FF1C", Slot = "4")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x337FFC0", Offset = "0x337FFC0", VA = "0x337FFC0")]
		public EventSoundsPointerEnterHandler()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	public class EventSoundsPointerExitHandler : EventSoundsUGUIHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x337FFC8", Offset = "0x337FFC8", VA = "0x337FFC8", Slot = "4")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x338006C", Offset = "0x338006C", VA = "0x338006C")]
		public EventSoundsPointerExitHandler()
		{
		}
	}
	[Token(Token = "0x20003DC")]
	public class EventSoundsPointerDownHandler : EventSoundsUGUIHandler, IPointerDownHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x337FE70", Offset = "0x337FE70", VA = "0x337FE70", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x337FF14", Offset = "0x337FF14", VA = "0x337FF14")]
		public EventSoundsPointerDownHandler()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class EventSoundsPointerUpHandler : EventSoundsUGUIHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x3380074", Offset = "0x3380074", VA = "0x3380074", Slot = "4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x3380118", Offset = "0x3380118", VA = "0x3380118")]
		public EventSoundsPointerUpHandler()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class EventSoundsDragHandler : EventSoundsUGUIHandler, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x337FB14", Offset = "0x337FB14", VA = "0x337FB14", Slot = "4")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x337FBB8", Offset = "0x337FBB8", VA = "0x337FBB8")]
		public EventSoundsDragHandler()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class EventSoundsDropHandler : EventSoundsUGUIHandler, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x337FBC0", Offset = "0x337FBC0", VA = "0x337FBC0", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x337FC64", Offset = "0x337FC64", VA = "0x337FC64")]
		public EventSoundsDropHandler()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class EventSoundsScrollHandler : EventSoundsUGUIHandler, IScrollHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x3380120", Offset = "0x3380120", VA = "0x3380120", Slot = "4")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x33801C4", Offset = "0x33801C4", VA = "0x33801C4")]
		public EventSoundsScrollHandler()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public class EventSoundsUpdateSelectedHandler : EventSoundsUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x3380334", Offset = "0x3380334", VA = "0x3380334", Slot = "4")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x33803D8", Offset = "0x33803D8", VA = "0x33803D8")]
		public EventSoundsUpdateSelectedHandler()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class EventSoundsSelectHandler : EventSoundsUGUIHandler, ISelectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0x33801CC", Offset = "0x33801CC", VA = "0x33801CC", Slot = "4")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x3380270", Offset = "0x3380270", VA = "0x3380270")]
		public EventSoundsSelectHandler()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class EventSoundsDeselectHandler : EventSoundsUGUIHandler, IDeselectHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x337FA68", Offset = "0x337FA68", VA = "0x337FA68", Slot = "4")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x337FB0C", Offset = "0x337FB0C", VA = "0x337FB0C")]
		public EventSoundsDeselectHandler()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class EventSoundsMoveHandler : EventSoundsUGUIHandler, IMoveHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x337FDC4", Offset = "0x337FDC4", VA = "0x337FDC4", Slot = "4")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x337FE68", Offset = "0x337FE68", VA = "0x337FE68")]
		public EventSoundsMoveHandler()
		{
		}
	}
	[Token(Token = "0x20003E5")]
	public class EventSoundsInitializePotentialDragHandler : EventSoundsUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x337FD18", Offset = "0x337FD18", VA = "0x337FD18", Slot = "4")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x337FDBC", Offset = "0x337FDBC", VA = "0x337FDBC")]
		public EventSoundsInitializePotentialDragHandler()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class EventSoundsBeginDragHandler : EventSoundsUGUIHandler, IBeginDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x337F908", Offset = "0x337F908", VA = "0x337F908", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x337F9AC", Offset = "0x337F9AC", VA = "0x337F9AC")]
		public EventSoundsBeginDragHandler()
		{
		}
	}
	[Token(Token = "0x20003E7")]
	public class EventSoundsEndDragHandler : EventSoundsUGUIHandler, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x337FC6C", Offset = "0x337FC6C", VA = "0x337FC6C", Slot = "4")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x337FD10", Offset = "0x337FD10", VA = "0x337FD10")]
		public EventSoundsEndDragHandler()
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public class EventSoundsSubmitHandler : EventSoundsUGUIHandler, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x3380278", Offset = "0x3380278", VA = "0x3380278", Slot = "4")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x338031C", Offset = "0x338031C", VA = "0x338031C")]
		public EventSoundsSubmitHandler()
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public class EventSoundsCancelHandler : EventSoundsUGUIHandler, ICancelHandler, IEventSystemHandler
	{
		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x337F9BC", Offset = "0x337F9BC", VA = "0x337F9BC", Slot = "4")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x337FA60", Offset = "0x337FA60", VA = "0x337FA60")]
		public EventSoundsCancelHandler()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x10ACF88", Offset = "0x10ACF88")]
	public class FootstepSounds : MonoBehaviour
	{
		[Token(Token = "0x20003EB")]
		public enum FootstepTriggerMode
		{
			[Token(Token = "0x400118F")]
			None,
			[Token(Token = "0x4001190")]
			OnCollision,
			[Token(Token = "0x4001191")]
			OnTriggerEnter,
			[Token(Token = "0x4001192")]
			OnCollision2D,
			[Token(Token = "0x4001193")]
			OnTriggerEnter2D
		}

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FootstepTriggerMode footstepEvent;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FootstepGroup> footstepGroups;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int limitPerXFrm;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float limitPerXSec;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int triggeredLastFrame;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float triggeredLastTime;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _trans;

		[Token(Token = "0x17000473")]
		private Transform Trans
		{
			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0x2F2C96C", Offset = "0x2F2C96C", VA = "0x2F2C96C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x2F2C5B0", Offset = "0x2F2C5B0", VA = "0x2F2C5B0")]
		private bool CheckForRetriggerLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x2F2C640", Offset = "0x2F2C640", VA = "0x2F2C640")]
		private void PlaySoundsIfMatch(GameObject go)
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x2F2CA0C", Offset = "0x2F2CA0C", VA = "0x2F2CA0C")]
		public FootstepSounds()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class MechanimStateCustomEvents : StateMachineBehaviour
	{
		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF4A0", Offset = "0x10BF4A0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF4A0", Offset = "0x10BF4A0")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF500", Offset = "0x10BF500")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF500", Offset = "0x10BF500")]
		public bool fireEnterEvent;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string enterCustomEvent;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF570", Offset = "0x10BF570")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF570", Offset = "0x10BF570")]
		public bool fireExitEvent;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string exitCustomEvent;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF5E0", Offset = "0x10BF5E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF5E0", Offset = "0x10BF5E0")]
		public bool fireAnimTimeEvent;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF640", Offset = "0x10BF640")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF640", Offset = "0x10BF640")]
		public float whenToFireEvent;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string timedCustomEvent;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF6A4", Offset = "0x10BF6A4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF6A4", Offset = "0x10BF6A4")]
		public bool fireMultiAnimTimeEvent;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF704", Offset = "0x10BF704")]
		public int numOfMultiEventsToFire;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF71C", Offset = "0x10BF71C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF71C", Offset = "0x10BF71C")]
		public float whenToFireMultiEvent1;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF770", Offset = "0x10BF770")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF770", Offset = "0x10BF770")]
		public float whenToFireMultiEvent2;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF7C4", Offset = "0x10BF7C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF7C4", Offset = "0x10BF7C4")]
		public float whenToFireMultiEvent3;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BF818", Offset = "0x10BF818")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF818", Offset = "0x10BF818")]
		public float whenToFireMultiEvent4;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[MasterCustomEvent]
		public string MultiTimedEvent;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _playMultiEvent1;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _playMultiEvent2;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool _playMultiEvent3;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool _playMultiEvent4;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fireTimedEvent;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _actorTrans;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _lastRepetition;

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x3123370", Offset = "0x3123370", VA = "0x3123370", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x3123508", Offset = "0x3123508", VA = "0x3123508", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x3123830", Offset = "0x3123830", VA = "0x3123830", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x3123460", Offset = "0x3123460", VA = "0x3123460")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x3123910", Offset = "0x3123910", VA = "0x3123910")]
		public MechanimStateCustomEvents()
		{
		}
	}
	[Token(Token = "0x20003ED")]
	public class MechanimStateSounds : StateMachineBehaviour
	{
		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF87C", Offset = "0x10BF87C")]
		public bool SoundFollowsObject;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF8B4", Offset = "0x10BF8B4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF8B4", Offset = "0x10BF8B4")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF914", Offset = "0x10BF914")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF914", Offset = "0x10BF914")]
		public bool playEnterSound;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool stopEnterSoundOnExit;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string enterSoundGroup;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF984", Offset = "0x10BF984")]
		public string enterVariationName;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasEnterSoundPlayed;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BF9BC", Offset = "0x10BF9BC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BF9BC", Offset = "0x10BF9BC")]
		public bool playExitSound;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string exitSoundGroup;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFA2C", Offset = "0x10BFA2C")]
		public string exitVariationName;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BFA64", Offset = "0x10BFA64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFA64", Offset = "0x10BFA64")]
		public bool playAnimTimeSound;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool stopAnimTimeSoundOnExit;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFAC4", Offset = "0x10BFAC4")]
		public bool useStopTime;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFAFC", Offset = "0x10BFAFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFAFC", Offset = "0x10BFAFC")]
		public float whenToStartSound;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFB50", Offset = "0x10BFB50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFB50", Offset = "0x10BFB50")]
		public float whenToStopSound;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string TimedSoundGroup;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFBB4", Offset = "0x10BFBB4")]
		public string timedVariationName;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool playSoundStart;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool playSoundStop;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x10BFBEC", Offset = "0x10BFBEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFBEC", Offset = "0x10BFBEC")]
		public bool playMultiAnimTimeSounds;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool StopMultiAnimTimeSoundsOnExit;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFC4C", Offset = "0x10BFC4C")]
		public int numOfMultiSoundsToPlay;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFC64", Offset = "0x10BFC64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFC64", Offset = "0x10BFC64")]
		public float whenToStartMultiSound1;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFCB8", Offset = "0x10BFCB8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFCB8", Offset = "0x10BFCB8")]
		public float whenToStartMultiSound2;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFD0C", Offset = "0x10BFD0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFD0C", Offset = "0x10BFD0C")]
		public float whenToStartMultiSound3;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFD60", Offset = "0x10BFD60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFD60", Offset = "0x10BFD60")]
		public float whenToStartMultiSound4;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string MultiSoundsTimedGroup;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10BFDC4", Offset = "0x10BFDC4")]
		public string multiTimedVariationName;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool playMultiSound1;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool playMultiSound2;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool playMultiSound3;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		private bool playMultiSound4;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _actorTrans;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _lastRepetition;

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x31239B4", Offset = "0x31239B4", VA = "0x31239B4", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x3123C44", Offset = "0x3123C44", VA = "0x3123C44", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x3124454", Offset = "0x3124454", VA = "0x3124454", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0x3123B44", Offset = "0x3123B44", VA = "0x3123B44")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x3123BEC", Offset = "0x3123BEC", VA = "0x3123BEC")]
		private static string GetVariationName(string varName)
		{
			return null;
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x31246DC", Offset = "0x31246DC", VA = "0x31246DC")]
		public MechanimStateSounds()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	[SerializeField]
	public class PlaySoundResult
	{
		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFDFC", Offset = "0x10BFDFC")]
		private bool <SoundPlayed>k__BackingField;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFE0C", Offset = "0x10BFE0C")]
		private bool <SoundScheduled>k__BackingField;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFE1C", Offset = "0x10BFE1C")]
		private SoundGroupVariation <ActingVariation>k__BackingField;

		[Token(Token = "0x17000474")]
		public bool SoundPlayed
		{
			[Token(Token = "0x6001B06")]
			[Address(RVA = "0x1CB7108", Offset = "0x1CB7108", VA = "0x1CB7108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6750", Offset = "0x10C6750")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B07")]
			[Address(RVA = "0x1CB7110", Offset = "0x1CB7110", VA = "0x1CB7110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6760", Offset = "0x10C6760")]
			set
			{
			}
		}

		[Token(Token = "0x17000475")]
		public bool SoundScheduled
		{
			[Token(Token = "0x6001B08")]
			[Address(RVA = "0x1CB711C", Offset = "0x1CB711C", VA = "0x1CB711C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6770", Offset = "0x10C6770")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B09")]
			[Address(RVA = "0x1CB7124", Offset = "0x1CB7124", VA = "0x1CB7124")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6780", Offset = "0x10C6780")]
			set
			{
			}
		}

		[Token(Token = "0x17000476")]
		public SoundGroupVariation ActingVariation
		{
			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0x1CB7130", Offset = "0x1CB7130", VA = "0x1CB7130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6790", Offset = "0x10C6790")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0x1CB7138", Offset = "0x1CB7138", VA = "0x1CB7138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67A0", Offset = "0x10C67A0")]
			set
			{
			}
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x1CB70D4", Offset = "0x1CB70D4", VA = "0x1CB70D4")]
		public PlaySoundResult()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003EF")]
	public class AmbientSoundToTriggerInfo
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameToTrigger;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AmbientSound ambient;

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x2004718", Offset = "0x2004718", VA = "0x2004718")]
		public AmbientSoundToTriggerInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F0")]
	public class AudioEvent
	{
		[Token(Token = "0x20003F1")]
		public enum TargetVolumeMode
		{
			[Token(Token = "0x40011FB")]
			UseSliderValue,
			[Token(Token = "0x40011FC")]
			UseSpecificValue
		}

		[Serializable]
		[Token(Token = "0x20003F2")]
		public class MA_SnapshotInfo
		{
			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixerSnapshot snapshot;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6001B0F")]
			[Address(RVA = "0x2EC56A4", Offset = "0x2EC56A4", VA = "0x2EC56A4")]
			public MA_SnapshotInfo(AudioMixerSnapshot snap, float wt)
			{
			}
		}

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionName;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isExpanded;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string soundType;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allPlaylistControllersForGroupCmd;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool allSoundTypesForGroupCmd;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool allSoundTypesForBusCmd;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volume;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useFixedPitch;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitch;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EventSounds.GlidePitchType glidePitchType;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float targetGlidePitch;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pitchGlideTime;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float delaySound;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudio.EventSoundFunctionType currentSoundFunctionType;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MasterAudio.PlaylistCommand currentPlaylistCommand;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.SoundGroupCommand currentSoundGroupCommand;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public MasterAudio.BusCommand currentBusCommand;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MasterAudio.CustomEventCommand currentCustomEventCommand;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public MasterAudio.GlobalCommand currentGlobalCommand;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MasterAudio.UnityMixerCommand currentMixerCommand;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioMixerSnapshot snapshotToTransitionTo;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float snapshotTransitionTime;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<MA_SnapshotInfo> snapshotsToBlend;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.PersistentSettingsCommand currentPersistentSettingsCommand;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string busName;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string playlistName;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string playlistControllerName;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool startPlaylist;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float fadeVolume;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float fadeTime;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float minAge;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool stopAfterFade;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool restoreVolumeAfterFade;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool fireCustomEventAfterFade;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetVolumeMode targetVolMode;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string clipName;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string variationName;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float colliderMaxDistance;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool showSphereGizmo;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string theCustomEventName;

		[Token(Token = "0x17000477")]
		public bool IsFadeCommand
		{
			[Token(Token = "0x6001B0D")]
			[Address(RVA = "0x2006BD0", Offset = "0x2006BD0", VA = "0x2006BD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x2006C38", Offset = "0x2006C38", VA = "0x2006C38")]
		public AudioEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F3")]
	public class AudioEventGroup
	{
		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useLayerFilter;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useTagFilter;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool customSoundActive;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isCustomEvent;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string customEventName;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mechanimEventActive;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isMechanimStateCheckEvent;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mechanimStateName;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mechEventPlayedForState;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AudioEvent> SoundEvents;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EventSounds.PreviousSoundStopMode mouseDragStopMode;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mouseDragFadeOutTime;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int limitPerXFrm;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float limitPerXSec;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int triggeredLastFrame;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float triggeredLastTime;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float triggerStayForTime;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool doesTriggerStayRepeat;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sliderValue;

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x2006E44", Offset = "0x2006E44", VA = "0x2006E44")]
		public AudioEventGroup()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	public class AudioScriptOrder : Attribute
	{
		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Order;

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x2009048", Offset = "0x2009048", VA = "0x2009048")]
		public AudioScriptOrder(int order)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F5")]
	public class BusFadeInfo
	{
		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroupBus ActingBus;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x28B769C", Offset = "0x28B769C", VA = "0x28B769C")]
		public BusFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F6")]
	public class BusPitchGlideInfo
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float CompletionTime;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsActive;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action completionAction;

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x28B76AC", Offset = "0x28B76AC", VA = "0x28B76AC")]
		public BusPitchGlideInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	public class CustomEvent
	{
		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string EventName;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ProspectiveName;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsEditing;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool eventExpanded;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.CustomEventReceiveMode eventReceiveMode;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distanceThreshold;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudio.EventReceiveFilter eventRcvFilterMode;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int filterModeQty;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool isTemporary;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int frameLastFired;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string categoryName;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x17000478")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6001B17")]
			[Address(RVA = "0x1FEC17C", Offset = "0x1FEC17C", VA = "0x1FEC17C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x1FEBF88", Offset = "0x1FEBF88", VA = "0x1FEBF88")]
		public CustomEvent(string eventName)
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x1FEC078", Offset = "0x1FEC078", VA = "0x1FEC078")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x1FEC118", Offset = "0x1FEC118", VA = "0x1FEC118")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F8")]
	public class CustomEventCategory
	{
		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string CatName;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsExpanded;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsEditing;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool IsTemporary;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x17000479")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0x1FEC2D4", Offset = "0x1FEC2D4", VA = "0x1FEC2D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x1FEC1D0", Offset = "0x1FEC1D0", VA = "0x1FEC1D0")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x1FEC270", Offset = "0x1FEC270", VA = "0x1FEC270")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x1FEC328", Offset = "0x1FEC328", VA = "0x1FEC328")]
		public CustomEventCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F9")]
	public class CustomEventToFireInfo
	{
		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventName;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform eventOrigin;

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x1FEC3E8", Offset = "0x1FEC3E8", VA = "0x1FEC3E8")]
		public CustomEventToFireInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FA")]
	public class DuckGroupInfo
	{
		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundType;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float riseVolStart;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unduckTime;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duckedVolumeCut;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTemporary;

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x1FF7014", Offset = "0x1FF7014", VA = "0x1FF7014")]
		public DuckGroupInfo()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class DynamicGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFE2C", Offset = "0x10BFE2C")]
		public int probabilityToPlay;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFE44", Offset = "0x10BFE44")]
		public int importance;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isUninterruptible;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useLocalization;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool useRandomPitch;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SoundGroupVariation.RandomPitchMode randomPitchMode;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMin;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMax;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useRandomVolume;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SoundGroupVariation.RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMin;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMax;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int weight;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string clipAlias;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string resourceFileName;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isExpanded;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool isChecked;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool useFades;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float fadeInTime;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float fadeOutTime;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useCustomLooping;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int minCustomLoops;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int maxCustomLoops;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool useIntroSilence;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float introSilenceMin;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float introSilenceMax;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool useRandomStartTime;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomStartMinPercent;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float randomStartMaxPercent;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float randomEndPercent;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private DynamicSoundGroup _parentGroupScript;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Transform _trans;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource _aud;

		[Token(Token = "0x1700047A")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6001B1E")]
			[Address(RVA = "0x1FF7570", Offset = "0x1FF7570", VA = "0x1FF7570")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047B")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6001B1F")]
			[Address(RVA = "0x1FF7624", Offset = "0x1FF7624", VA = "0x1FF7624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047C")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6001B20")]
			[Address(RVA = "0x1FF76D8", Offset = "0x1FF76D8", VA = "0x1FF76D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047D")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6001B21")]
			[Address(RVA = "0x1FF778C", Offset = "0x1FF778C", VA = "0x1FF778C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047E")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6001B22")]
			[Address(RVA = "0x1FF7840", Offset = "0x1FF7840", VA = "0x1FF7840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700047F")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6001B23")]
			[Address(RVA = "0x1FF78F4", Offset = "0x1FF78F4", VA = "0x1FF78F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000480")]
		public DynamicSoundGroup ParentGroup
		{
			[Token(Token = "0x6001B24")]
			[Address(RVA = "0x1FF79A8", Offset = "0x1FF79A8", VA = "0x1FF79A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000481")]
		public Transform Trans
		{
			[Token(Token = "0x6001B25")]
			[Address(RVA = "0x1FF7B30", Offset = "0x1FF7B30", VA = "0x1FF7B30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000482")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6001B26")]
			[Address(RVA = "0x1FF7BD0", Offset = "0x1FF7BD0", VA = "0x1FF7BD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000483")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6001B27")]
			[Address(RVA = "0x1FF7E24", Offset = "0x1FF7E24", VA = "0x1FF7E24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x1FF7ED8", Offset = "0x1FF7ED8", VA = "0x1FF7ED8")]
		public DynamicGroupVariation()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class DynamicSoundGroup : MonoBehaviour
	{
		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject variationTemplate;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useClipAgePriority;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float groupMasterVolume;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int retriggerPercentage;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudioGroup.VariationSequence curVariationSequence;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudioGroup.VariationMode curVariationMode;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudioGroup.ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string comments;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool logSound;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int busIndex;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool ignoreListenerPause;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFE5C", Offset = "0x10BFE5C")]
		public int importance;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool isUninterruptible;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float spatialBlend;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public MasterAudio.DefaultGroupPlayType groupPlayType;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string busName;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isExistingBus;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool isCopiedFromDGSC;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public MasterAudioGroup.LimitMode limitMode;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int limitPerXFrames;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float minimumTimeBetween;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool limitPolyphony;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int voiceLimitCount;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MasterAudioGroup.TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float despawnFadeTime;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool isUsingOcclusion;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool copySettingsExpanded;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<DynamicGroupVariation> groupVariations;

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x1FF8138", Offset = "0x1FF8138", VA = "0x1FF8138")]
		public DynamicSoundGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FD")]
	public class FootstepGroup
	{
		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useLayerFilter;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useTagFilter;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string soundType;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string variationName;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float volume;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useFixedPitch;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float pitch;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float delaySound;

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x2F2C40C", Offset = "0x2F2C40C", VA = "0x2F2C40C")]
		public FootstepGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FE")]
	public class GroupBus
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string busName;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float volume;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isSoloed;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool isMuted;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int voiceLimit;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isExisting;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isTemporary;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isUsingOcclusion;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MasterAudio.BusVoiceLimitExceededMode busVoiceLimitExceededMode;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color busColor;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool forceTo2D;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<int> _activeAudioSourcesIds;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _originalVolume;

		[Token(Token = "0x17000484")]
		public int ActiveVoices
		{
			[Token(Token = "0x6001B2F")]
			[Address(RVA = "0x2F2F910", Offset = "0x2F2F910", VA = "0x2F2F910")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000485")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6001B30")]
			[Address(RVA = "0x2F2F95C", Offset = "0x2F2F95C", VA = "0x2F2F95C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000486")]
		public bool BusVoiceLimitReached
		{
			[Token(Token = "0x6001B31")]
			[Address(RVA = "0x2F2F9B0", Offset = "0x2F2F9B0", VA = "0x2F2F9B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000487")]
		public float OriginalVolume
		{
			[Token(Token = "0x6001B32")]
			[Address(RVA = "0x2F2FA18", Offset = "0x2F2FA18", VA = "0x2F2FA18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B33")]
			[Address(RVA = "0x2F2FA20", Offset = "0x2F2FA20", VA = "0x2F2FA20")]
			set
			{
			}
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x2F2F708", Offset = "0x2F2F708", VA = "0x2F2F708")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x2F2F7A8", Offset = "0x2F2F7A8", VA = "0x2F2F7A8")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x2F2F80C", Offset = "0x2F2F80C", VA = "0x2F2F80C")]
		public void AddActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x2F2F8AC", Offset = "0x2F2F8AC", VA = "0x2F2F8AC")]
		public void RemoveActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x2F2FA28", Offset = "0x2F2FA28", VA = "0x2F2FA28")]
		public GroupBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003FF")]
	public class GroupFadeInfo
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x2F2FB5C", Offset = "0x2F2FB5C", VA = "0x2F2FB5C")]
		public GroupFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000400")]
	public class GroupPitchGlideInfo
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CompletionTime;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool IsActive;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action completionAction;

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x2F2FB6C", Offset = "0x2F2FB6C", VA = "0x2F2FB6C")]
		public GroupPitchGlideInfo()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public interface ICustomEventReceiver
	{
		[Token(Token = "0x6001B37")]
		void CheckForIllegalCustomEvents();

		[Token(Token = "0x6001B38")]
		void ReceiveEvent(string customEventName, Vector3 originPoint);

		[Token(Token = "0x6001B39")]
		bool SubscribesToEvent(string customEventName);

		[Token(Token = "0x6001B3A")]
		void RegisterReceiver();

		[Token(Token = "0x6001B3B")]
		void UnregisterReceiver();

		[Token(Token = "0x6001B3C")]
		IList<AudioEventGroup> GetAllEvents();
	}
	[Token(Token = "0x2000402")]
	public class MasterAudioGroup : MonoBehaviour
	{
		[Token(Token = "0x2000403")]
		public enum TargetDespawnedBehavior
		{
			[Token(Token = "0x4001305")]
			None,
			[Token(Token = "0x4001306")]
			Stop,
			[Token(Token = "0x4001307")]
			FadeOut
		}

		[Token(Token = "0x2000404")]
		public enum VariationSequence
		{
			[Token(Token = "0x4001309")]
			Randomized,
			[Token(Token = "0x400130A")]
			TopToBottom
		}

		[Token(Token = "0x2000405")]
		public enum VariationMode
		{
			[Token(Token = "0x400130C")]
			Normal,
			[Token(Token = "0x400130D")]
			LoopedChain,
			[Token(Token = "0x400130E")]
			Dialog
		}

		[Token(Token = "0x2000406")]
		public enum ChainedLoopLoopMode
		{
			[Token(Token = "0x4001310")]
			Endless,
			[Token(Token = "0x4001311")]
			NumberOfLoops
		}

		[Token(Token = "0x2000407")]
		public enum LimitMode
		{
			[Token(Token = "0x4001313")]
			None,
			[Token(Token = "0x4001314")]
			FrameBased,
			[Token(Token = "0x4001315")]
			TimeBased
		}

		[Token(Token = "0x40012C5")]
		public const float UseCurveSpatialBlend = -99f;

		[Token(Token = "0x40012C6")]
		public const string NoBus = "[NO BUS]";

		[Token(Token = "0x40012C7")]
		public const int MinNoRepeatVariations = 3;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int busIndex;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spatialBlend;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.DefaultGroupPlayType groupPlayType;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isSelected;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isExpanded;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float groupMasterVolume;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int retriggerPercentage;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VariationMode curVariationMode;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool ignoreListenerPause;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFE74", Offset = "0x10BFE74")]
		public int importance;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isUninterruptible;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMin;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float chainLoopDelayMax;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int chainLoopNumLoops;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool useDialogFadeOut;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float dialogFadeOutTime;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public VariationSequence curVariationSequence;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<SoundGroupVariation> groupVariations;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string comments;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool logSound;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool copySettingsExpanded;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public bool expandLinkedGroups;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<string> childSoundGroups;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LimitMode limitMode;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int limitPerXFrames;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float minimumTimeBetween;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool useClipAgePriority;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		public bool limitPolyphony;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int voiceLimitCount;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float despawnFadeTime;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool isUsingOcclusion;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool isSoloed;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool isMuted;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool willCleanUpDelegatesAfterStop;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int frames;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<int> _activeAudioSourcesIds;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private string _objectName;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform _trans;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float _originalVolume;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly List<int> _actorInstanceIds;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFE9C", Offset = "0x10BFE9C")]
		private int <ChainLoopCount>k__BackingField;

		[Token(Token = "0x17000488")]
		public float SpatialBlendForGroup
		{
			[Token(Token = "0x6001B44")]
			[Address(RVA = "0x3121A60", Offset = "0x3121A60", VA = "0x3121A60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000489")]
		public int ActiveVoices
		{
			[Token(Token = "0x6001B45")]
			[Address(RVA = "0x3121B4C", Offset = "0x3121B4C", VA = "0x3121B4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700048A")]
		public int TotalVoices
		{
			[Token(Token = "0x6001B46")]
			[Address(RVA = "0x3121B9C", Offset = "0x3121B9C", VA = "0x3121B9C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700048B")]
		public bool WillCleanUpDelegatesAfterStop
		{
			[Token(Token = "0x6001B47")]
			[Address(RVA = "0x3121BC0", Offset = "0x3121BC0", VA = "0x3121BC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700048C")]
		public GroupBus BusForGroup
		{
			[Token(Token = "0x6001B48")]
			[Address(RVA = "0x31217E0", Offset = "0x31217E0", VA = "0x31217E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700048D")]
		public float OriginalVolume
		{
			[Token(Token = "0x6001B49")]
			[Address(RVA = "0x3121BCC", Offset = "0x3121BCC", VA = "0x3121BCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0x3121BD4", Offset = "0x3121BD4", VA = "0x3121BD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700048E")]
		public bool LoggingEnabledForGroup
		{
			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0x3121BDC", Offset = "0x3121BDC", VA = "0x3121BDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700048F")]
		public int ChainLoopCount
		{
			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0x3121CA8", Offset = "0x3121CA8", VA = "0x3121CA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67D0", Offset = "0x10C67D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001B50")]
			[Address(RVA = "0x3121CB0", Offset = "0x3121CB0", VA = "0x3121CB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67E0", Offset = "0x10C67E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000490")]
		public string GameObjectName
		{
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0x3121CB8", Offset = "0x3121CB8", VA = "0x3121CB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000491")]
		public MasterAudio.GroupPlayType GroupPlayType
		{
			[Token(Token = "0x6001B52")]
			[Address(RVA = "0x3121D08", Offset = "0x3121D08", VA = "0x3121D08")]
			get
			{
				return default(MasterAudio.GroupPlayType);
			}
		}

		[Token(Token = "0x17000492")]
		public bool HasLiveActors
		{
			[Token(Token = "0x6001B53")]
			[Address(RVA = "0x3121E54", Offset = "0x3121E54", VA = "0x3121E54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000493")]
		public bool UsesNoRepeat
		{
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0x3121EA8", Offset = "0x3121EA8", VA = "0x3121EA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000494")]
		private Transform Trans
		{
			[Token(Token = "0x6001B55")]
			[Address(RVA = "0x3121680", Offset = "0x3121680", VA = "0x3121680")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000495")]
		private List<int> ActiveAudioSourceIds
		{
			[Token(Token = "0x6001B56")]
			[Address(RVA = "0x31215C8", Offset = "0x31215C8", VA = "0x31215C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000005")]
		public event Action LastVariationFinishedPlay
		{
			[Token(Token = "0x6001B3D")]
			[Address(RVA = "0x312136C", Offset = "0x312136C", VA = "0x312136C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67B0", Offset = "0x10C67B0")]
			add
			{
			}
			[Token(Token = "0x6001B3E")]
			[Address(RVA = "0x312140C", Offset = "0x312140C", VA = "0x312140C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67C0", Offset = "0x10C67C0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x31214AC", Offset = "0x31214AC", VA = "0x31214AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x3121720", Offset = "0x3121720", VA = "0x3121720")]
		public void AddActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x31218CC", Offset = "0x31218CC", VA = "0x31218CC")]
		public void RemoveActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x312195C", Offset = "0x312195C", VA = "0x312195C")]
		public void AddActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x31219FC", Offset = "0x31219FC", VA = "0x31219FC")]
		public void RemoveActorInstanceId(int instanceId)
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x3121C54", Offset = "0x3121C54", VA = "0x3121C54")]
		public void FireLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x3121C68", Offset = "0x3121C68", VA = "0x3121C68")]
		public void SubscribeToLastVariationFinishedPlay(Action finishedCallback)
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x3121C9C", Offset = "0x3121C9C", VA = "0x3121C9C")]
		public void UnsubscribeFromLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x3121F18", Offset = "0x3121F18", VA = "0x3121F18")]
		public MasterAudioGroup()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class MasterAudioSettings : SingletonScriptable<MasterAudioSettings>
	{
		[Token(Token = "0x4001316")]
		public const string AssetName = "MasterAudioSettings.asset";

		[Token(Token = "0x4001317")]
		public const string AssetFolder = "Assets/Resources/MasterAudio";

		[Token(Token = "0x4001318")]
		public const string ResourcePath = "MasterAudio/MasterAudioSettings";

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UseDbScale;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool RemoveUnplayedDueToProbabilityVariation;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool UseCentsPitch;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool HideLogoNav;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool EditMAFolder;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string InstallationFolderPath;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MasterAudio.MixerWidthMode MixerWidthSetting;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool BusesShownInNarrow;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool ShowWelcomeWindowOnStart;

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x31221A0", Offset = "0x31221A0", VA = "0x31221A0")]
		static MasterAudioSettings()
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x3122330", Offset = "0x3122330", VA = "0x3122330")]
		public MasterAudioSettings()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class MasterCustomEventAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x31223DC", Offset = "0x31223DC", VA = "0x31223DC")]
		public MasterCustomEventAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040A")]
	public class MusicSetting
	{
		[Token(Token = "0x200040B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACFD0", Offset = "0x10ACFD0")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400133D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataStringValue valToClone;

			[Token(Token = "0x6001B60")]
			[Address(RVA = "0x1DE0204", Offset = "0x1DE0204", VA = "0x1DE0204")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x6001B61")]
			[Address(RVA = "0x1DE020C", Offset = "0x1DE020C", VA = "0x1DE020C")]
			internal bool <Clone>b__0(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200040C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACFE0", Offset = "0x10ACFE0")]
		private sealed class <>c__DisplayClass34_1
		{
			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataFloatValue valToClone;

			[Token(Token = "0x6001B62")]
			[Address(RVA = "0x1DE0238", Offset = "0x1DE0238", VA = "0x1DE0238")]
			public <>c__DisplayClass34_1()
			{
			}

			[Token(Token = "0x6001B63")]
			[Address(RVA = "0x1DE0240", Offset = "0x1DE0240", VA = "0x1DE0240")]
			internal bool <Clone>b__1(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200040D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10ACFF0", Offset = "0x10ACFF0")]
		private sealed class <>c__DisplayClass34_2
		{
			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataBoolValue valToClone;

			[Token(Token = "0x6001B64")]
			[Address(RVA = "0x1DE026C", Offset = "0x1DE026C", VA = "0x1DE026C")]
			public <>c__DisplayClass34_2()
			{
			}

			[Token(Token = "0x6001B65")]
			[Address(RVA = "0x1DE0274", Offset = "0x1DE0274", VA = "0x1DE0274")]
			internal bool <Clone>b__2(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200040E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD000", Offset = "0x10AD000")]
		private sealed class <>c__DisplayClass34_3
		{
			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataIntValue valToClone;

			[Token(Token = "0x6001B66")]
			[Address(RVA = "0x1DE02A0", Offset = "0x1DE02A0", VA = "0x1DE02A0")]
			public <>c__DisplayClass34_3()
			{
			}

			[Token(Token = "0x6001B67")]
			[Address(RVA = "0x1DE02A8", Offset = "0x1DE02A8", VA = "0x1DE02A8")]
			internal bool <Clone>b__3(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip clip;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string songName;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string resourceFileName;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float volume;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pitch;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isExpanded;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isLoop;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isChecked;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SongMetadataStringValue> metadataStringValues;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<SongMetadataBoolValue> metadataBoolValues;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SongMetadataIntValue> metadataIntValues;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SongMetadataFloatValue> metadataFloatValues;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool metadataExpanded;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public MasterAudio.CustomSongStartTimeMode songStartTimeMode;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float customStartTime;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float customStartTimeMax;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int lastKnownTimePoint;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool wasLastKnownTimePointSet;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int songIndex;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float sectionStartTime;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float sectionEndTime;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool songStartedEventExpanded;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string songStartedCustomEvent;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string songChangedCustomEvent;

		[Token(Token = "0x17000496")]
		public bool HasMetadataProperties
		{
			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0x312ABEC", Offset = "0x312ABEC", VA = "0x312ABEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000497")]
		public int MetadataPropertyCount
		{
			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0x312AC08", Offset = "0x312AC08", VA = "0x312AC08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000498")]
		public float SongStartTime
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0x312ACA8", Offset = "0x312ACA8", VA = "0x312ACA8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x312A9D0", Offset = "0x312A9D0", VA = "0x312A9D0")]
		public MusicSetting()
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x312ACE4", Offset = "0x312ACE4", VA = "0x312ACE4")]
		public static MusicSetting Clone(MusicSetting mus, MasterAudio.Playlist aList)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200040F")]
	public class OcclusionFreqChangeInfo
	{
		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundGroupVariation ActingVariation;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StartFrequency;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TargetFrequency;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartTime;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float CompletionTime;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsActive;

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x312FAD0", Offset = "0x312FAD0", VA = "0x312FAD0")]
		public OcclusionFreqChangeInfo()
		{
		}
	}
	[Token(Token = "0x2000410")]
	public class PlaylistAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x1CB7140", Offset = "0x1CB7140", VA = "0x1CB7140")]
		public PlaylistAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000411")]
	public class SongMetadataBoolValue
	{
		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Value;

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x229B2D8", Offset = "0x229B2D8", VA = "0x229B2D8")]
		public SongMetadataBoolValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000412")]
	public class SongMetadataFloatValue
	{
		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x229B31C", Offset = "0x229B31C", VA = "0x229B31C")]
		public SongMetadataFloatValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000413")]
	public class SongMetadataIntValue
	{
		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Value;

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x229B360", Offset = "0x229B360", VA = "0x229B360")]
		public SongMetadataIntValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000414")]
	public class SongMetadataProperty
	{
		[Token(Token = "0x2000415")]
		public enum MetadataPropertyType
		{
			[Token(Token = "0x4001355")]
			Boolean,
			[Token(Token = "0x4001356")]
			String,
			[Token(Token = "0x4001357")]
			Integer,
			[Token(Token = "0x4001358")]
			Float
		}

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MetadataPropertyType PropertyType;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string PropertyName;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsEditing;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool PropertyExpanded;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool AllSongsMustContain;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool CanSongHaveMultiple;

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x229B3A4", Offset = "0x229B3A4", VA = "0x229B3A4")]
		public SongMetadataProperty(string propertyName, MetadataPropertyType propertyType, bool allSongsMustContain, bool canSongHaveMultiple)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000416")]
	public class SongMetadataStringValue
	{
		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Value;

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x229B424", Offset = "0x229B424", VA = "0x229B424")]
		public SongMetadataStringValue(SongMetadataProperty prop)
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class SoundGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x229CB80", Offset = "0x229CB80", VA = "0x229CB80")]
		public SoundGroupAttribute()
		{
		}
	}
	[Token(Token = "0x2000418")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10AD010", Offset = "0x10AD010")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10AD010", Offset = "0x10AD010")]
	public class SoundGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x2000419")]
		public delegate void SoundFinishedEventHandler();

		[Token(Token = "0x200041A")]
		public delegate void SoundLoopedEventHandler(int loopNumberStarted);

		[Token(Token = "0x200041B")]
		public class PlaySoundParams
		{
			[Token(Token = "0x40013A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string SoundType;

			[Token(Token = "0x40013A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float VolumePercentage;

			[Token(Token = "0x40013A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float? Pitch;

			[Token(Token = "0x40013A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double? TimeToSchedulePlay;

			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform SourceTrans;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool AttachToSource;

			[Token(Token = "0x40013AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float DelaySoundTime;

			[Token(Token = "0x40013AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool IsChainLoop;

			[Token(Token = "0x40013AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool IsSingleSubscribedPlay;

			[Token(Token = "0x40013AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float GroupCalcVolume;

			[Token(Token = "0x40013AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool IsPlaying;

			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0x1DE3350", Offset = "0x1DE3350", VA = "0x1DE3350")]
			public PlaySoundParams(string soundType, float volPercent, float groupCalcVolume, float? pitch, Transform sourceTrans, bool attach, float delaySoundTime, double? timeToSchedulePlay, bool isChainLoop, bool isSingleSubscribedPlay)
			{
			}
		}

		[Token(Token = "0x200041C")]
		public enum PitchMode
		{
			[Token(Token = "0x40013B0")]
			None,
			[Token(Token = "0x40013B1")]
			Gliding
		}

		[Token(Token = "0x200041D")]
		public enum FadeMode
		{
			[Token(Token = "0x40013B3")]
			None,
			[Token(Token = "0x40013B4")]
			FadeInOut,
			[Token(Token = "0x40013B5")]
			FadeOutEarly,
			[Token(Token = "0x40013B6")]
			GradualFade
		}

		[Token(Token = "0x200041E")]
		public enum RandomPitchMode
		{
			[Token(Token = "0x40013B8")]
			AddToClipPitch,
			[Token(Token = "0x40013B9")]
			IgnoreClipPitch
		}

		[Token(Token = "0x200041F")]
		public enum RandomVolumeMode
		{
			[Token(Token = "0x40013BB")]
			AddToClipVolume,
			[Token(Token = "0x40013BC")]
			IgnoreClipVolume
		}

		[Token(Token = "0x2000420")]
		public enum DetectEndMode
		{
			[Token(Token = "0x40013BE")]
			None,
			[Token(Token = "0x40013BF")]
			DetectEnd
		}

		[Token(Token = "0x2000421")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD084", Offset = "0x10AD084")]
		private sealed class <WaitForLoadToUnloadClipAndDeactivate>d__113 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundGroupVariation <>4__this;

			[Token(Token = "0x170004BB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BD2")]
				[Address(RVA = "0x1DE3300", Offset = "0x1DE3300", VA = "0x1DE3300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BD4")]
				[Address(RVA = "0x1DE3348", Offset = "0x1DE3348", VA = "0x1DE3348", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BCF")]
			[Address(RVA = "0x1DE31F8", Offset = "0x1DE31F8", VA = "0x1DE31F8")]
			[DebuggerHidden]
			public <WaitForLoadToUnloadClipAndDeactivate>d__113(int <>1__state)
			{
			}

			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0x1DE3224", Offset = "0x1DE3224", VA = "0x1DE3224", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0x1DE3228", Offset = "0x1DE3228", VA = "0x1DE3228", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BD3")]
			[Address(RVA = "0x1DE3308", Offset = "0x1DE3308", VA = "0x1DE3308", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int weight;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFEAC", Offset = "0x10BFEAC")]
		public int probabilityToPlay;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFEC4", Offset = "0x10BFEC4")]
		public int importance;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isUninterruptible;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool useLocalization;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool useRandomPitch;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RandomPitchMode randomPitchMode;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMin;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float randomPitchMax;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useRandomVolume;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMin;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float randomVolumeMax;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string clipAlias;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string resourceFileName;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float original_pitch;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float original_volume;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool isExpanded;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool isChecked;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool useFades;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float fadeInTime;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float fadeOutTime;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool useCustomLooping;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int minCustomLoops;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int maxCustomLoops;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool useRandomStartTime;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float randomStartMinPercent;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float randomStartMaxPercent;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float randomEndPercent;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useIntroSilence;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float introSilenceMin;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float introSilenceMax;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float fadeMaxVolume;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FadeMode curFadeMode;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public PitchMode curPitchMode;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public DetectEndMode curDetectEndMode;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int frames;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioSource _audioSource;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlaySoundParams _playSndParam;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private string _objectName;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _maxVol;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private int _instanceId;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool? _audioLoops;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int _maxLoops;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private SoundGroupVariationUpdater _varUpdater;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int _previousSoundFinishedFrame;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private string _soundGroupName;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private MasterAudio.VariationLoadStatus _loadStatus;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private bool _isStopRequested;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
		private bool _isPaused;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
		private bool _isWarmingPlay;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _trans;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject _go;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform _objectToFollow;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform _objectToTriggerFrom;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private MasterAudioGroup _parentGroupScript;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool _attachToSource;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private string _resFileName;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _hasStartedEndLinkedGroups;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Coroutine _loadResourceFileCoroutine;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Coroutine _loadAddressableCoroutine;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private bool _isUnloadAddressableCoroutineRunning;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private TransformFollower _ambientFollower;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFEFC", Offset = "0x10BFEFC")]
		private float <LastTimePlayed>k__BackingField;

		[Token(Token = "0x17000499")]
		public TransformFollower AmbientFollower
		{
			[Token(Token = "0x6001B99")]
			[Address(RVA = "0x22A14D0", Offset = "0x22A14D0", VA = "0x22A14D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049A")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6001B9A")]
			[Address(RVA = "0x22A14D8", Offset = "0x22A14D8", VA = "0x22A14D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049B")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0x22A158C", Offset = "0x22A158C", VA = "0x22A158C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049C")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0x22A1640", Offset = "0x22A1640", VA = "0x22A1640")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049D")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0x22A16F4", Offset = "0x22A16F4", VA = "0x22A16F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049E")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0x22A17A8", Offset = "0x22A17A8", VA = "0x22A17A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x22A17B0", Offset = "0x22A17B0", VA = "0x22A17B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700049F")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0x22A17B8", Offset = "0x22A17B8", VA = "0x22A17B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A0")]
		public Transform ObjectToFollow
		{
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0x22A186C", Offset = "0x22A186C", VA = "0x22A186C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0x22A1874", Offset = "0x22A1874", VA = "0x22A1874")]
			set
			{
			}
		}

		[Token(Token = "0x170004A1")]
		public Transform ObjectToTriggerFrom
		{
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0x22A19E8", Offset = "0x22A19E8", VA = "0x22A19E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0x22A19F0", Offset = "0x22A19F0", VA = "0x22A19F0")]
			set
			{
			}
		}

		[Token(Token = "0x170004A2")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0x22A1A20", Offset = "0x22A1A20", VA = "0x22A1A20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004A3")]
		public MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6001BA7")]
			[Address(RVA = "0x229D664", Offset = "0x229D664", VA = "0x229D664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A4")]
		public float OriginalPitch
		{
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0x229EA6C", Offset = "0x229EA6C", VA = "0x229EA6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004A5")]
		public float OriginalVolume
		{
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0x22A1C64", Offset = "0x22A1C64", VA = "0x22A1C64")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004A6")]
		public string SoundGroupName
		{
			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0x22A1CA4", Offset = "0x22A1CA4", VA = "0x22A1CA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A7")]
		public bool IsAvailableToPlay
		{
			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0x22A1CF8", Offset = "0x22A1CF8", VA = "0x22A1CF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004A8")]
		public float LastTimePlayed
		{
			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0x22A1DA0", Offset = "0x22A1DA0", VA = "0x22A1DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6890", Offset = "0x10C6890")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0x22A1DA8", Offset = "0x22A1DA8", VA = "0x22A1DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C68A0", Offset = "0x10C68A0")]
			set
			{
			}
		}

		[Token(Token = "0x170004A9")]
		public bool ClipIsLoaded
		{
			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0x22A1DB0", Offset = "0x22A1DB0", VA = "0x22A1DB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004AA")]
		public bool IsPlaying
		{
			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0x229D83C", Offset = "0x229D83C", VA = "0x229D83C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004AB")]
		public MasterAudio.VariationLoadStatus LoadStatus
		{
			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0x22A1DC0", Offset = "0x22A1DC0", VA = "0x22A1DC0")]
			get
			{
				return default(MasterAudio.VariationLoadStatus);
			}
			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0x229E8CC", Offset = "0x229E8CC", VA = "0x229E8CC")]
			set
			{
			}
		}

		[Token(Token = "0x170004AC")]
		public int InstanceId
		{
			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0x229F1D4", Offset = "0x229F1D4", VA = "0x229F1D4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004AD")]
		public bool IsStopRequested
		{
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0x22A1DC8", Offset = "0x22A1DC8", VA = "0x22A1DC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004AE")]
		public Transform Trans
		{
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0x22A0740", Offset = "0x22A0740", VA = "0x22A0740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AF")]
		public GameObject GameObj
		{
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0x229D5C4", Offset = "0x229D5C4", VA = "0x229D5C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B0")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0x229D2D0", Offset = "0x229D2D0", VA = "0x229D2D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B1")]
		public bool AudioLoops
		{
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0x229F118", Offset = "0x229F118", VA = "0x229F118")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004B2")]
		public string ResFileName
		{
			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0x229EDE0", Offset = "0x229EDE0", VA = "0x229EDE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B3")]
		public SoundGroupVariationUpdater VariationUpdater
		{
			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0x229DD38", Offset = "0x229DD38", VA = "0x229DD38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B4")]
		public PlaySoundParams PlaySoundParm
		{
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0x22A1DD0", Offset = "0x22A1DD0", VA = "0x22A1DD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B5")]
		public float SetGroupVolume
		{
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0x22A1DD8", Offset = "0x22A1DD8", VA = "0x22A1DD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0x22A1DF4", Offset = "0x22A1DF4", VA = "0x22A1DF4")]
			set
			{
			}
		}

		[Token(Token = "0x170004B6")]
		public int MaxLoops
		{
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0x22A1E10", Offset = "0x22A1E10", VA = "0x22A1E10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004B7")]
		private bool Is2D
		{
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0x22A1E18", Offset = "0x22A1E18", VA = "0x22A1E18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004B8")]
		public bool UsesOcclusion
		{
			[Token(Token = "0x6001BBF")]
			[Address(RVA = "0x229DF10", Offset = "0x229DF10", VA = "0x229DF10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004B9")]
		public bool IsPaused
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0x22A1E44", Offset = "0x22A1E44", VA = "0x22A1E44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004BA")]
		public string GameObjectName
		{
			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0x22A1E60", Offset = "0x22A1E60", VA = "0x22A1E60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0x22A1EB0", Offset = "0x22A1EB0", VA = "0x22A1EB0")]
			set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event SoundFinishedEventHandler SoundFinished
		{
			[Token(Token = "0x6001B70")]
			[Address(RVA = "0x229CE94", Offset = "0x229CE94", VA = "0x229CE94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C67F0", Offset = "0x10C67F0")]
			add
			{
			}
			[Token(Token = "0x6001B71")]
			[Address(RVA = "0x229CF38", Offset = "0x229CF38", VA = "0x229CF38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6800", Offset = "0x10C6800")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event SoundLoopedEventHandler SoundLooped
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0x229CFDC", Offset = "0x229CFDC", VA = "0x229CFDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6810", Offset = "0x10C6810")]
			add
			{
			}
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x229D080", Offset = "0x229D080", VA = "0x229D080")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6820", Offset = "0x10C6820")]
			remove
			{
			}
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x229D124", Offset = "0x229D124", VA = "0x229D124")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x229D384", Offset = "0x229D384", VA = "0x229D384")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x229D858", Offset = "0x229D858", VA = "0x229D858")]
		public void SetMixerGroup()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x229D8B0", Offset = "0x229D8B0", VA = "0x229D8B0")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x229DA60", Offset = "0x229DA60", VA = "0x229DA60")]
		private void SetOcclusion()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x229D9B4", Offset = "0x229D9B4", VA = "0x229D9B4")]
		private void SetPriority()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x229E0A0", Offset = "0x229E0A0", VA = "0x229E0A0")]
		public void DisableUpdater()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x229E144", Offset = "0x229E144", VA = "0x229E144")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x229E210", Offset = "0x229E210", VA = "0x229E210")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x229E148", Offset = "0x229E148", VA = "0x229E148")]
		private void StopSoundEarly()
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x229E560", Offset = "0x229E560", VA = "0x229E560")]
		public void Play(float? pitch, float maxVolume, string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x229E938", Offset = "0x229E938", VA = "0x229E938")]
		public void SetPlaySoundParams(string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x229E8E0", Offset = "0x229E8E0", VA = "0x229E8E0")]
		private void MaybeCleanupFinishedDelegate()
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x229EEC0", Offset = "0x229EEC0", VA = "0x229EEC0")]
		private void ResourceFailedToLoad()
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x229EAAC", Offset = "0x229EAAC", VA = "0x229EAAC")]
		private void FinishSetupToPlay()
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x229F2E8", Offset = "0x229F2E8", VA = "0x229F2E8")]
		public void JumpToTime(float timeToJumpTo)
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x229F334", Offset = "0x229F334", VA = "0x229F334")]
		public void GlideByPitch(float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x229F648", Offset = "0x229F648", VA = "0x229F648")]
		public void AdjustVolume(float volumePercentage)
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x229F7D4", Offset = "0x229F7D4", VA = "0x229F7D4")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x229F954", Offset = "0x229F954", VA = "0x229F954")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x229F9A4", Offset = "0x229F9A4", VA = "0x229F9A4")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x229F9F4", Offset = "0x229F9F4", VA = "0x229F9F4")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x229FBD4", Offset = "0x229FBD4", VA = "0x229FBD4")]
		public void DoNextChain(float volumePercentage, float? pitch, Transform transActor, bool attach)
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x22A004C", Offset = "0x22A004C", VA = "0x22A004C")]
		public void PlayEndLinkedGroups([Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x229EEE0", Offset = "0x229EEE0", VA = "0x229EEE0")]
		private void EnableUpdater(bool waitForSoundFinish = true)
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x22A060C", Offset = "0x22A060C", VA = "0x22A060C")]
		private void MaybeUnloadClip()
		{
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x22A02E8", Offset = "0x22A02E8", VA = "0x22A02E8")]
		private void PlayEndLinkedGroup(string sType, [Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x229E214", Offset = "0x229E214", VA = "0x229E214")]
		public void Stop(bool stopEndDetection = false, bool skipLinked = false)
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x22A08A8", Offset = "0x22A08A8", VA = "0x22A08A8")]
		private void StopEndCleanup()
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x22A08EC", Offset = "0x22A08EC", VA = "0x22A08EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6830", Offset = "0x10C6830")]
		private IEnumerator WaitForLoadToUnloadClipAndDeactivate()
		{
			return null;
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x22A0964", Offset = "0x22A0964", VA = "0x22A0964")]
		public void FadeToVolume(float newVolume, float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x22A0DA8", Offset = "0x22A0DA8", VA = "0x22A0DA8")]
		public void FadeOutNowAndStop([Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x22A10A0", Offset = "0x22A10A0", VA = "0x22A10A0")]
		public void FadeOutNowAndStop(float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x22A11E8", Offset = "0x22A11E8", VA = "0x22A11E8")]
		public void MoveToAmbientColliderPosition(Vector3 newPosition, TransformFollower follower)
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x22A1250", Offset = "0x22A1250", VA = "0x22A1250")]
		public void UpdateAudioVariation(TransformFollower transformFollower)
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x22A1308", Offset = "0x22A1308", VA = "0x22A1308")]
		public bool WasTriggeredFromTransform(Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x22A13C4", Offset = "0x22A13C4", VA = "0x22A13C4")]
		public bool WasTriggeredFromAnyOfTransformMap(HashSet<Transform> transMap)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x22A18A4", Offset = "0x22A18A4", VA = "0x22A18A4")]
		public void UpdateTransformTracker(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0x22A1E4C", Offset = "0x22A1E4C", VA = "0x22A1E4C")]
		public void SoundLoopStarted(int numberOfLoops)
		{
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x229EE88", Offset = "0x229EE88", VA = "0x229EE88")]
		public void ClearSubscribers()
		{
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x22A1EB8", Offset = "0x22A1EB8", VA = "0x22A1EB8")]
		public SoundGroupVariation()
		{
		}
	}
	[Token(Token = "0x2000422")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10AD094", Offset = "0x10AD094")]
	public class SoundGroupVariationUpdater : MonoBehaviour
	{
		[Token(Token = "0x2000423")]
		private enum WaitForSoundFinishMode
		{
			[Token(Token = "0x40013FA")]
			None,
			[Token(Token = "0x40013FB")]
			Play,
			[Token(Token = "0x40013FC")]
			WaitForEnd,
			[Token(Token = "0x40013FD")]
			StopOrRepeat
		}

		[Token(Token = "0x40013C3")]
		private const float TimeEarlyToScheduleNextClip = 0.1f;

		[Token(Token = "0x40013C4")]
		private const float FakeNegativeFloatValue = -10f;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _objectToFollow;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _objectToFollowGo;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isFollowing;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SoundGroupVariation _variation;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _priorityLastUpdated;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _useClipAgePriority;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSoundFinishMode _waitMode;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioSource _varAudio;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MasterAudioGroup _parentGrp;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _trans;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _frameNum;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _inited;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _fadeOutStartTime;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fadeInOutWillFadeOut;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool _hasFadeInOutSetMaxVolume;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _fadeInOutInFactor;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _fadeInOutOutFactor;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Action _fadeOutEarlyCompletionCallback;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _fadeOutEarlyTotalFrames;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _fadeOutEarlyFrameVolChange;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _fadeOutEarlyFrameNumber;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _fadeOutEarlyOrigVol;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _fadeToTargetFrameVolChange;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fadeToTargetFrameNumber;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _fadeToTargetOrigVol;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Action _fadeToTargetCompletionCallback;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _fadeToTargetTotalFrames;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _fadeToTargetVolume;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _fadeOutStarted;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _lastFrameClipTime;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _isPlayingBackward;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int _pitchGlideToTargetTotalFrames;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float _pitchGlideToTargetFramePitchChange;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int _pitchGlideToTargetFrameNumber;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _glideToTargetPitch;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _glideToTargetOrigPitch;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Action _glideToPitchCompletionCallback;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool _hasStartedNextInChain;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool _isWaitingForQueuedOcclusionRay;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int _framesPlayed;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float? _clipStartPosition;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float? _clipEndPosition;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private double? _clipSchedEndTime;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _hasScheduledNextClip;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool _hasScheduledEndLinkedGroups;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int _lastFrameClipPosition;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int _timesLooped;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool _isPaused;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private double _pauseTime;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _maCachedFromFrame;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MasterAudio _maThisFrame;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _listenerThisFrame;

		[Token(Token = "0x170004BD")]
		public float ClipStartPosition
		{
			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0x22A31C4", Offset = "0x22A31C4", VA = "0x22A31C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004BE")]
		public float ClipEndPosition
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0x22A2190", Offset = "0x22A2190", VA = "0x22A2190")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004BF")]
		public int FramesPlayed
		{
			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0x22A3FF4", Offset = "0x22A3FF4", VA = "0x22A3FF4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004C0")]
		public MasterAudio MAThisFrame
		{
			[Token(Token = "0x6001BF5")]
			[Address(RVA = "0x22A3FFC", Offset = "0x22A3FFC", VA = "0x22A3FFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C1")]
		public float MaxOcclusionFreq
		{
			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0x22A4060", Offset = "0x22A4060", VA = "0x22A4060")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004C2")]
		public float MinOcclusionFreq
		{
			[Token(Token = "0x6001BF7")]
			[Address(RVA = "0x22A4114", Offset = "0x22A4114", VA = "0x22A4114")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004C3")]
		private Transform Trans
		{
			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0x22A2838", Offset = "0x22A2838", VA = "0x22A2838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C4")]
		private AudioSource VarAudio
		{
			[Token(Token = "0x6001BF9")]
			[Address(RVA = "0x22A20E8", Offset = "0x22A20E8", VA = "0x22A20E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C5")]
		private MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6001BFA")]
			[Address(RVA = "0x22A28E0", Offset = "0x22A28E0", VA = "0x22A28E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C6")]
		private SoundGroupVariation GrpVariation
		{
			[Token(Token = "0x6001BFB")]
			[Address(RVA = "0x22A2034", Offset = "0x22A2034", VA = "0x22A2034")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C7")]
		private float RayCastOriginOffset
		{
			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0x22A3110", Offset = "0x22A3110", VA = "0x22A3110")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004C8")]
		private bool IsOcclusionMeasuringPaused
		{
			[Token(Token = "0x6001BFD")]
			[Address(RVA = "0x22A2B94", Offset = "0x22A2B94", VA = "0x22A2B94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004C9")]
		private bool HasEndLinkedGroups
		{
			[Token(Token = "0x6001BFE")]
			[Address(RVA = "0x22A3F8C", Offset = "0x22A3F8C", VA = "0x22A3F8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x229F580", Offset = "0x229F580", VA = "0x229F580")]
		public void GlidePitch(float targetPitch, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x22A0C08", Offset = "0x22A0C08", VA = "0x22A0C08")]
		public void FadeOverTimeToVolume(float targetVolume, float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x22A0EE8", Offset = "0x22A0EE8", VA = "0x22A0EE8")]
		public void FadeOutEarly(float fadeTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x22A0550", Offset = "0x22A0550", VA = "0x22A0550")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x229EFEC", Offset = "0x229EFEC", VA = "0x229EFEC")]
		public void FadeInOut()
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x229F208", Offset = "0x229F208", VA = "0x229F208")]
		public void FollowObject(bool follow, Transform objToFollow, bool clipAgePriority)
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x22A058C", Offset = "0x22A058C", VA = "0x22A058C")]
		public void WaitForSoundFinish()
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x22A0854", Offset = "0x22A0854", VA = "0x22A0854")]
		public void StopPitchGliding()
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x22A0824", Offset = "0x22A0824", VA = "0x22A0824")]
		public void StopFading()
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x22A0018", Offset = "0x22A0018", VA = "0x22A0018")]
		public void StopWaitingForFinish()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x22A07E0", Offset = "0x22A07E0", VA = "0x22A07E0")]
		public void StopFollowing()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x22A27BC", Offset = "0x22A27BC", VA = "0x22A27BC")]
		private void DisableIfFinished()
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x22A22D4", Offset = "0x22A22D4", VA = "0x22A22D4")]
		private void UpdateAudioLocationAndPriority(bool rePrioritize)
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x22A2988", Offset = "0x22A2988", VA = "0x22A2988")]
		private void ResetToNonOcclusionSetting()
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x22A2A30", Offset = "0x22A2A30", VA = "0x22A2A30")]
		private void UpdateOcclusion()
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x22A2C20", Offset = "0x22A2C20", VA = "0x22A2C20")]
		private void DoneWithOcclusion()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x22A2C98", Offset = "0x22A2C98", VA = "0x22A2C98")]
		public bool RayCastForOcclusion()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x22A2464", Offset = "0x22A2464", VA = "0x22A2464")]
		private void PlaySoundAndWait()
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x22A3314", Offset = "0x22A3314", VA = "0x22A3314")]
		private void DuckIfNotSilent()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x22A348C", Offset = "0x22A348C", VA = "0x22A348C")]
		private void StopOrChain()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x229F8DC", Offset = "0x229F8DC", VA = "0x229F8DC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x229FAD8", Offset = "0x229FAD8", VA = "0x229FAD8")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x229FC88", Offset = "0x229FC88", VA = "0x229FC88")]
		public void MaybeChain()
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x22A3528", Offset = "0x22A3528", VA = "0x22A3528")]
		private void UpdatePitch()
		{
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x22A35EC", Offset = "0x22A35EC", VA = "0x22A35EC")]
		private void PerformFading()
		{
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x22A3A2C", Offset = "0x22A3A2C", VA = "0x22A3A2C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x22A3AB4", Offset = "0x22A3AB4", VA = "0x22A3AB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x229DDEC", Offset = "0x229DDEC", VA = "0x229DDEC")]
		public void UpdateCachedObjects()
		{
		}

		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x22A3B9C", Offset = "0x22A3B9C", VA = "0x22A3B9C")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x22A41C8", Offset = "0x22A41C8", VA = "0x22A41C8")]
		public SoundGroupVariationUpdater()
		{
		}
	}
	[Token(Token = "0x2000424")]
	public static class AudioLoaderOptimizer
	{
		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<GameObject>> PlayingGameObjectsByClipName;

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x2007034", Offset = "0x2007034", VA = "0x2007034")]
		public static void AddNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x20072A8", Offset = "0x20072A8", VA = "0x20072A8")]
		public static void RemoveNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x200749C", Offset = "0x200749C", VA = "0x200749C")]
		public static bool IsAnyOfNonPreloadedClipPlaying(AudioClip clip)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000425")]
	public static class AudioPrioritizer
	{
		[Token(Token = "0x40013FF")]
		private const int MaxPriority = 0;

		[Token(Token = "0x4001400")]
		private const int HighestPriority = 16;

		[Token(Token = "0x4001401")]
		private const int LowestPriority = 128;

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x20076B4", Offset = "0x20076B4", VA = "0x20076B4")]
		public static void Set2DSoundPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x20076D0", Offset = "0x20076D0", VA = "0x20076D0")]
		public static void SetSoundGroupInitialPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x20076EC", Offset = "0x20076EC", VA = "0x20076EC")]
		public static void SetPreviewPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x2007708", Offset = "0x2007708", VA = "0x2007708")]
		public static void Set3DPriority(SoundGroupVariation variation, bool useClipAgePriority)
		{
		}
	}
	[Token(Token = "0x2000426")]
	public static class AudioResourceOptimizer
	{
		[Token(Token = "0x2000427")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD0A8", Offset = "0x10AD0A8")]
		private sealed class <PopulateResourceSongToPlaylistControllerAsync>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001406")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string songResourceName;

			[Token(Token = "0x4001409")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playlistName;

			[Token(Token = "0x400140A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlaylistController controller;

			[Token(Token = "0x400140B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MusicSetting songSetting;

			[Token(Token = "0x400140C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public PlaylistController.AudioPlayType playType;

			[Token(Token = "0x400140D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x170004CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C19")]
				[Address(RVA = "0x2EC5D0C", Offset = "0x2EC5D0C", VA = "0x2EC5D0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C1B")]
				[Address(RVA = "0x2EC5D54", Offset = "0x2EC5D54", VA = "0x2EC5D54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C16")]
			[Address(RVA = "0x2EC56EC", Offset = "0x2EC56EC", VA = "0x2EC56EC")]
			[DebuggerHidden]
			public <PopulateResourceSongToPlaylistControllerAsync>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001C17")]
			[Address(RVA = "0x2EC5718", Offset = "0x2EC5718", VA = "0x2EC5718", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C18")]
			[Address(RVA = "0x2EC571C", Offset = "0x2EC571C", VA = "0x2EC571C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0x2EC5D14", Offset = "0x2EC5D14", VA = "0x2EC5D14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000428")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD0B8", Offset = "0x10AD0B8")]
		private sealed class <PopulateSourcesWithResourceClipAsync>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400140E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400140F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string clipName;

			[Token(Token = "0x4001411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action successAction;

			[Token(Token = "0x4001412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SoundGroupVariation variation;

			[Token(Token = "0x4001413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action failureAction;

			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool <isWarmingCall>5__2;

			[Token(Token = "0x4001415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ResourceRequest <asyncRes>5__3;

			[Token(Token = "0x170004CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C1F")]
				[Address(RVA = "0x2EC6468", Offset = "0x2EC6468", VA = "0x2EC6468", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C21")]
				[Address(RVA = "0x2EC64B0", Offset = "0x2EC64B0", VA = "0x2EC64B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0x2EC5D5C", Offset = "0x2EC5D5C", VA = "0x2EC5D5C")]
			[DebuggerHidden]
			public <PopulateSourcesWithResourceClipAsync>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0x2EC5D88", Offset = "0x2EC5D88", VA = "0x2EC5D88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C1E")]
			[Address(RVA = "0x2EC5D8C", Offset = "0x2EC5D8C", VA = "0x2EC5D8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C20")]
			[Address(RVA = "0x2EC6470", Offset = "0x2EC6470", VA = "0x2EC6470", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<AudioSource>> AudioResourceTargetsByName;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Dictionary<string, AudioClip> AudioClipsByName;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<string, List<AudioClip>> PlaylistClipsByPlaylistName;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string _supportedLanguageFolder;

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x2007AE4", Offset = "0x2007AE4", VA = "0x2007AE4")]
		public static void ClearAudioClips()
		{
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x2007B94", Offset = "0x2007B94", VA = "0x2007B94")]
		public static string GetLocalizedDynamicSoundGroupFileName(SystemLanguage localLanguage, bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x2007D14", Offset = "0x2007D14", VA = "0x2007D14")]
		public static string GetLocalizedFileName(bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x20080B8", Offset = "0x20080B8", VA = "0x20080B8")]
		public static void AddTargetForClip(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x2007DB8", Offset = "0x2007DB8", VA = "0x2007DB8")]
		private static string SupportedLanguageFolder()
		{
			return null;
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x200837C", Offset = "0x200837C", VA = "0x200837C")]
		public static void ClearSupportLanguageFolder()
		{
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x2008404", Offset = "0x2008404", VA = "0x2008404")]
		private static void FinishRecordingPlaylistClip(string controllerName, AudioClip resAudioClip)
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x20085A8", Offset = "0x20085A8", VA = "0x20085A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6900", Offset = "0x10C6900")]
		public static IEnumerator PopulateResourceSongToPlaylistControllerAsync(MusicSetting songSetting, string songResourceName, string playlistName, PlaylistController controller, PlaylistController.AudioPlayType playType)
		{
			return null;
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x2008674", Offset = "0x2008674", VA = "0x2008674")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6960", Offset = "0x10C6960")]
		public static IEnumerator PopulateSourcesWithResourceClipAsync(string clipName, SoundGroupVariation variation, Action successAction, Action failureAction)
		{
			return null;
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x2008738", Offset = "0x2008738", VA = "0x2008738")]
		public static void UnloadPlaylistSongIfUnused(string controllerName, AudioClip clipToRemove)
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x20088DC", Offset = "0x20088DC", VA = "0x20088DC")]
		public static void DeleteAudioSourceFromList(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x2008ADC", Offset = "0x2008ADC", VA = "0x2008ADC")]
		public static void UnloadClipIfUnused(string clipName)
		{
		}
	}
	[Token(Token = "0x2000429")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10AD0C8", Offset = "0x10AD0C8")]
	public class MasterAudio : MonoBehaviour
	{
		[Token(Token = "0x200042A")]
		public enum JukeBoxDisplayMode
		{
			[Token(Token = "0x40014E6")]
			DisplayAll,
			[Token(Token = "0x40014E7")]
			DisplayActive
		}

		[Token(Token = "0x200042B")]
		public enum BusVoiceLimitExceededMode
		{
			[Token(Token = "0x40014E9")]
			DoNotPlayNewSound,
			[Token(Token = "0x40014EA")]
			StopOldestSound,
			[Token(Token = "0x40014EB")]
			StopFarthestSound,
			[Token(Token = "0x40014EC")]
			StopLeastImportantSound
		}

		[Token(Token = "0x200042C")]
		public enum AmbientSoundExitMode
		{
			[Token(Token = "0x40014EE")]
			StopSound,
			[Token(Token = "0x40014EF")]
			FadeSound
		}

		[Token(Token = "0x200042D")]
		public enum AmbientSoundReEnterMode
		{
			[Token(Token = "0x40014F1")]
			StopExistingSound,
			[Token(Token = "0x40014F2")]
			FadeInSameSound
		}

		[Token(Token = "0x200042E")]
		public enum VariationFollowerType
		{
			[Token(Token = "0x40014F4")]
			LateUpdate,
			[Token(Token = "0x40014F5")]
			FixedUpdate
		}

		[Token(Token = "0x200042F")]
		public enum LinkedGroupSelectionType
		{
			[Token(Token = "0x40014F7")]
			All,
			[Token(Token = "0x40014F8")]
			OneAtRandom
		}

		[Token(Token = "0x2000430")]
		public enum OcclusionSelectionType
		{
			[Token(Token = "0x40014FA")]
			AllGroups,
			[Token(Token = "0x40014FB")]
			TurnOnPerBusOrGroup
		}

		[Token(Token = "0x2000431")]
		public enum RaycastMode
		{
			[Token(Token = "0x40014FD")]
			Physics3D,
			[Token(Token = "0x40014FE")]
			Physics2D
		}

		[Token(Token = "0x2000432")]
		public enum AllMusicSpatialBlendType
		{
			[Token(Token = "0x4001500")]
			ForceAllTo2D,
			[Token(Token = "0x4001501")]
			ForceAllTo3D,
			[Token(Token = "0x4001502")]
			ForceAllToCustom,
			[Token(Token = "0x4001503")]
			AllowDifferentPerController
		}

		[Token(Token = "0x2000433")]
		public enum AllMixerSpatialBlendType
		{
			[Token(Token = "0x4001505")]
			ForceAllTo2D,
			[Token(Token = "0x4001506")]
			ForceAllTo3D,
			[Token(Token = "0x4001507")]
			ForceAllToCustom,
			[Token(Token = "0x4001508")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x2000434")]
		public enum ItemSpatialBlendType
		{
			[Token(Token = "0x400150A")]
			ForceTo2D,
			[Token(Token = "0x400150B")]
			ForceTo3D,
			[Token(Token = "0x400150C")]
			ForceToCustom,
			[Token(Token = "0x400150D")]
			UseCurveFromAudioSource
		}

		[Token(Token = "0x2000435")]
		public enum GroupPlayType
		{
			[Token(Token = "0x400150F")]
			Always,
			[Token(Token = "0x4001510")]
			WhenActorInAudibleRange,
			[Token(Token = "0x4001511")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x2000436")]
		public enum DefaultGroupPlayType
		{
			[Token(Token = "0x4001513")]
			Always,
			[Token(Token = "0x4001514")]
			WhenActorInAudibleRange
		}

		[Token(Token = "0x2000437")]
		public enum MixerWidthMode
		{
			[Token(Token = "0x4001516")]
			Narrow,
			[Token(Token = "0x4001517")]
			Normal,
			[Token(Token = "0x4001518")]
			Wide
		}

		[Token(Token = "0x2000438")]
		public enum CustomEventReceiveMode
		{
			[Token(Token = "0x400151A")]
			Always,
			[Token(Token = "0x400151B")]
			WhenDistanceLessThan,
			[Token(Token = "0x400151C")]
			WhenDistanceMoreThan,
			[Token(Token = "0x400151D")]
			Never,
			[Token(Token = "0x400151E")]
			OnSameGameObject,
			[Token(Token = "0x400151F")]
			OnChildGameObject,
			[Token(Token = "0x4001520")]
			OnParentGameObject,
			[Token(Token = "0x4001521")]
			OnSameOrChildGameObject,
			[Token(Token = "0x4001522")]
			OnSameOrParentGameObject
		}

		[Token(Token = "0x2000439")]
		public enum EventReceiveFilter
		{
			[Token(Token = "0x4001524")]
			All,
			[Token(Token = "0x4001525")]
			Closest,
			[Token(Token = "0x4001526")]
			Random
		}

		[Token(Token = "0x200043A")]
		public enum VariationLoadStatus
		{
			[Token(Token = "0x4001528")]
			None,
			[Token(Token = "0x4001529")]
			Loading,
			[Token(Token = "0x400152A")]
			Loaded,
			[Token(Token = "0x400152B")]
			LoadFailed
		}

		[Token(Token = "0x200043B")]
		public enum AudioLocation
		{
			[Token(Token = "0x400152D")]
			Clip,
			[Token(Token = "0x400152E")]
			ResourceFile
		}

		[Token(Token = "0x200043C")]
		public enum CustomSongStartTimeMode
		{
			[Token(Token = "0x4001530")]
			Beginning,
			[Token(Token = "0x4001531")]
			SpecificTime,
			[Token(Token = "0x4001532")]
			RandomTime,
			[Token(Token = "0x4001533")]
			Section
		}

		[Token(Token = "0x200043D")]
		public enum BusCommand
		{
			[Token(Token = "0x4001535")]
			None,
			[Token(Token = "0x4001536")]
			FadeToVolume,
			[Token(Token = "0x4001537")]
			Mute,
			[Token(Token = "0x4001538")]
			Pause,
			[Token(Token = "0x4001539")]
			Solo,
			[Token(Token = "0x400153A")]
			Unmute,
			[Token(Token = "0x400153B")]
			Unpause,
			[Token(Token = "0x400153C")]
			Unsolo,
			[Token(Token = "0x400153D")]
			Stop,
			[Token(Token = "0x400153E")]
			ChangePitch,
			[Token(Token = "0x400153F")]
			ToggleMute,
			[Token(Token = "0x4001540")]
			StopBusOfTransform,
			[Token(Token = "0x4001541")]
			PauseBusOfTransform,
			[Token(Token = "0x4001542")]
			UnpauseBusOfTransform,
			[Token(Token = "0x4001543")]
			GlideByPitch,
			[Token(Token = "0x4001544")]
			StopOldBusVoices,
			[Token(Token = "0x4001545")]
			FadeOutOldBusVoices
		}

		[Token(Token = "0x200043E")]
		public enum DragGroupMode
		{
			[Token(Token = "0x4001547")]
			OneGroupPerClip,
			[Token(Token = "0x4001548")]
			OneGroupWithVariations
		}

		[Token(Token = "0x200043F")]
		public enum EventSoundFunctionType
		{
			[Token(Token = "0x400154A")]
			PlaySound,
			[Token(Token = "0x400154B")]
			GroupControl,
			[Token(Token = "0x400154C")]
			BusControl,
			[Token(Token = "0x400154D")]
			PlaylistControl,
			[Token(Token = "0x400154E")]
			CustomEventControl,
			[Token(Token = "0x400154F")]
			GlobalControl,
			[Token(Token = "0x4001550")]
			UnityMixerControl,
			[Token(Token = "0x4001551")]
			PersistentSettingsControl
		}

		[Token(Token = "0x2000440")]
		public enum LanguageMode
		{
			[Token(Token = "0x4001553")]
			UseDeviceSetting,
			[Token(Token = "0x4001554")]
			SpecificLanguage,
			[Token(Token = "0x4001555")]
			DynamicallySet
		}

		[Token(Token = "0x2000441")]
		public enum UnityMixerCommand
		{
			[Token(Token = "0x4001557")]
			None,
			[Token(Token = "0x4001558")]
			TransitionToSnapshot,
			[Token(Token = "0x4001559")]
			TransitionToSnapshotBlend
		}

		[Token(Token = "0x2000442")]
		public enum PlaylistCommand
		{
			[Token(Token = "0x400155B")]
			None,
			[Token(Token = "0x400155C")]
			ChangePlaylist,
			[Token(Token = "0x400155D")]
			FadeToVolume,
			[Token(Token = "0x400155E")]
			PlaySong,
			[Token(Token = "0x400155F")]
			PlayRandomSong,
			[Token(Token = "0x4001560")]
			PlayNextSong,
			[Token(Token = "0x4001561")]
			Pause,
			[Token(Token = "0x4001562")]
			Resume,
			[Token(Token = "0x4001563")]
			Stop,
			[Token(Token = "0x4001564")]
			Mute,
			[Token(Token = "0x4001565")]
			Unmute,
			[Token(Token = "0x4001566")]
			ToggleMute,
			[Token(Token = "0x4001567")]
			Restart,
			[Token(Token = "0x4001568")]
			Start,
			[Token(Token = "0x4001569")]
			StopLoopingCurrentSong,
			[Token(Token = "0x400156A")]
			StopPlaylistAfterCurrentSong,
			[Token(Token = "0x400156B")]
			AddSongToQueue
		}

		[Token(Token = "0x2000443")]
		public enum CustomEventCommand
		{
			[Token(Token = "0x400156D")]
			None,
			[Token(Token = "0x400156E")]
			FireEvent
		}

		[Token(Token = "0x2000444")]
		public enum GlobalCommand
		{
			[Token(Token = "0x4001570")]
			None,
			[Token(Token = "0x4001571")]
			PauseMixer,
			[Token(Token = "0x4001572")]
			UnpauseMixer,
			[Token(Token = "0x4001573")]
			StopMixer,
			[Token(Token = "0x4001574")]
			StopEverything,
			[Token(Token = "0x4001575")]
			PauseEverything,
			[Token(Token = "0x4001576")]
			UnpauseEverything,
			[Token(Token = "0x4001577")]
			MuteEverything,
			[Token(Token = "0x4001578")]
			UnmuteEverything,
			[Token(Token = "0x4001579")]
			SetMasterMixerVolume,
			[Token(Token = "0x400157A")]
			SetMasterPlaylistVolume,
			[Token(Token = "0x400157B")]
			PauseAudioListener,
			[Token(Token = "0x400157C")]
			UnpauseAudioListener
		}

		[Token(Token = "0x2000445")]
		public enum SoundGroupCommand
		{
			[Token(Token = "0x400157E")]
			None,
			[Token(Token = "0x400157F")]
			FadeToVolume,
			[Token(Token = "0x4001580")]
			FadeOutAllOfSound,
			[Token(Token = "0x4001581")]
			Mute,
			[Token(Token = "0x4001582")]
			Pause,
			[Token(Token = "0x4001583")]
			Solo,
			[Token(Token = "0x4001584")]
			StopAllOfSound,
			[Token(Token = "0x4001585")]
			Unmute,
			[Token(Token = "0x4001586")]
			Unpause,
			[Token(Token = "0x4001587")]
			Unsolo,
			[Token(Token = "0x4001588")]
			StopAllSoundsOfTransform,
			[Token(Token = "0x4001589")]
			PauseAllSoundsOfTransform,
			[Token(Token = "0x400158A")]
			UnpauseAllSoundsOfTransform,
			[Token(Token = "0x400158B")]
			StopSoundGroupOfTransform,
			[Token(Token = "0x400158C")]
			PauseSoundGroupOfTransform,
			[Token(Token = "0x400158D")]
			UnpauseSoundGroupOfTransform,
			[Token(Token = "0x400158E")]
			FadeOutSoundGroupOfTransform,
			[Token(Token = "0x400158F")]
			RefillSoundGroupPool,
			[Token(Token = "0x4001590")]
			RouteToBus,
			[Token(Token = "0x4001591")]
			GlideByPitch,
			[Token(Token = "0x4001592")]
			ToggleSoundGroup,
			[Token(Token = "0x4001593")]
			ToggleSoundGroupOfTransform,
			[Token(Token = "0x4001594")]
			FadeOutAllSoundsOfTransform,
			[Token(Token = "0x4001595")]
			StopOldSoundGroupVoices,
			[Token(Token = "0x4001596")]
			FadeOutOldSoundGroupVoices,
			[Token(Token = "0x4001597")]
			FadeSoundGroupOfTransformToVolume
		}

		[Token(Token = "0x2000446")]
		public enum PersistentSettingsCommand
		{
			[Token(Token = "0x4001599")]
			None,
			[Token(Token = "0x400159A")]
			SetBusVolume,
			[Token(Token = "0x400159B")]
			SetGroupVolume,
			[Token(Token = "0x400159C")]
			SetMixerVolume,
			[Token(Token = "0x400159D")]
			SetMusicVolume,
			[Token(Token = "0x400159E")]
			MixerMuteToggle,
			[Token(Token = "0x400159F")]
			MusicMuteToggle
		}

		[Token(Token = "0x2000447")]
		public enum SongFadeInPosition
		{
			[Token(Token = "0x40015A1")]
			NewClipFromBeginning = 1,
			[Token(Token = "0x40015A2")]
			NewClipFromLastKnownPosition = 3,
			[Token(Token = "0x40015A3")]
			SynchronizeClips = 5
		}

		[Token(Token = "0x2000448")]
		public enum SoundSpawnLocationMode
		{
			[Token(Token = "0x40015A5")]
			MasterAudioLocation,
			[Token(Token = "0x40015A6")]
			CallerLocation,
			[Token(Token = "0x40015A7")]
			AttachToCaller
		}

		[Token(Token = "0x2000449")]
		public enum VariationCommand
		{
			[Token(Token = "0x40015A9")]
			None,
			[Token(Token = "0x40015AA")]
			Stop,
			[Token(Token = "0x40015AB")]
			Pause,
			[Token(Token = "0x40015AC")]
			Unpause
		}

		[Serializable]
		[Token(Token = "0x200044A")]
		public struct CustomEventCandidate
		{
			[Token(Token = "0x40015AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float DistanceAway;

			[Token(Token = "0x40015AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ICustomEventReceiver Receiver;

			[Token(Token = "0x40015AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform Trans;

			[Token(Token = "0x40015B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int RandomId;

			[Token(Token = "0x6001D66")]
			[Address(RVA = "0x1DDF7E0", Offset = "0x1DDF7E0", VA = "0x1DDF7E0")]
			public CustomEventCandidate(float distance, ICustomEventReceiver rec, Transform trans, int randomId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200044B")]
		public class AudioGroupInfo
		{
			[Token(Token = "0x40015B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<AudioInfo> Sources;

			[Token(Token = "0x40015B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int LastFramePlayed;

			[Token(Token = "0x40015B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastTimePlayed;

			[Token(Token = "0x40015B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MasterAudioGroup Group;

			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool PlayedForWarming;

			[Token(Token = "0x6001D67")]
			[Address(RVA = "0x1DDF708", Offset = "0x1DDF708", VA = "0x1DDF708")]
			public AudioGroupInfo(List<AudioInfo> sources, MasterAudioGroup groupScript)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200044C")]
		public class AudioInfo
		{
			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource Source;

			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float OriginalVolume;

			[Token(Token = "0x40015B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastPercentageVolume;

			[Token(Token = "0x40015B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float LastRandomVolume;

			[Token(Token = "0x40015BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundGroupVariation Variation;

			[Token(Token = "0x6001D68")]
			[Address(RVA = "0x1DDF770", Offset = "0x1DDF770", VA = "0x1DDF770")]
			public AudioInfo(SoundGroupVariation variation, AudioSource source, float origVol)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200044D")]
		public class Playlist
		{
			[Token(Token = "0x200044E")]
			public enum CrossfadeTimeMode
			{
				[Token(Token = "0x40015CE")]
				UseMasterSetting,
				[Token(Token = "0x40015CF")]
				Override
			}

			[Token(Token = "0x40015BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isExpanded;

			[Token(Token = "0x40015BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string playlistName;

			[Token(Token = "0x40015BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SongFadeInPosition songTransitionType;

			[Token(Token = "0x40015BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MusicSetting> MusicSettings;

			[Token(Token = "0x40015BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioLocation bulkLocationMode;

			[Token(Token = "0x40015C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public CrossfadeTimeMode crossfadeMode;

			[Token(Token = "0x40015C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float crossFadeTime;

			[Token(Token = "0x40015C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool fadeInFirstSong;

			[Token(Token = "0x40015C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool fadeOutLastSong;

			[Token(Token = "0x40015C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
			public bool bulkEditMode;

			[Token(Token = "0x40015C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
			public bool isTemporary;

			[Token(Token = "0x40015C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool showMetadata;

			[Token(Token = "0x40015C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<SongMetadataProperty> songMetadataProps;

			[Token(Token = "0x40015C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string newMetadataPropName;

			[Token(Token = "0x40015C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public SongMetadataProperty.MetadataPropertyType newMetadataPropType;

			[Token(Token = "0x40015CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool newMetadataPropRequired;

			[Token(Token = "0x40015CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool newMetadataPropCanHaveMult;

			[Token(Token = "0x40015CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private readonly List<int> _actorInstanceIds;

			[Token(Token = "0x170004F3")]
			public bool HasLiveActors
			{
				[Token(Token = "0x6001D6C")]
				[Address(RVA = "0x1DDFAB8", Offset = "0x1DDFAB8", VA = "0x1DDFAB8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001D69")]
			[Address(RVA = "0x1DDF82C", Offset = "0x1DDF82C", VA = "0x1DDF82C")]
			public Playlist()
			{
			}

			[Token(Token = "0x6001D6A")]
			[Address(RVA = "0x1DDF9B4", Offset = "0x1DDF9B4", VA = "0x1DDF9B4")]
			public void AddActorInstanceId(int instanceId)
			{
			}

			[Token(Token = "0x6001D6B")]
			[Address(RVA = "0x1DDFA54", Offset = "0x1DDFA54", VA = "0x1DDFA54")]
			public void RemoveActorInstanceId(int instanceId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200044F")]
		public class SoundGroupRefillInfo
		{
			[Token(Token = "0x40015D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastTimePlayed;

			[Token(Token = "0x40015D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float InactivePeriodSeconds;

			[Token(Token = "0x6001D6D")]
			[Address(RVA = "0x1DDFB0C", Offset = "0x1DDFB0C", VA = "0x1DDFB0C")]
			public SoundGroupRefillInfo(float lastTimePlayed, float inactivePeriodSeconds)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD0DC", Offset = "0x10AD0DC")]
		private sealed class <>c
		{
			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<GroupPitchGlideInfo> <>9__263_0;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<AudioInfo> <>9__280_0;

			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Comparison<CustomEventCandidate> <>9__486_0;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Comparison<CustomEventCandidate> <>9__486_1;

			[Token(Token = "0x6001D6F")]
			[Address(RVA = "0x1DDE7B8", Offset = "0x1DDE7B8", VA = "0x1DDE7B8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001D70")]
			[Address(RVA = "0x1DDE7C0", Offset = "0x1DDE7C0", VA = "0x1DDE7C0")]
			internal bool <PerformGroupPitchGlides>b__263_0(GroupPitchGlideInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D71")]
			[Address(RVA = "0x1DDE7E0", Offset = "0x1DDE7E0", VA = "0x1DDE7E0")]
			internal bool <CanPlayDialogBasedOnImportanceOrIsNotDialog>b__280_0(AudioInfo info)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D72")]
			[Address(RVA = "0x1DDE804", Offset = "0x1DDE804", VA = "0x1DDE804")]
			internal int <FireCustomEvent>b__486_0(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}

			[Token(Token = "0x6001D73")]
			[Address(RVA = "0x1DDE814", Offset = "0x1DDE814", VA = "0x1DDE814")]
			internal int <FireCustomEvent>b__486_1(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000451")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD0EC", Offset = "0x10AD0EC")]
		private sealed class <>c__DisplayClass274_0
		{
			[Token(Token = "0x40015D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6001D74")]
			[Address(RVA = "0x1DDE828", Offset = "0x1DDE828", VA = "0x1DDE828")]
			public <>c__DisplayClass274_0()
			{
			}

			[Token(Token = "0x6001D75")]
			[Address(RVA = "0x1DDE830", Offset = "0x1DDE830", VA = "0x1DDE830")]
			internal void <PlaySoundAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x2000452")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD0FC", Offset = "0x10AD0FC")]
		private sealed class <PlaySoundAndWaitUntilFinished>d__274 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float volumePercentage;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float? pitch;

			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float delaySoundTime;

			[Token(Token = "0x40015DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string variationName;

			[Token(Token = "0x40015DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass274_0 <>8__1;

			[Token(Token = "0x40015E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action completedAction;

			[Token(Token = "0x170004F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D79")]
				[Address(RVA = "0x1DDF6B8", Offset = "0x1DDF6B8", VA = "0x1DDF6B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D7B")]
				[Address(RVA = "0x1DDF700", Offset = "0x1DDF700", VA = "0x1DDF700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D76")]
			[Address(RVA = "0x1DDF3A0", Offset = "0x1DDF3A0", VA = "0x1DDF3A0")]
			[DebuggerHidden]
			public <PlaySoundAndWaitUntilFinished>d__274(int <>1__state)
			{
			}

			[Token(Token = "0x6001D77")]
			[Address(RVA = "0x1DDF3CC", Offset = "0x1DDF3CC", VA = "0x1DDF3CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D78")]
			[Address(RVA = "0x1DDF3D0", Offset = "0x1DDF3D0", VA = "0x1DDF3D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D7A")]
			[Address(RVA = "0x1DDF6C0", Offset = "0x1DDF6C0", VA = "0x1DDF6C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000453")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD10C", Offset = "0x10AD10C")]
		private sealed class <>c__DisplayClass275_0
		{
			[Token(Token = "0x40015E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6001D7C")]
			[Address(RVA = "0x1DDE83C", Offset = "0x1DDE83C", VA = "0x1DDE83C")]
			public <>c__DisplayClass275_0()
			{
			}

			[Token(Token = "0x6001D7D")]
			[Address(RVA = "0x1DDE844", Offset = "0x1DDE844", VA = "0x1DDE844")]
			internal void <PlaySound3DAtTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x2000454")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD11C", Offset = "0x10AD11C")]
		private sealed class <PlaySound3DAtTransformAndWaitUntilFinished>d__275 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x40015E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x40015E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x40015E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x40015E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x40015E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x40015EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x40015EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass275_0 <>8__1;

			[Token(Token = "0x40015EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x170004F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D81")]
				[Address(RVA = "0x1DDEFCC", Offset = "0x1DDEFCC", VA = "0x1DDEFCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D83")]
				[Address(RVA = "0x1DDF014", Offset = "0x1DDF014", VA = "0x1DDF014", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0x1DDEC2C", Offset = "0x1DDEC2C", VA = "0x1DDEC2C")]
			[DebuggerHidden]
			public <PlaySound3DAtTransformAndWaitUntilFinished>d__275(int <>1__state)
			{
			}

			[Token(Token = "0x6001D7F")]
			[Address(RVA = "0x1DDEC58", Offset = "0x1DDEC58", VA = "0x1DDEC58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D80")]
			[Address(RVA = "0x1DDEC5C", Offset = "0x1DDEC5C", VA = "0x1DDEC5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x1DDEFD4", Offset = "0x1DDEFD4", VA = "0x1DDEFD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000455")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD12C", Offset = "0x10AD12C")]
		private sealed class <>c__DisplayClass276_0
		{
			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6001D84")]
			[Address(RVA = "0x1DDE850", Offset = "0x1DDE850", VA = "0x1DDE850")]
			public <>c__DisplayClass276_0()
			{
			}

			[Token(Token = "0x6001D85")]
			[Address(RVA = "0x1DDE858", Offset = "0x1DDE858", VA = "0x1DDE858")]
			internal void <PlaySound3DFollowTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x2000456")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD13C", Offset = "0x10AD13C")]
		private sealed class <PlaySound3DFollowTransformAndWaitUntilFinished>d__276 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x40015F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x40015F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass276_0 <>8__1;

			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x170004F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D89")]
				[Address(RVA = "0x1DDF350", Offset = "0x1DDF350", VA = "0x1DDF350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D8B")]
				[Address(RVA = "0x1DDF398", Offset = "0x1DDF398", VA = "0x1DDF398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x1DDF01C", Offset = "0x1DDF01C", VA = "0x1DDF01C")]
			[DebuggerHidden]
			public <PlaySound3DFollowTransformAndWaitUntilFinished>d__276(int <>1__state)
			{
			}

			[Token(Token = "0x6001D87")]
			[Address(RVA = "0x1DDF048", Offset = "0x1DDF048", VA = "0x1DDF048", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D88")]
			[Address(RVA = "0x1DDF04C", Offset = "0x1DDF04C", VA = "0x1DDF04C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0x1DDF358", Offset = "0x1DDF358", VA = "0x1DDF358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000457")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD14C", Offset = "0x10AD14C")]
		private sealed class <>c__DisplayClass290_0
		{
			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MasterAudioGroup maGroup;

			[Token(Token = "0x40015FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string variationName;

			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0x1DDE864", Offset = "0x1DDE864", VA = "0x1DDE864")]
			public <>c__DisplayClass290_0()
			{
			}

			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0x1DDE86C", Offset = "0x1DDE86C", VA = "0x1DDE86C")]
			internal bool <FindRetriggerableVariationInGroup>b__0(AudioInfo info)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0x1DDE8E8", Offset = "0x1DDE8E8", VA = "0x1DDE8E8")]
			internal bool <FindRetriggerableVariationInGroup>b__1(AudioInfo info)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000458")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD15C", Offset = "0x10AD15C")]
		private sealed class <>c__DisplayClass329_0
		{
			[Token(Token = "0x40015FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x1DDE984", Offset = "0x1DDE984", VA = "0x1DDE984")]
			public <>c__DisplayClass329_0()
			{
			}

			[Token(Token = "0x6001D90")]
			[Address(RVA = "0x1DDE98C", Offset = "0x1DDE98C", VA = "0x1DDE98C")]
			internal bool <RouteGroupToBus>b__1(GroupBus x)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D91")]
			[Address(RVA = "0x1DDE9B0", Offset = "0x1DDE9B0", VA = "0x1DDE9B0")]
			internal bool <RouteGroupToBus>b__0(GroupBus x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000459")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD16C", Offset = "0x10AD16C")]
		private sealed class <>c__DisplayClass394_0
		{
			[Token(Token = "0x40015FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6001D92")]
			[Address(RVA = "0x1DDE9D4", Offset = "0x1DDE9D4", VA = "0x1DDE9D4")]
			public <>c__DisplayClass394_0()
			{
			}

			[Token(Token = "0x6001D93")]
			[Address(RVA = "0x1DDE9DC", Offset = "0x1DDE9DC", VA = "0x1DDE9DC")]
			internal bool <CreateBus>b__0(GroupBus obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200045A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD17C", Offset = "0x10AD17C")]
		private sealed class <>c__DisplayClass482_0
		{
			[Token(Token = "0x40015FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string categoryName;

			[Token(Token = "0x6001D94")]
			[Address(RVA = "0x1DDEA00", Offset = "0x1DDEA00", VA = "0x1DDEA00")]
			public <>c__DisplayClass482_0()
			{
			}

			[Token(Token = "0x6001D95")]
			[Address(RVA = "0x1DDEA08", Offset = "0x1DDEA08", VA = "0x1DDEA08")]
			internal bool <CreateCustomEventCategoryIfNotThere>b__0(CustomEventCategory cat)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200045B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD18C", Offset = "0x10AD18C")]
		private sealed class <>c__DisplayClass484_0
		{
			[Token(Token = "0x40015FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6001D96")]
			[Address(RVA = "0x1DDEA58", Offset = "0x1DDEA58", VA = "0x1DDEA58")]
			public <>c__DisplayClass484_0()
			{
			}

			[Token(Token = "0x6001D97")]
			[Address(RVA = "0x1DDEA60", Offset = "0x1DDEA60", VA = "0x1DDEA60")]
			internal bool <DeleteCustomEvent>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200045C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD19C", Offset = "0x10AD19C")]
		private sealed class <>c__DisplayClass488_0
		{
			[Token(Token = "0x40015FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6001D98")]
			[Address(RVA = "0x1DDEA84", Offset = "0x1DDEA84", VA = "0x1DDEA84")]
			public <>c__DisplayClass488_0()
			{
			}

			[Token(Token = "0x6001D99")]
			[Address(RVA = "0x1DDEA8C", Offset = "0x1DDEA8C", VA = "0x1DDEA8C")]
			internal bool <GetChildReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200045D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD1AC", Offset = "0x10AD1AC")]
		private sealed class <>c__DisplayClass489_0
		{
			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6001D9A")]
			[Address(RVA = "0x1DDEB58", Offset = "0x1DDEB58", VA = "0x1DDEB58")]
			public <>c__DisplayClass489_0()
			{
			}

			[Token(Token = "0x6001D9B")]
			[Address(RVA = "0x1DDEB60", Offset = "0x1DDEB60", VA = "0x1DDEB60")]
			internal bool <GetParentReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001416")]
		public const string VideoPlayersSoundGroupSelectedError = "Can't use specially named Sound Group for Video Players. Please select another.";

		[Token(Token = "0x4001417")]
		public const string VideoPlayerSoundGroupName = "_VideoPlayers";

		[Token(Token = "0x4001418")]
		public const string VideoPlayerBusName = "_VideoPlayers";

		[Token(Token = "0x4001419")]
		public const string MasterAudioDefaultFolder = "Assets/Plugins/DarkTonic/MasterAudio";

		[Token(Token = "0x400141A")]
		public const string PreviewText = "Random delay, custom fading & start/end position settings are ignored by preview in edit mode.";

		[Token(Token = "0x400141B")]
		public const string LoopDisabledLoopedChain = "Loop Clip is always OFF for Looped Chain Groups";

		[Token(Token = "0x400141C")]
		public const string LoopDisabledCustomEnd = "Loop Clip is always OFF when using Custom End Position";

		[Token(Token = "0x400141D")]
		public const string DragAudioTip = "Drag Audio clips or a folder containing some here";

		[Token(Token = "0x400141E")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x400141F")]
		public const float SemiTonePitchFactor = 1.05946f;

		[Token(Token = "0x4001420")]
		public const float SpatialBlend_2DValue = 0f;

		[Token(Token = "0x4001421")]
		public const float SpatialBlend_3DValue = 1f;

		[Token(Token = "0x4001422")]
		public const float MaxCrossFadeTimeSeconds = 120f;

		[Token(Token = "0x4001423")]
		public const float DefaultDuckVolCut = -6f;

		[Token(Token = "0x4001424")]
		public const int ERROR_MA_LAYER_COLLISIONS_DISABLED = 1;

		[Token(Token = "0x4001425")]
		public const int PHYSICS_DISABLED = 2;

		[Token(Token = "0x4001426")]
		public const string StoredLanguageNameKey = "~MA_Language_Key~";

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly YieldInstruction EndOfFrameDelay;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly List<string> ExemptChildNames;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly HashSet<int> ErrorNumbersLogged;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static List<string> ImportanceChoices;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action NumberOfAudioSourcesChanged;

		[Token(Token = "0x400142C")]
		public const int HardCodedBusOptions = 2;

		[Token(Token = "0x400142D")]
		public const string AllBusesName = "[All]";

		[Token(Token = "0x400142E")]
		public const string NoGroupName = "[None]";

		[Token(Token = "0x400142F")]
		public const string DynamicGroupName = "[Type In]";

		[Token(Token = "0x4001430")]
		public const string NoPlaylistName = "[No Playlist]";

		[Token(Token = "0x4001431")]
		public const string NoVoiceLimitName = "[NO LMT]";

		[Token(Token = "0x4001432")]
		public const string OnlyPlaylistControllerName = "~only~";

		[Token(Token = "0x4001433")]
		public const float InnerLoopCheckInterval = 0.1f;

		[Token(Token = "0x4001434")]
		private const int MaxComponents = 20;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioLocation bulkLocationMode;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string groupTemplateName;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audioSourceTemplateName;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showGroupCreation;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useGroupTemplates;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DragGroupMode curDragGroupMode;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameObject> groupTemplates;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mixerMuted;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool playlistsMuted;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LanguageMode langMode;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SystemLanguage testLanguage;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SystemLanguage defaultLanguage;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SystemLanguage> supportedLanguages;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string busFilter;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string textGroupFilter;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool resourceClipsPauseDoNotUnload;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform playlistControllerPrefab;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool persistBetweenScenes;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool shouldLogDestroys;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool showBusColors;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public bool showGroupImportance;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool areGroupsExpanded;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform soundGroupTemplate;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform soundGroupVariationTemplate;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool groupByBus;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool sortAlpha;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		public bool showRangeSoundGizmos;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
		public bool showSelectedRangeSoundGizmos;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color rangeGizmoColor;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color selectedRangeGizmoColor;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool showAdvancedSettings;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool showLocalization;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool showVideoPlayerSettings;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		public bool useTextPlaylistFilter;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string textPlaylistFilter;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool playListExpanded;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		public bool playlistsExpanded;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public AllMusicSpatialBlendType musicSpatialBlendType;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float musicSpatialBlend;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public AllMixerSpatialBlendType mixerSpatialBlendType;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float mixerSpatialBlend;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public GroupPlayType groupPlayType;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public DefaultGroupPlayType defaultGroupPlayType;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public ItemSpatialBlendType newGroupSpatialType;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float newGroupSpatialBlend;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public List<Playlist> musicPlaylists;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float _masterAudioVolume;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool vrSettingsExpanded;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		public bool useSpatializer;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		public bool useSpatializerPostFX;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10F")]
		public bool addOculusAudioSources;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool addResonanceAudioSources;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		public bool ignoreTimeScale;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
		public bool useGaplessPlaylists;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
		public bool useGaplessAutoReschedule;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public bool saveRuntimeChanges;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
		public bool prioritizeOnDistance;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int rePrioritizeEverySecIndex;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public bool useOcclusion;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float occlusionFreqChangeSeconds;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public OcclusionSelectionType occlusionSelectType;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public int occlusionMaxRayCastsPerFrame;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool occlusionUseLayerMask;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public LayerMask occlusionLayerMask;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool occlusionShowRaycasts;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool occlusionShowCategories;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public RaycastMode occlusionRaycastMode;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool occlusionIncludeStartRaycast2DCollider;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool occlusionRaycastsHitTriggers;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool ambientAdvancedExpanded;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public int ambientMaxRecalcsPerFrame;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool visualAdvancedExpanded;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		public bool logAdvancedExpanded;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
		public bool listenerAdvancedExpanded;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
		public bool listenerFollowerHasRigidBody;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public bool deletePreviewerAudioSourceWhenPlaying;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public VariationFollowerType variationFollowerType;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool showFadingSettings;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15D")]
		public bool stopZeroVolumeGroups;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15E")]
		public bool stopZeroVolumeBuses;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15F")]
		public bool stopZeroVolumePlaylists;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float stopOldestBusFadeTime;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public bool resourceAdvancedExpanded;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
		public bool useClipAgePriority;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x166")]
		public bool logOutOfVoices;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x167")]
		public bool LogSounds;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public bool logCustomEvents;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		public bool disableLogging;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16A")]
		public bool showMusicDucking;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16B")]
		public bool enableMusicDucking;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float defaultRiseVolStart;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public float defaultUnduckTime;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float defaultDuckedVolumeCut;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float crossFadeTime;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float _masterPlaylistVolume;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public bool showGroupSelect;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		public bool hideGroupsWithNoActiveVars;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public JukeBoxDisplayMode jukeBoxDisplayMode;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool logPerfExpanded;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
		public bool willWarm;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x196")]
		public bool mixerSettingsExpanded;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioMixerUpdateMode mixerUpdateMode;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public string newEventName;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool showCustomEvents;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Dictionary<string, DuckGroupInfo> duckingBySoundType;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public int frames;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly PlaySoundResult AndForgetSuccessResult;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly PlaySoundResult failedResultDuringInit;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private readonly Dictionary<string, AudioGroupInfo> AudioSourcesBySoundType;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Dictionary<string, List<int>> _randomizer;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Dictionary<string, List<int>> _randomizerOrigin;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Dictionary<string, List<int>> _randomizerLeftovers;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Dictionary<string, List<int>> _nonRandomChoices;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Dictionary<string, List<int>> _clipsPlayedBySoundTypeOldestFirst;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private readonly List<SoundGroupVariationUpdater> ActiveVariationUpdaters;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly List<SoundGroupVariationUpdater> ActiveUpdatersToRemove;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<ICustomEventReceiver> ValidReceivers;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private readonly List<CustomEventCandidate> ValidReceiverCandidates;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private readonly List<MasterAudioGroup> SoloedGroups;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<AmbientSoundToTriggerInfo> AmbientsToDelayedTrigger;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private readonly Queue<CustomEventToFireInfo> CustomEventsToFire;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private readonly Queue<TransformFollower> TransFollowerColliderPositionRecalcs;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private readonly List<TransformFollower> ProcessedColliderPositionRecalcs;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private readonly List<BusFadeInfo> BusFades;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private readonly List<GroupFadeInfo> GroupFades;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private readonly List<GroupPitchGlideInfo> GroupPitchGlides;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private readonly List<BusPitchGlideInfo> BusPitchGlides;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private readonly List<OcclusionFreqChangeInfo> VariationOcclusionFreqChanges;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private readonly List<AudioSource> AllAudioSources;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private readonly Dictionary<string, Dictionary<ICustomEventReceiver, Transform>> ReceiversByEventName;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private readonly Dictionary<string, PlaylistController> PlaylistControllersByName;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private readonly Dictionary<string, SoundGroupRefillInfo> LastTimeSoundGroupPlayed;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private readonly List<GameObject> OcclusionSourcesInRange;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private readonly List<GameObject> OcclusionSourcesOutOfRange;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private readonly List<GameObject> OcclusionSourcesBlocked;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private readonly Queue<SoundGroupVariationUpdater> QueuedOcclusionRays;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private readonly List<string> AllSoundGroupNames;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private readonly List<string> AllBusNames;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private readonly List<AudioInfo> GroupsToDelete;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private readonly List<SoundGroupVariation> VariationsStartedDuringMultiStop;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private readonly List<PlaylistController> ControllersToPause;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private readonly List<PlaylistController> ControllersToUnpause;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private readonly List<PlaylistController> ControllersToMute;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private readonly List<PlaylistController> ControllersToUnmute;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private readonly List<PlaylistController> ControllersToToggleMute;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private readonly List<PlaylistController> ControllersToStop;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private readonly List<PlaylistController> ControllersToFade;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private readonly List<PlaylistController> ControllersToTrigNext;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private readonly List<PlaylistController> ControllersToTrigRandom;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private readonly List<PlaylistController> ControllersToStart;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private readonly List<AmbientSoundToTriggerInfo> AmbientsToTriggerNow;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private bool _isStoppingMultiple;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private float _repriTime;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private List<string> _groupsToRemove;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private bool _mustRescanGroups;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Transform _trans;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private bool _soundsLoaded;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x359")]
		private bool _warming;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static MasterAudio _instance;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string _prospectiveMAFolder;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Transform _listenerTrans;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoGroupSelector;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoAllGroupSelector;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFF0C", Offset = "0x10BFF0C")]
		private static bool <AppIsShuttingDown>k__BackingField;

		[Token(Token = "0x170004CE")]
		public static float PlaylistMasterVolume
		{
			[Token(Token = "0x6001D09")]
			[Address(RVA = "0x15DDEF0", Offset = "0x15DDEF0", VA = "0x15DDEF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0x15DDF58", Offset = "0x15DDF58", VA = "0x15DDF58")]
			set
			{
			}
		}

		[Token(Token = "0x170004CF")]
		public static bool LogSoundsEnabled
		{
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x15DF750", Offset = "0x15DF750", VA = "0x15DF750")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x15DF7B8", Offset = "0x15DF7B8", VA = "0x15DF7B8")]
			set
			{
			}
		}

		[Token(Token = "0x170004D0")]
		public static bool LogOutOfVoices
		{
			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0x15C6F78", Offset = "0x15C6F78", VA = "0x15C6F78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0x15DF828", Offset = "0x15DF828", VA = "0x15DF828")]
			set
			{
			}
		}

		[Token(Token = "0x170004D1")]
		public static Transform VideoPlayerSoundGroupTransform
		{
			[Token(Token = "0x6001D33")]
			[Address(RVA = "0x15E0FB0", Offset = "0x15E0FB0", VA = "0x15E0FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D2")]
		public static List<AudioSource> MasterAudioSources
		{
			[Token(Token = "0x6001D34")]
			[Address(RVA = "0x15E103C", Offset = "0x15E103C", VA = "0x15E103C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D3")]
		public static Transform ListenerTrans
		{
			[Token(Token = "0x6001D36")]
			[Address(RVA = "0x15C0890", Offset = "0x15C0890", VA = "0x15C0890")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D4")]
		public static PlaylistController OnlyPlaylistController
		{
			[Token(Token = "0x6001D37")]
			[Address(RVA = "0x15E119C", Offset = "0x15E119C", VA = "0x15E119C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D5")]
		public static bool IsWarming
		{
			[Token(Token = "0x6001D38")]
			[Address(RVA = "0x15C689C", Offset = "0x15C689C", VA = "0x15C689C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004D6")]
		public static bool MixerMuted
		{
			[Token(Token = "0x6001D39")]
			[Address(RVA = "0x15E1254", Offset = "0x15E1254", VA = "0x15E1254")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D3A")]
			[Address(RVA = "0x15D60F4", Offset = "0x15D60F4", VA = "0x15D60F4")]
			set
			{
			}
		}

		[Token(Token = "0x170004D7")]
		public static bool PlaylistsMuted
		{
			[Token(Token = "0x6001D3B")]
			[Address(RVA = "0x15E12BC", Offset = "0x15E12BC", VA = "0x15E12BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D3C")]
			[Address(RVA = "0x15DA43C", Offset = "0x15DA43C", VA = "0x15DA43C")]
			set
			{
			}
		}

		[Token(Token = "0x170004D8")]
		public bool EnableMusicDucking
		{
			[Token(Token = "0x6001D3D")]
			[Address(RVA = "0x15E1324", Offset = "0x15E1324", VA = "0x15E1324")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D3E")]
			[Address(RVA = "0x15E132C", Offset = "0x15E132C", VA = "0x15E132C")]
			set
			{
			}
		}

		[Token(Token = "0x170004D9")]
		public float MasterCrossFadeTime
		{
			[Token(Token = "0x6001D3F")]
			[Address(RVA = "0x15E1338", Offset = "0x15E1338", VA = "0x15E1338")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004DA")]
		public static List<Playlist> MusicPlaylists
		{
			[Token(Token = "0x6001D40")]
			[Address(RVA = "0x15D9E28", Offset = "0x15D9E28", VA = "0x15D9E28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DB")]
		public static List<GroupBus> GroupBuses
		{
			[Token(Token = "0x6001D41")]
			[Address(RVA = "0x15D041C", Offset = "0x15D041C", VA = "0x15D041C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DC")]
		public static List<string> RuntimeSoundGroupNames
		{
			[Token(Token = "0x6001D42")]
			[Address(RVA = "0x15CD0B0", Offset = "0x15CD0B0", VA = "0x15CD0B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DD")]
		public static List<string> RuntimeBusNames
		{
			[Token(Token = "0x6001D43")]
			[Address(RVA = "0x15E1340", Offset = "0x15E1340", VA = "0x15E1340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DE")]
		public static MasterAudio SafeInstance
		{
			[Token(Token = "0x6001D44")]
			[Address(RVA = "0x15BD92C", Offset = "0x15BD92C", VA = "0x15BD92C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DF")]
		public static MasterAudio Instance
		{
			[Token(Token = "0x6001D45")]
			[Address(RVA = "0x15BAD60", Offset = "0x15BAD60", VA = "0x15BAD60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D46")]
			[Address(RVA = "0x15E14E8", Offset = "0x15E14E8", VA = "0x15E14E8")]
			set
			{
			}
		}

		[Token(Token = "0x170004E0")]
		public static bool SoundsReady
		{
			[Token(Token = "0x6001D47")]
			[Address(RVA = "0x15C47A8", Offset = "0x15C47A8", VA = "0x15C47A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004E1")]
		public static bool AppIsShuttingDown
		{
			[Token(Token = "0x6001D48")]
			[Address(RVA = "0x15E1550", Offset = "0x15E1550", VA = "0x15E1550")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6B80", Offset = "0x10C6B80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D49")]
			[Address(RVA = "0x15E15B4", Offset = "0x15E15B4", VA = "0x15E15B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6B90", Offset = "0x10C6B90")]
			set
			{
			}
		}

		[Token(Token = "0x170004E2")]
		public List<string> GroupNames
		{
			[Token(Token = "0x6001D4A")]
			[Address(RVA = "0x15E1620", Offset = "0x15E1620", VA = "0x15E1620")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E3")]
		public static List<string> SoundGroupHardCodedNames
		{
			[Token(Token = "0x6001D4B")]
			[Address(RVA = "0x15E19E0", Offset = "0x15E19E0", VA = "0x15E19E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E4")]
		public List<string> BusNames
		{
			[Token(Token = "0x6001D4C")]
			[Address(RVA = "0x15E1AB0", Offset = "0x15E1AB0", VA = "0x15E1AB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E5")]
		public List<string> PlaylistNames
		{
			[Token(Token = "0x6001D4D")]
			[Address(RVA = "0x15E1C00", Offset = "0x15E1C00", VA = "0x15E1C00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E6")]
		public List<string> PlaylistNamesOnly
		{
			[Token(Token = "0x6001D4E")]
			[Address(RVA = "0x15E1D50", Offset = "0x15E1D50", VA = "0x15E1D50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E7")]
		public Transform Trans
		{
			[Token(Token = "0x6001D4F")]
			[Address(RVA = "0x15C0AA4", Offset = "0x15C0AA4", VA = "0x15C0AA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E8")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x6001D50")]
			[Address(RVA = "0x15E1E68", Offset = "0x15E1E68", VA = "0x15E1E68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004E9")]
		public List<string> CustomEventNames
		{
			[Token(Token = "0x6001D51")]
			[Address(RVA = "0x15E1E70", Offset = "0x15E1E70", VA = "0x15E1E70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004EA")]
		public List<string> CustomEventNamesOnly
		{
			[Token(Token = "0x6001D52")]
			[Address(RVA = "0x15E2040", Offset = "0x15E2040", VA = "0x15E2040")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004EB")]
		public static List<string> CustomEventHardCodedNames
		{
			[Token(Token = "0x6001D53")]
			[Address(RVA = "0x15E1F70", Offset = "0x15E1F70", VA = "0x15E1F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004EC")]
		public static float MasterVolumeLevel
		{
			[Token(Token = "0x6001D54")]
			[Address(RVA = "0x15E2188", Offset = "0x15E2188", VA = "0x15E2188")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D55")]
			[Address(RVA = "0x15E21F0", Offset = "0x15E21F0", VA = "0x15E21F0")]
			set
			{
			}
		}

		[Token(Token = "0x170004ED")]
		private static bool SceneHasMasterAudio
		{
			[Token(Token = "0x6001D56")]
			[Address(RVA = "0x15C470C", Offset = "0x15C470C", VA = "0x15C470C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004EE")]
		public static bool IgnoreTimeScale
		{
			[Token(Token = "0x6001D57")]
			[Address(RVA = "0x15E235C", Offset = "0x15E235C", VA = "0x15E235C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004EF")]
		public static SystemLanguage DynamicLanguage
		{
			[Token(Token = "0x6001D58")]
			[Address(RVA = "0x15E23C4", Offset = "0x15E23C4", VA = "0x15E23C4")]
			get
			{
				return default(SystemLanguage);
			}
			[Token(Token = "0x6001D59")]
			[Address(RVA = "0x15E2574", Offset = "0x15E2574", VA = "0x15E2574")]
			set
			{
			}
		}

		[Token(Token = "0x170004F0")]
		public static float ReprioritizeTime
		{
			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0x15E2650", Offset = "0x15E2650", VA = "0x15E2650")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004F1")]
		public static bool ShouldRescanGroups
		{
			[Token(Token = "0x6001D5D")]
			[Address(RVA = "0x15E2794", Offset = "0x15E2794", VA = "0x15E2794")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004F2")]
		public static string ProspectiveMAPath
		{
			[Token(Token = "0x6001D5E")]
			[Address(RVA = "0x15E2870", Offset = "0x15E2870", VA = "0x15E2870")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D5F")]
			[Address(RVA = "0x15E28D4", Offset = "0x15E28D4", VA = "0x15E28D4")]
			set
			{
			}
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x15BEACC", Offset = "0x15BEACC", VA = "0x15BEACC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x15C1374", Offset = "0x15C1374", VA = "0x15C1374")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x15C151C", Offset = "0x15C151C", VA = "0x15C151C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x15C15D4", Offset = "0x15C15D4", VA = "0x15C15D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x15C18C0", Offset = "0x15C18C0", VA = "0x15C18C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x15C2C7C", Offset = "0x15C2C7C", VA = "0x15C2C7C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x15C2D24", Offset = "0x15C2D24", VA = "0x15C2D24")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x15C2C8C", Offset = "0x15C2C8C", VA = "0x15C2C8C")]
		private void ManualUpdate()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x15C0E4C", Offset = "0x15C0E4C", VA = "0x15C0E4C")]
		public string SoundGroupForWarming()
		{
			return null;
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x15C3264", Offset = "0x15C3264", VA = "0x15C3264")]
		public static void RegisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x15C3348", Offset = "0x15C3348", VA = "0x15C3348")]
		public static void UnregisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x15C30A4", Offset = "0x15C30A4", VA = "0x15C30A4")]
		private void UpdateActiveVariations()
		{
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x15C33D4", Offset = "0x15C33D4", VA = "0x15C33D4")]
		private static void UpdateRefillTime(string sType, float inactivePeriodSeconds)
		{
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x15C2D38", Offset = "0x15C2D38", VA = "0x15C2D38")]
		private static void RecalcClosestColliderPositions()
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x15C2B9C", Offset = "0x15C2B9C", VA = "0x15C2B9C")]
		private static void FireCustomEventsWaiting()
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x15C286C", Offset = "0x15C286C", VA = "0x15C286C")]
		private static void RefillInactiveGroupPools()
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x15C1954", Offset = "0x15C1954", VA = "0x15C1954")]
		private static void PerformOcclusionFrequencyChanges()
		{
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x15C1BB4", Offset = "0x15C1BB4", VA = "0x15C1BB4")]
		private void PerformBusFades()
		{
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x15C1F58", Offset = "0x15C1F58", VA = "0x15C1F58")]
		private void PerformGroupFades()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x15C2448", Offset = "0x15C2448", VA = "0x15C2448")]
		public static void PerformDelayedAmbientTriggers()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x15C2234", Offset = "0x15C2234", VA = "0x15C2234")]
		private void PerformGroupPitchGlides()
		{
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x15C1E30", Offset = "0x15C1E30", VA = "0x15C1E30")]
		private void PerformBusPitchGlides()
		{
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x15C4490", Offset = "0x15C4490", VA = "0x15C4490")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x15C4530", Offset = "0x15C4530", VA = "0x15C4530")]
		public static bool PlaySoundAndForget(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x15C55C8", Offset = "0x15C55C8", VA = "0x15C55C8")]
		public static PlaySoundResult PlaySound(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x15C57D4", Offset = "0x15C57D4", VA = "0x15C57D4")]
		public static bool PlaySound3DAtVector3AndForget(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x15C5998", Offset = "0x15C5998", VA = "0x15C5998")]
		public static PlaySoundResult PlaySound3DAtVector3(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return null;
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x15C5B84", Offset = "0x15C5B84", VA = "0x15C5B84")]
		public static bool PlaySound3DAtTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x15C5D64", Offset = "0x15C5D64", VA = "0x15C5D64")]
		public static PlaySoundResult PlaySound3DAtTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x15C5F7C", Offset = "0x15C5F7C", VA = "0x15C5F7C")]
		public static bool PlaySound3DFollowTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x15C1010", Offset = "0x15C1010", VA = "0x15C1010")]
		public static PlaySoundResult PlaySound3DFollowTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x15C615C", Offset = "0x15C615C", VA = "0x15C615C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6A60", Offset = "0x10C6A60")]
		public static IEnumerator PlaySoundAndWaitUntilFinished(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x15C622C", Offset = "0x15C622C", VA = "0x15C622C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6AC0", Offset = "0x10C6AC0")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x15C6324", Offset = "0x15C6324", VA = "0x15C6324")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6B20", Offset = "0x10C6B20")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x15C55A4", Offset = "0x15C55A4", VA = "0x15C55A4")]
		public static bool PSRAsSuccessBool(PlaySoundResult psr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x15C4884", Offset = "0x15C4884", VA = "0x15C4884")]
		private static PlaySoundResult PlaySoundAtVolume(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, [Optional] float? pitch, [Optional] Transform sourceTrans, [Optional] string variationName, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, bool isChaining = false, bool isSingleSubscribedPlay = false, bool triggeredAsChildGroup = false)
		{
			return null;
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x15C8B7C", Offset = "0x15C8B7C", VA = "0x15C8B7C")]
		private static PlaySoundResult TryPlayVariationOrOtherMatches(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, float? pitch, Transform sourceTrans, bool attachToSource, float delaySoundTime, bool useVector3, bool makePlaySoundResult, bool isChaining, bool isSingleSubscribedPlay, AudioInfo randomSource, SoundGroupVariation busVoiceToStop, GroupBus groupBus, bool canUseBusVoiceToStop, bool forgetSoundPlayedOrScheduled, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop, List<int> otherChoices, bool hasRefilledPool, List<AudioInfo> sources, out bool soundSuccess)
		{
			return null;
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x15C8744", Offset = "0x15C8744", VA = "0x15C8744")]
		private static bool CanPlayDialogBasedOnImportanceOrIsNotDialog(string sType, AudioGroupInfo group, bool loggingEnabledForGrp, AudioInfo randomSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x15C7644", Offset = "0x15C7644", VA = "0x15C7644")]
		private static AudioInfo UseOnlyVariationIfOnlyOne(string sType, List<AudioInfo> sources, bool loggingEnabledForGrp, AudioInfo randomSource, MasterAudioGroup maGroup, ref bool isSingleVarLoop)
		{
			return null;
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x15C8474", Offset = "0x15C8474", VA = "0x15C8474")]
		private static bool IsActorTooFarAwayToPlay(string sType, Transform sourceTrans, AudioGroupInfo group, AudioInfo randomSource, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x15C82F4", Offset = "0x15C82F4", VA = "0x15C82F4")]
		private static bool VariationPassesProbabilityToPlayCheck(string sType, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource, bool isChaining, AudioInfo randomSource, bool loggingEnabledForGrp, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x15C80FC", Offset = "0x15C80FC", VA = "0x15C80FC")]
		private static bool IsNoClipSilentPlay(string sType, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource, bool isChaining, AudioInfo randomSource, bool loggingEnabledForGrp, AudioGroupInfo group, bool isNonSpecific, int? randomIndex, List<int> choices, int pickedChoice)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x15C7F50", Offset = "0x15C7F50", VA = "0x15C7F50")]
		private static bool VariationIsUsable(AudioInfo randomSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x15C776C", Offset = "0x15C776C", VA = "0x15C776C")]
		private static bool CanFindVariationToPlay(string sType, string variationName, bool isNonSpecific, bool canUseBusVoiceToStop, List<AudioInfo> sources, bool loggingEnabledForGrp, SoundGroupVariation busVoiceToStop, ref AudioInfo randomSource, ref List<int> choices, ref int? randomIndex, ref int pickedChoice, ref List<int> otherChoices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x15C723C", Offset = "0x15C723C", VA = "0x15C723C")]
		private static SoundGroupVariation FindBusVoiceToStop(GroupBus groupBus, MasterAudioGroup group)
		{
			return null;
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x15C7124", Offset = "0x15C7124", VA = "0x15C7124")]
		private static bool CanStopLimitedBusVoice(GroupBus groupBus, bool loggingEnabledForGrp, AudioGroupInfo group)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x15C70F8", Offset = "0x15C70F8", VA = "0x15C70F8")]
		private static bool IsBusVoiceLimited(GroupBus groupBus)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x15C6D70", Offset = "0x15C6D70", VA = "0x15C6D70")]
		private static AudioInfo FindRetriggerableVariationInGroup(string variationName, bool isNonSpecific, List<AudioInfo> sources, MasterAudioGroup maGroup)
		{
			return null;
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x15C6D0C", Offset = "0x15C6D0C", VA = "0x15C6D0C")]
		private static bool IsGroupPolyphonyLimited(MasterAudioGroup maGroup, AudioGroupInfo group)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x15C6B90", Offset = "0x15C6B90", VA = "0x15C6B90")]
		private static bool IsReplayLimited(string sType, MasterAudioGroup maGroup, AudioGroupInfo group, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x15C6978", Offset = "0x15C6978", VA = "0x15C6978")]
		private static void LogIfSilentPlay(string sType, bool loggingEnabledForGrp, MasterAudioGroup maGroup)
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x15C67B8", Offset = "0x15C67B8", VA = "0x15C67B8")]
		private static bool SoundGroupHasVariations(string sType, List<AudioInfo> sources, bool loggingEnabledForGrp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x15C641C", Offset = "0x15C641C", VA = "0x15C641C")]
		private static bool IsSoundGroupValidAndReady(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x15C9D78", Offset = "0x15C9D78", VA = "0x15C9D78")]
		private static void MaybeChainNextVar(bool isChaining, SoundGroupVariation variation, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource)
		{
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0x15C914C", Offset = "0x15C914C", VA = "0x15C914C")]
		private static void SetLastPlayed(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0x15C9898", Offset = "0x15C9898", VA = "0x15C9898")]
		private static void RemoveClipAndRefillIfEmpty(AudioGroupInfo grp, bool isNonSpecific, int? randomIndex, List<int> choices, string sType, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop)
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x15C9188", Offset = "0x15C9188", VA = "0x15C9188")]
		private static PlaySoundResult PlaySoundIfAvailable(AudioInfo info, Vector3 sourcePosition, float volumePercentage, SoundGroupVariation busVoiceToStop, GroupBus groupBus, bool canUseBusVoiceToStop, ref bool forgetSoundPlayed, [Optional] float? pitch, [Optional] AudioGroupInfo audioGroup, [Optional] Transform sourceTrans, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x15CA8A0", Offset = "0x15CA8A0", VA = "0x15CA8A0")]
		private static void FadeOldestOrFarthestBusVoice(SoundGroupVariation busVoiceToStop, GroupBus groupBus)
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x15CA98C", Offset = "0x15CA98C", VA = "0x15CA98C")]
		public static void EndDucking(SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x15CAA3C", Offset = "0x15CAA3C", VA = "0x15CAA3C")]
		public static void DuckSoundGroup(string soundGroupName, AudioSource aSource, SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x15CAC34", Offset = "0x15CAC34", VA = "0x15CAC34")]
		private static void StopPauseOrUnpauseSoundsOfTransform(Transform trans, List<AudioInfo> varList, VariationCommand varCmd)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x15CB0D4", Offset = "0x15CB0D4", VA = "0x15CB0D4")]
		public static void StopAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x15CB36C", Offset = "0x15CB36C", VA = "0x15CB36C")]
		public static void StopSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x15CB55C", Offset = "0x15CB55C", VA = "0x15CB55C")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x15CB794", Offset = "0x15CB794", VA = "0x15CB794")]
		public static void PauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x15CB984", Offset = "0x15CB984", VA = "0x15CB984")]
		public static void UnpauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x15CBBBC", Offset = "0x15CBBBC", VA = "0x15CBBBC")]
		public static void UnpauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x15CBDAC", Offset = "0x15CBDAC", VA = "0x15CBDAC")]
		public static void FadeOutAllSoundsOfTransform(Transform sourceTrans, float fadeTime)
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x15CC30C", Offset = "0x15CC30C", VA = "0x15CC30C")]
		public static void FadeOutSoundGroupOfTransform(Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x15CC580", Offset = "0x15CC580", VA = "0x15CC580")]
		public static void FadeSoundGroupOfTransformToVolume(Transform sourceTrans, string sType, float fadeTime, float targetVolume)
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x15C3F54", Offset = "0x15C3F54", VA = "0x15C3F54")]
		public static void StopAllOfSound(string sType)
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x15C9AF0", Offset = "0x15C9AF0", VA = "0x15C9AF0")]
		public static void FadeOutAllOfSound(string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x15CC7C8", Offset = "0x15CC7C8", VA = "0x15CC7C8")]
		public static List<SoundGroupVariation> GetAllPlayingVariations()
		{
			return null;
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x15CBFC8", Offset = "0x15CBFC8", VA = "0x15CBFC8")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x15CCA9C", Offset = "0x15CCA9C", VA = "0x15CCA9C")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransformList(List<Transform> sourceTransList)
		{
			return null;
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x15CCE58", Offset = "0x15CCE58", VA = "0x15CCE58")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsInBus(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x15CD118", Offset = "0x15CD118", VA = "0x15CD118")]
		public static void DeleteGroupVariation(string sType, string variationName)
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x15CE034", Offset = "0x15CE034", VA = "0x15CE034")]
		public static void CreateGroupVariationFromClip(string sType, AudioClip clip, string variationName, float volume = 1f, float pitch = 1f)
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x15CE6FC", Offset = "0x15CE6FC", VA = "0x15CE6FC")]
		public static void ChangeVariationPitch(string sType, bool changeAllVariations, string variationName, float pitch)
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x15CEAB4", Offset = "0x15CEAB4", VA = "0x15CEAB4")]
		public static void ChangeVariationVolume(string sType, bool changeAllVariations, string variationName, float volume)
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x15CEDF8", Offset = "0x15CEDF8", VA = "0x15CEDF8")]
		public static void ChangeVariationClipFromResources(string sType, bool changeAllVariations, string variationName, string resourceFileName)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x15CEFEC", Offset = "0x15CEFEC", VA = "0x15CEFEC")]
		public static void ChangeVariationClip(string sType, bool changeAllVariations, string variationName, AudioClip clip)
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x15CF2B4", Offset = "0x15CF2B4", VA = "0x15CF2B4")]
		public static void GradualOcclusionFreqChange(SoundGroupVariation variation, float fadeTime, float newCutoffFreq)
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x15CF680", Offset = "0x15CF680", VA = "0x15CF680")]
		public static AudioSource GetNextVariationForSoundGroup(string sType)
		{
			return null;
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x15CF9D8", Offset = "0x15CF9D8", VA = "0x15CF9D8")]
		public static bool IsSoundGroupPlaying(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x15CFB14", Offset = "0x15CFB14", VA = "0x15CFB14")]
		public static bool IsTransformPlayingSoundGroup(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x15CFD24", Offset = "0x15CFD24", VA = "0x15CFD24")]
		public static void RouteGroupToBus(string sType, string busName)
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x15D0958", Offset = "0x15D0958", VA = "0x15D0958")]
		public static float GetVariationLength(string sType, string variationName)
		{
			return default(float);
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x15C3574", Offset = "0x15C3574", VA = "0x15C3574")]
		public static void RefillSoundGroupPool(string sType)
		{
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x15D1154", Offset = "0x15D1154", VA = "0x15D1154")]
		public static bool SoundGroupExists(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x15D11FC", Offset = "0x15D11FC", VA = "0x15D11FC")]
		public static void PauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x15D13A8", Offset = "0x15D13A8", VA = "0x15D13A8")]
		public static void SetGroupSpatialBlend(string sType)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x15D1520", Offset = "0x15D1520", VA = "0x15D1520")]
		public static void RouteGroupToUnityMixerGroup(string sType, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x15D16B8", Offset = "0x15D16B8", VA = "0x15D16B8")]
		public static void UnpauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x15D1864", Offset = "0x15D1864", VA = "0x15D1864")]
		public static void FadeSoundGroupToVolume(string sType, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x15D1CF4", Offset = "0x15D1CF4", VA = "0x15D1CF4")]
		public static void FadeOutOldSoundGroupVoices(string sType, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x15D1ED4", Offset = "0x15D1ED4", VA = "0x15D1ED4")]
		public static void StopOldSoundGroupVoices(string sType, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x15D2094", Offset = "0x15D2094", VA = "0x15D2094")]
		public static void GlideSoundGroupByPitch(string sType, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x15D26E0", Offset = "0x15D26E0", VA = "0x15D26E0")]
		public static void DeleteSoundGroup(string sType)
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x15D2DA4", Offset = "0x15D2DA4", VA = "0x15D2DA4")]
		public static Transform CreateSoundGroup(DynamicSoundGroup aGroup, int? creatorInstanceId, bool errorOnExisting = true)
		{
			return null;
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x15D4084", Offset = "0x15D4084", VA = "0x15D4084")]
		public static float GetGroupVolume(string sType)
		{
			return default(float);
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x15C3C68", Offset = "0x15C3C68", VA = "0x15C3C68")]
		public static void SetGroupVolume(string sType, float volumeLevel)
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x15C1228", Offset = "0x15C1228", VA = "0x15C1228")]
		public static void MuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x15D4268", Offset = "0x15D4268", VA = "0x15D4268")]
		public static void UnmuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x15C0B58", Offset = "0x15C0B58", VA = "0x15C0B58")]
		private static void AddRuntimeGroupInfo(string groupName, AudioGroupInfo groupInfo)
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x15D4500", Offset = "0x15D4500", VA = "0x15D4500")]
		private static void FireAudioSourcesNumberChangedEvent()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x15D4378", Offset = "0x15D4378", VA = "0x15D4378")]
		public static void TrackRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x15C1678", Offset = "0x15C1678", VA = "0x15C1678")]
		public static void StopTrackingRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x15D2AF8", Offset = "0x15D2AF8", VA = "0x15D2AF8")]
		private static void RemoveRuntimeGroupInfo(string groupName)
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x15D45A4", Offset = "0x15D45A4", VA = "0x15D45A4")]
		private static void RescanChildren(MasterAudioGroup group)
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x15D4144", Offset = "0x15D4144", VA = "0x15D4144")]
		private static void SetGroupMuteStatus(MasterAudioGroup aGroup, string sType, bool isMute)
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x15D052C", Offset = "0x15D052C", VA = "0x15D052C")]
		public static void SoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x15D08A0", Offset = "0x15D08A0", VA = "0x15D08A0")]
		public static void SilenceOrUnsilenceGroupsFromSoloChange()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x15D48E4", Offset = "0x15D48E4", VA = "0x15D48E4")]
		private static void UnsilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x15D4A38", Offset = "0x15D4A38", VA = "0x15D4A38")]
		private static void UnsilenceGroup(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x15D4788", Offset = "0x15D4788", VA = "0x15D4788")]
		private static void SilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x15D4AE8", Offset = "0x15D4AE8", VA = "0x15D4AE8")]
		private static void SilenceGroup(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x15D4B98", Offset = "0x15D4B98", VA = "0x15D4B98")]
		public static void UnsoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x15CAE2C", Offset = "0x15CAE2C", VA = "0x15CAE2C")]
		public static MasterAudioGroup GrabGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x15D4CD4", Offset = "0x15D4CD4", VA = "0x15D4CD4")]
		public static int VoicesForGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x15D4DD4", Offset = "0x15D4DD4", VA = "0x15D4DD4")]
		public static Transform FindGroupTransform(string sType)
		{
			return null;
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x15D4FEC", Offset = "0x15D4FEC", VA = "0x15D4FEC")]
		public static List<AudioInfo> GetAllVariationsOfGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x15D5164", Offset = "0x15D5164", VA = "0x15D5164")]
		public static AudioGroupInfo GetGroupInfo(string sType)
		{
			return null;
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x15D5248", Offset = "0x15D5248", VA = "0x15D5248")]
		public static void SubscribeToLastVariationPlayed(string sType, Action finishedCallback)
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x15D53CC", Offset = "0x15D53CC", VA = "0x15D53CC")]
		public static void UnsubscribeFromLastVariationPlayed(string sType)
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x15D54C4", Offset = "0x15D54C4", VA = "0x15D54C4")]
		public void SetSpatialBlendForMixer()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x15D5604", Offset = "0x15D5604", VA = "0x15D5604")]
		public static void PauseMixer()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x15D57DC", Offset = "0x15D57DC", VA = "0x15D57DC")]
		public static void UnpauseMixer()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x15D59B4", Offset = "0x15D59B4", VA = "0x15D59B4")]
		public static void StopMixer()
		{
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x15D5BEC", Offset = "0x15D5BEC", VA = "0x15D5BEC")]
		public static void UnsubscribeFromAllVariations()
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x15D5E3C", Offset = "0x15D5E3C", VA = "0x15D5E3C")]
		public static void StopEverything()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x15D5F04", Offset = "0x15D5F04", VA = "0x15D5F04")]
		public static void PauseEverything()
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x15D5FCC", Offset = "0x15D5FCC", VA = "0x15D5FCC")]
		public static void UnpauseEverything()
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x15D6094", Offset = "0x15D6094", VA = "0x15D6094")]
		public static void MuteEverything()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x15D6518", Offset = "0x15D6518", VA = "0x15D6518")]
		public static void UnmuteEverything()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x15D65E4", Offset = "0x15D65E4", VA = "0x15D65E4")]
		public static List<string> ListOfAudioClipsInGroupsEditTime()
		{
			return null;
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x15C42F4", Offset = "0x15C42F4", VA = "0x15C42F4")]
		private static int GetBusIndex(string busName, bool alertMissing)
		{
			return default(int);
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x15D0484", Offset = "0x15D0484", VA = "0x15D0484")]
		private static GroupBus GetBusByIndex(int busIndex)
		{
			return null;
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x15D68D8", Offset = "0x15D68D8", VA = "0x15D68D8")]
		public static void ChangeBusPitch(string busName, float pitch)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x15D6AA8", Offset = "0x15D6AA8", VA = "0x15D6AA8")]
		public static void MuteBus(string busName)
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x15D6FC0", Offset = "0x15D6FC0", VA = "0x15D6FC0")]
		public static void UnmuteBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x15D71B0", Offset = "0x15D71B0", VA = "0x15D71B0")]
		public static void ToggleMuteBus(string busName)
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x15D729C", Offset = "0x15D729C", VA = "0x15D729C")]
		public static void PauseBus(string busName)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x15D744C", Offset = "0x15D744C", VA = "0x15D744C")]
		public static void SoloBus(string busName)
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x15D6DD0", Offset = "0x15D6DD0", VA = "0x15D6DD0")]
		public static void UnsoloBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x15D7670", Offset = "0x15D7670", VA = "0x15D7670")]
		public static void RouteBusToUnityMixerGroup(string busName, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x15CA384", Offset = "0x15CA384", VA = "0x15CA384")]
		private static SoundGroupVariation FindLeastImportantSoundOnBus(GroupBus bus, MasterAudioGroup group)
		{
			return null;
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x15CA040", Offset = "0x15CA040", VA = "0x15CA040")]
		private static SoundGroupVariation FindFarthestSoundOnBus(GroupBus bus)
		{
			return null;
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x15C9DAC", Offset = "0x15C9DAC", VA = "0x15C9DAC")]
		private static SoundGroupVariation FindOldestSoundOnBus(GroupBus bus)
		{
			return null;
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x15C3A3C", Offset = "0x15C3A3C", VA = "0x15C3A3C")]
		public static void StopBus(string busName)
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x15D7814", Offset = "0x15D7814", VA = "0x15D7814")]
		public static void UnpauseBus(string busName)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x15D79A4", Offset = "0x15D79A4", VA = "0x15D79A4")]
		public static bool CreateBus(string busName, int? actorInstanceId, bool errorOnExisting = true, bool isTemporary = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x15D7CEC", Offset = "0x15D7CEC", VA = "0x15D7CEC")]
		public static void DeleteBusByName(string busName)
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x15D7D88", Offset = "0x15D7D88", VA = "0x15D7D88")]
		public static void DeleteBusByIndex(int busIndex)
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x15CA7E0", Offset = "0x15CA7E0", VA = "0x15CA7E0")]
		public static float GetBusVolume(MasterAudioGroup maGroup)
		{
			return default(float);
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x15D827C", Offset = "0x15D827C", VA = "0x15D827C")]
		public static void FadeBusToVolume(string busName, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x15D8734", Offset = "0x15D8734", VA = "0x15D8734")]
		public static void FadeOutOldBusVoices(string busName, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x15D8998", Offset = "0x15D8998", VA = "0x15D8998")]
		public static void StopOldBusVoices(string busName, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x15D8BDC", Offset = "0x15D8BDC", VA = "0x15D8BDC")]
		public static void GlideBusByPitch(string busName, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x15C0D20", Offset = "0x15C0D20", VA = "0x15C0D20")]
		public static void SetBusVolumeByName(string busName, float newVolume)
		{
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x15D80C0", Offset = "0x15D80C0", VA = "0x15D80C0")]
		private static void RecalculateGroupVolumes(AudioGroupInfo aGroup, GroupBus bus)
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x15D06C8", Offset = "0x15D06C8", VA = "0x15D06C8")]
		private static void SetBusVolume(GroupBus bus, float newVolume)
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x15D6CCC", Offset = "0x15D6CCC", VA = "0x15D6CCC")]
		public static GroupBus GrabBusByName(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x15D9370", Offset = "0x15D9370", VA = "0x15D9370")]
		public static void PauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x15D9568", Offset = "0x15D9568", VA = "0x15D9568")]
		public static void UnpauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x15D9760", Offset = "0x15D9760", VA = "0x15D9760")]
		public static void StopBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x15D99CC", Offset = "0x15D99CC", VA = "0x15D99CC")]
		public static void AddSoundGroupToDuckList(string sType, float riseVolumeStart, float duckedVolCut, float unduckTime, bool isTemporary = false)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x15D9B50", Offset = "0x15D9B50", VA = "0x15D9B50")]
		public static void RemoveSoundGroupFromDuckList(string sType)
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x15D9C6C", Offset = "0x15D9C6C", VA = "0x15D9C6C")]
		public static Playlist GrabPlaylist(string playlistName, bool logErrorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x15D9E90", Offset = "0x15D9E90", VA = "0x15D9E90")]
		public static void ChangePlaylistPitch(string playlistName, float pitch, [Optional] string songName)
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x15D9FC0", Offset = "0x15D9FC0", VA = "0x15D9FC0")]
		public static void MutePlaylist()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x15DA030", Offset = "0x15DA030", VA = "0x15DA030")]
		public static void MutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x15D64AC", Offset = "0x15D64AC", VA = "0x15D64AC")]
		public static void MuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x15DA354", Offset = "0x15DA354", VA = "0x15DA354")]
		private static void MutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x15DA530", Offset = "0x15DA530", VA = "0x15DA530")]
		public static void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x15DA5A0", Offset = "0x15DA5A0", VA = "0x15DA5A0")]
		public static void UnmutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x15D6578", Offset = "0x15D6578", VA = "0x15D6578")]
		public static void UnmuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x15DA7E0", Offset = "0x15DA7E0", VA = "0x15DA7E0")]
		private static void UnmutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0x15DA8C8", Offset = "0x15DA8C8", VA = "0x15DA8C8")]
		public static void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x15DA938", Offset = "0x15DA938", VA = "0x15DA938")]
		public static void ToggleMutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x15DAC10", Offset = "0x15DAC10", VA = "0x15DAC10")]
		public static void ToggleMuteAllPlaylists()
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x15DAB78", Offset = "0x15DAB78", VA = "0x15DAB78")]
		private static void ToggleMutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x15DAC7C", Offset = "0x15DAC7C", VA = "0x15DAC7C")]
		public static void PausePlaylist()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0x15DACEC", Offset = "0x15DACEC", VA = "0x15DACEC")]
		public static void PausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x15D5F60", Offset = "0x15D5F60", VA = "0x15D5F60")]
		public static void PauseAllPlaylists()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x15DAF2C", Offset = "0x15DAF2C", VA = "0x15DAF2C")]
		private static void PausePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0x15DAFC4", Offset = "0x15DAFC4", VA = "0x15DAFC4")]
		public static void UnpausePlaylist()
		{
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x15DB034", Offset = "0x15DB034", VA = "0x15DB034")]
		public static void UnpausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x15D6028", Offset = "0x15D6028", VA = "0x15D6028")]
		public static void UnpauseAllPlaylists()
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0x15DB274", Offset = "0x15DB274", VA = "0x15DB274")]
		private static void UnpausePlaylists(List<PlaylistController> controllers)
		{
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x15DB30C", Offset = "0x15DB30C", VA = "0x15DB30C")]
		public static void StopPlaylist()
		{
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x15DB37C", Offset = "0x15DB37C", VA = "0x15DB37C")]
		public static void StopPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x15D5E98", Offset = "0x15D5E98", VA = "0x15D5E98")]
		public static void StopAllPlaylists()
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x15DB5BC", Offset = "0x15DB5BC", VA = "0x15DB5BC")]
		private static void StopPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x15DB658", Offset = "0x15DB658", VA = "0x15DB658")]
		public static void TriggerNextPlaylistClip()
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x15DB6C8", Offset = "0x15DB6C8", VA = "0x15DB6C8")]
		public static void TriggerNextPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x15DB9A0", Offset = "0x15DB9A0", VA = "0x15DB9A0")]
		public static void TriggerNextClipAllPlaylists()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x15DB908", Offset = "0x15DB908", VA = "0x15DB908")]
		private static void NextPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x15DBA0C", Offset = "0x15DBA0C", VA = "0x15DBA0C")]
		public static void TriggerRandomPlaylistClip()
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x15DBA7C", Offset = "0x15DBA7C", VA = "0x15DBA7C")]
		public static void TriggerRandomPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x15DBD54", Offset = "0x15DBD54", VA = "0x15DBD54")]
		public static void TriggerRandomClipAllPlaylists()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x15DBCBC", Offset = "0x15DBCBC", VA = "0x15DBCBC")]
		private static void RandomPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x15DBDC0", Offset = "0x15DBDC0", VA = "0x15DBDC0")]
		public static void RestartPlaylist()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x15DBE30", Offset = "0x15DBE30", VA = "0x15DBE30")]
		public static void RestartPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x15DC0D0", Offset = "0x15DC0D0", VA = "0x15DC0D0")]
		public static void RestartAllPlaylists()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x15DC034", Offset = "0x15DC034", VA = "0x15DC034")]
		private static void RestartPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x15DC13C", Offset = "0x15DC13C", VA = "0x15DC13C")]
		public static void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x15DC47C", Offset = "0x15DC47C", VA = "0x15DC47C")]
		public static void StartPlaylistOnClip(string playlistName, string clipName)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x15DC1B8", Offset = "0x15DC1B8", VA = "0x15DC1B8")]
		public static void StartPlaylist(string playlistControllerName, string playlistName, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x15DC504", Offset = "0x15DC504", VA = "0x15DC504")]
		public static void StopLoopingAllCurrentSongs()
		{
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x15DC608", Offset = "0x15DC608", VA = "0x15DC608")]
		public static void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x15DC678", Offset = "0x15DC678", VA = "0x15DC678")]
		public static void StopLoopingCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x15DC570", Offset = "0x15DC570", VA = "0x15DC570")]
		private static void StopLoopingCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x15DC87C", Offset = "0x15DC87C", VA = "0x15DC87C")]
		public static void StopAllPlaylistsAfterCurrentSongs()
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x15DC980", Offset = "0x15DC980", VA = "0x15DC980")]
		public static void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x15DC9F0", Offset = "0x15DC9F0", VA = "0x15DC9F0")]
		public static void StopPlaylistAfterCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x15DC8E8", Offset = "0x15DC8E8", VA = "0x15DC8E8")]
		private static void StopPlaylistAfterCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x15DCBF4", Offset = "0x15DCBF4", VA = "0x15DCBF4")]
		public static void QueuePlaylistClip(string clipName)
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x15DCC6C", Offset = "0x15DCC6C", VA = "0x15DCC6C")]
		public static void QueuePlaylistClip(string playlistControllerName, string clipName)
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x15DCE0C", Offset = "0x15DCE0C", VA = "0x15DCE0C")]
		public static bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x15DCE84", Offset = "0x15DCE84", VA = "0x15DCE84")]
		public static bool TriggerPlaylistClip(string playlistControllerName, string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x15DD024", Offset = "0x15DD024", VA = "0x15DD024")]
		public static void ChangePlaylistByName(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x15DD0AC", Offset = "0x15DD0AC", VA = "0x15DD0AC")]
		public static void ChangePlaylistByName(string playlistControllerName, string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x15DD254", Offset = "0x15DD254", VA = "0x15DD254")]
		public static void FadePlaylistToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x15DD2DC", Offset = "0x15DD2DC", VA = "0x15DD2DC")]
		public static void FadePlaylistToVolume(string playlistControllerName, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0x15DD69C", Offset = "0x15DD69C", VA = "0x15DD69C")]
		public static void FadeAllPlaylistsToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x15DD538", Offset = "0x15DD538", VA = "0x15DD538")]
		private static void FadePlaylists(List<PlaylistController> playlists, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0x15DD720", Offset = "0x15DD720", VA = "0x15DD720")]
		public static void CreatePlaylist(Playlist playlist, bool errorOnDuplicate)
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0x15DD87C", Offset = "0x15DD87C", VA = "0x15DD87C")]
		public static void DeletePlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x15DDA5C", Offset = "0x15DDA5C", VA = "0x15DDA5C")]
		public static void AddSongToPlaylist(string playlistName, AudioClip song, bool loopSong = false, float songPitch = 1f, float songVolume = 1f, [Optional] string alias)
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x15DDB54", Offset = "0x15DDB54", VA = "0x15DDB54")]
		public static void AddSongToPlaylist(string playlistName, MusicSetting newSong)
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0x15DE03C", Offset = "0x15DE03C", VA = "0x15DE03C")]
		public static void AudioListenerChanged(AudioListener listener)
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x15DE190", Offset = "0x15DE190", VA = "0x15DE190")]
		public static void FireCustomEventNextFrame(string customEventName, Transform eventOrigin)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x15BDE90", Offset = "0x15BDE90", VA = "0x15BDE90")]
		public static void AddCustomEventReceiver(ICustomEventReceiver receiver, Transform receiverTrans)
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x15BE324", Offset = "0x15BE324", VA = "0x15BE324")]
		public static void RemoveCustomEventReceiver(ICustomEventReceiver receiver)
		{
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x15DE3EC", Offset = "0x15DE3EC", VA = "0x15DE3EC")]
		public static List<Transform> ReceiversForEvent(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x15DE704", Offset = "0x15DE704", VA = "0x15DE704")]
		public static CustomEventCategory CreateCustomEventCategoryIfNotThere(string categoryName, int? actorInstanceId, bool errorOnDuplicates, bool isTemporary)
		{
			return null;
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0x15DEA40", Offset = "0x15DEA40", VA = "0x15DEA40")]
		public static void CreateCustomEvent(string customEventName, CustomEventReceiveMode eventReceiveMode, float distanceThreshold, EventReceiveFilter receiveFilter, int filterModeQty, int? actorInstanceId, string categoryName = "", bool isTemporary = false, bool errorOnDuplicate = true)
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0x15DEDE4", Offset = "0x15DEDE4", VA = "0x15DEDE4")]
		public static void DeleteCustomEvent(string customEventName)
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x15DEFE0", Offset = "0x15DEFE0", VA = "0x15DEFE0")]
		public static CustomEvent GetCustomEventByName(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x15BC550", Offset = "0x15BC550", VA = "0x15BC550")]
		public static void FireCustomEvent(string customEventName, Transform originObject, bool logDupe = true)
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0x15BDB48", Offset = "0x15BDB48", VA = "0x15BDB48")]
		public static bool CustomEventExists(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0x15DF0F0", Offset = "0x15DF0F0", VA = "0x15DF0F0")]
		private static List<ICustomEventReceiver> GetChildReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0x15DF290", Offset = "0x15DF290", VA = "0x15DF290")]
		private static List<ICustomEventReceiver> GetParentReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0x15DF430", Offset = "0x15DF430", VA = "0x15DF430")]
		private static List<ICustomEventReceiver> FilterOutSelf(List<ICustomEventReceiver> sourceList, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0x15C66A0", Offset = "0x15C66A0", VA = "0x15C66A0")]
		private static bool LoggingEnabledForGroup(MasterAudioGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0x15C6FE0", Offset = "0x15C6FE0", VA = "0x15C6FE0")]
		private static void LogMessage(string message)
		{
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x15CA730", Offset = "0x15CA730", VA = "0x15CA730")]
		public static void LogWarning(string msg)
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x15DF898", Offset = "0x15DF898", VA = "0x15DF898")]
		public static void LogWarningIfNeverLogged(string msg, int errorNumber)
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x15CA680", Offset = "0x15CA680", VA = "0x15CA680")]
		public static void LogError(string msg)
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x15DF9C4", Offset = "0x15DF9C4", VA = "0x15DF9C4")]
		public static void LogNoPlaylist(string playlistControllerName, string methodName)
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x15DA270", Offset = "0x15DA270", VA = "0x15DA270")]
		private static bool IsOkToCallOnlyPlaylistMethod(List<PlaylistController> pcs, string methodName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x15DFBDC", Offset = "0x15DFBDC", VA = "0x15DFBDC")]
		public static void SetupAmbientNextFrame(AmbientSound ambient)
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x15DFE44", Offset = "0x15DFE44", VA = "0x15DFE44")]
		public static void RemoveDelayedAmbient(AmbientSound ambient)
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x15E00F8", Offset = "0x15E00F8", VA = "0x15E00F8")]
		public static void QueueTransformFollowerForColliderPositionRecalc(TransformFollower follower)
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x15E0354", Offset = "0x15E0354", VA = "0x15E0354")]
		public static void AddToQueuedOcclusionRays(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x15E05B0", Offset = "0x15E05B0", VA = "0x15E05B0")]
		public static void AddToOcclusionInRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x15E07B8", Offset = "0x15E07B8", VA = "0x15E07B8")]
		public static void AddToOcclusionOutOfRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x15E0B68", Offset = "0x15E0B68", VA = "0x15E0B68")]
		public static void AddToBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x15BAF8C", Offset = "0x15BAF8C", VA = "0x15BAF8C")]
		public static bool HasQueuedOcclusionRays()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x15BB010", Offset = "0x15BB010", VA = "0x15BB010")]
		public static SoundGroupVariationUpdater OldestQueuedOcclusionRay()
		{
			return null;
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x15CF530", Offset = "0x15CF530", VA = "0x15CF530")]
		public static bool IsOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x15CDE9C", Offset = "0x15CDE9C", VA = "0x15CDE9C")]
		public static void RemoveFromOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x15E09E0", Offset = "0x15E09E0", VA = "0x15E09E0")]
		public static void RemoveFromBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x15E0CF0", Offset = "0x15E0CF0", VA = "0x15E0CF0")]
		public static void StopTrackingOcclusionForSource(GameObject src)
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x15E0F60", Offset = "0x15E0F60", VA = "0x15E0F60")]
		public static bool IsVideoPlayersGroup(string groupName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x15CC704", Offset = "0x15CC704", VA = "0x15CC704")]
		private static bool IsLinkedGroupPlay(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x15E10A4", Offset = "0x15E10A4", VA = "0x15E10A4")]
		public static int RemainingClipsInGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x15D2D38", Offset = "0x15D2D38", VA = "0x15D2D38")]
		public static void RescanGroupsNow()
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x15E272C", Offset = "0x15E272C", VA = "0x15E272C")]
		public static void DoneRescanningGroups()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x15E2940", Offset = "0x15E2940", VA = "0x15E2940")]
		public static GameObject CreateMasterAudio()
		{
			return null;
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x15E2AFC", Offset = "0x15E2AFC", VA = "0x15E2AFC")]
		public static GameObject CreatePlaylistController()
		{
			return null;
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x15E2CB8", Offset = "0x15E2CB8", VA = "0x15E2CB8")]
		public static GameObject CreateDynamicSoundGroupCreator()
		{
			return null;
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x15E2E74", Offset = "0x15E2E74", VA = "0x15E2E74")]
		public static GameObject CreateSoundGroupOrganizer()
		{
			return null;
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x15E3030", Offset = "0x15E3030", VA = "0x15E3030")]
		public MasterAudio()
		{
		}
	}
	[Token(Token = "0x200045E")]
	public static class PersistentAudioSettings
	{
		[Token(Token = "0x4001601")]
		public const string SfxVolKey = "MA_sfxVolume";

		[Token(Token = "0x4001602")]
		public const string MusicVolKey = "MA_musicVolume";

		[Token(Token = "0x4001603")]
		public const string SfxMuteKey = "MA_sfxMute";

		[Token(Token = "0x4001604")]
		public const string MusicMuteKey = "MA_musicMute";

		[Token(Token = "0x4001605")]
		public const string BusVolKey = "MA_BusVolume_";

		[Token(Token = "0x4001606")]
		public const string GroupVolKey = "MA_GroupVolume_";

		[Token(Token = "0x4001607")]
		public const string BusKeysKey = "MA_BusKeys";

		[Token(Token = "0x4001608")]
		public const string GroupKeysKey = "MA_GroupsKeys";

		[Token(Token = "0x4001609")]
		public const string Separator = ";";

		[Token(Token = "0x170004FA")]
		public static string BusesUpdatedKeys
		{
			[Token(Token = "0x6001D9D")]
			[Address(RVA = "0x3132044", Offset = "0x3132044", VA = "0x3132044")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0x31320C0", Offset = "0x31320C0", VA = "0x31320C0")]
			set
			{
			}
		}

		[Token(Token = "0x170004FB")]
		public static string GroupsUpdatedKeys
		{
			[Token(Token = "0x6001DA2")]
			[Address(RVA = "0x31321F0", Offset = "0x31321F0", VA = "0x31321F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DA3")]
			[Address(RVA = "0x313226C", Offset = "0x313226C", VA = "0x313226C")]
			set
			{
			}
		}

		[Token(Token = "0x170004FC")]
		public static bool? MixerMuted
		{
			[Token(Token = "0x6001DA6")]
			[Address(RVA = "0x3132518", Offset = "0x3132518", VA = "0x3132518")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DA7")]
			[Address(RVA = "0x31325B0", Offset = "0x31325B0", VA = "0x31325B0")]
			set
			{
			}
		}

		[Token(Token = "0x170004FD")]
		public static float? MixerVolume
		{
			[Token(Token = "0x6001DA8")]
			[Address(RVA = "0x3132710", Offset = "0x3132710", VA = "0x3132710")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DA9")]
			[Address(RVA = "0x31327A0", Offset = "0x31327A0", VA = "0x31327A0")]
			set
			{
			}
		}

		[Token(Token = "0x170004FE")]
		public static bool? MusicMuted
		{
			[Token(Token = "0x6001DAA")]
			[Address(RVA = "0x31328F4", Offset = "0x31328F4", VA = "0x31328F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DAB")]
			[Address(RVA = "0x313298C", Offset = "0x313298C", VA = "0x313298C")]
			set
			{
			}
		}

		[Token(Token = "0x170004FF")]
		public static float? MusicVolume
		{
			[Token(Token = "0x6001DAC")]
			[Address(RVA = "0x3132AEC", Offset = "0x3132AEC", VA = "0x3132AEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DAD")]
			[Address(RVA = "0x3132B7C", Offset = "0x3132B7C", VA = "0x3132B7C")]
			set
			{
			}
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x3131E5C", Offset = "0x3131E5C", VA = "0x3131E5C")]
		public static void SetBusVolume(string busName, float vol)
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x3131FF4", Offset = "0x3131FF4", VA = "0x3131FF4")]
		public static string MakeBusKey(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x3132110", Offset = "0x3132110", VA = "0x3132110")]
		public static float? GetBusVolume(string busName)
		{
			return null;
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x31321A0", Offset = "0x31321A0", VA = "0x31321A0")]
		public static string GetGroupKey(string groupName)
		{
			return null;
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x31322BC", Offset = "0x31322BC", VA = "0x31322BC")]
		public static void SetGroupVolume(string grpName, float vol)
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0x3132488", Offset = "0x3132488", VA = "0x3132488")]
		public static float? GetGroupVolume(string grpName)
		{
			return null;
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x3132CD0", Offset = "0x3132CD0", VA = "0x3132CD0")]
		public static void RestoreMasterSettings()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public abstract class SingletonScriptable<InstanceType> : ScriptableObject where InstanceType : ScriptableObject
	{
		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static string AssetNameToLoad;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static string ResourceNameToLoad;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static List<string> FoldersToCreate;

		[Token(Token = "0x6001DAF")]
		protected SingletonScriptable()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class SoundGroupOrganizer : MonoBehaviour
	{
		[Token(Token = "0x2000461")]
		public class CustomEventSelection
		{
			[Token(Token = "0x4001623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEvent Event;

			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6001DB3")]
			[Address(RVA = "0x1DE3160", Offset = "0x1DE3160", VA = "0x1DE3160")]
			public CustomEventSelection(CustomEvent cEvent, bool isSelected)
			{
			}
		}

		[Token(Token = "0x2000462")]
		public class SoundGroupSelection
		{
			[Token(Token = "0x4001625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject Go;

			[Token(Token = "0x4001626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6001DB4")]
			[Address(RVA = "0x1DE31AC", Offset = "0x1DE31AC", VA = "0x1DE31AC")]
			public SoundGroupSelection(GameObject go, bool isSelected)
			{
			}
		}

		[Token(Token = "0x2000463")]
		public enum MAItemType
		{
			[Token(Token = "0x4001628")]
			SoundGroups,
			[Token(Token = "0x4001629")]
			CustomEvents
		}

		[Token(Token = "0x2000464")]
		public enum TransferMode
		{
			[Token(Token = "0x400162B")]
			None,
			[Token(Token = "0x400162C")]
			Import,
			[Token(Token = "0x400162D")]
			Export
		}

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject dynGroupTemplate;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dynVariationTemplate;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject maGroupTemplate;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject maVariationTemplate;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string textGroupFilter;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TransferMode transMode;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject sourceObject;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupSelection> selectedSourceSoundGroups;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject destObject;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<SoundGroupSelection> selectedDestSoundGroups;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MAItemType itemType;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomEventSelection> selectedSourceCustomEvents;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<CustomEventSelection> selectedDestCustomEvents;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string newEventName;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x229CB88", Offset = "0x229CB88", VA = "0x229CB88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x229CBFC", Offset = "0x229CBFC", VA = "0x229CBFC")]
		public SoundGroupOrganizer()
		{
		}
	}
	[Token(Token = "0x2000465")]
	public static class AmbientUtil
	{
		[Token(Token = "0x400162E")]
		public const string FollowerHolderName = "_Followers";

		[Token(Token = "0x400162F")]
		public const string ListenerFollowerName = "~ListenerFollower~";

		[Token(Token = "0x4001630")]
		public const float ListenerFollowerTrigRadius = 0.01f;

		[Token(Token = "0x4001631")]
		public const int IgnoreRaycastLayerNumber = 2;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _followerHolder;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ListenerFollower _listenerFollower;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<TransformFollower> _transformFollowers;

		[Token(Token = "0x17000500")]
		public static ListenerFollower ListenerFollower
		{
			[Token(Token = "0x6001DB9")]
			[Address(RVA = "0x2004B68", Offset = "0x2004B68", VA = "0x2004B68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000501")]
		public static Transform FollowerHolder
		{
			[Token(Token = "0x6001DBA")]
			[Address(RVA = "0x20047D8", Offset = "0x20047D8", VA = "0x20047D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000502")]
		public static bool HasListenerFollower
		{
			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0x20050B4", Offset = "0x20050B4", VA = "0x20050B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000503")]
		public static int AmbientCount
		{
			[Token(Token = "0x6001DBE")]
			[Address(RVA = "0x2005154", Offset = "0x2005154", VA = "0x2005154")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000504")]
		public static bool HasListenerFolowerRigidBody
		{
			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0x2004660", Offset = "0x2004660", VA = "0x2004660")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x2004720", Offset = "0x2004720", VA = "0x2004720")]
		public static void InitFollowerHolder()
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x20045B8", Offset = "0x20045B8", VA = "0x20045B8")]
		public static bool InitListenerFollower()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x2004ADC", Offset = "0x2004ADC", VA = "0x2004ADC")]
		public static void RemoveTransformFollower(TransformFollower follower)
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0x2004668", Offset = "0x2004668", VA = "0x2004668")]
		public static Transform InitAudioSourceFollower(Transform transToFollow, string followerName, string soundGroupName, string variationName, float volume, bool willFollowSource, bool willPositionOnClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
		{
			return null;
		}

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x2004EC0", Offset = "0x2004EC0", VA = "0x2004EC0")]
		public static void ManualUpdate()
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x2004FD0", Offset = "0x2004FD0", VA = "0x2004FD0")]
		private static void UpdateListenerFollower()
		{
		}
	}
	[Token(Token = "0x2000466")]
	public static class ArrayListUtil
	{
		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x200541C", Offset = "0x200541C", VA = "0x200541C")]
		public static void SortIntArray(ref List<int> list)
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x2005540", Offset = "0x2005540", VA = "0x2005540")]
		public static bool IsExcludedChildName(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000467")]
	public static class AudioTransformExtensions
	{
		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x2009074", Offset = "0x2009074", VA = "0x2009074")]
		public static void FadeOutSoundGroupOfTransform(this Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x20090F8", Offset = "0x20090F8", VA = "0x20090F8")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(this Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x200915C", Offset = "0x200915C", VA = "0x200915C")]
		public static bool PlaySound3DAtTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x200920C", Offset = "0x200920C", VA = "0x200920C")]
		public static PlaySoundResult PlaySound3DAtTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x20092CC", Offset = "0x20092CC", VA = "0x20092CC")]
		public static bool PlaySound3DFollowTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x200937C", Offset = "0x200937C", VA = "0x200937C")]
		public static PlaySoundResult PlaySound3DFollowTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x200943C", Offset = "0x200943C", VA = "0x200943C")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x2009500", Offset = "0x2009500", VA = "0x2009500")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x20095C4", Offset = "0x20095C4", VA = "0x20095C4")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x2009628", Offset = "0x2009628", VA = "0x2009628")]
		public static void PauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x200969C", Offset = "0x200969C", VA = "0x200969C")]
		public static void PauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x2009710", Offset = "0x2009710", VA = "0x2009710")]
		public static void StopAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x2009774", Offset = "0x2009774", VA = "0x2009774")]
		public static void StopBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x20097E8", Offset = "0x20097E8", VA = "0x20097E8")]
		public static void StopSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x200985C", Offset = "0x200985C", VA = "0x200985C")]
		public static void UnpauseAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0x20098C0", Offset = "0x20098C0", VA = "0x20098C0")]
		public static void UnpauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x2009934", Offset = "0x2009934", VA = "0x2009934")]
		public static void UnpauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x20099A8", Offset = "0x20099A8", VA = "0x20099A8")]
		public static bool IsTransformPlayingSoundGroup(this Transform sourceTrans, string sType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000468")]
	public class AudioTransformTracker : MonoBehaviour
	{
		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int _frames;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x17000505")]
		public Transform Trans
		{
			[Token(Token = "0x6001DD5")]
			[Address(RVA = "0x2009A1C", Offset = "0x2009A1C", VA = "0x2009A1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x2009ABC", Offset = "0x2009ABC", VA = "0x2009ABC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x2009ACC", Offset = "0x2009ACC", VA = "0x2009ACC")]
		public AudioTransformTracker()
		{
		}
	}
	[Token(Token = "0x2000469")]
	public static class AudioUtil
	{
		[Token(Token = "0x4001637")]
		public const float DefaultMinOcclusionCutoffFrequency = 22000f;

		[Token(Token = "0x4001638")]
		public const float DefaultMaxOcclusionCutoffFrequency = 0f;

		[Token(Token = "0x4001639")]
		private const float SemitonePitchChangeAmt = 1.0594635f;

		[Token(Token = "0x17000506")]
		public static float FixedDeltaTime
		{
			[Token(Token = "0x6001DDB")]
			[Address(RVA = "0x2009B4C", Offset = "0x2009B4C", VA = "0x2009B4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000507")]
		public static float FrameTime
		{
			[Token(Token = "0x6001DDC")]
			[Address(RVA = "0x2009B54", Offset = "0x2009B54", VA = "0x2009B54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000508")]
		public static float Time
		{
			[Token(Token = "0x6001DDD")]
			[Address(RVA = "0x2009B5C", Offset = "0x2009B5C", VA = "0x2009B5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000509")]
		public static int FrameCount
		{
			[Token(Token = "0x6001DDE")]
			[Address(RVA = "0x2009B64", Offset = "0x2009B64", VA = "0x2009B64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x2009AD4", Offset = "0x2009AD4", VA = "0x2009AD4")]
		private static float CutoffRange(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x2009B1C", Offset = "0x2009B1C", VA = "0x2009B1C")]
		private static float MaxCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x2009B34", Offset = "0x2009B34", VA = "0x2009B34")]
		public static float MinCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x2009B6C", Offset = "0x2009B6C", VA = "0x2009B6C")]
		public static float GetOcclusionCutoffFrequencyByDistanceRatio(float distRatio, SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x2009BB8", Offset = "0x2009BB8", VA = "0x2009BB8")]
		public static float GetSemitonesFromPitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x2009C04", Offset = "0x2009C04", VA = "0x2009C04")]
		public static float GetPitchFromSemitones(float semitones)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x2009C44", Offset = "0x2009C44", VA = "0x2009C44")]
		public static float GetDbFromFloatVolume(float vol)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x2009C60", Offset = "0x2009C60", VA = "0x2009C60")]
		public static float GetFloatVolumeFromDb(float db)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x20079FC", Offset = "0x20079FC", VA = "0x20079FC")]
		public static float GetAudioPlayedPercentage(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x2009C70", Offset = "0x2009C70", VA = "0x2009C70")]
		public static bool IsClipPaused(AudioSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x2009CB8", Offset = "0x2009CB8", VA = "0x2009CB8")]
		public static void ClipPlayed(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x2009DD4", Offset = "0x2009DD4", VA = "0x2009DD4")]
		public static void UnloadNonPreloadedAudioData(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x2009D44", Offset = "0x2009D44", VA = "0x2009D44")]
		public static bool AudioClipWillPreload(AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x2009EC0", Offset = "0x2009EC0", VA = "0x2009EC0")]
		public static bool IsClipReadyToPlay(this AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x2009F54", Offset = "0x2009F54", VA = "0x2009F54")]
		private static float GetPositiveUsablePitch(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x2009F80", Offset = "0x2009F80", VA = "0x2009F80")]
		private static float GetPositiveUsablePitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x2009F90", Offset = "0x2009F90", VA = "0x2009F90")]
		public static float AdjustAudioClipDurationForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0x2009FCC", Offset = "0x2009FCC", VA = "0x2009FCC")]
		public static float AdjustAudioClipDurationForPitch(float duration, float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0x2009FE0", Offset = "0x2009FE0", VA = "0x2009FE0")]
		public static float AdjustEndLeadTimeForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200046A")]
	public static class CoroutineHelper
	{
		[Token(Token = "0x200046B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD1DC", Offset = "0x10AD1DC")]
		private sealed class <WaitForActualSeconds>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400163A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400163B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400163C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x400163D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <start>5__2;

			[Token(Token = "0x1700050A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DF3")]
				[Address(RVA = "0x2236CE4", Offset = "0x2236CE4", VA = "0x2236CE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700050B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DF5")]
				[Address(RVA = "0x2236D2C", Offset = "0x2236D2C", VA = "0x2236D2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DF0")]
			[Address(RVA = "0x2236BE8", Offset = "0x2236BE8", VA = "0x2236BE8")]
			[DebuggerHidden]
			public <WaitForActualSeconds>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6001DF1")]
			[Address(RVA = "0x2236C14", Offset = "0x2236C14", VA = "0x2236C14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DF2")]
			[Address(RVA = "0x2236C18", Offset = "0x2236C18", VA = "0x2236C18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DF4")]
			[Address(RVA = "0x2236CEC", Offset = "0x2236CEC", VA = "0x2236CEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x2544D04", Offset = "0x2544D04", VA = "0x2544D04")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6DB0", Offset = "0x10C6DB0")]
		public static IEnumerator WaitForActualSeconds(float time)
		{
			return null;
		}
	}
	[Token(Token = "0x200046C")]
	public static class DTMonoHelper
	{
		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0x1FF10D0", Offset = "0x1FF10D0", VA = "0x1FF10D0")]
		public static Transform GetChildTransform(this Transform transParent, string childName)
		{
			return null;
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x1FF10E8", Offset = "0x1FF10E8", VA = "0x1FF10E8")]
		public static bool IsActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x1FF1100", Offset = "0x1FF1100", VA = "0x1FF1100")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x1FF111C", Offset = "0x1FF111C", VA = "0x1FF111C")]
		public static void DestroyAllChildren(this Transform tran)
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class DelayBetweenSongs : MonoBehaviour
	{
		[Token(Token = "0x200046E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD1FC", Offset = "0x10AD1FC")]
		private sealed class <PlaySongWithDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DelayBetweenSongs <>4__this;

			[Token(Token = "0x1700050C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E02")]
				[Address(RVA = "0x2244898", Offset = "0x2244898", VA = "0x2244898", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700050D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E04")]
				[Address(RVA = "0x22448E0", Offset = "0x22448E0", VA = "0x22448E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DFF")]
			[Address(RVA = "0x2244718", Offset = "0x2244718", VA = "0x2244718")]
			[DebuggerHidden]
			public <PlaySongWithDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001E00")]
			[Address(RVA = "0x2244744", Offset = "0x2244744", VA = "0x2244744", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E01")]
			[Address(RVA = "0x2244748", Offset = "0x2244748", VA = "0x2244748", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E03")]
			[Address(RVA = "0x22448A0", Offset = "0x22448A0", VA = "0x22448A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minTimeToWait;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxTimeToWait;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string playlistControllerName;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlaylistController _controller;

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x1FF665C", Offset = "0x1FF665C", VA = "0x1FF665C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x1FF6710", Offset = "0x1FF6710", VA = "0x1FF6710")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x1FF67A4", Offset = "0x1FF67A4", VA = "0x1FF67A4")]
		private void SongEnded(string songName)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x1FF67DC", Offset = "0x1FF67DC", VA = "0x1FF67DC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x10C6E80", Offset = "0x10C6E80")]
		private IEnumerator PlaySongWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x1FF6854", Offset = "0x1FF6854", VA = "0x1FF6854")]
		public DelayBetweenSongs()
		{
		}
	}
	[Token(Token = "0x200046F")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10AD20C", Offset = "0x10AD20C")]
	public class DynamicSoundGroupCreator : MonoBehaviour
	{
		[Token(Token = "0x2000470")]
		public enum CreateItemsWhen
		{
			[Token(Token = "0x4001668")]
			FirstEnableOnly,
			[Token(Token = "0x4001669")]
			EveryEnable
		}

		[Token(Token = "0x2000471")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD220", Offset = "0x10AD220")]
		private sealed class <>c__DisplayClass40_0
		{
			[Token(Token = "0x400166A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEvent anEvent;

			[Token(Token = "0x6001E13")]
			[Address(RVA = "0x2244BC0", Offset = "0x2244BC0", VA = "0x2244BC0")]
			public <>c__DisplayClass40_0()
			{
			}

			[Token(Token = "0x6001E14")]
			[Address(RVA = "0x2244BC8", Offset = "0x2244BC8", VA = "0x2244BC8")]
			internal bool <RemoveItems>b__0(CustomEvent cEvent)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000472")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD230", Offset = "0x10AD230")]
		private sealed class <>c__DisplayClass40_1
		{
			[Token(Token = "0x400166B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEventCategory aCat;

			[Token(Token = "0x6001E15")]
			[Address(RVA = "0x2244C1C", Offset = "0x2244C1C", VA = "0x2244C1C")]
			public <>c__DisplayClass40_1()
			{
			}

			[Token(Token = "0x6001E16")]
			[Address(RVA = "0x2244C24", Offset = "0x2244C24", VA = "0x2244C24")]
			internal bool <RemoveItems>b__1(CustomEventCategory category)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000473")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD240", Offset = "0x10AD240")]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MasterAudio.Playlist aPlaylist;

			[Token(Token = "0x6001E17")]
			[Address(RVA = "0x2244C78", Offset = "0x2244C78", VA = "0x2244C78")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x6001E18")]
			[Address(RVA = "0x2244C80", Offset = "0x2244C80", VA = "0x2244C80")]
			internal bool <CreateItems>b__0(MasterAudio.Playlist playlist)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001645")]
		public const int ExtraHardCodedBusOptions = 1;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject groupTemplate;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject variationTemplate;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool errorOnDuplicates;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool createOnAwake;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool soundGroupsAreExpanded;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool removeGroupsOnSceneChange;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CreateItemsWhen reUseMode;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showCustomEvents;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<CustomEvent> customEventsToCreate;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string newEventName;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showMusicDucking;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool playListExpanded;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool playlistEditorExp;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MasterAudio.Playlist> musicPlaylists;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string audioSourceTemplateName;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool groupByBus;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool itemsCreatedEventExpanded;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string itemsCreatedCustomEvent;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _hasCreated;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<Transform> _groupsToRemove;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _trans;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int _instanceId;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<DynamicSoundGroup> _groupsToCreate;

		[Token(Token = "0x1700050E")]
		public static int HardCodedBusOptions
		{
			[Token(Token = "0x6001E0E")]
			[Address(RVA = "0x1FF9FA0", Offset = "0x1FF9FA0", VA = "0x1FF9FA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700050F")]
		public List<DynamicSoundGroup> GroupsToCreate
		{
			[Token(Token = "0x6001E0F")]
			[Address(RVA = "0x1FFA018", Offset = "0x1FFA018", VA = "0x1FFA018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000510")]
		public int InstanceId
		{
			[Token(Token = "0x6001E10")]
			[Address(RVA = "0x1FF9CDC", Offset = "0x1FF9CDC", VA = "0x1FF9CDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000511")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x6001E11")]
			[Address(RVA = "0x1FFA020", Offset = "0x1FFA020", VA = "0x1FFA020")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x1FF82EC", Offset = "0x1FF82EC", VA = "0x1FF82EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x1FF83D0", Offset = "0x1FF83D0", VA = "0x1FF83D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x1FF84D0", Offset = "0x1FF84D0", VA = "0x1FF84D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x1FF84D4", Offset = "0x1FF84D4", VA = "0x1FF84D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x1FF83D4", Offset = "0x1FF83D4", VA = "0x1FF83D4")]
		private void CreateItemsIfReady()
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x1FF8600", Offset = "0x1FF8600", VA = "0x1FF8600")]
		public void RemoveItems()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x1FF8D70", Offset = "0x1FF8D70", VA = "0x1FF8D70")]
		public void CreateItems()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x1FF9FA8", Offset = "0x1FF9FA8", VA = "0x1FF9FA8")]
		private void FireEvents()
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x1FF9D10", Offset = "0x1FF9D10", VA = "0x1FF9D10")]
		public void PopulateGroupData()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x1FFA028", Offset = "0x1FFA028", VA = "0x1FFA028")]
		public DynamicSoundGroupCreator()
		{
		}
	}
	[Token(Token = "0x2000474")]
	public static class OculusAudioHelper
	{
		[Token(Token = "0x17000512")]
		public static bool OculusAudioOptionExists
		{
			[Token(Token = "0x6001E19")]
			[Address(RVA = "0x312FAE0", Offset = "0x312FAE0", VA = "0x312FAE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x312FAE8", Offset = "0x312FAE8", VA = "0x312FAE8")]
		public static bool DarkTonicOculusAudioPackageInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x312FAF0", Offset = "0x312FAF0", VA = "0x312FAF0")]
		public static void AddOculusAudioSourceToVariation(SoundGroupVariation variation)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x312FC1C", Offset = "0x312FC1C", VA = "0x312FC1C")]
		public static void AddOculusAudioSourceToAllVariations()
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x312FE68", Offset = "0x312FE68", VA = "0x312FE68")]
		public static void RemoveOculusAudioSourceFromAllVariations()
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x31300A0", Offset = "0x31300A0", VA = "0x31300A0")]
		public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x31300A8", Offset = "0x31300A8", VA = "0x31300A8")]
		public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x31300B0", Offset = "0x31300B0", VA = "0x31300B0")]
		public static void CopyOculusAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
		{
		}
	}
	[Token(Token = "0x2000475")]
	public static class FilePlayerPrefs
	{
		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Hashtable PlayerPrefsHashtable;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool _hashTableChanged;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string _serializedOutput;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string SerializedInput;

		[Token(Token = "0x4001671")]
		private const string ParametersSeperator = ";";

		[Token(Token = "0x4001672")]
		private const string KeyValueSeperator = ":";

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string FileName;

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x2F28CDC", Offset = "0x2F28CDC", VA = "0x2F28CDC")]
		static FilePlayerPrefs()
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x2F29188", Offset = "0x2F29188", VA = "0x2F29188")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x2F29208", Offset = "0x2F29208", VA = "0x2F29208")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x2F2933C", Offset = "0x2F2933C", VA = "0x2F2933C")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x2F294BC", Offset = "0x2F294BC", VA = "0x2F294BC")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x2F29644", Offset = "0x2F29644", VA = "0x2F29644")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x2F297C8", Offset = "0x2F297C8", VA = "0x2F297C8")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x2F298A8", Offset = "0x2F298A8", VA = "0x2F298A8")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x2F299E8", Offset = "0x2F299E8", VA = "0x2F299E8")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x2F29B90", Offset = "0x2F29B90", VA = "0x2F29B90")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x2F29D18", Offset = "0x2F29D18", VA = "0x2F29D18")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x2F29EC0", Offset = "0x2F29EC0", VA = "0x2F29EC0")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x2F2A050", Offset = "0x2F2A050", VA = "0x2F2A050")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x2F2A160", Offset = "0x2F2A160", VA = "0x2F2A160")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x2F2A2F4", Offset = "0x2F2A2F4", VA = "0x2F2A2F4")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x2F2A374", Offset = "0x2F2A374", VA = "0x2F2A374")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x2F2A3EC", Offset = "0x2F2A3EC", VA = "0x2F2A3EC")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x2F2A598", Offset = "0x2F2A598", VA = "0x2F2A598")]
		private static void Serialize()
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x2F28E80", Offset = "0x2F28E80", VA = "0x2F28E80")]
		private static void Deserialize()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x2F2AB0C", Offset = "0x2F2AB0C", VA = "0x2F2AB0C")]
		private static string EscapeNonSeperators(string inputToEscape)
		{
			return null;
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x2F2ABB8", Offset = "0x2F2ABB8", VA = "0x2F2ABB8")]
		private static string DeEscapeNonSeperators(string inputToDeEscape)
		{
			return null;
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x2F2AC64", Offset = "0x2F2AC64", VA = "0x2F2AC64")]
		public static object GetTypeValue(string typeName, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000476")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0x10AD250", Offset = "0x10AD250")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x10AD250", Offset = "0x10AD250")]
	public class PlaylistController : MonoBehaviour
	{
		[Token(Token = "0x2000477")]
		public enum FadeStatus
		{
			[Token(Token = "0x40016D9")]
			NotFading,
			[Token(Token = "0x40016DA")]
			FadingIn,
			[Token(Token = "0x40016DB")]
			FadeingOut
		}

		[Token(Token = "0x2000478")]
		public enum AudioPlayType
		{
			[Token(Token = "0x40016DD")]
			PlayNow,
			[Token(Token = "0x40016DE")]
			Schedule,
			[Token(Token = "0x40016DF")]
			AlreadyScheduled
		}

		[Token(Token = "0x2000479")]
		public enum PlaylistStates
		{
			[Token(Token = "0x40016E1")]
			NotInScene,
			[Token(Token = "0x40016E2")]
			Stopped,
			[Token(Token = "0x40016E3")]
			Playing,
			[Token(Token = "0x40016E4")]
			Paused,
			[Token(Token = "0x40016E5")]
			Crossfading
		}

		[Token(Token = "0x200047A")]
		public enum FadeMode
		{
			[Token(Token = "0x40016E7")]
			None,
			[Token(Token = "0x40016E8")]
			GradualFade
		}

		[Token(Token = "0x200047B")]
		public enum AudioDuckingMode
		{
			[Token(Token = "0x40016EA")]
			NotDucking,
			[Token(Token = "0x40016EB")]
			SetToDuck,
			[Token(Token = "0x40016EC")]
			Ducked,
			[Token(Token = "0x40016ED")]
			Unducking
		}

		[Token(Token = "0x200047C")]
		public delegate void SongChangedEventHandler(string newSongName, MusicSetting song);

		[Token(Token = "0x200047D")]
		public delegate void SongEndedEventHandler(string songName);

		[Token(Token = "0x200047E")]
		public delegate void SongLoopedEventHandler(string songName);

		[Token(Token = "0x200047F")]
		public delegate void PlaylistEndedEventHandler();

		[Token(Token = "0x2000480")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10AD2C4", Offset = "0x10AD2C4")]
		private sealed class <>c__DisplayClass161_0
		{
			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlaylistController <>4__this;

			[Token(Token = "0x40016EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volumeBeforeFade;

			[Token(Token = "0x6001EB7")]
			[Address(RVA = "0x1DE1040", Offset = "0x1DE1040", VA = "0x1DE1040")]
			public <>c__DisplayClass161_0()
			{
			}

			[Token(Token = "0x6001EB8")]
			[Address(RVA = "0x1DE1048", Offset = "0x1DE1048", VA = "0x1DE1048")]
			internal void <FadeOutPlaylist>b__0()
			{
			}
		}

		[Token(Token = "0x4001674")]
		public const int FramesEarlyToTrigger = 2;

		[Token(Token = "0x4001675")]
		public const int FramesEarlyToBeSyncable = 10;

		[Token(Token = "0x4001676")]
		private const double UniversalAudioReactionTime = 0.3;

		[Token(Token = "0x4001677")]
		private const int NextScheduleTimeRecalcConsecutiveFrameCount = 5;

		[Token(Token = "0x4001678")]
		private const string NotReadyMessage = "Playlist Controller is not initialized yet. It must call its own Awake & Start method before any other methods are called. If you have a script with an Awake or Start event that needs to call it, make sure PlaylistController.cs is set to execute first (Script Execution Order window in Unity). Awake event is still not guaranteed to work, so use Start where possible.";

		[Token(Token = "0x4001679")]
		private const float MinSongLength = 0.5f;

		[Token(Token = "0x400167A")]
		private const float SlowestFrameTimeForCalc = 0.3f;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool startPlaylistOnAwake;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isShuffle;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isAutoAdvance;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool loopPlaylist;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _playlistVolume;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isMuted;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string startPlaylistName;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int syncGroupNum;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ignoreListenerPause;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float spatialBlend;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool initializedEventExpanded;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string initializedCustomEvent;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool crossfadeStartedExpanded;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string crossfadeStartedCustomEvent;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string songChangedCustomEvent;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool songEndedEventExpanded;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string songEndedCustomEvent;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool songLoopedEventExpanded;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string songLoopedCustomEvent;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool playlistStartedEventExpanded;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string playlistStartedCustomEvent;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool playlistEndedEventExpanded;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string playlistEndedCustomEvent;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioSource _activeAudio;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioSource _transitioningAudio;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _activeAudioEndVolume;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _transitioningAudioStartVolume;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _crossFadeStartTime;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<int> _clipsRemaining;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _currentSequentialClipIndex;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private AudioDuckingMode _duckingMode;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _timeToStartUnducking;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _timeToFinishUnducking;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _originalMusicVolume;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _initialDuckVolume;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _duckRange;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private SoundGroupVariationUpdater _actorUpdater;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _unduckTime;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private MusicSetting _currentSong;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GameObject _go;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private string _name;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private FadeMode _curFadeMode;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float _slowFadeStartTime;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float _slowFadeCompletionTime;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float _slowFadeStartVolume;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _slowFadeTargetVolume;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private MasterAudio.Playlist _currentPlaylist;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _lastTimeMissingPlaylistLogged;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Action _fadeCompleteCallback;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly List<MusicSetting> _queuedSongs;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool _lostFocus;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		private bool _autoStartedPlaylist;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
		private bool _isLoopSectionSchedule;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private double? _loopSectionNextStartTime;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private AudioSource _audioClip;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private AudioSource _transClip;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private MusicSetting _newSongSetting;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool _nextSongRequested;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool _nextSongScheduled;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int _lastRandomClipIndex;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float _lastTimeSongRequested;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float _currentDuckVolCut;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int? _lastSongPosition;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private double? _currentSchedSongDspStartTime;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private double? _currentSchedSongDspEndTime;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private int _lastFrameSongPosition;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private int _nextScheduleTimeRecalcDifferentFirstFrameNum;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private double? _nextScheduledTimeRecalcStart;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private readonly Dictionary<AudioSource, double> _scheduledSongOffsetByAudioSource;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private readonly Dictionary<AudioSource, double> _scheduledSongStartTimeByAudioSource;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private readonly Dictionary<AudioSource, double> _scheduledSongEndTimeByAudioSource;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int _frames;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<PlaylistController> _instances;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Coroutine _resourceCoroutine;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private int _songsPlayedFromPlaylist;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private AudioSource _audio1;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private AudioSource _audio2;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private string _activeSongAlias;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private bool _isPlayingQueuedSong;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x229")]
		private bool _isSongReplacingScheduledTrack;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Transform _trans;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private bool _willPersist;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private double? _songPauseTime;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private int framesOfSongPlayed;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFF5C", Offset = "0x10BFF5C")]
		private bool <ControllerIsReady>k__BackingField;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x279")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10BFF6C", Offset = "0x10BFF6C")]
		private bool <IsCrossFading>k__BackingField;

		[Token(Token = "0x17000513")]
		private bool WillSyncToOtherClip
		{
			[Token(Token = "0x6001E6A")]
			[Address(RVA = "0x1CBDE78", Offset = "0x1CBDE78", VA = "0x1CBDE78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000514")]
		public bool CurrentSongIsPlaying
		{
			[Token(Token = "0x6001E72")]
			[Address(RVA = "0x1CBE038", Offset = "0x1CBE038", VA = "0x1CBE038")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000515")]
		private bool SongIsNonAdvancible
		{
			[Token(Token = "0x6001E81")]
			[Address(RVA = "0x1CBF4A4", Offset = "0x1CBF4A4", VA = "0x1CBF4A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000516")]
		public bool ControllerIsReady
		{
			[Token(Token = "0x6001E83")]
			[Address(RVA = "0x1CBF4FC", Offset = "0x1CBF4FC", VA = "0x1CBF4FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6FB0", Offset = "0x10C6FB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E84")]
			[Address(RVA = "0x1CBF504", Offset = "0x1CBF504", VA = "0x1CBF504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6FC0", Offset = "0x10C6FC0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000517")]
		public FadeStatus CurrentFadeStatus
		{
			[Token(Token = "0x6001E85")]
			[Address(RVA = "0x1CBF510", Offset = "0x1CBF510", VA = "0x1CBF510")]
			get
			{
				return default(FadeStatus);
			}
		}

		[Token(Token = "0x17000518")]
		public PlaylistStates PlaylistState
		{
			[Token(Token = "0x6001E86")]
			[Address(RVA = "0x1CBADF4", Offset = "0x1CBADF4", VA = "0x1CBADF4")]
			get
			{
				return default(PlaylistStates);
			}
		}

		[Token(Token = "0x17000519")]
		public AudioSource ActiveAudioSource
		{
			[Token(Token = "0x6001E87")]
			[Address(RVA = "0x1CB94E8", Offset = "0x1CB94E8", VA = "0x1CB94E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051A")]
		public static List<PlaylistController> Instances
		{
			[Token(Token = "0x6001E88")]
			[Address(RVA = "0x1CBB2B0", Offset = "0x1CBB2B0", VA = "0x1CBB2B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E89")]
			[Address(RVA = "0x1CBF53C", Offset = "0x1CBF53C", VA = "0x1CBF53C")]
			set
			{
			}
		}

		[Token(Token = "0x1700051B")]
		public GameObject PlaylistControllerGameObject
		{
			[Token(Token = "0x6001E8A")]
			[Address(RVA = "0x1CBF590", Offset = "0x1CBF590", VA = "0x1CBF590")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051C")]
		public AudioSource CurrentPlaylistSource
		{
			[Token(Token = "0x6001E8B")]
			[Address(RVA = "0x1CBF598", Offset = "0x1CBF598", VA = "0x1CBF598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051D")]
		public AudioClip CurrentPlaylistClip
		{
			[Token(Token = "0x6001E8C")]
			[Address(RVA = "0x1CBF5A0", Offset = "0x1CBF5A0", VA = "0x1CBF5A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051E")]
		public AudioClip FadingPlaylistClip
		{
			[Token(Token = "0x6001E8D")]
			[Address(RVA = "0x1CBF634", Offset = "0x1CBF634", VA = "0x1CBF634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700051F")]
		public AudioSource FadingSource
		{
			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0x1CBF6D0", Offset = "0x1CBF6D0", VA = "0x1CBF6D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000520")]
		public bool IsCrossFading
		{
			[Token(Token = "0x6001E8F")]
			[Address(RVA = "0x1CBF6E8", Offset = "0x1CBF6E8", VA = "0x1CBF6E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6FD0", Offset = "0x10C6FD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E90")]
			[Address(RVA = "0x1CBF6F0", Offset = "0x1CBF6F0", VA = "0x1CBF6F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6FE0", Offset = "0x10C6FE0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000521")]
		public bool IsFading
		{
			[Token(Token = "0x6001E91")]
			[Address(RVA = "0x1CBF6FC", Offset = "0x1CBF6FC", VA = "0x1CBF6FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000522")]
		public float PlaylistVolume
		{
			[Token(Token = "0x6001E92")]
			[Address(RVA = "0x1CBDA18", Offset = "0x1CBDA18", VA = "0x1CBDA18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E93")]
			[Address(RVA = "0x1CBF71C", Offset = "0x1CBF71C", VA = "0x1CBF71C")]
			set
			{
			}
		}

		[Token(Token = "0x17000523")]
		public MasterAudio.Playlist CurrentPlaylist
		{
			[Token(Token = "0x6001E95")]
			[Address(RVA = "0x1CBE194", Offset = "0x1CBE194", VA = "0x1CBE194")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000524")]
		public bool HasPlaylist
		{
			[Token(Token = "0x6001E96")]
			[Address(RVA = "0x1CBB614", Offset = "0x1CBB614", VA = "0x1CBB614")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000525")]
		public string PlaylistName
		{
			[Token(Token = "0x6001E97")]
			[Address(RVA = "0x1CBF768", Offset = "0x1CBF768", VA = "0x1CBF768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000526")]
		public MusicSetting CurrentSong
		{
			[Token(Token = "0x6001E98")]
			[Address(RVA = "0x1CBF7DC", Offset = "0x1CBF7DC", VA = "0x1CBF7DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000527")]
		private bool IsMuted
		{
			[Token(Token = "0x6001E99")]
			[Address(RVA = "0x1CBF7E4", Offset = "0x1CBF7E4", VA = "0x1CBF7E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000528")]
		private bool PlaylistIsMuted
		{
			[Token(Token = "0x6001E9A")]
			[Address(RVA = "0x1CBB790", Offset = "0x1CBB790", VA = "0x1CBB790")]
			set
			{
			}
		}

		[Token(Token = "0x17000529")]
		private float CrossFadeTime
		{
			[Token(Token = "0x6001E9B")]
			[Address(RVA = "0x1CBAC08", Offset = "0x1CBAC08", VA = "0x1CBAC08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700052A")]
		private bool IsAutoAdvance
		{
			[Token(Token = "0x6001E9C")]
			[Address(RVA = "0x1CBAC94", Offset = "0x1CBAC94", VA = "0x1CBAC94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700052B")]
		public GameObject GameObj
		{
			[Token(Token = "0x6001E9D")]
			[Address(RVA = "0x1CBC1D8", Offset = "0x1CBC1D8", VA = "0x1CBC1D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700052C")]
		public string ControllerName
		{
			[Token(Token = "0x6001E9E")]
			[Address(RVA = "0x1CB7C8C", Offset = "0x1CB7C8C", VA = "0x1CB7C8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700052D")]
		public bool CanSchedule
		{
			[Token(Token = "0x6001E9F")]
			[Address(RVA = "0x1CB8250", Offset = "0x1CB8250", VA = "0x1CB8250")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700052E")]
		private bool IsFrameFastEnough
		{
			[Token(Token = "0x6001EA0")]
			[Address(RVA = "0x1CB8BC0", Offset = "0x1CB8BC0", VA = "0x1CB8BC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700052F")]
		private bool ShouldNotSwitchEarly
		{
			[Token(Token = "0x6001EA1")]
			[Address(RVA = "0x1CBADB8", Offset = "0x1CBADB8", VA = "0x1CBADB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000530")]
		private bool IsPlayingScheduledLoopSection
		{
			[Token(Token = "0x6001EA2")]
			[Address(RVA = "0x1CB9F88", Offset = "0x1CB9F88", VA = "0x1CB9F88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000531")]
		private bool IsCurrentSongLoopSection
		{
			[Token(Token = "0x6001EA3")]
			[Address(RVA = "0x1CBA6D4", Offset = "0x1CBA6D4", VA = "0x1CBA6D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000532")]
		private Transform Trans
		{
			[Token(Token = "0x6001EA4")]
			[Address(RVA = "0x1CB8AB8", Offset = "0x1CB8AB8", VA = "0x1CB8AB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000533")]
		public int ClipsRemainingInCurrentPlaylist
		{
			[Token(Token = "0x6001EA5")]
			[Address(RVA = "0x1CBF7EC", Offset = "0x1CBF7EC", VA = "0x1CBF7EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000008")]
		public event SongChangedEventHandler SongChanged
		{
			[Token(Token = "0x6001E37")]
			[Address(RVA = "0x1CB7148", Offset = "0x1CB7148", VA = "0x1CB7148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F30", Offset = "0x10C6F30")]
			add
			{
			}
			[Token(Token = "0x6001E38")]
			[Address(RVA = "0x1CB71EC", Offset = "0x1CB71EC", VA = "0x1CB71EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F40", Offset = "0x10C6F40")]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event SongEndedEventHandler SongEnded
		{
			[Token(Token = "0x6001E39")]
			[Address(RVA = "0x1CB7290", Offset = "0x1CB7290", VA = "0x1CB7290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F50", Offset = "0x10C6F50")]
			add
			{
			}
			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0x1CB7334", Offset = "0x1CB7334", VA = "0x1CB7334")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F60", Offset = "0x10C6F60")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event SongLoopedEventHandler SongLooped
		{
			[Token(Token = "0x6001E3B")]
			[Address(RVA = "0x1CB73D8", Offset = "0x1CB73D8", VA = "0x1CB73D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F70", Offset = "0x10C6F70")]
			add
			{
			}
			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0x1CB747C", Offset = "0x1CB747C", VA = "0x1CB747C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F80", Offset = "0x10C6F80")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event PlaylistEndedEventHandler PlaylistEnded
		{
			[Token(Token = "0x6001E3D")]
			[Address(RVA = "0x1CB7520", Offset = "0x1CB7520", VA = "0x1CB7520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6F90", Offset = "0x10C6F90")]
			add
			{
			}
			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0x1CB75C4", Offset = "0x1CB75C4", VA = "0x1CB75C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x10C6FA0", Offset = "0x10C6FA0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x1CB7668", Offset = "0x1CB7668", VA = "0x1CB7668")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x1CB7CE0", Offset = "0x1CB7CE0", VA = "0x1CB7CE0")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x1CB7EFC", Offset = "0x1CB7EFC", VA = "0x1CB7EFC")]
		private void DetectAndRescheduleNextGaplessSongIfOff()
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x1CB865C", Offset = "0x1CB865C", VA = "0x1CB865C")]
		private MusicSetting FindSongByAliasOrName(string clipName)
		{
			return null;
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x1CB87D4", Offset = "0x1CB87D4", VA = "0x1CB87D4")]
		private void SetAudiosIfEmpty()
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x1CB7E4C", Offset = "0x1CB7E4C", VA = "0x1CB7E4C")]
		private void SetAudioSpatialBlend(float blend)
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x1CB886C", Offset = "0x1CB886C", VA = "0x1CB886C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x1CB8B58", Offset = "0x1CB8B58", VA = "0x1CB8B58")]
		private void AutoStartPlaylist()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x1CB8C90", Offset = "0x1CB8C90", VA = "0x1CB8C90")]
		private void CoUpdate()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x1CB9160", Offset = "0x1CB9160", VA = "0x1CB9160")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x1CB926C", Offset = "0x1CB926C", VA = "0x1CB926C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x1CB95BC", Offset = "0x1CB95BC", VA = "0x1CB95BC")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x1CB95C8", Offset = "0x1CB95C8", VA = "0x1CB95C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x1CBB11C", Offset = "0x1CBB11C", VA = "0x1CBB11C")]
		public static PlaylistController InstanceByName(string playlistControllerName, bool errorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x1CBB4A8", Offset = "0x1CBB4A8", VA = "0x1CBB4A8")]
		public bool IsSongPlaying(string songName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x1CBB624", Offset = "0x1CBB624", VA = "0x1CBB624")]
		public void ClearQueue()
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x1CBB6D4", Offset = "0x1CBB6D4", VA = "0x1CBB6D4")]
		public void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x1CB8BB8", Offset = "0x1CB8BB8", VA = "0x1CB8BB8")]
		public void MutePlaylist()
		{
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x1CBB788", Offset = "0x1CBB788", VA = "0x1CBB788")]
		public void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0x1CBB900", Offset = "0x1CBB900", VA = "0x1CBB900")]
		public void PausePlaylist()
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x1CBBB0C", Offset = "0x1CBBB0C", VA = "0x1CBBB0C")]
		public bool UnpausePlaylist()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x1CB9020", Offset = "0x1CB9020", VA = "0x1CB9020")]
		public void StopPlaylist(bool onlyFadingClip = false)
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x1CBC278", Offset = "0x1CBC278", VA = "0x1CBC278")]
		public void FadeToVolume(float targetVolume, float fadeTime, [Optional] Action callback)
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x1CBC3BC", Offset = "0x1CBC3BC", VA = "0x1CBC3BC")]
		public void PlayRandomSong()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x1CBC450", Offset = "0x1CBC450", VA = "0x1CBC450")]
		public void PlayARandomSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x1CBC654", Offset = "0x1CBC654", VA = "0x1CBC654")]
		private void RemoveRandomClip(int randIndex)
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x1CBC8D0", Offset = "0x1CBC8D0", VA = "0x1CBC8D0")]
		private void PlayFirstQueuedSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0x1CBCA14", Offset = "0x1CBCA14", VA = "0x1CBCA14")]
		public void PlayNextSong()
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x1CBCAA8", Offset = "0x1CBCAA8", VA = "0x1CBCAA8")]
		public void PlayTheNextSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x1CBCC78", Offset = "0x1CBCC78", VA = "0x1CBCC78")]
		private void AdvanceSongCounter()
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x1CBCCEC", Offset = "0x1CBCCEC", VA = "0x1CBCCEC")]
		public void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x1CBCEE8", Offset = "0x1CBCEE8", VA = "0x1CBCEE8")]
		public void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x1CBD09C", Offset = "0x1CBD09C", VA = "0x1CBD09C")]
		public void QueuePlaylistClip(string clipName, bool scheduleNow = true)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0x1CBD47C", Offset = "0x1CBD47C", VA = "0x1CBD47C")]
		public bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0x1CBD7A0", Offset = "0x1CBD7A0", VA = "0x1CBD7A0")]
		public void EndDucking(SoundGroupVariationUpdater actorUpdater)
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0x1CBD840", Offset = "0x1CBD840", VA = "0x1CBD840")]
		public void DuckMusicForTime(SoundGroupVariationUpdater actorUpdater, float duckLength, float unduckTime, float pitch, float duckedTimePercentage, float duckedVolCut)
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0x1CBD9E8", Offset = "0x1CBD9E8", VA = "0x1CBD9E8")]
		private void InitControllerIfNot()
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x1CB8EF0", Offset = "0x1CB8EF0", VA = "0x1CB8EF0")]
		public void UpdateMasterVolume()
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x1CBDA84", Offset = "0x1CBDA84", VA = "0x1CBDA84")]
		public void StartPlaylist(string playlistName, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x1CBDC10", Offset = "0x1CBDC10", VA = "0x1CBDC10")]
		public void ChangePlaylist(string playlistName, bool playFirstClip = true, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x1CBC0D0", Offset = "0x1CBC0D0", VA = "0x1CBC0D0")]
		private void FinishPlaylistInit(bool playFirstClip = true, [Optional] string clipName)
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x1CBDB68", Offset = "0x1CBDB68", VA = "0x1CBDB68")]
		public void RestartPlaylist([Optional] string clipName)
		{
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x1CBDD80", Offset = "0x1CBDD80", VA = "0x1CBDD80")]
		private void CheckIfPlaylistStarted()
		{
		}

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x1CBDEB0", Offset = "0x1CBDEB0", VA = "0x1CBDEB0")]
		private PlaylistController FindOtherControllerInSameSyncGroup()
		{
			return null;
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x1CBAF08", Offset = "0x1CBAF08", VA = "0x1CBAF08")]
		private void FadeOutPlaylist()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x1CB8A84", Offset = "0x1CB8A84", VA = "0x1CB8A84")]
		private void InitializePlaylist()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x1CB8BE8", Offset = "0x1CB8BE8", VA = "0x1CB8BE8")]
		private void PlayNextOrRandom(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x1CBACCC", Offset = "0x1CBACCC", VA = "0x1CBACCC")]
		private void FirePlaylistEndedEventIfAny()
		{
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x1CBC6F4", Offset = "0x1CBC6F4", VA = "0x1CBC6F4")]
		private void FillClips()
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x1CBA048", Offset = "0x1CBA048", VA = "0x1CBA048")]
		private void PlaySong(MusicSetting setting, AudioPlayType playType, bool isLoopSectionSchedule, bool isQueuedSong = false)
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x1CBEE68", Offset = "0x1CBEE68", VA = "0x1CBEE68")]
		public double? ScheduledGaplessNextSongStartTime()
		{
			return null;
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x1CBE244", Offset = "0x1CBE244", VA = "0x1CBE244")]
		public void FinishLoadingNewSong(MusicSetting songSetting, AudioClip clipToPlay, AudioPlayType playType)
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x1CBF148", Offset = "0x1CBF148", VA = "0x1CBF148")]
		private void RemoveScheduledClip()
		{
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x1CBD094", Offset = "0x1CBD094", VA = "0x1CBD094")]
		private void ScheduleNextSong()
		{
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x1CBB010", Offset = "0x1CBB010", VA = "0x1CBB010")]
		private void FadeInScheduledSong()
		{
		}

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x1CBEF28", Offset = "0x1CBEF28", VA = "0x1CBEF28")]
		private double CalculateNextTrackStartTimeOffset()
		{
			return default(double);
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x1CBF1F0", Offset = "0x1CBF1F0", VA = "0x1CBF1F0")]
		private double GetClipDuration(AudioSource src)
		{
			return default(double);
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x1CBF2A4", Offset = "0x1CBF2A4", VA = "0x1CBF2A4")]
		private double? GetLatestEndTime(AudioSource src)
		{
			return null;
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x1CB82E4", Offset = "0x1CB82E4", VA = "0x1CB82E4")]
		private void ScheduleClipPlay(double scheduledPlayTimeOffset, AudioSource source, bool calledAfterPause, bool addDspTime = true)
		{
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x1CBF00C", Offset = "0x1CBF00C", VA = "0x1CBF00C")]
		private void CrossFadeNow(AudioSource audioClip)
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x1CBA700", Offset = "0x1CBA700", VA = "0x1CBA700")]
		private void CeaseAudioSource(AudioSource source)
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x1CBAB1C", Offset = "0x1CBAB1C", VA = "0x1CBAB1C")]
		private void SetDuckProperties()
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x1CBB018", Offset = "0x1CBB018", VA = "0x1CBB018")]
		private void AudioDucking()
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x1CBF48C", Offset = "0x1CBF48C", VA = "0x1CBF48C")]
		private void ResetDuckingState()
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x1CBE0FC", Offset = "0x1CBE0FC", VA = "0x1CBE0FC")]
		private bool SongShouldLoop(MusicSetting setting)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0x1CBF724", Offset = "0x1CBF724", VA = "0x1CBF724")]
		public void RouteToMixerChannel(AudioMixerGroup group)
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0x1CBF838", Offset = "0x1CBF838", VA = "0x1CBF838")]
		public PlaylistController()
		{
		}
	}
	[Token(Token = "0x2000481")]
	public static class SpatializerHelper
	{
		[Token(Token = "0x40016F0")]
		private const string OculusSpatializer = "OculusSpatializer";

		[Token(Token = "0x40016F1")]
		private const string ResonanceAudioSpatializer = "Resonance Audio";

		[Token(Token = "0x17000534")]
		public static bool IsSupportedSpatializer
		{
			[Token(Token = "0x6001EB9")]
			[Address(RVA = "0x22A4520", Offset = "0x22A4520", VA = "0x22A4520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000535")]
		public static bool IsOculusAudioSpatializer
		{
			[Token(Token = "0x6001EBA")]
			[Address(RVA = "0x22A45BC", Offset = "0x22A45BC", VA = "0x22A45BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000536")]
		public static bool IsResonanceAudioSpatializer
		{
			[Token(Token = "0x6001EBB")]
			[Address(RVA = "0x22A460C", Offset = "0x22A460C", VA = "0x22A460C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000537")]
		public static string SelectedSpatializer
		{
			[Token(Token = "0x6001EBC")]
			[Address(RVA = "0x22A45B4", Offset = "0x22A45B4", VA = "0x22A45B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x229DBD0", Offset = "0x229DBD0", VA = "0x229DBD0")]
		public static void TurnOnSpatializerIfEnabled(AudioSource source)
		{
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x22A465C", Offset = "0x22A465C", VA = "0x22A465C")]
		private static void SetSpatializerToggleOnSource(AudioSource source, bool enabled)
		{
		}
	}
	[Token(Token = "0x2000482")]
	public static class UtilStrings
	{
		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x2EB5D90", Offset = "0x2EB5D90", VA = "0x2EB5D90")]
		public static string TrimSpace(string untrimmed)
		{
			return null;
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x2EB5E0C", Offset = "0x2EB5E0C", VA = "0x2EB5E0C")]
		public static string ReplaceUnsafeChars(string source)
		{
			return null;
		}
	}
}
namespace DarkTonic.MasterAudio.Examples
{
	[Token(Token = "0x2000483")]
	public class MA_Bootstrapper : MonoBehaviour
	{
		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x15BB88C", Offset = "0x15BB88C", VA = "0x15BB88C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x15BB890", Offset = "0x15BB890", VA = "0x15BB890")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x15BB9D0", Offset = "0x15BB9D0", VA = "0x15BB9D0")]
		public MA_Bootstrapper()
		{
		}
	}
	[Token(Token = "0x2000484")]
	public class MA_DestroyFinishedParticle : MonoBehaviour
	{
		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x15BB9D8", Offset = "0x15BB9D8", VA = "0x15BB9D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x15BBA44", Offset = "0x15BBA44", VA = "0x15BBA44")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x15BBAE0", Offset = "0x15BBAE0", VA = "0x15BBAE0")]
		public MA_DestroyFinishedParticle()
		{
		}
	}
	[Token(Token = "0x2000485")]
	public class MA_EnemyOne : MonoBehaviour
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ExplosionParticlePrefab;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _speed;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _horizSpeed;

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x15BBAE8", Offset = "0x15BBAE8", VA = "0x15BBAE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x15BBBDC", Offset = "0x15BBBDC", VA = "0x15BBBDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x15BBD18", Offset = "0x15BBD18", VA = "0x15BBD18")]
		public MA_EnemyOne()
		{
		}
	}
	[Token(Token = "0x2000486")]
	public class MA_EnemySpawner : MonoBehaviour
	{
		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Enemy;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool spawnerEnabled;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform trans;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float nextSpawnTime;

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x15BBD20", Offset = "0x15BBD20", VA = "0x15BBD20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x15BBD98", Offset = "0x15BBD98", VA = "0x15BBD98")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x15BBF40", Offset = "0x15BBF40", VA = "0x15BBF40")]
		public MA_EnemySpawner()
		{
		}
	}
	[Token(Token = "0x2000487")]
	public class MA_GameScene : MonoBehaviour
	{
		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0x15BBF48", Offset = "0x15BBF48", VA = "0x15BBF48")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x15BBFFC", Offset = "0x15BBFFC", VA = "0x15BBFFC")]
		public MA_GameScene()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class MA_Laser : MonoBehaviour
	{
		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _trans;

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x15BC004", Offset = "0x15BC004", VA = "0x15BC004")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x15BC0A8", Offset = "0x15BC0A8", VA = "0x15BC0A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x15BC190", Offset = "0x15BC190", VA = "0x15BC190")]
		public MA_Laser()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public class MA_LocalizationUI : MonoBehaviour
	{
		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x15BC198", Offset = "0x15BC198", VA = "0x15BC198")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x15BC24C", Offset = "0x15BC24C", VA = "0x15BC24C")]
		public MA_LocalizationUI()
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class MA_PlayerControl : MonoBehaviour
	{
		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canShoot;

		[Token(Token = "0x40016FE")]
		private const float MoveSpeed = 10f;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _trans;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _lastMoveAmt;

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x15BC254", Offset = "0x15BC254", VA = "0x15BC254")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x15BC2F8", Offset = "0x15BC2F8", VA = "0x15BC2F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0x15BC2FC", Offset = "0x15BC2FC", VA = "0x15BC2FC")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x15BC300", Offset = "0x15BC300", VA = "0x15BC300")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x15BC304", Offset = "0x15BC304", VA = "0x15BC304")]
		private void Update()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x15BD530", Offset = "0x15BD530", VA = "0x15BD530")]
		public MA_PlayerControl()
		{
		}
	}
	[Token(Token = "0x200048B")]
	public class MA_PlayerSpawnerControl : MonoBehaviour
	{
		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Player;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x17000538")]
		private bool PlayerActive
		{
			[Token(Token = "0x6001EDB")]
			[Address(RVA = "0x15BD570", Offset = "0x15BD570", VA = "0x15BD570")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x15BD540", Offset = "0x15BD540", VA = "0x15BD540")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x15BD58C", Offset = "0x15BD58C", VA = "0x15BD58C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x15BD610", Offset = "0x15BD610", VA = "0x15BD610")]
		public MA_PlayerSpawnerControl()
		{
		}
	}
	[Token(Token = "0x200048C")]
	public class MA_SampleICustomEventReceiver : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> _eventsSubscribedTo;

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x15BD618", Offset = "0x15BD618", VA = "0x15BD618")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x15BD61C", Offset = "0x15BD61C", VA = "0x15BD61C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x15BD78C", Offset = "0x15BD78C", VA = "0x15BD78C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x15BD808", Offset = "0x15BD808", VA = "0x15BD808")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x15BD620", Offset = "0x15BD620", VA = "0x15BD620", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x15BDCBC", Offset = "0x15BDCBC", VA = "0x15BDCBC", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x15BDE08", Offset = "0x15BDE08", VA = "0x15BDE08", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x15BD790", Offset = "0x15BD790", VA = "0x15BD790", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x15BDAE8", Offset = "0x15BDAE8", VA = "0x15BDAE8", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x15BE7D0", Offset = "0x15BE7D0", VA = "0x15BE7D0", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x15BE920", Offset = "0x15BE920", VA = "0x15BE920")]
		public MA_SampleICustomEventReceiver()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class MA_TestUI : MonoBehaviour
	{
		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x15BEA10", Offset = "0x15BEA10", VA = "0x15BEA10")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x15BEAC4", Offset = "0x15BEAC4", VA = "0x15BEAC4")]
		public MA_TestUI()
		{
		}
	}
}
namespace CafofoStudio
{
	[Token(Token = "0x200048E")]
	public class CityAmbientMixer : AmbienceMixer<CityAmbientPreset>
	{
		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SoundElement _traffic;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SoundElement _vehicles;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SoundElement _crowd;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SoundElement _construction;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private SoundElement _birds;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private SoundElement _rain;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SoundElement> allSounds;

		[Token(Token = "0x17000539")]
		public SoundElement Traffic
		{
			[Token(Token = "0x6001EEB")]
			[Address(RVA = "0x25416E0", Offset = "0x25416E0", VA = "0x25416E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EEC")]
			[Address(RVA = "0x25416E8", Offset = "0x25416E8", VA = "0x25416E8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053A")]
		public SoundElement Vehicles
		{
			[Token(Token = "0x6001EED")]
			[Address(RVA = "0x25416F0", Offset = "0x25416F0", VA = "0x25416F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EEE")]
			[Address(RVA = "0x25416F8", Offset = "0x25416F8", VA = "0x25416F8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053B")]
		public SoundElement Crowd
		{
			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0x2541700", Offset = "0x2541700", VA = "0x2541700")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF0")]
			[Address(RVA = "0x2541708", Offset = "0x2541708", VA = "0x2541708")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053C")]
		public SoundElement Construction
		{
			[Token(Token = "0x6001EF1")]
			[Address(RVA = "0x2541710", Offset = "0x2541710", VA = "0x2541710")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF2")]
			[Address(RVA = "0x2541718", Offset = "0x2541718", VA = "0x2541718")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053D")]
		public SoundElement Birds
		{
			[Token(Token = "0x6001EF3")]
			[Address(RVA = "0x2541720", Offset = "0x2541720", VA = "0x2541720")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF4")]
			[Address(RVA = "0x2541728", Offset = "0x2541728", VA = "0x2541728")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053E")]
		public SoundElement Rain
		{
			[Token(Token = "0x6001EF5")]
			[Address(RVA = "0x2541730", Offset = "0x2541730", VA = "0x2541730")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001EF6")]
			[Address(RVA = "0x2541738", Offset = "0x2541738", VA = "0x2541738")]
			private set
			{
			}
		}

		[Token(Token = "0x1700053F")]
		protected override List<SoundElement> elements
		{
			[Token(Token = "0x6001EF7")]
			[Address(RVA = "0x2541740", Offset = "0x2541740", VA = "0x2541740", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x2541804", Offset = "0x2541804", VA = "0x2541804")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x2541884", Offset = "0x2541884", VA = "0x2541884", Slot = "5")]
		public override void ApplyPreset(CityAmbientPreset selectedPreset)
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x2541920", Offset = "0x2541920", VA = "0x2541920")]
		public CityAmbientMixer()
		{
		}
	}
	[Token(Token = "0x200048F")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x10AD2D4", Offset = "0x10AD2D4")]
	public class CityAmbientPreset : AmbientPreset
	{
		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFFDC", Offset = "0x10BFFDC")]
		public float trafficIntensity;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10BFFF4", Offset = "0x10BFFF4")]
		public float trafficVolumeMultiplier;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C000C", Offset = "0x10C000C")]
		public float vehicleIntensity;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C0024", Offset = "0x10C0024")]
		public float vehicleVolumeMultiplier;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C003C", Offset = "0x10C003C")]
		public float crowdIntensity;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C0054", Offset = "0x10C0054")]
		public float crowdVolumeMultiplier;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C006C", Offset = "0x10C006C")]
		public float constructionIntensity;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C0084", Offset = "0x10C0084")]
		public float constructionVolumeMultiplier;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C009C", Offset = "0x10C009C")]
		public float birdsIntensity;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C00B4", Offset = "0x10C00B4")]
		public float birdsVolumeMultiplier;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C00CC", Offset = "0x10C00CC")]
		public float rainIntensity;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x10C00E4", Offset = "0x10C00E4")]
		public float rainVolumeMultiplier;

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x254196C", Offset = "0x254196C", VA = "0x254196C")]
		public CityAmbientPreset()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public abstract class AmbienceMixer<P> : MonoBehaviour where P : AmbientPreset
	{
		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool playOnAwake;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public List<P> presets;

		[Token(Token = "0x17000540")]
		[SerializeField]
		protected abstract List<SoundElement> elements
		{
			[Token(Token = "0x6001EFC")]
			get;
		}

		[Token(Token = "0x6001EFD")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001EFE")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EFF")]
		public void Play()
		{
		}

		[Token(Token = "0x6001F00")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001F01")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F02")]
		public abstract void ApplyPreset(P selectedPreset);

		[Token(Token = "0x6001F03")]
		protected AmbienceMixer()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public abstract class AmbientPreset : ScriptableObject
	{
		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string presetName;

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x2003580", Offset = "0x2003580", VA = "0x2003580")]
		protected AmbientPreset()
		{
		}
	}
	[Token(Token = "0x2000492")]
	public interface ISoundSubElement
	{
		[Token(Token = "0x6001F05")]
		void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer);

		[Token(Token = "0x6001F06")]
		void CalculateIntensity(float intensity, float volumeMultiplier);

		[Token(Token = "0x6001F07")]
		void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer);

		[Token(Token = "0x6001F08")]
		void Play();

		[Token(Token = "0x6001F09")]
		void Stop();
	}
	[Serializable]
	[Token(Token = "0x2000493")]
	public class SoundElement
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string soundName;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioMixerGroup overrideOutputMixer;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float intensity;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string maxIntensityLabel;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string minIntensityLabel;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float volumeMultiplier;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<SoundSubElementSample> sampleSubElements;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private List<SoundSubElementLoop> loopSubElements;

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x229B49C", Offset = "0x229B49C", VA = "0x229B49C")]
		public void InitializeAudioSources(GameObject parent)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x229B9E8", Offset = "0x229B9E8", VA = "0x229B9E8")]
		private void CalculateIntensity()
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x229BDC8", Offset = "0x229BDC8", VA = "0x229BDC8")]
		public void UpdateSampleTimer()
		{
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x229BEF4", Offset = "0x229BEF4", VA = "0x229BEF4")]
		public void SetIntensity(float intensity)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x229BF20", Offset = "0x229BF20", VA = "0x229BF20")]
		public float GetIntensity()
		{
			return default(float);
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x229BF28", Offset = "0x229BF28", VA = "0x229BF28")]
		public void SetVolumeMultiplier(float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x229C060", Offset = "0x229C060", VA = "0x229C060")]
		public float GetVolumeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x229C068", Offset = "0x229C068", VA = "0x229C068")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x229C4B0", Offset = "0x229C4B0", VA = "0x229C4B0")]
		public AudioMixerGroup GetOutputMixerGroup()
		{
			return null;
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x229C4B8", Offset = "0x229C4B8", VA = "0x229C4B8")]
		public void Play()
		{
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x229C818", Offset = "0x229C818", VA = "0x229C818")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x229CB70", Offset = "0x229CB70", VA = "0x229CB70")]
		public SoundElement()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000494")]
	public class SoundSubElementLoop : ISoundSubElement
	{
		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<AudioClip> audioClips;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<AudioSource> loopAudioSources;

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0x229B700", Offset = "0x229B700", VA = "0x229B700", Slot = "4")]
		public void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer)
		{
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0x229BC34", Offset = "0x229BC34", VA = "0x229BC34", Slot = "5")]
		public void CalculateIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0x229C2D0", Offset = "0x229C2D0", VA = "0x229C2D0", Slot = "6")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x229C6F8", Offset = "0x229C6F8", VA = "0x229C6F8", Slot = "7")]
		public void Play()
		{
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x229CA54", Offset = "0x229CA54", VA = "0x229CA54", Slot = "8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x22A4244", Offset = "0x22A4244", VA = "0x22A4244")]
		public SoundSubElementLoop()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000495")]
	public class SoundSubElementSample : ISoundSubElement
	{
		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<AudioClip> audioClips;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10C01AC", Offset = "0x10C01AC")]
		public float maxSampleFrequency;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10C01E4", Offset = "0x10C01E4")]
		public float maxSampleFrequencyDelta;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10C021C", Offset = "0x10C021C")]
		public float minSampleFrequency;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x10C0254", Offset = "0x10C0254")]
		public float minSampleFrequencyDelta;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float nextSampleCountdown;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<AudioSource> audioSourcePool;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isPlaying;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject mParentGO;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioMixerGroup mOutputMixer;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource tempSource;

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x229B940", Offset = "0x229B940", VA = "0x229B940", Slot = "4")]
		public void InitializeAudioSources(GameObject parent, AudioMixerGroup outputMixer)
		{
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x229BD4C", Offset = "0x229BD4C", VA = "0x229BD4C", Slot = "5")]
		public void CalculateIntensity(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x229BE6C", Offset = "0x229BE6C", VA = "0x229BE6C")]
		public void UpdateSampleTimer(float intensity, float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x22A424C", Offset = "0x22A424C", VA = "0x22A424C")]
		private void PlayAnySample(float volumeMultiplier)
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x22A4374", Offset = "0x22A4374", VA = "0x22A4374")]
		private AudioSource GetAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x229C378", Offset = "0x229C378", VA = "0x229C378", Slot = "6")]
		public void SetOutputMixerGroup(AudioMixerGroup overrideOutputMixer)
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x229C80C", Offset = "0x229C80C", VA = "0x229C80C", Slot = "7")]
		public void Play()
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x229CB68", Offset = "0x229CB68", VA = "0x229CB68", Slot = "8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x22A4518", Offset = "0x22A4518", VA = "0x22A4518")]
		public SoundSubElementSample()
		{
		}
	}
}
