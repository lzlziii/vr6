using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading;
using Il2CppDummyDll;
using InteractionEngineUtility;
using Leap;
using Leap.Unity;
using Leap.Unity.AR.Testing;
using Leap.Unity.Animation;
using Leap.Unity.Animation.Internal;
using Leap.Unity.Attributes;
using Leap.Unity.Encoding;
using Leap.Unity.Generation;
using Leap.Unity.GraphicalRenderer;
using Leap.Unity.HyperMegaStuff;
using Leap.Unity.Interaction;
using Leap.Unity.Interaction.Internal;
using Leap.Unity.Query;
using Leap.Unity.Recording;
using Leap.Unity.RuntimeGizmos;
using Leap.Unity.Space;
using LeapInternal;
using NLayer;
using OpenCvSharp;
using RootMotion.FinalIK;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Profiling;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.XR;
using uAudio;
using uAudio.uAudio_backend;
using uAudioDemo.Mp3StreamingDemo;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class HxSimpleRotate : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 RotateSpeed;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1418978", Offset = "0x1418978", VA = "0x1418978")]
	private void Update()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1418A38", Offset = "0x1418A38", VA = "0x1418A38")]
	public HxSimpleRotate()
	{
	}
}
[Token(Token = "0x2000003")]
[ExecuteInEditMode]
public class HxDensityVolume : MonoBehaviour
{
	[Token(Token = "0x20004E9")]
	public enum DensityBlendMode
	{
		[Token(Token = "0x4001BE5")]
		Max,
		[Token(Token = "0x4001BE6")]
		Add,
		[Token(Token = "0x4001BE7")]
		Min,
		[Token(Token = "0x4001BE8")]
		Sub
	}

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HxOctree<HxDensityVolume> DensityOctree;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HxOctreeNode<HxDensityVolume>.NodeObject octreeNode;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DensityBlendMode BlendMode;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public Vector3 minBounds;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Vector3 maxBounds;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public Matrix4x4 ToLocalSpace;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float Density;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Color gizmoColor;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Vector3 c1;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static Vector3 c2;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 c3;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static Vector3 c4;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static Vector3 c5;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static Vector3 c6;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static Vector3 c7;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private static Vector3 c8;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x1417C6C", Offset = "0x1417C6C", VA = "0x1417C6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x1418240", Offset = "0x1418240", VA = "0x1418240")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x14182B0", Offset = "0x14182B0", VA = "0x14182B0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x14183D8", Offset = "0x14183D8", VA = "0x14183D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x14184D8", Offset = "0x14184D8", VA = "0x14184D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x14185D8", Offset = "0x14185D8", VA = "0x14185D8")]
	public void UpdateVolume()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x1417DE0", Offset = "0x1417DE0", VA = "0x1417DE0")]
	private void CalculateBounds()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x14186B4", Offset = "0x14186B4", VA = "0x14186B4")]
	public HxDensityVolume()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42000", Offset = "0xB42000")]
public class HxDummyLight : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightType type;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float range;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47BFC", Offset = "0xB47BFC")]
	public float spotAngle;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color color;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47C18", Offset = "0xB47C18")]
	public float intensity;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture cookie;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x1418924", Offset = "0x1418924", VA = "0x1418924")]
	public void Update()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x1418928", Offset = "0x1418928", VA = "0x1418928")]
	public HxDummyLight()
	{
	}
}
[Token(Token = "0x2000005")]
public class HxOctree<T>
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47C30", Offset = "0xB47C30")]
	private int <Count>k__BackingField;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private HxOctreeNode<T> Root;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float Overlap;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float InitialSize;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float MinNodeSize;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Dictionary<T, HxOctreeNode<T>.NodeObject> NodeMap;

	[Token(Token = "0x17000001")]
	public int Count
	{
		[Token(Token = "0x600000E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB597D4", Offset = "0xB597D4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600000F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB597E4", Offset = "0xB597E4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000010")]
	public HxOctree([Optional] Vector3 origin, float initialSize = 10f, float overlap = 0f, float minNodeSize = 1f)
	{
	}

	[Token(Token = "0x6000011")]
	public HxOctreeNode<T>.NodeObject Add(T value, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000012")]
	public void Print()
	{
	}

	[Token(Token = "0x6000013")]
	public void Move(HxOctreeNode<T>.NodeObject value, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000014")]
	public void Move(T value, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000015")]
	public void TryShrink()
	{
	}

	[Token(Token = "0x6000016")]
	public bool Remove(T value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000017")]
	private void ExpandRoot(Vector3 center)
	{
	}

	[Token(Token = "0x6000018")]
	public void GetObjects(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000019")]
	public void GetObjectsBoundsPlane(ref Plane[] planes, Vector3 min, Vector3 max, List<T> items)
	{
	}

	[Token(Token = "0x600001A")]
	public void Draw()
	{
	}
}
[Serializable]
[Token(Token = "0x2000006")]
public class HxOctreeNode<T>
{
	[Serializable]
	[Token(Token = "0x20004EA")]
	public class NodeObject
	{
		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HxOctreeNode<T> Node;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Value;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 BoundsMin;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 BoundsMax;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Center;

		[Token(Token = "0x60024B3")]
		public NodeObject(T value, Vector3 boundsMin, Vector3 boundsMax)
		{
		}
	}

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47C40", Offset = "0xB47C40")]
	private Vector3 <Origin>k__BackingField;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47C50", Offset = "0xB47C50")]
	private float <Size>k__BackingField;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public HxOctreeNode<T> Parent;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float MinSize;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float Overlap;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float SizeWithOverlap;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 BoundsMin;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 BoundsMax;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly List<NodeObject> Objects;

	[Token(Token = "0x4000027")]
	private const int MaxObjectCount = 8;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public HxOctreeNode<T>[] Children;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector3[] ChildrenBoundsMin;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector3[] ChildrenBoundsMax;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int ID;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _idCtr;

	[Token(Token = "0x17000002")]
	public Vector3 Origin
	{
		[Token(Token = "0x600001B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB597F4", Offset = "0xB597F4")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600001C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59804", Offset = "0xB59804")]
		private set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public float Size
	{
		[Token(Token = "0x600001D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59814", Offset = "0xB59814")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600001E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59824", Offset = "0xB59824")]
		private set
		{
		}
	}

	[Token(Token = "0x600001F")]
	public HxOctreeNode(float size, float overlap, float minSize, Vector3 origin, HxOctreeNode<T> parent)
	{
	}

	[Token(Token = "0x6000020")]
	private void Init(float size, float overlap, float minSize, Vector3 origin, HxOctreeNode<T> parent)
	{
	}

	[Token(Token = "0x6000021")]
	public void Add(NodeObject node)
	{
	}

	[Token(Token = "0x6000022")]
	public bool Remove(T value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000023")]
	public void GetObjects(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000024")]
	public void GetObjects2(Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000025")]
	public void GetObjects2BoundsPlane(ref Plane[] planes, Vector3 boundsMin, Vector3 boundsMax, List<T> items)
	{
	}

	[Token(Token = "0x6000026")]
	private void DrawBounds(Vector3 min, Vector3 max)
	{
	}

	[Token(Token = "0x6000027")]
	private int BoundsInPlanes(Vector3 min, Vector3 max, ref Plane[] planes)
	{
		return default(int);
	}

	[Token(Token = "0x6000028")]
	private bool ObjectInPlanes(Vector3 min, Vector3 max, ref Plane[] planes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000029")]
	private Vector3 GetVertexP(Vector3 min, Vector3 max, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002A")]
	private Vector3 GetVertexN(Vector3 min, Vector3 max, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002B")]
	private void addAllObjectsToList(List<T> items)
	{
	}

	[Token(Token = "0x600002C")]
	private void addAllObjectsToList(List<T> items, ref Vector3 min, ref Vector3 max)
	{
	}

	[Token(Token = "0x600002D")]
	public HxOctreeNode<T> TryShrink(float minSize)
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	private Vector3 GetVertexP(Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600002F")]
	private bool HasObjects()
	{
		return default(bool);
	}

	[Token(Token = "0x6000030")]
	public static bool BoundsIntersects(Vector3 aMin, Vector3 aMax, Vector3 bMin, Vector3 bMax)
	{
		return default(bool);
	}

	[Token(Token = "0x6000031")]
	public static bool BoundsContains(Vector3 outerMin, Vector3 outerMax, Vector3 innerMin, Vector3 innerMax)
	{
		return default(bool);
	}

	[Token(Token = "0x6000032")]
	private int OctantIndex(Vector3 point)
	{
		return default(int);
	}

	[Token(Token = "0x6000033")]
	public void Draw(int counter = 0)
	{
	}
}
[Token(Token = "0x2000007")]
[ExecuteInEditMode]
public class HxVolumetricCamera : MonoBehaviour
{
	[Token(Token = "0x20004EB")]
	public enum hxRenderOrder
	{
		[Token(Token = "0x4001BEF")]
		ImageEffect,
		[Token(Token = "0x4001BF0")]
		ImageEffectOpaque
	}

	[Token(Token = "0x20004EC")]
	public enum TransparencyQualities
	{
		[Token(Token = "0x4001BF2")]
		Low,
		[Token(Token = "0x4001BF3")]
		Medium,
		[Token(Token = "0x4001BF4")]
		High,
		[Token(Token = "0x4001BF5")]
		VeryHigh
	}

	[Token(Token = "0x20004ED")]
	public enum DensityParticleQualities
	{
		[Token(Token = "0x4001BF7")]
		Low,
		[Token(Token = "0x4001BF8")]
		Medium,
		[Token(Token = "0x4001BF9")]
		High,
		[Token(Token = "0x4001BFA")]
		VeryHigh
	}

	[Token(Token = "0x20004EE")]
	public enum HxAmbientMode
	{
		[Token(Token = "0x4001BFC")]
		UseRenderSettings,
		[Token(Token = "0x4001BFD")]
		Color,
		[Token(Token = "0x4001BFE")]
		Gradient
	}

	[Token(Token = "0x20004EF")]
	public enum HxTintMode
	{
		[Token(Token = "0x4001C00")]
		Off,
		[Token(Token = "0x4001C01")]
		Color,
		[Token(Token = "0x4001C02")]
		Edge,
		[Token(Token = "0x4001C03")]
		Gradient
	}

	[Token(Token = "0x20004F0")]
	public enum Resolution
	{
		[Token(Token = "0x4001C05")]
		full,
		[Token(Token = "0x4001C06")]
		half,
		[Token(Token = "0x4001C07")]
		quarter
	}

	[Token(Token = "0x20004F1")]
	public enum DensityResolution
	{
		[Token(Token = "0x4001C09")]
		full,
		[Token(Token = "0x4001C0A")]
		half,
		[Token(Token = "0x4001C0B")]
		quarter,
		[Token(Token = "0x4001C0C")]
		eighth
	}

	[Token(Token = "0x20004F2")]
	private struct TriangleIndices
	{
		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int v1;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int v2;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int v3;

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x16CEF0C", Offset = "0x16CEF0C", VA = "0x16CEF0C")]
		public TriangleIndices(int v1, int v2, int v3)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004F3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB470B4", Offset = "0xB470B4")]
	private sealed class <>c
	{
		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<HxDensityVolume> <>9__219_0;

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0x16CEEC4", Offset = "0x16CEEC4", VA = "0x16CEEC4")]
		public <>c()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0x16CEECC", Offset = "0x16CEECC", VA = "0x16CEECC")]
		internal int <FindActiveLights>b__219_0(HxDensityVolume a, HxDensityVolume b)
		{
			return default(int);
		}
	}

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private hxRenderOrder RenderOrder;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HxVolumetricRenderCallback callBackImageEffect;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HxVolumetricRenderCallback callBackImageEffectOpaque;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool TemporalFirst;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool TemporalSampling;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47C60", Offset = "0xB47C60")]
	public float DitherSpeed;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47C78", Offset = "0xB47C78")]
	public float FeedbackMin;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47C90", Offset = "0xB47C90")]
	public float FeedbackMax;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47CA8", Offset = "0xB47CA8")]
	public float NoiseContrast;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Shader directionalShader;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Shader pointShader;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Shader spotShader;

	[NonSerialized]
	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool FullUsed;

	[NonSerialized]
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool LowResUsed;

	[NonSerialized]
	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool HeightFogUsed;

	[NonSerialized]
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	public bool HeightFogOffUsed;

	[NonSerialized]
	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool NoiseUsed;

	[NonSerialized]
	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool NoiseOffUsed;

	[NonSerialized]
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool TransparencyUsed;

	[NonSerialized]
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	public bool TransparencyOffUsed;

	[NonSerialized]
	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool DensityParticlesUsed;

	[NonSerialized]
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool PointUsed;

	[NonSerialized]
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool SpotUsed;

	[NonSerialized]
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	public bool DirectionalUsed;

	[NonSerialized]
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool SinglePassStereoUsed;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static TransparencyQualities TransparencyBufferDepth;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static DensityParticleQualities DensityBufferDepth;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int EnumBufferDepthLength;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Matrix4x4 CurrentView;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Matrix4x4 CurrentProj;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Matrix4x4 CurrentInvers;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Matrix4x4 CurrentView2;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Matrix4x4 CurrentProj2;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Matrix4x4 CurrentInvers2;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private RenderTexture TemporalTexture;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private RenderTargetIdentifier TemporalTextureRTID;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static RenderTexture VolumetricTexture;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static RenderTexture FullBlurRT;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static RenderTargetIdentifier FullBlurRTID;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static RenderTexture downScaledBlurRT;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static RenderTargetIdentifier downScaledBlurRTID;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static RenderTexture FullBlurRT2;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static RenderTargetIdentifier FullBlurRT2ID;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static RenderTargetIdentifier[] VolumetricUpsampledBlurTextures;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static RenderTexture[] VolumetricDensityTextures;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private static int[] VolumetricDensityPID;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private static int[] VolumetricTransparencyPID;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private static RenderTexture[] VolumetricTransparencyTextures;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static RenderTargetIdentifier[][] VolumetricDensity;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static RenderTargetIdentifier[][] VolumetricTransparency;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static RenderTargetIdentifier[][] VolumetricTransparencyI;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private static RenderTexture[] ScaledDepthTexture;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private static ShaderVariantCollection CollectionAll;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static Texture2D Tile5x5;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private static int VolumetricTexturePID;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private static int ScaledDepthTexturePID;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static int ShadowMapTexturePID;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static RenderTargetIdentifier VolumetricTextureRTID;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static RenderTargetIdentifier[] ScaledDepthTextureRTID;

	[NonSerialized]
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public static Material DownSampleMaterial;

	[NonSerialized]
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public static Material VolumeBlurMaterial;

	[NonSerialized]
	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public static Material TransparencyBlurMaterial;

	[NonSerialized]
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public static Material ApplyMaterial;

	[NonSerialized]
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public static Material ApplyDirectMaterial;

	[NonSerialized]
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public static Material ApplyQueueMaterial;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public Texture3D NoiseTexture3D;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public static Matrix4x4 BlitMatrix;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public static Matrix4x4 BlitMatrixMV;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public static Matrix4x4 BlitMatrixMVP;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public static Vector3 BlitScale;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47CC0", Offset = "0xB47CC0")]
	public Resolution resolution;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47CF8", Offset = "0xB47CF8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47CF8", Offset = "0xB47CF8")]
	public int SampleCount;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47D50", Offset = "0xB47D50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47D50", Offset = "0xB47D50")]
	public int DirectionalSampleCount;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47DA8", Offset = "0xB47DA8")]
	public float MaxDirectionalRayDistance;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47DE0", Offset = "0xB47DE0")]
	public float MaxLightDistance;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47E18", Offset = "0xB47E18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47E18", Offset = "0xB47E18")]
	public float Density;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47E6C", Offset = "0xB47E6C")]
	public float AmbientLightingStrength;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47E84", Offset = "0xB47E84")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47E84", Offset = "0xB47E84")]
	public float MieScattering;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47EDC", Offset = "0xB47EDC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47EDC", Offset = "0xB47EDC")]
	public float SunSize;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47F30", Offset = "0xB47F30")]
	public bool SunBleed;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47F68", Offset = "0xB47F68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47F68", Offset = "0xB47F68")]
	public float Extinction;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB47FBC", Offset = "0xB47FBC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB47FBC", Offset = "0xB47FBC")]
	public float ExtinctionEffect;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public bool FogHeightEnabled;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
	public float FogHeight;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public float FogTransitionSize;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	public float AboveFogPercent;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48010", Offset = "0xB48010")]
	public HxAmbientMode Ambient;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	public Color AmbientSky;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	public Color AmbientEquator;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	public Color AmbientGround;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48048", Offset = "0xB48048")]
	public float AmbientIntensity;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public HxTintMode TintMode;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	public Color TintColor;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	public Color TintColor2;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	public float TintIntensity;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48060", Offset = "0xB48060")]
	public float TintGradient;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	public Vector3 CurrentTint;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public Vector3 CurrentTintEdge;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48078", Offset = "0xB48078")]
	public bool NoiseEnabled;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB480B0", Offset = "0xB480B0")]
	public Vector3 NoiseScale;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB480E8", Offset = "0xB480E8")]
	public Vector3 NoiseVelocity;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48120", Offset = "0xB48120")]
	public bool ParticleDensitySupport;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48158", Offset = "0xB48158")]
	public DensityResolution densityResolution;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48190", Offset = "0xB48190")]
	public float densityDistance;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
	private float densityBias;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB481C8", Offset = "0xB481C8")]
	public bool TransparencySupport;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48200", Offset = "0xB48200")]
	public float transparencyDistance;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48238", Offset = "0xB48238")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48238", Offset = "0xB48238")]
	public int BlurTransparency;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
	private float transparencyBias;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4828C", Offset = "0xB4828C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4828C", Offset = "0xB4828C")]
	public int blurCount;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB482E0", Offset = "0xB482E0")]
	public float BlurDepthFalloff;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48318", Offset = "0xB48318")]
	public float DownsampledBlurDepthFalloff;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48350", Offset = "0xB48350")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48350", Offset = "0xB48350")]
	public int UpSampledblurCount;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB483A4", Offset = "0xB483A4")]
	public float DepthThreshold;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB483DC", Offset = "0xB483DC")]
	public bool GaussianWeights;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31D")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48414", Offset = "0xB48414")]
	public bool MapToLDR;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48460", Offset = "0xB48460")]
	public bool RemoveColorBanding;

	[NonSerialized]
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	public Vector3 Offset;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private static int DepthThresholdPID;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private static int BlurDepthFalloffPID;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private static int VolumeScalePID;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private static int InverseViewMatrixPID;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	private static int InverseProjectionMatrixPID;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private static int InverseProjectionMatrix2PID;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	private static int NoiseOffsetPID;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private static int ShadowDistancePID;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private static HxVolumetricShadersUsed UsedShaderSettings;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private static List<string> ShaderVariantList;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[HideInInspector]
	public static List<HxDensityVolume> ActiveVolumes;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public static List<HxVolumetricLight> ActiveLights;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public static List<HxVolumetricParticleSystem> ActiveParticleSystems;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public static HxOctree<HxVolumetricLight> LightOctree;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public static HxOctree<HxVolumetricParticleSystem> ParticleOctree;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public static HashSet<HxDensityVolume> AllDensityVolumes;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	public static HashSet<HxVolumetricLight> AllVolumetricLight;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	public static HashSet<HxVolumetricParticleSystem> AllParticleSystems;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
	private bool test;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public static Mesh QuadMesh;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	public static Mesh BoxMesh;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	public static Mesh SphereMesh;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	public static Mesh SpotLightMesh;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	[HideInInspector]
	private Camera Mycamera;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private static float[] ResolutionScale;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	public static float[] SampleScale;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	private CommandBuffer BufferSetup;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	private CommandBuffer BufferRender;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	private CommandBuffer BufferRenderLights;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	private CommandBuffer BufferFinalize;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	private bool dirty;

	[NonSerialized]
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	public static bool PIDCreated;

	[NonSerialized]
	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private static Dictionary<int, Material> DirectionalMaterial;

	[NonSerialized]
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private static Dictionary<int, Material> PointMaterial;

	[NonSerialized]
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	private static Dictionary<int, Material> SpotMaterial;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	public static ShaderVariantCollection.ShaderVariant[] DirectionalVariant;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	public static ShaderVariantCollection.ShaderVariant[] PointVariant;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	public static ShaderVariantCollection.ShaderVariant[] SpotVariant;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	public static Material ShadowMaterial;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	public static Material DensityMaterial;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
	[HideInInspector]
	public Matrix4x4 MatrixVP;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
	public Matrix4x4 LastMatrixVP;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
	public Matrix4x4 LastMatrixVPInv;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
	public Matrix4x4 LastMatrixVP2;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
	public Matrix4x4 LastMatrixVPInv2;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49C")]
	[HideInInspector]
	public Matrix4x4 MatrixV;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4DC")]
	private bool OffsetUpdated;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	[HideInInspector]
	private static Texture2D _SpotLightCookie;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
	private int ParticleDensityRenderCount;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	private static Matrix4x4 particleMatrix;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	public static HxVolumetricCamera Active;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
	public static Camera ActiveCamera;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
	private CameraEvent LightRenderEvent;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
	private CameraEvent SetupEvent;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4EC")]
	private CameraEvent RenderEvent;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
	private CameraEvent FinalizeEvent;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
	public static List<HxVolumetricLight> ActiveDirectionalLights;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
	private static Vector3 MinBounds;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
	private static Vector3 MaxBounds;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
	private static Plane[] CameraPlanes;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F4")]
	private bool preCullEventAdded;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F5")]
	private bool BuffersBuilt;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F6")]
	private bool LightBufferAdded;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F7")]
	private bool SetupBufferAdded;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
	private bool SetupBufferDirty;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F9")]
	private bool FinalizeBufferAdded;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4FA")]
	private bool FinalizeBufferDirty;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4FC")]
	private CameraEvent lastApply;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
	private CameraEvent lastRender;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x504")]
	private CameraEvent lastSetup;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
	private CameraEvent lastFinalize;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50C")]
	private CameraEvent lastLightRender;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
	private bool LastPlaying;

	[NonSerialized]
	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
	private static int lastRes;

	[NonSerialized]
	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x514")]
	private int lastBlurCount;

	[NonSerialized]
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
	private int lastupSampleBlurCount;

	[NonSerialized]
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51C")]
	private int lastLDR;

	[NonSerialized]
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
	private int lastBanding;

	[NonSerialized]
	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x524")]
	private int lastH;

	[NonSerialized]
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
	private int lastW;

	[NonSerialized]
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52C")]
	private int lastPath;

	[NonSerialized]
	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
	private int lastGaussian;

	[NonSerialized]
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x534")]
	private int lastTransparency;

	[NonSerialized]
	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
	private int lastDensity;

	[NonSerialized]
	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53C")]
	private int lastDensityRes;

	[NonSerialized]
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
	private float lastDepthFalloff;

	[NonSerialized]
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x544")]
	private float lastDownDepthFalloff;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
	private float currentDitherOffset;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
	public static bool FirstDirectional;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	private static int[] Tile5x5int;

	[Token(Token = "0x17000004")]
	[HideInInspector]
	public Texture2D SpotLightCookie
	{
		[Token(Token = "0x600004B")]
		[Address(RVA = "0x141D2EC", Offset = "0x141D2EC", VA = "0x141D2EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600004C")]
		[Address(RVA = "0x141D484", Offset = "0x141D484", VA = "0x141D484")]
		set
		{
		}
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x1418A40", Offset = "0x1418A40", VA = "0x1418A40")]
	private void SetUpRenderOrder()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x1418CF0", Offset = "0x1418CF0", VA = "0x1418CF0")]
	public static Material GetDirectionalMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x1419084", Offset = "0x1419084", VA = "0x1419084")]
	public static Material GetSpotMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x1419224", Offset = "0x1419224", VA = "0x1419224")]
	public static Material GetPointMaterial(int mid)
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x14193C4", Offset = "0x14193C4", VA = "0x14193C4")]
	public TransparencyQualities compatibleTBuffer()
	{
		return default(TransparencyQualities);
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x1419490", Offset = "0x1419490", VA = "0x1419490")]
	private bool IsRenderBoth()
	{
		return default(bool);
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x141953C", Offset = "0x141953C", VA = "0x141953C")]
	private DensityParticleQualities compatibleDBuffer()
	{
		return default(DensityParticleQualities);
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x14195A4", Offset = "0x14195A4", VA = "0x14195A4")]
	private void MyPreCull(Camera cam)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x141977C", Offset = "0x141977C", VA = "0x141977C")]
	public bool renderDensityParticleCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x141978C", Offset = "0x141978C", VA = "0x141978C")]
	private void WarmUp()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x1419B1C", Offset = "0x1419B1C", VA = "0x1419B1C")]
	private void CreateShaderVariant(Shader source, int i, ref Material[] material, ref ShaderVariantCollection.ShaderVariant[] Variant, bool point = true)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x1418E88", Offset = "0x1418E88", VA = "0x1418E88")]
	private static void CreateShader(Shader source, int i, out Material outMaterial, bool point = true)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x141A064", Offset = "0x141A064", VA = "0x141A064")]
	private void CreatePIDs()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x141CBE8", Offset = "0x141CBE8", VA = "0x141CBE8")]
	public static bool ActiveFull()
	{
		return default(bool);
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x141CC64", Offset = "0x141CC64", VA = "0x141CC64")]
	private void DefineFull()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x141CC68", Offset = "0x141CC68", VA = "0x141CC68")]
	private static void UpdateLight(HxOctreeNode<HxVolumetricLight>.NodeObject node, Vector3 boundsMin, Vector3 boundsMax)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x141CD34", Offset = "0x141CD34", VA = "0x141CD34")]
	public static HxOctreeNode<HxVolumetricLight>.NodeObject AddLightOctree(HxVolumetricLight light, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x141CED8", Offset = "0x141CED8", VA = "0x141CED8")]
	public static HxOctreeNode<HxVolumetricParticleSystem>.NodeObject AddParticleOctree(HxVolumetricParticleSystem particle, Vector3 boundsMin, Vector3 boundsMax)
	{
		return null;
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x141D07C", Offset = "0x141D07C", VA = "0x141D07C")]
	public static void RemoveLightOctree(HxVolumetricLight light)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x141D134", Offset = "0x141D134", VA = "0x141D134")]
	public static void RemoveParticletOctree(HxVolumetricParticleSystem Particle)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x141D1EC", Offset = "0x141D1EC", VA = "0x141D1EC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x141D254", Offset = "0x141D254", VA = "0x141D254")]
	public Camera GetCamera()
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x141D4F0", Offset = "0x141D4F0", VA = "0x141D4F0")]
	private Vector4 CalculateDensityDistance(int i)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x141D720", Offset = "0x141D720", VA = "0x141D720")]
	private Vector4 CalculateTransparencyDistance(int i)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x141D908", Offset = "0x141D908", VA = "0x141D908")]
	private void RenderParticles()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x141F468", Offset = "0x141F468", VA = "0x141F468")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x141E9F4", Offset = "0x141E9F4", VA = "0x141E9F4")]
	private int RenderSlices()
	{
		return default(int);
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x141F4B4", Offset = "0x141F4B4", VA = "0x141F4B4")]
	private int GetCamPixelHeight()
	{
		return default(int);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x141F56C", Offset = "0x141F56C", VA = "0x141F56C")]
	private int GetCamPixelWidth()
	{
		return default(int);
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x141F6B0", Offset = "0x141F6B0", VA = "0x141F6B0")]
	private void CreateTempTextures()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x141DE54", Offset = "0x141DE54", VA = "0x141DE54")]
	public static void ConstructPlanes(Camera cam, float near, float far)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1420714", Offset = "0x1420714", VA = "0x1420714")]
	private void FindActiveLights()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x141E904", Offset = "0x141E904", VA = "0x141E904")]
	private void FindActiveParticleSystems()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x1420A3C", Offset = "0x1420A3C", VA = "0x1420A3C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x1420EAC", Offset = "0x1420EAC", VA = "0x1420EAC")]
	private void Start()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x1420F8C", Offset = "0x1420F8C", VA = "0x1420F8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x142106C", Offset = "0x142106C", VA = "0x142106C")]
	private void CreateApplyBuffer()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x1421070", Offset = "0x1421070", VA = "0x1421070")]
	private void CreateSetupBuffer()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x14213DC", Offset = "0x14213DC", VA = "0x14213DC")]
	private bool CheckBufferDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x14215E0", Offset = "0x14215E0", VA = "0x14215E0")]
	private void CreateFinalizeBuffer()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x14243B8", Offset = "0x14243B8", VA = "0x14243B8")]
	private void BuildBuffer()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1426D0C", Offset = "0x1426D0C", VA = "0x1426D0C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1426F54", Offset = "0x1426F54", VA = "0x1426F54")]
	private void SaveUsedShaderVarience()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1426F58", Offset = "0x1426F58", VA = "0x1426F58")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1425F50", Offset = "0x1425F50", VA = "0x1425F50")]
	private void CalculateEvent()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x14271A8", Offset = "0x14271A8", VA = "0x14271A8")]
	public void EventOnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1427288", Offset = "0x1427288", VA = "0x1427288")]
	private int ScalePass()
	{
		return default(int);
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x14272AC", Offset = "0x14272AC", VA = "0x14272AC")]
	private void DownSampledFullBlur(RenderTexture mainColor, RenderBuffer NewColor, RenderBuffer depth, int pass)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1426034", Offset = "0x1426034", VA = "0x1426034")]
	private void CheckTemporalTextures()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x142621C", Offset = "0x142621C", VA = "0x142621C")]
	public static void ReleaseTempTextures()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x142744C", Offset = "0x142744C", VA = "0x142744C")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x14274EC", Offset = "0x14274EC", VA = "0x14274EC")]
	private void UpdateLightPoistions()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x14276F8", Offset = "0x14276F8", VA = "0x14276F8")]
	private void UpdateParticlePoistions()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x1427824", Offset = "0x1427824", VA = "0x1427824")]
	private void Awake()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x1427954", Offset = "0x1427954", VA = "0x1427954")]
	private void start()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x141966C", Offset = "0x141966C", VA = "0x141966C")]
	public void ReleaseLightBuffers()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x14269BC", Offset = "0x14269BC", VA = "0x14269BC")]
	private void CreateLightbuffers()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x141AF6C", Offset = "0x141AF6C", VA = "0x141AF6C")]
	private static void CreateTileTexture()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x141C5A0", Offset = "0x141C5A0", VA = "0x141C5A0")]
	public static Mesh CreateCone(int sides, bool inner = true)
	{
		return null;
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x141B2EC", Offset = "0x141B2EC", VA = "0x141B2EC")]
	public static Mesh CreateQuad()
	{
		return null;
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x141B508", Offset = "0x141B508", VA = "0x141B508")]
	public static Mesh CreateBox()
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x141B5E0", Offset = "0x141B5E0", VA = "0x141B5E0")]
	public static Mesh CreateIcoSphere(int recursionLevel, float radius)
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x14279AC", Offset = "0x14279AC", VA = "0x14279AC")]
	private static int getMiddlePoint(int p1, int p2, ref List<Vector3> vertices, ref Dictionary<long, int> cache, float radius)
	{
		return default(int);
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x141AEE0", Offset = "0x141AEE0", VA = "0x141AEE0")]
	public void Create3DNoiseTexture()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1427BA0", Offset = "0x1427BA0", VA = "0x1427BA0")]
	private int PostoIndex(Vector3 pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1427C28", Offset = "0x1427C28", VA = "0x1427C28")]
	public HxVolumetricCamera()
	{
	}
}
[Token(Token = "0x2000008")]
[ExecuteInEditMode]
public class HxVolumetricImageEffect : HxVolumetricRenderCallback
{
	[Token(Token = "0x600007A")]
	[Address(RVA = "0x16CEF18", Offset = "0x16CEF18", VA = "0x16CEF18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x16CEFAC", Offset = "0x16CEFAC", VA = "0x16CEFAC")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x16CF0E4", Offset = "0x16CF0E4", VA = "0x16CF0E4")]
	public HxVolumetricImageEffect()
	{
	}
}
[Token(Token = "0x2000009")]
[ExecuteInEditMode]
public class HxVolumetricImageEffectOpaque : HxVolumetricRenderCallback
{
	[Token(Token = "0x600007D")]
	[Address(RVA = "0x16CF0F4", Offset = "0x16CF0F4", VA = "0x16CF0F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x16CF18C", Offset = "0x16CF18C", VA = "0x16CF18C")]
	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x16CF2C4", Offset = "0x16CF2C4", VA = "0x16CF2C4")]
	public HxVolumetricImageEffectOpaque()
	{
	}
}
[Token(Token = "0x200000A")]
[ExecuteInEditMode]
public class HxVolumetricLight : MonoBehaviour
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float ShadowDistanceExtra;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light myLight;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HxDummyLight myDummyLight;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture3D NoiseTexture3D;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CommandBuffer BufferRender;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CommandBuffer BufferCopy;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 NoiseScale;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 NoiseVelocity;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool dirty;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float NearPlane;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool NoiseEnabled;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool CustomMieScatter;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool CustomExtinction;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool CustomExtinctionEffect;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool CustomDensity;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool CustomSampleCount;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool CustomColor;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool CustomNoiseEnabled;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool CustomNoiseTexture;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool CustomNoiseScale;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool CustomNoiseVelocity;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool CustomNoiseContrast;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool CustomFogHeightEnabled;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool CustomFogHeight;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	public bool CustomFogTransitionSize;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	public bool CustomAboveFogPercent;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool CustomSunSize;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool CustomSunBleed;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool ShadowCasting;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool CustomStrength;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool CustomIntensity;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool CustomTintMode;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	public bool CustomTintColor;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
	public bool CustomTintColor2;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool CustomTintGradient;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool CustomTintIntensity;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	public bool CustomMaxLightDistance;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB484E8", Offset = "0xB484E8")]
	public float NoiseContrast;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HxVolumetricCamera.HxTintMode TintMode;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Color TintColor;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Color TintColor2;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float TintIntensity;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48500", Offset = "0xB48500")]
	public float TintGradient;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48518", Offset = "0xB48518")]
	public float Intensity;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48530", Offset = "0xB48530")]
	public float Strength;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Color Color;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48548", Offset = "0xB48548")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48548", Offset = "0xB48548")]
	public float MieScattering;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB485A0", Offset = "0xB485A0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB485A0", Offset = "0xB485A0")]
	public float SunSize;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB485F4", Offset = "0xB485F4")]
	public bool SunBleed;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4862C", Offset = "0xB4862C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4862C", Offset = "0xB4862C")]
	public float Extinction;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48680", Offset = "0xB48680")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48680", Offset = "0xB48680")]
	public float Density;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB486D4", Offset = "0xB486D4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB486D4", Offset = "0xB486D4")]
	public float ExtraDensity;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48728", Offset = "0xB48728")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48728", Offset = "0xB48728")]
	public int SampleCount;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48780", Offset = "0xB48780")]
	public bool Shadows;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool FogHeightEnabled;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float FogHeight;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float FogTransitionSize;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float MaxLightDistance;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float AboveFogPercent;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool OffsetUpdated;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Vector3 Offset;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private bool bufferBuilt;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int VolumetricBMVPPID;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static int VolumetricMVPPID;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static int VolumetricMVP2PID;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static int VolumetricMVPID;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int LightColourPID;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int LightColour2PID;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int FogHeightsPID;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static int PhasePID;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int _LightParamsPID;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static int DensityPID;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int ShadowBiasPID;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int _CustomLightPositionPID;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static int hxNearPlanePID;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static int NoiseScalePID;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static int NoiseOffsetPID;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static int _SpotLightParamsPID;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static int _LightTexture0PID;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
	private bool LastBufferDirectional;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float LastSpotAngle;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float LastRange;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LightType lastType;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Matrix4x4 LightMatrix;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Bounds lastBounds;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private Vector3 minBounds;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Vector3 maxBounds;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private HxOctreeNode<HxVolumetricLight>.NodeObject octreeNode;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Vector4 TopFrustumNormal;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Vector4 BottomFrustumNormal;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Vector4 LeftFrustumNormal;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Vector4 RightFrustumNormal;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static Matrix4x4[] VolumeMatrixArrays;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static Vector4[] VolumeSettingsArrays;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static Matrix4x4[] VolumeMatrixArraysOld;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static Vector4[] VolumeSettingsArraysOld;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool matrixReconstruct;

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x16CF2CC", Offset = "0x16CF2CC", VA = "0x16CF2CC")]
	public Light LightSafe()
	{
		return null;
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x16CF364", Offset = "0x16CF364", VA = "0x16CF364")]
	public HxDummyLight DummyLightSafe()
	{
		return null;
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x16CF3FC", Offset = "0x16CF3FC", VA = "0x16CF3FC")]
	private LightType GetLightType()
	{
		return default(LightType);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x16CF4E0", Offset = "0x16CF4E0", VA = "0x16CF4E0")]
	private LightShadows LightShadow()
	{
		return default(LightShadows);
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x16CF578", Offset = "0x16CF578", VA = "0x16CF578")]
	private bool HasLight()
	{
		return default(bool);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x16CF634", Offset = "0x16CF634", VA = "0x16CF634")]
	private Texture LightCookie()
	{
		return null;
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x16CF718", Offset = "0x16CF718", VA = "0x16CF718")]
	private float LightShadowBias()
	{
		return default(float);
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x16CF7BC", Offset = "0x16CF7BC", VA = "0x16CF7BC")]
	private Color LightColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x16CF8E8", Offset = "0x16CF8E8", VA = "0x16CF8E8")]
	private float LightSpotAngle()
	{
		return default(float);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x16CF9CC", Offset = "0x16CF9CC", VA = "0x16CF9CC")]
	private bool LightEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x16CFB38", Offset = "0x16CFB38", VA = "0x16CFB38")]
	private float LightRange()
	{
		return default(float);
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x16CFC18", Offset = "0x16CFC18", VA = "0x16CFC18")]
	private float LightShadowStrength()
	{
		return default(float);
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x16CFCF4", Offset = "0x16CFCF4", VA = "0x16CFCF4")]
	private float LightIntensity()
	{
		return default(float);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x16CFDD4", Offset = "0x16CFDD4", VA = "0x16CFDD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x16D08B8", Offset = "0x16D08B8", VA = "0x16D08B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x16D09BC", Offset = "0x16D09BC", VA = "0x16D09BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x16D0ACC", Offset = "0x16D0ACC", VA = "0x16D0ACC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x16D0B3C", Offset = "0x16D0B3C", VA = "0x16D0B3C")]
	public void BuildBuffer(CommandBuffer CameraBuffer)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x16D4350", Offset = "0x16D4350", VA = "0x16D4350")]
	public void ReleaseBuffer()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x16D4420", Offset = "0x16D4420", VA = "0x16D4420")]
	public static void CreatePID()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x16D46A4", Offset = "0x16D46A4", VA = "0x16D46A4")]
	private float LightNearPlane()
	{
		return default(float);
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x16D4740", Offset = "0x16D4740", VA = "0x16D4740")]
	private int DirectionalPass(CommandBuffer buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x16D4AE8", Offset = "0x16D4AE8", VA = "0x16D4AE8")]
	private float getContrast()
	{
		return default(float);
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x16D4B74", Offset = "0x16D4B74", VA = "0x16D4B74")]
	private bool ShaderModel4()
	{
		return default(bool);
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x16D0BC8", Offset = "0x16D0BC8", VA = "0x16D0BC8")]
	private void BuildDirectionalBuffer(CommandBuffer CameraBuffer)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x16D50AC", Offset = "0x16D50AC", VA = "0x16D50AC")]
	private void LoadVolumeDateIntoBuffer(CommandBuffer buffer)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x16D5A00", Offset = "0x16D5A00", VA = "0x16D5A00")]
	private float CalcLightInstensityDistance(float distance)
	{
		return default(float);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x16D1E3C", Offset = "0x16D1E3C", VA = "0x16D1E3C")]
	private void BuildSpotLightBuffer(CommandBuffer cameraBuffer)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x16D6138", Offset = "0x16D6138", VA = "0x16D6138")]
	private void SetColors(CommandBuffer buffer, float distance)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x16D515C", Offset = "0x16D515C", VA = "0x16D515C")]
	private void SetColors(CommandBuffer buffer)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x16D6AB4", Offset = "0x16D6AB4", VA = "0x16D6AB4")]
	private Vector3 CalcTintColor(Vector4 c)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x16D6D5C", Offset = "0x16D6D5C", VA = "0x16D6D5C")]
	private Vector3 CalcTintColorEdge(Vector4 c)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x16D3120", Offset = "0x16D3120", VA = "0x16D3120")]
	private void BuildPointBuffer(CommandBuffer cameraBuffer)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x16D5764", Offset = "0x16D5764", VA = "0x16D5764")]
	public int MID(bool RenderShadows, bool full)
	{
		return default(int);
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x16D7004", Offset = "0x16D7004", VA = "0x16D7004")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x16D4BB0", Offset = "0x16D4BB0", VA = "0x16D4BB0")]
	private float GetFogDensity()
	{
		return default(float);
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x16D5944", Offset = "0x16D5944", VA = "0x16D5944")]
	private Texture3D GetNoiseTexture()
	{
		return null;
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x16D566C", Offset = "0x16D566C", VA = "0x16D566C")]
	private int GetSampleCount(bool RenderShadows)
	{
		return default(int);
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x16D700C", Offset = "0x16D700C", VA = "0x16D700C")]
	public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x16D5B48", Offset = "0x16D5B48", VA = "0x16D5B48")]
	private float ClosestDistanceToCone(Vector3 Point)
	{
		return default(float);
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x16D71F8", Offset = "0x16D71F8", VA = "0x16D71F8")]
	private void UpdateLightMatrix()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x16D751C", Offset = "0x16D751C", VA = "0x16D751C")]
	private void CheckLightType()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x16D4C44", Offset = "0x16D4C44", VA = "0x16D4C44")]
	private void LoadVolumeData()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x16D76A0", Offset = "0x16D76A0", VA = "0x16D76A0")]
	private bool BoundsIntersect(HxDensityVolume vol)
	{
		return default(bool);
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x16D6708", Offset = "0x16D6708", VA = "0x16D6708")]
	private void LoadVolumeDataBounds()
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x16D771C", Offset = "0x16D771C", VA = "0x16D771C")]
	private Vector4 NormalOfTriangle(Vector3 a, Vector3 b, Vector3 c)
	{
		return default(Vector4);
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x16D7870", Offset = "0x16D7870", VA = "0x16D7870")]
	private void DrawIntersect()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x16CFF68", Offset = "0x16CFF68", VA = "0x16CFF68")]
	public void UpdatePosition(bool first = false)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x16D8370", Offset = "0x16D8370", VA = "0x16D8370")]
	public void DrawBounds()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x16D89A0", Offset = "0x16D89A0", VA = "0x16D89A0")]
	public HxVolumetricLight()
	{
	}
}
[Token(Token = "0x200000B")]
[ExecuteInEditMode]
public class HxVolumetricParticleSystem : MonoBehaviour
{
	[Token(Token = "0x20004F4")]
	public enum ParticleBlendMode
	{
		[Token(Token = "0x4001C13")]
		Max,
		[Token(Token = "0x4001C14")]
		Add,
		[Token(Token = "0x4001C15")]
		Min,
		[Token(Token = "0x4001C16")]
		Sub
	}

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB487B8", Offset = "0xB487B8")]
	public float DensityStrength;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HxOctreeNode<HxVolumetricParticleSystem>.NodeObject octreeNode;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Renderer particleRenderer;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleBlendMode BlendMode;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 minBounds;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 maxBounds;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Bounds LastBounds;

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x16D8BF4", Offset = "0x16D8BF4", VA = "0x16D8BF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x16D8D0C", Offset = "0x16D8D0C", VA = "0x16D8D0C")]
	public void UpdatePosition()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x16D8E2C", Offset = "0x16D8E2C", VA = "0x16D8E2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x16D8ECC", Offset = "0x16D8ECC", VA = "0x16D8ECC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x16D8F6C", Offset = "0x16D8F6C", VA = "0x16D8F6C")]
	public HxVolumetricParticleSystem()
	{
	}
}
[Token(Token = "0x200000C")]
public class HxVolumetricRenderCallback : MonoBehaviour
{
	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected HxVolumetricCamera volumetricCamera;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public HxVolumetricCamera.hxRenderOrder RenderOrder;

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x16CF0EC", Offset = "0x16CF0EC", VA = "0x16CF0EC")]
	public HxVolumetricRenderCallback()
	{
	}
}
[Token(Token = "0x200000D")]
public class HxVolumetricShadersUsed : ScriptableObject
{
	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HxVolumetricCamera.TransparencyQualities TransperencyQuality;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HxVolumetricCamera.DensityParticleQualities DensityParticleQuality;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public HxVolumetricCamera.DensityParticleQualities LastDensityParticleQuality;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public HxVolumetricCamera.TransparencyQualities LastTransperencyQuality;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HxVolumetricShadersUsed instance;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool Full;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool LowRes;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool HeightFog;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool HeightFogOff;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool Noise;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool NoiseOff;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool Transparency;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool TransparencyOff;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool DensityParticles;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool Point;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool Spot;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool Directional;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool SinglePassStereo;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[HideInInspector]
	public bool FullLast;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[HideInInspector]
	public bool LowResLast;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	[HideInInspector]
	public bool HeightFogLast;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public bool HeightFogOffLast;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[HideInInspector]
	public bool NoiseLast;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[HideInInspector]
	public bool NoiseOffLast;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	[HideInInspector]
	public bool TransparencyLast;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool TransparencyOffLast;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[HideInInspector]
	public bool DensityParticlesLast;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[HideInInspector]
	public bool PointLast;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	[HideInInspector]
	public bool SpotLast;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public bool DirectionalLast;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[HideInInspector]
	public bool SinglePassStereoLast;

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x16D8F84", Offset = "0x16D8F84", VA = "0x16D8F84")]
	private bool CheckDirty()
	{
		return default(bool);
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x16D9278", Offset = "0x16D9278", VA = "0x16D9278")]
	public HxVolumetricShadersUsed()
	{
	}
}
[Token(Token = "0x200000E")]
public static class AssertHelper
{
	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x14122BC", Offset = "0x14122BC", VA = "0x14122BC")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB59844", Offset = "0xB59844")]
	public static void AssertRuntimeOnly([Optional] string message)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x14122F8", Offset = "0x14122F8", VA = "0x14122F8")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB5987C", Offset = "0xB5987C")]
	public static void AssertEditorOnly([Optional] string message)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x1412334", Offset = "0x1412334", VA = "0x1412334")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB598B4", Offset = "0xB598B4")]
	public static void Implies(bool condition, bool result, string message = "")
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x1412338", Offset = "0x1412338", VA = "0x1412338")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB598EC", Offset = "0xB598EC")]
	public static void Implies(bool condition, Func<bool> result, string message = "")
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x141233C", Offset = "0x141233C", VA = "0x141233C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB59924", Offset = "0xB59924")]
	public static void Implies(string conditionName, bool condition, string resultName, bool result)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1412340", Offset = "0x1412340", VA = "0x1412340")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB5995C", Offset = "0xB5995C")]
	public static void Implies(string conditionName, bool condition, string resultName, Func<bool> result)
	{
	}

	[Token(Token = "0x60000C1")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB59994", Offset = "0xB59994")]
	public static void Contains<T>(T value, IEnumerable<T> collection, string message = "")
	{
	}
}
[Token(Token = "0x200000F")]
public class LeapImageTextureVisualizer : MonoBehaviour
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeapImageRetriever imageRetriever;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer meshRenderer;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int deviceIndex;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x14A00B4", Offset = "0x14A00B4", VA = "0x14A00B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x14A01A8", Offset = "0x14A01A8", VA = "0x14A01A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x14A02A0", Offset = "0x14A02A0", VA = "0x14A02A0")]
	public LeapImageTextureVisualizer()
	{
	}
}
[Token(Token = "0x2000010")]
public class AutoCannon : MonoBehaviour
{
	[Token(Token = "0x20004F5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB470C4", Offset = "0xB470C4")]
	private sealed class <spawnCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoCannon <>4__this;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <obj>5__2;

		[Token(Token = "0x1700038C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024BB")]
			[Address(RVA = "0x1412874", Offset = "0x1412874", VA = "0x1412874", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024BD")]
			[Address(RVA = "0x14128DC", Offset = "0x14128DC", VA = "0x14128DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0x14124EC", Offset = "0x14124EC", VA = "0x14124EC")]
		[DebuggerHidden]
		public <spawnCoroutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0x1412594", Offset = "0x1412594", VA = "0x1412594", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0x1412598", Offset = "0x1412598", VA = "0x1412598", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x141287C", Offset = "0x141287C", VA = "0x141287C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform spawnParent;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform spawnLocation;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float spawnSpeed;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int spawnPeriod;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float lifeTime;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float rotationSpeed;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float rotationFrequency;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Queue<GameObject> pool;

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1412344", Offset = "0x1412344", VA = "0x1412344")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x141247C", Offset = "0x141247C", VA = "0x141247C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB599CC", Offset = "0xB599CC")]
	private IEnumerator spawnCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x1412518", Offset = "0x1412518", VA = "0x1412518")]
	public AutoCannon()
	{
	}
}
[Token(Token = "0x2000011")]
public class ReceiverScript_Example : MonoBehaviour
{
	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material _materialInstance;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[EditTimeOnly]
	[SerializeField]
	private Color _currentColor;

	[Token(Token = "0x17000005")]
	public Color currentColor
	{
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x161D52C", Offset = "0x161D52C", VA = "0x161D52C")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x161D538", Offset = "0x161D538", VA = "0x161D538")]
		set
		{
		}
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x161D5FC", Offset = "0x161D5FC", VA = "0x161D5FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x161D670", Offset = "0x161D670", VA = "0x161D670")]
	public void SetColorEvent(object colorArg)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x161D6FC", Offset = "0x161D6FC", VA = "0x161D6FC")]
	public ReceiverScript_Example()
	{
	}
}
[Token(Token = "0x2000012")]
public class RecorderBuddy : MonoBehaviour
{
	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HierarchyRecorder recorder;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float recordingDuration;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public KeyCode recordButton;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float _curDuration;

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x161D704", Offset = "0x161D704", VA = "0x161D704")]
	public RecorderBuddy()
	{
	}
}
[Token(Token = "0x2000013")]
public class SetAnimatorParam : MonoBehaviour
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator _animator;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _revertOnDisable;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private AnimatorControllerParameterType _type;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string _paramName;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool _boolValue;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private int _intValue;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float _floatValue;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private object _defaultValue;

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x1758554", Offset = "0x1758554", VA = "0x1758554")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x1758648", Offset = "0x1758648", VA = "0x1758648")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x17586FC", Offset = "0x17586FC", VA = "0x17586FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x1758888", Offset = "0x1758888", VA = "0x1758888")]
	public SetAnimatorParam()
	{
	}
}
[Token(Token = "0x2000014")]
public class FlameControl : MonoBehaviour
{
	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CurrentTarget;

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x1416E68", Offset = "0x1416E68", VA = "0x1416E68")]
	public void SetTarget(GameObject target)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x1416E70", Offset = "0x1416E70", VA = "0x1416E70")]
	public void LightFire()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x1416F5C", Offset = "0x1416F5C", VA = "0x1416F5C")]
	public void PutOutFire()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x1417048", Offset = "0x1417048", VA = "0x1417048")]
	public void ToggleFire()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x1417184", Offset = "0x1417184", VA = "0x1417184")]
	public FlameControl()
	{
	}
}
[Token(Token = "0x2000015")]
public class SpawnBalls : MonoBehaviour
{
	[Token(Token = "0x20004F6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB470D4", Offset = "0xB470D4")]
	private sealed class <AddBallWithDelay>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpawnBalls <>4__this;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject prefab;

		[Token(Token = "0x1700038E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024C1")]
			[Address(RVA = "0x175F624", Offset = "0x175F624", VA = "0x175F624", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024C3")]
			[Address(RVA = "0x175F68C", Offset = "0x175F68C", VA = "0x175F68C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0x175F1FC", Offset = "0x175F1FC", VA = "0x175F1FC")]
		[DebuggerHidden]
		public <AddBallWithDelay>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0x175F574", Offset = "0x175F574", VA = "0x175F574", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0x175F578", Offset = "0x175F578", VA = "0x175F578", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0x175F62C", Offset = "0x175F62C", VA = "0x175F62C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject BallPrefab;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delayInterval;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int BallLimit;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 BallSize;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IEnumerator _spawnCoroutine;

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x175F144", Offset = "0x175F144", VA = "0x175F144")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x175F1E8", Offset = "0x175F1E8", VA = "0x175F1E8")]
	public void StartBalls()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x175F1F4", Offset = "0x175F1F4", VA = "0x175F1F4")]
	public void StopBalls()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x175F16C", Offset = "0x175F16C", VA = "0x175F16C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59A30", Offset = "0xB59A30")]
	private IEnumerator AddBallWithDelay(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x175F228", Offset = "0x175F228", VA = "0x175F228")]
	private void addBall(GameObject prefab)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x175F3F8", Offset = "0x175F3F8", VA = "0x175F3F8")]
	private void removeBalls(int count)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x175F500", Offset = "0x175F500", VA = "0x175F500")]
	public SpawnBalls()
	{
	}
}
[Token(Token = "0x2000016")]
public class ExampleArrayController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004F7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB470E4", Offset = "0xB470E4")]
	private sealed class <>c
	{
		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<LeapGraphic, Vector3> <>9__6_0;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<LeapGraphic, LeapBlendShapeData> <>9__6_1;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Func<LeapGraphic, LeapRuntimeTintData> <>9__6_2;

		[Token(Token = "0x60024C5")]
		[Address(RVA = "0x1416D84", Offset = "0x1416D84", VA = "0x1416D84")]
		public <>c()
		{
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0x1416D8C", Offset = "0x1416D8C", VA = "0x1416D8C")]
		internal Vector3 <Start>b__6_0(LeapGraphic g)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0x1416DB8", Offset = "0x1416DB8", VA = "0x1416DB8")]
		internal LeapBlendShapeData <Start>b__6_1(LeapGraphic g)
		{
			return null;
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0x1416E10", Offset = "0x1416E10", VA = "0x1416E10")]
		internal LeapRuntimeTintData <Start>b__6_2(LeapGraphic g)
		{
			return null;
		}
	}

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationCurve _motionCurve;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Gradient _gradient;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<LeapGraphic> _graphics;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Vector3> _originalPositions;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<LeapBlendShapeData> _blendShapeData;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<LeapRuntimeTintData> _tintData;

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x14162E8", Offset = "0x14162E8", VA = "0x14162E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x1416680", Offset = "0x1416680", VA = "0x1416680")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x1416AD0", Offset = "0x1416AD0", VA = "0x1416AD0")]
	private float noise(Vector3 offset, float seed, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x1416C38", Offset = "0x1416C38", VA = "0x1416C38")]
	public ExampleArrayController()
	{
	}
}
[Token(Token = "0x2000017")]
public class CenterTransformOnCam : MonoBehaviour
{
	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Camera;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x1415380", Offset = "0x1415380", VA = "0x1415380")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x141542C", Offset = "0x141542C", VA = "0x141542C")]
	public CenterTransformOnCam()
	{
	}
}
[Token(Token = "0x2000018")]
public class CycleHandPairs : MonoBehaviour
{
	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandModelManager HandPool;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] GroupNames;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentGroup;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private KeyCode[] keyCodes;

	[Token(Token = "0x17000006")]
	public int CurrentGroup
	{
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x1415448", Offset = "0x1415448", VA = "0x1415448")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x1415450", Offset = "0x1415450", VA = "0x1415450")]
		set
		{
		}
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x1415520", Offset = "0x1415520", VA = "0x1415520")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x1415588", Offset = "0x1415588", VA = "0x1415588")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x14154B0", Offset = "0x14154B0", VA = "0x14154B0")]
	private void disableAllGroups()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x141569C", Offset = "0x141569C", VA = "0x141569C")]
	public CycleHandPairs()
	{
	}
}
[Token(Token = "0x2000019")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB420B4", Offset = "0xB420B4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xB420B4", Offset = "0xB420B4")]
public class SimpleInteractionGlow : MonoBehaviour
{
	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB489A8", Offset = "0xB489A8")]
	public bool useHover;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB489E0", Offset = "0xB489E0")]
	public bool usePrimaryHover;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB48A18", Offset = "0xB48A18")]
	public Color defaultColor;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color suspendedColor;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color hoverColor;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color primaryHoverColor;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB48A50", Offset = "0xB48A50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48A50", Offset = "0xB48A50")]
	public Color pressedColor;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material _material;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private InteractionBehaviour _intObj;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x175889C", Offset = "0x175889C", VA = "0x175889C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x17589A8", Offset = "0x17589A8", VA = "0x17589A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x1758C04", Offset = "0x1758C04", VA = "0x1758C04")]
	public SimpleInteractionGlow()
	{
	}
}
[Token(Token = "0x200001A")]
public class IgnoreColliderForInteraction : MonoBehaviour
{
	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x16D928C", Offset = "0x16D928C", VA = "0x16D928C")]
	public IgnoreColliderForInteraction()
	{
	}
}
[Token(Token = "0x200001B")]
public class ConfigTest : MonoBehaviour
{
	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x1415434", Offset = "0x1415434", VA = "0x1415434")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x141543C", Offset = "0x141543C", VA = "0x141543C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x1415440", Offset = "0x1415440", VA = "0x1415440")]
	public ConfigTest()
	{
	}
}
[Token(Token = "0x200001C")]
public class ArUcoProvider : MonoBehaviour
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeapServiceProvider provider;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] points;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool interpolation;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private long time;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private long curTimestamp;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private long prevTimestamp;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<uint, Vector3> curFrame;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<uint, Vector3> prevFrame;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x1411C54", Offset = "0x1411C54", VA = "0x1411C54")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x1411C58", Offset = "0x1411C58", VA = "0x1411C58")]
	public ArUcoProvider()
	{
	}
}
[Token(Token = "0x200001D")]
public class ArcMeasurement : MonoBehaviour, IRuntimeGizmoComponent
{
	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform a;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform b;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x1411C68", Offset = "0x1411C68", VA = "0x1411C68", Slot = "4")]
	public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x14122B4", Offset = "0x14122B4", VA = "0x14122B4")]
	public ArcMeasurement()
	{
	}
}
[Token(Token = "0x200001E")]
public class CalibrationWindowOffset : MonoBehaviour
{
	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x14128E4", Offset = "0x14128E4", VA = "0x14128E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x1412A60", Offset = "0x1412A60", VA = "0x1412A60")]
	public CalibrationWindowOffset()
	{
	}
}
[Token(Token = "0x200001F")]
public class CameraPostProcessing : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004F8")]
	public struct BlackDots
	{
		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Vector3> BlackRightBlobs;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int biggestBlackRightBlobIndex;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> BlackLeftBlobs;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int biggestBlackLeftBlobIndex;
	}

	[Token(Token = "0x20004F9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB470F4", Offset = "0xB470F4")]
	private sealed class <>c__DisplayClass32_0
	{
		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 BiggestLeft;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 BiggestRight;

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0x1412F68", Offset = "0x1412F68", VA = "0x1412F68")]
		public <>c__DisplayClass32_0()
		{
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0x1414494", Offset = "0x1414494", VA = "0x1414494")]
		internal int <sortBlackDotsByDistance>b__0(Vector3 x, Vector3 y)
		{
			return default(int);
		}

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0x14145F8", Offset = "0x14145F8", VA = "0x14145F8")]
		internal int <sortBlackDotsByDistance>b__1(Vector3 x, Vector3 y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x20004FA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47104", Offset = "0xB47104")]
	private sealed class <CreateMaskRoutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraPostProcessing <>4__this;

		[Token(Token = "0x17000390")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024CF")]
			[Address(RVA = "0x1414E3C", Offset = "0x1414E3C", VA = "0x1414E3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000391")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024D1")]
			[Address(RVA = "0x1414EA4", Offset = "0x1414EA4", VA = "0x1414EA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0x1412FE0", Offset = "0x1412FE0", VA = "0x1412FE0")]
		[DebuggerHidden]
		public <CreateMaskRoutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0x1414BD0", Offset = "0x1414BD0", VA = "0x1414BD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0x1414BD4", Offset = "0x1414BD4", VA = "0x1414BD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0x1414E44", Offset = "0x1414E44", VA = "0x1414E44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004FB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47114", Offset = "0xB47114")]
	private sealed class <AcquireBlackDots>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraPostProcessing <>4__this;

		[Token(Token = "0x17000392")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024D5")]
			[Address(RVA = "0x14148F0", Offset = "0x14148F0", VA = "0x14148F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000393")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024D7")]
			[Address(RVA = "0x1414958", Offset = "0x1414958", VA = "0x1414958", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x141307C", Offset = "0x141307C", VA = "0x141307C")]
		[DebuggerHidden]
		public <AcquireBlackDots>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x141475C", Offset = "0x141475C", VA = "0x141475C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0x1414760", Offset = "0x1414760", VA = "0x1414760", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0x14148F8", Offset = "0x14148F8", VA = "0x14148F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47124", Offset = "0xB47124")]
	private sealed class <AcquireWhiteDots>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraPostProcessing <>4__this;

		[Token(Token = "0x17000394")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024DB")]
			[Address(RVA = "0x1414B60", Offset = "0x1414B60", VA = "0x1414B60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000395")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024DD")]
			[Address(RVA = "0x1414BC8", Offset = "0x1414BC8", VA = "0x1414BC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0x1413118", Offset = "0x1413118", VA = "0x1413118")]
		[DebuggerHidden]
		public <AcquireWhiteDots>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0x1414960", Offset = "0x1414960", VA = "0x1414960", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0x1414964", Offset = "0x1414964", VA = "0x1414964", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0x1414B68", Offset = "0x1414B68", VA = "0x1414B68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2Int brightnessThreshold;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public byte maskThreshold;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB48AB0", Offset = "0xB48AB0")]
	public GameObject whiteness;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB48B18", Offset = "0xB48B18")]
	public GameObject whiteDots;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB48B80", Offset = "0xB48B80")]
	public bool invertImage;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB48BE8", Offset = "0xB48BE8")]
	public bool DrawDebug;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxMatchDistance;

	[NonSerialized]
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Vector3> RightBlobs;

	[NonSerialized]
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int biggestRightBlobIndex;

	[NonSerialized]
	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Vector3> LeftBlobs;

	[NonSerialized]
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int biggestLeftBlobIndex;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int PixelLimit;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int PixelsFound;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float BlobSizeCutoff;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int Width;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int Height;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool runOnce;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool runMaskProcess;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private byte[] imageData;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private byte[] subtractionImage;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private byte[] maskImage;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Leap.Image combinedImage;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ManualCalibrationPlacement calib;

	[NonSerialized]
	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public BlackDots blackDots;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB48C50", Offset = "0xB48C50")]
	public string blackDotsData;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool captureBGSubtraction;

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x1412A68", Offset = "0x1412A68", VA = "0x1412A68")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x1412AE4", Offset = "0x1412AE4", VA = "0x1412AE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x1412AEC", Offset = "0x1412AEC", VA = "0x1412AEC")]
	private void createMask()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x1412B40", Offset = "0x1412B40", VA = "0x1412B40")]
	private void acquireBlackDots()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x1412B94", Offset = "0x1412B94", VA = "0x1412B94")]
	private void acquireWhiteDots()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x1412BE8", Offset = "0x1412BE8", VA = "0x1412BE8")]
	private void saveBlackDots()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x1412C9C", Offset = "0x1412C9C", VA = "0x1412C9C")]
	private void sortBlackDotsByDistance()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x1412F70", Offset = "0x1412F70", VA = "0x1412F70")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59A94", Offset = "0xB59A94")]
	private IEnumerator CreateMaskRoutine()
	{
		return null;
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x141300C", Offset = "0x141300C", VA = "0x141300C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59AF8", Offset = "0xB59AF8")]
	private IEnumerator AcquireBlackDots()
	{
		return null;
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x14130A8", Offset = "0x14130A8", VA = "0x14130A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59B5C", Offset = "0xB59B5C")]
	private IEnumerator AcquireWhiteDots()
	{
		return null;
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x1413144", Offset = "0x1413144", VA = "0x1413144")]
	public void UpdateImage(Leap.Image image, byte[] imageData)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x14134C8", Offset = "0x14134C8", VA = "0x14134C8")]
	private int FindBiggestBlob(List<Vector3> blobs, int start, int length, byte[] image)
	{
		return default(int);
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x1413AB4", Offset = "0x1413AB4", VA = "0x1413AB4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x1413BA8", Offset = "0x1413BA8", VA = "0x1413BA8")]
	private void DrawBlobs(List<Vector3> blobs, Color color, float offset, int biggest)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x1413CC0", Offset = "0x1413CC0", VA = "0x1413CC0")]
	private void DrawConnections(List<Vector3> blackBlobs, List<Vector3> whiteBlobs, int biggestWhite, float blackOffset)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x1414274", Offset = "0x1414274", VA = "0x1414274")]
	private Vector3 blobToWorld(Vector3 blob, float offset)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x1413640", Offset = "0x1413640", VA = "0x1413640")]
	private Vector3 BlobFind(int Start, byte[] image, int Stack, int Cam)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x141439C", Offset = "0x141439C", VA = "0x141439C")]
	public CameraPostProcessing()
	{
	}
}
[Token(Token = "0x2000020")]
public class CameraProcessing : MonoBehaviour
{
	[Token(Token = "0x6000109")]
	[Address(RVA = "0x1414EAC", Offset = "0x1414EAC", VA = "0x1414EAC")]
	public CameraProcessing()
	{
	}
}
[Token(Token = "0x2000021")]
public class CaptureScreenShot : MonoBehaviour
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int resWidth;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int resHeight;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool takeHiResShot;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x1414EB4", Offset = "0x1414EB4", VA = "0x1414EB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x1414F0C", Offset = "0x1414F0C", VA = "0x1414F0C")]
	public string ScreenShotName(int width, int height)
	{
		return null;
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x141513C", Offset = "0x141513C", VA = "0x141513C")]
	public void TakeHiResShot()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x1415148", Offset = "0x1415148", VA = "0x1415148")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x141536C", Offset = "0x141536C", VA = "0x141536C")]
	public CaptureScreenShot()
	{
	}
}
[Token(Token = "0x2000022")]
public class DisableMe : MonoBehaviour
{
	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode disableEnableKey;

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x1415714", Offset = "0x1415714", VA = "0x1415714")]
	private void Update()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x14159D0", Offset = "0x14159D0", VA = "0x14159D0")]
	public DisableMe()
	{
	}
}
[Token(Token = "0x2000023")]
public class DriftCorrector : MonoBehaviour
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform truth;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform reference;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "MinValue", RVA = "0xB48CB8", Offset = "0xB48CB8")]
	[AttributeAttribute(Name = "MaxValue", RVA = "0xB48CB8", Offset = "0xB48CB8")]
	public float strength;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "MinValue", RVA = "0xB48CF8", Offset = "0xB48CF8")]
	public float circleOfConfusionRadius;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float truthPositionMultiplier;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB48D0C", Offset = "0xB48D0C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB48D0C", Offset = "0xB48D0C")]
	public bool useFullRotation;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "DisableIf", RVA = "0xB48D6C", Offset = "0xB48D6C")]
	public float fullRotationStrength;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 lastPos;

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x14159D8", Offset = "0x14159D8", VA = "0x14159D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1416170", Offset = "0x1416170", VA = "0x1416170")]
	public DriftCorrector()
	{
	}
}
[Token(Token = "0x2000024")]
public class ImageRetreiverSwitcher : MonoBehaviour
{
	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode[] switchKeys;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x16D9294", Offset = "0x16D9294", VA = "0x16D9294")]
	private void Update()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x16D9350", Offset = "0x16D9350", VA = "0x16D9350")]
	public ImageRetreiverSwitcher()
	{
	}
}
[Token(Token = "0x2000025")]
public class ManualCalibrationPlacement : MonoBehaviour
{
	[Token(Token = "0x20004FD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47134", Offset = "0xB47134")]
	private sealed class <CalibrationRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ManualCalibrationPlacement <>4__this;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000396")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024E1")]
			[Address(RVA = "0x161AA88", Offset = "0x161AA88", VA = "0x161AA88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000397")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024E3")]
			[Address(RVA = "0x161AAF0", Offset = "0x161AAF0", VA = "0x161AAF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0x1619CD8", Offset = "0x1619CD8", VA = "0x1619CD8")]
		[DebuggerHidden]
		public <CalibrationRoutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0x161A5F4", Offset = "0x161A5F4", VA = "0x161A5F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0x161A5F8", Offset = "0x161A5F8", VA = "0x161A5F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0x161AA90", Offset = "0x161AA90", VA = "0x161AA90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004FE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47144", Offset = "0xB47144")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ManualCalibrationPlacement <>4__this;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode code;

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x1619E2C", Offset = "0x1619E2C", VA = "0x1619E2C")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0x161A5C4", Offset = "0x161A5C4", VA = "0x161A5C4")]
		internal bool <waitForKeypress>b__0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeapServiceProvider provider;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CameraPostProcessing processing;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform selectionCursor;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform leftRigel;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rightRigel;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public KeyCode AdvanceCalibration;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh debugTextState;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Ray[] calibrationPointRays;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool suspended;

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x1619C0C", Offset = "0x1619C0C", VA = "0x1619C0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x1619C60", Offset = "0x1619C60", VA = "0x1619C60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x1619C68", Offset = "0x1619C68", VA = "0x1619C68")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59BC0", Offset = "0xB59BC0")]
	private IEnumerator CalibrationRoutine()
	{
		return null;
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x1619D04", Offset = "0x1619D04", VA = "0x1619D04")]
	private WaitUntil waitForKeypress(KeyCode code, string DebugText = "")
	{
		return null;
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x1619E34", Offset = "0x1619E34", VA = "0x1619E34")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x161A184", Offset = "0x161A184", VA = "0x161A184")]
	public static Vector2 localSpaceToPixel(Vector3 combinedLocalSpace, Leap.Image image)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x161A278", Offset = "0x161A278", VA = "0x161A278")]
	public static float ClosestAlphaOnSegmentToLine(Vector3 segA, Vector3 segB, Vector3 lineA, Vector3 lineB)
	{
		return default(float);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x1619F8C", Offset = "0x1619F8C", VA = "0x1619F8C")]
	public static Vector3 RayRayIntersection(Ray rayA, Ray rayB)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x161A55C", Offset = "0x161A55C", VA = "0x161A55C")]
	public ManualCalibrationPlacement()
	{
	}
}
[Token(Token = "0x2000026")]
public class NelderMead
{
	[Token(Token = "0x20004FF")]
	public struct Vertex
	{
		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float[] coordinates;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float cost;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int originalIndex;

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0x161B714", Offset = "0x161B714", VA = "0x161B714")]
		public Vertex(float[] Coordinates, Func<float[], float> costFunction, int index = 0)
		{
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0x161BA7C", Offset = "0x161BA7C", VA = "0x161BA7C")]
		public float recalculateCost(Func<float[], float> costFunction)
		{
			return default(float);
		}
	}

	[Serializable]
	[Token(Token = "0x2000500")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47154", Offset = "0xB47154")]
	private sealed class <>c
	{
		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<Vertex> <>9__7_0;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Comparison<Vertex> <>9__8_0;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Comparison<Vertex> <>9__9_0;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Comparison<Vertex> <>9__10_0;

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0x161B9B4", Offset = "0x161B9B4", VA = "0x161B9B4")]
		public <>c()
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0x161B9BC", Offset = "0x161B9BC", VA = "0x161B9BC")]
		internal int <.ctor>b__7_0(Vertex x, Vertex y)
		{
			return default(int);
		}

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0x161B9EC", Offset = "0x161B9EC", VA = "0x161B9EC")]
		internal int <stepSolver>b__8_0(Vertex x, Vertex y)
		{
			return default(int);
		}

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0x161BA1C", Offset = "0x161BA1C", VA = "0x161BA1C")]
		internal int <recalculateSimplexCosts>b__9_0(Vertex x, Vertex y)
		{
			return default(int);
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0x161BA4C", Offset = "0x161BA4C", VA = "0x161BA4C")]
		internal int <constructRightAngleSimplex>b__10_0(Vertex x, Vertex y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float[] centroidCoordinate;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Vertex> simplexVertices;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Func<float[], float> costFunc;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float alpha;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float beta;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float gamma;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float delta;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x161AAF8", Offset = "0x161AAF8", VA = "0x161AAF8")]
	public NelderMead(float[] initialVertex, Func<float[], float> costFunction, float initialSimplexSize = 1f, float reflectionCoefficient = 1f, float contractionCoefficient = 0.5f, float expansionCoefficient = 2f, float shrinkageCoefficient = 0.5f)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x161AECC", Offset = "0x161AECC", VA = "0x161AECC")]
	public void stepSolver()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x161B79C", Offset = "0x161B79C", VA = "0x161B79C")]
	public void recalculateSimplexCosts()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x161ACBC", Offset = "0x161ACBC", VA = "0x161ACBC")]
	public void constructRightAngleSimplex(float[] initialVertex, float initialSimplexSize)
	{
	}
}
[Token(Token = "0x2000027")]
public static class FloatArrayExtension
{
	[Token(Token = "0x6000122")]
	[Address(RVA = "0x141718C", Offset = "0x141718C", VA = "0x141718C")]
	public static float[] Plus(this float[] a1, float[] a2)
	{
		return null;
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x14172B0", Offset = "0x14172B0", VA = "0x14172B0")]
	public static float[] Minus(this float[] a1, float[] a2)
	{
		return null;
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x14173D4", Offset = "0x14173D4", VA = "0x14173D4")]
	public static float[] Times(this float[] a1, float a2)
	{
		return null;
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x1417498", Offset = "0x1417498", VA = "0x1417498")]
	public static float[] DivideBy(this float[] a1, float a2)
	{
		return null;
	}
}
[Token(Token = "0x2000028")]
public class NelderMeadRoutine
{
	[Token(Token = "0x2000501")]
	public class Vertex
	{
		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] coordinates;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cost;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int originalIndex;

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0x161C220", Offset = "0x161C220", VA = "0x161C220")]
		public Vertex(float[] Coordinates, Action<float[]> preCostFunction, int index = 0)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000502")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47164", Offset = "0xB47164")]
	private sealed class <>c
	{
		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Comparison<Vertex> <>9__13_0;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Comparison<Vertex> <>9__14_0;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Comparison<Vertex> <>9__15_0;

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0x161BE60", Offset = "0x161BE60", VA = "0x161BE60")]
		public <>c()
		{
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0x161BE68", Offset = "0x161BE68", VA = "0x161BE68")]
		internal int <initializeNelderMeadRoutine>b__13_0(Vertex x, Vertex y)
		{
			return default(int);
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0x161BE90", Offset = "0x161BE90", VA = "0x161BE90")]
		internal int <stepSolver>b__14_0(Vertex x, Vertex y)
		{
			return default(int);
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0x161BEB8", Offset = "0x161BEB8", VA = "0x161BEB8")]
		internal int <constructRightAngleSimplex>b__15_0(Vertex x, Vertex y)
		{
			return default(int);
		}
	}

	[Token(Token = "0x2000503")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47174", Offset = "0xB47174")]
	private sealed class <initializeNelderMeadRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NelderMeadRoutine <>4__this;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float[]> preCostFunction;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Func<float> postCostFunction;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MonoBehaviour behaviour;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float reflectionCoefficient;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float contractionCoefficient;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float expansionCoefficient;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float shrinkageCoefficient;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float[] initialVertex;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float initialSimplexSize;

		[Token(Token = "0x17000398")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024F7")]
			[Address(RVA = "0x161C5A8", Offset = "0x161C5A8", VA = "0x161C5A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000399")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024F9")]
			[Address(RVA = "0x161C610", Offset = "0x161C610", VA = "0x161C610", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0x161BBB4", Offset = "0x161BBB4", VA = "0x161BBB4")]
		[DebuggerHidden]
		public <initializeNelderMeadRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0x161C2D0", Offset = "0x161C2D0", VA = "0x161C2D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0x161C2D4", Offset = "0x161C2D4", VA = "0x161C2D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0x161C5B0", Offset = "0x161C5B0", VA = "0x161C5B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000504")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47184", Offset = "0xB47184")]
	private sealed class <stepSolver>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NelderMeadRoutine <>4__this;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vertex <reflectedVertex>5__2;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vertex <expandedVertex>5__3;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <i>5__4;

		[Token(Token = "0x1700039A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024FD")]
			[Address(RVA = "0x161D4BC", Offset = "0x161D4BC", VA = "0x161D4BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024FF")]
			[Address(RVA = "0x161D524", Offset = "0x161D524", VA = "0x161D524", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0x161BC50", Offset = "0x161BC50", VA = "0x161BC50")]
		[DebuggerHidden]
		public <stepSolver>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0x161C8BC", Offset = "0x161C8BC", VA = "0x161C8BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0x161C8C0", Offset = "0x161C8C0", VA = "0x161C8C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0x161D4C4", Offset = "0x161D4C4", VA = "0x161D4C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000505")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47194", Offset = "0xB47194")]
	private sealed class <constructRightAngleSimplex>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NelderMeadRoutine <>4__this;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] initialVertex;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float initialSimplexSize;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__2;

		[Token(Token = "0x1700039C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002503")]
			[Address(RVA = "0x161C260", Offset = "0x161C260", VA = "0x161C260", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002505")]
			[Address(RVA = "0x161C2C8", Offset = "0x161C2C8", VA = "0x161C2C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002500")]
		[Address(RVA = "0x161BD08", Offset = "0x161BD08", VA = "0x161BD08")]
		[DebuggerHidden]
		public <constructRightAngleSimplex>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0x161BEE0", Offset = "0x161BEE0", VA = "0x161BEE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002502")]
		[Address(RVA = "0x161BEE4", Offset = "0x161BEE4", VA = "0x161BEE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0x161C268", Offset = "0x161C268", VA = "0x161C268", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000506")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471A4", Offset = "0xB471A4")]
	private sealed class <setVertexCost>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NelderMeadRoutine <>4__this;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vertex vert;

		[Token(Token = "0x1700039E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002509")]
			[Address(RVA = "0x161C84C", Offset = "0x161C84C", VA = "0x161C84C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600250B")]
			[Address(RVA = "0x161C8B4", Offset = "0x161C8B4", VA = "0x161C8B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0x161BDB0", Offset = "0x161BDB0", VA = "0x161BDB0")]
		[DebuggerHidden]
		public <setVertexCost>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0x161C618", Offset = "0x161C618", VA = "0x161C618", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0x161C61C", Offset = "0x161C61C", VA = "0x161C61C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0x161C854", Offset = "0x161C854", VA = "0x161C854", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[NonSerialized]
	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float[] centroidCoordinate;

	[NonSerialized]
	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Vertex> simplexVertices;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<float[]> preCostFunc;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Func<float> postCostFunc;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float alpha;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float beta;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float gamma;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float delta;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MonoBehaviour behaviour;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool steppingSolver;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool isBottomRigel;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool isLeft;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float standardDelay;

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x161BAE4", Offset = "0x161BAE4", VA = "0x161BAE4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59C64", Offset = "0xB59C64")]
	public IEnumerator initializeNelderMeadRoutine(float[] initialVertex, Action<float[]> preCostFunction, Func<float> postCostFunction, MonoBehaviour behaviour, float initialSimplexSize = 1f, float reflectionCoefficient = 1f, float contractionCoefficient = 0.5f, float expansionCoefficient = 2f, float shrinkageCoefficient = 0.5f)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x161BBE0", Offset = "0x161BBE0", VA = "0x161BBE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59CC8", Offset = "0xB59CC8")]
	public IEnumerator stepSolver()
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x161BC7C", Offset = "0x161BC7C", VA = "0x161BC7C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59D2C", Offset = "0xB59D2C")]
	private IEnumerator constructRightAngleSimplex(float[] initialVertex, float initialSimplexSize)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x161BD34", Offset = "0x161BD34", VA = "0x161BD34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59D90", Offset = "0xB59D90")]
	private IEnumerator setVertexCost(Vertex vert)
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x161BDDC", Offset = "0x161BDDC", VA = "0x161BDDC")]
	public NelderMeadRoutine()
	{
	}
}
[Token(Token = "0x2000029")]
public class loopSong : MonoBehaviour
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uAudioPlayer_UI my_uAudioPlayer_UI;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public dirLoop_UI my_dirLoop_UI;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uAudioPlayer my_uAudioPlayer;

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x20A608C", Offset = "0x20A608C", VA = "0x20A608C")]
	private void Start()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x20A614C", Offset = "0x20A614C", VA = "0x20A614C")]
	private void songDone(PlayBackState valIN)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x20A63A4", Offset = "0x20A63A4", VA = "0x20A63A4")]
	public loopSong()
	{
	}
}
[Token(Token = "0x200002A")]
public class uVisualizer : MonoBehaviour
{
	[Token(Token = "0x2000507")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471B4", Offset = "0xB471B4")]
	private sealed class <updateViz>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uVisualizer <>4__this;

		[Token(Token = "0x170003A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600250F")]
			[Address(RVA = "0x20ABFC4", Offset = "0x20ABFC4", VA = "0x20ABFC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002511")]
			[Address(RVA = "0x20AC02C", Offset = "0x20AC02C", VA = "0x20AC02C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600250C")]
		[Address(RVA = "0x20ABC40", Offset = "0x20ABC40", VA = "0x20ABC40")]
		[DebuggerHidden]
		public <updateViz>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0x20ABF08", Offset = "0x20ABF08", VA = "0x20ABF08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0x20ABF0C", Offset = "0x20ABF0C", VA = "0x20ABF0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0x20ABFCC", Offset = "0x20ABFCC", VA = "0x20ABFCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] _SamplesLeft;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] _SamplesRight;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] _SpectrumLeft;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] _SpectrumRight;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource theAudioSource;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Slider[] SliderList;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Slider[] SliderList2;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Slider aSliderLeft;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider aSliderRight;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public FFTWindow myFFTWindow;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float Viz_Scale;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float[] freqData;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float[] band;

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x20ABAFC", Offset = "0x20ABAFC", VA = "0x20ABAFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x20ABBD0", Offset = "0x20ABBD0", VA = "0x20ABBD0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59DF4", Offset = "0xB59DF4")]
	private IEnumerator updateViz()
	{
		return null;
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x20ABC6C", Offset = "0x20ABC6C", VA = "0x20ABC6C")]
	private void updateSectrumViz(float[] _Spectrum)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x20ABDE0", Offset = "0x20ABDE0", VA = "0x20ABDE0")]
	private float splitSamples(int index, float[] samples, int samplesPerItem)
	{
		return default(float);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x20ABE70", Offset = "0x20ABE70", VA = "0x20ABE70")]
	private float GetYPosLog(float c)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x20ABEF8", Offset = "0x20ABEF8", VA = "0x20ABEF8")]
	public uVisualizer()
	{
	}
}
[Token(Token = "0x200002B")]
public class WAV
{
	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48E00", Offset = "0xB48E00")]
	private float[] <LeftChannel>k__BackingField;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48E10", Offset = "0xB48E10")]
	private float[] <RightChannel>k__BackingField;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48E20", Offset = "0xB48E20")]
	private int <ChannelCount>k__BackingField;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48E30", Offset = "0xB48E30")]
	private int <SampleCount>k__BackingField;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48E40", Offset = "0xB48E40")]
	private int <Frequency>k__BackingField;

	[Token(Token = "0x17000007")]
	public float[] LeftChannel
	{
		[Token(Token = "0x6000136")]
		[Address(RVA = "0x20A57AC", Offset = "0x20A57AC", VA = "0x20A57AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59E58", Offset = "0xB59E58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000137")]
		[Address(RVA = "0x20A57B4", Offset = "0x20A57B4", VA = "0x20A57B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59E68", Offset = "0xB59E68")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public float[] RightChannel
	{
		[Token(Token = "0x6000138")]
		[Address(RVA = "0x20A57BC", Offset = "0x20A57BC", VA = "0x20A57BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59E78", Offset = "0xB59E78")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000139")]
		[Address(RVA = "0x20A57C4", Offset = "0x20A57C4", VA = "0x20A57C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59E88", Offset = "0xB59E88")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public int ChannelCount
	{
		[Token(Token = "0x600013A")]
		[Address(RVA = "0x20A57CC", Offset = "0x20A57CC", VA = "0x20A57CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59E98", Offset = "0xB59E98")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600013B")]
		[Address(RVA = "0x20A57D4", Offset = "0x20A57D4", VA = "0x20A57D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59EA8", Offset = "0xB59EA8")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public int SampleCount
	{
		[Token(Token = "0x600013C")]
		[Address(RVA = "0x20A57DC", Offset = "0x20A57DC", VA = "0x20A57DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59EB8", Offset = "0xB59EB8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600013D")]
		[Address(RVA = "0x20A57E4", Offset = "0x20A57E4", VA = "0x20A57E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59EC8", Offset = "0xB59EC8")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public int Frequency
	{
		[Token(Token = "0x600013E")]
		[Address(RVA = "0x20A57EC", Offset = "0x20A57EC", VA = "0x20A57EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59ED8", Offset = "0xB59ED8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600013F")]
		[Address(RVA = "0x20A57F4", Offset = "0x20A57F4", VA = "0x20A57F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB59EE8", Offset = "0xB59EE8")]
		internal set
		{
		}
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x20A5718", Offset = "0x20A5718", VA = "0x20A5718")]
	private static float bytesToFloat(byte firstByte, byte secondByte)
	{
		return default(float);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x20A5734", Offset = "0x20A5734", VA = "0x20A5734")]
	private static int bytesToInt(byte[] bytes, int offset = 0)
	{
		return default(int);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x20A57FC", Offset = "0x20A57FC", VA = "0x20A57FC")]
	public WAV(byte[] wav)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x20A5AB8", Offset = "0x20A5AB8", VA = "0x20A5AB8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200002C")]
public class log : MonoBehaviour
{
	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField text;

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x20A5FD4", Offset = "0x20A5FD4", VA = "0x20A5FD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x20A6048", Offset = "0x20A6048", VA = "0x20A6048")]
	private void Application_logMessageReceived(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x20A6084", Offset = "0x20A6084", VA = "0x20A6084")]
	public log()
	{
	}
}
[Token(Token = "0x200002D")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected UnityEngine.UI.Image _image;

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x1411790", Offset = "0x1411790", VA = "0x1411790")]
	public void Start()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x1411940", Offset = "0x1411940", VA = "0x1411940", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x1411C4C", Offset = "0x1411C4C", VA = "0x1411C4C")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x200002E")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x6000148")]
	[Address(RVA = "0x1416204", Offset = "0x1416204", VA = "0x1416204")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x14162E0", Offset = "0x14162E0", VA = "0x14162E0")]
	public EventSystemChecker()
	{
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x200002F")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000508")]
		public enum Mode
		{
			[Token(Token = "0x4001C67")]
			Trigger,
			[Token(Token = "0x4001C68")]
			Replace,
			[Token(Token = "0x4001C69")]
			Activate,
			[Token(Token = "0x4001C6A")]
			Enable,
			[Token(Token = "0x4001C6B")]
			Animate,
			[Token(Token = "0x4001C6C")]
			Deactivate
		}

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x600014A")]
		[Address(RVA = "0x1A63FDC", Offset = "0x1A63FDC", VA = "0x1A63FDC")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x600014B")]
		[Address(RVA = "0x1A64444", Offset = "0x1A64444", VA = "0x1A64444")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600014C")]
		[Address(RVA = "0x1A64448", Offset = "0x1A64448", VA = "0x1A64448")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x2000030")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000509")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x4001C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x4001C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x6002512")]
			[Address(RVA = "0x1A64DC8", Offset = "0x1A64DC8", VA = "0x1A64DC8")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200050A")]
		public class ReplacementList
		{
			[Token(Token = "0x4001C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x6002513")]
			[Address(RVA = "0x1A64DD0", Offset = "0x1A64DD0", VA = "0x1A64DD0")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x1A64460", Offset = "0x1A64460", VA = "0x1A64460")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x1A64DC0", Offset = "0x1A64DC0", VA = "0x1A64DC0")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200050B")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4001C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4001C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x6002514")]
			[Address(RVA = "0x1A64FA0", Offset = "0x1A64FA0", VA = "0x1A64FA0")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x1A64E30", Offset = "0x1A64E30", VA = "0x1A64E30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x1A64E58", Offset = "0x1A64E58", VA = "0x1A64E58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0x1A64F98", Offset = "0x1A64F98", VA = "0x1A64F98")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x2000032")]
	public class CameraRefocus
	{
		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x1A64FB0", Offset = "0x1A64FB0", VA = "0x1A64FB0")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x1A65010", Offset = "0x1A65010", VA = "0x1A65010")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x1A65018", Offset = "0x1A65018", VA = "0x1A65018")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x1A65020", Offset = "0x1A65020", VA = "0x1A65020")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x1A65180", Offset = "0x1A65180", VA = "0x1A65180")]
		public void SetFocusPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000033")]
	public class CurveControlledBob
	{
		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x1A651D4", Offset = "0x1A651D4", VA = "0x1A651D4")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x1A65278", Offset = "0x1A65278", VA = "0x1A65278")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x1A65398", Offset = "0x1A65398", VA = "0x1A65398")]
		public CurveControlledBob()
		{
		}
	}
	[Token(Token = "0x2000034")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x200050C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471C4", Offset = "0xB471C4")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4001C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4001C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4001C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x4001C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x170003A2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002518")]
				[Address(RVA = "0x1A65CE4", Offset = "0x1A65CE4", VA = "0x1A65CE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600251A")]
				[Address(RVA = "0x1A65D4C", Offset = "0x1A65D4C", VA = "0x1A65D4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002515")]
			[Address(RVA = "0x1A65A6C", Offset = "0x1A65A6C", VA = "0x1A65A6C")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002516")]
			[Address(RVA = "0x1A65AA0", Offset = "0x1A65AA0", VA = "0x1A65AA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002517")]
			[Address(RVA = "0x1A65AA4", Offset = "0x1A65AA4", VA = "0x1A65AA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002519")]
			[Address(RVA = "0x1A65CEC", Offset = "0x1A65CEC", VA = "0x1A65CEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000239")]
		private const float k_Spring = 50f;

		[Token(Token = "0x400023A")]
		private const float k_Damper = 5f;

		[Token(Token = "0x400023B")]
		private const float k_Drag = 10f;

		[Token(Token = "0x400023C")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x400023D")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x400023E")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x1A655D8", Offset = "0x1A655D8", VA = "0x1A655D8")]
		private void Update()
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1A659EC", Offset = "0x1A659EC", VA = "0x1A659EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59EF8", Offset = "0xB59EF8")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x1A6593C", Offset = "0x1A6593C", VA = "0x1A6593C")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x1A65A98", Offset = "0x1A65A98", VA = "0x1A65A98")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x1A65D54", Offset = "0x1A65D54", VA = "0x1A65D54")]
		private void Start()
		{
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x1A65D88", Offset = "0x1A65D88", VA = "0x1A65D88")]
		private void Update()
		{
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x1A65FFC", Offset = "0x1A65FFC", VA = "0x1A65FFC")]
		public DynamicShadowSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000036")]
	public class FOVKick
	{
		[Token(Token = "0x200050D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471D4", Offset = "0xB471D4")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4001C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170003A4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600251E")]
				[Address(RVA = "0x1A665F8", Offset = "0x1A665F8", VA = "0x1A665F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002520")]
				[Address(RVA = "0x1A66660", Offset = "0x1A66660", VA = "0x1A66660", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600251B")]
			[Address(RVA = "0x1A661C8", Offset = "0x1A661C8", VA = "0x1A661C8")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600251C")]
			[Address(RVA = "0x1A66494", Offset = "0x1A66494", VA = "0x1A66494", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600251D")]
			[Address(RVA = "0x1A66498", Offset = "0x1A66498", VA = "0x1A66498", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600251F")]
			[Address(RVA = "0x1A66600", Offset = "0x1A66600", VA = "0x1A66600", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200050E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471E4", Offset = "0xB471E4")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4001C80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170003A6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002524")]
				[Address(RVA = "0x1A66424", Offset = "0x1A66424", VA = "0x1A66424", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002526")]
				[Address(RVA = "0x1A6648C", Offset = "0x1A6648C", VA = "0x1A6648C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002521")]
			[Address(RVA = "0x1A66264", Offset = "0x1A66264", VA = "0x1A66264")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6002522")]
			[Address(RVA = "0x1A662AC", Offset = "0x1A662AC", VA = "0x1A662AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002523")]
			[Address(RVA = "0x1A662B0", Offset = "0x1A662B0", VA = "0x1A662B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002525")]
			[Address(RVA = "0x1A6642C", Offset = "0x1A6642C", VA = "0x1A6642C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x1A66030", Offset = "0x1A66030", VA = "0x1A66030")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x1A66070", Offset = "0x1A66070", VA = "0x1A66070")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x1A66150", Offset = "0x1A66150", VA = "0x1A66150")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x1A66158", Offset = "0x1A66158", VA = "0x1A66158")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59F5C", Offset = "0xB59F5C")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000165")]
		[Address(RVA = "0x1A661F4", Offset = "0x1A661F4", VA = "0x1A661F4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB59FC0", Offset = "0xB59FC0")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x6000166")]
		[Address(RVA = "0x1A66290", Offset = "0x1A66290", VA = "0x1A66290")]
		public FOVKick()
		{
		}
	}
	[Token(Token = "0x2000037")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4214C", Offset = "0xB4214C")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4000251")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_FpsAccumulator;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentFps;

		[Token(Token = "0x4000255")]
		private const string display = "{0} FPS";

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text m_Text;

		[Token(Token = "0x6000167")]
		[Address(RVA = "0x1A66668", Offset = "0x1A66668", VA = "0x1A66668")]
		private void Start()
		{
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0x1A666D4", Offset = "0x1A666D4", VA = "0x1A666D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000169")]
		[Address(RVA = "0x1A667D0", Offset = "0x1A667D0", VA = "0x1A667D0")]
		public FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1A667D8", Offset = "0x1A667D8", VA = "0x1A667D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1A668B8", Offset = "0x1A668B8", VA = "0x1A668B8")]
		public FollowTarget()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000039")]
	public class LerpControlledBob
	{
		[Token(Token = "0x200050F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB471F4", Offset = "0xB471F4")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x4001C84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170003A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600252A")]
				[Address(RVA = "0x1A66BA8", Offset = "0x1A66BA8", VA = "0x1A66BA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600252C")]
				[Address(RVA = "0x1A66C10", Offset = "0x1A66C10", VA = "0x1A66C10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002527")]
			[Address(RVA = "0x1A66990", Offset = "0x1A66990", VA = "0x1A66990")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6002528")]
			[Address(RVA = "0x1A669C4", Offset = "0x1A669C4", VA = "0x1A669C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002529")]
			[Address(RVA = "0x1A669C8", Offset = "0x1A669C8", VA = "0x1A669C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600252B")]
			[Address(RVA = "0x1A66BB0", Offset = "0x1A66BB0", VA = "0x1A66BB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x1A66918", Offset = "0x1A66918", VA = "0x1A66918")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x1A66920", Offset = "0x1A66920", VA = "0x1A66920")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A024", Offset = "0xB5A024")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x1A669BC", Offset = "0x1A669BC", VA = "0x1A669BC")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x200003A")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x2000510")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47204", Offset = "0xB47204")]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4001C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x170003AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002530")]
				[Address(RVA = "0x1A67018", Offset = "0x1A67018", VA = "0x1A67018", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002532")]
				[Address(RVA = "0x1A67080", Offset = "0x1A67080", VA = "0x1A67080", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600252D")]
			[Address(RVA = "0x1A66DB0", Offset = "0x1A66DB0", VA = "0x1A66DB0")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600252E")]
			[Address(RVA = "0x1A66DE4", Offset = "0x1A66DE4", VA = "0x1A66DE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600252F")]
			[Address(RVA = "0x1A66DE8", Offset = "0x1A66DE8", VA = "0x1A66DE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002531")]
			[Address(RVA = "0x1A67020", Offset = "0x1A67020", VA = "0x1A67020", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x1A66C18", Offset = "0x1A66C18", VA = "0x1A66C18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x1A66D04", Offset = "0x1A66D04", VA = "0x1A66D04")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1A66D30", Offset = "0x1A66D30", VA = "0x1A66D30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A088", Offset = "0xB5A088")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x1A66DDC", Offset = "0x1A66DDC", VA = "0x1A66DDC")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x200003B")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x2000511")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x4001C8A")]
			Standalone,
			[Token(Token = "0x4001C8B")]
			Mobile
		}

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1A67088", Offset = "0x1A67088", VA = "0x1A67088")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1A6708C", Offset = "0x1A6708C", VA = "0x1A6708C")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x1A670A8", Offset = "0x1A670A8", VA = "0x1A670A8")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x1A67404", Offset = "0x1A67404", VA = "0x1A67404")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x200003C")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x1A6747C", Offset = "0x1A6747C", VA = "0x1A6747C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x1A674B8", Offset = "0x1A674B8", VA = "0x1A674B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0x1A67838", Offset = "0x1A67838", VA = "0x1A67838")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x200003D")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x1A678F8", Offset = "0x1A678F8", VA = "0x1A678F8")]
		private void Start()
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x1A678FC", Offset = "0x1A678FC", VA = "0x1A678FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0x1A67C28", Offset = "0x1A67C28", VA = "0x1A67C28")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200003E")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x2000512")]
		public enum Action
		{
			[Token(Token = "0x4001C8D")]
			Activate,
			[Token(Token = "0x4001C8E")]
			Deactivate,
			[Token(Token = "0x4001C8F")]
			Destroy,
			[Token(Token = "0x4001C90")]
			ReloadLevel,
			[Token(Token = "0x4001C91")]
			Call
		}

		[Serializable]
		[Token(Token = "0x2000513")]
		public class Entry
		{
			[Token(Token = "0x4001C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x4001C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x4001C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x6002533")]
			[Address(RVA = "0x1A68390", Offset = "0x1A68390", VA = "0x1A68390")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000514")]
		public class Entries
		{
			[Token(Token = "0x4001C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x6002534")]
			[Address(RVA = "0x1A67FA4", Offset = "0x1A67FA4", VA = "0x1A67FA4")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x2000515")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47214", Offset = "0xB47214")]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x170003AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002538")]
				[Address(RVA = "0x1A68078", Offset = "0x1A68078", VA = "0x1A68078", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600253A")]
				[Address(RVA = "0x1A680E0", Offset = "0x1A680E0", VA = "0x1A680E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002535")]
			[Address(RVA = "0x1A67EB8", Offset = "0x1A67EB8", VA = "0x1A67EB8")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6002536")]
			[Address(RVA = "0x1A67FAC", Offset = "0x1A67FAC", VA = "0x1A67FAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002537")]
			[Address(RVA = "0x1A67FB0", Offset = "0x1A67FB0", VA = "0x1A67FB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002539")]
			[Address(RVA = "0x1A68080", Offset = "0x1A68080", VA = "0x1A68080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000516")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47224", Offset = "0xB47224")]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x170003AE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600253E")]
				[Address(RVA = "0x1A681B4", Offset = "0x1A681B4", VA = "0x1A681B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002540")]
				[Address(RVA = "0x1A6821C", Offset = "0x1A6821C", VA = "0x1A6821C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600253B")]
			[Address(RVA = "0x1A67EE4", Offset = "0x1A67EE4", VA = "0x1A67EE4")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600253C")]
			[Address(RVA = "0x1A680E8", Offset = "0x1A680E8", VA = "0x1A680E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600253D")]
			[Address(RVA = "0x1A680EC", Offset = "0x1A680EC", VA = "0x1A680EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600253F")]
			[Address(RVA = "0x1A681BC", Offset = "0x1A681BC", VA = "0x1A681BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000517")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47234", Offset = "0xB47234")]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x170003B0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002544")]
				[Address(RVA = "0x1A68320", Offset = "0x1A68320", VA = "0x1A68320", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002546")]
				[Address(RVA = "0x1A68388", Offset = "0x1A68388", VA = "0x1A68388", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002541")]
			[Address(RVA = "0x1A67F10", Offset = "0x1A67F10", VA = "0x1A67F10")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002542")]
			[Address(RVA = "0x1A68224", Offset = "0x1A68224", VA = "0x1A68224", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002543")]
			[Address(RVA = "0x1A68228", Offset = "0x1A68228", VA = "0x1A68228", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002545")]
			[Address(RVA = "0x1A68328", Offset = "0x1A68328", VA = "0x1A68328", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x600017D")]
		[Address(RVA = "0x1A67C3C", Offset = "0x1A67C3C", VA = "0x1A67C3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x1A67D68", Offset = "0x1A67D68", VA = "0x1A67D68")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A0EC", Offset = "0xB5A0EC")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x600017F")]
		[Address(RVA = "0x1A67DD8", Offset = "0x1A67DD8", VA = "0x1A67DD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A150", Offset = "0xB5A150")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x1A67E48", Offset = "0x1A67E48", VA = "0x1A67E48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A1B4", Offset = "0xB5A1B4")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0x1A67F3C", Offset = "0x1A67F3C", VA = "0x1A67F3C")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x200003F")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool overrideTimeoutOnSpawn;

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x1A68398", Offset = "0x1A68398", VA = "0x1A68398")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x1A68404", Offset = "0x1A68404", VA = "0x1A68404")]
		public void setTimeout(float timeout)
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x1A68468", Offset = "0x1A68468", VA = "0x1A68468")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0x1A68508", Offset = "0x1A68508", VA = "0x1A68508")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x2000040")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000518")]
		public class WaypointList
		{
			[Token(Token = "0x4001C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x4001CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x6002547")]
			[Address(RVA = "0x1A69348", Offset = "0x1A69348", VA = "0x1A69348")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x2000519")]
		public struct RoutePoint
		{
			[Token(Token = "0x4001CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x6002548")]
			[Address(RVA = "0x1A68CD4", Offset = "0x1A68CD4", VA = "0x1A68CD4")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48F30", Offset = "0xB48F30")]
		private float <Length>k__BackingField;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x1700000C")]
		public float Length
		{
			[Token(Token = "0x6000186")]
			[Address(RVA = "0x1A68518", Offset = "0x1A68518", VA = "0x1A68518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A218", Offset = "0xB5A218")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000187")]
			[Address(RVA = "0x1A68520", Offset = "0x1A68520", VA = "0x1A68520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A228", Offset = "0xB5A228")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000D")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x6000188")]
			[Address(RVA = "0x1A68528", Offset = "0x1A68528", VA = "0x1A68528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x1A68544", Offset = "0x1A68544", VA = "0x1A68544")]
		private void Awake()
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1A6886C", Offset = "0x1A6886C", VA = "0x1A6886C")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1A6897C", Offset = "0x1A6897C", VA = "0x1A6897C")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1A68CE4", Offset = "0x1A68CE4", VA = "0x1A68CE4")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0x1A685A0", Offset = "0x1A685A0", VA = "0x1A685A0")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1A6904C", Offset = "0x1A6904C", VA = "0x1A6904C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x1A692CC", Offset = "0x1A692CC", VA = "0x1A692CC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x1A69054", Offset = "0x1A69054", VA = "0x1A69054")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1A692D4", Offset = "0x1A692D4", VA = "0x1A692D4")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x2000041")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x200051A")]
		public enum ProgressStyle
		{
			[Token(Token = "0x4001CA4")]
			SmoothAlongRoute,
			[Token(Token = "0x4001CA5")]
			PointToPoint
		}

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48FB0", Offset = "0xB48FB0")]
		private WaypointCircuit.RoutePoint <targetPoint>k__BackingField;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48FC0", Offset = "0xB48FC0")]
		private WaypointCircuit.RoutePoint <speedPoint>k__BackingField;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB48FD0", Offset = "0xB48FD0")]
		private WaypointCircuit.RoutePoint <progressPoint>k__BackingField;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x1700000E")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x6000192")]
			[Address(RVA = "0x1A693A8", Offset = "0x1A693A8", VA = "0x1A693A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A238", Offset = "0xB5A238")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000193")]
			[Address(RVA = "0x1A693BC", Offset = "0x1A693BC", VA = "0x1A693BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A248", Offset = "0xB5A248")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000F")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x6000194")]
			[Address(RVA = "0x1A693D0", Offset = "0x1A693D0", VA = "0x1A693D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A258", Offset = "0xB5A258")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000195")]
			[Address(RVA = "0x1A693E4", Offset = "0x1A693E4", VA = "0x1A693E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A268", Offset = "0xB5A268")]
			private set
			{
			}
		}

		[Token(Token = "0x17000010")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x6000196")]
			[Address(RVA = "0x1A693F8", Offset = "0x1A693F8", VA = "0x1A693F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A278", Offset = "0xB5A278")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x6000197")]
			[Address(RVA = "0x1A6940C", Offset = "0x1A6940C", VA = "0x1A6940C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A288", Offset = "0xB5A288")]
			private set
			{
			}
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x1A69420", Offset = "0x1A69420", VA = "0x1A69420")]
		private void Start()
		{
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x1A69504", Offset = "0x1A69504", VA = "0x1A69504")]
		public void Reset()
		{
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x1A695DC", Offset = "0x1A695DC", VA = "0x1A695DC")]
		private void Update()
		{
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x1A69B44", Offset = "0x1A69B44", VA = "0x1A69B44")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x1A69D1C", Offset = "0x1A69D1C", VA = "0x1A69D1C")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x2000042")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x20A5208", Offset = "0x20A5208", VA = "0x20A5208")]
		private void Update()
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x20A544C", Offset = "0x20A544C", VA = "0x20A544C")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x2000043")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB421C0", Offset = "0xB421C0")]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0x1A69D38", Offset = "0x1A69D38", VA = "0x1A69D38")]
		public void Awake()
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x1A69D5C", Offset = "0x1A69D5C", VA = "0x1A69D5C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x1A69DBC", Offset = "0x1A69DBC", VA = "0x1A69DBC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x1A69E1C", Offset = "0x1A69E1C", VA = "0x1A69E1C")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x2000044")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42234", Offset = "0xB42234")]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x1A69E24", Offset = "0x1A69E24", VA = "0x1A69E24")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class MeshContainer
	{
		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x1A69E2C", Offset = "0x1A69E2C", VA = "0x1A69E2C")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x1A69E80", Offset = "0x1A69E80", VA = "0x1A69E80")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000046")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB422A8", Offset = "0xB422A8")]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x1A69EC4", Offset = "0x1A69EC4", VA = "0x1A69EC4")]
		public void Start()
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x1A69FB4", Offset = "0x1A69FB4", VA = "0x1A69FB4")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x1A6A2BC", Offset = "0x1A6A2BC", VA = "0x1A6A2BC")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x1A6A370", Offset = "0x1A6A370", VA = "0x1A6A370")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x1A6A478", Offset = "0x1A6A478", VA = "0x1A6A478")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x1A6AD40", Offset = "0x1A6AD40", VA = "0x1A6AD40")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x1A6ADA0", Offset = "0x1A6ADA0", VA = "0x1A6ADA0")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x1A6AE98", Offset = "0x1A6AE98", VA = "0x1A6AE98")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x1A6AEF8", Offset = "0x1A6AEF8", VA = "0x1A6AEF8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x1A6A5E0", Offset = "0x1A6A5E0", VA = "0x1A6A5E0")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x1A6AF58", Offset = "0x1A6AF58", VA = "0x1A6AF58")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x1A6B458", Offset = "0x1A6B458", VA = "0x1A6B458")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x1A6AFBC", Offset = "0x1A6AFBC", VA = "0x1A6AFBC")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x1A6B690", Offset = "0x1A6B690", VA = "0x1A6B690")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x1A6B274", Offset = "0x1A6B274", VA = "0x1A6B274")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x1A6B6B0", Offset = "0x1A6B6B0", VA = "0x1A6B6B0")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x2000047")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4231C", Offset = "0xB4231C")]
	[ExecuteInEditMode]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x20A2A24", Offset = "0x20A2A24", VA = "0x20A2A24")]
		public void Start()
		{
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x20A2B10", Offset = "0x20A2B10", VA = "0x20A2B10")]
		public void Update()
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x20A2D38", Offset = "0x20A2D38", VA = "0x20A2D38")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x2000048")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x200051B")]
		public enum WaterMode
		{
			[Token(Token = "0x4001CA7")]
			Simple,
			[Token(Token = "0x4001CA8")]
			Reflective,
			[Token(Token = "0x4001CA9")]
			Refractive
		}

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x20A2D40", Offset = "0x20A2D40", VA = "0x20A2D40")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x20A48E4", Offset = "0x20A48E4", VA = "0x20A48E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x20A4BD0", Offset = "0x20A4BD0", VA = "0x20A4BD0")]
		private void Update()
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x20A4200", Offset = "0x20A4200", VA = "0x20A4200")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x20A37F8", Offset = "0x20A37F8", VA = "0x20A37F8")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x20A37E4", Offset = "0x20A37E4", VA = "0x20A37E4")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x20A369C", Offset = "0x20A369C", VA = "0x20A369C")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x20A4700", Offset = "0x20A4700", VA = "0x20A4700")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x20A445C", Offset = "0x20A445C", VA = "0x20A445C")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x20A4E5C", Offset = "0x20A4E5C", VA = "0x20A4E5C")]
		public Water()
		{
		}
	}
	[Token(Token = "0x2000049")]
	public enum WaterQuality
	{
		[Token(Token = "0x40002B3")]
		High = 2,
		[Token(Token = "0x40002B4")]
		Medium = 1,
		[Token(Token = "0x40002B5")]
		Low = 0
	}
	[Token(Token = "0x200004A")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x20A4F38", Offset = "0x20A4F38", VA = "0x20A4F38")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x20A50B8", Offset = "0x20A50B8", VA = "0x20A50B8")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x20A516C", Offset = "0x20A516C", VA = "0x20A516C")]
		public void Update()
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x20A51F0", Offset = "0x20A51F0", VA = "0x20A51F0")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x200004B")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x20A5454", Offset = "0x20A5454", VA = "0x20A5454")]
		public void Start()
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x20A5458", Offset = "0x20A5458", VA = "0x20A5458")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x20A55FC", Offset = "0x20A55FC", VA = "0x20A55FC")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x20A5710", Offset = "0x20A5710", VA = "0x20A5710")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x200004C")]
	public enum AAMode
	{
		[Token(Token = "0x40002BC")]
		FXAA2,
		[Token(Token = "0x40002BD")]
		FXAA3Console,
		[Token(Token = "0x40002BE")]
		FXAA1PresetA,
		[Token(Token = "0x40002BF")]
		FXAA1PresetB,
		[Token(Token = "0x40002C0")]
		NFAA,
		[Token(Token = "0x40002C1")]
		SSAA,
		[Token(Token = "0x40002C2")]
		DLAA
	}
	[Token(Token = "0x200004D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB423C0", Offset = "0xB423C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB423C0", Offset = "0xB423C0")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AAMode mode;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool showGeneratedNormals;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offsetScale;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float blurRadius;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeThresholdMin;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float edgeThreshold;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgeSharpness;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool dlaaSharp;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader ssaaShader;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material ssaa;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dlaaShader;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dlaa;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader nfaaShader;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material nfaa;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader shaderFXAAII;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material materialFXAAII;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material materialFXAAIII;

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x17B8A70", Offset = "0x17B8A70", VA = "0x17B8A70")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x17B8AD4", Offset = "0x17B8AD4", VA = "0x17B8AD4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x17B8BC0", Offset = "0x17B8BC0", VA = "0x17B8BC0")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x17B9108", Offset = "0x17B9108", VA = "0x17B9108")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x200004E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42458", Offset = "0xB42458")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42458", Offset = "0xB42458")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x200051C")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001CAB")]
			Ghosting,
			[Token(Token = "0x4001CAC")]
			Anamorphic,
			[Token(Token = "0x4001CAD")]
			Combined
		}

		[Token(Token = "0x200051D")]
		public enum TweakMode
		{
			[Token(Token = "0x4001CAF")]
			Basic,
			[Token(Token = "0x4001CB0")]
			Complex
		}

		[Token(Token = "0x200051E")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4001CB2")]
			Auto,
			[Token(Token = "0x4001CB3")]
			On,
			[Token(Token = "0x4001CB4")]
			Off
		}

		[Token(Token = "0x200051F")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4001CB6")]
			Screen,
			[Token(Token = "0x4001CB7")]
			Add
		}

		[Token(Token = "0x2000520")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001CB9")]
			Cheap,
			[Token(Token = "0x4001CBA")]
			High
		}

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode tweakMode;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BloomQuality quality;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color bloomThresholdColor;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int bloomBlurIterations;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float flareRotation;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hollyStretchWidth;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float lensflareIntensity;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensflareThreshold;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lensFlareSaturation;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorA;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorB;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color flareColorC;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color flareColorD;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader lensFlareShader;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader screenBlendShader;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material screenBlend;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x17B912C", Offset = "0x17B912C", VA = "0x17B912C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x17B91CC", Offset = "0x17B91CC", VA = "0x17B91CC")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x17BA588", Offset = "0x17BA588", VA = "0x17BA588")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x17BA388", Offset = "0x17BA388", VA = "0x17BA388")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x17BA090", Offset = "0x17BA090", VA = "0x17BA090")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x17B9FAC", Offset = "0x17B9FAC", VA = "0x17B9FAC")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x17BA17C", Offset = "0x17BA17C", VA = "0x17BA17C")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x17BA650", Offset = "0x17BA650", VA = "0x17BA650")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200004F")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x40002F8")]
		Ghosting,
		[Token(Token = "0x40002F9")]
		Anamorphic,
		[Token(Token = "0x40002FA")]
		Combined
	}
	[Token(Token = "0x2000050")]
	public enum TweakMode34
	{
		[Token(Token = "0x40002FC")]
		Basic,
		[Token(Token = "0x40002FD")]
		Complex
	}
	[Token(Token = "0x2000051")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x40002FF")]
		Auto,
		[Token(Token = "0x4000300")]
		On,
		[Token(Token = "0x4000301")]
		Off
	}
	[Token(Token = "0x2000052")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4000303")]
		Screen,
		[Token(Token = "0x4000304")]
		Add
	}
	[Token(Token = "0x2000053")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB424F0", Offset = "0xB424F0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB424F0", Offset = "0xB424F0")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool doHdr;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float sepBlurSpread;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float bloomIntensity;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float bloomThreshold;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int bloomBlurIterations;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool lensflares;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lensflareIntensity;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareThreshold;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color flareColorA;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color flareColorB;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color flareColorC;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color flareColorD;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader lensFlareShader;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader vignetteShader;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material vignetteMaterial;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader separableBlurShader;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material screenBlend;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x17BA790", Offset = "0x17BA790", VA = "0x17BA790", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x17BA86C", Offset = "0x17BA86C", VA = "0x17BA86C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x17BB7B8", Offset = "0x17BB7B8", VA = "0x17BB7B8")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x17BB5C8", Offset = "0x17BB5C8", VA = "0x17BB5C8")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x17BB34C", Offset = "0x17BB34C", VA = "0x17BB34C")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x17BB474", Offset = "0x17BB474", VA = "0x17BB474")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x17BB86C", Offset = "0x17BB86C", VA = "0x17BB86C")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x2000054")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42588", Offset = "0xB42588")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42588", Offset = "0xB42588")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000521")]
		public enum Resolution
		{
			[Token(Token = "0x4001CBC")]
			Low,
			[Token(Token = "0x4001CBD")]
			High
		}

		[Token(Token = "0x2000522")]
		public enum BlurType
		{
			[Token(Token = "0x4001CBF")]
			Standard,
			[Token(Token = "0x4001CC0")]
			Sgx
		}

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48FE0", Offset = "0xB48FE0")]
		public float threshold;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB48FF8", Offset = "0xB48FF8")]
		public float intensity;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49010", Offset = "0xB49010")]
		public float blurSize;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Resolution resolution;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49028", Offset = "0xB49028")]
		public int blurIterations;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurType blurType;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader fastBloomShader;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material fastBloomMaterial;

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x17BB99C", Offset = "0x17BB99C", VA = "0x17BB99C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x17BBA00", Offset = "0x17BBA00", VA = "0x17BBA00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x17BBAB0", Offset = "0x17BBAB0", VA = "0x17BBAB0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x17BBE7C", Offset = "0x17BBE7C", VA = "0x17BBE7C")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000055")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42620", Offset = "0xB42620")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49040", Offset = "0xB49040")]
		public int iterations;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49058", Offset = "0xB49058")]
		public float blurSpread;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000011")]
		protected Material material
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x17BBEA0", Offset = "0x17BBEA0", VA = "0x17BBEA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x17BBFD8", Offset = "0x17BBFD8", VA = "0x17BBFD8")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x17BC0D4", Offset = "0x17BC0D4", VA = "0x17BC0D4")]
		protected void Start()
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x17BC194", Offset = "0x17BC194", VA = "0x17BC194")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x17BC338", Offset = "0x17BC338", VA = "0x17BC338")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x17BC4B0", Offset = "0x17BC4B0", VA = "0x17BC4B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x17BC61C", Offset = "0x17BC61C", VA = "0x17BC61C")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000056")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4266C", Offset = "0xB4266C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4266C", Offset = "0xB4266C")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000523")]
		public enum BlurType
		{
			[Token(Token = "0x4001CC2")]
			StandardGauss,
			[Token(Token = "0x4001CC3")]
			SgxGauss
		}

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49070", Offset = "0xB49070")]
		public int downsample;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49088", Offset = "0xB49088")]
		public float blurSize;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB490A0", Offset = "0xB490A0")]
		public int blurIterations;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurType blurType;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x17BC638", Offset = "0x17BC638", VA = "0x17BC638", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x17BC69C", Offset = "0x17BC69C", VA = "0x17BC69C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x17BC74C", Offset = "0x17BC74C", VA = "0x17BC74C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x17BCAF0", Offset = "0x17BCAF0", VA = "0x17BCAF0")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000057")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42704", Offset = "0xB42704")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42704", Offset = "0xB42704")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000524")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4001CC5")]
			CameraMotion,
			[Token(Token = "0x4001CC6")]
			LocalBlur,
			[Token(Token = "0x4001CC7")]
			Reconstruction,
			[Token(Token = "0x4001CC8")]
			ReconstructionDX11,
			[Token(Token = "0x4001CC9")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool preview;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 previewScale;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float movementScale;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rotationScale;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxVelocity;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minVelocity;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float velocityScale;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float softZDistance;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int velocityDownsample;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject tmpCam;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shader;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader replacementClear;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material motionBlurMaterial;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float jitter;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool showVelocity;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float showVelocityScale;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int prevFrameCount;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool wasActive;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Camera _camera;

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x17BCB0C", Offset = "0x17BCB0C", VA = "0x17BCB0C")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x17BCDA8", Offset = "0x17BCDA8", VA = "0x17BCDA8")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x17BD004", Offset = "0x17BD004", VA = "0x17BD004")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x17BD0C4", Offset = "0x17BD0C4", VA = "0x17BD0C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x17BD228", Offset = "0x17BD228", VA = "0x17BD228", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x17BD2C0", Offset = "0x17BD2C0", VA = "0x17BD2C0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x17BCEA8", Offset = "0x17BCEA8", VA = "0x17BCEA8")]
		private void Remember()
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x17BECC8", Offset = "0x17BECC8", VA = "0x17BECC8")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x17BEBDC", Offset = "0x17BEBDC", VA = "0x17BEBDC")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x17BECB8", Offset = "0x17BECB8", VA = "0x17BECB8")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x17BF004", Offset = "0x17BF004", VA = "0x17BF004")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000058")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4279C", Offset = "0xB4279C")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000525")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4001CCB")]
			Simple,
			[Token(Token = "0x4001CCC")]
			Advanced
		}

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve redChannel;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useDepthCorrection;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccMaterial;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float saturation;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool selectiveCc;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color selectiveFromColor;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Color selectiveToColor;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool updateTextures;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1A546CC", Offset = "0x1A546CC", VA = "0x1A546CC")]
		private new void Start()
		{
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1A54708", Offset = "0x1A54708", VA = "0x1A54708")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1A5470C", Offset = "0x1A5470C", VA = "0x1A5470C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1A54E98", Offset = "0x1A54E98", VA = "0x1A54E98")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1A552A8", Offset = "0x1A552A8", VA = "0x1A552A8")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1A552AC", Offset = "0x1A552AC", VA = "0x1A552AC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x1A555A8", Offset = "0x1A555A8", VA = "0x1A555A8")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000059")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB427E8", Offset = "0xB427E8")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string basedOnTempTex;

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x1A55C54", Offset = "0x1A55C54", VA = "0x1A55C54", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x1A55CA8", Offset = "0x1A55CA8", VA = "0x1A55CA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x1A55D50", Offset = "0x1A55D50", VA = "0x1A55D50")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x1A55DF8", Offset = "0x1A55DF8", VA = "0x1A55DF8")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1A55FF4", Offset = "0x1A55FF4", VA = "0x1A55FF4")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1A560E8", Offset = "0x1A560E8", VA = "0x1A560E8")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1A563F4", Offset = "0x1A563F4", VA = "0x1A563F4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x1A565E0", Offset = "0x1A565E0", VA = "0x1A565E0")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x200005A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42834", Offset = "0xB42834")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1A56634", Offset = "0x1A56634", VA = "0x1A56634")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x1A567B0", Offset = "0x1A567B0", VA = "0x1A567B0")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x200005B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42880", Offset = "0xB42880")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42880", Offset = "0xB42880")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB490B8", Offset = "0xB490B8")]
		public float intensity;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB490D0", Offset = "0xB490D0")]
		public float threshold;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB490EC", Offset = "0xB490EC")]
		public float blurSpread;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x1A567C0", Offset = "0x1A567C0", VA = "0x1A567C0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1A56830", Offset = "0x1A56830", VA = "0x1A56830")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1A56B98", Offset = "0x1A56B98", VA = "0x1A56B98")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42918", Offset = "0xB42918")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49104", Offset = "0xB49104")]
		public float adaptationSpeed;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49120", Offset = "0xB49120")]
		public float limitMinimum;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49138", Offset = "0xB49138")]
		public float limitMaximum;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000012")]
		protected Material materialLum
		{
			[Token(Token = "0x600020E")]
			[Address(RVA = "0x1A56BAC", Offset = "0x1A56BAC", VA = "0x1A56BAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		protected Material materialReduce
		{
			[Token(Token = "0x600020F")]
			[Address(RVA = "0x1A56C70", Offset = "0x1A56C70", VA = "0x1A56C70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6000210")]
			[Address(RVA = "0x1A56D34", Offset = "0x1A56D34", VA = "0x1A56D34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		protected Material materialApply
		{
			[Token(Token = "0x6000211")]
			[Address(RVA = "0x1A56DF8", Offset = "0x1A56DF8", VA = "0x1A56DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1A56EBC", Offset = "0x1A56EBC", VA = "0x1A56EBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0x1A56F50", Offset = "0x1A56F50", VA = "0x1A56F50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x1A570A0", Offset = "0x1A570A0", VA = "0x1A570A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x1A572C8", Offset = "0x1A572C8", VA = "0x1A572C8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1A57524", Offset = "0x1A57524", VA = "0x1A57524")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x1A57734", Offset = "0x1A57734", VA = "0x1A57734")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42964", Offset = "0xB42964")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42964", Offset = "0xB42964")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensity;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int softness;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spread;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader depthFetchShader;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material depthFetchMaterial;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1A577AC", Offset = "0x1A577AC", VA = "0x1A577AC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1A57824", Offset = "0x1A57824", VA = "0x1A57824")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1A57BCC", Offset = "0x1A57BCC", VA = "0x1A57BCC")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x200005E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB429FC", Offset = "0xB429FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB429FC", Offset = "0xB429FC")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000526")]
		public enum BlurType
		{
			[Token(Token = "0x4001CCE")]
			DiscBlur,
			[Token(Token = "0x4001CCF")]
			DX11
		}

		[Token(Token = "0x2000527")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4001CD1")]
			Low,
			[Token(Token = "0x4001CD2")]
			Medium,
			[Token(Token = "0x4001CD3")]
			High
		}

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visualizeFocus;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalLength;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalSize;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float aperture;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform focalTransform;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxBlurSize;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool highResolution;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlurType blurType;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool nearBlur;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float foregroundOverlap;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dofHdrShader;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofHdrMaterial;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader dx11BokehShader;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float dx11BokehScale;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float focalDistance01;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float internalBlurWidth;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera cachedCamera;

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x1A57BE4", Offset = "0x1A57BE4", VA = "0x1A57BE4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x1A57D84", Offset = "0x1A57D84", VA = "0x1A57D84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x1A57DFC", Offset = "0x1A57DFC", VA = "0x1A57DFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x1A57F04", Offset = "0x1A57F04", VA = "0x1A57F04")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x1A57C68", Offset = "0x1A57C68", VA = "0x1A57C68")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x1A57F48", Offset = "0x1A57F48", VA = "0x1A57F48")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x1A580A4", Offset = "0x1A580A4", VA = "0x1A580A4")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x1A583C4", Offset = "0x1A583C4", VA = "0x1A583C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x1A59A1C", Offset = "0x1A59A1C", VA = "0x1A59A1C")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42A94", Offset = "0xB42A94")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42A94", Offset = "0xB42A94")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x2000528")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4001CD5")]
			OnlyBackground = 1,
			[Token(Token = "0x4001CD6")]
			BackgroundAndForeground
		}

		[Token(Token = "0x2000529")]
		public enum DofResolution
		{
			[Token(Token = "0x4001CD8")]
			High = 2,
			[Token(Token = "0x4001CD9")]
			Medium,
			[Token(Token = "0x4001CDA")]
			Low
		}

		[Token(Token = "0x200052A")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4001CDC")]
			Low = 1,
			[Token(Token = "0x4001CDD")]
			High = 2,
			[Token(Token = "0x4001CDE")]
			VeryHigh = 4
		}

		[Token(Token = "0x200052B")]
		public enum BokehDestination
		{
			[Token(Token = "0x4001CE0")]
			Background = 1,
			[Token(Token = "0x4001CE1")]
			Foreground,
			[Token(Token = "0x4001CE2")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DofResolution resolution;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool simpleTweakMode;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalPoint;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smoothness;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float focalZDistance;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float focalZStartCurve;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalZEndCurve;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float focalStartCurve;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float focalEndCurve;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float focalDistance01;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform objectFocus;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float focalSize;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float maxBlurSpread;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofBlurShader;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofBlurMaterial;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dofShader;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dofMaterial;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool visualize;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float widthOverHeight;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float oneOverBaseSize;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool bokeh;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool bokehSupport;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader bokehShader;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float bokehScale;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float bokehIntensity;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int bokehDownsample;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material bokehMaterial;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Camera _camera;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private RenderTexture bokehSource;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x1A59A70", Offset = "0x1A59A70", VA = "0x1A59A70")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x1A59B44", Offset = "0x1A59B44", VA = "0x1A59B44", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x1A59C48", Offset = "0x1A59C48", VA = "0x1A59C48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x1A59E74", Offset = "0x1A59E74", VA = "0x1A59E74")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1A59EEC", Offset = "0x1A59EEC", VA = "0x1A59EEC")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1A5A048", Offset = "0x1A5A048", VA = "0x1A5A048")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x1A5A06C", Offset = "0x1A5A06C", VA = "0x1A5A06C")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x1A5A090", Offset = "0x1A5A090", VA = "0x1A5A090")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x1A5AE74", Offset = "0x1A5AE74", VA = "0x1A5AE74")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1A5B528", Offset = "0x1A5B528", VA = "0x1A5B528")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x1A5B990", Offset = "0x1A5B990", VA = "0x1A5B990")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x1A5AD28", Offset = "0x1A5AD28", VA = "0x1A5AD28")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x1A5B110", Offset = "0x1A5B110", VA = "0x1A5B110")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1A5B7E4", Offset = "0x1A5B7E4", VA = "0x1A5B7E4")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1A5A9F4", Offset = "0x1A5A9F4", VA = "0x1A5A9F4")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x1A5BE78", Offset = "0x1A5BE78", VA = "0x1A5BE78")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000060")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42B2C", Offset = "0xB42B2C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42B2C", Offset = "0xB42B2C")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x200052C")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4001CE4")]
			TriangleDepthNormals,
			[Token(Token = "0x4001CE5")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4001CE6")]
			SobelDepth,
			[Token(Token = "0x4001CE7")]
			SobelDepthThin,
			[Token(Token = "0x4001CE8")]
			TriangleLuminance
		}

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EdgeDetectMode mode;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sensitivityDepth;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sensitivityNormals;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lumThreshold;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeExp;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sampleDist;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgesOnly;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader edgeDetectShader;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x1A5BF50", Offset = "0x1A5BF50", VA = "0x1A5BF50", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x1A5C088", Offset = "0x1A5C088", VA = "0x1A5C088")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1A5BFC8", Offset = "0x1A5BFC8", VA = "0x1A5BFC8")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1A5C094", Offset = "0x1A5C094", VA = "0x1A5C094")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1A5C098", Offset = "0x1A5C098", VA = "0x1A5C098")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1A5C284", Offset = "0x1A5C284", VA = "0x1A5C284")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000061")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42BC4", Offset = "0xB42BC4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42BC4", Offset = "0xB42BC4")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49150", Offset = "0xB49150")]
		public float strengthX;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49168", Offset = "0xB49168")]
		public float strengthY;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fishEyeShader;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fisheyeMaterial;

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x1A5C2D4", Offset = "0x1A5C2D4", VA = "0x1A5C2D4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x1A5C32C", Offset = "0x1A5C32C", VA = "0x1A5C32C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x1A5C49C", Offset = "0x1A5C49C", VA = "0x1A5C49C")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42C5C", Offset = "0xB42C5C")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49180", Offset = "0xB49180")]
		public float rampOffset;

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x1A5C4B0", Offset = "0x1A5C4B0", VA = "0x1A5C4B0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x1A5C58C", Offset = "0x1A5C58C", VA = "0x1A5C58C")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42CA8", Offset = "0xB42CA8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42CA8", Offset = "0xB42CA8")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000016")]
		protected Material material
		{
			[Token(Token = "0x6000241")]
			[Address(RVA = "0x1A566EC", Offset = "0x1A566EC", VA = "0x1A566EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x1A5C594", Offset = "0x1A5C594", VA = "0x1A5C594", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x1A5C644", Offset = "0x1A5C644", VA = "0x1A5C644", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x1A567B8", Offset = "0x1A567B8", VA = "0x1A567B8")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42D30", Offset = "0xB42D30")]
	public class ImageEffects
	{
		[Token(Token = "0x6000244")]
		[Address(RVA = "0x1A5C6F4", Offset = "0x1A5C6F4", VA = "0x1A5C6F4")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x1A5C970", Offset = "0x1A5C970", VA = "0x1A5C970")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5A2A8", Offset = "0xB5A2A8")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x1A5C9E8", Offset = "0x1A5C9E8", VA = "0x1A5C9E8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5A2E0", Offset = "0xB5A2E0")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x1A5CA68", Offset = "0x1A5CA68", VA = "0x1A5CA68")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42D68", Offset = "0xB42D68")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42D68", Offset = "0xB42D68")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49198", Offset = "0xB49198")]
		public float blurAmount;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x1A5CA70", Offset = "0x1A5CA70", VA = "0x1A5CA70", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x1A5CA74", Offset = "0x1A5CA74", VA = "0x1A5CA74", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x1A5CAE8", Offset = "0x1A5CAE8", VA = "0x1A5CAE8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x1A5CE6C", Offset = "0x1A5CE6C", VA = "0x1A5CE6C")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000066")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42E00", Offset = "0xB42E00")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42E00", Offset = "0xB42E00")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensityMultiplier;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float generalIntensity;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blackIntensity;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float whiteIntensity;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float midGrey;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool dx11Grain;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float softness;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool monochrome;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 intensities;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 tiling;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float monochromeTiling;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FilterMode filterMode;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D noiseTexture;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader noiseShader;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material noiseMaterial;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x1A5CE80", Offset = "0x1A5CE80", VA = "0x1A5CE80", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1A5CEF8", Offset = "0x1A5CEF8", VA = "0x1A5CEF8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1A5D860", Offset = "0x1A5D860", VA = "0x1A5D860")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1A5DBDC", Offset = "0x1A5DBDC", VA = "0x1A5DBDC")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42E98", Offset = "0xB42E98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB42E98", Offset = "0xB42E98")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB491B4", Offset = "0xB491B4")]
		public float grainIntensityMin;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB491CC", Offset = "0xB491CC")]
		public float grainIntensityMax;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB491E4", Offset = "0xB491E4")]
		public float grainSize;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49204", Offset = "0xB49204")]
		public float scratchIntensityMin;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4921C", Offset = "0xB4921C")]
		public float scratchIntensityMax;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49234", Offset = "0xB49234")]
		public float scratchFPS;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4924C", Offset = "0xB4924C")]
		public float scratchJitter;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000017")]
		protected Material material
		{
			[Token(Token = "0x6000252")]
			[Address(RVA = "0x1A5DE24", Offset = "0x1A5DE24", VA = "0x1A5DE24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1A5DCE4", Offset = "0x1A5DCE4", VA = "0x1A5DCE4")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1A5DF80", Offset = "0x1A5DF80", VA = "0x1A5DF80")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x1A5E084", Offset = "0x1A5E084", VA = "0x1A5E084")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x1A5E1C0", Offset = "0x1A5E1C0", VA = "0x1A5E1C0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x1A5E508", Offset = "0x1A5E508", VA = "0x1A5E508")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000068")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42F30", Offset = "0xB42F30")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x1A54A74", Offset = "0x1A54A74", VA = "0x1A54A74")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x1A5E568", Offset = "0x1A5E568", VA = "0x1A5E568")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x1A5E744", Offset = "0x1A5E744", VA = "0x1A5E744")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x1A5E750", Offset = "0x1A5E750", VA = "0x1A5E750")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x1A5E754", Offset = "0x1A5E754", VA = "0x1A5E754")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x1A5E804", Offset = "0x1A5E804", VA = "0x1A5E804")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x1A5E80C", Offset = "0x1A5E80C", VA = "0x1A5E80C", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x1A546FC", Offset = "0x1A546FC", VA = "0x1A546FC")]
		protected void Start()
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x1A5496C", Offset = "0x1A5496C", VA = "0x1A5496C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x1A5E8BC", Offset = "0x1A5E8BC", VA = "0x1A5E8BC")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x1A5E918", Offset = "0x1A5E918", VA = "0x1A5E918")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x1A54DF0", Offset = "0x1A54DF0", VA = "0x1A54DF0")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x1A5E920", Offset = "0x1A5E920", VA = "0x1A5E920")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x1A5E53C", Offset = "0x1A5E53C", VA = "0x1A5E53C")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1A5EB20", Offset = "0x1A5EB20", VA = "0x1A5EB20")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x1A55BD8", Offset = "0x1A55BD8", VA = "0x1A55BD8")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB42FA4", Offset = "0xB42FA4")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x1A5EE9C", Offset = "0x1A5EE9C", VA = "0x1A5EE9C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1A5EF08", Offset = "0x1A5EF08", VA = "0x1A5EF08")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1A5F184", Offset = "0x1A5F184", VA = "0x1A5F184")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1A5F4FC", Offset = "0x1A5F4FC", VA = "0x1A5F4FC")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x1A5F6A8", Offset = "0x1A5F6A8", VA = "0x1A5F6A8")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x200006A")]
	internal class Quads
	{
		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x1A5F6B0", Offset = "0x1A5F6B0", VA = "0x1A5F6B0")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x1A59CA4", Offset = "0x1A59CA4", VA = "0x1A59CA4")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x1A5BBB8", Offset = "0x1A5BBB8", VA = "0x1A5BBB8")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x1A5F7D4", Offset = "0x1A5F7D4", VA = "0x1A5F7D4")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x1A5FD08", Offset = "0x1A5FD08", VA = "0x1A5FD08")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB43018", Offset = "0xB43018")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB43018", Offset = "0xB43018")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x200052D")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4001CEA")]
			Additive,
			[Token(Token = "0x4001CEB")]
			ScreenBlend,
			[Token(Token = "0x4001CEC")]
			Multiply,
			[Token(Token = "0x4001CED")]
			Overlay,
			[Token(Token = "0x4001CEE")]
			AlphaBlend
		}

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D texture;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader overlayShader;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material overlayMaterial;

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x1A5FD14", Offset = "0x1A5FD14", VA = "0x1A5FD14", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x1A5FD6C", Offset = "0x1A5FD6C", VA = "0x1A5FD6C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x1A5FED4", Offset = "0x1A5FED4", VA = "0x1A5FED4")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB430B0", Offset = "0xB430B0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB430B0", Offset = "0xB430B0")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49264", Offset = "0xB49264")]
		public float intensity;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4927C", Offset = "0xB4927C")]
		public float radius;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49298", Offset = "0xB49298")]
		public int blurIterations;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB492B0", Offset = "0xB492B0")]
		public float blurFilterDistance;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB492C8", Offset = "0xB492C8")]
		public int downsample;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D rand;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader aoShader;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material aoMaterial;

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x1A5FEE4", Offset = "0x1A5FEE4", VA = "0x1A5FEE4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x1A5FF3C", Offset = "0x1A5FF3C", VA = "0x1A5FF3C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x1A5FFE4", Offset = "0x1A5FFE4", VA = "0x1A5FFE4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x1A607F8", Offset = "0x1A607F8", VA = "0x1A607F8")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB43148", Offset = "0xB43148")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB43148", Offset = "0xB43148")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x200052E")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4001CF0")]
			Low,
			[Token(Token = "0x4001CF1")]
			Medium,
			[Token(Token = "0x4001CF2")]
			High
		}

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB492E0", Offset = "0xB492E0")]
		public float m_Radius;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB492FC", Offset = "0xB492FC")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49314", Offset = "0xB49314")]
		public int m_Blur;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4932C", Offset = "0xB4932C")]
		public int m_Downsampling;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49344", Offset = "0xB49344")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49360", Offset = "0xB49360")]
		public float m_MinZ;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x1A60814", Offset = "0x1A60814", VA = "0x1A60814")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x1A608C4", Offset = "0x1A608C4", VA = "0x1A608C4")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x1A60960", Offset = "0x1A60960", VA = "0x1A60960")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x1A60968", Offset = "0x1A60968", VA = "0x1A60968")]
		private void Start()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x1A60AFC", Offset = "0x1A60AFC", VA = "0x1A60AFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x1A60A40", Offset = "0x1A60A40", VA = "0x1A60A40")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x1A60B70", Offset = "0x1A60B70", VA = "0x1A60B70")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x1A6122C", Offset = "0x1A6122C", VA = "0x1A6122C")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB431E0", Offset = "0xB431E0")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x1A61260", Offset = "0x1A61260", VA = "0x1A61260")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x1A612F0", Offset = "0x1A612F0", VA = "0x1A612F0")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4322C", Offset = "0xB4322C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4322C", Offset = "0xB4322C")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x200052F")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4001CF4")]
			Low,
			[Token(Token = "0x4001CF5")]
			Normal,
			[Token(Token = "0x4001CF6")]
			High
		}

		[Token(Token = "0x2000530")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4001CF8")]
			Screen,
			[Token(Token = "0x4001CF9")]
			Add
		}

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform sunTransform;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int radialBlurIterations;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color sunColor;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color sunThreshold;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float sunShaftIntensity;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxRadius;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDepthTexture;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader sunShaftsShader;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleClearShader;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x1A612F8", Offset = "0x1A612F8", VA = "0x1A612F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x1A61360", Offset = "0x1A61360", VA = "0x1A61360")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x1A61B4C", Offset = "0x1A61B4C", VA = "0x1A61B4C")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB432C4", Offset = "0xB432C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB432C4", Offset = "0xB432C4")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x2000531")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4001CFB")]
			TiltShiftMode,
			[Token(Token = "0x4001CFC")]
			IrisMode
		}

		[Token(Token = "0x2000532")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4001CFE")]
			Preview,
			[Token(Token = "0x4001CFF")]
			Low,
			[Token(Token = "0x4001D00")]
			Normal,
			[Token(Token = "0x4001D01")]
			High
		}

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TiltShiftMode mode;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TiltShiftQuality quality;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4937C", Offset = "0xB4937C")]
		public float blurArea;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49394", Offset = "0xB49394")]
		public float maxBlurSize;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB493AC", Offset = "0xB493AC")]
		public int downsample;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader tiltShiftShader;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x1A61BE0", Offset = "0x1A61BE0", VA = "0x1A61BE0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x1A61C38", Offset = "0x1A61C38", VA = "0x1A61C38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x1A61EC8", Offset = "0x1A61EC8", VA = "0x1A61EC8")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4334C", Offset = "0xB4334C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4334C", Offset = "0xB4334C")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x2000533")]
		public enum TonemapperType
		{
			[Token(Token = "0x4001D03")]
			SimpleReinhard,
			[Token(Token = "0x4001D04")]
			UserCurve,
			[Token(Token = "0x4001D05")]
			Hable,
			[Token(Token = "0x4001D06")]
			Photographic,
			[Token(Token = "0x4001D07")]
			OptimizedHejiDawson,
			[Token(Token = "0x4001D08")]
			AdaptiveReinhard,
			[Token(Token = "0x4001D09")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x2000534")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4001D0B")]
			Square16 = 0x10,
			[Token(Token = "0x4001D0C")]
			Square32 = 0x20,
			[Token(Token = "0x4001D0D")]
			Square64 = 0x40,
			[Token(Token = "0x4001D0E")]
			Square128 = 0x80,
			[Token(Token = "0x4001D0F")]
			Square256 = 0x100,
			[Token(Token = "0x4001D10")]
			Square512 = 0x200,
			[Token(Token = "0x4001D11")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TonemapperType type;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture2D curveTex;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float exposureAdjustment;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float middleGrey;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float white;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float adaptionSpeed;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader tonemapper;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material tonemapMaterial;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture rt;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x1A61EE0", Offset = "0x1A61EE0", VA = "0x1A61EE0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x1A6201C", Offset = "0x1A6201C", VA = "0x1A6201C")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x1A622E0", Offset = "0x1A622E0", VA = "0x1A622E0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x1A62438", Offset = "0x1A62438", VA = "0x1A62438")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x1A62528", Offset = "0x1A62528", VA = "0x1A62528")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0x1A62D4C", Offset = "0x1A62D4C", VA = "0x1A62D4C")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x2000072")]
	internal class Triangles
	{
		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x1A62D78", Offset = "0x1A62D78", VA = "0x1A62D78")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x1A62EB4", Offset = "0x1A62EB4", VA = "0x1A62EB4")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x1A63084", Offset = "0x1A63084", VA = "0x1A63084")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x1A63344", Offset = "0x1A63344", VA = "0x1A63344")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x1A63774", Offset = "0x1A63774", VA = "0x1A63774")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x2000073")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB433E4", Offset = "0xB433E4")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB493C4", Offset = "0xB493C4")]
		public float angle;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x1A63780", Offset = "0x1A63780", VA = "0x1A63780")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x1A637C4", Offset = "0x1A637C4", VA = "0x1A637C4")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB43430", Offset = "0xB43430")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB43430", Offset = "0xB43430")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x2000535")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001D13")]
			Simple,
			[Token(Token = "0x4001D14")]
			Advanced
		}

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AberrationMode mode;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chromaticAberration;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float axialAberration;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blur;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blurSpread;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminanceDependency;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blurDistance;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader vignetteShader;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x1A63840", Offset = "0x1A63840", VA = "0x1A63840", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x1A638C4", Offset = "0x1A638C4", VA = "0x1A638C4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x1A63EF0", Offset = "0x1A63EF0", VA = "0x1A63EF0")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x2000075")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB434C8", Offset = "0xB434C8")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x1A63F1C", Offset = "0x1A63F1C", VA = "0x1A63F1C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1A63F60", Offset = "0x1A63F60", VA = "0x1A63F60")]
		public Vortex()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000076")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x17B4EFC", Offset = "0x17B4EFC", VA = "0x17B4EFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x17B518C", Offset = "0x17B518C", VA = "0x17B518C")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x17B530C", Offset = "0x17B530C", VA = "0x17B530C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x17B538C", Offset = "0x17B538C", VA = "0x17B538C", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x17B5474", Offset = "0x17B5474", VA = "0x17B5474", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x17B551C", Offset = "0x17B551C", VA = "0x17B551C")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x17B5588", Offset = "0x17B5588", VA = "0x17B5588")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x17B558C", Offset = "0x17B558C", VA = "0x17B558C")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x17B5674", Offset = "0x17B5674", VA = "0x17B5674")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x17B575C", Offset = "0x17B575C", VA = "0x17B575C")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x17B5844", Offset = "0x17B5844", VA = "0x17B5844")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x17B592C", Offset = "0x17B592C", VA = "0x17B592C")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x17B5A14", Offset = "0x17B5A14", VA = "0x17B5A14")]
		public void Update()
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x17B5A18", Offset = "0x17B5A18", VA = "0x17B5A18")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000078")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x2000536")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x4001D16")]
			Hardware,
			[Token(Token = "0x4001D17")]
			Touch
		}

		[Token(Token = "0x2000537")]
		public class VirtualAxis
		{
			[Token(Token = "0x4001D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56AB8", Offset = "0xB56AB8")]
			private string <name>k__BackingField;

			[Token(Token = "0x4001D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x4001D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56AC8", Offset = "0xB56AC8")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x170003B2")]
			public string name
			{
				[Token(Token = "0x6002549")]
				[Address(RVA = "0x17B6968", Offset = "0x17B6968", VA = "0x17B6968")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61CF8", Offset = "0xB61CF8")]
				get
				{
					return null;
				}
				[Token(Token = "0x600254A")]
				[Address(RVA = "0x17B6970", Offset = "0x17B6970", VA = "0x17B6970")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D08", Offset = "0xB61D08")]
				private set
				{
				}
			}

			[Token(Token = "0x170003B3")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600254B")]
				[Address(RVA = "0x17B6978", Offset = "0x17B6978", VA = "0x17B6978")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D18", Offset = "0xB61D18")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600254C")]
				[Address(RVA = "0x17B6980", Offset = "0x17B6980", VA = "0x17B6980")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D28", Offset = "0xB61D28")]
				private set
				{
				}
			}

			[Token(Token = "0x170003B4")]
			public float GetValue
			{
				[Token(Token = "0x6002551")]
				[Address(RVA = "0x17B69D4", Offset = "0x17B69D4", VA = "0x17B69D4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003B5")]
			public float GetValueRaw
			{
				[Token(Token = "0x6002552")]
				[Address(RVA = "0x17B69DC", Offset = "0x17B69DC", VA = "0x17B69DC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600254D")]
			[Address(RVA = "0x17B5068", Offset = "0x17B5068", VA = "0x17B5068")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x600254E")]
			[Address(RVA = "0x17B698C", Offset = "0x17B698C", VA = "0x17B698C")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x600254F")]
			[Address(RVA = "0x17B5324", Offset = "0x17B5324", VA = "0x17B5324")]
			public void Remove()
			{
			}

			[Token(Token = "0x6002550")]
			[Address(RVA = "0x17B69CC", Offset = "0x17B69CC", VA = "0x17B69CC")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x2000538")]
		public class VirtualButton
		{
			[Token(Token = "0x4001D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56AD8", Offset = "0xB56AD8")]
			private string <name>k__BackingField;

			[Token(Token = "0x4001D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56AE8", Offset = "0xB56AE8")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x4001D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4001D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4001D1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x170003B6")]
			public string name
			{
				[Token(Token = "0x6002553")]
				[Address(RVA = "0x17B69E4", Offset = "0x17B69E4", VA = "0x17B69E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D38", Offset = "0xB61D38")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002554")]
				[Address(RVA = "0x17B69EC", Offset = "0x17B69EC", VA = "0x17B69EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D48", Offset = "0xB61D48")]
				private set
				{
				}
			}

			[Token(Token = "0x170003B7")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6002555")]
				[Address(RVA = "0x17B69F4", Offset = "0x17B69F4", VA = "0x17B69F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D58", Offset = "0xB61D58")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6002556")]
				[Address(RVA = "0x17B69FC", Offset = "0x17B69FC", VA = "0x17B69FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61D68", Offset = "0xB61D68")]
				private set
				{
				}
			}

			[Token(Token = "0x170003B8")]
			public bool GetButton
			{
				[Token(Token = "0x600255C")]
				[Address(RVA = "0x17B6B5C", Offset = "0x17B6B5C", VA = "0x17B6B5C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003B9")]
			public bool GetButtonDown
			{
				[Token(Token = "0x600255D")]
				[Address(RVA = "0x17B6B64", Offset = "0x17B6B64", VA = "0x17B6B64")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003BA")]
			public bool GetButtonUp
			{
				[Token(Token = "0x600255E")]
				[Address(RVA = "0x17B6B94", Offset = "0x17B6B94", VA = "0x17B6B94")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002557")]
			[Address(RVA = "0x17B6A08", Offset = "0x17B6A08", VA = "0x17B6A08")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x6002558")]
			[Address(RVA = "0x17B6A44", Offset = "0x17B6A44", VA = "0x17B6A44")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6002559")]
			[Address(RVA = "0x17B6A8C", Offset = "0x17B6A8C", VA = "0x17B6A8C")]
			public void Pressed()
			{
			}

			[Token(Token = "0x600255A")]
			[Address(RVA = "0x17B6AC8", Offset = "0x17B6AC8", VA = "0x17B6AC8")]
			public void Released()
			{
			}

			[Token(Token = "0x600255B")]
			[Address(RVA = "0x17B6AF4", Offset = "0x17B6AF4", VA = "0x17B6AF4")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000018")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x60002BF")]
			[Address(RVA = "0x17B65E8", Offset = "0x17B65E8", VA = "0x17B65E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x17B5A20", Offset = "0x17B5A20", VA = "0x17B5A20")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x17B5AC0", Offset = "0x17B5AC0", VA = "0x17B5AC0")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x17B4FF0", Offset = "0x17B4FF0", VA = "0x17B4FF0")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x17B5BD8", Offset = "0x17B5BD8", VA = "0x17B5BD8")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x17B509C", Offset = "0x17B509C", VA = "0x17B509C")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x17B5DE0", Offset = "0x17B5DE0", VA = "0x17B5DE0")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x17B5F80", Offset = "0x17B5F80", VA = "0x17B5F80")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x17B60D0", Offset = "0x17B60D0", VA = "0x17B60D0")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x17B5114", Offset = "0x17B5114", VA = "0x17B5114")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x17B6274", Offset = "0x17B6274", VA = "0x17B6274")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x17B636C", Offset = "0x17B636C", VA = "0x17B636C")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x17B62DC", Offset = "0x17B62DC", VA = "0x17B62DC")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x17B63D4", Offset = "0x17B63D4", VA = "0x17B63D4")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x17B6454", Offset = "0x17B6454", VA = "0x17B6454")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x17B64D4", Offset = "0x17B64D4", VA = "0x17B64D4")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x17B55F4", Offset = "0x17B55F4", VA = "0x17B55F4")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x17B56DC", Offset = "0x17B56DC", VA = "0x17B56DC")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x17B57C4", Offset = "0x17B57C4", VA = "0x17B57C4")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x17B5994", Offset = "0x17B5994", VA = "0x17B5994")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x17B58AC", Offset = "0x17B58AC", VA = "0x17B58AC")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x17B6554", Offset = "0x17B6554", VA = "0x17B6554")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x17B6664", Offset = "0x17B6664", VA = "0x17B6664")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x17B6760", Offset = "0x17B6760", VA = "0x17B6760")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x17B6868", Offset = "0x17B6868", VA = "0x17B6868")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000079")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x17B6BC4", Offset = "0x17B6BC4", VA = "0x17B6BC4")]
		private void Update()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x17B6BC8", Offset = "0x17B6BC8", VA = "0x17B6BC8")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x17B6C48", Offset = "0x17B6C48", VA = "0x17B6C48")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x200007A")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000539")]
		public enum AxisOption
		{
			[Token(Token = "0x4001D21")]
			Both,
			[Token(Token = "0x4001D22")]
			OnlyHorizontal,
			[Token(Token = "0x4001D23")]
			OnlyVertical
		}

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x17B6C50", Offset = "0x17B6C50", VA = "0x17B6C50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x17B6D90", Offset = "0x17B6D90", VA = "0x17B6D90")]
		private void Start()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x17B6DCC", Offset = "0x17B6DCC", VA = "0x17B6DCC")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x17B6C54", Offset = "0x17B6C54", VA = "0x17B6C54")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x17B6EBC", Offset = "0x17B6EBC", VA = "0x17B6EBC", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x17B70AC", Offset = "0x17B70AC", VA = "0x17B70AC", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x17B70F4", Offset = "0x17B70F4", VA = "0x17B70F4", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x17B70F8", Offset = "0x17B70F8", VA = "0x17B70F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x17B7148", Offset = "0x17B7148", VA = "0x17B7148")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x200007B")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x17B71B8", Offset = "0x17B71B8", VA = "0x17B71B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x17B71C8", Offset = "0x17B71C8", VA = "0x17B71C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x17B71C0", Offset = "0x17B71C0", VA = "0x17B71C0")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x17B72A4", Offset = "0x17B72A4", VA = "0x17B72A4")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x17B7510", Offset = "0x17B7510", VA = "0x17B7510")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x200007C")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x200053A")]
		public enum AxisOptions
		{
			[Token(Token = "0x4001D25")]
			ForwardAxis,
			[Token(Token = "0x4001D26")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x200053B")]
		public class AxisMapping
		{
			[Token(Token = "0x20006D9")]
			public enum MappingType
			{
				[Token(Token = "0x400231E")]
				NamedAxis,
				[Token(Token = "0x400231F")]
				MousePositionX,
				[Token(Token = "0x4002320")]
				MousePositionY,
				[Token(Token = "0x4002321")]
				MousePositionZ
			}

			[Token(Token = "0x4001D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x4001D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x600255F")]
			[Address(RVA = "0x17B83C0", Offset = "0x17B83C0", VA = "0x17B83C0")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x17B804C", Offset = "0x17B804C", VA = "0x17B804C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x17B810C", Offset = "0x17B810C", VA = "0x17B810C")]
		private void Update()
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x17B8398", Offset = "0x17B8398", VA = "0x17B8398")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x17B83B0", Offset = "0x17B83B0", VA = "0x17B83B0")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x200007D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB43524", Offset = "0xB43524")]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x200053C")]
		public enum AxisOption
		{
			[Token(Token = "0x4001D2A")]
			Both,
			[Token(Token = "0x4001D2B")]
			OnlyHorizontal,
			[Token(Token = "0x4001D2C")]
			OnlyVertical
		}

		[Token(Token = "0x200053D")]
		public enum ControlStyle
		{
			[Token(Token = "0x4001D2E")]
			Absolute,
			[Token(Token = "0x4001D2F")]
			Relative,
			[Token(Token = "0x4001D30")]
			Swipe
		}

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.UI.Image m_Image;

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x17B83C8", Offset = "0x17B83C8", VA = "0x17B83C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x17B8508", Offset = "0x17B8508", VA = "0x17B8508")]
		private void Start()
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x17B83CC", Offset = "0x17B83CC", VA = "0x17B83CC")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x17B8584", Offset = "0x17B8584", VA = "0x17B8584")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x17B85F0", Offset = "0x17B85F0", VA = "0x17B85F0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x17B86A0", Offset = "0x17B86A0", VA = "0x17B86A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x17B8874", Offset = "0x17B8874", VA = "0x17B8874", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x17B88EC", Offset = "0x17B88EC", VA = "0x17B88EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x17B89E0", Offset = "0x17B89E0", VA = "0x17B89E0")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x200007E")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB493E0", Offset = "0xB493E0")]
		private Vector3 <virtualMousePosition>k__BackingField;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000019")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x60002E1")]
			[Address(RVA = "0x17B8A58", Offset = "0x17B8A58", VA = "0x17B8A58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A348", Offset = "0xB5A348")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60002E2")]
			[Address(RVA = "0x17B8A64", Offset = "0x17B8A64", VA = "0x17B8A64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A358", Offset = "0xB5A358")]
			private set
			{
			}
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x17B5B70", Offset = "0x17B5B70", VA = "0x17B5B70")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x17B5C50", Offset = "0x17B5C50", VA = "0x17B5C50")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x17B5CB8", Offset = "0x17B5CB8", VA = "0x17B5CB8")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x17B5E58", Offset = "0x17B5E58", VA = "0x17B5E58")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x17B6038", Offset = "0x17B6038", VA = "0x17B6038")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x17B6148", Offset = "0x17B6148", VA = "0x17B6148")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x17B61E0", Offset = "0x17B61E0", VA = "0x17B61E0")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x17B6714", Offset = "0x17B6714", VA = "0x17B6714")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x17B6814", Offset = "0x17B6814", VA = "0x17B6814")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x17B6918", Offset = "0x17B6918", VA = "0x17B6918")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60002ED")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60002EE")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60002EF")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60002F0")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60002F1")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60002F2")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60002F3")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60002F4")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60002F5")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60002F6")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60002F7")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x17B7CC4", Offset = "0x17B7CC4", VA = "0x17B7CC4")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x200007F")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x17B7518", Offset = "0x17B7518", VA = "0x17B7518")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x17B75AC", Offset = "0x17B75AC", VA = "0x17B75AC")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x17B7638", Offset = "0x17B7638", VA = "0x17B7638", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x17B76D4", Offset = "0x17B76D4", VA = "0x17B76D4", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x17B778C", Offset = "0x17B778C", VA = "0x17B778C", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x17B7838", Offset = "0x17B7838", VA = "0x17B7838", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x17B78D8", Offset = "0x17B78D8", VA = "0x17B78D8", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x17B7978", Offset = "0x17B7978", VA = "0x17B7978", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x17B7A14", Offset = "0x17B7A14", VA = "0x17B7A14", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x17B7ABC", Offset = "0x17B7ABC", VA = "0x17B7ABC", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x17B7B6C", Offset = "0x17B7B6C", VA = "0x17B7B6C", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x17B7C1C", Offset = "0x17B7C1C", VA = "0x17B7C1C", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x17B7CB8", Offset = "0x17B7CB8", VA = "0x17B7CB8", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x17B5AB8", Offset = "0x17B5AB8", VA = "0x17B5AB8")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x2000080")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x6000307")]
		[Address(RVA = "0x17B7D84", Offset = "0x17B7D84", VA = "0x17B7D84", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x17B7D98", Offset = "0x17B7D98", VA = "0x17B7D98", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x17B7DA4", Offset = "0x17B7DA4", VA = "0x17B7DA4", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x17B7DB0", Offset = "0x17B7DB0", VA = "0x17B7DB0", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x17B7DBC", Offset = "0x17B7DBC", VA = "0x17B7DBC", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x17B7E28", Offset = "0x17B7E28", VA = "0x17B7E28", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x17B7E94", Offset = "0x17B7E94", VA = "0x17B7E94", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x17B7F00", Offset = "0x17B7F00", VA = "0x17B7F00", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x17B7F6C", Offset = "0x17B7F6C", VA = "0x17B7F6C", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x17B7FD8", Offset = "0x17B7FD8", VA = "0x17B7FD8", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x17B8044", Offset = "0x17B8044", VA = "0x17B8044", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x17B5ABC", Offset = "0x17B5ABC", VA = "0x17B5ABC")]
		public StandaloneInput()
		{
		}
	}
}
namespace Helper
{
	[Token(Token = "0x2000081")]
	internal class CollectionMap<TKey, TValue> : ThreadSafeDictionary<TKey, TValue> where TValue : new()
	{
		[Token(Token = "0x6000313")]
		public bool TryAddDefault(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000314")]
		public CollectionMap()
		{
		}
	}
	[Token(Token = "0x2000082")]
	public static class ExceptionHelper
	{
		[Token(Token = "0x4000496")]
		private const int E_NOTIMPL = -2147467263;

		[Token(Token = "0x4000497")]
		private const int E_OUTOFMEMORY = -2147024882;

		[Token(Token = "0x4000498")]
		private const int E_INVALIDARG = -2147024809;

		[Token(Token = "0x4000499")]
		private const int E_POINTER = -2147467261;

		[Token(Token = "0x400049A")]
		private const int E_PENDING = -2147483638;

		[Token(Token = "0x400049B")]
		private const int E_FAIL = -2147467259;

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x141755C", Offset = "0x141755C", VA = "0x141755C")]
		public static void CheckLastError()
		{
		}
	}
	[Token(Token = "0x2000083")]
	internal interface INativeWrapper
	{
		[Token(Token = "0x1700001A")]
		IntPtr nativePtr
		{
			[Token(Token = "0x6000316")]
			get;
		}
	}
	[Token(Token = "0x2000084")]
	public static class NativeObjectCache
	{
		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, Dictionary<IntPtr, WeakReference>> _objectCache;

		[Token(Token = "0x6000317")]
		public static void AddObject<T>(IntPtr nativePtr, T obj) where T : class
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x141777C", Offset = "0x141777C", VA = "0x141777C")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6000319")]
		public static void RemoveObject<T>(IntPtr nativePtr)
		{
		}

		[Token(Token = "0x600031A")]
		public static T GetObject<T>(IntPtr nativePtr) where T : class
		{
			return null;
		}

		[Token(Token = "0x600031B")]
		public static T CreateOrGetObject<T>(IntPtr nativePtr, Func<IntPtr, T> create) where T : class
		{
			return null;
		}
	}
	[Token(Token = "0x2000085")]
	public static class NativeWrapper
	{
		[Token(Token = "0x600031D")]
		[Address(RVA = "0x1417A84", Offset = "0x1417A84", VA = "0x1417A84")]
		public static IntPtr GetNativePtr(object obj)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000086")]
	public class SmartGCHandle : IDisposable
	{
		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle handle;

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x1417B8C", Offset = "0x1417B8C", VA = "0x1417B8C")]
		public SmartGCHandle(GCHandle handle)
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x1417BB8", Offset = "0x1417BB8", VA = "0x1417BB8", Slot = "1")]
		~SmartGCHandle()
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x1417C2C", Offset = "0x1417C2C", VA = "0x1417C2C")]
		public IntPtr AddrOfPinnedObject()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x1417C38", Offset = "0x1417C38", VA = "0x1417C38", Slot = "5")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x1417C48", Offset = "0x1417C48", VA = "0x1417C48", Slot = "6")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x1417C54", Offset = "0x1417C54", VA = "0x1417C54")]
		public static implicit operator GCHandle(SmartGCHandle other)
		{
			return default(GCHandle);
		}
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB43588", Offset = "0xB43588")]
	public class ThreadSafeDictionary<TKey, TValue>
	{
		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Dictionary<TKey, TValue> _impl;

		[Token(Token = "0x1700001B")]
		public TValue Item
		{
			[Token(Token = "0x6000324")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000325")]
			set
			{
			}
		}

		[Token(Token = "0x6000326")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000327")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000328")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000329")]
		public void Clear()
		{
		}

		[Token(Token = "0x600032A")]
		public ThreadSafeDictionary()
		{
		}
	}
}
namespace Windows.Kinect
{
	[Token(Token = "0x2000088")]
	public struct CameraIntrinsics
	{
		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB493F0", Offset = "0xB493F0")]
		private float <FocalLengthX>k__BackingField;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49400", Offset = "0xB49400")]
		private float <FocalLengthY>k__BackingField;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49410", Offset = "0xB49410")]
		private float <PrincipalPointX>k__BackingField;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49420", Offset = "0xB49420")]
		private float <PrincipalPointY>k__BackingField;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49430", Offset = "0xB49430")]
		private float <RadialDistortionSecondOrder>k__BackingField;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49440", Offset = "0xB49440")]
		private float <RadialDistortionFourthOrder>k__BackingField;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49450", Offset = "0xB49450")]
		private float <RadialDistortionSixthOrder>k__BackingField;

		[Token(Token = "0x1700001C")]
		public float FocalLengthX
		{
			[Token(Token = "0x600032B")]
			[Address(RVA = "0x20A5C74", Offset = "0x20A5C74", VA = "0x20A5C74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A368", Offset = "0xB5A368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600032C")]
			[Address(RVA = "0x20A5C7C", Offset = "0x20A5C7C", VA = "0x20A5C7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A378", Offset = "0xB5A378")]
			set
			{
			}
		}

		[Token(Token = "0x1700001D")]
		public float FocalLengthY
		{
			[Token(Token = "0x600032D")]
			[Address(RVA = "0x20A5C84", Offset = "0x20A5C84", VA = "0x20A5C84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A388", Offset = "0xB5A388")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600032E")]
			[Address(RVA = "0x20A5C8C", Offset = "0x20A5C8C", VA = "0x20A5C8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A398", Offset = "0xB5A398")]
			set
			{
			}
		}

		[Token(Token = "0x1700001E")]
		public float PrincipalPointX
		{
			[Token(Token = "0x600032F")]
			[Address(RVA = "0x20A5C94", Offset = "0x20A5C94", VA = "0x20A5C94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3A8", Offset = "0xB5A3A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000330")]
			[Address(RVA = "0x20A5C9C", Offset = "0x20A5C9C", VA = "0x20A5C9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3B8", Offset = "0xB5A3B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700001F")]
		public float PrincipalPointY
		{
			[Token(Token = "0x6000331")]
			[Address(RVA = "0x20A5CA4", Offset = "0x20A5CA4", VA = "0x20A5CA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3C8", Offset = "0xB5A3C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000332")]
			[Address(RVA = "0x20A5CAC", Offset = "0x20A5CAC", VA = "0x20A5CAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3D8", Offset = "0xB5A3D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public float RadialDistortionSecondOrder
		{
			[Token(Token = "0x6000333")]
			[Address(RVA = "0x20A5CB4", Offset = "0x20A5CB4", VA = "0x20A5CB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3E8", Offset = "0xB5A3E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000334")]
			[Address(RVA = "0x20A5CBC", Offset = "0x20A5CBC", VA = "0x20A5CBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A3F8", Offset = "0xB5A3F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public float RadialDistortionFourthOrder
		{
			[Token(Token = "0x6000335")]
			[Address(RVA = "0x20A5CC4", Offset = "0x20A5CC4", VA = "0x20A5CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A408", Offset = "0xB5A408")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000336")]
			[Address(RVA = "0x20A5CCC", Offset = "0x20A5CCC", VA = "0x20A5CCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A418", Offset = "0xB5A418")]
			set
			{
			}
		}

		[Token(Token = "0x17000022")]
		public float RadialDistortionSixthOrder
		{
			[Token(Token = "0x6000337")]
			[Address(RVA = "0x20A5CD4", Offset = "0x20A5CD4", VA = "0x20A5CD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A428", Offset = "0xB5A428")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000338")]
			[Address(RVA = "0x20A5CDC", Offset = "0x20A5CDC", VA = "0x20A5CDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A438", Offset = "0xB5A438")]
			set
			{
			}
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x20A5CE4", Offset = "0x20A5CE4", VA = "0x20A5CE4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x20A5DD4", Offset = "0x20A5DD4", VA = "0x20A5DD4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x20A5E74", Offset = "0x20A5E74", VA = "0x20A5E74")]
		public bool Equals(CameraIntrinsics obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x20A5F68", Offset = "0x20A5F68", VA = "0x20A5F68")]
		public static bool operator ==(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x20A5F9C", Offset = "0x20A5F9C", VA = "0x20A5F9C")]
		public static bool operator !=(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}
	}
}
namespace uAudio
{
	[Token(Token = "0x2000089")]
	public class dirLoop_UI : MonoBehaviour
	{
		[Token(Token = "0x200053E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47244", Offset = "0xB47244")]
		private sealed class <runNextSong>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x170003BB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002563")]
				[Address(RVA = "0x20A71C8", Offset = "0x20A71C8", VA = "0x20A71C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002565")]
				[Address(RVA = "0x20A7230", Offset = "0x20A7230", VA = "0x20A7230", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002560")]
			[Address(RVA = "0x20A69A0", Offset = "0x20A69A0", VA = "0x20A69A0")]
			[DebuggerHidden]
			public <runNextSong>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002561")]
			[Address(RVA = "0x20A7068", Offset = "0x20A7068", VA = "0x20A7068", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002562")]
			[Address(RVA = "0x20A706C", Offset = "0x20A706C", VA = "0x20A706C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002564")]
			[Address(RVA = "0x20A71D0", Offset = "0x20A71D0", VA = "0x20A71D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200053F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47254", Offset = "0xB47254")]
		private sealed class <spinPlay>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public dirLoop_UI <>4__this;

			[Token(Token = "0x170003BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002569")]
				[Address(RVA = "0x20A7634", Offset = "0x20A7634", VA = "0x20A7634", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600256B")]
				[Address(RVA = "0x20A769C", Offset = "0x20A769C", VA = "0x20A769C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002566")]
			[Address(RVA = "0x20A6F30", Offset = "0x20A6F30", VA = "0x20A6F30")]
			[DebuggerHidden]
			public <spinPlay>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002567")]
			[Address(RVA = "0x20A7238", Offset = "0x20A7238", VA = "0x20A7238", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002568")]
			[Address(RVA = "0x20A723C", Offset = "0x20A723C", VA = "0x20A723C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600256A")]
			[Address(RVA = "0x20A763C", Offset = "0x20A763C", VA = "0x20A763C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer_UI my_uAudioPlayer_UI;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField song_dirFilePath;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_song_pre;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_song_next;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_dir_update;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<FileInfo> songs;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool readyNextSong;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int currentSong_index;

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x20A63AC", Offset = "0x20A63AC", VA = "0x20A63AC")]
		private void Start()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x20A6838", Offset = "0x20A6838", VA = "0x20A6838")]
		private void OnPlayBackState(PlayBackState valIN)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x20A6930", Offset = "0x20A6930", VA = "0x20A6930")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A448", Offset = "0xB5A448")]
		private IEnumerator runNextSong()
		{
			return null;
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x20A69CC", Offset = "0x20A69CC", VA = "0x20A69CC")]
		private void LoadSongList(DirectoryInfo dirIN)
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x20A6C14", Offset = "0x20A6C14", VA = "0x20A6C14")]
		private DirectoryInfo getTargetDir()
		{
			return null;
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x20A6660", Offset = "0x20A6660", VA = "0x20A6660")]
		private void LoadSongs()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x20A6D18", Offset = "0x20A6D18", VA = "0x20A6D18")]
		private FileInfo getNextSong()
		{
			return null;
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x20A6DD0", Offset = "0x20A6DD0", VA = "0x20A6DD0")]
		private FileInfo getPreSong()
		{
			return null;
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x20A67AC", Offset = "0x20A67AC", VA = "0x20A67AC")]
		private FileInfo getCurrentSong()
		{
			return null;
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x20A62D8", Offset = "0x20A62D8", VA = "0x20A62D8")]
		public void MoveNextSong()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x20A6EC0", Offset = "0x20A6EC0", VA = "0x20A6EC0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A4AC", Offset = "0xB5A4AC")]
		private IEnumerator spinPlay()
		{
			return null;
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x20A6F5C", Offset = "0x20A6F5C", VA = "0x20A6F5C")]
		private void MovePreSong()
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x20A6FF4", Offset = "0x20A6FF4", VA = "0x20A6FF4")]
		private void Update_dir()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x20A6FF8", Offset = "0x20A6FF8", VA = "0x20A6FF8")]
		public dirLoop_UI()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public class uAudioPlayer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uAudio.uAudio_backend.uAudio _uAudio;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource myAudioSource;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<float> Update_UI_songTime;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string targetFile;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool updateTime;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private PlayBackState State;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool SongDone;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool flare_SongEnd;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] _getAudioData_sampler;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MpegFile playbackDevice;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ReadFullyStream readFullyStream;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float start_volume_Offset;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _loadedTarget;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TimeSpan endSongTime;

		[Token(Token = "0x17000023")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x20A76A4", Offset = "0x20A76A4", VA = "0x20A76A4", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x600034D")]
			[Address(RVA = "0x20A76AC", Offset = "0x20A76AC", VA = "0x20A76AC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000024")]
		public int SongLength
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0x20A76B4", Offset = "0x20A76B4", VA = "0x20A76B4", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000025")]
		public float Volume_Offset
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0x20A76D0", Offset = "0x20A76D0", VA = "0x20A76D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000350")]
			[Address(RVA = "0x20A76D8", Offset = "0x20A76D8", VA = "0x20A76D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public uAudio.uAudio_backend.uAudio UAudio
		{
			[Token(Token = "0x6000351")]
			[Address(RVA = "0x20A7718", Offset = "0x20A7718", VA = "0x20A7718")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000352")]
			[Address(RVA = "0x20A6E8C", Offset = "0x20A6E8C", VA = "0x20A6E8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000028")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x6000353")]
			[Address(RVA = "0x20A77F0", Offset = "0x20A77F0", VA = "0x20A77F0", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000354")]
			[Address(RVA = "0x20A7884", Offset = "0x20A7884", VA = "0x20A7884", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000029")]
		public string AudioTitle
		{
			[Token(Token = "0x6000356")]
			[Address(RVA = "0x20A7920", Offset = "0x20A7920", VA = "0x20A7920", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x6000357")]
			[Address(RVA = "0x20A6230", Offset = "0x20A6230", VA = "0x20A6230", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6000358")]
			[Address(RVA = "0x20A798C", Offset = "0x20A798C", VA = "0x20A798C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public float Pan
		{
			[Token(Token = "0x6000359")]
			[Address(RVA = "0x20A79A0", Offset = "0x20A79A0", VA = "0x20A79A0", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600035A")]
			[Address(RVA = "0x20A7A38", Offset = "0x20A7A38", VA = "0x20A7A38", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x1700002C")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x600035B")]
			[Address(RVA = "0x20A6254", Offset = "0x20A6254", VA = "0x20A6254", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x1700002D")]
		public float Volume
		{
			[Token(Token = "0x600035C")]
			[Address(RVA = "0x20A7AE0", Offset = "0x20A7AE0", VA = "0x20A7AE0", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600035D")]
			[Address(RVA = "0x20A7AFC", Offset = "0x20A7AFC", VA = "0x20A7AFC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public float Volume_BackEnd
		{
			[Token(Token = "0x600035E")]
			[Address(RVA = "0x20A7B18", Offset = "0x20A7B18", VA = "0x20A7B18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600035F")]
			[Address(RVA = "0x20A7B34", Offset = "0x20A7B34", VA = "0x20A7B34")]
			set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x6000360")]
			[Address(RVA = "0x20A7B88", Offset = "0x20A7B88", VA = "0x20A7B88", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000030")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0x20A7BAC", Offset = "0x20A7BAC", VA = "0x20A7BAC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x20A7918", Offset = "0x20A7918", VA = "0x20A7918")]
		private void uAudio_stopped()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x20A7B90", Offset = "0x20A7B90", VA = "0x20A7B90")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x20A7BB4", Offset = "0x20A7BB4", VA = "0x20A7BB4", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x20A7BC8", Offset = "0x20A7BC8", VA = "0x20A7BC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x20A7ED8", Offset = "0x20A7ED8", VA = "0x20A7ED8", Slot = "16")]
		public void LoadFile(string targetFileIN)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x20A7F40", Offset = "0x20A7F40", VA = "0x20A7F40", Slot = "17")]
		public void SetFile(string targetFileIN)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x20A7C84", Offset = "0x20A7C84", VA = "0x20A7C84")]
		private void SongEnd()
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x20A7F48", Offset = "0x20A7F48", VA = "0x20A7F48", Slot = "14")]
		public void Play([Optional] TimeSpan? startOff)
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x20A8798", Offset = "0x20A8798", VA = "0x20A8798")]
		private void Song_Stream_Loop(float[] data)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x20A8598", Offset = "0x20A8598", VA = "0x20A8598", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x20A895C", Offset = "0x20A895C", VA = "0x20A895C", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x20A896C", Offset = "0x20A896C", VA = "0x20A896C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x20A8970", Offset = "0x20A8970", VA = "0x20A8970", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x20A89BC", Offset = "0x20A89BC", VA = "0x20A89BC")]
		public void Resume()
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x20A8A1C", Offset = "0x20A8A1C", VA = "0x20A8A1C")]
		public uAudioPlayer()
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x20A8A9C", Offset = "0x20A8A9C", VA = "0x20A8A9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A510", Offset = "0xB5A510")]
		private void <get_UAudio>b__22_0(PlayBackState c)
		{
		}
	}
	[Token(Token = "0x200008B")]
	public class uAudioPlayer_UI : MonoBehaviour
	{
		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField songFilePath;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider songTime;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text songCurrentTime;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text songMaxTime;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button bn_play;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button bn_pause;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button bn_stop;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Slider songVolume;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Toggle DontResetTime;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string targetFile;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float myLastSetTime;

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x20A8B04", Offset = "0x20A8B04", VA = "0x20A8B04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x20A9138", Offset = "0x20A9138", VA = "0x20A9138")]
		public void send_data(PlayBackState songState)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x20A7364", Offset = "0x20A7364", VA = "0x20A7364")]
		public void Play()
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x20A6E9C", Offset = "0x20A6E9C", VA = "0x20A6E9C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x20A913C", Offset = "0x20A913C", VA = "0x20A913C")]
		public void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x20A9164", Offset = "0x20A9164", VA = "0x20A9164")]
		public void onSongTime_Change(float timeIN)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x20A911C", Offset = "0x20A911C", VA = "0x20A911C")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x20A681C", Offset = "0x20A681C", VA = "0x20A681C")]
		public void setSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x20A9214", Offset = "0x20A9214", VA = "0x20A9214")]
		public void Update_UI_songTime(float newTimeIN)
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x20A9420", Offset = "0x20A9420", VA = "0x20A9420")]
		public uAudioPlayer_UI()
		{
		}
	}
	[Token(Token = "0x200008C")]
	public class uAudioStreamer : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x2000540")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47264", Offset = "0xB47264")]
		private sealed class <LoopRead>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x170003BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600256F")]
				[Address(RVA = "0x20AA778", Offset = "0x20AA778", VA = "0x20AA778", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002571")]
				[Address(RVA = "0x20AA7E0", Offset = "0x20AA7E0", VA = "0x20AA7E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600256C")]
			[Address(RVA = "0x20A9C8C", Offset = "0x20A9C8C", VA = "0x20A9C8C")]
			[DebuggerHidden]
			public <LoopRead>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x600256D")]
			[Address(RVA = "0x20AA580", Offset = "0x20AA580", VA = "0x20AA580", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600256E")]
			[Address(RVA = "0x20AA584", Offset = "0x20AA584", VA = "0x20AA584", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002570")]
			[Address(RVA = "0x20AA780", Offset = "0x20AA780", VA = "0x20AA780", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000541")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47274", Offset = "0xB47274")]
		private sealed class <firePlay>d__56 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer <>4__this;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TimeSpan? OffsetStart;

			[Token(Token = "0x170003C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002575")]
				[Address(RVA = "0x20AAAB0", Offset = "0x20AAAB0", VA = "0x20AAAB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002577")]
				[Address(RVA = "0x20AAB18", Offset = "0x20AAB18", VA = "0x20AAB18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002572")]
			[Address(RVA = "0x20A9E2C", Offset = "0x20A9E2C", VA = "0x20A9E2C")]
			[DebuggerHidden]
			public <firePlay>d__56(int <>1__state)
			{
			}

			[Token(Token = "0x6002573")]
			[Address(RVA = "0x20AA7E8", Offset = "0x20AA7E8", VA = "0x20AA7E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002574")]
			[Address(RVA = "0x20AA7EC", Offset = "0x20AA7EC", VA = "0x20AA7EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002576")]
			[Address(RVA = "0x20AAAB8", Offset = "0x20AAAB8", VA = "0x20AAAB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action<PlayBackState> _sendPlaybackState;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool betaNativeThreadBuffering;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string targetFilePath;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string theUrl;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Thread myThreadPump;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Thread myThreadPump2;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool callUpdateNeeded;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioPlayer my_uAudioPlayer;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minBufferTime;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxBufferTime;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private uAudio_Streaming _theAudioStream;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IEnumerator myLoopRead;

		[Token(Token = "0x17000031")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x600037B")]
			[Address(RVA = "0x20A9428", Offset = "0x20A9428", VA = "0x20A9428", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x600037C")]
			[Address(RVA = "0x20A9430", Offset = "0x20A9430", VA = "0x20A9430", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		private uAudio_Streaming TheAudioStream
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x20A9440", Offset = "0x20A9440", VA = "0x20A9440")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x6000380")]
			[Address(RVA = "0x20A9748", Offset = "0x20A9748", VA = "0x20A9748", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000381")]
			[Address(RVA = "0x20A97DC", Offset = "0x20A97DC", VA = "0x20A97DC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000034")]
		public string AudioTitle
		{
			[Token(Token = "0x6000382")]
			[Address(RVA = "0x20A9870", Offset = "0x20A9870", VA = "0x20A9870", Slot = "23")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0x20A9878", Offset = "0x20A9878", VA = "0x20A9878", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x6000384")]
			[Address(RVA = "0x20A9880", Offset = "0x20A9880", VA = "0x20A9880", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000037")]
		public float Volume
		{
			[Token(Token = "0x6000385")]
			[Address(RVA = "0x20A98F4", Offset = "0x20A98F4", VA = "0x20A98F4", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000386")]
			[Address(RVA = "0x20A991C", Offset = "0x20A991C", VA = "0x20A991C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x6000387")]
			[Address(RVA = "0x20A9944", Offset = "0x20A9944", VA = "0x20A9944", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000039")]
		public int SongLength
		{
			[Token(Token = "0x6000388")]
			[Address(RVA = "0x20A99AC", Offset = "0x20A99AC", VA = "0x20A99AC", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003A")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x6000389")]
			[Address(RVA = "0x20A99B4", Offset = "0x20A99B4", VA = "0x20A99B4", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600038A")]
			[Address(RVA = "0x20A9A1C", Offset = "0x20A9A1C", VA = "0x20A9A1C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public float Pan
		{
			[Token(Token = "0x600038B")]
			[Address(RVA = "0x20A9A20", Offset = "0x20A9A20", VA = "0x20A9A20", Slot = "24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600038C")]
			[Address(RVA = "0x20A9A38", Offset = "0x20A9A38", VA = "0x20A9A38", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public bool ForceBuffering
		{
			[Token(Token = "0x600038D")]
			[Address(RVA = "0x20A9A50", Offset = "0x20A9A50", VA = "0x20A9A50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600038E")]
			[Address(RVA = "0x20A9A88", Offset = "0x20A9A88", VA = "0x20A9A88")]
			set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public bool BetaNativeThreadBuffering
		{
			[Token(Token = "0x600038F")]
			[Address(RVA = "0x20A9AC8", Offset = "0x20A9AC8", VA = "0x20A9AC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000390")]
			[Address(RVA = "0x20A9B10", Offset = "0x20A9B10", VA = "0x20A9B10")]
			set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public double BufferedTime
		{
			[Token(Token = "0x6000393")]
			[Address(RVA = "0x20A9B90", Offset = "0x20A9B90", VA = "0x20A9B90")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x20A9438", Offset = "0x20A9438", VA = "0x20A9438")]
		private void theAudioStream_sendPlaying()
		{
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0x20A943C", Offset = "0x20A943C", VA = "0x20A943C", Slot = "22")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x20A9B1C", Offset = "0x20A9B1C", VA = "0x20A9B1C")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x20A9470", Offset = "0x20A9470", VA = "0x20A9470")]
		private void build_theAudioStream()
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x20A9BAC", Offset = "0x20A9BAC", VA = "0x20A9BAC")]
		private void loadAudio()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x20A9B20", Offset = "0x20A9B20", VA = "0x20A9B20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A520", Offset = "0xB5A520")]
		private IEnumerator LoopRead()
		{
			return null;
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x20A9CB8", Offset = "0x20A9CB8", VA = "0x20A9CB8")]
		private void theAudioStream_sendStartLoopPump()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x20A9CC4", Offset = "0x20A9CC4", VA = "0x20A9CC4")]
		private void theAudioStream_sendStopLoopPump()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x20A9CC8", Offset = "0x20A9CC8", VA = "0x20A9CC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x20A9DA8", Offset = "0x20A9DA8", VA = "0x20A9DA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A584", Offset = "0xB5A584")]
		private IEnumerator firePlay(TimeSpan? OffsetStart)
		{
			return null;
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x20A9E58", Offset = "0x20A9E58", VA = "0x20A9E58")]
		public void PlayAudioFile(InputField FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x20A9E70", Offset = "0x20A9E70", VA = "0x20A9E70")]
		public void PlayAudioStream(string FileNameIN, TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x20A9F44", Offset = "0x20A9F44", VA = "0x20A9F44")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x20A9F4C", Offset = "0x20A9F4C", VA = "0x20A9F4C")]
		public void PlayPauseAudio()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x20AA008", Offset = "0x20AA008", VA = "0x20AA008")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x20A9F00", Offset = "0x20A9F00", VA = "0x20A9F00", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x20AA0DC", Offset = "0x20AA0DC", VA = "0x20AA0DC")]
		private void RunPlay()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x20AA1E8", Offset = "0x20AA1E8", VA = "0x20AA1E8", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x20AA1FC", Offset = "0x20AA1FC", VA = "0x20AA1FC", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x20AA270", Offset = "0x20AA270", VA = "0x20AA270")]
		public void Halt()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x20A9ED8", Offset = "0x20A9ED8", VA = "0x20A9ED8", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x20AA2A0", Offset = "0x20AA2A0", VA = "0x20AA2A0", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x20AA2A8", Offset = "0x20AA2A8", VA = "0x20AA2A8")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x20AA2B0", Offset = "0x20AA2B0", VA = "0x20AA2B0")]
		private void theAudioStream_Disposed(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x20AA2E4", Offset = "0x20AA2E4", VA = "0x20AA2E4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x20AA2E8", Offset = "0x20AA2E8", VA = "0x20AA2E8", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x20AA3BC", Offset = "0x20AA3BC", VA = "0x20AA3BC")]
		public uAudioStreamer()
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x20AA428", Offset = "0x20AA428", VA = "0x20AA428")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A5E8", Offset = "0xB5A5E8")]
		private void <build_theAudioStream>b__47_0(PlayBackState c)
		{
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x20AA490", Offset = "0x20AA490", VA = "0x20AA490")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A5F8", Offset = "0xB5A5F8")]
		private void <loadAudio>b__50_0()
		{
		}
	}
	[Token(Token = "0x200008D")]
	public class uAudioStreamer_UI : MonoBehaviour, IAudioPlayer, IDisposable
	{
		[Token(Token = "0x2000542")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47284", Offset = "0xB47284")]
		private sealed class <updateBuffer>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uAudioStreamer_UI <>4__this;

			[Token(Token = "0x170003C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600257B")]
				[Address(RVA = "0x20ABA8C", Offset = "0x20ABA8C", VA = "0x20ABA8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600257D")]
				[Address(RVA = "0x20ABAF4", Offset = "0x20ABAF4", VA = "0x20ABAF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002578")]
			[Address(RVA = "0x20AAB90", Offset = "0x20AAB90", VA = "0x20AAB90")]
			[DebuggerHidden]
			public <updateBuffer>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6002579")]
			[Address(RVA = "0x20AB954", Offset = "0x20AB954", VA = "0x20AB954", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600257A")]
			[Address(RVA = "0x20AB958", Offset = "0x20AB958", VA = "0x20AB958", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600257C")]
			[Address(RVA = "0x20ABA94", Offset = "0x20ABA94", VA = "0x20ABA94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField urlInput;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider Buffer;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button bn_play;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button bn_pause;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button bn_stop;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider SongVolume;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string targetFilePath;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public uAudioStreamer my_uAudioStreamer;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool force_buffer;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine bufferLoop;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool halt;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IEnumerator updateBufferLoop;

		[Token(Token = "0x1700003F")]
		public Action<PlayBackState> sendPlaybackState
		{
			[Token(Token = "0x60003AE")]
			[Address(RVA = "0x20AABBC", Offset = "0x20AABBC", VA = "0x20AABBC", Slot = "21")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0x20AABD8", Offset = "0x20AABD8", VA = "0x20AABD8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000040")]
		private Action uAudio.uAudio_backend.IAudioPlayer.SLEEP
		{
			[Token(Token = "0x60003B0")]
			[Address(RVA = "0x20AABF4", Offset = "0x20AABF4", VA = "0x20AABF4", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0x20AAC88", Offset = "0x20AAC88", VA = "0x20AAC88", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public string AudioTitle
		{
			[Token(Token = "0x60003B2")]
			[Address(RVA = "0x20AAD1C", Offset = "0x20AAD1C", VA = "0x20AAD1C", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		private string uAudio.uAudio_backend.IAudioPlayer.current_TargetFile_Loaded
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x20AAD24", Offset = "0x20AAD24", VA = "0x20AAD24", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		public PlayBackState PlaybackState
		{
			[Token(Token = "0x60003B4")]
			[Address(RVA = "0x20AAD2C", Offset = "0x20AAD2C", VA = "0x20AAD2C", Slot = "5")]
			get
			{
				return default(PlayBackState);
			}
		}

		[Token(Token = "0x17000044")]
		public float Volume
		{
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0x20AADA0", Offset = "0x20AADA0", VA = "0x20AADA0", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B8")]
			[Address(RVA = "0x20AADB8", Offset = "0x20AADB8", VA = "0x20AADB8", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000045")]
		public TimeSpan TotalTime
		{
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0x20AADD0", Offset = "0x20AADD0", VA = "0x20AADD0", Slot = "9")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000046")]
		public int SongLength
		{
			[Token(Token = "0x60003BA")]
			[Address(RVA = "0x20AAE38", Offset = "0x20AAE38", VA = "0x20AAE38", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000047")]
		public TimeSpan CurrentTime
		{
			[Token(Token = "0x60003BB")]
			[Address(RVA = "0x20AAE40", Offset = "0x20AAE40", VA = "0x20AAE40", Slot = "10")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x60003BC")]
			[Address(RVA = "0x20AAEA8", Offset = "0x20AAEA8", VA = "0x20AAEA8", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000048")]
		public float Pan
		{
			[Token(Token = "0x60003BD")]
			[Address(RVA = "0x20AAEAC", Offset = "0x20AAEAC", VA = "0x20AAEAC", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003BE")]
			[Address(RVA = "0x20AAED0", Offset = "0x20AAED0", VA = "0x20AAED0", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public bool ForceBuffering
		{
			[Token(Token = "0x60003BF")]
			[Address(RVA = "0x20AAEF4", Offset = "0x20AAEF4", VA = "0x20AAEF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003C0")]
			[Address(RVA = "0x20AAF0C", Offset = "0x20AAF0C", VA = "0x20AAF0C")]
			set
			{
			}
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x20AAB20", Offset = "0x20AAB20", VA = "0x20AAB20")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A608", Offset = "0xB5A608")]
		private IEnumerator updateBuffer()
		{
			return null;
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x20AAD44", Offset = "0x20AAD44", VA = "0x20AAD44")]
		public void ChangeCurrentVolume(Slider volumeSlider)
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x20AAD88", Offset = "0x20AAD88", VA = "0x20AAD88")]
		public void ChangeCurrentVolume(float volumeIN)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x20AAF28", Offset = "0x20AAF28", VA = "0x20AAF28")]
		private void Start()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x20AB314", Offset = "0x20AB314", VA = "0x20AB314")]
		public void Play(PlayBackState v)
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x20AB3F4", Offset = "0x20AB3F4", VA = "0x20AB3F4")]
		private void onSongVolume_Change(float volumeIN)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x20AB40C", Offset = "0x20AB40C", VA = "0x20AB40C")]
		private void onSongPath_Change(string PathIN)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x20AB414", Offset = "0x20AB414", VA = "0x20AB414")]
		public void SetStreamURL(string streamURL)
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x20AB430", Offset = "0x20AB430", VA = "0x20AB430")]
		private string loadLinkFile(string fileIN)
		{
			return null;
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x20AB538", Offset = "0x20AB538", VA = "0x20AB538")]
		private void startPlay()
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x20AB6A8", Offset = "0x20AB6A8", VA = "0x20AB6A8", Slot = "14")]
		public void Play([Optional] TimeSpan? OffsetStart)
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x20AB760", Offset = "0x20AB760", VA = "0x20AB760", Slot = "13")]
		public void Pause()
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x20AB788", Offset = "0x20AB788", VA = "0x20AB788", Slot = "15")]
		public void Stop()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x20AB840", Offset = "0x20AB840", VA = "0x20AB840", Slot = "25")]
		public void ChangeCurrentTime(TimeSpan timeIN)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x20AB51C", Offset = "0x20AB51C", VA = "0x20AB51C", Slot = "16")]
		public void LoadFile(string targetFile)
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x20AB844", Offset = "0x20AB844", VA = "0x20AB844", Slot = "17")]
		public void SetFile(string targetFile)
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x20AB860", Offset = "0x20AB860", VA = "0x20AB860")]
		public void SetURL(string targetFile)
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x20AB87C", Offset = "0x20AB87C", VA = "0x20AB87C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x20AB934", Offset = "0x20AB934", VA = "0x20AB934", Slot = "20")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x20AB94C", Offset = "0x20AB94C", VA = "0x20AB94C")]
		public uAudioStreamer_UI()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x200008E")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x1760BFC", Offset = "0x1760BFC", VA = "0x1760BFC")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x200008F")]
	public sealed class Callback<T> : IDisposable
	{
		[Token(Token = "0x2000543")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x14000001")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x60003D3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A66C", Offset = "0xB5A66C")]
			add
			{
			}
			[Token(Token = "0x60003D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A67C", Offset = "0xB5A67C")]
			remove
			{
			}
		}

		[Token(Token = "0x60003D5")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003D6")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003D7")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x60003D8")]
		~Callback()
		{
		}

		[Token(Token = "0x60003D9")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003DA")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x60003DB")]
		public void Unregister()
		{
		}

		[Token(Token = "0x60003DC")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60003DD")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60003DE")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60003DF")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60003E0")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x2000090")]
	public sealed class CallResult<T> : IDisposable
	{
		[Token(Token = "0x2000544")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x1700004A")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x60003E3")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000002")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x60003E1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A68C", Offset = "0xB5A68C")]
			add
			{
			}
			[Token(Token = "0x60003E2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A69C", Offset = "0xB5A69C")]
			remove
			{
			}
		}

		[Token(Token = "0x60003E4")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60003E5")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60003E6")]
		~CallResult()
		{
		}

		[Token(Token = "0x60003E7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60003E8")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x60003E9")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60003EA")]
		public void Cancel()
		{
		}

		[Token(Token = "0x60003EB")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60003EC")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60003ED")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall_)
		{
		}

		[Token(Token = "0x60003EE")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60003EF")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000091")]
	internal class CCallbackBase
	{
		[Token(Token = "0x40004F2")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x40004F3")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x175F93C", Offset = "0x175F93C", VA = "0x175F93C")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000092")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x2000545")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47294", Offset = "0xB47294")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x2000546")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB472A8", Offset = "0xB472A8")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x2000547")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB472BC", Offset = "0xB472BC")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x40004F7")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x175F944", Offset = "0x175F944", VA = "0x175F944")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x2000093")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x1760C00", Offset = "0x1760C00", VA = "0x1760C00")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x1760C88", Offset = "0x1760C88", VA = "0x1760C88")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x2000094")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB435C0", Offset = "0xB435C0")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB49490", Offset = "0xB49490")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x1700004B")]
		public int Identity
		{
			[Token(Token = "0x60003F4")]
			[Address(RVA = "0x1760C90", Offset = "0x1760C90", VA = "0x1760C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A6AC", Offset = "0xB5A6AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60003F5")]
			[Address(RVA = "0x1760C98", Offset = "0x1760C98", VA = "0x1760C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A6BC", Offset = "0xB5A6BC")]
			set
			{
			}
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x1760CA0", Offset = "0x1760CA0", VA = "0x1760CA0")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x2000095")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x2000548")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000549")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200054A")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x200054B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB472D0", Offset = "0xB472D0")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200054C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB472E4", Offset = "0xB472E4")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200054D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB472F8", Offset = "0xB472F8")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x200054E")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4001D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4001D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4001D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x60025AA")]
			[Address(RVA = "0x124C6E4", Offset = "0x124C6E4", VA = "0x124C6E4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x124C4CC", Offset = "0x124C4CC", VA = "0x124C4CC")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x124C71C", Offset = "0x124C71C", VA = "0x124C71C", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x124C814", Offset = "0x124C814", VA = "0x124C814")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x124CAB8", Offset = "0x124CAB8", VA = "0x124CAB8")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x124CD5C", Offset = "0x124CD5C", VA = "0x124CD5C")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x124D000", Offset = "0x124D000", VA = "0x124D000")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000096")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x200054F")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x2000550")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x2000551")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB4730C", Offset = "0xB4730C")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x2000552")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47320", Offset = "0xB47320")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000553")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4001D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4001D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x60025BB")]
			[Address(RVA = "0x12488C4", Offset = "0x12488C4", VA = "0x12488C4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x12486E4", Offset = "0x12486E4", VA = "0x12486E4")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x12488EC", Offset = "0x12488EC", VA = "0x12488EC", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x12489E4", Offset = "0x12489E4", VA = "0x12489E4")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x1248D94", Offset = "0x1248D94", VA = "0x1248D94")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x1248FB8", Offset = "0x1248FB8", VA = "0x1248FB8")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000097")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x2000554")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000555")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x2000556")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x2000557")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47334", Offset = "0xB47334")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000558")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47348", Offset = "0xB47348")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000559")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB4735C", Offset = "0xB4735C")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x200055A")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4001D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x4001D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4001D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x60025D4")]
			[Address(RVA = "0x1249884", Offset = "0x1249884", VA = "0x1249884")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x124966C", Offset = "0x124966C", VA = "0x124966C")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x12498BC", Offset = "0x12498BC", VA = "0x12498BC", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x12499B4", Offset = "0x12499B4", VA = "0x12499B4")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x1249F70", Offset = "0x1249F70", VA = "0x1249F70")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x124A194", Offset = "0x124A194", VA = "0x124A194")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x124A3B8", Offset = "0x124A3B8", VA = "0x124A3B8")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000098")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x200055B")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x200055C")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x200055D")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x200055E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47370", Offset = "0xB47370")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x200055F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47384", Offset = "0xB47384")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000560")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB47398", Offset = "0xB47398")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000561")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4001D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x4001D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4001D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x60025ED")]
			[Address(RVA = "0x124B0E4", Offset = "0x124B0E4", VA = "0x124B0E4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x124AECC", Offset = "0x124AECC", VA = "0x124AECC")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x124B11C", Offset = "0x124B11C", VA = "0x124B11C", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x124B214", Offset = "0x124B214", VA = "0x124B214")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x124B64C", Offset = "0x124B64C", VA = "0x124B64C")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x124B870", Offset = "0x124B870", VA = "0x124B870")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x124BA94", Offset = "0x124BA94", VA = "0x124BA94")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000099")]
	public class InteropHelp
	{
		[Token(Token = "0x2000562")]
		public class UTF8StringHandle : IDisposable
		{
			[Token(Token = "0x60025EE")]
			[Address(RVA = "0x1247690", Offset = "0x1247690", VA = "0x1247690")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x60025EF")]
			[Address(RVA = "0x124E498", Offset = "0x124E498", VA = "0x124E498", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000563")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x4001D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4001D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4001D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x60025F0")]
			[Address(RVA = "0x124DE10", Offset = "0x124DE10", VA = "0x124DE10")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x60025F1")]
			[Address(RVA = "0x124E2C8", Offset = "0x124E2C8", VA = "0x124E2C8", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x60025F2")]
			[Address(RVA = "0x124E480", Offset = "0x124E480", VA = "0x124E480")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1247624", Offset = "0x1247624", VA = "0x1247624")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x124DCB8", Offset = "0x124DCB8", VA = "0x124DCB8")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x124DD60", Offset = "0x124DD60", VA = "0x124DD60")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x1249A00", Offset = "0x1249A00", VA = "0x1249A00")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x124DE08", Offset = "0x124DE08", VA = "0x124DE08")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x200009A")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x124E49C", Offset = "0x124E49C", VA = "0x124E49C")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x124E6B8", Offset = "0x124E6B8", VA = "0x124E6B8", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x124E7D4", Offset = "0x124E7D4", VA = "0x124E7D4")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200009B")]
	public class DllCheck
	{
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x1247408", Offset = "0x1247408", VA = "0x1247408")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x1247410", Offset = "0x1247410", VA = "0x1247410")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x200009C")]
	public static class Packsize
	{
		[Token(Token = "0x2000564")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4001D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4001D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private ulong m_u64;

			[Token(Token = "0x4001D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private ushort m_u16;

			[Token(Token = "0x4001D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double m_d;
		}

		[Token(Token = "0x4000515")]
		public const int value = 4;

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x1B44DD4", Offset = "0x1B44DD4", VA = "0x1B44DD4")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200009D")]
	public static class Version
	{
		[Token(Token = "0x4000516")]
		public const string SteamworksNETVersion = "10.0.0";

		[Token(Token = "0x4000517")]
		public const string SteamworksSDKVersion = "1.40";

		[Token(Token = "0x4000518")]
		public const string SteamAPIDLLVersion = "03.92.72.58";

		[Token(Token = "0x4000519")]
		public const int SteamAPIDLLSize = 221984;

		[Token(Token = "0x400051A")]
		public const int SteamAPI64DLLSize = 245536;
	}
	[Token(Token = "0x200009E")]
	public static class SteamAPI
	{
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x1B455D0", Offset = "0x1B455D0", VA = "0x1B455D0")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x1B455EC", Offset = "0x1B455EC", VA = "0x1B455EC")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x1B45608", Offset = "0x1B45608", VA = "0x1B45608")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x1B45624", Offset = "0x1B45624", VA = "0x1B45624")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x1B45650", Offset = "0x1B45650", VA = "0x1B45650")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x1B4566C", Offset = "0x1B4566C", VA = "0x1B4566C")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x1B45688", Offset = "0x1B45688", VA = "0x1B45688")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x1B456A4", Offset = "0x1B456A4", VA = "0x1B456A4")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x1B456D0", Offset = "0x1B456D0", VA = "0x1B456D0")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x1B456FC", Offset = "0x1B456FC", VA = "0x1B456FC")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x200009F")]
	public static class GameServer
	{
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x12475F0", Offset = "0x12475F0", VA = "0x12475F0")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x12476B4", Offset = "0x12476B4", VA = "0x12476B4")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x1247730", Offset = "0x1247730", VA = "0x1247730")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x12477AC", Offset = "0x12477AC", VA = "0x12477AC")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x1247828", Offset = "0x1247828", VA = "0x1247828")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x12478B0", Offset = "0x12478B0", VA = "0x12478B0")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1247958", Offset = "0x1247958", VA = "0x1247958")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x12479E0", Offset = "0x12479E0", VA = "0x12479E0")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20000A0")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x1B49154", Offset = "0x1B49154", VA = "0x1B49154")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x1B491B8", Offset = "0x1B491B8", VA = "0x1B491B8")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x1B491FC", Offset = "0x1B491FC", VA = "0x1B491FC")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x1B49230", Offset = "0x1B49230", VA = "0x1B49230")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x1B49274", Offset = "0x1B49274", VA = "0x1B49274")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x1B492A8", Offset = "0x1B492A8", VA = "0x1B492A8")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1B492EC", Offset = "0x1B492EC", VA = "0x1B492EC")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1B49320", Offset = "0x1B49320", VA = "0x1B49320")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A1")]
	[SuppressUnmanagedCodeSecurity]
	internal static class NativeMethods
	{
		[Token(Token = "0x400051B")]
		internal const string NativeLibraryName = "CSteamworks";

		[Token(Token = "0x400051C")]
		internal const string NativeLibrary_SDKEncryptedAppTicket = "sdkencryptedappticket";

		[PreserveSig]
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x124E9BC", Offset = "0x124E9BC", VA = "0x124E9BC")]
		public static extern bool SteamAPI_Init();

		[PreserveSig]
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x124EA38", Offset = "0x124EA38", VA = "0x124EA38")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x124EAA8", Offset = "0x124EAA8", VA = "0x124EAA8")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x124EB30", Offset = "0x124EB30", VA = "0x124EB30")]
		public static extern void SteamAPI_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x6000437")]
		[Address(RVA = "0x124EBA0", Offset = "0x124EBA0", VA = "0x124EBA0")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x6000438")]
		[Address(RVA = "0x124EC38", Offset = "0x124EC38", VA = "0x124EC38")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x6000439")]
		[Address(RVA = "0x124EC54", Offset = "0x124EC54", VA = "0x124EC54")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600043A")]
		[Address(RVA = "0x124ECC4", Offset = "0x124ECC4", VA = "0x124ECC4")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x600043B")]
		[Address(RVA = "0x124ED54", Offset = "0x124ED54", VA = "0x124ED54")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x600043C")]
		[Address(RVA = "0x124EDD4", Offset = "0x124EDD4", VA = "0x124EDD4")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x600043D")]
		[Address(RVA = "0x124EE64", Offset = "0x124EE64", VA = "0x124EE64")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x600043E")]
		[Address(RVA = "0x124EEF4", Offset = "0x124EEF4", VA = "0x124EEF4")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x124EF70", Offset = "0x124EF70", VA = "0x124EF70")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000440")]
		[Address(RVA = "0x124F000", Offset = "0x124F000", VA = "0x124F000")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x124F080", Offset = "0x124F080", VA = "0x124F080")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x6000442")]
		[Address(RVA = "0x124F0F4", Offset = "0x124F0F4", VA = "0x124F0F4")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x6000443")]
		[Address(RVA = "0x124F168", Offset = "0x124F168", VA = "0x124F168")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000444")]
		[Address(RVA = "0x124F1DC", Offset = "0x124F1DC", VA = "0x124F1DC")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x124F25C", Offset = "0x124F25C", VA = "0x124F25C")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000446")]
		[Address(RVA = "0x124F2D0", Offset = "0x124F2D0", VA = "0x124F2D0")]
		public static extern void SteamInternal_CreateInterface(IntPtr ver);

		[PreserveSig]
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x124F350", Offset = "0x124F350", VA = "0x124F350")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x124F36C", Offset = "0x124F36C", VA = "0x124F36C")]
		public static extern void SteamAPI_SetBreakpadAppID(uint unAppID);

		[PreserveSig]
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1247698", Offset = "0x1247698", VA = "0x1247698")]
		public static extern bool SteamGameServer_Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x12476C0", Offset = "0x12476C0", VA = "0x12476C0")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600044B")]
		[Address(RVA = "0x124773C", Offset = "0x124773C", VA = "0x124773C")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x12477B8", Offset = "0x12477B8", VA = "0x12477B8")]
		public static extern void SteamGameServer_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1247834", Offset = "0x1247834", VA = "0x1247834")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x12478E4", Offset = "0x12478E4", VA = "0x12478E4")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1247964", Offset = "0x1247964", VA = "0x1247964")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000450")]
		[Address(RVA = "0x12479EC", Offset = "0x12479EC", VA = "0x12479EC")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000451")]
		[Address(RVA = "0x124F3EC", Offset = "0x124F3EC", VA = "0x124F3EC")]
		public static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000452")]
		[Address(RVA = "0x124DCEC", Offset = "0x124DCEC", VA = "0x124DCEC")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x6000453")]
		[Address(RVA = "0x124DD94", Offset = "0x124DD94", VA = "0x124DD94")]
		public static extern IntPtr SteamGameServerClient();

		[PreserveSig]
		[Token(Token = "0x6000454")]
		[Address(RVA = "0x124F408", Offset = "0x124F408", VA = "0x124F408")]
		public static extern bool SteamEncryptedAppTicket_BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x124F4E8", Offset = "0x124F4E8", VA = "0x124F4E8")]
		public static extern bool SteamEncryptedAppTicket_BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x124F590", Offset = "0x124F590", VA = "0x124F590")]
		public static extern uint SteamEncryptedAppTicket_GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6000457")]
		[Address(RVA = "0x124F628", Offset = "0x124F628", VA = "0x124F628")]
		public static extern void SteamEncryptedAppTicket_GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x6000458")]
		[Address(RVA = "0x124F6C8", Offset = "0x124F6C8", VA = "0x124F6C8")]
		public static extern uint SteamEncryptedAppTicket_GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6000459")]
		[Address(RVA = "0x124F760", Offset = "0x124F760", VA = "0x124F760")]
		public static extern bool SteamEncryptedAppTicket_BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x124F808", Offset = "0x124F808", VA = "0x124F808")]
		public static extern bool SteamEncryptedAppTicket_BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600045B")]
		[Address(RVA = "0x124F8A8", Offset = "0x124F8A8", VA = "0x124F8A8")]
		public static extern IntPtr SteamEncryptedAppTicket_GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x600045C")]
		[Address(RVA = "0x124F948", Offset = "0x124F948", VA = "0x124F948")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x600045D")]
		[Address(RVA = "0x124F9BC", Offset = "0x124F9BC", VA = "0x124F9BC")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x600045E")]
		[Address(RVA = "0x124FA54", Offset = "0x124FA54", VA = "0x124FA54")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x124FAEC", Offset = "0x124FAEC", VA = "0x124FAEC")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x6000460")]
		[Address(RVA = "0x124FB84", Offset = "0x124FB84", VA = "0x124FB84")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000461")]
		[Address(RVA = "0x124FC04", Offset = "0x124FC04", VA = "0x124FC04")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x6000462")]
		[Address(RVA = "0x124FC80", Offset = "0x124FC80", VA = "0x124FC80")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x6000463")]
		[Address(RVA = "0x124FCFC", Offset = "0x124FCFC", VA = "0x124FCFC")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x6000464")]
		[Address(RVA = "0x124FD78", Offset = "0x124FD78", VA = "0x124FD78")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x6000465")]
		[Address(RVA = "0x124FDF4", Offset = "0x124FDF4", VA = "0x124FDF4")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x6000466")]
		[Address(RVA = "0x124FE68", Offset = "0x124FE68", VA = "0x124FE68")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x6000467")]
		[Address(RVA = "0x124FEDC", Offset = "0x124FEDC", VA = "0x124FEDC")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000468")]
		[Address(RVA = "0x124FF64", Offset = "0x124FF64", VA = "0x124FF64")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000469")]
		[Address(RVA = "0x124FFEC", Offset = "0x124FFEC", VA = "0x124FFEC")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600046A")]
		[Address(RVA = "0x125006C", Offset = "0x125006C", VA = "0x125006C")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x12500E8", Offset = "0x12500E8", VA = "0x12500E8")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x600046C")]
		[Address(RVA = "0x125015C", Offset = "0x125015C", VA = "0x125015C")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1250228", Offset = "0x1250228", VA = "0x1250228")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600046E")]
		[Address(RVA = "0x12502A8", Offset = "0x12502A8", VA = "0x12502A8")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1250328", Offset = "0x1250328", VA = "0x1250328")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000470")]
		[Address(RVA = "0x12503A8", Offset = "0x12503A8", VA = "0x12503A8")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1250440", Offset = "0x1250440", VA = "0x1250440")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x6000472")]
		[Address(RVA = "0x12504C8", Offset = "0x12504C8", VA = "0x12504C8")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1250568", Offset = "0x1250568", VA = "0x1250568")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1250600", Offset = "0x1250600", VA = "0x1250600")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1250688", Offset = "0x1250688", VA = "0x1250688")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x6000476")]
		[Address(RVA = "0x12506FC", Offset = "0x12506FC", VA = "0x12506FC")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1250718", Offset = "0x1250718", VA = "0x1250718")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000478")]
		[Address(RVA = "0x12507B8", Offset = "0x12507B8", VA = "0x12507B8")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x6000479")]
		[Address(RVA = "0x125082C", Offset = "0x125082C", VA = "0x125082C")]
		public static extern void ISteamApps_RequestAllProofOfPurchaseKeys();

		[PreserveSig]
		[Token(Token = "0x600047A")]
		[Address(RVA = "0x125089C", Offset = "0x125089C", VA = "0x125089C")]
		public static extern ulong ISteamApps_GetFileDetails(InteropHelp.UTF8StringHandle pszFileName);

		[PreserveSig]
		[Token(Token = "0x600047B")]
		[Address(RVA = "0x12508B8", Offset = "0x12508B8", VA = "0x12508B8")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x600047C")]
		[Address(RVA = "0x125092C", Offset = "0x125092C", VA = "0x125092C")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x12509B4", Offset = "0x12509B4", VA = "0x12509B4")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1250A34", Offset = "0x1250A34", VA = "0x1250A34")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1250AC4", Offset = "0x1250AC4", VA = "0x1250AC4")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1250B54", Offset = "0x1250B54", VA = "0x1250B54")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1250B70", Offset = "0x1250B70", VA = "0x1250B70")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1250B8C", Offset = "0x1250B8C", VA = "0x1250B8C")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x1250C1C", Offset = "0x1250C1C", VA = "0x1250C1C")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1250C38", Offset = "0x1250C38", VA = "0x1250C38")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000485")]
		[Address(RVA = "0x1250C54", Offset = "0x1250C54", VA = "0x1250C54")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1250C70", Offset = "0x1250C70", VA = "0x1250C70")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1250C8C", Offset = "0x1250C8C", VA = "0x1250C8C")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1250CA8", Offset = "0x1250CA8", VA = "0x1250CA8")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1250CC4", Offset = "0x1250CC4", VA = "0x1250CC4")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1250CE0", Offset = "0x1250CE0", VA = "0x1250CE0")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1250CFC", Offset = "0x1250CFC", VA = "0x1250CFC")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1250D18", Offset = "0x1250D18", VA = "0x1250D18")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1250D34", Offset = "0x1250D34", VA = "0x1250D34")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1250D50", Offset = "0x1250D50", VA = "0x1250D50")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1250DC4", Offset = "0x1250DC4", VA = "0x1250DC4")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1250E48", Offset = "0x1250E48", VA = "0x1250E48")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1250EC4", Offset = "0x1250EC4", VA = "0x1250EC4")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1250EE0", Offset = "0x1250EE0", VA = "0x1250EE0")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1250EFC", Offset = "0x1250EFC", VA = "0x1250EFC")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1250F18", Offset = "0x1250F18", VA = "0x1250F18")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1250F34", Offset = "0x1250F34", VA = "0x1250F34")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1250F50", Offset = "0x1250F50", VA = "0x1250F50")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1250F6C", Offset = "0x1250F6C", VA = "0x1250F6C")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1250F88", Offset = "0x1250F88", VA = "0x1250F88")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1250FA4", Offset = "0x1250FA4", VA = "0x1250FA4")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1250FC0", Offset = "0x1250FC0", VA = "0x1250FC0")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1250FDC", Offset = "0x1250FDC", VA = "0x1250FDC")]
		public static extern bool ISteamController_Init();

		[PreserveSig]
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x1251058", Offset = "0x1251058", VA = "0x1251058")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600049D")]
		[Address(RVA = "0x12510D4", Offset = "0x12510D4", VA = "0x12510D4")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1251144", Offset = "0x1251144", VA = "0x1251144")]
		public static extern int ISteamController_GetConnectedControllers([In][Out] ControllerHandle_t[] handlesOut);

		[PreserveSig]
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x12511CC", Offset = "0x12511CC", VA = "0x12511CC")]
		public static extern bool ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x1251254", Offset = "0x1251254", VA = "0x1251254")]
		public static extern ulong ISteamController_GetActionSetHandle(InteropHelp.UTF8StringHandle pszActionSetName);

		[PreserveSig]
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1251270", Offset = "0x1251270", VA = "0x1251270")]
		public static extern void ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);

		[PreserveSig]
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x1251300", Offset = "0x1251300", VA = "0x1251300")]
		public static extern ulong ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1251380", Offset = "0x1251380", VA = "0x1251380")]
		public static extern ulong ISteamController_GetDigitalActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x125139C", Offset = "0x125139C", VA = "0x125139C")]
		public static extern ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);

		[PreserveSig]
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1251430", Offset = "0x1251430", VA = "0x1251430")]
		public static extern int ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x12514E0", Offset = "0x12514E0", VA = "0x12514E0")]
		public static extern ulong ISteamController_GetAnalogActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x12514FC", Offset = "0x12514FC", VA = "0x12514FC")]
		public static extern ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);

		[PreserveSig]
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1251590", Offset = "0x1251590", VA = "0x1251590")]
		public static extern int ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1251640", Offset = "0x1251640", VA = "0x1251640")]
		public static extern void ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);

		[PreserveSig]
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x12516D0", Offset = "0x12516D0", VA = "0x12516D0")]
		public static extern void ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1251768", Offset = "0x1251768", VA = "0x1251768")]
		public static extern void ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1251828", Offset = "0x1251828", VA = "0x1251828")]
		public static extern void ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

		[PreserveSig]
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x12518C0", Offset = "0x12518C0", VA = "0x12518C0")]
		public static extern void ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1251970", Offset = "0x1251970", VA = "0x1251970")]
		public static extern int ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle);

		[PreserveSig]
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x12519F0", Offset = "0x12519F0", VA = "0x12519F0")]
		public static extern ulong ISteamController_GetControllerForGamepadIndex(int nIndex);

		[PreserveSig]
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1251A70", Offset = "0x1251A70", VA = "0x1251A70")]
		public static extern ControllerMotionData_t ISteamController_GetMotionData(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x1251B00", Offset = "0x1251B00", VA = "0x1251B00")]
		public static extern bool ISteamController_ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x1251BC0", Offset = "0x1251BC0", VA = "0x1251BC0")]
		public static extern bool ISteamController_ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x1251C80", Offset = "0x1251C80", VA = "0x1251C80")]
		public static extern IntPtr ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1251D00", Offset = "0x1251D00", VA = "0x1251D00")]
		public static extern IntPtr ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1251D80", Offset = "0x1251D80", VA = "0x1251D80")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1251DF4", Offset = "0x1251DF4", VA = "0x1251DF4")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x1251E10", Offset = "0x1251E10", VA = "0x1251E10")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x1251E84", Offset = "0x1251E84", VA = "0x1251E84")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1251F04", Offset = "0x1251F04", VA = "0x1251F04")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1251F94", Offset = "0x1251F94", VA = "0x1251F94")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1252014", Offset = "0x1252014", VA = "0x1252014")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1252094", Offset = "0x1252094", VA = "0x1252094")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1252114", Offset = "0x1252114", VA = "0x1252114")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x12521AC", Offset = "0x12521AC", VA = "0x12521AC")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x125223C", Offset = "0x125223C", VA = "0x125223C")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x12522BC", Offset = "0x12522BC", VA = "0x12522BC")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x125233C", Offset = "0x125233C", VA = "0x125233C")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x12523B0", Offset = "0x12523B0", VA = "0x12523B0")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1252430", Offset = "0x1252430", VA = "0x1252430")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x12524B0", Offset = "0x12524B0", VA = "0x12524B0")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1252530", Offset = "0x1252530", VA = "0x1252530")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x12525D0", Offset = "0x12525D0", VA = "0x12525D0")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1252668", Offset = "0x1252668", VA = "0x1252668")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x12526DC", Offset = "0x12526DC", VA = "0x12526DC")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x125275C", Offset = "0x125275C", VA = "0x125275C")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x12527DC", Offset = "0x12527DC", VA = "0x12527DC")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x125285C", Offset = "0x125285C", VA = "0x125285C")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x125290C", Offset = "0x125290C", VA = "0x125290C")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x12529A4", Offset = "0x12529A4", VA = "0x12529A4")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1252A24", Offset = "0x1252A24", VA = "0x1252A24")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1252AB4", Offset = "0x1252AB4", VA = "0x1252AB4")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1252B4C", Offset = "0x1252B4C", VA = "0x1252B4C")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1252BDC", Offset = "0x1252BDC", VA = "0x1252BDC")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x1252BF8", Offset = "0x1252BF8", VA = "0x1252BF8")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1252C14", Offset = "0x1252C14", VA = "0x1252C14")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1252C30", Offset = "0x1252C30", VA = "0x1252C30")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1252CC0", Offset = "0x1252CC0", VA = "0x1252CC0")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1252D40", Offset = "0x1252D40", VA = "0x1252D40")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x1252DC0", Offset = "0x1252DC0", VA = "0x1252DC0")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x1252E40", Offset = "0x1252E40", VA = "0x1252E40")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1252EC0", Offset = "0x1252EC0", VA = "0x1252EC0")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1252F40", Offset = "0x1252F40", VA = "0x1252F40")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x1252FD8", Offset = "0x1252FD8", VA = "0x1252FD8")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x1253058", Offset = "0x1253058", VA = "0x1253058")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x12530D8", Offset = "0x12530D8", VA = "0x12530D8")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x1253158", Offset = "0x1253158", VA = "0x1253158")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x12531E8", Offset = "0x12531E8", VA = "0x12531E8")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x125325C", Offset = "0x125325C", VA = "0x125325C")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1253278", Offset = "0x1253278", VA = "0x1253278")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x12532E8", Offset = "0x12532E8", VA = "0x12532E8")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1253304", Offset = "0x1253304", VA = "0x1253304")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1253384", Offset = "0x1253384", VA = "0x1253384")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x1253414", Offset = "0x1253414", VA = "0x1253414")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1253494", Offset = "0x1253494", VA = "0x1253494")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x12534B0", Offset = "0x12534B0", VA = "0x12534B0")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1253524", Offset = "0x1253524", VA = "0x1253524")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x12535A4", Offset = "0x12535A4", VA = "0x12535A4")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1253624", Offset = "0x1253624", VA = "0x1253624")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x12536A4", Offset = "0x12536A4", VA = "0x12536A4")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1253724", Offset = "0x1253724", VA = "0x1253724")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x12537AC", Offset = "0x12537AC", VA = "0x12537AC")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x125382C", Offset = "0x125382C", VA = "0x125382C")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x12538BC", Offset = "0x12538BC", VA = "0x12538BC")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x12538D8", Offset = "0x12538D8", VA = "0x12538D8")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x1253998", Offset = "0x1253998", VA = "0x1253998")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1253A30", Offset = "0x1253A30", VA = "0x1253A30")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x1253AB8", Offset = "0x1253AB8", VA = "0x1253AB8")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x1253B40", Offset = "0x1253B40", VA = "0x1253B40")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x1253BC8", Offset = "0x1253BC8", VA = "0x1253BC8")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x1253C50", Offset = "0x1253C50", VA = "0x1253C50")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x1253C6C", Offset = "0x1253C6C", VA = "0x1253C6C")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x1253D1C", Offset = "0x1253D1C", VA = "0x1253D1C")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x1253D9C", Offset = "0x1253D9C", VA = "0x1253D9C")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1253E1C", Offset = "0x1253E1C", VA = "0x1253E1C")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1253E9C", Offset = "0x1253E9C", VA = "0x1253E9C")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x1253EB8", Offset = "0x1253EB8", VA = "0x1253EB8")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x1253ED4", Offset = "0x1253ED4", VA = "0x1253ED4")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1253EF0", Offset = "0x1253EF0", VA = "0x1253EF0")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1253F0C", Offset = "0x1253F0C", VA = "0x1253F0C")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1253F8C", Offset = "0x1253F8C", VA = "0x1253F8C")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1253FA8", Offset = "0x1253FA8", VA = "0x1253FA8")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1254018", Offset = "0x1254018", VA = "0x1254018")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1254088", Offset = "0x1254088", VA = "0x1254088")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0x1254104", Offset = "0x1254104", VA = "0x1254104")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1254180", Offset = "0x1254180", VA = "0x1254180")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x12541F4", Offset = "0x12541F4", VA = "0x12541F4")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1254270", Offset = "0x1254270", VA = "0x1254270")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0x12542F0", Offset = "0x12542F0", VA = "0x12542F0")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1254370", Offset = "0x1254370", VA = "0x1254370")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x600050A")]
		[Address(RVA = "0x125438C", Offset = "0x125438C", VA = "0x125438C")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x12543A8", Offset = "0x12543A8", VA = "0x12543A8")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1254428", Offset = "0x1254428", VA = "0x1254428")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0x12544A8", Offset = "0x12544A8", VA = "0x12544A8")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0x12544C4", Offset = "0x12544C4", VA = "0x12544C4")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1254534", Offset = "0x1254534", VA = "0x1254534")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1254550", Offset = "0x1254550", VA = "0x1254550")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x125456C", Offset = "0x125456C", VA = "0x125456C")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1254588", Offset = "0x1254588", VA = "0x1254588")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x12545A4", Offset = "0x12545A4", VA = "0x12545A4")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x125465C", Offset = "0x125465C", VA = "0x125465C")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x12546D0", Offset = "0x12546D0", VA = "0x12546D0")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x1254750", Offset = "0x1254750", VA = "0x1254750")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x125476C", Offset = "0x125476C", VA = "0x125476C")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x125480C", Offset = "0x125480C", VA = "0x125480C")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x12548AC", Offset = "0x12548AC", VA = "0x12548AC")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x125492C", Offset = "0x125492C", VA = "0x125492C")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x12549AC", Offset = "0x12549AC", VA = "0x12549AC")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x1254A3C", Offset = "0x1254A3C", VA = "0x1254A3C")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1254AD4", Offset = "0x1254AD4", VA = "0x1254AD4")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1254B44", Offset = "0x1254B44", VA = "0x1254B44")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1254BB8", Offset = "0x1254BB8", VA = "0x1254BB8")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1254C2C", Offset = "0x1254C2C", VA = "0x1254C2C")]
		public static extern bool ISteamGameServer_HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1254CE4", Offset = "0x1254CE4", VA = "0x1254CE4")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1254D94", Offset = "0x1254D94", VA = "0x1254D94")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1254E14", Offset = "0x1254E14", VA = "0x1254E14")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1254E94", Offset = "0x1254E94", VA = "0x1254E94")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1254F04", Offset = "0x1254F04", VA = "0x1254F04")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1254F84", Offset = "0x1254F84", VA = "0x1254F84")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1255004", Offset = "0x1255004", VA = "0x1255004")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1255084", Offset = "0x1255084", VA = "0x1255084")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0x12550A0", Offset = "0x12550A0", VA = "0x12550A0")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x12550BC", Offset = "0x12550BC", VA = "0x12550BC")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0x12550D8", Offset = "0x12550D8", VA = "0x12550D8")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x600052C")]
		[Address(RVA = "0x12550F4", Offset = "0x12550F4", VA = "0x12550F4")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1255110", Offset = "0x1255110", VA = "0x1255110")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0x125512C", Offset = "0x125512C", VA = "0x125512C")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0x1255148", Offset = "0x1255148", VA = "0x1255148")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1255164", Offset = "0x1255164", VA = "0x1255164")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x12551E4", Offset = "0x12551E4", VA = "0x12551E4")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0x1255260", Offset = "0x1255260", VA = "0x1255260")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000533")]
		[Address(RVA = "0x12552DC", Offset = "0x12552DC", VA = "0x12552DC")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0x12552F8", Offset = "0x12552F8", VA = "0x12552F8")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1255378", Offset = "0x1255378", VA = "0x1255378")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1255394", Offset = "0x1255394", VA = "0x1255394")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x6000537")]
		[Address(RVA = "0x125542C", Offset = "0x125542C", VA = "0x125542C")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0x12554AC", Offset = "0x12554AC", VA = "0x12554AC")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x125552C", Offset = "0x125552C", VA = "0x125552C")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x12555AC", Offset = "0x12555AC", VA = "0x12555AC")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x125562C", Offset = "0x125562C", VA = "0x125562C")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1255648", Offset = "0x1255648", VA = "0x1255648")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1255664", Offset = "0x1255664", VA = "0x1255664")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x12556F4", Offset = "0x12556F4", VA = "0x12556F4")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1255784", Offset = "0x1255784", VA = "0x1255784")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1255814", Offset = "0x1255814", VA = "0x1255814")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x12558AC", Offset = "0x12558AC", VA = "0x12558AC")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x125593C", Offset = "0x125593C", VA = "0x125593C")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x12559D4", Offset = "0x12559D4", VA = "0x12559D4")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1255A6C", Offset = "0x1255A6C", VA = "0x1255A6C")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1255B04", Offset = "0x1255B04", VA = "0x1255B04")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1255B94", Offset = "0x1255B94", VA = "0x1255B94")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1255C24", Offset = "0x1255C24", VA = "0x1255C24")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1255CB4", Offset = "0x1255CB4", VA = "0x1255CB4")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1255D34", Offset = "0x1255D34", VA = "0x1255D34")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1255DB4", Offset = "0x1255DB4", VA = "0x1255DB4")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1255E34", Offset = "0x1255E34", VA = "0x1255E34")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1255E50", Offset = "0x1255E50", VA = "0x1255E50")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1255ED0", Offset = "0x1255ED0", VA = "0x1255ED0")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x600054E")]
		[Address(RVA = "0x1255F68", Offset = "0x1255F68", VA = "0x1255F68")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1255F84", Offset = "0x1255F84", VA = "0x1255F84")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6000550")]
		[Address(RVA = "0x125602C", Offset = "0x125602C", VA = "0x125602C")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x6000551")]
		[Address(RVA = "0x12560BC", Offset = "0x12560BC", VA = "0x12560BC")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x6000552")]
		[Address(RVA = "0x125614C", Offset = "0x125614C", VA = "0x125614C")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x6000553")]
		[Address(RVA = "0x12561DC", Offset = "0x12561DC", VA = "0x12561DC")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x6000554")]
		[Address(RVA = "0x125626C", Offset = "0x125626C", VA = "0x125626C")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x6000555")]
		[Address(RVA = "0x1256288", Offset = "0x1256288", VA = "0x1256288")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1256320", Offset = "0x1256320", VA = "0x1256320")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x6000557")]
		[Address(RVA = "0x12563B8", Offset = "0x12563B8", VA = "0x12563B8")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x6000558")]
		[Address(RVA = "0x12563D4", Offset = "0x12563D4", VA = "0x12563D4")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x6000559")]
		[Address(RVA = "0x12563F0", Offset = "0x12563F0", VA = "0x12563F0")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1256488", Offset = "0x1256488", VA = "0x1256488")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600055B")]
		[Address(RVA = "0x1256520", Offset = "0x1256520", VA = "0x1256520")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600055C")]
		[Address(RVA = "0x12565A8", Offset = "0x12565A8", VA = "0x12565A8")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600055D")]
		[Address(RVA = "0x1256630", Offset = "0x1256630", VA = "0x1256630")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x600055E")]
		[Address(RVA = "0x125664C", Offset = "0x125664C", VA = "0x125664C")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1256668", Offset = "0x1256668", VA = "0x1256668")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1256700", Offset = "0x1256700", VA = "0x1256700")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000561")]
		[Address(RVA = "0x12567A8", Offset = "0x12567A8", VA = "0x12567A8")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1256860", Offset = "0x1256860", VA = "0x1256860")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000563")]
		[Address(RVA = "0x12568E8", Offset = "0x12568E8", VA = "0x12568E8")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000564")]
		[Address(RVA = "0x1256980", Offset = "0x1256980", VA = "0x1256980")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x6000565")]
		[Address(RVA = "0x125699C", Offset = "0x125699C", VA = "0x125699C")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x6000566")]
		[Address(RVA = "0x1256A1C", Offset = "0x1256A1C", VA = "0x1256A1C")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1256AA4", Offset = "0x1256AA4", VA = "0x1256AA4")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1256AC0", Offset = "0x1256AC0", VA = "0x1256AC0")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1256B58", Offset = "0x1256B58", VA = "0x1256B58")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1256B74", Offset = "0x1256B74", VA = "0x1256B74")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x600056B")]
		[Address(RVA = "0x1256C0C", Offset = "0x1256C0C", VA = "0x1256C0C")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x600056C")]
		[Address(RVA = "0x1256CA4", Offset = "0x1256CA4", VA = "0x1256CA4")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x600056D")]
		[Address(RVA = "0x1256D50", Offset = "0x1256D50", VA = "0x1256D50")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600056E")]
		[Address(RVA = "0x1256DD0", Offset = "0x1256DD0", VA = "0x1256DD0")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x600056F")]
		[Address(RVA = "0x1256E78", Offset = "0x1256E78", VA = "0x1256E78")]
		public static extern bool ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1256E94", Offset = "0x1256E94", VA = "0x1256E94")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000571")]
		[Address(RVA = "0x1256F14", Offset = "0x1256F14", VA = "0x1256F14")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1256FAC", Offset = "0x1256FAC", VA = "0x1256FAC")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000573")]
		[Address(RVA = "0x125702C", Offset = "0x125702C", VA = "0x125702C")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000574")]
		[Address(RVA = "0x12570B4", Offset = "0x12570B4", VA = "0x12570B4")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x125715C", Offset = "0x125715C", VA = "0x125715C")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1257204", Offset = "0x1257204", VA = "0x1257204")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x6000577")]
		[Address(RVA = "0x12572BC", Offset = "0x12572BC", VA = "0x12572BC")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000578")]
		[Address(RVA = "0x125737C", Offset = "0x125737C", VA = "0x125737C")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1257404", Offset = "0x1257404", VA = "0x1257404")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x600057A")]
		[Address(RVA = "0x125749C", Offset = "0x125749C", VA = "0x125749C")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1257544", Offset = "0x1257544", VA = "0x1257544")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x600057C")]
		[Address(RVA = "0x12575E4", Offset = "0x12575E4", VA = "0x12575E4")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x600057D")]
		[Address(RVA = "0x12576D4", Offset = "0x12576D4", VA = "0x12576D4")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1257784", Offset = "0x1257784", VA = "0x1257784")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x600057F")]
		[Address(RVA = "0x12577F4", Offset = "0x12577F4", VA = "0x12577F4")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000580")]
		[Address(RVA = "0x125788C", Offset = "0x125788C", VA = "0x125788C")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000581")]
		[Address(RVA = "0x125798C", Offset = "0x125798C", VA = "0x125798C")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000582")]
		[Address(RVA = "0x1257A08", Offset = "0x1257A08", VA = "0x1257A08")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000583")]
		[Address(RVA = "0x1257AA8", Offset = "0x1257AA8", VA = "0x1257AA8")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000584")]
		[Address(RVA = "0x1257AC4", Offset = "0x1257AC4", VA = "0x1257AC4")]
		public static extern ulong ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000585")]
		[Address(RVA = "0x1257B44", Offset = "0x1257B44", VA = "0x1257B44")]
		public static extern bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000586")]
		[Address(RVA = "0x1257BEC", Offset = "0x1257BEC", VA = "0x1257BEC")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x6000587")]
		[Address(RVA = "0x1257C60", Offset = "0x1257C60", VA = "0x1257C60")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000588")]
		[Address(RVA = "0x1257D30", Offset = "0x1257D30", VA = "0x1257D30")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000589")]
		[Address(RVA = "0x1257DF0", Offset = "0x1257DF0", VA = "0x1257DF0")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x600058A")]
		[Address(RVA = "0x1257EA8", Offset = "0x1257EA8", VA = "0x1257EA8")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x600058B")]
		[Address(RVA = "0x1257F1C", Offset = "0x1257F1C", VA = "0x1257F1C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600058C")]
		[Address(RVA = "0x1257F38", Offset = "0x1257F38", VA = "0x1257F38")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1257F54", Offset = "0x1257F54", VA = "0x1257F54")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x1257F70", Offset = "0x1257F70", VA = "0x1257F70")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x1257FF0", Offset = "0x1257FF0", VA = "0x1257FF0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x6000590")]
		[Address(RVA = "0x1258070", Offset = "0x1258070", VA = "0x1258070")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x12580F0", Offset = "0x12580F0", VA = "0x12580F0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000592")]
		[Address(RVA = "0x1258170", Offset = "0x1258170", VA = "0x1258170")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x12581F0", Offset = "0x12581F0", VA = "0x12581F0")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000594")]
		[Address(RVA = "0x1258280", Offset = "0x1258280", VA = "0x1258280")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000595")]
		[Address(RVA = "0x1258300", Offset = "0x1258300", VA = "0x1258300")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000596")]
		[Address(RVA = "0x1258380", Offset = "0x1258380", VA = "0x1258380")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x6000597")]
		[Address(RVA = "0x1258418", Offset = "0x1258418", VA = "0x1258418")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000598")]
		[Address(RVA = "0x1258498", Offset = "0x1258498", VA = "0x1258498")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x6000599")]
		[Address(RVA = "0x1258528", Offset = "0x1258528", VA = "0x1258528")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600059A")]
		[Address(RVA = "0x1258544", Offset = "0x1258544", VA = "0x1258544")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600059B")]
		[Address(RVA = "0x1258560", Offset = "0x1258560", VA = "0x1258560")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600059C")]
		[Address(RVA = "0x12585E0", Offset = "0x12585E0", VA = "0x12585E0")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x600059D")]
		[Address(RVA = "0x12586A8", Offset = "0x12586A8", VA = "0x12586A8")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x12586C4", Offset = "0x12586C4", VA = "0x12586C4")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x12586E0", Offset = "0x12586E0", VA = "0x12586E0")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x12586FC", Offset = "0x12586FC", VA = "0x12586FC")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x12587A4", Offset = "0x12587A4", VA = "0x12587A4")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x125886C", Offset = "0x125886C", VA = "0x125886C")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x12588F4", Offset = "0x12588F4", VA = "0x12588F4")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x125899C", Offset = "0x125899C", VA = "0x125899C")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x1258A4C", Offset = "0x1258A4C", VA = "0x1258A4C")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x1258AE4", Offset = "0x1258AE4", VA = "0x1258AE4")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x1258B64", Offset = "0x1258B64", VA = "0x1258B64")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x1258BFC", Offset = "0x1258BFC", VA = "0x1258BFC")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x1258C94", Offset = "0x1258C94", VA = "0x1258C94")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x1258D14", Offset = "0x1258D14", VA = "0x1258D14")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x1258DAC", Offset = "0x1258DAC", VA = "0x1258DAC")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x1258E44", Offset = "0x1258E44", VA = "0x1258E44")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x1258EEC", Offset = "0x1258EEC", VA = "0x1258EEC")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1258F7C", Offset = "0x1258F7C", VA = "0x1258F7C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x1259024", Offset = "0x1259024", VA = "0x1259024")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x12590CC", Offset = "0x12590CC", VA = "0x12590CC")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1259174", Offset = "0x1259174", VA = "0x1259174")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x125921C", Offset = "0x125921C", VA = "0x125921C")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x125929C", Offset = "0x125929C", VA = "0x125929C")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x125932C", Offset = "0x125932C", VA = "0x125932C")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x12593AC", Offset = "0x12593AC", VA = "0x12593AC")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x125942C", Offset = "0x125942C", VA = "0x125942C")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x12594B4", Offset = "0x12594B4", VA = "0x12594B4")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x1259534", Offset = "0x1259534", VA = "0x1259534")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x12595C4", Offset = "0x12595C4", VA = "0x12595C4")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x125965C", Offset = "0x125965C", VA = "0x125965C")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x12596F4", Offset = "0x12596F4", VA = "0x12596F4")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x125978C", Offset = "0x125978C", VA = "0x125978C")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x125980C", Offset = "0x125980C", VA = "0x125980C")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x1259888", Offset = "0x1259888", VA = "0x1259888")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x1259904", Offset = "0x1259904", VA = "0x1259904")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x1259978", Offset = "0x1259978", VA = "0x1259978")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x12599E8", Offset = "0x12599E8", VA = "0x12599E8")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1259A58", Offset = "0x1259A58", VA = "0x1259A58")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x1259AC8", Offset = "0x1259AC8", VA = "0x1259AC8")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1259B38", Offset = "0x1259B38", VA = "0x1259B38")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1259BBC", Offset = "0x1259BBC", VA = "0x1259BBC")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1259C2C", Offset = "0x1259C2C", VA = "0x1259C2C")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x1259C48", Offset = "0x1259C48", VA = "0x1259C48")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1259CC4", Offset = "0x1259CC4", VA = "0x1259CC4")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1259D40", Offset = "0x1259D40", VA = "0x1259D40")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1259DC8", Offset = "0x1259DC8", VA = "0x1259DC8")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x1259DE4", Offset = "0x1259DE4", VA = "0x1259DE4")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x1259E84", Offset = "0x1259E84", VA = "0x1259E84")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x1259F0C", Offset = "0x1259F0C", VA = "0x1259F0C")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1259F94", Offset = "0x1259F94", VA = "0x1259F94")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x125A01C", Offset = "0x125A01C", VA = "0x125A01C")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x125A0A4", Offset = "0x125A0A4", VA = "0x125A0A4")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x125A12C", Offset = "0x125A12C", VA = "0x125A12C")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x125A1B4", Offset = "0x125A1B4", VA = "0x125A1B4")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x125A23C", Offset = "0x125A23C", VA = "0x125A23C")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x125A2C4", Offset = "0x125A2C4", VA = "0x125A2C4")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x125A34C", Offset = "0x125A34C", VA = "0x125A34C")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x125A3DC", Offset = "0x125A3DC", VA = "0x125A3DC")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x125A458", Offset = "0x125A458", VA = "0x125A458")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x125A4E0", Offset = "0x125A4E0", VA = "0x125A4E0")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x125A4FC", Offset = "0x125A4FC", VA = "0x125A4FC")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x125A584", Offset = "0x125A584", VA = "0x125A584")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x125A624", Offset = "0x125A624", VA = "0x125A624")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x125A6A0", Offset = "0x125A6A0", VA = "0x125A6A0")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x125A71C", Offset = "0x125A71C", VA = "0x125A71C")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x125A798", Offset = "0x125A798", VA = "0x125A798")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x125A7B4", Offset = "0x125A7B4", VA = "0x125A7B4")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x125A83C", Offset = "0x125A83C", VA = "0x125A83C")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x125A8B8", Offset = "0x125A8B8", VA = "0x125A8B8")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x125A934", Offset = "0x125A934", VA = "0x125A934")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x125A9B0", Offset = "0x125A9B0", VA = "0x125A9B0")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x125A9CC", Offset = "0x125A9CC", VA = "0x125A9CC")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x125AA54", Offset = "0x125AA54", VA = "0x125AA54")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x125AAD0", Offset = "0x125AAD0", VA = "0x125AAD0")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x125AB90", Offset = "0x125AB90", VA = "0x125AB90")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x125AC28", Offset = "0x125AC28", VA = "0x125AC28")]
		public static extern bool ISteamNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x125ACE8", Offset = "0x125ACE8", VA = "0x125ACE8")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x125AD70", Offset = "0x125AD70", VA = "0x125AD70")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x125ADF8", Offset = "0x125ADF8", VA = "0x125ADF8")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x125AE90", Offset = "0x125AE90", VA = "0x125AE90")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x125AF28", Offset = "0x125AF28", VA = "0x125AF28")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x125AFB0", Offset = "0x125AFB0", VA = "0x125AFB0")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x125B058", Offset = "0x125B058", VA = "0x125B058")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x125B100", Offset = "0x125B100", VA = "0x125B100")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x125B198", Offset = "0x125B198", VA = "0x125B198")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x125B230", Offset = "0x125B230", VA = "0x125B230")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x125B2C8", Offset = "0x125B2C8", VA = "0x125B2C8")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x125B380", Offset = "0x125B380", VA = "0x125B380")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x125B418", Offset = "0x125B418", VA = "0x125B418")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x125B4D0", Offset = "0x125B4D0", VA = "0x125B4D0")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x125B570", Offset = "0x125B570", VA = "0x125B570")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x125B630", Offset = "0x125B630", VA = "0x125B630")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x125B6E8", Offset = "0x125B6E8", VA = "0x125B6E8")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x125B788", Offset = "0x125B788", VA = "0x125B788")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x125B808", Offset = "0x125B808", VA = "0x125B808")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x125B888", Offset = "0x125B888", VA = "0x125B888")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x125B8A4", Offset = "0x125B8A4", VA = "0x125B8A4")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x125B8C0", Offset = "0x125B8C0", VA = "0x125B8C0")]
		public static extern ulong ISteamRemoteStorage_FileWriteAsync(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x125B8DC", Offset = "0x125B8DC", VA = "0x125B8DC")]
		public static extern ulong ISteamRemoteStorage_FileReadAsync(InteropHelp.UTF8StringHandle pchFile, uint nOffset, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x125B8F8", Offset = "0x125B8F8", VA = "0x125B8F8")]
		public static extern bool ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x125B9A0", Offset = "0x125B9A0", VA = "0x125B9A0")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x125B9BC", Offset = "0x125B9BC", VA = "0x125B9BC")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0x125B9D8", Offset = "0x125B9D8", VA = "0x125B9D8")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x125B9F4", Offset = "0x125B9F4", VA = "0x125B9F4")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x125BA10", Offset = "0x125BA10", VA = "0x125BA10")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x125BA2C", Offset = "0x125BA2C", VA = "0x125BA2C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x125BAD4", Offset = "0x125BAD4", VA = "0x125BAD4")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x125BB5C", Offset = "0x125BB5C", VA = "0x125BB5C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x125BBE4", Offset = "0x125BBE4", VA = "0x125BBE4")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x125BC00", Offset = "0x125BC00", VA = "0x125BC00")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x125BC1C", Offset = "0x125BC1C", VA = "0x125BC1C")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x125BC38", Offset = "0x125BC38", VA = "0x125BC38")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x125BC54", Offset = "0x125BC54", VA = "0x125BC54")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x125BC70", Offset = "0x125BC70", VA = "0x125BC70")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x125BCE4", Offset = "0x125BCE4", VA = "0x125BCE4")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x125BD74", Offset = "0x125BD74", VA = "0x125BD74")]
		public static extern bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x125BE0C", Offset = "0x125BE0C", VA = "0x125BE0C")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x125BE88", Offset = "0x125BE88", VA = "0x125BE88")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x125BF04", Offset = "0x125BF04", VA = "0x125BF04")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x125BF84", Offset = "0x125BF84", VA = "0x125BF84")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x125C014", Offset = "0x125C014", VA = "0x125C014")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x125C0B4", Offset = "0x125C0B4", VA = "0x125C0B4")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x125C16C", Offset = "0x125C16C", VA = "0x125C16C")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x125C224", Offset = "0x125C224", VA = "0x125C224")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x125C298", Offset = "0x125C298", VA = "0x125C298")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x125C318", Offset = "0x125C318", VA = "0x125C318")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x125C334", Offset = "0x125C334", VA = "0x125C334")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x125C3B4", Offset = "0x125C3B4", VA = "0x125C3B4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x125C3D0", Offset = "0x125C3D0", VA = "0x125C3D0")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x125C3EC", Offset = "0x125C3EC", VA = "0x125C3EC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x125C408", Offset = "0x125C408", VA = "0x125C408")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x125C424", Offset = "0x125C424", VA = "0x125C424")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x125C4BC", Offset = "0x125C4BC", VA = "0x125C4BC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000622")]
		[Address(RVA = "0x125C554", Offset = "0x125C554", VA = "0x125C554")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x125C5D4", Offset = "0x125C5D4", VA = "0x125C5D4")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x125C664", Offset = "0x125C664", VA = "0x125C664")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x125C6E4", Offset = "0x125C6E4", VA = "0x125C6E4")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x125C764", Offset = "0x125C764", VA = "0x125C764")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x125C7E4", Offset = "0x125C7E4", VA = "0x125C7E4")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x125C864", Offset = "0x125C864", VA = "0x125C864")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x125C8E4", Offset = "0x125C8E4", VA = "0x125C8E4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x125C900", Offset = "0x125C900", VA = "0x125C900")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x125C980", Offset = "0x125C980", VA = "0x125C980")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x125CA10", Offset = "0x125CA10", VA = "0x125CA10")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x125CA90", Offset = "0x125CA90", VA = "0x125CA90")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x125CB38", Offset = "0x125CB38", VA = "0x125CB38")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x125CB54", Offset = "0x125CB54", VA = "0x125CB54")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x125CBE4", Offset = "0x125CBE4", VA = "0x125CBE4")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x125CC74", Offset = "0x125CC74", VA = "0x125CC74")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x125CD34", Offset = "0x125CD34", VA = "0x125CD34")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x125CD50", Offset = "0x125CD50", VA = "0x125CD50")]
		public static extern uint ISteamScreenshots_WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x125CE00", Offset = "0x125CE00", VA = "0x125CE00")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x125CE1C", Offset = "0x125CE1C", VA = "0x125CE1C")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x125CE8C", Offset = "0x125CE8C", VA = "0x125CE8C")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x125CF0C", Offset = "0x125CF0C", VA = "0x125CF0C")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x125CF28", Offset = "0x125CF28", VA = "0x125CF28")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x125CFC0", Offset = "0x125CFC0", VA = "0x125CFC0")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x125D058", Offset = "0x125D058", VA = "0x125D058")]
		public static extern bool ISteamScreenshots_IsScreenshotsHooked();

		[PreserveSig]
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x125D0D4", Offset = "0x125D0D4", VA = "0x125D0D4")]
		public static extern uint ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchVRFilename);

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x125D0F0", Offset = "0x125D0F0", VA = "0x125D0F0")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x125D1B8", Offset = "0x125D1B8", VA = "0x125D1B8")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x125D268", Offset = "0x125D268", VA = "0x125D268")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x125D300", Offset = "0x125D300", VA = "0x125D300")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x125D380", Offset = "0x125D380", VA = "0x125D380")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x125D478", Offset = "0x125D478", VA = "0x125D478")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x125D528", Offset = "0x125D528", VA = "0x125D528")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x125D5D8", Offset = "0x125D5D8", VA = "0x125D5D8")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x125D690", Offset = "0x125D690", VA = "0x125D690")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x125D740", Offset = "0x125D740", VA = "0x125D740")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x125D7D0", Offset = "0x125D7D0", VA = "0x125D7D0")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x125D8B0", Offset = "0x125D8B0", VA = "0x125D8B0")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x125D940", Offset = "0x125D940", VA = "0x125D940")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x125DA10", Offset = "0x125DA10", VA = "0x125DA10")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x125DA98", Offset = "0x125DA98", VA = "0x125DA98")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x125DAB4", Offset = "0x125DAB4", VA = "0x125DAB4")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x125DAD0", Offset = "0x125DAD0", VA = "0x125DAD0")]
		public static extern bool ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x125DB68", Offset = "0x125DB68", VA = "0x125DB68")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x125DC00", Offset = "0x125DC00", VA = "0x125DC00")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x125DC98", Offset = "0x125DC98", VA = "0x125DC98")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x125DD30", Offset = "0x125DD30", VA = "0x125DD30")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x125DDC8", Offset = "0x125DDC8", VA = "0x125DDC8")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x125DE60", Offset = "0x125DE60", VA = "0x125DE60")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x125DEF8", Offset = "0x125DEF8", VA = "0x125DEF8")]
		public static extern bool ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x125DF90", Offset = "0x125DF90", VA = "0x125DF90")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x125DFAC", Offset = "0x125DFAC", VA = "0x125DFAC")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x125E044", Offset = "0x125E044", VA = "0x125E044")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x125E060", Offset = "0x125E060", VA = "0x125E060")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000658")]
		[Address(RVA = "0x125E0F8", Offset = "0x125E0F8", VA = "0x125E0F8")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x125E114", Offset = "0x125E114", VA = "0x125E114")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x600065A")]
		[Address(RVA = "0x125E1AC", Offset = "0x125E1AC", VA = "0x125E1AC")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x125E1C8", Offset = "0x125E1C8", VA = "0x125E1C8")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x125E258", Offset = "0x125E258", VA = "0x125E258")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x125E2E8", Offset = "0x125E2E8", VA = "0x125E2E8")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x125E378", Offset = "0x125E378", VA = "0x125E378")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x125E394", Offset = "0x125E394", VA = "0x125E394")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000660")]
		[Address(RVA = "0x125E3B0", Offset = "0x125E3B0", VA = "0x125E3B0")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x125E3CC", Offset = "0x125E3CC", VA = "0x125E3CC")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x125E3E8", Offset = "0x125E3E8", VA = "0x125E3E8")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x125E480", Offset = "0x125E480", VA = "0x125E480")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x125E518", Offset = "0x125E518", VA = "0x125E518")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x125E534", Offset = "0x125E534", VA = "0x125E534")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000666")]
		[Address(RVA = "0x125E550", Offset = "0x125E550", VA = "0x125E550")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x125E56C", Offset = "0x125E56C", VA = "0x125E56C")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x125E588", Offset = "0x125E588", VA = "0x125E588")]
		public static extern bool ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x125E5A4", Offset = "0x125E5A4", VA = "0x125E5A4")]
		public static extern bool ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x125E5C0", Offset = "0x125E5C0", VA = "0x125E5C0")]
		public static extern bool ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x125E5DC", Offset = "0x125E5DC", VA = "0x125E5DC")]
		public static extern bool ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x125E5F8", Offset = "0x125E5F8", VA = "0x125E5F8")]
		public static extern bool ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x125E690", Offset = "0x125E690", VA = "0x125E690")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x125E6AC", Offset = "0x125E6AC", VA = "0x125E6AC")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x125E744", Offset = "0x125E744", VA = "0x125E744")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x125E7D4", Offset = "0x125E7D4", VA = "0x125E7D4")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x125E854", Offset = "0x125E854", VA = "0x125E854")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x125E8E4", Offset = "0x125E8E4", VA = "0x125E8E4")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x125E974", Offset = "0x125E974", VA = "0x125E974")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x125E9F4", Offset = "0x125E9F4", VA = "0x125E9F4")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x125EA74", Offset = "0x125EA74", VA = "0x125EA74")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x125EAE8", Offset = "0x125EAE8", VA = "0x125EAE8")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x125EB80", Offset = "0x125EB80", VA = "0x125EB80")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x125EC00", Offset = "0x125EC00", VA = "0x125EC00")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x125ECB8", Offset = "0x125ECB8", VA = "0x125ECB8")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x125ED58", Offset = "0x125ED58", VA = "0x125ED58")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x125EDF0", Offset = "0x125EDF0", VA = "0x125EDF0")]
		public static extern bool ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x125EE0C", Offset = "0x125EE0C", VA = "0x125EE0C")]
		public static extern void ISteamUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x125EE8C", Offset = "0x125EE8C", VA = "0x125EE8C")]
		public static extern ulong ISteamUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x125EF24", Offset = "0x125EF24", VA = "0x125EF24")]
		public static extern ulong ISteamUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x125EFBC", Offset = "0x125EFBC", VA = "0x125EFBC")]
		public static extern ulong ISteamUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x125F030", Offset = "0x125F030", VA = "0x125F030")]
		public static extern ulong ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x125F0C0", Offset = "0x125F0C0", VA = "0x125F0C0")]
		public static extern ulong ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x125F150", Offset = "0x125F150", VA = "0x125F150")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x125F16C", Offset = "0x125F16C", VA = "0x125F16C")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x125F20C", Offset = "0x125F20C", VA = "0x125F20C")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x125F2C4", Offset = "0x125F2C4", VA = "0x125F2C4")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x125F34C", Offset = "0x125F34C", VA = "0x125F34C")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x125F368", Offset = "0x125F368", VA = "0x125F368")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x125F3DC", Offset = "0x125F3DC", VA = "0x125F3DC")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x125F458", Offset = "0x125F458", VA = "0x125F458")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x125F4CC", Offset = "0x125F4CC", VA = "0x125F4CC")]
		public static extern int ISteamUser_InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x125F594", Offset = "0x125F594", VA = "0x125F594")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x125F624", Offset = "0x125F624", VA = "0x125F624")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x125F640", Offset = "0x125F640", VA = "0x125F640")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x125F6D8", Offset = "0x125F6D8", VA = "0x125F6D8")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x125F748", Offset = "0x125F748", VA = "0x125F748")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x125F7B8", Offset = "0x125F7B8", VA = "0x125F7B8")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, IntPtr pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x125F850", Offset = "0x125F850", VA = "0x125F850")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, IntPtr nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x125F938", Offset = "0x125F938", VA = "0x125F938")]
		public static extern EVoiceResult ISteamUser_DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x125FA08", Offset = "0x125FA08", VA = "0x125FA08")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x125FA7C", Offset = "0x125FA7C", VA = "0x125FA7C")]
		public static extern uint ISteamUser_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x125FB1C", Offset = "0x125FB1C", VA = "0x125FB1C")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x125FBBC", Offset = "0x125FBBC", VA = "0x125FBBC")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x125FC3C", Offset = "0x125FC3C", VA = "0x125FC3C")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x125FCBC", Offset = "0x125FCBC", VA = "0x125FCBC")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x125FD4C", Offset = "0x125FD4C", VA = "0x125FD4C")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x125FDC8", Offset = "0x125FDC8", VA = "0x125FDC8")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x125FE60", Offset = "0x125FE60", VA = "0x125FE60")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x125FEF8", Offset = "0x125FEF8", VA = "0x125FEF8")]
		public static extern bool ISteamUser_GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x125FFA0", Offset = "0x125FFA0", VA = "0x125FFA0")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1260030", Offset = "0x1260030", VA = "0x1260030")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x12600A4", Offset = "0x12600A4", VA = "0x12600A4")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x12600C0", Offset = "0x12600C0", VA = "0x12600C0")]
		public static extern bool ISteamUser_BIsPhoneVerified();

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x126013C", Offset = "0x126013C", VA = "0x126013C")]
		public static extern bool ISteamUser_BIsTwoFactorEnabled();

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x12601B8", Offset = "0x12601B8", VA = "0x12601B8")]
		public static extern bool ISteamUser_BIsPhoneIdentifying();

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1260234", Offset = "0x1260234", VA = "0x1260234")]
		public static extern bool ISteamUser_BIsPhoneRequiringVerification();

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x12602B0", Offset = "0x12602B0", VA = "0x12602B0")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x126032C", Offset = "0x126032C", VA = "0x126032C")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x1260348", Offset = "0x1260348", VA = "0x1260348")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1260364", Offset = "0x1260364", VA = "0x1260364")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x1260380", Offset = "0x1260380", VA = "0x1260380")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x126039C", Offset = "0x126039C", VA = "0x126039C")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x12603B8", Offset = "0x12603B8", VA = "0x12603B8")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x12603D4", Offset = "0x12603D4", VA = "0x12603D4")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x12603F0", Offset = "0x12603F0", VA = "0x12603F0")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x126040C", Offset = "0x126040C", VA = "0x126040C")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1260428", Offset = "0x1260428", VA = "0x1260428")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x12604A4", Offset = "0x12604A4", VA = "0x12604A4")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x12604C0", Offset = "0x12604C0", VA = "0x12604C0")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x12604DC", Offset = "0x12604DC", VA = "0x12604DC")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x12604F8", Offset = "0x12604F8", VA = "0x12604F8")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x126056C", Offset = "0x126056C", VA = "0x126056C")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x12605EC", Offset = "0x12605EC", VA = "0x12605EC")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x126066C", Offset = "0x126066C", VA = "0x126066C")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1260688", Offset = "0x1260688", VA = "0x1260688")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x12606A4", Offset = "0x12606A4", VA = "0x12606A4")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x12606C0", Offset = "0x12606C0", VA = "0x12606C0")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x12606DC", Offset = "0x12606DC", VA = "0x12606DC")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1260764", Offset = "0x1260764", VA = "0x1260764")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1260780", Offset = "0x1260780", VA = "0x1260780")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x126079C", Offset = "0x126079C", VA = "0x126079C")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x126081C", Offset = "0x126081C", VA = "0x126081C")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x126089C", Offset = "0x126089C", VA = "0x126089C")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x126091C", Offset = "0x126091C", VA = "0x126091C")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x126099C", Offset = "0x126099C", VA = "0x126099C")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1260A44", Offset = "0x1260A44", VA = "0x1260A44")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1260AE4", Offset = "0x1260AE4", VA = "0x1260AE4")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x1260BA4", Offset = "0x1260BA4", VA = "0x1260BA4")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1260C5C", Offset = "0x1260C5C", VA = "0x1260C5C")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x1260CEC", Offset = "0x1260CEC", VA = "0x1260CEC")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1260D60", Offset = "0x1260D60", VA = "0x1260D60")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x1260DD4", Offset = "0x1260DD4", VA = "0x1260DD4")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x1260E90", Offset = "0x1260E90", VA = "0x1260E90")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x1260F54", Offset = "0x1260F54", VA = "0x1260F54")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x1260F70", Offset = "0x1260F70", VA = "0x1260F70")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x1260FF0", Offset = "0x1260FF0", VA = "0x1260FF0")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x126100C", Offset = "0x126100C", VA = "0x126100C")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x1261028", Offset = "0x1261028", VA = "0x1261028")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x1261044", Offset = "0x1261044", VA = "0x1261044")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x1261060", Offset = "0x1261060", VA = "0x1261060")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x12610D4", Offset = "0x12610D4", VA = "0x12610D4")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x1261148", Offset = "0x1261148", VA = "0x1261148")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x12611BC", Offset = "0x12611BC", VA = "0x12611BC")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x1261230", Offset = "0x1261230", VA = "0x1261230")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x12612A4", Offset = "0x12612A4", VA = "0x12612A4")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x1261344", Offset = "0x1261344", VA = "0x1261344")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x12613EC", Offset = "0x12613EC", VA = "0x12613EC")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x1261484", Offset = "0x1261484", VA = "0x1261484")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x12614F8", Offset = "0x12614F8", VA = "0x12614F8")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x126156C", Offset = "0x126156C", VA = "0x126156C")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x12615EC", Offset = "0x12615EC", VA = "0x12615EC")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x1261698", Offset = "0x1261698", VA = "0x1261698")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1261718", Offset = "0x1261718", VA = "0x1261718")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x12617E4", Offset = "0x12617E4", VA = "0x12617E4")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x1261858", Offset = "0x1261858", VA = "0x1261858")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x12618DC", Offset = "0x12618DC", VA = "0x12618DC")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1261958", Offset = "0x1261958", VA = "0x1261958")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x12619D4", Offset = "0x12619D4", VA = "0x12619D4")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x12619F0", Offset = "0x12619F0", VA = "0x12619F0")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x1261A0C", Offset = "0x1261A0C", VA = "0x1261A0C")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1261A80", Offset = "0x1261A80", VA = "0x1261A80")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1261B18", Offset = "0x1261B18", VA = "0x1261B18")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1261B8C", Offset = "0x1261B8C", VA = "0x1261B8C")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x1261C08", Offset = "0x1261C08", VA = "0x1261C08")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x1261C98", Offset = "0x1261C98", VA = "0x1261C98")]
		public static extern bool ISteamUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1261D14", Offset = "0x1261D14", VA = "0x1261D14")]
		public static extern void ISteamUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x1261D84", Offset = "0x1261D84", VA = "0x1261D84")]
		public static extern bool ISteamUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1261E00", Offset = "0x1261E00", VA = "0x1261E00")]
		public static extern void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x1261E80", Offset = "0x1261E80", VA = "0x1261E80")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1261F00", Offset = "0x1261F00", VA = "0x1261F00")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x1261F88", Offset = "0x1261F88", VA = "0x1261F88")]
		public static extern void ISteamVideo_GetOPFSettings(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x1262008", Offset = "0x1262008", VA = "0x1262008")]
		public static extern bool ISteamVideo_GetOPFStringForApp(AppId_t unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x12620A8", Offset = "0x12620A8", VA = "0x12620A8")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x12620C4", Offset = "0x12620C4", VA = "0x12620C4")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x126215C", Offset = "0x126215C", VA = "0x126215C")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x12621F4", Offset = "0x12621F4", VA = "0x12621F4")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x1262210", Offset = "0x1262210", VA = "0x1262210")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x126222C", Offset = "0x126222C", VA = "0x126222C")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x12622C4", Offset = "0x12622C4", VA = "0x12622C4")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x126235C", Offset = "0x126235C", VA = "0x126235C")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x12623E4", Offset = "0x12623E4", VA = "0x12623E4")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x126246C", Offset = "0x126246C", VA = "0x126246C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x1262488", Offset = "0x1262488", VA = "0x1262488")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x12624A4", Offset = "0x12624A4", VA = "0x12624A4")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x126253C", Offset = "0x126253C", VA = "0x126253C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x12625E4", Offset = "0x12625E4", VA = "0x12625E4")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x126269C", Offset = "0x126269C", VA = "0x126269C")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x1262724", Offset = "0x1262724", VA = "0x1262724")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x12627BC", Offset = "0x12627BC", VA = "0x12627BC")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x12627D8", Offset = "0x12627D8", VA = "0x12627D8")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x1262858", Offset = "0x1262858", VA = "0x1262858")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x12628E0", Offset = "0x12628E0", VA = "0x12628E0")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x12628FC", Offset = "0x12628FC", VA = "0x12628FC")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x1262994", Offset = "0x1262994", VA = "0x1262994")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x12629B0", Offset = "0x12629B0", VA = "0x12629B0")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x1262A48", Offset = "0x1262A48", VA = "0x1262A48")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1262AE0", Offset = "0x1262AE0", VA = "0x1262AE0")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x1262B8C", Offset = "0x1262B8C", VA = "0x1262B8C")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x1262C0C", Offset = "0x1262C0C", VA = "0x1262C0C")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x1262CB4", Offset = "0x1262CB4", VA = "0x1262CB4")]
		public static extern bool ISteamGameServerInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x1262CD0", Offset = "0x1262CD0", VA = "0x1262CD0")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x1262D50", Offset = "0x1262D50", VA = "0x1262D50")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x1262DE8", Offset = "0x1262DE8", VA = "0x1262DE8")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x1262E68", Offset = "0x1262E68", VA = "0x1262E68")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x1262EF0", Offset = "0x1262EF0", VA = "0x1262EF0")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x1262F98", Offset = "0x1262F98", VA = "0x1262F98")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x1263040", Offset = "0x1263040", VA = "0x1263040")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x12630F8", Offset = "0x12630F8", VA = "0x12630F8")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x12631B8", Offset = "0x12631B8", VA = "0x12631B8")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x1263240", Offset = "0x1263240", VA = "0x1263240")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x12632D8", Offset = "0x12632D8", VA = "0x12632D8")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x1263380", Offset = "0x1263380", VA = "0x1263380")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x1263420", Offset = "0x1263420", VA = "0x1263420")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x1263510", Offset = "0x1263510", VA = "0x1263510")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x12635C0", Offset = "0x12635C0", VA = "0x12635C0")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x1263630", Offset = "0x1263630", VA = "0x1263630")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x12636C8", Offset = "0x12636C8", VA = "0x12636C8")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x12637C8", Offset = "0x12637C8", VA = "0x12637C8")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x1263844", Offset = "0x1263844", VA = "0x1263844")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x12638E4", Offset = "0x12638E4", VA = "0x12638E4")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x1263900", Offset = "0x1263900", VA = "0x1263900")]
		public static extern ulong ISteamGameServerInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1263980", Offset = "0x1263980", VA = "0x1263980")]
		public static extern bool ISteamGameServerInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x1263A28", Offset = "0x1263A28", VA = "0x1263A28")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x1263AE8", Offset = "0x1263AE8", VA = "0x1263AE8")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x1263B80", Offset = "0x1263B80", VA = "0x1263B80")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x1263C40", Offset = "0x1263C40", VA = "0x1263C40")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x1263CC8", Offset = "0x1263CC8", VA = "0x1263CC8")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x1263D50", Offset = "0x1263D50", VA = "0x1263D50")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x1263DE8", Offset = "0x1263DE8", VA = "0x1263DE8")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x1263E80", Offset = "0x1263E80", VA = "0x1263E80")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x1263F08", Offset = "0x1263F08", VA = "0x1263F08")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x1263FB0", Offset = "0x1263FB0", VA = "0x1263FB0")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x1264058", Offset = "0x1264058", VA = "0x1264058")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x12640F0", Offset = "0x12640F0", VA = "0x12640F0")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x1264188", Offset = "0x1264188", VA = "0x1264188")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x1264220", Offset = "0x1264220", VA = "0x1264220")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x12642D8", Offset = "0x12642D8", VA = "0x12642D8")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1264370", Offset = "0x1264370", VA = "0x1264370")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x1264428", Offset = "0x1264428", VA = "0x1264428")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x12644C8", Offset = "0x12644C8", VA = "0x12644C8")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1264588", Offset = "0x1264588", VA = "0x1264588")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1264640", Offset = "0x1264640", VA = "0x1264640")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x12646E0", Offset = "0x12646E0", VA = "0x12646E0")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x1264760", Offset = "0x1264760", VA = "0x1264760")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x12647E0", Offset = "0x12647E0", VA = "0x12647E0")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x12648A8", Offset = "0x12648A8", VA = "0x12648A8")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x1264958", Offset = "0x1264958", VA = "0x1264958")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x12649F0", Offset = "0x12649F0", VA = "0x12649F0")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x1264A70", Offset = "0x1264A70", VA = "0x1264A70")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x1264B68", Offset = "0x1264B68", VA = "0x1264B68")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x1264C18", Offset = "0x1264C18", VA = "0x1264C18")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1264CC8", Offset = "0x1264CC8", VA = "0x1264CC8")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x1264D80", Offset = "0x1264D80", VA = "0x1264D80")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x1264E30", Offset = "0x1264E30", VA = "0x1264E30")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x1264EC0", Offset = "0x1264EC0", VA = "0x1264EC0")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x1264F9C", Offset = "0x1264F9C", VA = "0x1264F9C")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x126502C", Offset = "0x126502C", VA = "0x126502C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x12650FC", Offset = "0x12650FC", VA = "0x12650FC")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x1265184", Offset = "0x1265184", VA = "0x1265184")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x12651A0", Offset = "0x12651A0", VA = "0x12651A0")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x12651BC", Offset = "0x12651BC", VA = "0x12651BC")]
		public static extern bool ISteamGameServerUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x1265254", Offset = "0x1265254", VA = "0x1265254")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x12652EC", Offset = "0x12652EC", VA = "0x12652EC")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x1265384", Offset = "0x1265384", VA = "0x1265384")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x126541C", Offset = "0x126541C", VA = "0x126541C")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x12654B4", Offset = "0x12654B4", VA = "0x12654B4")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x126554C", Offset = "0x126554C", VA = "0x126554C")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x12655E4", Offset = "0x12655E4", VA = "0x12655E4")]
		public static extern bool ISteamGameServerUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x126567C", Offset = "0x126567C", VA = "0x126567C")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x1265698", Offset = "0x1265698", VA = "0x1265698")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x1265730", Offset = "0x1265730", VA = "0x1265730")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x126574C", Offset = "0x126574C", VA = "0x126574C")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x12657E4", Offset = "0x12657E4", VA = "0x12657E4")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x1265800", Offset = "0x1265800", VA = "0x1265800")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x1265898", Offset = "0x1265898", VA = "0x1265898")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x12658B4", Offset = "0x12658B4", VA = "0x12658B4")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x1265944", Offset = "0x1265944", VA = "0x1265944")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x12659D4", Offset = "0x12659D4", VA = "0x12659D4")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1265A64", Offset = "0x1265A64", VA = "0x1265A64")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1265A80", Offset = "0x1265A80", VA = "0x1265A80")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x1265A9C", Offset = "0x1265A9C", VA = "0x1265A9C")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1265AB8", Offset = "0x1265AB8", VA = "0x1265AB8")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1265AD4", Offset = "0x1265AD4", VA = "0x1265AD4")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1265B6C", Offset = "0x1265B6C", VA = "0x1265B6C")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x1265C04", Offset = "0x1265C04", VA = "0x1265C04")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x1265C20", Offset = "0x1265C20", VA = "0x1265C20")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x1265C3C", Offset = "0x1265C3C", VA = "0x1265C3C")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1265C58", Offset = "0x1265C58", VA = "0x1265C58")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1265C74", Offset = "0x1265C74", VA = "0x1265C74")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1265C90", Offset = "0x1265C90", VA = "0x1265C90")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x1265CAC", Offset = "0x1265CAC", VA = "0x1265CAC")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x1265CC8", Offset = "0x1265CC8", VA = "0x1265CC8")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x1265CE4", Offset = "0x1265CE4", VA = "0x1265CE4")]
		public static extern bool ISteamGameServerUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x1265D7C", Offset = "0x1265D7C", VA = "0x1265D7C")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0x1265D98", Offset = "0x1265D98", VA = "0x1265D98")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x1265E30", Offset = "0x1265E30", VA = "0x1265E30")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x1265EC0", Offset = "0x1265EC0", VA = "0x1265EC0")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x1265F40", Offset = "0x1265F40", VA = "0x1265F40")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x1265FD0", Offset = "0x1265FD0", VA = "0x1265FD0")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x1266060", Offset = "0x1266060", VA = "0x1266060")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0x12660E0", Offset = "0x12660E0", VA = "0x12660E0")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x1266160", Offset = "0x1266160", VA = "0x1266160")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x12661D4", Offset = "0x12661D4", VA = "0x12661D4")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x126626C", Offset = "0x126626C", VA = "0x126626C")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x12662EC", Offset = "0x12662EC", VA = "0x12662EC")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x12663A4", Offset = "0x12663A4", VA = "0x12663A4")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1266444", Offset = "0x1266444", VA = "0x1266444")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x12664DC", Offset = "0x12664DC", VA = "0x12664DC")]
		public static extern bool ISteamGameServerUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x12664F8", Offset = "0x12664F8", VA = "0x12664F8")]
		public static extern void ISteamGameServerUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1266578", Offset = "0x1266578", VA = "0x1266578")]
		public static extern ulong ISteamGameServerUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x1266610", Offset = "0x1266610", VA = "0x1266610")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x12666A8", Offset = "0x12666A8", VA = "0x12666A8")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x126671C", Offset = "0x126671C", VA = "0x126671C")]
		public static extern ulong ISteamGameServerUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x12667AC", Offset = "0x12667AC", VA = "0x12667AC")]
		public static extern ulong ISteamGameServerUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x126683C", Offset = "0x126683C", VA = "0x126683C")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x12668B0", Offset = "0x12668B0", VA = "0x12668B0")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x1266924", Offset = "0x1266924", VA = "0x1266924")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x1266998", Offset = "0x1266998", VA = "0x1266998")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x1266A0C", Offset = "0x1266A0C", VA = "0x1266A0C")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x1266A80", Offset = "0x1266A80", VA = "0x1266A80")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x1266B20", Offset = "0x1266B20", VA = "0x1266B20")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x1266BC8", Offset = "0x1266BC8", VA = "0x1266BC8")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x1266C60", Offset = "0x1266C60", VA = "0x1266C60")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1266CD4", Offset = "0x1266CD4", VA = "0x1266CD4")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x1266D48", Offset = "0x1266D48", VA = "0x1266D48")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x1266DC8", Offset = "0x1266DC8", VA = "0x1266DC8")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x1266E74", Offset = "0x1266E74", VA = "0x1266E74")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x1266EF4", Offset = "0x1266EF4", VA = "0x1266EF4")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x1266FC0", Offset = "0x1266FC0", VA = "0x1266FC0")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x1267034", Offset = "0x1267034", VA = "0x1267034")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x12670B8", Offset = "0x12670B8", VA = "0x12670B8")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x1267134", Offset = "0x1267134", VA = "0x1267134")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x12671B0", Offset = "0x12671B0", VA = "0x12671B0")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x12671CC", Offset = "0x12671CC", VA = "0x12671CC")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x12671E8", Offset = "0x12671E8", VA = "0x12671E8")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x126725C", Offset = "0x126725C", VA = "0x126725C")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x12672F4", Offset = "0x12672F4", VA = "0x12672F4")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x1267368", Offset = "0x1267368", VA = "0x1267368")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x12673E4", Offset = "0x12673E4", VA = "0x12673E4")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x1267474", Offset = "0x1267474", VA = "0x1267474")]
		public static extern bool ISteamGameServerUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x12674F0", Offset = "0x12674F0", VA = "0x12674F0")]
		public static extern void ISteamGameServerUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1267560", Offset = "0x1267560", VA = "0x1267560")]
		public static extern bool ISteamGameServerUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x12675DC", Offset = "0x12675DC", VA = "0x12675DC")]
		public static extern void ISteamGameServerUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);
	}
	[Token(Token = "0x20000A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43604", Offset = "0xB43604")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x400051D")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43618", Offset = "0xB43618")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x400051F")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4362C", Offset = "0xB4362C")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x4000521")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43640", Offset = "0xB43640")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x4000523")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43654", Offset = "0xB43654")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x4000526")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43668", Offset = "0xB43668")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x4000527")]
		public const int k_iCallback = 1021;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_cchKeyLength;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchKey;
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4367C", Offset = "0xB4367C")]
	public struct FileDetailsResult_t
	{
		[Token(Token = "0x400052C")]
		public const int k_iCallback = 1023;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulFileSize;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] m_FileSHA;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unFlags;
	}
	[Token(Token = "0x20000A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43690", Offset = "0xB43690")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x4000531")]
		public const int k_iCallback = 304;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x20000AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB436A4", Offset = "0xB436A4")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x4000534")]
		public const int k_iCallback = 331;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB436B8", Offset = "0xB436B8")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x4000536")]
		public const int k_iCallback = 332;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x20000AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB436CC", Offset = "0xB436CC")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x4000539")]
		public const int k_iCallback = 333;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB436E0", Offset = "0xB436E0")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x400053C")]
		public const int k_iCallback = 334;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB436F4", Offset = "0xB436F4")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x4000541")]
		public const int k_iCallback = 335;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43708", Offset = "0xB43708")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x4000545")]
		public const int k_iCallback = 336;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4371C", Offset = "0xB4371C")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x4000548")]
		public const int k_iCallback = 337;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43730", Offset = "0xB43730")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x400054B")]
		public const int k_iCallback = 338;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43744", Offset = "0xB43744")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x400054F")]
		public const int k_iCallback = 339;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43758", Offset = "0xB43758")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x4000552")]
		public const int k_iCallback = 340;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4376C", Offset = "0xB4376C")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x4000557")]
		public const int k_iCallback = 341;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43780", Offset = "0xB43780")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x4000559")]
		public const int k_iCallback = 342;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43794", Offset = "0xB43794")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x400055C")]
		public const int k_iCallback = 343;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB437A8", Offset = "0xB437A8")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x400055F")]
		public const int k_iCallback = 344;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB437BC", Offset = "0xB437BC")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x4000563")]
		public const int k_iCallback = 345;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB437D0", Offset = "0xB437D0")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x4000567")]
		public const int k_iCallback = 346;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB437E4", Offset = "0xB437E4")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x400056C")]
		public const int k_iCallback = 347;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB437F8", Offset = "0xB437F8")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x4000570")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4380C", Offset = "0xB4380C")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x4000572")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43820", Offset = "0xB43820")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x4000573")]
		public const int k_iCallback = 201;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43834", Offset = "0xB43834")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x4000576")]
		public const int k_iCallback = 202;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43848", Offset = "0xB43848")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x400057A")]
		public const int k_iCallback = 203;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4385C", Offset = "0xB4385C")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x400057D")]
		public const int k_iCallback = 206;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43870", Offset = "0xB43870")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x4000581")]
		public const int k_iCallback = 115;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43884", Offset = "0xB43884")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x4000583")]
		public const int k_iCallback = 207;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43898", Offset = "0xB43898")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000588")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB438AC", Offset = "0xB438AC")]
	public struct GSReputation_t
	{
		[Token(Token = "0x400058D")]
		public const int k_iCallback = 209;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB438C0", Offset = "0xB438C0")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x4000595")]
		public const int k_iCallback = 210;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB438D4", Offset = "0xB438D4")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x4000597")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB438E8", Offset = "0xB438E8")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x400059D")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB438FC", Offset = "0xB438FC")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x40005A0")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43910", Offset = "0xB43910")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x40005A3")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43924", Offset = "0xB43924")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x40005A5")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43938", Offset = "0xB43938")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x40005A7")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pBGRA;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unWide;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unTall;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unUpdateX;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateY;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateWide;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateTall;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unScrollX;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollY;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float flPageScale;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint unPageSerial;
	}
	[Token(Token = "0x20000CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4394C", Offset = "0xB4394C")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x40005B4")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43960", Offset = "0xB43960")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x40005BA")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43974", Offset = "0xB43974")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x40005BC")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x20000CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43988", Offset = "0xB43988")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x40005C3")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4399C", Offset = "0xB4399C")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x40005C7")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB439B0", Offset = "0xB439B0")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x40005CA")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB439C4", Offset = "0xB439C4")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x40005CD")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB439D8", Offset = "0xB439D8")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x40005D1")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB439EC", Offset = "0xB439EC")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x40005D5")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A00", Offset = "0xB43A00")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x40005DC")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x20000D6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A14", Offset = "0xB43A14")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x40005E3")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A28", Offset = "0xB43A28")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x40005EA")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A3C", Offset = "0xB43A3C")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x40005ED")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A50", Offset = "0xB43A50")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x40005F0")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A64", Offset = "0xB43A64")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x40005F4")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A78", Offset = "0xB43A78")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x40005FC")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43A8C", Offset = "0xB43A8C")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x40005FF")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000DD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43AA0", Offset = "0xB43AA0")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x4000602")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000DE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43AB4", Offset = "0xB43AB4")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x4000605")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43AC8", Offset = "0xB43AC8")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x4000608")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43ADC", Offset = "0xB43ADC")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x400060A")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43AF0", Offset = "0xB43AF0")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x4000610")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B04", Offset = "0xB43B04")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x4000613")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cOffset;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B18", Offset = "0xB43B18")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x4000618")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B2C", Offset = "0xB43B2C")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x400061B")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x20000E5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B40", Offset = "0xB43B40")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x400061D")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x20000E6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B54", Offset = "0xB43B54")]
	public struct SteamInventoryEligiblePromoItemDefIDs_t
	{
		[Token(Token = "0x400061E")]
		public const int k_iCallback = 4703;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_result;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_numEligiblePromoItemDefs;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20000E7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B68", Offset = "0xB43B68")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x4000623")]
		public const int k_iCallback = 502;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x20000E8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B7C", Offset = "0xB43B7C")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x400062B")]
		public const int k_iCallback = 503;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x20000E9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43B90", Offset = "0xB43B90")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x400062F")]
		public const int k_iCallback = 504;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43BA4", Offset = "0xB43BA4")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x4000634")]
		public const int k_iCallback = 505;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43BB8", Offset = "0xB43BB8")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x4000638")]
		public const int k_iCallback = 506;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x20000EC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43BCC", Offset = "0xB43BCC")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x400063D")]
		public const int k_iCallback = 507;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43BE0", Offset = "0xB43BE0")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x4000642")]
		public const int k_iCallback = 509;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x20000EE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43BF4", Offset = "0xB43BF4")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x4000647")]
		public const int k_iCallback = 510;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x20000EF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C08", Offset = "0xB43C08")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x4000649")]
		public const int k_iCallback = 512;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x20000F0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C1C", Offset = "0xB43C1C")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x400064D")]
		public const int k_iCallback = 513;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x20000F1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C30", Offset = "0xB43C30")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x4000650")]
		public const int k_iCallback = 516;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C44", Offset = "0xB43C44")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x4000652")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C58", Offset = "0xB43C58")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x4000653")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C6C", Offset = "0xB43C6C")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x4000655")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C80", Offset = "0xB43C80")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x4000656")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x20000F6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43C94", Offset = "0xB43C94")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x4000657")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43CA8", Offset = "0xB43CA8")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x4000658")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43CBC", Offset = "0xB43CBC")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x4000659")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43CD0", Offset = "0xB43CD0")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x400065A")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43CE4", Offset = "0xB43CE4")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x400065B")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43CF8", Offset = "0xB43CF8")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x400065C")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x20000FC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D0C", Offset = "0xB43D0C")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x400065D")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D20", Offset = "0xB43D20")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x400065F")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D34", Offset = "0xB43D34")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x4000661")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D48", Offset = "0xB43D48")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x4000663")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D5C", Offset = "0xB43D5C")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x4000665")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D70", Offset = "0xB43D70")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x4000667")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D84", Offset = "0xB43D84")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x4000669")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43D98", Offset = "0xB43D98")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x400066B")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43DAC", Offset = "0xB43DAC")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x400066E")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43DC0", Offset = "0xB43DC0")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x4000673")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43DD4", Offset = "0xB43DD4")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x4000677")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43DE8", Offset = "0xB43DE8")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x400067B")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43DFC", Offset = "0xB43DFC")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000681")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E10", Offset = "0xB43E10")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x4000684")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E24", Offset = "0xB43E24")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x4000688")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E38", Offset = "0xB43E38")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x400068C")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E4C", Offset = "0xB43E4C")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x400068F")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E60", Offset = "0xB43E60")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000694")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200010E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E74", Offset = "0xB43E74")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x4000697")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E88", Offset = "0xB43E88")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x400069D")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000110")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43E9C", Offset = "0xB43E9C")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x40006A0")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43EB0", Offset = "0xB43EB0")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x40006A4")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x2000112")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43EC4", Offset = "0xB43EC4")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x40006AB")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x2000113")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43ED8", Offset = "0xB43ED8")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x40006C1")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43EEC", Offset = "0xB43EEC")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x40006C9")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nVotesFor;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesAgainst;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nReports;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_fScore;
	}
	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F00", Offset = "0xB43F00")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x40006D0")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F14", Offset = "0xB43F14")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x40006D3")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F28", Offset = "0xB43F28")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x40006D6")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F3C", Offset = "0xB43F3C")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x40006D9")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F50", Offset = "0xB43F50")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x40006DC")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x200011A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F64", Offset = "0xB43F64")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x40006E0")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F78", Offset = "0xB43F78")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x40006E5")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x200011C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43F8C", Offset = "0xB43F8C")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x40006E9")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43FA0", Offset = "0xB43FA0")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x40006F0")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x200011E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43FB4", Offset = "0xB43FB4")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x40006F3")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong m_ulUnused;
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43FC8", Offset = "0xB43FC8")]
	public struct RemoteStorageFileWriteAsyncComplete_t
	{
		[Token(Token = "0x40006F7")]
		public const int k_iCallback = 1331;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43FDC", Offset = "0xB43FDC")]
	public struct RemoteStorageFileReadAsyncComplete_t
	{
		[Token(Token = "0x40006F9")]
		public const int k_iCallback = 1332;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hFileReadAsync;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nOffset;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cubRead;
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB43FF0", Offset = "0xB43FF0")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x40006FE")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44004", Offset = "0xB44004")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x4000701")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44018", Offset = "0xB44018")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x4000702")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4402C", Offset = "0xB4402C")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x4000708")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000125")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44040", Offset = "0xB44040")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x400070B")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44054", Offset = "0xB44054")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x400070F")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44068", Offset = "0xB44068")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x4000712")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4407C", Offset = "0xB4407C")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x4000715")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44090", Offset = "0xB44090")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x4000719")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB440A4", Offset = "0xB440A4")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x400071D")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB440B8", Offset = "0xB440B8")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x4000721")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB440CC", Offset = "0xB440CC")]
	public struct StartPlaytimeTrackingResult_t
	{
		[Token(Token = "0x4000727")]
		public const int k_iCallback = 3410;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB440E0", Offset = "0xB440E0")]
	public struct StopPlaytimeTrackingResult_t
	{
		[Token(Token = "0x4000729")]
		public const int k_iCallback = 3411;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB440F4", Offset = "0xB440F4")]
	public struct AddUGCDependencyResult_t
	{
		[Token(Token = "0x400072B")]
		public const int k_iCallback = 3412;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44108", Offset = "0xB44108")]
	public struct RemoveUGCDependencyResult_t
	{
		[Token(Token = "0x400072F")]
		public const int k_iCallback = 3413;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x2000130")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4411C", Offset = "0xB4411C")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x4000733")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44130", Offset = "0xB44130")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x4000738")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44144", Offset = "0xB44144")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x4000739")]
		public const int k_iCallback = 102;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bStillRetrying;
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44158", Offset = "0xB44158")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x400073C")]
		public const int k_iCallback = 103;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4416C", Offset = "0xB4416C")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x400073E")]
		public const int k_iCallback = 113;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44180", Offset = "0xB44180")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x4000744")]
		public const int k_iCallback = 117;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44194", Offset = "0xB44194")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x4000746")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB441A8", Offset = "0xB441A8")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x4000747")]
		public const int k_iCallback = 143;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB441BC", Offset = "0xB441BC")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x400074B")]
		public const int k_iCallback = 152;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulOrderID;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB441D0", Offset = "0xB441D0")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x400074F")]
		public const int k_iCallback = 154;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB441E4", Offset = "0xB441E4")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x4000751")]
		public const int k_iCallback = 163;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB441F8", Offset = "0xB441F8")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x4000754")]
		public const int k_iCallback = 164;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4420C", Offset = "0xB4420C")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x4000756")]
		public const int k_iCallback = 165;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44220", Offset = "0xB44220")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x4000758")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44234", Offset = "0xB44234")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x400075C")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44248", Offset = "0xB44248")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x400075F")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4425C", Offset = "0xB4425C")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x4000765")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x2000141")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44270", Offset = "0xB44270")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x4000768")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44284", Offset = "0xB44284")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x400076C")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bScoreChanged;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44298", Offset = "0xB44298")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x4000773")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB442AC", Offset = "0xB442AC")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x4000776")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000145")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB442C0", Offset = "0xB442C0")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x4000778")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x2000146")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB442D4", Offset = "0xB442D4")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x400077D")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000147")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB442E8", Offset = "0xB442E8")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x4000780")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x2000148")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB442FC", Offset = "0xB442FC")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x4000783")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44310", Offset = "0xB44310")]
	public struct IPCountry_t
	{
		[Token(Token = "0x4000786")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x200014A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44324", Offset = "0xB44324")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x4000787")]
		public const int k_iCallback = 702;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x200014B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44338", Offset = "0xB44338")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x4000789")]
		public const int k_iCallback = 703;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iCallback;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cubParam;
	}
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4434C", Offset = "0xB4434C")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x400078D")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44360", Offset = "0xB44360")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x400078E")]
		public const int k_iCallback = 705;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x200014E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44374", Offset = "0xB44374")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000790")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB44388", Offset = "0xB44388")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x4000793")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x2000150")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB4439C", Offset = "0xB4439C")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x4000794")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x2000151")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB443B0", Offset = "0xB443B0")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x4000796")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x2000152")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xB443C4", Offset = "0xB443C4")]
	public struct GetOPFSettingsResult_t
	{
		[Token(Token = "0x400079A")]
		public const int k_iCallback = 4624;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;
	}
	[Token(Token = "0x2000153")]
	public static class Constants
	{
		[Token(Token = "0x400079D")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x400079E")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION008";

		[Token(Token = "0x400079F")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x40007A0")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x40007A1")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "SteamController005";

		[Token(Token = "0x40007A2")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x40007A3")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x40007A4")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x40007A5")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x40007A6")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x40007A7")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x40007A8")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V002";

		[Token(Token = "0x40007A9")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x40007AA")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x40007AB")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x40007AC")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x40007AD")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x40007AE")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION014";

		[Token(Token = "0x40007AF")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION003";

		[Token(Token = "0x40007B0")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION010";

		[Token(Token = "0x40007B1")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x40007B2")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser019";

		[Token(Token = "0x40007B3")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x40007B4")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils009";

		[Token(Token = "0x40007B5")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V002";

		[Token(Token = "0x40007B6")]
		public const int k_cubAppProofOfPurchaseKeyMax = 240;

		[Token(Token = "0x40007B7")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x40007B8")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x40007B9")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x40007BA")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x40007BB")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x40007BC")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x40007BD")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x40007BE")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x40007BF")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x40007C0")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x40007C1")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x40007C2")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x40007C3")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x40007C4")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x40007C5")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x40007C6")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x40007C7")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x40007C8")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x40007C9")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x40007CA")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x40007CB")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x40007CC")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x40007CD")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x40007CE")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x40007CF")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x40007D0")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x40007D1")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x40007D2")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x40007D3")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x40007D4")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x40007D5")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x40007D6")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x40007D7")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x40007D8")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x40007D9")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x40007DA")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x40007DB")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x40007DC")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x40007DD")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x40007DE")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x40007DF")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x40007E0")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x40007E1")]
		public const int k_iClientGameNotificationCallbacks = 4300;

		[Token(Token = "0x40007E2")]
		public const int k_iSteamGameNotificationCallbacks = 4400;

		[Token(Token = "0x40007E3")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x40007E4")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x40007E5")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x40007E6")]
		public const int k_iClientBluetoothManagerCallbacks = 4800;

		[Token(Token = "0x40007E7")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x40007E8")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x40007E9")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x40007EA")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x40007EB")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x40007EC")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x40007ED")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x40007EE")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x40007EF")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x40007F0")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x40007F1")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x40007F2")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x40007F3")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x40007F4")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x40007F5")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x40007F6")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x40007F7")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x40007F8")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x40007F9")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x40007FA")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x40007FB")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x40007FC")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x40007FD")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x40007FE")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x40007FF")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x4000800")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x4000801")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x4000802")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x4000803")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x4000804")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x4000805")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x4000806")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x4000807")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x4000808")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x4000809")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x400080A")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x400080B")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x400080C")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x400080D")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x400080E")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x400080F")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x4000810")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x4000811")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x4000812")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x4000813")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x4000814")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x4000815")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x4000816")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x4000817")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x4000818")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x4000819")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x400081A")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x400081B")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x400081C")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x400081D")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x400081E")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x400081F")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x4000820")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x4000821")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x4000822")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x4000823")]
		public const int STEAM_CONTROLLER_MAX_COUNT = 16;

		[Token(Token = "0x4000824")]
		public const int STEAM_CONTROLLER_MAX_ANALOG_ACTIONS = 16;

		[Token(Token = "0x4000825")]
		public const int STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS = 128;

		[Token(Token = "0x4000826")]
		public const int STEAM_CONTROLLER_MAX_ORIGINS = 8;

		[Token(Token = "0x4000827")]
		public const ulong STEAM_CONTROLLER_HANDLE_ALL_CONTROLLERS = ulong.MaxValue;

		[Token(Token = "0x4000828")]
		public const float STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA = -1f;

		[Token(Token = "0x4000829")]
		public const float STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA = 1f;

		[Token(Token = "0x400082A")]
		public const ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = ushort.MaxValue;

		[Token(Token = "0x400082B")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x400082C")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x400082D")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x400082E")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x400082F")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x4000830")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x2000154")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x4000832")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x4000833")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x4000834")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x4000835")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x4000836")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x2000155")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x4000838")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x4000839")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x2000156")]
	public enum EControllerSource
	{
		[Token(Token = "0x400083B")]
		k_EControllerSource_None,
		[Token(Token = "0x400083C")]
		k_EControllerSource_LeftTrackpad,
		[Token(Token = "0x400083D")]
		k_EControllerSource_RightTrackpad,
		[Token(Token = "0x400083E")]
		k_EControllerSource_Joystick,
		[Token(Token = "0x400083F")]
		k_EControllerSource_ABXY,
		[Token(Token = "0x4000840")]
		k_EControllerSource_Switch,
		[Token(Token = "0x4000841")]
		k_EControllerSource_LeftTrigger,
		[Token(Token = "0x4000842")]
		k_EControllerSource_RightTrigger,
		[Token(Token = "0x4000843")]
		k_EControllerSource_Gyro,
		[Token(Token = "0x4000844")]
		k_EControllerSource_CenterTrackpad,
		[Token(Token = "0x4000845")]
		k_EControllerSource_RightJoystick,
		[Token(Token = "0x4000846")]
		k_EControllerSource_DPad,
		[Token(Token = "0x4000847")]
		k_EControllerSource_Count
	}
	[Token(Token = "0x2000157")]
	public enum EControllerSourceMode
	{
		[Token(Token = "0x4000849")]
		k_EControllerSourceMode_None,
		[Token(Token = "0x400084A")]
		k_EControllerSourceMode_Dpad,
		[Token(Token = "0x400084B")]
		k_EControllerSourceMode_Buttons,
		[Token(Token = "0x400084C")]
		k_EControllerSourceMode_FourButtons,
		[Token(Token = "0x400084D")]
		k_EControllerSourceMode_AbsoluteMouse,
		[Token(Token = "0x400084E")]
		k_EControllerSourceMode_RelativeMouse,
		[Token(Token = "0x400084F")]
		k_EControllerSourceMode_JoystickMove,
		[Token(Token = "0x4000850")]
		k_EControllerSourceMode_JoystickMouse,
		[Token(Token = "0x4000851")]
		k_EControllerSourceMode_JoystickCamera,
		[Token(Token = "0x4000852")]
		k_EControllerSourceMode_ScrollWheel,
		[Token(Token = "0x4000853")]
		k_EControllerSourceMode_Trigger,
		[Token(Token = "0x4000854")]
		k_EControllerSourceMode_TouchMenu,
		[Token(Token = "0x4000855")]
		k_EControllerSourceMode_MouseJoystick,
		[Token(Token = "0x4000856")]
		k_EControllerSourceMode_MouseRegion,
		[Token(Token = "0x4000857")]
		k_EControllerSourceMode_RadialMenu,
		[Token(Token = "0x4000858")]
		k_EControllerSourceMode_SingleButton,
		[Token(Token = "0x4000859")]
		k_EControllerSourceMode_Switches
	}
	[Token(Token = "0x2000158")]
	public enum EControllerActionOrigin
	{
		[Token(Token = "0x400085B")]
		k_EControllerActionOrigin_None,
		[Token(Token = "0x400085C")]
		k_EControllerActionOrigin_A,
		[Token(Token = "0x400085D")]
		k_EControllerActionOrigin_B,
		[Token(Token = "0x400085E")]
		k_EControllerActionOrigin_X,
		[Token(Token = "0x400085F")]
		k_EControllerActionOrigin_Y,
		[Token(Token = "0x4000860")]
		k_EControllerActionOrigin_LeftBumper,
		[Token(Token = "0x4000861")]
		k_EControllerActionOrigin_RightBumper,
		[Token(Token = "0x4000862")]
		k_EControllerActionOrigin_LeftGrip,
		[Token(Token = "0x4000863")]
		k_EControllerActionOrigin_RightGrip,
		[Token(Token = "0x4000864")]
		k_EControllerActionOrigin_Start,
		[Token(Token = "0x4000865")]
		k_EControllerActionOrigin_Back,
		[Token(Token = "0x4000866")]
		k_EControllerActionOrigin_LeftPad_Touch,
		[Token(Token = "0x4000867")]
		k_EControllerActionOrigin_LeftPad_Swipe,
		[Token(Token = "0x4000868")]
		k_EControllerActionOrigin_LeftPad_Click,
		[Token(Token = "0x4000869")]
		k_EControllerActionOrigin_LeftPad_DPadNorth,
		[Token(Token = "0x400086A")]
		k_EControllerActionOrigin_LeftPad_DPadSouth,
		[Token(Token = "0x400086B")]
		k_EControllerActionOrigin_LeftPad_DPadWest,
		[Token(Token = "0x400086C")]
		k_EControllerActionOrigin_LeftPad_DPadEast,
		[Token(Token = "0x400086D")]
		k_EControllerActionOrigin_RightPad_Touch,
		[Token(Token = "0x400086E")]
		k_EControllerActionOrigin_RightPad_Swipe,
		[Token(Token = "0x400086F")]
		k_EControllerActionOrigin_RightPad_Click,
		[Token(Token = "0x4000870")]
		k_EControllerActionOrigin_RightPad_DPadNorth,
		[Token(Token = "0x4000871")]
		k_EControllerActionOrigin_RightPad_DPadSouth,
		[Token(Token = "0x4000872")]
		k_EControllerActionOrigin_RightPad_DPadWest,
		[Token(Token = "0x4000873")]
		k_EControllerActionOrigin_RightPad_DPadEast,
		[Token(Token = "0x4000874")]
		k_EControllerActionOrigin_LeftTrigger_Pull,
		[Token(Token = "0x4000875")]
		k_EControllerActionOrigin_LeftTrigger_Click,
		[Token(Token = "0x4000876")]
		k_EControllerActionOrigin_RightTrigger_Pull,
		[Token(Token = "0x4000877")]
		k_EControllerActionOrigin_RightTrigger_Click,
		[Token(Token = "0x4000878")]
		k_EControllerActionOrigin_LeftStick_Move,
		[Token(Token = "0x4000879")]
		k_EControllerActionOrigin_LeftStick_Click,
		[Token(Token = "0x400087A")]
		k_EControllerActionOrigin_LeftStick_DPadNorth,
		[Token(Token = "0x400087B")]
		k_EControllerActionOrigin_LeftStick_DPadSouth,
		[Token(Token = "0x400087C")]
		k_EControllerActionOrigin_LeftStick_DPadWest,
		[Token(Token = "0x400087D")]
		k_EControllerActionOrigin_LeftStick_DPadEast,
		[Token(Token = "0x400087E")]
		k_EControllerActionOrigin_Gyro_Move,
		[Token(Token = "0x400087F")]
		k_EControllerActionOrigin_Gyro_Pitch,
		[Token(Token = "0x4000880")]
		k_EControllerActionOrigin_Gyro_Yaw,
		[Token(Token = "0x4000881")]
		k_EControllerActionOrigin_Gyro_Roll,
		[Token(Token = "0x4000882")]
		k_EControllerActionOrigin_PS4_X,
		[Token(Token = "0x4000883")]
		k_EControllerActionOrigin_PS4_Circle,
		[Token(Token = "0x4000884")]
		k_EControllerActionOrigin_PS4_Triangle,
		[Token(Token = "0x4000885")]
		k_EControllerActionOrigin_PS4_Square,
		[Token(Token = "0x4000886")]
		k_EControllerActionOrigin_PS4_LeftBumper,
		[Token(Token = "0x4000887")]
		k_EControllerActionOrigin_PS4_RightBumper,
		[Token(Token = "0x4000888")]
		k_EControllerActionOrigin_PS4_Options,
		[Token(Token = "0x4000889")]
		k_EControllerActionOrigin_PS4_Share,
		[Token(Token = "0x400088A")]
		k_EControllerActionOrigin_PS4_LeftPad_Touch,
		[Token(Token = "0x400088B")]
		k_EControllerActionOrigin_PS4_LeftPad_Swipe,
		[Token(Token = "0x400088C")]
		k_EControllerActionOrigin_PS4_LeftPad_Click,
		[Token(Token = "0x400088D")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadNorth,
		[Token(Token = "0x400088E")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadSouth,
		[Token(Token = "0x400088F")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadWest,
		[Token(Token = "0x4000890")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadEast,
		[Token(Token = "0x4000891")]
		k_EControllerActionOrigin_PS4_RightPad_Touch,
		[Token(Token = "0x4000892")]
		k_EControllerActionOrigin_PS4_RightPad_Swipe,
		[Token(Token = "0x4000893")]
		k_EControllerActionOrigin_PS4_RightPad_Click,
		[Token(Token = "0x4000894")]
		k_EControllerActionOrigin_PS4_RightPad_DPadNorth,
		[Token(Token = "0x4000895")]
		k_EControllerActionOrigin_PS4_RightPad_DPadSouth,
		[Token(Token = "0x4000896")]
		k_EControllerActionOrigin_PS4_RightPad_DPadWest,
		[Token(Token = "0x4000897")]
		k_EControllerActionOrigin_PS4_RightPad_DPadEast,
		[Token(Token = "0x4000898")]
		k_EControllerActionOrigin_PS4_CenterPad_Touch,
		[Token(Token = "0x4000899")]
		k_EControllerActionOrigin_PS4_CenterPad_Swipe,
		[Token(Token = "0x400089A")]
		k_EControllerActionOrigin_PS4_CenterPad_Click,
		[Token(Token = "0x400089B")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadNorth,
		[Token(Token = "0x400089C")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadSouth,
		[Token(Token = "0x400089D")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadWest,
		[Token(Token = "0x400089E")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadEast,
		[Token(Token = "0x400089F")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Pull,
		[Token(Token = "0x40008A0")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Click,
		[Token(Token = "0x40008A1")]
		k_EControllerActionOrigin_PS4_RightTrigger_Pull,
		[Token(Token = "0x40008A2")]
		k_EControllerActionOrigin_PS4_RightTrigger_Click,
		[Token(Token = "0x40008A3")]
		k_EControllerActionOrigin_PS4_LeftStick_Move,
		[Token(Token = "0x40008A4")]
		k_EControllerActionOrigin_PS4_LeftStick_Click,
		[Token(Token = "0x40008A5")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadNorth,
		[Token(Token = "0x40008A6")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadSouth,
		[Token(Token = "0x40008A7")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadWest,
		[Token(Token = "0x40008A8")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadEast,
		[Token(Token = "0x40008A9")]
		k_EControllerActionOrigin_PS4_RightStick_Move,
		[Token(Token = "0x40008AA")]
		k_EControllerActionOrigin_PS4_RightStick_Click,
		[Token(Token = "0x40008AB")]
		k_EControllerActionOrigin_PS4_RightStick_DPadNorth,
		[Token(Token = "0x40008AC")]
		k_EControllerActionOrigin_PS4_RightStick_DPadSouth,
		[Token(Token = "0x40008AD")]
		k_EControllerActionOrigin_PS4_RightStick_DPadWest,
		[Token(Token = "0x40008AE")]
		k_EControllerActionOrigin_PS4_RightStick_DPadEast,
		[Token(Token = "0x40008AF")]
		k_EControllerActionOrigin_PS4_DPad_North,
		[Token(Token = "0x40008B0")]
		k_EControllerActionOrigin_PS4_DPad_South,
		[Token(Token = "0x40008B1")]
		k_EControllerActionOrigin_PS4_DPad_West,
		[Token(Token = "0x40008B2")]
		k_EControllerActionOrigin_PS4_DPad_East,
		[Token(Token = "0x40008B3")]
		k_EControllerActionOrigin_PS4_Gyro_Move,
		[Token(Token = "0x40008B4")]
		k_EControllerActionOrigin_PS4_Gyro_Pitch,
		[Token(Token = "0x40008B5")]
		k_EControllerActionOrigin_PS4_Gyro_Yaw,
		[Token(Token = "0x40008B6")]
		k_EControllerActionOrigin_PS4_Gyro_Roll,
		[Token(Token = "0x40008B7")]
		k_EControllerActionOrigin_XBoxOne_A,
		[Token(Token = "0x40008B8")]
		k_EControllerActionOrigin_XBoxOne_B,
		[Token(Token = "0x40008B9")]
		k_EControllerActionOrigin_XBoxOne_X,
		[Token(Token = "0x40008BA")]
		k_EControllerActionOrigin_XBoxOne_Y,
		[Token(Token = "0x40008BB")]
		k_EControllerActionOrigin_XBoxOne_LeftBumper,
		[Token(Token = "0x40008BC")]
		k_EControllerActionOrigin_XBoxOne_RightBumper,
		[Token(Token = "0x40008BD")]
		k_EControllerActionOrigin_XBoxOne_Menu,
		[Token(Token = "0x40008BE")]
		k_EControllerActionOrigin_XBoxOne_View,
		[Token(Token = "0x40008BF")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull,
		[Token(Token = "0x40008C0")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click,
		[Token(Token = "0x40008C1")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull,
		[Token(Token = "0x40008C2")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Click,
		[Token(Token = "0x40008C3")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Move,
		[Token(Token = "0x40008C4")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Click,
		[Token(Token = "0x40008C5")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth,
		[Token(Token = "0x40008C6")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth,
		[Token(Token = "0x40008C7")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest,
		[Token(Token = "0x40008C8")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast,
		[Token(Token = "0x40008C9")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Move,
		[Token(Token = "0x40008CA")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Click,
		[Token(Token = "0x40008CB")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth,
		[Token(Token = "0x40008CC")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth,
		[Token(Token = "0x40008CD")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest,
		[Token(Token = "0x40008CE")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast,
		[Token(Token = "0x40008CF")]
		k_EControllerActionOrigin_XBoxOne_DPad_North,
		[Token(Token = "0x40008D0")]
		k_EControllerActionOrigin_XBoxOne_DPad_South,
		[Token(Token = "0x40008D1")]
		k_EControllerActionOrigin_XBoxOne_DPad_West,
		[Token(Token = "0x40008D2")]
		k_EControllerActionOrigin_XBoxOne_DPad_East,
		[Token(Token = "0x40008D3")]
		k_EControllerActionOrigin_XBox360_A,
		[Token(Token = "0x40008D4")]
		k_EControllerActionOrigin_XBox360_B,
		[Token(Token = "0x40008D5")]
		k_EControllerActionOrigin_XBox360_X,
		[Token(Token = "0x40008D6")]
		k_EControllerActionOrigin_XBox360_Y,
		[Token(Token = "0x40008D7")]
		k_EControllerActionOrigin_XBox360_LeftBumper,
		[Token(Token = "0x40008D8")]
		k_EControllerActionOrigin_XBox360_RightBumper,
		[Token(Token = "0x40008D9")]
		k_EControllerActionOrigin_XBox360_Start,
		[Token(Token = "0x40008DA")]
		k_EControllerActionOrigin_XBox360_Back,
		[Token(Token = "0x40008DB")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Pull,
		[Token(Token = "0x40008DC")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Click,
		[Token(Token = "0x40008DD")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Pull,
		[Token(Token = "0x40008DE")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Click,
		[Token(Token = "0x40008DF")]
		k_EControllerActionOrigin_XBox360_LeftStick_Move,
		[Token(Token = "0x40008E0")]
		k_EControllerActionOrigin_XBox360_LeftStick_Click,
		[Token(Token = "0x40008E1")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth,
		[Token(Token = "0x40008E2")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth,
		[Token(Token = "0x40008E3")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadWest,
		[Token(Token = "0x40008E4")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadEast,
		[Token(Token = "0x40008E5")]
		k_EControllerActionOrigin_XBox360_RightStick_Move,
		[Token(Token = "0x40008E6")]
		k_EControllerActionOrigin_XBox360_RightStick_Click,
		[Token(Token = "0x40008E7")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadNorth,
		[Token(Token = "0x40008E8")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadSouth,
		[Token(Token = "0x40008E9")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadWest,
		[Token(Token = "0x40008EA")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadEast,
		[Token(Token = "0x40008EB")]
		k_EControllerActionOrigin_XBox360_DPad_North,
		[Token(Token = "0x40008EC")]
		k_EControllerActionOrigin_XBox360_DPad_South,
		[Token(Token = "0x40008ED")]
		k_EControllerActionOrigin_XBox360_DPad_West,
		[Token(Token = "0x40008EE")]
		k_EControllerActionOrigin_XBox360_DPad_East,
		[Token(Token = "0x40008EF")]
		k_EControllerActionOrigin_SteamV2_A,
		[Token(Token = "0x40008F0")]
		k_EControllerActionOrigin_SteamV2_B,
		[Token(Token = "0x40008F1")]
		k_EControllerActionOrigin_SteamV2_X,
		[Token(Token = "0x40008F2")]
		k_EControllerActionOrigin_SteamV2_Y,
		[Token(Token = "0x40008F3")]
		k_EControllerActionOrigin_SteamV2_LeftBumper,
		[Token(Token = "0x40008F4")]
		k_EControllerActionOrigin_SteamV2_RightBumper,
		[Token(Token = "0x40008F5")]
		k_EControllerActionOrigin_SteamV2_LeftGrip,
		[Token(Token = "0x40008F6")]
		k_EControllerActionOrigin_SteamV2_RightGrip,
		[Token(Token = "0x40008F7")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper,
		[Token(Token = "0x40008F8")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper,
		[Token(Token = "0x40008F9")]
		k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure,
		[Token(Token = "0x40008FA")]
		k_EControllerActionOrigin_SteamV2_RightBumper_Pressure,
		[Token(Token = "0x40008FB")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure,
		[Token(Token = "0x40008FC")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Pressure,
		[Token(Token = "0x40008FD")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure,
		[Token(Token = "0x40008FE")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure,
		[Token(Token = "0x40008FF")]
		k_EControllerActionOrigin_SteamV2_Start,
		[Token(Token = "0x4000900")]
		k_EControllerActionOrigin_SteamV2_Back,
		[Token(Token = "0x4000901")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Touch,
		[Token(Token = "0x4000902")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Swipe,
		[Token(Token = "0x4000903")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Click,
		[Token(Token = "0x4000904")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Pressure,
		[Token(Token = "0x4000905")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth,
		[Token(Token = "0x4000906")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth,
		[Token(Token = "0x4000907")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest,
		[Token(Token = "0x4000908")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast,
		[Token(Token = "0x4000909")]
		k_EControllerActionOrigin_SteamV2_RightPad_Touch,
		[Token(Token = "0x400090A")]
		k_EControllerActionOrigin_SteamV2_RightPad_Swipe,
		[Token(Token = "0x400090B")]
		k_EControllerActionOrigin_SteamV2_RightPad_Click,
		[Token(Token = "0x400090C")]
		k_EControllerActionOrigin_SteamV2_RightPad_Pressure,
		[Token(Token = "0x400090D")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth,
		[Token(Token = "0x400090E")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth,
		[Token(Token = "0x400090F")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadWest,
		[Token(Token = "0x4000910")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadEast,
		[Token(Token = "0x4000911")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull,
		[Token(Token = "0x4000912")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Click,
		[Token(Token = "0x4000913")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Pull,
		[Token(Token = "0x4000914")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Click,
		[Token(Token = "0x4000915")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Move,
		[Token(Token = "0x4000916")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Click,
		[Token(Token = "0x4000917")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth,
		[Token(Token = "0x4000918")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth,
		[Token(Token = "0x4000919")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest,
		[Token(Token = "0x400091A")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast,
		[Token(Token = "0x400091B")]
		k_EControllerActionOrigin_SteamV2_Gyro_Move,
		[Token(Token = "0x400091C")]
		k_EControllerActionOrigin_SteamV2_Gyro_Pitch,
		[Token(Token = "0x400091D")]
		k_EControllerActionOrigin_SteamV2_Gyro_Yaw,
		[Token(Token = "0x400091E")]
		k_EControllerActionOrigin_SteamV2_Gyro_Roll,
		[Token(Token = "0x400091F")]
		k_EControllerActionOrigin_Count
	}
	[Token(Token = "0x2000159")]
	public enum ESteamControllerLEDFlag
	{
		[Token(Token = "0x4000921")]
		k_ESteamControllerLEDFlag_SetColor,
		[Token(Token = "0x4000922")]
		k_ESteamControllerLEDFlag_RestoreUserDefault
	}
	[Token(Token = "0x200015A")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x4000924")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x4000925")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x4000926")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x4000927")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x4000928")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x4000929")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x400092A")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x400092B")]
		k_EFriendRelationshipSuggested_DEPRECATED,
		[Token(Token = "0x400092C")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x200015B")]
	public enum EPersonaState
	{
		[Token(Token = "0x400092E")]
		k_EPersonaStateOffline,
		[Token(Token = "0x400092F")]
		k_EPersonaStateOnline,
		[Token(Token = "0x4000930")]
		k_EPersonaStateBusy,
		[Token(Token = "0x4000931")]
		k_EPersonaStateAway,
		[Token(Token = "0x4000932")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x4000933")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x4000934")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x4000935")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x200015C")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x4000937")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x4000938")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x4000939")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x400093A")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x400093B")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x400093C")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x400093D")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x400093E")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x400093F")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x4000940")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x4000941")]
		k_EFriendFlagChatMember = 0x1000,
		[Token(Token = "0x4000942")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x200015D")]
	public enum EUserRestriction
	{
		[Token(Token = "0x4000944")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x4000945")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x4000946")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x4000947")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x4000948")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x4000949")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x400094A")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x400094B")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x200015E")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x400094D")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x400094E")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x400094F")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x200015F")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x4000951")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x4000952")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x4000953")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x4000954")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x4000955")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x4000956")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x4000957")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x4000958")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x4000959")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x400095A")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x400095B")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x400095C")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x400095D")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x400095E")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x2000160")]
	public enum EGCResults
	{
		[Token(Token = "0x4000960")]
		k_EGCResultOK,
		[Token(Token = "0x4000961")]
		k_EGCResultNoMessage,
		[Token(Token = "0x4000962")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x4000963")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x4000964")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x2000161")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x4000966")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x4000967")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x4000968")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x2000162")]
	public enum EMouseCursor
	{
		[Token(Token = "0x400096A")]
		dc_user,
		[Token(Token = "0x400096B")]
		dc_none,
		[Token(Token = "0x400096C")]
		dc_arrow,
		[Token(Token = "0x400096D")]
		dc_ibeam,
		[Token(Token = "0x400096E")]
		dc_hourglass,
		[Token(Token = "0x400096F")]
		dc_waitarrow,
		[Token(Token = "0x4000970")]
		dc_crosshair,
		[Token(Token = "0x4000971")]
		dc_up,
		[Token(Token = "0x4000972")]
		dc_sizenw,
		[Token(Token = "0x4000973")]
		dc_sizese,
		[Token(Token = "0x4000974")]
		dc_sizene,
		[Token(Token = "0x4000975")]
		dc_sizesw,
		[Token(Token = "0x4000976")]
		dc_sizew,
		[Token(Token = "0x4000977")]
		dc_sizee,
		[Token(Token = "0x4000978")]
		dc_sizen,
		[Token(Token = "0x4000979")]
		dc_sizes,
		[Token(Token = "0x400097A")]
		dc_sizewe,
		[Token(Token = "0x400097B")]
		dc_sizens,
		[Token(Token = "0x400097C")]
		dc_sizeall,
		[Token(Token = "0x400097D")]
		dc_no,
		[Token(Token = "0x400097E")]
		dc_hand,
		[Token(Token = "0x400097F")]
		dc_blank,
		[Token(Token = "0x4000980")]
		dc_middle_pan,
		[Token(Token = "0x4000981")]
		dc_north_pan,
		[Token(Token = "0x4000982")]
		dc_north_east_pan,
		[Token(Token = "0x4000983")]
		dc_east_pan,
		[Token(Token = "0x4000984")]
		dc_south_east_pan,
		[Token(Token = "0x4000985")]
		dc_south_pan,
		[Token(Token = "0x4000986")]
		dc_south_west_pan,
		[Token(Token = "0x4000987")]
		dc_west_pan,
		[Token(Token = "0x4000988")]
		dc_north_west_pan,
		[Token(Token = "0x4000989")]
		dc_alias,
		[Token(Token = "0x400098A")]
		dc_cell,
		[Token(Token = "0x400098B")]
		dc_colresize,
		[Token(Token = "0x400098C")]
		dc_copycur,
		[Token(Token = "0x400098D")]
		dc_verticaltext,
		[Token(Token = "0x400098E")]
		dc_rowresize,
		[Token(Token = "0x400098F")]
		dc_zoomin,
		[Token(Token = "0x4000990")]
		dc_zoomout,
		[Token(Token = "0x4000991")]
		dc_help,
		[Token(Token = "0x4000992")]
		dc_custom,
		[Token(Token = "0x4000993")]
		dc_last
	}
	[Token(Token = "0x2000163")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x4000995")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x4000996")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x4000997")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x4000998")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x2000164")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x400099A")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x400099B")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x400099C")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x2000165")]
	public enum ELobbyType
	{
		[Token(Token = "0x400099E")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x400099F")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x40009A0")]
		k_ELobbyTypePublic,
		[Token(Token = "0x40009A1")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x2000166")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x40009A3")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x40009A4")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x40009A5")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x40009A6")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x40009A7")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x40009A8")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x2000167")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x40009AA")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x40009AB")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x40009AC")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x40009AD")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x2000168")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x40009AF")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x40009B0")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x40009B1")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x40009B2")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x40009B3")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x2000169")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x40009B5")]
		AudioPlayback_Undefined,
		[Token(Token = "0x40009B6")]
		AudioPlayback_Playing,
		[Token(Token = "0x40009B7")]
		AudioPlayback_Paused,
		[Token(Token = "0x40009B8")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x200016A")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x40009BA")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x40009BB")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x40009BC")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x40009BD")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x40009BE")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x40009BF")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x200016B")]
	public enum EP2PSend
	{
		[Token(Token = "0x40009C1")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x40009C2")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x40009C3")]
		k_EP2PSendReliable,
		[Token(Token = "0x40009C4")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x200016C")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x40009C6")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x40009C7")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x40009C8")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x40009C9")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x40009CA")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x40009CB")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x40009CC")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x40009CD")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x40009CE")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x40009CF")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x40009D0")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x200016D")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x40009D2")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x40009D3")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x40009D4")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x200016E")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x40009D6")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x40009D7")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x40009D8")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x40009D9")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x40009DA")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x40009DB")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x40009DC")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x200016F")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x40009DE")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x40009DF")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x40009E0")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x2000170")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x40009E2")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x40009E3")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x40009E4")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x40009E5")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x40009E6")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x40009E7")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x40009E8")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x40009E9")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x40009EA")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x40009EB")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x40009EC")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x40009ED")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x40009EE")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x40009EF")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x40009F0")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x40009F1")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x40009F2")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x40009F3")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x2000171")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x40009F5")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x40009F6")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x40009F7")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x40009F8")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x2000172")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x40009FA")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x40009FB")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x2000173")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x40009FD")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x40009FE")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x40009FF")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x4000A00")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x4000A01")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x4000A02")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x4000A03")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x2000174")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x4000A05")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x4000A06")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x2000175")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x4000A08")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x4000A09")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x4000A0A")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x2000176")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4000A0C")]
		k_EVRScreenshotType_None,
		[Token(Token = "0x4000A0D")]
		k_EVRScreenshotType_Mono,
		[Token(Token = "0x4000A0E")]
		k_EVRScreenshotType_Stereo,
		[Token(Token = "0x4000A0F")]
		k_EVRScreenshotType_MonoCubemap,
		[Token(Token = "0x4000A10")]
		k_EVRScreenshotType_MonoPanorama,
		[Token(Token = "0x4000A11")]
		k_EVRScreenshotType_StereoPanorama
	}
	[Token(Token = "0x2000177")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x4000A13")]
		k_EUGCMatchingUGCType_Items = 0,
		[Token(Token = "0x4000A14")]
		k_EUGCMatchingUGCType_Items_Mtx = 1,
		[Token(Token = "0x4000A15")]
		k_EUGCMatchingUGCType_Items_ReadyToUse = 2,
		[Token(Token = "0x4000A16")]
		k_EUGCMatchingUGCType_Collections = 3,
		[Token(Token = "0x4000A17")]
		k_EUGCMatchingUGCType_Artwork = 4,
		[Token(Token = "0x4000A18")]
		k_EUGCMatchingUGCType_Videos = 5,
		[Token(Token = "0x4000A19")]
		k_EUGCMatchingUGCType_Screenshots = 6,
		[Token(Token = "0x4000A1A")]
		k_EUGCMatchingUGCType_AllGuides = 7,
		[Token(Token = "0x4000A1B")]
		k_EUGCMatchingUGCType_WebGuides = 8,
		[Token(Token = "0x4000A1C")]
		k_EUGCMatchingUGCType_IntegratedGuides = 9,
		[Token(Token = "0x4000A1D")]
		k_EUGCMatchingUGCType_UsableInGame = 10,
		[Token(Token = "0x4000A1E")]
		k_EUGCMatchingUGCType_ControllerBindings = 11,
		[Token(Token = "0x4000A1F")]
		k_EUGCMatchingUGCType_GameManagedItems = 12,
		[Token(Token = "0x4000A20")]
		k_EUGCMatchingUGCType_All = -1
	}
	[Token(Token = "0x2000178")]
	public enum EUserUGCList
	{
		[Token(Token = "0x4000A22")]
		k_EUserUGCList_Published,
		[Token(Token = "0x4000A23")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x4000A24")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x4000A25")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x4000A26")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x4000A27")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x4000A28")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x4000A29")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x4000A2A")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x2000179")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x4000A2C")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x4000A2D")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x4000A2E")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x4000A2F")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x4000A30")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x4000A31")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x4000A32")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x200017A")]
	public enum EUGCQuery
	{
		[Token(Token = "0x4000A34")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4000A35")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4000A36")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4000A37")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4000A38")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000A39")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000A3A")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4000A3B")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x4000A3C")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x4000A3D")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x4000A3E")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x4000A3F")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x4000A40")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions,
		[Token(Token = "0x4000A41")]
		k_EUGCQuery_RankedByPlaytimeTrend,
		[Token(Token = "0x4000A42")]
		k_EUGCQuery_RankedByTotalPlaytime,
		[Token(Token = "0x4000A43")]
		k_EUGCQuery_RankedByAveragePlaytimeTrend,
		[Token(Token = "0x4000A44")]
		k_EUGCQuery_RankedByLifetimeAveragePlaytime,
		[Token(Token = "0x4000A45")]
		k_EUGCQuery_RankedByPlaytimeSessionsTrend,
		[Token(Token = "0x4000A46")]
		k_EUGCQuery_RankedByLifetimePlaytimeSessions
	}
	[Token(Token = "0x200017B")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x4000A48")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x4000A49")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x4000A4A")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x4000A4B")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4000A4C")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x4000A4D")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x200017C")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x4000A4F")]
		k_EItemStateNone = 0,
		[Token(Token = "0x4000A50")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x4000A51")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x4000A52")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x4000A53")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x4000A54")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x4000A55")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x200017D")]
	public enum EItemStatistic
	{
		[Token(Token = "0x4000A57")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x4000A58")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x4000A59")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x4000A5A")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x4000A5B")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x4000A5C")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x4000A5D")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x4000A5E")]
		k_EItemStatistic_ReportScore,
		[Token(Token = "0x4000A5F")]
		k_EItemStatistic_NumSecondsPlayed,
		[Token(Token = "0x4000A60")]
		k_EItemStatistic_NumPlaytimeSessions,
		[Token(Token = "0x4000A61")]
		k_EItemStatistic_NumComments,
		[Token(Token = "0x4000A62")]
		k_EItemStatistic_NumSecondsPlayedDuringTimePeriod,
		[Token(Token = "0x4000A63")]
		k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod
	}
	[Token(Token = "0x200017E")]
	public enum EItemPreviewType
	{
		[Token(Token = "0x4000A65")]
		k_EItemPreviewType_Image = 0,
		[Token(Token = "0x4000A66")]
		k_EItemPreviewType_YouTubeVideo = 1,
		[Token(Token = "0x4000A67")]
		k_EItemPreviewType_Sketchfab = 2,
		[Token(Token = "0x4000A68")]
		k_EItemPreviewType_EnvironmentMap_HorizontalCross = 3,
		[Token(Token = "0x4000A69")]
		k_EItemPreviewType_EnvironmentMap_LatLong = 4,
		[Token(Token = "0x4000A6A")]
		k_EItemPreviewType_ReservedMax = 255
	}
	[Token(Token = "0x200017F")]
	public enum EFailureType
	{
		[Token(Token = "0x4000A6C")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x4000A6D")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x2000180")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x4000A6F")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x4000A70")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x4000A71")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x4000A72")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x2000181")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4000A74")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x4000A75")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x4000A76")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x2000182")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x4000A78")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x4000A79")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x4000A7A")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x4000A7B")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000183")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x4000A7D")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x4000A7E")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x4000A7F")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000184")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x4000A81")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x4000A82")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4000A83")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000A84")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000A85")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000185")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000A87")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000A88")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000186")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4000A8A")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4000A8B")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000187")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x4000A8D")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x4000A8E")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x4000A8F")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x4000A90")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x4000A91")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x2000188")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4000A93")]
		eServerResponded,
		[Token(Token = "0x4000A94")]
		eServerFailedToRespond,
		[Token(Token = "0x4000A95")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x2000189")]
	public enum EServerMode
	{
		[Token(Token = "0x4000A97")]
		eServerModeInvalid,
		[Token(Token = "0x4000A98")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000A99")]
		eServerModeAuthentication,
		[Token(Token = "0x4000A9A")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x200018A")]
	public enum EResult
	{
		[Token(Token = "0x4000A9C")]
		k_EResultOK = 1,
		[Token(Token = "0x4000A9D")]
		k_EResultFail = 2,
		[Token(Token = "0x4000A9E")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x4000A9F")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x4000AA0")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x4000AA1")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x4000AA2")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4000AA3")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000AA4")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000AA5")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000AA6")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000AA7")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000AA8")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000AA9")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x4000AAA")]
		k_EResultTimeout = 16,
		[Token(Token = "0x4000AAB")]
		k_EResultBanned = 17,
		[Token(Token = "0x4000AAC")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x4000AAD")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x4000AAE")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x4000AAF")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x4000AB0")]
		k_EResultPending = 22,
		[Token(Token = "0x4000AB1")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x4000AB2")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4000AB3")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000AB4")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000AB5")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000AB6")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000AB7")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000AB8")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000AB9")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4000ABA")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x4000ABB")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x4000ABC")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x4000ABD")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x4000ABE")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x4000ABF")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x4000AC0")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x4000AC1")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x4000AC2")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4000AC3")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4000AC4")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000AC5")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000AC6")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000AC7")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000AC8")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000AC9")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x4000ACA")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x4000ACB")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x4000ACC")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x4000ACD")]
		k_EResultSuspended = 51,
		[Token(Token = "0x4000ACE")]
		k_EResultCancelled = 52,
		[Token(Token = "0x4000ACF")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x4000AD0")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x4000AD1")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x4000AD2")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x4000AD3")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x4000AD4")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4000AD5")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4000AD6")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4000AD7")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4000AD8")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4000AD9")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x4000ADA")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x4000ADB")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x4000ADC")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x4000ADD")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x4000ADE")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x4000ADF")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x4000AE0")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x4000AE1")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x4000AE2")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x4000AE3")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x4000AE4")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4000AE5")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4000AE6")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4000AE7")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4000AE8")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4000AE9")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x4000AEA")]
		k_EResultDisabled = 80,
		[Token(Token = "0x4000AEB")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x4000AEC")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x4000AED")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x4000AEE")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x4000AEF")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x4000AF0")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x4000AF1")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x4000AF2")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x4000AF3")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x4000AF4")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x4000AF5")]
		k_EResultNotModified = 91,
		[Token(Token = "0x4000AF6")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x4000AF7")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x4000AF8")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x4000AF9")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x4000AFA")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x4000AFB")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x4000AFC")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x4000AFD")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x4000AFE")]
		k_EResultNotSettled = 100,
		[Token(Token = "0x4000AFF")]
		k_EResultNeedCaptcha = 101,
		[Token(Token = "0x4000B00")]
		k_EResultGSLTDenied = 102,
		[Token(Token = "0x4000B01")]
		k_EResultGSOwnerDenied = 103,
		[Token(Token = "0x4000B02")]
		k_EResultInvalidItemType = 104,
		[Token(Token = "0x4000B03")]
		k_EResultIPBanned = 105,
		[Token(Token = "0x4000B04")]
		k_EResultGSLTExpired = 106,
		[Token(Token = "0x4000B05")]
		k_EResultInsufficientFunds = 107,
		[Token(Token = "0x4000B06")]
		k_EResultTooManyPending = 108
	}
	[Token(Token = "0x200018B")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4000B08")]
		k_EVoiceResultOK,
		[Token(Token = "0x4000B09")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4000B0A")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4000B0B")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4000B0C")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4000B0D")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x4000B0E")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x4000B0F")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x4000B10")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x4000B11")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x200018C")]
	public enum EDenyReason
	{
		[Token(Token = "0x4000B13")]
		k_EDenyInvalid,
		[Token(Token = "0x4000B14")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x4000B15")]
		k_EDenyGeneric,
		[Token(Token = "0x4000B16")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x4000B17")]
		k_EDenyNoLicense,
		[Token(Token = "0x4000B18")]
		k_EDenyCheater,
		[Token(Token = "0x4000B19")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x4000B1A")]
		k_EDenyUnknownText,
		[Token(Token = "0x4000B1B")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x4000B1C")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x4000B1D")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x4000B1E")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x4000B1F")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x4000B20")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x4000B21")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x4000B22")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x200018D")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x4000B24")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x4000B25")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x4000B26")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x4000B27")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x4000B28")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x4000B29")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x200018E")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x4000B2B")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x4000B2C")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x4000B2D")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x4000B2E")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x4000B2F")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x4000B30")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x4000B31")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x4000B32")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x4000B33")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x4000B34")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x200018F")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x4000B36")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x4000B37")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x4000B38")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x2000190")]
	public enum EAccountType
	{
		[Token(Token = "0x4000B3A")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x4000B3B")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x4000B3C")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x4000B3D")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x4000B3E")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x4000B3F")]
		k_EAccountTypePending,
		[Token(Token = "0x4000B40")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x4000B41")]
		k_EAccountTypeClan,
		[Token(Token = "0x4000B42")]
		k_EAccountTypeChat,
		[Token(Token = "0x4000B43")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x4000B44")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x4000B45")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x2000191")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x4000B47")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x4000B48")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x4000B49")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x4000B4A")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x4000B4B")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x2000192")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x4000B4D")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x4000B4E")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x4000B4F")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x4000B50")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x4000B51")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x4000B52")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x4000B53")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x4000B54")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x4000B55")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x4000B56")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x4000B57")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x4000B58")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x4000B59")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x4000B5A")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x4000B5B")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x4000B5C")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000,
		[Token(Token = "0x4000B5D")]
		k_EAppOwnershipFlags_PendingGift = 0x8000,
		[Token(Token = "0x4000B5E")]
		k_EAppOwnershipFlags_RentalNotActivated = 0x10000,
		[Token(Token = "0x4000B5F")]
		k_EAppOwnershipFlags_Rental = 0x20000,
		[Token(Token = "0x4000B60")]
		k_EAppOwnershipFlags_SiteLicense = 0x40000
	}
	[Token(Token = "0x2000193")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x4000B62")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x4000B63")]
		k_EAppType_Game = 1,
		[Token(Token = "0x4000B64")]
		k_EAppType_Application = 2,
		[Token(Token = "0x4000B65")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x4000B66")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x4000B67")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x4000B68")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x4000B69")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x4000B6A")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x4000B6B")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x4000B6C")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x4000B6D")]
		k_EAppType_Franchise = 0x400,
		[Token(Token = "0x4000B6E")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x4000B6F")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x4000B70")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x4000B71")]
		k_EAppType_Series = 0x4000,
		[Token(Token = "0x4000B72")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x4000B73")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000194")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x4000B75")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x4000B76")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x4000B77")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x4000B78")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x4000B79")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x4000B7A")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x4000B7B")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000195")]
	public enum EChatEntryType
	{
		[Token(Token = "0x4000B7D")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x4000B7E")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x4000B7F")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x4000B80")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x4000B81")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x4000B82")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x4000B83")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x4000B84")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x4000B85")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x4000B86")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x4000B87")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x4000B88")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x2000196")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x4000B8A")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x4000B8B")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x4000B8C")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x4000B8D")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x4000B8E")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x4000B8F")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4000B90")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4000B91")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4000B92")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4000B93")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4000B94")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x2000197")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x4000B96")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x4000B97")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x4000B98")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x4000B99")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x2000198")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x4000B9B")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x4000B9C")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x4000B9D")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x4000B9E")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4000B9F")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000BA0")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x2000199")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000BA2")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000BA3")]
		k_EPositionTopRight,
		[Token(Token = "0x4000BA4")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000BA5")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x200019A")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x4000BA7")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x4000BA8")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x4000BA9")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x4000BAA")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x4000BAB")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x4000BAC")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x4000BAD")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x4000BAE")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x4000BAF")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000BB0")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000BB1")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000BB2")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000BB3")]
		k_EBroadcastUploadResultTooFarBehind,
		[Token(Token = "0x4000BB4")]
		k_EBroadcastUploadResultTranscodeBehind
	}
	[Token(Token = "0x200019B")]
	public enum ELaunchOptionType
	{
		[Token(Token = "0x4000BB6")]
		k_ELaunchOptionType_None = 0,
		[Token(Token = "0x4000BB7")]
		k_ELaunchOptionType_Default = 1,
		[Token(Token = "0x4000BB8")]
		k_ELaunchOptionType_SafeMode = 2,
		[Token(Token = "0x4000BB9")]
		k_ELaunchOptionType_Multiplayer = 3,
		[Token(Token = "0x4000BBA")]
		k_ELaunchOptionType_Config = 4,
		[Token(Token = "0x4000BBB")]
		k_ELaunchOptionType_OpenVR = 5,
		[Token(Token = "0x4000BBC")]
		k_ELaunchOptionType_Server = 6,
		[Token(Token = "0x4000BBD")]
		k_ELaunchOptionType_Editor = 7,
		[Token(Token = "0x4000BBE")]
		k_ELaunchOptionType_Manual = 8,
		[Token(Token = "0x4000BBF")]
		k_ELaunchOptionType_Benchmark = 9,
		[Token(Token = "0x4000BC0")]
		k_ELaunchOptionType_Option1 = 10,
		[Token(Token = "0x4000BC1")]
		k_ELaunchOptionType_Option2 = 11,
		[Token(Token = "0x4000BC2")]
		k_ELaunchOptionType_Option3 = 12,
		[Token(Token = "0x4000BC3")]
		k_ELaunchOptionType_OculusVR = 13,
		[Token(Token = "0x4000BC4")]
		k_ELaunchOptionType_OpenVROverlay = 14,
		[Token(Token = "0x4000BC5")]
		k_ELaunchOptionType_OSVR = 15,
		[Token(Token = "0x4000BC6")]
		k_ELaunchOptionType_Dialog = 1000
	}
	[Token(Token = "0x200019C")]
	public enum EVRHMDType
	{
		[Token(Token = "0x4000BC8")]
		k_eEVRHMDType_None = -1,
		[Token(Token = "0x4000BC9")]
		k_eEVRHMDType_Unknown = 0,
		[Token(Token = "0x4000BCA")]
		k_eEVRHMDType_HTC_Dev = 1,
		[Token(Token = "0x4000BCB")]
		k_eEVRHMDType_HTC_VivePre = 2,
		[Token(Token = "0x4000BCC")]
		k_eEVRHMDType_HTC_Vive = 3,
		[Token(Token = "0x4000BCD")]
		k_eEVRHMDType_HTC_Unknown = 20,
		[Token(Token = "0x4000BCE")]
		k_eEVRHMDType_Oculus_DK1 = 21,
		[Token(Token = "0x4000BCF")]
		k_eEVRHMDType_Oculus_DK2 = 22,
		[Token(Token = "0x4000BD0")]
		k_eEVRHMDType_Oculus_Rift = 23,
		[Token(Token = "0x4000BD1")]
		k_eEVRHMDType_Oculus_Unknown = 40
	}
	[Token(Token = "0x200019D")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x4000BD3")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x4000BD4")]
		k_EHTTPMethodGET,
		[Token(Token = "0x4000BD5")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x4000BD6")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x4000BD7")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x4000BD8")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x4000BD9")]
		k_EHTTPMethodOPTIONS,
		[Token(Token = "0x4000BDA")]
		k_EHTTPMethodPATCH
	}
	[Token(Token = "0x200019E")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4000BDC")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4000BDD")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4000BDE")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4000BDF")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4000BE0")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4000BE1")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x4000BE2")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x4000BE3")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x4000BE4")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x4000BE5")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x4000BE6")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x4000BE7")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x4000BE8")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x4000BE9")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x4000BEA")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4000BEB")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4000BEC")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4000BED")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4000BEE")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x4000BEF")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x4000BF0")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x4000BF1")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x4000BF2")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x4000BF3")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x4000BF4")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x4000BF5")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x4000BF6")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x4000BF7")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x4000BF8")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x4000BF9")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x4000BFA")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4000BFB")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4000BFC")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4000BFD")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4000BFE")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x4000BFF")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x4000C00")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x4000C01")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x4000C02")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x4000C03")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x4000C04")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x4000C05")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x4000C06")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x4000C07")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x200019F")]
	public enum EUniverse
	{
		[Token(Token = "0x4000C09")]
		k_EUniverseInvalid,
		[Token(Token = "0x4000C0A")]
		k_EUniversePublic,
		[Token(Token = "0x4000C0B")]
		k_EUniverseBeta,
		[Token(Token = "0x4000C0C")]
		k_EUniverseInternal,
		[Token(Token = "0x4000C0D")]
		k_EUniverseDev,
		[Token(Token = "0x4000C0E")]
		k_EUniverseMax
	}
	[Token(Token = "0x20001A0")]
	public struct ControllerAnalogActionData_t
	{
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EControllerSourceMode eMode;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte bActive;
	}
	[Token(Token = "0x20001A1")]
	public struct ControllerDigitalActionData_t
	{
		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte bState;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte bActive;
	}
	[Token(Token = "0x20001A2")]
	public struct ControllerMotionData_t
	{
		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rotQuatX;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rotQuatY;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rotQuatZ;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rotQuatW;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float posAccelX;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float posAccelY;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float posAccelZ;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotVelX;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotVelY;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotVelZ;
	}
	[Token(Token = "0x20001A3")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x20001A4")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x20001A5")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x20001A6")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x20001A7")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x20001A8")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x20001A9")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x20001AA")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x20001AB")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x124E9B4", Offset = "0x124E9B4", VA = "0x124E9B4")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public static class SteamAppList
	{
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1B45F28", Offset = "0x1B45F28", VA = "0x1B45F28")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x1B45F44", Offset = "0x1B45F44", VA = "0x1B45F44")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1B45F78", Offset = "0x1B45F78", VA = "0x1B45F78")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x1B46068", Offset = "0x1B46068", VA = "0x1B46068")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1B46158", Offset = "0x1B46158", VA = "0x1B46158")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001AD")]
	public static class SteamApps
	{
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1B46184", Offset = "0x1B46184", VA = "0x1B46184")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x1B461A0", Offset = "0x1B461A0", VA = "0x1B461A0")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x1B461BC", Offset = "0x1B461BC", VA = "0x1B461BC")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x1B461D8", Offset = "0x1B461D8", VA = "0x1B461D8")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x1B461F4", Offset = "0x1B461F4", VA = "0x1B461F4")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x1B46218", Offset = "0x1B46218", VA = "0x1B46218")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x1B4623C", Offset = "0x1B4623C", VA = "0x1B4623C")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x1B46268", Offset = "0x1B46268", VA = "0x1B46268")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1B46294", Offset = "0x1B46294", VA = "0x1B46294")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1B462C0", Offset = "0x1B462C0", VA = "0x1B462C0")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x1B462DC", Offset = "0x1B462DC", VA = "0x1B462DC")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x1B462F8", Offset = "0x1B462F8", VA = "0x1B462F8")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1B463F8", Offset = "0x1B463F8", VA = "0x1B463F8")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1B46424", Offset = "0x1B46424", VA = "0x1B46424")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x1B46450", Offset = "0x1B46450", VA = "0x1B46450")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x1B4647C", Offset = "0x1B4647C", VA = "0x1B4647C")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x1B46550", Offset = "0x1B46550", VA = "0x1B46550")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1B4657C", Offset = "0x1B4657C", VA = "0x1B4657C")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x1B465C0", Offset = "0x1B465C0", VA = "0x1B465C0")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x1B466AC", Offset = "0x1B466AC", VA = "0x1B466AC")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x1B466D8", Offset = "0x1B466D8", VA = "0x1B466D8")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1B46754", Offset = "0x1B46754", VA = "0x1B46754")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x1B46888", Offset = "0x1B46888", VA = "0x1B46888")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x1B468CC", Offset = "0x1B468CC", VA = "0x1B468CC")]
		public static int GetAppBuildId()
		{
			return default(int);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x1B468E8", Offset = "0x1B468E8", VA = "0x1B468E8")]
		public static void RequestAllProofOfPurchaseKeys()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x1B46904", Offset = "0x1B46904", VA = "0x1B46904")]
		public static SteamAPICall_t GetFileDetails(string pszFileName)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001AE")]
	public static class SteamClient
	{
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x1B46A4C", Offset = "0x1B46A4C", VA = "0x1B46A4C")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1B46A78", Offset = "0x1B46A78", VA = "0x1B46A78")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x1B46AA4", Offset = "0x1B46AA4", VA = "0x1B46AA4")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x1B46AE0", Offset = "0x1B46AE0", VA = "0x1B46AE0")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x1B46B24", Offset = "0x1B46B24", VA = "0x1B46B24")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1B46B58", Offset = "0x1B46B58", VA = "0x1B46B58")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x1B46C90", Offset = "0x1B46C90", VA = "0x1B46C90")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1B46DC8", Offset = "0x1B46DC8", VA = "0x1B46DC8")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1B46DFC", Offset = "0x1B46DFC", VA = "0x1B46DFC")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1B46F34", Offset = "0x1B46F34", VA = "0x1B46F34")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x1B47064", Offset = "0x1B47064", VA = "0x1B47064")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x1B4719C", Offset = "0x1B4719C", VA = "0x1B4719C")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x1B472D4", Offset = "0x1B472D4", VA = "0x1B472D4")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x1B4740C", Offset = "0x1B4740C", VA = "0x1B4740C")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x1B47544", Offset = "0x1B47544", VA = "0x1B47544")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x1B4767C", Offset = "0x1B4767C", VA = "0x1B4767C")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1B477B4", Offset = "0x1B477B4", VA = "0x1B477B4")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x1B478EC", Offset = "0x1B478EC", VA = "0x1B478EC")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x1B47A24", Offset = "0x1B47A24", VA = "0x1B47A24")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x1B47B5C", Offset = "0x1B47B5C", VA = "0x1B47B5C")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x1B47B78", Offset = "0x1B47B78", VA = "0x1B47B78")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x1B47BA4", Offset = "0x1B47BA4", VA = "0x1B47BA4")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x1B47BC0", Offset = "0x1B47BC0", VA = "0x1B47BC0")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x1B47CF8", Offset = "0x1B47CF8", VA = "0x1B47CF8")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x1B47E30", Offset = "0x1B47E30", VA = "0x1B47E30")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x1B47F68", Offset = "0x1B47F68", VA = "0x1B47F68")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x1B480A0", Offset = "0x1B480A0", VA = "0x1B480A0")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x1B481D8", Offset = "0x1B481D8", VA = "0x1B481D8")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x1B48310", Offset = "0x1B48310", VA = "0x1B48310")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x1B48448", Offset = "0x1B48448", VA = "0x1B48448")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x1B48580", Offset = "0x1B48580", VA = "0x1B48580")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x1B486B8", Offset = "0x1B486B8", VA = "0x1B486B8")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001AF")]
	public static class SteamController
	{
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x1B487F0", Offset = "0x1B487F0", VA = "0x1B487F0")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x1B4880C", Offset = "0x1B4880C", VA = "0x1B4880C")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x1B48828", Offset = "0x1B48828", VA = "0x1B48828")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x1B48844", Offset = "0x1B48844", VA = "0x1B48844")]
		public static int GetConnectedControllers(ControllerHandle_t[] handlesOut)
		{
			return default(int);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x1B488E4", Offset = "0x1B488E4", VA = "0x1B488E4")]
		public static bool ShowBindingPanel(ControllerHandle_t controllerHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x1B48910", Offset = "0x1B48910", VA = "0x1B48910")]
		public static ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x1B48A44", Offset = "0x1B48A44", VA = "0x1B48A44")]
		public static void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x1B48A78", Offset = "0x1B48A78", VA = "0x1B48A78")]
		public static ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x1B48AAC", Offset = "0x1B48AAC", VA = "0x1B48AAC")]
		public static ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x1B48BE0", Offset = "0x1B48BE0", VA = "0x1B48BE0")]
		public static ControllerDigitalActionData_t GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
		{
			return default(ControllerDigitalActionData_t);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x1B48C1C", Offset = "0x1B48C1C", VA = "0x1B48C1C")]
		public static int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x1B48C68", Offset = "0x1B48C68", VA = "0x1B48C68")]
		public static ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x1B48D9C", Offset = "0x1B48D9C", VA = "0x1B48D9C")]
		public static ControllerAnalogActionData_t GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
		{
			return default(ControllerAnalogActionData_t);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x1B48DD8", Offset = "0x1B48DD8", VA = "0x1B48DD8")]
		public static int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x1B48E24", Offset = "0x1B48E24", VA = "0x1B48E24")]
		public static void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x1B48E58", Offset = "0x1B48E58", VA = "0x1B48E58")]
		public static void TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x1B48E9C", Offset = "0x1B48E9C", VA = "0x1B48E9C")]
		public static void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x1B48F00", Offset = "0x1B48F00", VA = "0x1B48F00")]
		public static void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x1B48F44", Offset = "0x1B48F44", VA = "0x1B48F44")]
		public static void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x1B48FA0", Offset = "0x1B48FA0", VA = "0x1B48FA0")]
		public static int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
		{
			return default(int);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x1B48FCC", Offset = "0x1B48FCC", VA = "0x1B48FCC")]
		public static ControllerHandle_t GetControllerForGamepadIndex(int nIndex)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x1B49000", Offset = "0x1B49000", VA = "0x1B49000")]
		public static ControllerMotionData_t GetMotionData(ControllerHandle_t controllerHandle)
		{
			return default(ControllerMotionData_t);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1B49034", Offset = "0x1B49034", VA = "0x1B49034")]
		public static bool ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x1B49090", Offset = "0x1B49090", VA = "0x1B49090")]
		public static bool ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x1B490EC", Offset = "0x1B490EC", VA = "0x1B490EC")]
		public static string GetStringForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x1B49120", Offset = "0x1B49120", VA = "0x1B49120")]
		public static string GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B0")]
	public static class SteamFriends
	{
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x1B493F0", Offset = "0x1B493F0", VA = "0x1B493F0")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x1B49414", Offset = "0x1B49414", VA = "0x1B49414")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x1B4955C", Offset = "0x1B4955C", VA = "0x1B4955C")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x1B49578", Offset = "0x1B49578", VA = "0x1B49578")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x1B495A4", Offset = "0x1B495A4", VA = "0x1B495A4")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x1B49638", Offset = "0x1B49638", VA = "0x1B49638")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x1B49664", Offset = "0x1B49664", VA = "0x1B49664")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x1B49690", Offset = "0x1B49690", VA = "0x1B49690")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x1B496C4", Offset = "0x1B496C4", VA = "0x1B496C4")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x1B496F8", Offset = "0x1B496F8", VA = "0x1B496F8")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x1B49734", Offset = "0x1B49734", VA = "0x1B49734")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x1B49760", Offset = "0x1B49760", VA = "0x1B49760")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x1B49794", Offset = "0x1B49794", VA = "0x1B49794")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x1B497B0", Offset = "0x1B497B0", VA = "0x1B497B0")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x1B4983C", Offset = "0x1B4983C", VA = "0x1B4983C")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x1B49870", Offset = "0x1B49870", VA = "0x1B49870")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x1B4989C", Offset = "0x1B4989C", VA = "0x1B4989C")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x1B498E0", Offset = "0x1B498E0", VA = "0x1B498E0")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x1B49914", Offset = "0x1B49914", VA = "0x1B49914")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x1B49930", Offset = "0x1B49930", VA = "0x1B49930")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x1B499B4", Offset = "0x1B499B4", VA = "0x1B499B4")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x1B499E8", Offset = "0x1B499E8", VA = "0x1B499E8")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x1B49A1C", Offset = "0x1B49A1C", VA = "0x1B49A1C")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x1B49A68", Offset = "0x1B49A68", VA = "0x1B49A68")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x1B49AF8", Offset = "0x1B49AF8", VA = "0x1B49AF8")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x1B49B24", Offset = "0x1B49B24", VA = "0x1B49B24")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x1B49BB8", Offset = "0x1B49BB8", VA = "0x1B49BB8")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x1B49BEC", Offset = "0x1B49BEC", VA = "0x1B49BEC")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x1B49C20", Offset = "0x1B49C20", VA = "0x1B49C20")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x1B49D34", Offset = "0x1B49D34", VA = "0x1B49D34")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x1B49E58", Offset = "0x1B49E58", VA = "0x1B49E58")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x1B49F6C", Offset = "0x1B49F6C", VA = "0x1B49F6C")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x1B49FA0", Offset = "0x1B49FA0", VA = "0x1B49FA0")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x1B49FCC", Offset = "0x1B49FCC", VA = "0x1B49FCC")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x1B49FF8", Offset = "0x1B49FF8", VA = "0x1B49FF8")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x1B4A024", Offset = "0x1B4A024", VA = "0x1B4A024")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x1B4A050", Offset = "0x1B4A050", VA = "0x1B4A050")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x1B4A07C", Offset = "0x1B4A07C", VA = "0x1B4A07C")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1B4A0B0", Offset = "0x1B4A0B0", VA = "0x1B4A0B0")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x1B4A130", Offset = "0x1B4A130", VA = "0x1B4A130")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x1B4A1B4", Offset = "0x1B4A1B4", VA = "0x1B4A1B4")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x1B4A1E0", Offset = "0x1B4A1E0", VA = "0x1B4A1E0")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x1B4A274", Offset = "0x1B4A274", VA = "0x1B4A274")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x1B4A290", Offset = "0x1B4A290", VA = "0x1B4A290")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x1B4A490", Offset = "0x1B4A490", VA = "0x1B4A490")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x1B4A4AC", Offset = "0x1B4A4AC", VA = "0x1B4A4AC")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x1B4A5E8", Offset = "0x1B4A5E8", VA = "0x1B4A5E8")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x1B4A614", Offset = "0x1B4A614", VA = "0x1B4A614")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x1B4A650", Offset = "0x1B4A650", VA = "0x1B4A650")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x1B4A67C", Offset = "0x1B4A67C", VA = "0x1B4A67C")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x1B4A7AC", Offset = "0x1B4A7AC", VA = "0x1B4A7AC")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x1B4A7C8", Offset = "0x1B4A7C8", VA = "0x1B4A7C8")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x1B4A84C", Offset = "0x1B4A84C", VA = "0x1B4A84C")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x1B4A878", Offset = "0x1B4A878", VA = "0x1B4A878")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x1B4A904", Offset = "0x1B4A904", VA = "0x1B4A904")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x1B4A984", Offset = "0x1B4A984", VA = "0x1B4A984")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x1B4A9B0", Offset = "0x1B4A9B0", VA = "0x1B4A9B0")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x1B4A9DC", Offset = "0x1B4A9DC", VA = "0x1B4A9DC")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x1B4AA70", Offset = "0x1B4AA70", VA = "0x1B4AA70")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x1B4ABA0", Offset = "0x1B4ABA0", VA = "0x1B4ABA0")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x1B4ACAC", Offset = "0x1B4ACAC", VA = "0x1B4ACAC")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x1B4ACE0", Offset = "0x1B4ACE0", VA = "0x1B4ACE0")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x1B4AD0C", Offset = "0x1B4AD0C", VA = "0x1B4AD0C")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x1B4AD38", Offset = "0x1B4AD38", VA = "0x1B4AD38")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x1B4AD64", Offset = "0x1B4AD64", VA = "0x1B4AD64")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x1B4AD90", Offset = "0x1B4AD90", VA = "0x1B4AD90")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x1B4AEC0", Offset = "0x1B4AEC0", VA = "0x1B4AEC0")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x1B4AFC4", Offset = "0x1B4AFC4", VA = "0x1B4AFC4")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x1B4B044", Offset = "0x1B4B044", VA = "0x1B4B044")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x1B4B0C4", Offset = "0x1B4B0C4", VA = "0x1B4B0C4")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001B1")]
	public static class SteamGameServer
	{
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x1B4B144", Offset = "0x1B4B144", VA = "0x1B4B144")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x1B4B2A4", Offset = "0x1B4B2A4", VA = "0x1B4B2A4")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x1B4B3B8", Offset = "0x1B4B3B8", VA = "0x1B4B3B8")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x1B4B4CC", Offset = "0x1B4B4CC", VA = "0x1B4B4CC")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x1B4B5E0", Offset = "0x1B4B5E0", VA = "0x1B4B5E0")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1B4B60C", Offset = "0x1B4B60C", VA = "0x1B4B60C")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x1B4B720", Offset = "0x1B4B720", VA = "0x1B4B720")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1B4B73C", Offset = "0x1B4B73C", VA = "0x1B4B73C")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1B4B758", Offset = "0x1B4B758", VA = "0x1B4B758")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1B4B774", Offset = "0x1B4B774", VA = "0x1B4B774")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x1B4B790", Offset = "0x1B4B790", VA = "0x1B4B790")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1B4B80C", Offset = "0x1B4B80C", VA = "0x1B4B80C")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1B4B828", Offset = "0x1B4B828", VA = "0x1B4B828")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x1B4B854", Offset = "0x1B4B854", VA = "0x1B4B854")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x1B4B880", Offset = "0x1B4B880", VA = "0x1B4B880")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x1B4B994", Offset = "0x1B4B994", VA = "0x1B4B994")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x1B4BAA8", Offset = "0x1B4BAA8", VA = "0x1B4BAA8")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x1B4BAD4", Offset = "0x1B4BAD4", VA = "0x1B4BAD4")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x1B4BB00", Offset = "0x1B4BB00", VA = "0x1B4BB00")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x1B4BC14", Offset = "0x1B4BC14", VA = "0x1B4BC14")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1B4BC30", Offset = "0x1B4BC30", VA = "0x1B4BC30")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1B4BE10", Offset = "0x1B4BE10", VA = "0x1B4BE10")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1B4BF24", Offset = "0x1B4BF24", VA = "0x1B4BF24")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1B4C038", Offset = "0x1B4C038", VA = "0x1B4C038")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x1B4C14C", Offset = "0x1B4C14C", VA = "0x1B4C14C")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1B4C198", Offset = "0x1B4C198", VA = "0x1B4C198")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1B4C214", Offset = "0x1B4C214", VA = "0x1B4C214")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x1B4C240", Offset = "0x1B4C240", VA = "0x1B4C240")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x1B4C378", Offset = "0x1B4C378", VA = "0x1B4C378")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1B4C41C", Offset = "0x1B4C41C", VA = "0x1B4C41C")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x1B4C460", Offset = "0x1B4C460", VA = "0x1B4C460")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x1B4C48C", Offset = "0x1B4C48C", VA = "0x1B4C48C")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1B4C4B8", Offset = "0x1B4C4B8", VA = "0x1B4C4B8")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x1B4C4EC", Offset = "0x1B4C4EC", VA = "0x1B4C4EC")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x1B4C520", Offset = "0x1B4C520", VA = "0x1B4C520")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x1B4C53C", Offset = "0x1B4C53C", VA = "0x1B4C53C")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x1B4C5B4", Offset = "0x1B4C5B4", VA = "0x1B4C5B4")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x1B4C5D0", Offset = "0x1B4C5D0", VA = "0x1B4C5D0")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x1B4C61C", Offset = "0x1B4C61C", VA = "0x1B4C61C")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x1B4C668", Offset = "0x1B4C668", VA = "0x1B4C668")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1B4C694", Offset = "0x1B4C694", VA = "0x1B4C694")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1B4C6C0", Offset = "0x1B4C6C0", VA = "0x1B4C6C0")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x1B4C6DC", Offset = "0x1B4C6DC", VA = "0x1B4C6DC")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x1B4C75C", Offset = "0x1B4C75C", VA = "0x1B4C75C")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001B2")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1B4C7DC", Offset = "0x1B4C7DC", VA = "0x1B4C7DC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1B4C940", Offset = "0x1B4C940", VA = "0x1B4C940")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x1B4C974", Offset = "0x1B4C974", VA = "0x1B4C974")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1B4C9A8", Offset = "0x1B4C9A8", VA = "0x1B4C9A8")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x1B4CBB8", Offset = "0x1B4CBB8", VA = "0x1B4CBB8")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1B4CDC8", Offset = "0x1B4CDC8", VA = "0x1B4CDC8")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x1B4CDFC", Offset = "0x1B4CDFC", VA = "0x1B4CDFC")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1B4CE30", Offset = "0x1B4CE30", VA = "0x1B4CE30")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x1B4CE5C", Offset = "0x1B4CE5C", VA = "0x1B4CE5C")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1B4CE88", Offset = "0x1B4CE88", VA = "0x1B4CE88")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x1B4CFC0", Offset = "0x1B4CFC0", VA = "0x1B4CFC0")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x1B4D108", Offset = "0x1B4D108", VA = "0x1B4D108")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x1B4D13C", Offset = "0x1B4D13C", VA = "0x1B4D13C")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x1B4D180", Offset = "0x1B4D180", VA = "0x1B4D180")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x1B4D1CC", Offset = "0x1B4D1CC", VA = "0x1B4D1CC")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x1B4D1F8", Offset = "0x1B4D1F8", VA = "0x1B4D1F8")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x1B4D22C", Offset = "0x1B4D22C", VA = "0x1B4D22C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x1B4D374", Offset = "0x1B4D374", VA = "0x1B4D374")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1B4D400", Offset = "0x1B4D400", VA = "0x1B4D400")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x1B4D42C", Offset = "0x1B4D42C", VA = "0x1B4D42C")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x1B4D714", Offset = "0x1B4D714", VA = "0x1B4D714")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x1B4D748", Offset = "0x1B4D748", VA = "0x1B4D748")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x1B4D878", Offset = "0x1B4D878", VA = "0x1B4D878")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x1B4D8AC", Offset = "0x1B4D8AC", VA = "0x1B4D8AC")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x1B4D8E0", Offset = "0x1B4D8E0", VA = "0x1B4D8E0")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B3")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x1B4D914", Offset = "0x1B4D914", VA = "0x1B4D914")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1B4D940", Offset = "0x1B4D940", VA = "0x1B4D940")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1B4D984", Offset = "0x1B4D984", VA = "0x1B4D984")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x1B4DB5C", Offset = "0x1B4DB5C", VA = "0x1B4DB5C")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x1B4DB88", Offset = "0x1B4DB88", VA = "0x1B4DB88")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1B4DBBC", Offset = "0x1B4DBBC", VA = "0x1B4DBBC")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x1B4DBE8", Offset = "0x1B4DBE8", VA = "0x1B4DBE8")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x1B4DC14", Offset = "0x1B4DC14", VA = "0x1B4DC14")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x1B4DC58", Offset = "0x1B4DC58", VA = "0x1B4DC58")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x1B4DC9C", Offset = "0x1B4DC9C", VA = "0x1B4DC9C")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x1B4DCE8", Offset = "0x1B4DCE8", VA = "0x1B4DCE8")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x1B4DD34", Offset = "0x1B4DD34", VA = "0x1B4DD34")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x1B4DD60", Offset = "0x1B4DD60", VA = "0x1B4DD60")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1B4DD94", Offset = "0x1B4DD94", VA = "0x1B4DD94")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1B4DDD8", Offset = "0x1B4DDD8", VA = "0x1B4DDD8")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1B4DE1C", Offset = "0x1B4DE1C", VA = "0x1B4DE1C")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1B4DE90", Offset = "0x1B4DE90", VA = "0x1B4DE90")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x1B4DEDC", Offset = "0x1B4DEDC", VA = "0x1B4DEDC")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x1B4DEF8", Offset = "0x1B4DEF8", VA = "0x1B4DEF8")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x1B4DF2C", Offset = "0x1B4DF2C", VA = "0x1B4DF2C")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x1B4DFA8", Offset = "0x1B4DFA8", VA = "0x1B4DFA8")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x1B4DFC4", Offset = "0x1B4DFC4", VA = "0x1B4DFC4")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1B4DFF8", Offset = "0x1B4DFF8", VA = "0x1B4DFF8")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1B4E1C8", Offset = "0x1B4E1C8", VA = "0x1B4E1C8")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x1B4E248", Offset = "0x1B4E248", VA = "0x1B4E248")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B4")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1B4E28C", Offset = "0x1B4E28C", VA = "0x1B4E28C")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x1B4E2E8", Offset = "0x1B4E2E8", VA = "0x1B4E2E8")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1B4E31C", Offset = "0x1B4E31C", VA = "0x1B4E31C")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1B4E378", Offset = "0x1B4E378", VA = "0x1B4E378")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x1B4E3A4", Offset = "0x1B4E3A4", VA = "0x1B4E3A4")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x1B4E3D0", Offset = "0x1B4E3D0", VA = "0x1B4E3D0")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1B4E404", Offset = "0x1B4E404", VA = "0x1B4E404")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1B4E438", Offset = "0x1B4E438", VA = "0x1B4E438")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1B4E464", Offset = "0x1B4E464", VA = "0x1B4E464")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x1B4E4B8", Offset = "0x1B4E4B8", VA = "0x1B4E4B8")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1B4E50C", Offset = "0x1B4E50C", VA = "0x1B4E50C")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x1B4E558", Offset = "0x1B4E558", VA = "0x1B4E558")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x1B4E58C", Offset = "0x1B4E58C", VA = "0x1B4E58C")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x1B4E5C0", Offset = "0x1B4E5C0", VA = "0x1B4E5C0")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1B4E60C", Offset = "0x1B4E60C", VA = "0x1B4E60C")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1B4E640", Offset = "0x1B4E640", VA = "0x1B4E640")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1B4E68C", Offset = "0x1B4E68C", VA = "0x1B4E68C")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1B4E6D0", Offset = "0x1B4E6D0", VA = "0x1B4E6D0")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1B4E72C", Offset = "0x1B4E72C", VA = "0x1B4E72C")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x1B4E788", Offset = "0x1B4E788", VA = "0x1B4E788")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x1B4E7CC", Offset = "0x1B4E7CC", VA = "0x1B4E7CC")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x1B4E7F8", Offset = "0x1B4E7F8", VA = "0x1B4E7F8")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B5")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1B4E824", Offset = "0x1B4E824", VA = "0x1B4E824")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x1B4E8A4", Offset = "0x1B4E8A4", VA = "0x1B4E8A4")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x1B4E9DC", Offset = "0x1B4E9DC", VA = "0x1B4E9DC")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1B4EB14", Offset = "0x1B4EB14", VA = "0x1B4EB14")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x1B4EC4C", Offset = "0x1B4EC4C", VA = "0x1B4EC4C")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1B4ED84", Offset = "0x1B4ED84", VA = "0x1B4ED84")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x1B4EEC4", Offset = "0x1B4EEC4", VA = "0x1B4EEC4")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x1B4F00C", Offset = "0x1B4F00C", VA = "0x1B4F00C")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x1B4F13C", Offset = "0x1B4F13C", VA = "0x1B4F13C")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x1B4F26C", Offset = "0x1B4F26C", VA = "0x1B4F26C")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001B6")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1B4F2EC", Offset = "0x1B4F2EC", VA = "0x1B4F2EC")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x1B4F3B8", Offset = "0x1B4F3B8", VA = "0x1B4F3B8")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x1B4F46C", Offset = "0x1B4F46C", VA = "0x1B4F46C")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x1B4F500", Offset = "0x1B4F500", VA = "0x1B4F500")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x1B4F580", Offset = "0x1B4F580", VA = "0x1B4F580")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1B4F5C4", Offset = "0x1B4F5C4", VA = "0x1B4F5C4")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x1B4F6B4", Offset = "0x1B4F6B4", VA = "0x1B4F6B4")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1B4F7A4", Offset = "0x1B4F7A4", VA = "0x1B4F7A4")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x1B4F7F0", Offset = "0x1B4F7F0", VA = "0x1B4F7F0")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x1B4F83C", Offset = "0x1B4F83C", VA = "0x1B4F83C")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x1B4F870", Offset = "0x1B4F870", VA = "0x1B4F870")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1B4F9E8", Offset = "0x1B4F9E8", VA = "0x1B4F9E8")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x1B4FA1C", Offset = "0x1B4FA1C", VA = "0x1B4FA1C")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x1B4FB80", Offset = "0x1B4FB80", VA = "0x1B4FB80")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x1B4FBAC", Offset = "0x1B4FBAC", VA = "0x1B4FBAC")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x1B4FCDC", Offset = "0x1B4FCDC", VA = "0x1B4FCDC")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1B4FE0C", Offset = "0x1B4FE0C", VA = "0x1B4FE0C")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1B4FE40", Offset = "0x1B4FE40", VA = "0x1B4FE40")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1B4FE74", Offset = "0x1B4FE74", VA = "0x1B4FE74")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x1B4FEA8", Offset = "0x1B4FEA8", VA = "0x1B4FEA8")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x1B4FEDC", Offset = "0x1B4FEDC", VA = "0x1B4FEDC")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x1B4FF10", Offset = "0x1B4FF10", VA = "0x1B4FF10")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x1B4FF44", Offset = "0x1B4FF44", VA = "0x1B4FF44")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x1B4FF78", Offset = "0x1B4FF78", VA = "0x1B4FF78")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x1B4FFAC", Offset = "0x1B4FFAC", VA = "0x1B4FFAC")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x1B500DC", Offset = "0x1B500DC", VA = "0x1B500DC")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x1B50110", Offset = "0x1B50110", VA = "0x1B50110")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x1B50240", Offset = "0x1B50240", VA = "0x1B50240")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x1B50274", Offset = "0x1B50274", VA = "0x1B50274")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x1B503A4", Offset = "0x1B503A4", VA = "0x1B503A4")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x1B503D8", Offset = "0x1B503D8", VA = "0x1B503D8")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x1B505E8", Offset = "0x1B505E8", VA = "0x1B505E8")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x1B50678", Offset = "0x1B50678", VA = "0x1B50678")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1B50708", Offset = "0x1B50708", VA = "0x1B50708")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1B5079C", Offset = "0x1B5079C", VA = "0x1B5079C")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x1B508CC", Offset = "0x1B508CC", VA = "0x1B508CC")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x1B509FC", Offset = "0x1B509FC", VA = "0x1B509FC")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x1B50B2C", Offset = "0x1B50B2C", VA = "0x1B50B2C")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x1B50C5C", Offset = "0x1B50C5C", VA = "0x1B50C5C")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x1B50C90", Offset = "0x1B50C90", VA = "0x1B50C90")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x1B50D18", Offset = "0x1B50D18", VA = "0x1B50D18")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x1B50E48", Offset = "0x1B50E48", VA = "0x1B50E48")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x1B50F78", Offset = "0x1B50F78", VA = "0x1B50F78")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x1B510A8", Offset = "0x1B510A8", VA = "0x1B510A8")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x1B512B8", Offset = "0x1B512B8", VA = "0x1B512B8")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x1B513F0", Offset = "0x1B513F0", VA = "0x1B513F0")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x1B51520", Offset = "0x1B51520", VA = "0x1B51520")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x1B51658", Offset = "0x1B51658", VA = "0x1B51658")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1B51790", Offset = "0x1B51790", VA = "0x1B51790")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x1B517C4", Offset = "0x1B517C4", VA = "0x1B517C4")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1B51914", Offset = "0x1B51914", VA = "0x1B51914")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x1B51958", Offset = "0x1B51958", VA = "0x1B51958")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x1B519E8", Offset = "0x1B519E8", VA = "0x1B519E8")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x1B51A68", Offset = "0x1B51A68", VA = "0x1B51A68")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x1B51AF8", Offset = "0x1B51AF8", VA = "0x1B51AF8")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x1B51B88", Offset = "0x1B51B88", VA = "0x1B51B88")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x1B51C08", Offset = "0x1B51C08", VA = "0x1B51C08")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x1B51C88", Offset = "0x1B51C88", VA = "0x1B51C88")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x1B51CA4", Offset = "0x1B51CA4", VA = "0x1B51CA4")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x1B51CD8", Offset = "0x1B51CD8", VA = "0x1B51CD8")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x1B51D04", Offset = "0x1B51D04", VA = "0x1B51D04")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x1B51E04", Offset = "0x1B51E04", VA = "0x1B51E04")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x1B51E48", Offset = "0x1B51E48", VA = "0x1B51E48")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x1B51E7C", Offset = "0x1B51E7C", VA = "0x1B51E7C")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x1B51FAC", Offset = "0x1B51FAC", VA = "0x1B51FAC")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x1B51FD8", Offset = "0x1B51FD8", VA = "0x1B51FD8")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1B52068", Offset = "0x1B52068", VA = "0x1B52068")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x1B520F8", Offset = "0x1B520F8", VA = "0x1B520F8")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1B52170", Offset = "0x1B52170", VA = "0x1B52170")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x1B52200", Offset = "0x1B52200", VA = "0x1B52200")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001B7")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x1B52290", Offset = "0x1B52290", VA = "0x1B52290")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x1B522AC", Offset = "0x1B522AC", VA = "0x1B522AC")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x1B522C8", Offset = "0x1B522C8", VA = "0x1B522C8")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x1B522E4", Offset = "0x1B522E4", VA = "0x1B522E4")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1B52300", Offset = "0x1B52300", VA = "0x1B52300")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x1B52324", Offset = "0x1B52324", VA = "0x1B52324")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x1B52368", Offset = "0x1B52368", VA = "0x1B52368")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x1B523AC", Offset = "0x1B523AC", VA = "0x1B523AC")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x1B523E0", Offset = "0x1B523E0", VA = "0x1B523E0")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1B523FC", Offset = "0x1B523FC", VA = "0x1B523FC")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x1B52480", Offset = "0x1B52480", VA = "0x1B52480")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x1B524AC", Offset = "0x1B524AC", VA = "0x1B524AC")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x1B524E0", Offset = "0x1B524E0", VA = "0x1B524E0")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1B5250C", Offset = "0x1B5250C", VA = "0x1B5250C")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x1B52568", Offset = "0x1B52568", VA = "0x1B52568")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1B52584", Offset = "0x1B52584", VA = "0x1B52584")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1B525B0", Offset = "0x1B525B0", VA = "0x1B525B0")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1B525CC", Offset = "0x1B525CC", VA = "0x1B525CC")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x1B525E8", Offset = "0x1B525E8", VA = "0x1B525E8")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1B52730", Offset = "0x1B52730", VA = "0x1B52730")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x1B52958", Offset = "0x1B52958", VA = "0x1B52958")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x1B52974", Offset = "0x1B52974", VA = "0x1B52974")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1B52A48", Offset = "0x1B52A48", VA = "0x1B52A48")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x1B52A6C", Offset = "0x1B52A6C", VA = "0x1B52A6C")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x1B52A88", Offset = "0x1B52A88", VA = "0x1B52A88")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x1B52ABC", Offset = "0x1B52ABC", VA = "0x1B52ABC")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x1B52AD8", Offset = "0x1B52AD8", VA = "0x1B52AD8")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x1B52AF4", Offset = "0x1B52AF4", VA = "0x1B52AF4")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x1B52B10", Offset = "0x1B52B10", VA = "0x1B52B10")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x1B52B3C", Offset = "0x1B52B3C", VA = "0x1B52B3C")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x1B52B58", Offset = "0x1B52B58", VA = "0x1B52B58")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x1B52B74", Offset = "0x1B52B74", VA = "0x1B52B74")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x1B52D88", Offset = "0x1B52D88", VA = "0x1B52D88")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x1B52DB4", Offset = "0x1B52DB4", VA = "0x1B52DB4")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x1B52FA4", Offset = "0x1B52FA4", VA = "0x1B52FA4")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x1B52FE8", Offset = "0x1B52FE8", VA = "0x1B52FE8")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x1B53014", Offset = "0x1B53014", VA = "0x1B53014")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x1B53040", Offset = "0x1B53040", VA = "0x1B53040")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1B5306C", Offset = "0x1B5306C", VA = "0x1B5306C")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1B53098", Offset = "0x1B53098", VA = "0x1B53098")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1B53288", Offset = "0x1B53288", VA = "0x1B53288")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1B533AC", Offset = "0x1B533AC", VA = "0x1B533AC")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x1B533E0", Offset = "0x1B533E0", VA = "0x1B533E0")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x1B53414", Offset = "0x1B53414", VA = "0x1B53414")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x1B53448", Offset = "0x1B53448", VA = "0x1B53448")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x1B5348C", Offset = "0x1B5348C", VA = "0x1B5348C")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1B534C0", Offset = "0x1B534C0", VA = "0x1B534C0")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1B53504", Offset = "0x1B53504", VA = "0x1B53504")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x1B53548", Offset = "0x1B53548", VA = "0x1B53548")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1B5358C", Offset = "0x1B5358C", VA = "0x1B5358C")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x1B535C0", Offset = "0x1B535C0", VA = "0x1B535C0")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x1B535F4", Offset = "0x1B535F4", VA = "0x1B535F4")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x1B53628", Offset = "0x1B53628", VA = "0x1B53628")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x1B53654", Offset = "0x1B53654", VA = "0x1B53654")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x1B53680", Offset = "0x1B53680", VA = "0x1B53680")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x1B536AC", Offset = "0x1B536AC", VA = "0x1B536AC")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1B537E8", Offset = "0x1B537E8", VA = "0x1B537E8")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x1B53814", Offset = "0x1B53814", VA = "0x1B53814")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1B53858", Offset = "0x1B53858", VA = "0x1B53858")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x1B53BF0", Offset = "0x1B53BF0", VA = "0x1B53BF0")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1B53C44", Offset = "0x1B53C44", VA = "0x1B53C44")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1B53C78", Offset = "0x1B53C78", VA = "0x1B53C78")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x1B53CAC", Offset = "0x1B53CAC", VA = "0x1B53CAC")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x1B53CE0", Offset = "0x1B53CE0", VA = "0x1B53CE0")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public static class SteamHTTP
	{
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x1B53D14", Offset = "0x1B53D14", VA = "0x1B53D14")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x1B53E78", Offset = "0x1B53E78", VA = "0x1B53E78")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x1B53EAC", Offset = "0x1B53EAC", VA = "0x1B53EAC")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x1B53EE0", Offset = "0x1B53EE0", VA = "0x1B53EE0")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x1B540F0", Offset = "0x1B540F0", VA = "0x1B540F0")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x1B54300", Offset = "0x1B54300", VA = "0x1B54300")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1B54334", Offset = "0x1B54334", VA = "0x1B54334")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x1B54368", Offset = "0x1B54368", VA = "0x1B54368")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x1B54394", Offset = "0x1B54394", VA = "0x1B54394")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x1B543C0", Offset = "0x1B543C0", VA = "0x1B543C0")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x1B544F8", Offset = "0x1B544F8", VA = "0x1B544F8")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x1B54640", Offset = "0x1B54640", VA = "0x1B54640")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x1B54674", Offset = "0x1B54674", VA = "0x1B54674")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x1B546B8", Offset = "0x1B546B8", VA = "0x1B546B8")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x1B54704", Offset = "0x1B54704", VA = "0x1B54704")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x1B54730", Offset = "0x1B54730", VA = "0x1B54730")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x1B54764", Offset = "0x1B54764", VA = "0x1B54764")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x1B548AC", Offset = "0x1B548AC", VA = "0x1B548AC")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x1B54938", Offset = "0x1B54938", VA = "0x1B54938")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x1B54964", Offset = "0x1B54964", VA = "0x1B54964")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x1B54C4C", Offset = "0x1B54C4C", VA = "0x1B54C4C")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x1B54C80", Offset = "0x1B54C80", VA = "0x1B54C80")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x1B54DB0", Offset = "0x1B54DB0", VA = "0x1B54DB0")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x1B54DE4", Offset = "0x1B54DE4", VA = "0x1B54DE4")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x1B54E18", Offset = "0x1B54E18", VA = "0x1B54E18")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BA")]
	public static class SteamInventory
	{
		[Token(Token = "0x6000958")]
		[Address(RVA = "0x1B54E4C", Offset = "0x1B54E4C", VA = "0x1B54E4C")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x1B54E78", Offset = "0x1B54E78", VA = "0x1B54E78")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x1B54EBC", Offset = "0x1B54EBC", VA = "0x1B54EBC")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x1B55094", Offset = "0x1B55094", VA = "0x1B55094")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x1B550C0", Offset = "0x1B550C0", VA = "0x1B550C0")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x1B550F4", Offset = "0x1B550F4", VA = "0x1B550F4")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x1B55120", Offset = "0x1B55120", VA = "0x1B55120")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x1B5514C", Offset = "0x1B5514C", VA = "0x1B5514C")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1B55190", Offset = "0x1B55190", VA = "0x1B55190")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x1B551D4", Offset = "0x1B551D4", VA = "0x1B551D4")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1B55220", Offset = "0x1B55220", VA = "0x1B55220")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x1B5526C", Offset = "0x1B5526C", VA = "0x1B5526C")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1B55298", Offset = "0x1B55298", VA = "0x1B55298")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1B552CC", Offset = "0x1B552CC", VA = "0x1B552CC")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x1B55310", Offset = "0x1B55310", VA = "0x1B55310")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x1B55354", Offset = "0x1B55354", VA = "0x1B55354")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1B553C8", Offset = "0x1B553C8", VA = "0x1B553C8")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x1B55414", Offset = "0x1B55414", VA = "0x1B55414")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x1B55430", Offset = "0x1B55430", VA = "0x1B55430")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1B55464", Offset = "0x1B55464", VA = "0x1B55464")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x1B554E0", Offset = "0x1B554E0", VA = "0x1B554E0")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1B554FC", Offset = "0x1B554FC", VA = "0x1B554FC")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x1B55530", Offset = "0x1B55530", VA = "0x1B55530")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x1B55700", Offset = "0x1B55700", VA = "0x1B55700")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x1B55780", Offset = "0x1B55780", VA = "0x1B55780")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BB")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x1B55DEC", Offset = "0x1B55DEC", VA = "0x1B55DEC")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x1B55E08", Offset = "0x1B55E08", VA = "0x1B55E08")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1B55E7C", Offset = "0x1B55E7C", VA = "0x1B55E7C")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x1B55EE0", Offset = "0x1B55EE0", VA = "0x1B55EE0")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x1B55F3C", Offset = "0x1B55F3C", VA = "0x1B55F3C")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x1B55FB4", Offset = "0x1B55FB4", VA = "0x1B55FB4")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x1B561A4", Offset = "0x1B561A4", VA = "0x1B561A4")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x1B562D0", Offset = "0x1B562D0", VA = "0x1B562D0")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x1B563F4", Offset = "0x1B563F4", VA = "0x1B563F4")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x1B56420", Offset = "0x1B56420", VA = "0x1B56420")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x1B5644C", Offset = "0x1B5644C", VA = "0x1B5644C")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x1B56478", Offset = "0x1B56478", VA = "0x1B56478")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x1B564A4", Offset = "0x1B564A4", VA = "0x1B564A4")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x1B56528", Offset = "0x1B56528", VA = "0x1B56528")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1B565B8", Offset = "0x1B565B8", VA = "0x1B565B8")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x1B56638", Offset = "0x1B56638", VA = "0x1B56638")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x1B56664", Offset = "0x1B56664", VA = "0x1B56664")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x1B56698", Offset = "0x1B56698", VA = "0x1B56698")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x1B566C4", Offset = "0x1B566C4", VA = "0x1B566C4")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x1B56758", Offset = "0x1B56758", VA = "0x1B56758")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x1B56894", Offset = "0x1B56894", VA = "0x1B56894")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x1B56AA4", Offset = "0x1B56AA4", VA = "0x1B56AA4")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x1B56AD0", Offset = "0x1B56AD0", VA = "0x1B56AD0")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x1B56C2C", Offset = "0x1B56C2C", VA = "0x1B56C2C")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x1B56D5C", Offset = "0x1B56D5C", VA = "0x1B56D5C")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x1B56EA0", Offset = "0x1B56EA0", VA = "0x1B56EA0")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x1B57090", Offset = "0x1B57090", VA = "0x1B57090")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x1B570D4", Offset = "0x1B570D4", VA = "0x1B570D4")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1B57138", Offset = "0x1B57138", VA = "0x1B57138")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x1B57164", Offset = "0x1B57164", VA = "0x1B57164")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x1B571B0", Offset = "0x1B571B0", VA = "0x1B571B0")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x1B571FC", Offset = "0x1B571FC", VA = "0x1B571FC")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x1B57230", Offset = "0x1B57230", VA = "0x1B57230")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x1B5725C", Offset = "0x1B5725C", VA = "0x1B5725C")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x1B57290", Offset = "0x1B57290", VA = "0x1B57290")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x1B572C4", Offset = "0x1B572C4", VA = "0x1B572C4")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x1B57348", Offset = "0x1B57348", VA = "0x1B57348")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x1B5737C", Offset = "0x1B5737C", VA = "0x1B5737C")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BC")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x6000997")]
		[Address(RVA = "0x1B573B0", Offset = "0x1B573B0", VA = "0x1B573B0")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1B57494", Offset = "0x1B57494", VA = "0x1B57494")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x1B57534", Offset = "0x1B57534", VA = "0x1B57534")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x1B57618", Offset = "0x1B57618", VA = "0x1B57618")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x1B576FC", Offset = "0x1B576FC", VA = "0x1B576FC")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x1B577E0", Offset = "0x1B577E0", VA = "0x1B577E0")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1B578C4", Offset = "0x1B578C4", VA = "0x1B578C4")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x1B578F0", Offset = "0x1B578F0", VA = "0x1B578F0")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x1B57A08", Offset = "0x1B57A08", VA = "0x1B57A08")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x1B57A34", Offset = "0x1B57A34", VA = "0x1B57A34")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x1B57A60", Offset = "0x1B57A60", VA = "0x1B57A60")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x1B57A8C", Offset = "0x1B57A8C", VA = "0x1B57A8C")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x1B57AB8", Offset = "0x1B57AB8", VA = "0x1B57AB8")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x1B57AEC", Offset = "0x1B57AEC", VA = "0x1B57AEC")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x1B57B9C", Offset = "0x1B57B9C", VA = "0x1B57B9C")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x1B57C4C", Offset = "0x1B57C4C", VA = "0x1B57C4C")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x1B57CFC", Offset = "0x1B57CFC", VA = "0x1B57CFC")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public static class SteamMusic
	{
		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x17A8958", Offset = "0x17A8958", VA = "0x17A8958")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x17A8974", Offset = "0x17A8974", VA = "0x17A8974")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x17A8990", Offset = "0x17A8990", VA = "0x17A8990")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x17A89AC", Offset = "0x17A89AC", VA = "0x17A89AC")]
		public static void Play()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x17A89C8", Offset = "0x17A89C8", VA = "0x17A89C8")]
		public static void Pause()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x17A89E4", Offset = "0x17A89E4", VA = "0x17A89E4")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x17A8A00", Offset = "0x17A8A00", VA = "0x17A8A00")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x17A8A1C", Offset = "0x17A8A1C", VA = "0x17A8A1C")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x17A8A48", Offset = "0x17A8A48", VA = "0x17A8A48")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001BE")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x17A8A64", Offset = "0x17A8A64", VA = "0x17A8A64")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x17A8B8C", Offset = "0x17A8B8C", VA = "0x17A8B8C")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x17A8BA8", Offset = "0x17A8BA8", VA = "0x17A8BA8")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x17A8BC4", Offset = "0x17A8BC4", VA = "0x17A8BC4")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x17A8BF0", Offset = "0x17A8BF0", VA = "0x17A8BF0")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x17A8D18", Offset = "0x17A8D18", VA = "0x17A8D18")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x17A8D4C", Offset = "0x17A8D4C", VA = "0x17A8D4C")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x17A8D78", Offset = "0x17A8D78", VA = "0x17A8D78")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x17A8DA4", Offset = "0x17A8DA4", VA = "0x17A8DA4")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x17A8DD0", Offset = "0x17A8DD0", VA = "0x17A8DD0")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x17A8DFC", Offset = "0x17A8DFC", VA = "0x17A8DFC")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x17A8E28", Offset = "0x17A8E28", VA = "0x17A8E28")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x17A8E54", Offset = "0x17A8E54", VA = "0x17A8E54")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x17A8E80", Offset = "0x17A8E80", VA = "0x17A8E80")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x17A8EAC", Offset = "0x17A8EAC", VA = "0x17A8EAC")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x17A8ED8", Offset = "0x17A8ED8", VA = "0x17A8ED8")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x17A8F04", Offset = "0x17A8F04", VA = "0x17A8F04")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x17A8F20", Offset = "0x17A8F20", VA = "0x17A8F20")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x17A8F4C", Offset = "0x17A8F4C", VA = "0x17A8F4C")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x17A9074", Offset = "0x17A9074", VA = "0x17A9074")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x17A90A0", Offset = "0x17A90A0", VA = "0x17A90A0")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x17A90D4", Offset = "0x17A90D4", VA = "0x17A90D4")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x17A90F0", Offset = "0x17A90F0", VA = "0x17A90F0")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x17A910C", Offset = "0x17A910C", VA = "0x17A910C")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x17A9128", Offset = "0x17A9128", VA = "0x17A9128")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x17A9260", Offset = "0x17A9260", VA = "0x17A9260")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x17A928C", Offset = "0x17A928C", VA = "0x17A928C")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x17A92A8", Offset = "0x17A92A8", VA = "0x17A92A8")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x17A92C4", Offset = "0x17A92C4", VA = "0x17A92C4")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x17A92E0", Offset = "0x17A92E0", VA = "0x17A92E0")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x17A9418", Offset = "0x17A9418", VA = "0x17A9418")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x17A9444", Offset = "0x17A9444", VA = "0x17A9444")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BF")]
	public static class SteamNetworking
	{
		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x17A9460", Offset = "0x17A9460", VA = "0x17A9460")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x17A94BC", Offset = "0x17A94BC", VA = "0x17A94BC")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x17A94F0", Offset = "0x17A94F0", VA = "0x17A94F0")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x17A954C", Offset = "0x17A954C", VA = "0x17A954C")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x17A9578", Offset = "0x17A9578", VA = "0x17A9578")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x17A95A4", Offset = "0x17A95A4", VA = "0x17A95A4")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x17A95D8", Offset = "0x17A95D8", VA = "0x17A95D8")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x17A960C", Offset = "0x17A960C", VA = "0x17A960C")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x17A9638", Offset = "0x17A9638", VA = "0x17A9638")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x17A9694", Offset = "0x17A9694", VA = "0x17A9694")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x17A96F0", Offset = "0x17A96F0", VA = "0x17A96F0")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x17A9744", Offset = "0x17A9744", VA = "0x17A9744")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x17A9778", Offset = "0x17A9778", VA = "0x17A9778")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x17A97AC", Offset = "0x17A97AC", VA = "0x17A97AC")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x17A97F8", Offset = "0x17A97F8", VA = "0x17A97F8")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x17A982C", Offset = "0x17A982C", VA = "0x17A982C")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x17A9878", Offset = "0x17A9878", VA = "0x17A9878")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x17A98BC", Offset = "0x17A98BC", VA = "0x17A98BC")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x17A9918", Offset = "0x17A9918", VA = "0x17A9918")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x17A9974", Offset = "0x17A9974", VA = "0x17A9974")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x17A99B8", Offset = "0x17A99B8", VA = "0x17A99B8")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x17A99E4", Offset = "0x17A99E4", VA = "0x17A99E4")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C0")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x17A9A10", Offset = "0x17A9A10", VA = "0x17A9A10")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x17A9B48", Offset = "0x17A9B48", VA = "0x17A9B48")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x17A9C80", Offset = "0x17A9C80", VA = "0x17A9C80")]
		public static SteamAPICall_t FileWriteAsync(string pchFile, byte[] pvData, uint cubData)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x17A9DEC", Offset = "0x17A9DEC", VA = "0x17A9DEC")]
		public static SteamAPICall_t FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x17A9F58", Offset = "0x17A9F58", VA = "0x17A9F58")]
		public static bool FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x17A9F9C", Offset = "0x17A9F9C", VA = "0x17A9F9C")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x17AA0C4", Offset = "0x17AA0C4", VA = "0x17AA0C4")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x17AA1EC", Offset = "0x17AA1EC", VA = "0x17AA1EC")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x17AA348", Offset = "0x17AA348", VA = "0x17AA348")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x17AA478", Offset = "0x17AA478", VA = "0x17AA478")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x17AA5C4", Offset = "0x17AA5C4", VA = "0x17AA5C4")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x17AA608", Offset = "0x17AA608", VA = "0x17AA608")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x17AA634", Offset = "0x17AA634", VA = "0x17AA634")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x17AA660", Offset = "0x17AA660", VA = "0x17AA660")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x17AA788", Offset = "0x17AA788", VA = "0x17AA788")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x17AA8B0", Offset = "0x17AA8B0", VA = "0x17AA8B0")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x17AA9D8", Offset = "0x17AA9D8", VA = "0x17AA9D8")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x17AAB00", Offset = "0x17AAB00", VA = "0x17AAB00")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x17AAC28", Offset = "0x17AAC28", VA = "0x17AAC28")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x17AAC44", Offset = "0x17AAC44", VA = "0x17AAC44")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x17AAC80", Offset = "0x17AAC80", VA = "0x17AAC80")]
		public static bool GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x17AACB4", Offset = "0x17AACB4", VA = "0x17AACB4")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x17AACD0", Offset = "0x17AACD0", VA = "0x17AACD0")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x17AACEC", Offset = "0x17AACEC", VA = "0x17AACEC")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x17AAD18", Offset = "0x17AAD18", VA = "0x17AAD18")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x17AADAC", Offset = "0x17AADAC", VA = "0x17AADAC")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x17AADF0", Offset = "0x17AADF0", VA = "0x17AADF0")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x17AAE78", Offset = "0x17AAE78", VA = "0x17AAE78")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x17AAED4", Offset = "0x17AAED4", VA = "0x17AAED4")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x17AAEF0", Offset = "0x17AAEF0", VA = "0x17AAEF0")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x17AAF74", Offset = "0x17AAF74", VA = "0x17AAF74")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x17AB39C", Offset = "0x17AB39C", VA = "0x17AB39C")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x17AB420", Offset = "0x17AB420", VA = "0x17AB420")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x17AB550", Offset = "0x17AB550", VA = "0x17AB550")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x17AB680", Offset = "0x17AB680", VA = "0x17AB680")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x17AB7B0", Offset = "0x17AB7B0", VA = "0x17AB7B0")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x17AB8E0", Offset = "0x17AB8E0", VA = "0x17AB8E0")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x17AB914", Offset = "0x17AB914", VA = "0x17AB914")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x17AB99C", Offset = "0x17AB99C", VA = "0x17AB99C")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x17ABA20", Offset = "0x17ABA20", VA = "0x17ABA20")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x17ABAB4", Offset = "0x17ABAB4", VA = "0x17ABAB4")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x17ABB38", Offset = "0x17ABB38", VA = "0x17ABB38")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x17ABBBC", Offset = "0x17ABBBC", VA = "0x17ABBBC")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x17ABC40", Offset = "0x17ABC40", VA = "0x17ABC40")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x17ABCC4", Offset = "0x17ABCC4", VA = "0x17ABCC4")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x17ABD48", Offset = "0x17ABD48", VA = "0x17ABD48")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x17ABE78", Offset = "0x17ABE78", VA = "0x17ABE78")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x17ABEFC", Offset = "0x17ABEFC", VA = "0x17ABEFC")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x17ABF90", Offset = "0x17ABF90", VA = "0x17ABF90")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x17AC014", Offset = "0x17AC014", VA = "0x17AC014")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x17AC108", Offset = "0x17AC108", VA = "0x17AC108")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x17AC5F4", Offset = "0x17AC5F4", VA = "0x17AC5F4")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x17AC688", Offset = "0x17AC688", VA = "0x17AC688")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x17AC71C", Offset = "0x17AC71C", VA = "0x17AC71C")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x17AC828", Offset = "0x17AC828", VA = "0x17AC828")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001C1")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x17AC994", Offset = "0x17AC994", VA = "0x17AC994")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x17ACA48", Offset = "0x17ACA48", VA = "0x17ACA48")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x17ACC88", Offset = "0x17ACC88", VA = "0x17ACC88")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x17ACCA4", Offset = "0x17ACCA4", VA = "0x17ACCA4")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x17ACCD0", Offset = "0x17ACCD0", VA = "0x17ACCD0")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x17ACE00", Offset = "0x17ACE00", VA = "0x17ACE00")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x17ACE34", Offset = "0x17ACE34", VA = "0x17ACE34")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x17ACE68", Offset = "0x17ACE68", VA = "0x17ACE68")]
		public static bool IsScreenshotsHooked()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x17ACE84", Offset = "0x17ACE84", VA = "0x17ACE84")]
		public static ScreenshotHandle AddVRScreenshotToLibrary(EVRScreenshotType eType, string pchFilename, string pchVRFilename)
		{
			return default(ScreenshotHandle);
		}
	}
	[Token(Token = "0x20001C2")]
	public static class SteamUGC
	{
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x17AD0BC", Offset = "0x17AD0BC", VA = "0x17AD0BC")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x17AD188", Offset = "0x17AD188", VA = "0x17AD188")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x17AD238", Offset = "0x17AD238", VA = "0x17AD238")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x17AD2C8", Offset = "0x17AD2C8", VA = "0x17AD2C8")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x17AD34C", Offset = "0x17AD34C", VA = "0x17AD34C")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x17AD390", Offset = "0x17AD390", VA = "0x17AD390")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x17AD480", Offset = "0x17AD480", VA = "0x17AD480")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x17AD570", Offset = "0x17AD570", VA = "0x17AD570")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x17AD5BC", Offset = "0x17AD5BC", VA = "0x17AD5BC")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x17AD608", Offset = "0x17AD608", VA = "0x17AD608")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x17AD63C", Offset = "0x17AD63C", VA = "0x17AD63C")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x17AD7B4", Offset = "0x17AD7B4", VA = "0x17AD7B4")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x17AD7E8", Offset = "0x17AD7E8", VA = "0x17AD7E8")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x17AD94C", Offset = "0x17AD94C", VA = "0x17AD94C")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x17AD978", Offset = "0x17AD978", VA = "0x17AD978")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x17ADAA8", Offset = "0x17ADAA8", VA = "0x17ADAA8")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x17ADBD8", Offset = "0x17ADBD8", VA = "0x17ADBD8")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x17ADC0C", Offset = "0x17ADC0C", VA = "0x17ADC0C")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x17ADC40", Offset = "0x17ADC40", VA = "0x17ADC40")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x17ADC74", Offset = "0x17ADC74", VA = "0x17ADC74")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x17ADCA8", Offset = "0x17ADCA8", VA = "0x17ADCA8")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x17ADCDC", Offset = "0x17ADCDC", VA = "0x17ADCDC")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x17ADD10", Offset = "0x17ADD10", VA = "0x17ADD10")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x17ADD44", Offset = "0x17ADD44", VA = "0x17ADD44")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x17ADD78", Offset = "0x17ADD78", VA = "0x17ADD78")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x17ADEA8", Offset = "0x17ADEA8", VA = "0x17ADEA8")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x17ADEDC", Offset = "0x17ADEDC", VA = "0x17ADEDC")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x17AE00C", Offset = "0x17AE00C", VA = "0x17AE00C")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x17AE040", Offset = "0x17AE040", VA = "0x17AE040")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x17AE170", Offset = "0x17AE170", VA = "0x17AE170")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x17AE1A4", Offset = "0x17AE1A4", VA = "0x17AE1A4")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x17AE3B4", Offset = "0x17AE3B4", VA = "0x17AE3B4")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x17AE448", Offset = "0x17AE448", VA = "0x17AE448")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x17AE4DC", Offset = "0x17AE4DC", VA = "0x17AE4DC")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x17AE570", Offset = "0x17AE570", VA = "0x17AE570")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x17AE6A0", Offset = "0x17AE6A0", VA = "0x17AE6A0")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x17AE7D0", Offset = "0x17AE7D0", VA = "0x17AE7D0")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x17AE900", Offset = "0x17AE900", VA = "0x17AE900")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x17AEA30", Offset = "0x17AEA30", VA = "0x17AEA30")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x17AEA64", Offset = "0x17AEA64", VA = "0x17AEA64")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x17AEAEC", Offset = "0x17AEAEC", VA = "0x17AEAEC")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x17AEC1C", Offset = "0x17AEC1C", VA = "0x17AEC1C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x17AED4C", Offset = "0x17AED4C", VA = "0x17AED4C")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x17AEE7C", Offset = "0x17AEE7C", VA = "0x17AEE7C")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x17AF08C", Offset = "0x17AF08C", VA = "0x17AF08C")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x17AF1C4", Offset = "0x17AF1C4", VA = "0x17AF1C4")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x17AF2F4", Offset = "0x17AF2F4", VA = "0x17AF2F4")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x17AF42C", Offset = "0x17AF42C", VA = "0x17AF42C")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x17AF564", Offset = "0x17AF564", VA = "0x17AF564")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x17AF598", Offset = "0x17AF598", VA = "0x17AF598")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x17AF6FC", Offset = "0x17AF6FC", VA = "0x17AF6FC")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x17AF740", Offset = "0x17AF740", VA = "0x17AF740")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x17AF7D4", Offset = "0x17AF7D4", VA = "0x17AF7D4")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x17AF858", Offset = "0x17AF858", VA = "0x17AF858")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x17AF8EC", Offset = "0x17AF8EC", VA = "0x17AF8EC")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x17AF980", Offset = "0x17AF980", VA = "0x17AF980")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x17AFA04", Offset = "0x17AFA04", VA = "0x17AFA04")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x17AFA88", Offset = "0x17AFA88", VA = "0x17AFA88")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x17AFAA4", Offset = "0x17AFAA4", VA = "0x17AFAA4")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x17AFAD8", Offset = "0x17AFAD8", VA = "0x17AFAD8")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x17AFB04", Offset = "0x17AFB04", VA = "0x17AFB04")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x17AFC04", Offset = "0x17AFC04", VA = "0x17AFC04")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x17AFC48", Offset = "0x17AFC48", VA = "0x17AFC48")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x17AFC7C", Offset = "0x17AFC7C", VA = "0x17AFC7C")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x17AFDAC", Offset = "0x17AFDAC", VA = "0x17AFDAC")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x17AFDD8", Offset = "0x17AFDD8", VA = "0x17AFDD8")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x17AFE6C", Offset = "0x17AFE6C", VA = "0x17AFE6C")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x17AFF00", Offset = "0x17AFF00", VA = "0x17AFF00")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x17AFF7C", Offset = "0x17AFF7C", VA = "0x17AFF7C")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x17B0010", Offset = "0x17B0010", VA = "0x17B0010")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001C3")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x17B00A4", Offset = "0x17B00A4", VA = "0x17B00A4")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x17B0220", Offset = "0x17B0220", VA = "0x17B0220")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x17B0264", Offset = "0x17B0264", VA = "0x17B0264")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x17B02B0", Offset = "0x17B02B0", VA = "0x17B02B0")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x17B02DC", Offset = "0x17B02DC", VA = "0x17B02DC")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C4")]
	public static class SteamUser
	{
		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x17B0414", Offset = "0x17B0414", VA = "0x17B0414")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x17B0440", Offset = "0x17B0440", VA = "0x17B0440")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x17B045C", Offset = "0x17B045C", VA = "0x17B045C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x17B04D8", Offset = "0x17B04D8", VA = "0x17B04D8")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x17B053C", Offset = "0x17B053C", VA = "0x17B053C")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x17B0570", Offset = "0x17B0570", VA = "0x17B0570")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x17B069C", Offset = "0x17B069C", VA = "0x17B069C")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x17B0770", Offset = "0x17B0770", VA = "0x17B0770")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x17B078C", Offset = "0x17B078C", VA = "0x17B078C")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x17B07A8", Offset = "0x17B07A8", VA = "0x17B07A8")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x17B0800", Offset = "0x17B0800", VA = "0x17B0800")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x17B0898", Offset = "0x17B0898", VA = "0x17B0898")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x17B08FC", Offset = "0x17B08FC", VA = "0x17B08FC")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x17B0918", Offset = "0x17B0918", VA = "0x17B0918")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x17B09BC", Offset = "0x17B09BC", VA = "0x17B09BC")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x17B0A00", Offset = "0x17B0A00", VA = "0x17B0A00")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x17B0A2C", Offset = "0x17B0A2C", VA = "0x17B0A2C")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x17B0A58", Offset = "0x17B0A58", VA = "0x17B0A58")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x17B0A8C", Offset = "0x17B0A8C", VA = "0x17B0A8C")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x17B0AA8", Offset = "0x17B0AA8", VA = "0x17B0AA8")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x17B0AEC", Offset = "0x17B0AEC", VA = "0x17B0AEC")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x17B0B80", Offset = "0x17B0B80", VA = "0x17B0B80")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x17B0BC4", Offset = "0x17B0BC4", VA = "0x17B0BC4")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x17B0BF8", Offset = "0x17B0BF8", VA = "0x17B0BF8")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x17B0C14", Offset = "0x17B0C14", VA = "0x17B0C14")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x17B0D70", Offset = "0x17B0D70", VA = "0x17B0D70")]
		public static bool BIsPhoneVerified()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x17B0D8C", Offset = "0x17B0D8C", VA = "0x17B0D8C")]
		public static bool BIsTwoFactorEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x17B0DA8", Offset = "0x17B0DA8", VA = "0x17B0DA8")]
		public static bool BIsPhoneIdentifying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x17B0DC4", Offset = "0x17B0DC4", VA = "0x17B0DC4")]
		public static bool BIsPhoneRequiringVerification()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C5")]
	public static class SteamUserStats
	{
		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x17B0DE0", Offset = "0x17B0DE0", VA = "0x17B0DE0")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x17B0DFC", Offset = "0x17B0DFC", VA = "0x17B0DFC")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x17B0F2C", Offset = "0x17B0F2C", VA = "0x17B0F2C")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x17B105C", Offset = "0x17B105C", VA = "0x17B105C")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x17B118C", Offset = "0x17B118C", VA = "0x17B118C")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x17B12C4", Offset = "0x17B12C4", VA = "0x17B12C4")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x17B1404", Offset = "0x17B1404", VA = "0x17B1404")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x17B1534", Offset = "0x17B1534", VA = "0x17B1534")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x17B165C", Offset = "0x17B165C", VA = "0x17B165C")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x17B1784", Offset = "0x17B1784", VA = "0x17B1784")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x17B18BC", Offset = "0x17B18BC", VA = "0x17B18BC")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x17B18D8", Offset = "0x17B18D8", VA = "0x17B18D8")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x17B1A00", Offset = "0x17B1A00", VA = "0x17B1A00")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x17B1C00", Offset = "0x17B1C00", VA = "0x17B1C00")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x17B1D38", Offset = "0x17B1D38", VA = "0x17B1D38")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x17B1D54", Offset = "0x17B1D54", VA = "0x17B1D54")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x17B1D88", Offset = "0x17B1D88", VA = "0x17B1D88")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x17B1E0C", Offset = "0x17B1E0C", VA = "0x17B1E0C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x17B1F44", Offset = "0x17B1F44", VA = "0x17B1F44")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x17B207C", Offset = "0x17B207C", VA = "0x17B207C")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x17B21B4", Offset = "0x17B21B4", VA = "0x17B21B4")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x17B22FC", Offset = "0x17B22FC", VA = "0x17B22FC")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x17B2328", Offset = "0x17B2328", VA = "0x17B2328")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x17B2494", Offset = "0x17B2494", VA = "0x17B2494")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x17B25F0", Offset = "0x17B25F0", VA = "0x17B25F0")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x17B2624", Offset = "0x17B2624", VA = "0x17B2624")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x17B2650", Offset = "0x17B2650", VA = "0x17B2650")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x17B267C", Offset = "0x17B267C", VA = "0x17B267C")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x17B26A8", Offset = "0x17B26A8", VA = "0x17B26A8")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x17B2754", Offset = "0x17B2754", VA = "0x17B2754")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x17B27F0", Offset = "0x17B27F0", VA = "0x17B27F0")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x17B284C", Offset = "0x17B284C", VA = "0x17B284C")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x17B2900", Offset = "0x17B2900", VA = "0x17B2900")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x17B2994", Offset = "0x17B2994", VA = "0x17B2994")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x17B2A10", Offset = "0x17B2A10", VA = "0x17B2A10")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x17B2A8C", Offset = "0x17B2A8C", VA = "0x17B2A8C")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x17B2B80", Offset = "0x17B2B80", VA = "0x17B2B80")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x17B2C88", Offset = "0x17B2C88", VA = "0x17B2C88")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x17B2DB8", Offset = "0x17B2DB8", VA = "0x17B2DB8")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x17B2E3C", Offset = "0x17B2E3C", VA = "0x17B2E3C")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x17B2F6C", Offset = "0x17B2F6C", VA = "0x17B2F6C")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x17B309C", Offset = "0x17B309C", VA = "0x17B309C")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x17B31D4", Offset = "0x17B31D4", VA = "0x17B31D4")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C6")]
	public static class SteamUtils
	{
		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x17B330C", Offset = "0x17B330C", VA = "0x17B330C")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x17B3328", Offset = "0x17B3328", VA = "0x17B3328")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x17B3344", Offset = "0x17B3344", VA = "0x17B3344")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x17B3360", Offset = "0x17B3360", VA = "0x17B3360")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x17B337C", Offset = "0x17B337C", VA = "0x17B337C")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x17B33A0", Offset = "0x17B33A0", VA = "0x17B33A0")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x17B33E4", Offset = "0x17B33E4", VA = "0x17B33E4")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x17B3428", Offset = "0x17B3428", VA = "0x17B3428")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x17B345C", Offset = "0x17B345C", VA = "0x17B345C")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x17B3478", Offset = "0x17B3478", VA = "0x17B3478")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x17B34FC", Offset = "0x17B34FC", VA = "0x17B34FC")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x17B3528", Offset = "0x17B3528", VA = "0x17B3528")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x17B355C", Offset = "0x17B355C", VA = "0x17B355C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x17B3588", Offset = "0x17B3588", VA = "0x17B3588")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x17B35E4", Offset = "0x17B35E4", VA = "0x17B35E4")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x17B3600", Offset = "0x17B3600", VA = "0x17B3600")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x17B362C", Offset = "0x17B362C", VA = "0x17B362C")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x17B3648", Offset = "0x17B3648", VA = "0x17B3648")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x17B3664", Offset = "0x17B3664", VA = "0x17B3664")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x17B37C0", Offset = "0x17B37C0", VA = "0x17B37C0")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x17B39E8", Offset = "0x17B39E8", VA = "0x17B39E8")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x17B3A04", Offset = "0x17B3A04", VA = "0x17B3A04")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x17B3AD8", Offset = "0x17B3AD8", VA = "0x17B3AD8")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x17B3AFC", Offset = "0x17B3AFC", VA = "0x17B3AFC")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x17B3B18", Offset = "0x17B3B18", VA = "0x17B3B18")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x17B3B4C", Offset = "0x17B3B4C", VA = "0x17B3B4C")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x17B3B68", Offset = "0x17B3B68", VA = "0x17B3B68")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x17B3B84", Offset = "0x17B3B84", VA = "0x17B3B84")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x17B3BA0", Offset = "0x17B3BA0", VA = "0x17B3BA0")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x17B3BCC", Offset = "0x17B3BCC", VA = "0x17B3BCC")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x17B3BF8", Offset = "0x17B3BF8", VA = "0x17B3BF8")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x17B3C24", Offset = "0x17B3C24", VA = "0x17B3C24")]
		public static void GetOPFSettings(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x17B3C50", Offset = "0x17B3C50", VA = "0x17B3C50")]
		public static bool GetOPFStringForApp(AppId_t unVideoAppID, out string pchBuffer, ref int pnBufferSize)
		{
			return default(bool);
		}
	}
	[Serializable]
	[StructLayout(0)]
	[Token(Token = "0x20001C8")]
	public class gameserveritem_t
	{
		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x17B445C", Offset = "0x17B445C", VA = "0x17B445C")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x17B44E8", Offset = "0x17B44E8", VA = "0x17B44E8")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x17B457C", Offset = "0x17B457C", VA = "0x17B457C")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x17B4608", Offset = "0x17B4608", VA = "0x17B4608")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x17B469C", Offset = "0x17B469C", VA = "0x17B469C")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x17B4728", Offset = "0x17B4728", VA = "0x17B4728")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x17B47BC", Offset = "0x17B47BC", VA = "0x17B47BC")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x17B4890", Offset = "0x17B4890", VA = "0x17B4890")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x17B4924", Offset = "0x17B4924", VA = "0x17B4924")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x17B49B0", Offset = "0x17B49B0", VA = "0x17B49B0")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x17B4A44", Offset = "0x17B4A44", VA = "0x17B4A44")]
		public gameserveritem_t()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C9")]
	public struct servernetadr_t
	{
		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x17B4A4C", Offset = "0x17B4A4C", VA = "0x17B4A4C")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x17B4A5C", Offset = "0x17B4A5C", VA = "0x17B4A5C")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x17B4A64", Offset = "0x17B4A64", VA = "0x17B4A64")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x17B4A6C", Offset = "0x17B4A6C", VA = "0x17B4A6C")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x17B4A74", Offset = "0x17B4A74", VA = "0x17B4A74")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x17B4A7C", Offset = "0x17B4A7C", VA = "0x17B4A7C")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x17B4A84", Offset = "0x17B4A84", VA = "0x17B4A84")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x17B4880", Offset = "0x17B4880", VA = "0x17B4880")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x17B4C80", Offset = "0x17B4C80", VA = "0x17B4C80")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x17B4A8C", Offset = "0x17B4A8C", VA = "0x17B4A8C")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x17B4C90", Offset = "0x17B4C90", VA = "0x17B4C90")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x17B4CC4", Offset = "0x17B4CC4", VA = "0x17B4CC4")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x17B4CF8", Offset = "0x17B4CF8", VA = "0x17B4CF8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x17B4DD4", Offset = "0x17B4DD4", VA = "0x17B4DD4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x17B4DA0", Offset = "0x17B4DA0", VA = "0x17B4DA0")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x17B4E2C", Offset = "0x17B4E2C", VA = "0x17B4E2C")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x17B4E60", Offset = "0x17B4E60", VA = "0x17B4E60")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x17B4E94", Offset = "0x17B4E94", VA = "0x17B4E94")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001CA")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x12481A4", Offset = "0x12481A4", VA = "0x12481A4")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x12481AC", Offset = "0x12481AC", VA = "0x12481AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x12481B4", Offset = "0x12481B4", VA = "0x12481B4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1248248", Offset = "0x1248248", VA = "0x1248248", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x124823C", Offset = "0x124823C", VA = "0x124823C")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1248250", Offset = "0x1248250", VA = "0x1248250")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x12479D8", Offset = "0x12479D8", VA = "0x12479D8")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x124825C", Offset = "0x124825C", VA = "0x124825C")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x1248260", Offset = "0x1248260", VA = "0x1248260", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x1248270", Offset = "0x1248270", VA = "0x1248270", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001CB")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x1248278", Offset = "0x1248278", VA = "0x1248278")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x1248280", Offset = "0x1248280", VA = "0x1248280", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x1248288", Offset = "0x1248288", VA = "0x1248288", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x124831C", Offset = "0x124831C", VA = "0x124831C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x1248310", Offset = "0x1248310", VA = "0x1248310")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x1248324", Offset = "0x1248324", VA = "0x1248324")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1247A60", Offset = "0x1247A60", VA = "0x1247A60")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x1248330", Offset = "0x1248330", VA = "0x1248330")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x1248334", Offset = "0x1248334", VA = "0x1248334", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1248344", Offset = "0x1248344", VA = "0x1248344", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001CC")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB44488", Offset = "0xB44488")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x20001CD")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB4449C", Offset = "0xB4449C")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Serializable]
	[Token(Token = "0x20001CE")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x2000565")]
		public enum EGameIDType
		{
			[Token(Token = "0x4001D54")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4001D55")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4001D56")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4001D57")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x1760364", Offset = "0x1760364", VA = "0x1760364")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x176036C", Offset = "0x176036C", VA = "0x176036C")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x17603F0", Offset = "0x17603F0", VA = "0x17603F0")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x1760440", Offset = "0x1760440", VA = "0x1760440")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x1760458", Offset = "0x1760458", VA = "0x1760458")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x1760470", Offset = "0x1760470", VA = "0x1760470")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x1760488", Offset = "0x1760488", VA = "0x1760488")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x17604A0", Offset = "0x17604A0", VA = "0x17604A0")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x1760450", Offset = "0x1760450", VA = "0x1760450")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x17604AC", Offset = "0x17604AC", VA = "0x17604AC")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x17604B4", Offset = "0x17604B4", VA = "0x17604B4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x17605F0", Offset = "0x17605F0", VA = "0x17605F0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x17605F8", Offset = "0x17605F8", VA = "0x17605F8")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x1760378", Offset = "0x1760378", VA = "0x1760378")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x1760430", Offset = "0x1760430", VA = "0x1760430")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x1760438", Offset = "0x1760438", VA = "0x1760438")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x1760600", Offset = "0x1760600", VA = "0x1760600", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x1760608", Offset = "0x1760608", VA = "0x1760608", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x176069C", Offset = "0x176069C", VA = "0x176069C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x1760690", Offset = "0x1760690", VA = "0x1760690")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x17606A4", Offset = "0x17606A4", VA = "0x17606A4")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x17606B0", Offset = "0x17606B0", VA = "0x17606B0")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x17606B4", Offset = "0x17606B4", VA = "0x17606B4")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x17606B8", Offset = "0x17606B8", VA = "0x17606B8", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x17606C8", Offset = "0x17606C8", VA = "0x17606C8", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001CF")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x17606D0", Offset = "0x17606D0", VA = "0x17606D0")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x1760734", Offset = "0x1760734", VA = "0x1760734")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x1760774", Offset = "0x1760774", VA = "0x1760774")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x17606FC", Offset = "0x17606FC", VA = "0x17606FC")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1760754", Offset = "0x1760754", VA = "0x1760754")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x17607B4", Offset = "0x17607B4", VA = "0x17607B4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x17607BC", Offset = "0x17607BC", VA = "0x17607BC")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x17607CC", Offset = "0x17607CC", VA = "0x17607CC")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x17607DC", Offset = "0x17607DC", VA = "0x17607DC")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1760840", Offset = "0x1760840", VA = "0x1760840")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x1760864", Offset = "0x1760864", VA = "0x1760864")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x176087C", Offset = "0x176087C", VA = "0x176087C")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x1760894", Offset = "0x1760894", VA = "0x1760894")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x17608AC", Offset = "0x17608AC", VA = "0x17608AC")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x17608C4", Offset = "0x17608C4", VA = "0x17608C4")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x17608DC", Offset = "0x17608DC", VA = "0x17608DC")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x17608F8", Offset = "0x17608F8", VA = "0x17608F8")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1760814", Offset = "0x1760814", VA = "0x1760814")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x1760910", Offset = "0x1760910", VA = "0x1760910")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x1760928", Offset = "0x1760928", VA = "0x1760928")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x176077C", Offset = "0x176077C", VA = "0x176077C")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x17607A0", Offset = "0x17607A0", VA = "0x17607A0")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x176078C", Offset = "0x176078C", VA = "0x176078C")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x1760784", Offset = "0x1760784", VA = "0x1760784")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x1760940", Offset = "0x1760940", VA = "0x1760940")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1760960", Offset = "0x1760960", VA = "0x1760960")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x176080C", Offset = "0x176080C", VA = "0x176080C")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1760834", Offset = "0x1760834", VA = "0x1760834")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x1760858", Offset = "0x1760858", VA = "0x1760858")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x1760984", Offset = "0x1760984", VA = "0x1760984")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x176098C", Offset = "0x176098C", VA = "0x176098C")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x1760A0C", Offset = "0x1760A0C", VA = "0x1760A0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x1760A14", Offset = "0x1760A14", VA = "0x1760A14", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x1760AE0", Offset = "0x1760AE0", VA = "0x1760AE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1760AD4", Offset = "0x1760AD4", VA = "0x1760AD4")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x1760AE8", Offset = "0x1760AE8", VA = "0x1760AE8")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x1760B5C", Offset = "0x1760B5C", VA = "0x1760B5C")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x1760B60", Offset = "0x1760B60", VA = "0x1760B60")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x1760B64", Offset = "0x1760B64", VA = "0x1760B64", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x1760B74", Offset = "0x1760B74", VA = "0x1760B74", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x1247A68", Offset = "0x1247A68", VA = "0x1247A68")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x1247A70", Offset = "0x1247A70", VA = "0x1247A70", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1247A78", Offset = "0x1247A78", VA = "0x1247A78", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1247B44", Offset = "0x1247B44", VA = "0x1247B44", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x1247B38", Offset = "0x1247B38", VA = "0x1247B38")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1247B4C", Offset = "0x1247B4C", VA = "0x1247B4C")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1247BC0", Offset = "0x1247BC0", VA = "0x1247BC0")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1247BC8", Offset = "0x1247BC8", VA = "0x1247BC8")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1247BCC", Offset = "0x1247BCC", VA = "0x1247BCC", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1247BDC", Offset = "0x1247BDC", VA = "0x1247BDC", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public struct ControllerActionSetHandle_t : IEquatable<ControllerActionSetHandle_t>, IComparable<ControllerActionSetHandle_t>
	{
		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerActionSetHandle;

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1246EDC", Offset = "0x1246EDC", VA = "0x1246EDC")]
		public ControllerActionSetHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1246EE4", Offset = "0x1246EE4", VA = "0x1246EE4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1246EEC", Offset = "0x1246EEC", VA = "0x1246EEC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1246F80", Offset = "0x1246F80", VA = "0x1246F80", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x1246F74", Offset = "0x1246F74", VA = "0x1246F74")]
		public static bool operator ==(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x1246F88", Offset = "0x1246F88", VA = "0x1246F88")]
		public static bool operator !=(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1246F94", Offset = "0x1246F94", VA = "0x1246F94")]
		public static explicit operator ControllerActionSetHandle_t(ulong value)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1246F98", Offset = "0x1246F98", VA = "0x1246F98")]
		public static explicit operator ulong(ControllerActionSetHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1246F9C", Offset = "0x1246F9C", VA = "0x1246F9C", Slot = "4")]
		public bool Equals(ControllerActionSetHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1246FAC", Offset = "0x1246FAC", VA = "0x1246FAC", Slot = "5")]
		public int CompareTo(ControllerActionSetHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public struct ControllerAnalogActionHandle_t : IEquatable<ControllerAnalogActionHandle_t>, IComparable<ControllerAnalogActionHandle_t>
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerAnalogActionHandle;

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x1246FB4", Offset = "0x1246FB4", VA = "0x1246FB4")]
		public ControllerAnalogActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1246FBC", Offset = "0x1246FBC", VA = "0x1246FBC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x1246FC4", Offset = "0x1246FC4", VA = "0x1246FC4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x1247058", Offset = "0x1247058", VA = "0x1247058", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x124704C", Offset = "0x124704C", VA = "0x124704C")]
		public static bool operator ==(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1247060", Offset = "0x1247060", VA = "0x1247060")]
		public static bool operator !=(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x124706C", Offset = "0x124706C", VA = "0x124706C")]
		public static explicit operator ControllerAnalogActionHandle_t(ulong value)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x1247070", Offset = "0x1247070", VA = "0x1247070")]
		public static explicit operator ulong(ControllerAnalogActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1247074", Offset = "0x1247074", VA = "0x1247074", Slot = "4")]
		public bool Equals(ControllerAnalogActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x1247084", Offset = "0x1247084", VA = "0x1247084", Slot = "5")]
		public int CompareTo(ControllerAnalogActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public struct ControllerDigitalActionHandle_t : IEquatable<ControllerDigitalActionHandle_t>, IComparable<ControllerDigitalActionHandle_t>
	{
		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerDigitalActionHandle;

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x124708C", Offset = "0x124708C", VA = "0x124708C")]
		public ControllerDigitalActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x1247094", Offset = "0x1247094", VA = "0x1247094", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x124709C", Offset = "0x124709C", VA = "0x124709C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x1247130", Offset = "0x1247130", VA = "0x1247130", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x1247124", Offset = "0x1247124", VA = "0x1247124")]
		public static bool operator ==(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x1247138", Offset = "0x1247138", VA = "0x1247138")]
		public static bool operator !=(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1247144", Offset = "0x1247144", VA = "0x1247144")]
		public static explicit operator ControllerDigitalActionHandle_t(ulong value)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1247148", Offset = "0x1247148", VA = "0x1247148")]
		public static explicit operator ulong(ControllerDigitalActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x124714C", Offset = "0x124714C", VA = "0x124714C", Slot = "4")]
		public bool Equals(ControllerDigitalActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x124715C", Offset = "0x124715C", VA = "0x124715C", Slot = "5")]
		public int CompareTo(ControllerDigitalActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public struct ControllerHandle_t : IEquatable<ControllerHandle_t>, IComparable<ControllerHandle_t>
	{
		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerHandle;

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x1247164", Offset = "0x1247164", VA = "0x1247164")]
		public ControllerHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x124716C", Offset = "0x124716C", VA = "0x124716C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x1247174", Offset = "0x1247174", VA = "0x1247174", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x1247208", Offset = "0x1247208", VA = "0x1247208", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x12471FC", Offset = "0x12471FC", VA = "0x12471FC")]
		public static bool operator ==(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x1247210", Offset = "0x1247210", VA = "0x1247210")]
		public static bool operator !=(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x124721C", Offset = "0x124721C", VA = "0x124721C")]
		public static explicit operator ControllerHandle_t(ulong value)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x1247220", Offset = "0x1247220", VA = "0x1247220")]
		public static explicit operator ulong(ControllerHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x1247224", Offset = "0x1247224", VA = "0x1247224", Slot = "4")]
		public bool Equals(ControllerHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x1247234", Offset = "0x1247234", VA = "0x1247234", Slot = "5")]
		public int CompareTo(ControllerHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x1247418", Offset = "0x1247418", VA = "0x1247418")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x1247420", Offset = "0x1247420", VA = "0x1247420", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x1247428", Offset = "0x1247428", VA = "0x1247428", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x12474F8", Offset = "0x12474F8", VA = "0x12474F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x12474E8", Offset = "0x12474E8", VA = "0x12474E8")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x1247500", Offset = "0x1247500", VA = "0x1247500")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x1247578", Offset = "0x1247578", VA = "0x1247578")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x1247580", Offset = "0x1247580", VA = "0x1247580")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x1247584", Offset = "0x1247584", VA = "0x1247584", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x1247594", Offset = "0x1247594", VA = "0x1247594", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1247C34", Offset = "0x1247C34", VA = "0x1247C34")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x1247C3C", Offset = "0x1247C3C", VA = "0x1247C3C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x1247C44", Offset = "0x1247C44", VA = "0x1247C44", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x1247D10", Offset = "0x1247D10", VA = "0x1247D10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x1247D04", Offset = "0x1247D04", VA = "0x1247D04")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x1247D18", Offset = "0x1247D18", VA = "0x1247D18")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x1247D8C", Offset = "0x1247D8C", VA = "0x1247D8C")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x1247D94", Offset = "0x1247D94", VA = "0x1247D94")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x1247D98", Offset = "0x1247D98", VA = "0x1247D98", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x1247DA8", Offset = "0x1247DA8", VA = "0x1247DA8", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D7")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x124834C", Offset = "0x124834C", VA = "0x124834C")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1248354", Offset = "0x1248354", VA = "0x1248354", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x124835C", Offset = "0x124835C", VA = "0x124835C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x1248428", Offset = "0x1248428", VA = "0x1248428", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x124841C", Offset = "0x124841C", VA = "0x124841C")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x1248430", Offset = "0x1248430", VA = "0x1248430")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x12484A4", Offset = "0x12484A4", VA = "0x12484A4")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x12484AC", Offset = "0x12484AC", VA = "0x12484AC")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x12484B0", Offset = "0x12484B0", VA = "0x12484B0", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x12484C0", Offset = "0x12484C0", VA = "0x12484C0", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D8")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x1248518", Offset = "0x1248518", VA = "0x1248518")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x1248520", Offset = "0x1248520", VA = "0x1248520", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x1248528", Offset = "0x1248528", VA = "0x1248528", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x12485F4", Offset = "0x12485F4", VA = "0x12485F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x12485E8", Offset = "0x12485E8", VA = "0x12485E8")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x12485FC", Offset = "0x12485FC", VA = "0x12485FC")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x1248670", Offset = "0x1248670", VA = "0x1248670")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x1248678", Offset = "0x1248678", VA = "0x1248678")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x124867C", Offset = "0x124867C", VA = "0x124867C", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x124868C", Offset = "0x124868C", VA = "0x124868C", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001D9")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x1B557C4", Offset = "0x1B557C4", VA = "0x1B557C4")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x1B557CC", Offset = "0x1B557CC", VA = "0x1B557CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x1B557D4", Offset = "0x1B557D4", VA = "0x1B557D4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x1B558A0", Offset = "0x1B558A0", VA = "0x1B558A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x1B55894", Offset = "0x1B55894", VA = "0x1B55894")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x1B558A8", Offset = "0x1B558A8", VA = "0x1B558A8")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x1B5591C", Offset = "0x1B5591C", VA = "0x1B5591C")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1B55924", Offset = "0x1B55924", VA = "0x1B55924")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x1B55928", Offset = "0x1B55928", VA = "0x1B55928", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1B55938", Offset = "0x1B55938", VA = "0x1B55938", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DA")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x1B55994", Offset = "0x1B55994", VA = "0x1B55994")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x1B5599C", Offset = "0x1B5599C", VA = "0x1B5599C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x1B559A4", Offset = "0x1B559A4", VA = "0x1B559A4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x1B55A38", Offset = "0x1B55A38", VA = "0x1B55A38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x1B55A2C", Offset = "0x1B55A2C", VA = "0x1B55A2C")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x1B55A40", Offset = "0x1B55A40", VA = "0x1B55A40")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x1B55A4C", Offset = "0x1B55A4C", VA = "0x1B55A4C")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x1B55A54", Offset = "0x1B55A54", VA = "0x1B55A54")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x1B55A58", Offset = "0x1B55A58", VA = "0x1B55A58", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x1B55A68", Offset = "0x1B55A68", VA = "0x1B55A68", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DB")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x1B55A70", Offset = "0x1B55A70", VA = "0x1B55A70")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x1B55A78", Offset = "0x1B55A78", VA = "0x1B55A78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x1B55A80", Offset = "0x1B55A80", VA = "0x1B55A80", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x1B55B4C", Offset = "0x1B55B4C", VA = "0x1B55B4C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x1B55B40", Offset = "0x1B55B40", VA = "0x1B55B40")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x1B55B54", Offset = "0x1B55B54", VA = "0x1B55B54")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x1B55BC8", Offset = "0x1B55BC8", VA = "0x1B55BC8")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x1B55BCC", Offset = "0x1B55BCC", VA = "0x1B55BCC")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x1B55BD0", Offset = "0x1B55BD0", VA = "0x1B55BD0", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x1B55BE0", Offset = "0x1B55BE0", VA = "0x1B55BE0", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DC")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x1247E00", Offset = "0x1247E00", VA = "0x1247E00")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x1247E08", Offset = "0x1247E08", VA = "0x1247E08", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x1247E10", Offset = "0x1247E10", VA = "0x1247E10", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x1247EE4", Offset = "0x1247EE4", VA = "0x1247EE4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x1247EDC", Offset = "0x1247EDC", VA = "0x1247EDC")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x1247EEC", Offset = "0x1247EEC", VA = "0x1247EEC")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x1247F70", Offset = "0x1247F70", VA = "0x1247F70")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x1247F74", Offset = "0x1247F74", VA = "0x1247F74")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x1247F78", Offset = "0x1247F78", VA = "0x1247F78", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DD")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x1247FD4", Offset = "0x1247FD4", VA = "0x1247FD4")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x1247FDC", Offset = "0x1247FDC", VA = "0x1247FDC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x1247FE4", Offset = "0x1247FE4", VA = "0x1247FE4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x12480B0", Offset = "0x12480B0", VA = "0x12480B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x12480A4", Offset = "0x12480A4", VA = "0x12480A4")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x12480B8", Offset = "0x12480B8", VA = "0x12480B8")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x124812C", Offset = "0x124812C", VA = "0x124812C")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1248134", Offset = "0x1248134", VA = "0x1248134")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x1248138", Offset = "0x1248138", VA = "0x1248138", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x1248148", Offset = "0x1248148", VA = "0x1248148", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DE")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x1B4524C", Offset = "0x1B4524C", VA = "0x1B4524C")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x1B45254", Offset = "0x1B45254", VA = "0x1B45254", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x1B4525C", Offset = "0x1B4525C", VA = "0x1B4525C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x1B452F0", Offset = "0x1B452F0", VA = "0x1B452F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x1B452E4", Offset = "0x1B452E4", VA = "0x1B452E4")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x1B452F8", Offset = "0x1B452F8", VA = "0x1B452F8")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x1B45304", Offset = "0x1B45304", VA = "0x1B45304")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x1B4530C", Offset = "0x1B4530C", VA = "0x1B4530C")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1B45310", Offset = "0x1B45310", VA = "0x1B45310", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1B45320", Offset = "0x1B45320", VA = "0x1B45320", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001DF")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1B45328", Offset = "0x1B45328", VA = "0x1B45328")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1B45330", Offset = "0x1B45330", VA = "0x1B45330", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1B45338", Offset = "0x1B45338", VA = "0x1B45338", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1B453CC", Offset = "0x1B453CC", VA = "0x1B453CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x1B453C0", Offset = "0x1B453C0", VA = "0x1B453C0")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x1B453D4", Offset = "0x1B453D4", VA = "0x1B453D4")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x1B453E0", Offset = "0x1B453E0", VA = "0x1B453E0")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x1B453E8", Offset = "0x1B453E8", VA = "0x1B453E8")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x1B453EC", Offset = "0x1B453EC", VA = "0x1B453EC", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x1B453FC", Offset = "0x1B453FC", VA = "0x1B453FC", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E0")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1B44EB8", Offset = "0x1B44EB8", VA = "0x1B44EB8")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1B44EC0", Offset = "0x1B44EC0", VA = "0x1B44EC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x1B44EC8", Offset = "0x1B44EC8", VA = "0x1B44EC8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x1B44F94", Offset = "0x1B44F94", VA = "0x1B44F94", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1B44F88", Offset = "0x1B44F88", VA = "0x1B44F88")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1B44F9C", Offset = "0x1B44F9C", VA = "0x1B44F9C")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1B45010", Offset = "0x1B45010", VA = "0x1B45010")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1B45014", Offset = "0x1B45014", VA = "0x1B45014")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1B45018", Offset = "0x1B45018", VA = "0x1B45018", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1B45028", Offset = "0x1B45028", VA = "0x1B45028", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E1")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1B45080", Offset = "0x1B45080", VA = "0x1B45080")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x1B45088", Offset = "0x1B45088", VA = "0x1B45088", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1B45090", Offset = "0x1B45090", VA = "0x1B45090", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1B4515C", Offset = "0x1B4515C", VA = "0x1B4515C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1B45150", Offset = "0x1B45150", VA = "0x1B45150")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1B45164", Offset = "0x1B45164", VA = "0x1B45164")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1B451D8", Offset = "0x1B451D8", VA = "0x1B451D8")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1B451DC", Offset = "0x1B451DC", VA = "0x1B451DC")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1B451E0", Offset = "0x1B451E0", VA = "0x1B451E0", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x1B451F0", Offset = "0x1B451F0", VA = "0x1B451F0", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E2")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x17B3D3C", Offset = "0x17B3D3C", VA = "0x17B3D3C")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x17B3D44", Offset = "0x17B3D44", VA = "0x17B3D44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x17B3D4C", Offset = "0x17B3D4C", VA = "0x17B3D4C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x17B3E18", Offset = "0x17B3E18", VA = "0x17B3E18", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x17B3E0C", Offset = "0x17B3E0C", VA = "0x17B3E0C")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x17B3E20", Offset = "0x17B3E20", VA = "0x17B3E20")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x17AA5C0", Offset = "0x17AA5C0", VA = "0x17AA5C0")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x17B3E94", Offset = "0x17B3E94", VA = "0x17B3E94")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x17B3E98", Offset = "0x17B3E98", VA = "0x17B3E98", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x17B3EA8", Offset = "0x17B3EA8", VA = "0x17B3EA8", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E3")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x17B3F04", Offset = "0x17B3F04", VA = "0x17B3F04")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x17B3F0C", Offset = "0x17B3F0C", VA = "0x17B3F0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x17B3F14", Offset = "0x17B3F14", VA = "0x17B3F14", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x17B3FE0", Offset = "0x17B3FE0", VA = "0x17B3FE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x17B3FD4", Offset = "0x17B3FD4", VA = "0x17B3FD4")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x17B3FE8", Offset = "0x17B3FE8", VA = "0x17B3FE8")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x17AAF70", Offset = "0x17AAF70", VA = "0x17AAF70")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x17B405C", Offset = "0x17B405C", VA = "0x17B405C")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x17B4060", Offset = "0x17B4060", VA = "0x17B4060", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x17B4070", Offset = "0x17B4070", VA = "0x17B4070", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E4")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1B45404", Offset = "0x1B45404", VA = "0x1B45404")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1B4540C", Offset = "0x1B4540C", VA = "0x1B4540C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1B45414", Offset = "0x1B45414", VA = "0x1B45414", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1B454E0", Offset = "0x1B454E0", VA = "0x1B454E0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1B454D4", Offset = "0x1B454D4", VA = "0x1B454D4")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1B454E8", Offset = "0x1B454E8", VA = "0x1B454E8")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1B4555C", Offset = "0x1B4555C", VA = "0x1B4555C")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1B45564", Offset = "0x1B45564", VA = "0x1B45564")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x1B45568", Offset = "0x1B45568", VA = "0x1B45568", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x1B45578", Offset = "0x1B45578", VA = "0x1B45578", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E5")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x175F694", Offset = "0x175F694", VA = "0x175F694")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x175F69C", Offset = "0x175F69C", VA = "0x175F69C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x175F6A4", Offset = "0x175F6A4", VA = "0x175F6A4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x175F738", Offset = "0x175F738", VA = "0x175F738", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x175F72C", Offset = "0x175F72C", VA = "0x175F72C")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x175F740", Offset = "0x175F740", VA = "0x175F740")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x175F74C", Offset = "0x175F74C", VA = "0x175F74C")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x175F754", Offset = "0x175F754", VA = "0x175F754")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x175F758", Offset = "0x175F758", VA = "0x175F758", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x175F768", Offset = "0x175F768", VA = "0x175F768", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E6")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x175F770", Offset = "0x175F770", VA = "0x175F770")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x175F778", Offset = "0x175F778", VA = "0x175F778", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x175F780", Offset = "0x175F780", VA = "0x175F780", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x175F84C", Offset = "0x175F84C", VA = "0x175F84C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x175F840", Offset = "0x175F840", VA = "0x175F840")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x175F854", Offset = "0x175F854", VA = "0x175F854")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x175F8C8", Offset = "0x175F8C8", VA = "0x175F8C8")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x175F8D0", Offset = "0x175F8D0", VA = "0x175F8D0")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x175F8D4", Offset = "0x175F8D4", VA = "0x175F8D4", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x175F8E4", Offset = "0x175F8E4", VA = "0x175F8E4", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E7")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x124723C", Offset = "0x124723C", VA = "0x124723C")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1247244", Offset = "0x1247244", VA = "0x1247244", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x124724C", Offset = "0x124724C", VA = "0x124724C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1247318", Offset = "0x1247318", VA = "0x1247318", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x124730C", Offset = "0x124730C", VA = "0x124730C")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x1247320", Offset = "0x1247320", VA = "0x1247320")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x1247394", Offset = "0x1247394", VA = "0x1247394")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x124739C", Offset = "0x124739C", VA = "0x124739C")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x12473A0", Offset = "0x12473A0", VA = "0x12473A0", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x12473B0", Offset = "0x12473B0", VA = "0x12473B0", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E8")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x124E7EC", Offset = "0x124E7EC", VA = "0x124E7EC")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x124E7F4", Offset = "0x124E7F4", VA = "0x124E7F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x124E7FC", Offset = "0x124E7FC", VA = "0x124E7FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x124E8C8", Offset = "0x124E8C8", VA = "0x124E8C8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x124E8BC", Offset = "0x124E8BC", VA = "0x124E8BC")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x124E8D0", Offset = "0x124E8D0", VA = "0x124E8D0")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x124E944", Offset = "0x124E944", VA = "0x124E944")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x124E948", Offset = "0x124E948", VA = "0x124E948")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x124E94C", Offset = "0x124E94C", VA = "0x124E94C", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x124E95C", Offset = "0x124E95C", VA = "0x124E95C", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001E9")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1B45728", Offset = "0x1B45728", VA = "0x1B45728")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1B45730", Offset = "0x1B45730", VA = "0x1B45730", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1B45738", Offset = "0x1B45738", VA = "0x1B45738", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1B45804", Offset = "0x1B45804", VA = "0x1B45804", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x1B457F8", Offset = "0x1B457F8", VA = "0x1B457F8")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x1B4580C", Offset = "0x1B4580C", VA = "0x1B4580C")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x1B45880", Offset = "0x1B45880", VA = "0x1B45880")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1B45884", Offset = "0x1B45884", VA = "0x1B45884")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x1B45888", Offset = "0x1B45888", VA = "0x1B45888", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x1B45898", Offset = "0x1B45898", VA = "0x1B45898", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001EA")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x17B40CC", Offset = "0x17B40CC", VA = "0x17B40CC")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x17B40D4", Offset = "0x17B40D4", VA = "0x17B40D4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x17B40DC", Offset = "0x17B40DC", VA = "0x17B40DC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x17B41A8", Offset = "0x17B41A8", VA = "0x17B41A8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x17B419C", Offset = "0x17B419C", VA = "0x17B419C")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x17B41B0", Offset = "0x17B41B0", VA = "0x17B41B0")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x17AD184", Offset = "0x17AD184", VA = "0x17AD184")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x17B4224", Offset = "0x17B4224", VA = "0x17B4224")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x17B4228", Offset = "0x17B4228", VA = "0x17B4228", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x17B4238", Offset = "0x17B4238", VA = "0x17B4238", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001EB")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x17B4294", Offset = "0x17B4294", VA = "0x17B4294")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x17B429C", Offset = "0x17B429C", VA = "0x17B429C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x17B42A4", Offset = "0x17B42A4", VA = "0x17B42A4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x17B4370", Offset = "0x17B4370", VA = "0x17B4370", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x17B4364", Offset = "0x17B4364", VA = "0x17B4364")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x17B4378", Offset = "0x17B4378", VA = "0x17B4378")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x17AE56C", Offset = "0x17AE56C", VA = "0x17AE56C")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x17B43EC", Offset = "0x17B43EC", VA = "0x17B43EC")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x17B43F0", Offset = "0x17B43F0", VA = "0x17B43F0", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x17B4400", Offset = "0x17B4400", VA = "0x17B4400", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001EC")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1760CCC", Offset = "0x1760CCC", VA = "0x1760CCC")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1760CD4", Offset = "0x1760CD4", VA = "0x1760CD4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x1760CDC", Offset = "0x1760CDC", VA = "0x1760CDC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1760DA8", Offset = "0x1760DA8", VA = "0x1760DA8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1760D9C", Offset = "0x1760D9C", VA = "0x1760D9C")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x1760DB0", Offset = "0x1760DB0", VA = "0x1760DB0")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x1760E24", Offset = "0x1760E24", VA = "0x1760E24")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x1760E28", Offset = "0x1760E28", VA = "0x1760E28")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x1760E2C", Offset = "0x1760E2C", VA = "0x1760E2C", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x1760E3C", Offset = "0x1760E3C", VA = "0x1760E3C", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001ED")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1B55C3C", Offset = "0x1B55C3C", VA = "0x1B55C3C")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x1B55C44", Offset = "0x1B55C44", VA = "0x1B55C44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1B55C4C", Offset = "0x1B55C4C", VA = "0x1B55C4C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1B55CE0", Offset = "0x1B55CE0", VA = "0x1B55CE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1B55CD4", Offset = "0x1B55CD4", VA = "0x1B55CD4")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x1B55CE8", Offset = "0x1B55CE8", VA = "0x1B55CE8")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x1B55CF4", Offset = "0x1B55CF4", VA = "0x1B55CF4")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1B55CF8", Offset = "0x1B55CF8", VA = "0x1B55CF8")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1B55CFC", Offset = "0x1B55CFC", VA = "0x1B55CFC", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1B55D0C", Offset = "0x1B55D0C", VA = "0x1B55D0C", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001EE")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x1B55D14", Offset = "0x1B55D14", VA = "0x1B55D14")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1B55D1C", Offset = "0x1B55D1C", VA = "0x1B55D1C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x1B55D24", Offset = "0x1B55D24", VA = "0x1B55D24", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x1B55DB8", Offset = "0x1B55DB8", VA = "0x1B55DB8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x1B55DAC", Offset = "0x1B55DAC", VA = "0x1B55DAC")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x1B55DC0", Offset = "0x1B55DC0", VA = "0x1B55DC0")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x1B55DCC", Offset = "0x1B55DCC", VA = "0x1B55DCC")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1B55DD0", Offset = "0x1B55DD0", VA = "0x1B55DD0")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1B55DD4", Offset = "0x1B55DD4", VA = "0x1B55DD4", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x1B55DE4", Offset = "0x1B55DE4", VA = "0x1B55DE4", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x20001EF")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4000CAC")]
		Array = 1,
		[Token(Token = "0x4000CAD")]
		Class,
		[Token(Token = "0x4000CAE")]
		Value,
		[Token(Token = "0x4000CAF")]
		IntValue,
		[Token(Token = "0x4000CB0")]
		DoubleValue,
		[Token(Token = "0x4000CB1")]
		BoolValue,
		[Token(Token = "0x4000CB2")]
		FloatValue
	}
	[Token(Token = "0x20001F0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB444B0", Offset = "0xB444B0")]
	public abstract class JSONNode
	{
		[Token(Token = "0x2000566")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473AC", Offset = "0xB473AC")]
		private sealed class <get_Children>d__17 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170003C5")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x60025F6")]
				[Address(RVA = "0x175E8E8", Offset = "0x175E8E8", VA = "0x175E8E8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025F8")]
				[Address(RVA = "0x175E950", Offset = "0x175E950", VA = "0x175E950", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025F3")]
			[Address(RVA = "0x175D274", Offset = "0x175D274", VA = "0x175D274")]
			[DebuggerHidden]
			public <get_Children>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60025F4")]
			[Address(RVA = "0x175E8CC", Offset = "0x175E8CC", VA = "0x175E8CC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025F5")]
			[Address(RVA = "0x175E8D0", Offset = "0x175E8D0", VA = "0x175E8D0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025F7")]
			[Address(RVA = "0x175E8F0", Offset = "0x175E8F0", VA = "0x175E8F0", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60025F9")]
			[Address(RVA = "0x175E958", Offset = "0x175E958", VA = "0x175E958", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60025FA")]
			[Address(RVA = "0x175E9F0", Offset = "0x175E9F0", VA = "0x175E9F0", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000567")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473BC", Offset = "0xB473BC")]
		private sealed class <get_DeepChildren>d__19 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONNode <>4__this;

			[Token(Token = "0x4001D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4001D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x170003C7")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002600")]
				[Address(RVA = "0x175F024", Offset = "0x175F024", VA = "0x175F024", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002602")]
				[Address(RVA = "0x175F08C", Offset = "0x175F08C", VA = "0x175F08C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025FB")]
			[Address(RVA = "0x175D32C", Offset = "0x175D32C", VA = "0x175D32C")]
			[DebuggerHidden]
			public <get_DeepChildren>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60025FC")]
			[Address(RVA = "0x175E9F4", Offset = "0x175E9F4", VA = "0x175E9F4", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025FD")]
			[Address(RVA = "0x175EC04", Offset = "0x175EC04", VA = "0x175EC04", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025FE")]
			[Address(RVA = "0x175EB44", Offset = "0x175EB44", VA = "0x175EB44")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60025FF")]
			[Address(RVA = "0x175EA84", Offset = "0x175EA84", VA = "0x175EA84")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002601")]
			[Address(RVA = "0x175F02C", Offset = "0x175F02C", VA = "0x175F02C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002603")]
			[Address(RVA = "0x175F094", Offset = "0x175F094", VA = "0x175F094", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002604")]
			[Address(RVA = "0x175F140", Offset = "0x175F140", VA = "0x175F140", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB494A0", Offset = "0xB494A0")]
		private JSONBinaryTag <Tag>k__BackingField;

		[Token(Token = "0x1700004C")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0x175D118", Offset = "0x175D118", VA = "0x175D118", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x175D120", Offset = "0x175D120", VA = "0x175D120", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x175D124", Offset = "0x175D124", VA = "0x175D124", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x175D12C", Offset = "0x175D12C", VA = "0x175D12C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public virtual string Value
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x175D130", Offset = "0x175D130", VA = "0x175D130", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x175D178", Offset = "0x175D178", VA = "0x175D178", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public virtual int Count
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x175D17C", Offset = "0x175D17C", VA = "0x175D17C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000050")]
		public virtual IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x175D204", Offset = "0x175D204", VA = "0x175D204", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A6CC", Offset = "0xB5A6CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		public IEnumerable<JSONNode> DeepChildren
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x175D2AC", Offset = "0x175D2AC", VA = "0x175D2AC")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A730", Offset = "0xB5A730")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		public virtual JSONBinaryTag Tag
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x175D3F4", Offset = "0x175D3F4", VA = "0x175D3F4", Slot = "19")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A794", Offset = "0xB5A794")]
			get
			{
				return default(JSONBinaryTag);
			}
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x175D3FC", Offset = "0x175D3FC", VA = "0x175D3FC", Slot = "20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A7A4", Offset = "0xB5A7A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public virtual int AsInt
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x175D404", Offset = "0x175D404", VA = "0x175D404", Slot = "21")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x175D444", Offset = "0x175D444", VA = "0x175D444", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x175D49C", Offset = "0x175D49C", VA = "0x175D49C", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x175D4E0", Offset = "0x175D4E0", VA = "0x175D4E0", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x175D538", Offset = "0x175D538", VA = "0x175D538", Slot = "25")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x175D5DC", Offset = "0x175D5DC", VA = "0x175D5DC", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x175D634", Offset = "0x175D634", VA = "0x175D634", Slot = "27")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x175D6FC", Offset = "0x175D6FC", VA = "0x175D6FC", Slot = "28")]
			set
			{
			}
		}

		[Token(Token = "0x17000057")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x175D790", Offset = "0x175D790", VA = "0x175D790", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x175D810", Offset = "0x175D810", VA = "0x175D810", Slot = "30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x175D114", Offset = "0x175D114", VA = "0x175D114", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x175D184", Offset = "0x175D184", VA = "0x175D184", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x175D1EC", Offset = "0x175D1EC", VA = "0x175D1EC", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x175D1F4", Offset = "0x175D1F4", VA = "0x175D1F4", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x175D1FC", Offset = "0x175D1FC", VA = "0x175D1FC", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x175D364", Offset = "0x175D364", VA = "0x175D364", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x175D3AC", Offset = "0x175D3AC", VA = "0x175D3AC", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000CB0")]
		public abstract string ToJSON(int prefix);

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x175D890", Offset = "0x175D890", VA = "0x175D890")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x175D90C", Offset = "0x175D90C", VA = "0x175D90C")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x175BB4C", Offset = "0x175BB4C", VA = "0x175BB4C")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x175D958", Offset = "0x175D958", VA = "0x175D958")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x175D974", Offset = "0x175D974", VA = "0x175D974", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x175CB34", Offset = "0x175CB34", VA = "0x175CB34", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x175B178", Offset = "0x175B178", VA = "0x175B178")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x175D980", Offset = "0x175D980", VA = "0x175D980")]
		private static JSONData Numberize(string token)
		{
			return null;
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x175DB34", Offset = "0x175DB34", VA = "0x175DB34")]
		private static void AddElement(JSONNode ctx, string token, string tokenName, bool tokenIsString)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x1758D80", Offset = "0x1758D80", VA = "0x1758D80")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x175DC78", Offset = "0x175DC78", VA = "0x175DC78", Slot = "31")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x175DC7C", Offset = "0x175DC7C", VA = "0x175DC7C")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x175DCFC", Offset = "0x175DCFC", VA = "0x175DCFC")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x175DD68", Offset = "0x175DD68", VA = "0x175DD68")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x175DDD4", Offset = "0x175DDD4", VA = "0x175DDD4")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x175DE40", Offset = "0x175DE40", VA = "0x175DE40")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x175DF94", Offset = "0x175DF94", VA = "0x175DF94")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x175E118", Offset = "0x175E118", VA = "0x175E118")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x175E4B0", Offset = "0x175E4B0", VA = "0x175E4B0")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x175E51C", Offset = "0x175E51C", VA = "0x175E51C")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x175E588", Offset = "0x175E588", VA = "0x175E588")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x175E5F4", Offset = "0x175E5F4", VA = "0x175E5F4")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x175E710", Offset = "0x175E710", VA = "0x175E710")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x175E818", Offset = "0x175E818", VA = "0x175E818")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x175A010", Offset = "0x175A010", VA = "0x175A010")]
		protected JSONNode()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB444E8", Offset = "0xB444E8")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473CC", Offset = "0xB473CC")]
		private sealed class <get_Children>d__13 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONArray <>4__this;

			[Token(Token = "0x4001D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003C9")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002609")]
				[Address(RVA = "0x175A418", Offset = "0x175A418", VA = "0x175A418", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600260B")]
				[Address(RVA = "0x175A480", Offset = "0x175A480", VA = "0x175A480", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002605")]
			[Address(RVA = "0x175987C", Offset = "0x175987C", VA = "0x175987C")]
			[DebuggerHidden]
			public <get_Children>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002606")]
			[Address(RVA = "0x175A250", Offset = "0x175A250", VA = "0x175A250", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002607")]
			[Address(RVA = "0x175A2C4", Offset = "0x175A2C4", VA = "0x175A2C4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002608")]
			[Address(RVA = "0x175A26C", Offset = "0x175A26C", VA = "0x175A26C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600260A")]
			[Address(RVA = "0x175A420", Offset = "0x175A420", VA = "0x175A420", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600260C")]
			[Address(RVA = "0x175A488", Offset = "0x175A488", VA = "0x175A488", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600260D")]
			[Address(RVA = "0x175A534", Offset = "0x175A534", VA = "0x175A534", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000569")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473DC", Offset = "0xB473DC")]
		private sealed class <GetEnumerator>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONArray <>4__this;

			[Token(Token = "0x4001D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002612")]
				[Address(RVA = "0x175A1E0", Offset = "0x175A1E0", VA = "0x175A1E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002614")]
				[Address(RVA = "0x175A248", Offset = "0x175A248", VA = "0x175A248", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600260E")]
			[Address(RVA = "0x1759924", Offset = "0x1759924", VA = "0x1759924")]
			[DebuggerHidden]
			public <GetEnumerator>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600260F")]
			[Address(RVA = "0x175A018", Offset = "0x175A018", VA = "0x175A018", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002610")]
			[Address(RVA = "0x175A08C", Offset = "0x175A08C", VA = "0x175A08C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002611")]
			[Address(RVA = "0x175A034", Offset = "0x175A034", VA = "0x175A034")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002613")]
			[Address(RVA = "0x175A1E8", Offset = "0x175A1E8", VA = "0x175A1E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<JSONNode> m_List;

		[Token(Token = "0x17000059")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x17593E4", Offset = "0x17593E4", VA = "0x17593E4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0x17594B8", Offset = "0x17594B8", VA = "0x17594B8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x175955C", Offset = "0x175955C", VA = "0x175955C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0x17595C0", Offset = "0x17595C0", VA = "0x17595C0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public override int Count
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0x1759628", Offset = "0x1759628", VA = "0x1759628", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700005C")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0x17597FC", Offset = "0x17597FC", VA = "0x17597FC", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A7B4", Offset = "0xB5A7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1759678", Offset = "0x1759678", VA = "0x1759678", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x17596E0", Offset = "0x17596E0", VA = "0x17596E0", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x175978C", Offset = "0x175978C", VA = "0x175978C", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x17598B4", Offset = "0x17598B4", VA = "0x17598B4", Slot = "32")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A818", Offset = "0xB5A818")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1759950", Offset = "0x1759950", VA = "0x1759950", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1759AE8", Offset = "0x1759AE8", VA = "0x1759AE8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1759CD4", Offset = "0x1759CD4", VA = "0x1759CD4", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1759EC0", Offset = "0x1759EC0", VA = "0x1759EC0", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x1759FA0", Offset = "0x1759FA0", VA = "0x1759FA0")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB44520", Offset = "0xB44520")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x200056A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473EC", Offset = "0xB473EC")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4001D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public JSONNode aNode;

			[Token(Token = "0x6002615")]
			[Address(RVA = "0x175ACB4", Offset = "0x175ACB4", VA = "0x175ACB4")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6002616")]
			[Address(RVA = "0x175BAF8", Offset = "0x175BAF8", VA = "0x175BAF8")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200056B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB473FC", Offset = "0xB473FC")]
		private sealed class <get_Children>d__14 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public JSONClass <>4__this;

			[Token(Token = "0x4001D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003CD")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600261B")]
				[Address(RVA = "0x175C014", Offset = "0x175C014", VA = "0x175C014", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600261D")]
				[Address(RVA = "0x175C07C", Offset = "0x175C07C", VA = "0x175C07C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002617")]
			[Address(RVA = "0x175AD3C", Offset = "0x175AD3C", VA = "0x175AD3C")]
			[DebuggerHidden]
			public <get_Children>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002618")]
			[Address(RVA = "0x175BE44", Offset = "0x175BE44", VA = "0x175BE44", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002619")]
			[Address(RVA = "0x175BEB8", Offset = "0x175BEB8", VA = "0x175BEB8", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600261A")]
			[Address(RVA = "0x175BE60", Offset = "0x175BE60", VA = "0x175BE60")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600261C")]
			[Address(RVA = "0x175C01C", Offset = "0x175C01C", VA = "0x175C01C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600261E")]
			[Address(RVA = "0x175C084", Offset = "0x175C084", VA = "0x175C084", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600261F")]
			[Address(RVA = "0x175C130", Offset = "0x175C130", VA = "0x175C130", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200056C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4740C", Offset = "0xB4740C")]
		private sealed class <GetEnumerator>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JSONClass <>4__this;

			[Token(Token = "0x4001D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002624")]
				[Address(RVA = "0x175BDD4", Offset = "0x175BDD4", VA = "0x175BDD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002626")]
				[Address(RVA = "0x175BE3C", Offset = "0x175BE3C", VA = "0x175BE3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002620")]
			[Address(RVA = "0x175ADE4", Offset = "0x175ADE4", VA = "0x175ADE4")]
			[DebuggerHidden]
			public <GetEnumerator>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002621")]
			[Address(RVA = "0x175BBE4", Offset = "0x175BBE4", VA = "0x175BBE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002622")]
			[Address(RVA = "0x175BC58", Offset = "0x175BC58", VA = "0x175BC58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002623")]
			[Address(RVA = "0x175BC00", Offset = "0x175BC00", VA = "0x175BC00")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002625")]
			[Address(RVA = "0x175BDDC", Offset = "0x175BDDC", VA = "0x175BDDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x1700005D")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x175A538", Offset = "0x175A538", VA = "0x175A538", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0x175A62C", Offset = "0x175A62C", VA = "0x175A62C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0x175A6E8", Offset = "0x175A6E8", VA = "0x175A6E8", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x175A780", Offset = "0x175A780", VA = "0x175A780", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public override int Count
		{
			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0x175A840", Offset = "0x175A840", VA = "0x175A840", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000060")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0x175ACBC", Offset = "0x175ACBC", VA = "0x175ACBC", Slot = "16")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A87C", Offset = "0xB5A87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x175A898", Offset = "0x175A898", VA = "0x175A898", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x175A9C4", Offset = "0x175A9C4", VA = "0x175A9C4", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x175AA80", Offset = "0x175AA80", VA = "0x175AA80", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x175AB3C", Offset = "0x175AB3C", VA = "0x175AB3C", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x175AD74", Offset = "0x175AD74", VA = "0x175AD74", Slot = "32")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5A8E0", Offset = "0xB5A8E0")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x175AE10", Offset = "0x175AE10", VA = "0x175AE10", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x175B2F4", Offset = "0x175B2F4", VA = "0x175B2F4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x175B6B4", Offset = "0x175B6B4", VA = "0x175B6B4", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x175B8D0", Offset = "0x175B8D0", VA = "0x175B8D0", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x175BA88", Offset = "0x175BA88", VA = "0x175BA88")]
		public JSONClass()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_Data;

		[Token(Token = "0x17000061")]
		public override string Value
		{
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0x175C134", Offset = "0x175C134", VA = "0x175C134", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0x175C13C", Offset = "0x175C13C", VA = "0x175C13C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x175C154", Offset = "0x175C154", VA = "0x175C154")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x175C194", Offset = "0x175C194", VA = "0x175C194")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x175C1D8", Offset = "0x175C1D8", VA = "0x175C1D8")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x175C21C", Offset = "0x175C21C", VA = "0x175C21C")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x175C258", Offset = "0x175C258", VA = "0x175C258")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x175C294", Offset = "0x175C294", VA = "0x175C294", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x175C2F4", Offset = "0x175C2F4", VA = "0x175C2F4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x175C354", Offset = "0x175C354", VA = "0x175C354", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x175C4AC", Offset = "0x175C4AC", VA = "0x175C4AC", Slot = "31")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB44558", Offset = "0xB44558")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JSONNode m_Node;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string m_Key;

		[Token(Token = "0x17000062")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x175C7E0", Offset = "0x175C7E0", VA = "0x175C7E0", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0x175C844", Offset = "0x175C844", VA = "0x175C844", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0x175C8CC", Offset = "0x175C8CC", VA = "0x175C8CC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x175C93C", Offset = "0x175C93C", VA = "0x175C93C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public override int AsInt
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x175CC14", Offset = "0x175CC14", VA = "0x175CC14", Slot = "21")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x175CC98", Offset = "0x175CC98", VA = "0x175CC98", Slot = "22")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public override float AsFloat
		{
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x175CD20", Offset = "0x175CD20", VA = "0x175CD20", Slot = "23")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x175CDA4", Offset = "0x175CDA4", VA = "0x175CDA4", Slot = "24")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public override double AsDouble
		{
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x175CE2C", Offset = "0x175CE2C", VA = "0x175CE2C", Slot = "25")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x175CEB0", Offset = "0x175CEB0", VA = "0x175CEB0", Slot = "26")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public override bool AsBool
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x175CF38", Offset = "0x175CF38", VA = "0x175CF38", Slot = "27")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x175CFBC", Offset = "0x175CFBC", VA = "0x175CFBC", Slot = "28")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x175D044", Offset = "0x175D044", VA = "0x175D044", Slot = "29")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x175D0AC", Offset = "0x175D0AC", VA = "0x175D0AC", Slot = "30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x175948C", Offset = "0x175948C", VA = "0x175948C")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x175A5F4", Offset = "0x175A5F4", VA = "0x175A5F4")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x175C780", Offset = "0x175C780", VA = "0x175C780")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x175C9CC", Offset = "0x175C9CC", VA = "0x175C9CC", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x175CA54", Offset = "0x175CA54", VA = "0x175CA54", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x175CAE4", Offset = "0x175CAE4", VA = "0x175CAE4")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x175CAFC", Offset = "0x175CAFC", VA = "0x175CAFC")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x175CB14", Offset = "0x175CB14", VA = "0x175CB14", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x175CB2C", Offset = "0x175CB2C", VA = "0x175CB2C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x175CB3C", Offset = "0x175CB3C", VA = "0x175CB3C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x175CB84", Offset = "0x175CB84", VA = "0x175CB84", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x175CBCC", Offset = "0x175CBCC", VA = "0x175CBCC", Slot = "18")]
		public override string ToJSON(int prefix)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	public static class JSON
	{
		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x1758D7C", Offset = "0x1758D7C", VA = "0x1758D7C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x20001F6")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200056D")]
		public enum UpdateMode
		{
			[Token(Token = "0x4001D75")]
			Update,
			[Token(Token = "0x4001D76")]
			FixedUpdate,
			[Token(Token = "0x4001D77")]
			LateUpdate
		}

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool smoothFollow;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float followSpeed;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distance;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minDistance;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDistance;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float zoomSpeed;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float zoomSensitivity;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationSensitivity;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float yMinLimit;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float yMaxLimit;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 offset;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool rotateAlways;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB494B0", Offset = "0xB494B0")]
		private float <x>k__BackingField;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB494C0", Offset = "0xB494C0")]
		private float <y>k__BackingField;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB494D0", Offset = "0xB494D0")]
		private float <distanceTarget>k__BackingField;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 position;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion rotation;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 smoothPosition;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cam;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion r;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 lastUp;

		[Token(Token = "0x1700006A")]
		public float x
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x1624510", Offset = "0x1624510", VA = "0x1624510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A944", Offset = "0xB5A944")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x1624518", Offset = "0x1624518", VA = "0x1624518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A954", Offset = "0xB5A954")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public float y
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x1624520", Offset = "0x1624520", VA = "0x1624520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A964", Offset = "0xB5A964")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x1624528", Offset = "0x1624528", VA = "0x1624528")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A974", Offset = "0xB5A974")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public float distanceTarget
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0x1624530", Offset = "0x1624530", VA = "0x1624530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A984", Offset = "0xB5A984")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0x1624538", Offset = "0x1624538", VA = "0x1624538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5A994", Offset = "0xB5A994")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		private float zoomAdd
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x162499C", Offset = "0x162499C", VA = "0x162499C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x1624540", Offset = "0x1624540", VA = "0x1624540", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x162465C", Offset = "0x162465C", VA = "0x162465C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x16246B8", Offset = "0x16246B8", VA = "0x16246B8", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x16246F0", Offset = "0x16246F0", VA = "0x16246F0", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x1624734", Offset = "0x1624734", VA = "0x1624734")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x1624690", Offset = "0x1624690", VA = "0x1624690")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x1624A10", Offset = "0x1624A10", VA = "0x1624A10")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x16248EC", Offset = "0x16248EC", VA = "0x16248EC")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x1624E70", Offset = "0x1624E70", VA = "0x1624E70")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x1624F64", Offset = "0x1624F64", VA = "0x1624F64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x1624F9C", Offset = "0x1624F9C", VA = "0x1624F9C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x1625154", Offset = "0x1625154", VA = "0x1625154")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x1625204", Offset = "0x1625204", VA = "0x1625204")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F8")]
	public enum Axis
	{
		[Token(Token = "0x4000CDC")]
		X,
		[Token(Token = "0x4000CDD")]
		Y,
		[Token(Token = "0x4000CDE")]
		Z
	}
	[Token(Token = "0x20001F9")]
	public class AxisTools
	{
		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x161D718", Offset = "0x161D718", VA = "0x161D718")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x161D7D0", Offset = "0x161D7D0", VA = "0x161D7D0")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x161D87C", Offset = "0x161D87C", VA = "0x161D87C")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x161DA60", Offset = "0x161DA60", VA = "0x161DA60")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x161D998", Offset = "0x161D998", VA = "0x161D998")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x161DB7C", Offset = "0x161DB7C", VA = "0x161DB7C")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x161DDA8", Offset = "0x161DDA8", VA = "0x161DDA8")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FA")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200056E")]
		public class LimbOrientation
		{
			[Token(Token = "0x4001D78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4001D79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4001D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6002627")]
			[Address(RVA = "0x161E070", Offset = "0x161E070", VA = "0x161E070")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700006E")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0x161DDFC", Offset = "0x161DDFC", VA = "0x161DDFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0x161E0E8", Offset = "0x161E0E8", VA = "0x161E0E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x161DDB0", Offset = "0x161DDB0", VA = "0x161DDB0")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200056F")]
		public enum BoneType
		{
			[Token(Token = "0x4001D7C")]
			Unassigned,
			[Token(Token = "0x4001D7D")]
			Spine,
			[Token(Token = "0x4001D7E")]
			Head,
			[Token(Token = "0x4001D7F")]
			Arm,
			[Token(Token = "0x4001D80")]
			Leg,
			[Token(Token = "0x4001D81")]
			Tail,
			[Token(Token = "0x4001D82")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000570")]
		public enum BoneSide
		{
			[Token(Token = "0x4001D84")]
			Center,
			[Token(Token = "0x4001D85")]
			Left,
			[Token(Token = "0x4001D86")]
			Right
		}

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x161E35C", Offset = "0x161E35C", VA = "0x161E35C")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x161E65C", Offset = "0x161E65C", VA = "0x161E65C")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x161E8AC", Offset = "0x161E8AC", VA = "0x161E8AC")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x161E930", Offset = "0x161E930", VA = "0x161E930")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x161E9DC", Offset = "0x161E9DC", VA = "0x161E9DC")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x161E50C", Offset = "0x161E50C", VA = "0x161E50C")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x161E80C", Offset = "0x161E80C", VA = "0x161E80C")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x161F21C", Offset = "0x161F21C", VA = "0x161F21C")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x161F034", Offset = "0x161F034", VA = "0x161F034")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x161F128", Offset = "0x161F128", VA = "0x161F128")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x161EBFC", Offset = "0x161EBFC", VA = "0x161EBFC")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x161ECB0", Offset = "0x161ECB0", VA = "0x161ECB0")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x161ED64", Offset = "0x161ED64", VA = "0x161ED64")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x161EE18", Offset = "0x161EE18", VA = "0x161EE18")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x161EECC", Offset = "0x161EECC", VA = "0x161EECC")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x161EF80", Offset = "0x161EF80", VA = "0x161EF80")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x161F430", Offset = "0x161F430", VA = "0x161F430")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x161EB10", Offset = "0x161EB10", VA = "0x161EB10")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x161F3A0", Offset = "0x161F3A0", VA = "0x161F3A0")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x161F4A0", Offset = "0x161F4A0", VA = "0x161F4A0")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x161F578", Offset = "0x161F578", VA = "0x161F578")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x161F324", Offset = "0x161F324", VA = "0x161F324")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x161F2AC", Offset = "0x161F2AC", VA = "0x161F2AC")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001FC")]
	public class BipedReferences
	{
		[Token(Token = "0x2000571")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4001D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4001D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x170003D1")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6002629")]
				[Address(RVA = "0x1624508", Offset = "0x1624508", VA = "0x1624508")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6002628")]
			[Address(RVA = "0x16244F4", Offset = "0x16244F4", VA = "0x16244F4")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000070")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x16210EC", Offset = "0x16210EC", VA = "0x16210EC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000071")]
		public bool isEmpty
		{
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x16214D8", Offset = "0x16214D8", VA = "0x16214D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x16214E8", Offset = "0x16214E8", VA = "0x16214E8", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x1621914", Offset = "0x1621914", VA = "0x1621914", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x1621D4C", Offset = "0x1621D4C", VA = "0x1621D4C")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x162235C", Offset = "0x162235C", VA = "0x162235C")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x1621F98", Offset = "0x1621F98", VA = "0x1621F98")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x1622B0C", Offset = "0x1622B0C", VA = "0x1622B0C")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x1622C00", Offset = "0x1622C00", VA = "0x1622C00")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x1623158", Offset = "0x1623158", VA = "0x1623158")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x1622F5C", Offset = "0x1622F5C", VA = "0x1622F5C")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x1622DD4", Offset = "0x1622DD4", VA = "0x1622DD4")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x1622CA0", Offset = "0x1622CA0", VA = "0x1622CA0")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x1623060", Offset = "0x1623060", VA = "0x1623060")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x1623254", Offset = "0x1623254", VA = "0x1623254")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x1623CF4", Offset = "0x1623CF4", VA = "0x1623CF4")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x16237D8", Offset = "0x16237D8", VA = "0x16237D8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x1623FE8", Offset = "0x1623FE8", VA = "0x1623FE8")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x1623B18", Offset = "0x1623B18", VA = "0x1623B18")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x1623FF0", Offset = "0x1623FF0", VA = "0x1623FF0")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x1623FF8", Offset = "0x1623FF8", VA = "0x1623FF8")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x16241B8", Offset = "0x16241B8", VA = "0x16241B8")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x16243D0", Offset = "0x16243D0", VA = "0x16243D0")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x1621F28", Offset = "0x1621F28", VA = "0x1621F28")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x1625220", Offset = "0x1625220", VA = "0x1625220")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x1625228", Offset = "0x1625228", VA = "0x1625228")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x1625368", Offset = "0x1625368", VA = "0x1625368")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class Hierarchy
	{
		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x1753CE0", Offset = "0x1753CE0", VA = "0x1753CE0")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1753EE0", Offset = "0x1753EE0", VA = "0x1753EE0")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1753D78", Offset = "0x1753D78", VA = "0x1753D78")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1754004", Offset = "0x1754004", VA = "0x1754004")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1754128", Offset = "0x1754128", VA = "0x1754128")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x17543D0", Offset = "0x17543D0", VA = "0x17543D0")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x17544EC", Offset = "0x17544EC", VA = "0x17544EC")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1754674", Offset = "0x1754674", VA = "0x1754674")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x1754A08", Offset = "0x1754A08", VA = "0x1754A08")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x17547F4", Offset = "0x17547F4", VA = "0x17547F4")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x1754BA8", Offset = "0x1754BA8", VA = "0x1754BA8")]
		public Hierarchy()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000200")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000D0A")]
		None,
		[Token(Token = "0x4000D0B")]
		InOutCubic,
		[Token(Token = "0x4000D0C")]
		InOutQuintic,
		[Token(Token = "0x4000D0D")]
		InOutSine,
		[Token(Token = "0x4000D0E")]
		InQuintic,
		[Token(Token = "0x4000D0F")]
		InQuartic,
		[Token(Token = "0x4000D10")]
		InCubic,
		[Token(Token = "0x4000D11")]
		InQuadratic,
		[Token(Token = "0x4000D12")]
		InElastic,
		[Token(Token = "0x4000D13")]
		InElasticSmall,
		[Token(Token = "0x4000D14")]
		InElasticBig,
		[Token(Token = "0x4000D15")]
		InSine,
		[Token(Token = "0x4000D16")]
		InBack,
		[Token(Token = "0x4000D17")]
		OutQuintic,
		[Token(Token = "0x4000D18")]
		OutQuartic,
		[Token(Token = "0x4000D19")]
		OutCubic,
		[Token(Token = "0x4000D1A")]
		OutInCubic,
		[Token(Token = "0x4000D1B")]
		OutInQuartic,
		[Token(Token = "0x4000D1C")]
		OutElastic,
		[Token(Token = "0x4000D1D")]
		OutElasticSmall,
		[Token(Token = "0x4000D1E")]
		OutElasticBig,
		[Token(Token = "0x4000D1F")]
		OutSine,
		[Token(Token = "0x4000D20")]
		OutBack,
		[Token(Token = "0x4000D21")]
		OutBackCubic,
		[Token(Token = "0x4000D22")]
		OutBackQuartic,
		[Token(Token = "0x4000D23")]
		BackInCubic,
		[Token(Token = "0x4000D24")]
		BackInQuartic
	}
	[Token(Token = "0x2000201")]
	public class Interp
	{
		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x1754BB0", Offset = "0x1754BB0", VA = "0x1754BB0")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x1755618", Offset = "0x1755618", VA = "0x1755618")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x1755720", Offset = "0x1755720", VA = "0x1755720")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x1754F1C", Offset = "0x1754F1C", VA = "0x1754F1C")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x1754F28", Offset = "0x1754F28", VA = "0x1754F28")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x1754F4C", Offset = "0x1754F4C", VA = "0x1754F4C")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x1754F88", Offset = "0x1754F88", VA = "0x1754F88")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x1754FA0", Offset = "0x1754FA0", VA = "0x1754FA0")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x1754FB4", Offset = "0x1754FB4", VA = "0x1754FB4")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x1754FC8", Offset = "0x1754FC8", VA = "0x1754FC8")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x1754FD8", Offset = "0x1754FD8", VA = "0x1754FD8")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x1755020", Offset = "0x1755020", VA = "0x1755020")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x1755058", Offset = "0x1755058", VA = "0x1755058")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x1755080", Offset = "0x1755080", VA = "0x1755080")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x175581C", Offset = "0x175581C", VA = "0x175581C")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x17550B4", Offset = "0x17550B4", VA = "0x17550B4")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x17550DC", Offset = "0x17550DC", VA = "0x17550DC")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x175510C", Offset = "0x175510C", VA = "0x175510C")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x1755140", Offset = "0x1755140", VA = "0x1755140")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1755184", Offset = "0x1755184", VA = "0x1755184")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x17551E8", Offset = "0x17551E8", VA = "0x17551E8")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x175524C", Offset = "0x175524C", VA = "0x175524C")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x17552A0", Offset = "0x17552A0", VA = "0x17552A0")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x17552F4", Offset = "0x17552F4", VA = "0x17552F4")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x175538C", Offset = "0x175538C", VA = "0x175538C")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x1755420", Offset = "0x1755420", VA = "0x1755420")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x1755850", Offset = "0x1755850", VA = "0x1755850")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x17554C4", Offset = "0x17554C4", VA = "0x17554C4")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x17555A8", Offset = "0x17555A8", VA = "0x17555A8")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x17555D8", Offset = "0x17555D8", VA = "0x17555D8")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x1755938", Offset = "0x1755938", VA = "0x1755938")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x1755940", Offset = "0x1755940", VA = "0x1755940")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x17559B0", Offset = "0x17559B0", VA = "0x17559B0")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000203")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1755A20", Offset = "0x1755A20", VA = "0x1755A20")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1755A78", Offset = "0x1755A78", VA = "0x1755A78")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x1755B44", Offset = "0x1755B44", VA = "0x1755B44")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1755A90", Offset = "0x1755A90", VA = "0x1755A90")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x1755B5C", Offset = "0x1755B5C", VA = "0x1755B5C")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1755C00", Offset = "0x1755C00", VA = "0x1755C00")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1755C2C", Offset = "0x1755C2C", VA = "0x1755C2C")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x1755C7C", Offset = "0x1755C7C", VA = "0x1755C7C")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1755CE8", Offset = "0x1755CE8", VA = "0x1755CE8")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1755DDC", Offset = "0x1755DDC", VA = "0x1755DDC")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x1755EB4", Offset = "0x1755EB4", VA = "0x1755EB4")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1755F14", Offset = "0x1755F14", VA = "0x1755F14")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000204")]
	public static class QuaTools
	{
		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1755F44", Offset = "0x1755F44", VA = "0x1755F44")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1756090", Offset = "0x1756090", VA = "0x1756090")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x17561DC", Offset = "0x17561DC", VA = "0x17561DC")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x17562F0", Offset = "0x17562F0", VA = "0x17562F0")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1756404", Offset = "0x1756404", VA = "0x1756404")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x1756590", Offset = "0x1756590", VA = "0x1756590")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x174CCB4", Offset = "0x174CCB4", VA = "0x174CCB4")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x1756660", Offset = "0x1756660", VA = "0x1756660")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x17568E4", Offset = "0x17568E4", VA = "0x17568E4")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x1756AF8", Offset = "0x1756AF8", VA = "0x1756AF8")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000205")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000072")]
		public static T instance
		{
			[Token(Token = "0x6000DAE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DAF")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000DB0")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB494F0", Offset = "0xB494F0")]
		public bool fixTransforms;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000073")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x1756DB0", Offset = "0x1756DB0", VA = "0x1756DB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000074")]
		private bool isAnimated
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x17570AC", Offset = "0x17570AC", VA = "0x17570AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1756C78", Offset = "0x1756C78", VA = "0x1756C78")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1756D10", Offset = "0x1756D10", VA = "0x1756D10", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1756D14", Offset = "0x1756D14", VA = "0x1756D14", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1756D18", Offset = "0x1756D18", VA = "0x1756D18", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1756D1C", Offset = "0x1756D1C", VA = "0x1756D1C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x1756DAC", Offset = "0x1756DAC", VA = "0x1756DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x1756D54", Offset = "0x1756D54", VA = "0x1756D54")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x1757060", Offset = "0x1757060", VA = "0x1757060")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x1756EA0", Offset = "0x1756EA0", VA = "0x1756EA0")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x1757168", Offset = "0x1757168", VA = "0x1757168")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x17571C4", Offset = "0x17571C4", VA = "0x17571C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x1757220", Offset = "0x1757220", VA = "0x1757220")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x174B33C", Offset = "0x174B33C", VA = "0x174B33C")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x1757268", Offset = "0x1757268", VA = "0x1757268")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x1757320", Offset = "0x1757320", VA = "0x1757320")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x17573D8", Offset = "0x17573D8", VA = "0x17573D8")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x1757490", Offset = "0x1757490", VA = "0x1757490")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public static class V3Tools
	{
		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x1757498", Offset = "0x1757498", VA = "0x1757498")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x1757590", Offset = "0x1757590", VA = "0x1757590")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x1757688", Offset = "0x1757688", VA = "0x1757688")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x1757780", Offset = "0x1757780", VA = "0x1757780")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x1757880", Offset = "0x1757880", VA = "0x1757880")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x1757ABC", Offset = "0x1757ABC", VA = "0x1757ABC")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x1757D0C", Offset = "0x1757D0C", VA = "0x1757D0C")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x1757F0C", Offset = "0x1757F0C", VA = "0x1757F0C")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000209")]
	public static class Warning
	{
		[Token(Token = "0x2000572")]
		public delegate void Logger(string message);

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x17580E8", Offset = "0x17580E8", VA = "0x17580E8")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x174E768", Offset = "0x174E768", VA = "0x174E768")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200020A")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x162539C", Offset = "0x162539C", VA = "0x162539C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x1625420", Offset = "0x1625420", VA = "0x1625420")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49528", Offset = "0xB49528")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49560", Offset = "0xB49560")]
		public AimIK aim;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49598", Offset = "0xB49598")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB495D0", Offset = "0xB495D0")]
		public Animator animator;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49608", Offset = "0xB49608")]
		public float crossfadeTime;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49640", Offset = "0xB49640")]
		public float minAimDistance;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x15D6CD0", Offset = "0x15D6CD0", VA = "0x15D6CD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x15D6D14", Offset = "0x15D6D14", VA = "0x15D6D14")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x15D6E68", Offset = "0x15D6E68", VA = "0x15D6E68")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x15D7064", Offset = "0x15D7064", VA = "0x15D7064")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x15D73A4", Offset = "0x15D73A4", VA = "0x15D73A4")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x15D747C", Offset = "0x15D747C", VA = "0x15D747C")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x15D8204", Offset = "0x15D8204", VA = "0x15D8204")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x15D8468", Offset = "0x15D8468", VA = "0x15D8468")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x15D86B8", Offset = "0x15D86B8", VA = "0x15D86B8")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lookAtWeight;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lookAtHeadWeight;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lookAtEyesWeight;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lookAtClampWeight;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float lookAtClampWeightHead;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float footPositionWeight;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationWeight;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float handPositionWeight;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float handRotationWeight;

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x1626F38", Offset = "0x1626F38", VA = "0x1626F38")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x16273E4", Offset = "0x16273E4", VA = "0x16273E4")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x15D19C8", Offset = "0x15D19C8", VA = "0x15D19C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x15D23FC", Offset = "0x15D23FC", VA = "0x15D23FC")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x15D20E4", Offset = "0x15D20E4", VA = "0x15D20E4")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x15D25A4", Offset = "0x15D25A4", VA = "0x15D25A4")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000075")]
		public Vector3 inputVector
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x15D25D0", Offset = "0x15D25D0", VA = "0x15D25D0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x15D2670", Offset = "0x15D2670", VA = "0x15D2670")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x15D2908", Offset = "0x15D2908", VA = "0x15D2908")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000573")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4741C", Offset = "0xB4741C")]
		private sealed class <Step>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4001D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4001D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x170003D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002631")]
				[Address(RVA = "0x15D3544", Offset = "0x15D3544", VA = "0x15D3544", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002633")]
				[Address(RVA = "0x15D35AC", Offset = "0x15D35AC", VA = "0x15D35AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600262E")]
			[Address(RVA = "0x15D31D4", Offset = "0x15D31D4", VA = "0x15D31D4")]
			[DebuggerHidden]
			public <Step>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600262F")]
			[Address(RVA = "0x15D3230", Offset = "0x15D3230", VA = "0x15D3230", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002630")]
			[Address(RVA = "0x15D3234", Offset = "0x15D3234", VA = "0x15D3234", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002632")]
			[Address(RVA = "0x15D354C", Offset = "0x15D354C", VA = "0x15D354C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem sand;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IK ik;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float stepProgress;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastStepTime;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit hit;

		[Token(Token = "0x17000076")]
		public bool isStepping
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x15D291C", Offset = "0x15D291C", VA = "0x15D291C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000077")]
		public Vector3 position
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x15D2570", Offset = "0x15D2570", VA = "0x15D2570")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x15D2930", Offset = "0x15D2930", VA = "0x15D2930")]
			set
			{
			}
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x15D2980", Offset = "0x15D2980", VA = "0x15D2980")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x15D2B3C", Offset = "0x15D2B3C", VA = "0x15D2B3C")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x15D2F0C", Offset = "0x15D2F0C", VA = "0x15D2F0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x15D3128", Offset = "0x15D3128", VA = "0x15D3128")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5AA14", Offset = "0xB5AA14")]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x15D3200", Offset = "0x15D3200", VA = "0x15D3200")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x15D35B4", Offset = "0x15D35B4", VA = "0x15D35B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x15D3660", Offset = "0x15D3660", VA = "0x15D3660")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x15D38F4", Offset = "0x15D38F4", VA = "0x15D38F4")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000574")]
		public struct Warp
		{
			[Token(Token = "0x4001D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56AF8", Offset = "0xB56AF8")]
			public int animationLayer;

			[Token(Token = "0x4001D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56B30", Offset = "0xB56B30")]
			public string animationState;

			[Token(Token = "0x4001D90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56B68", Offset = "0xB56B68")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x4001D91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56BA0", Offset = "0xB56BA0")]
			public Transform warpFrom;

			[Token(Token = "0x4001D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56BD8", Offset = "0xB56BD8")]
			public Transform warpTo;

			[Token(Token = "0x4001D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56C10", Offset = "0xB56C10")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000575")]
		public enum EffectorMode
		{
			[Token(Token = "0x4001D95")]
			PositionOffset,
			[Token(Token = "0x4001D96")]
			Position
		}

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49678", Offset = "0xB49678")]
		public Animator animator;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB496B0", Offset = "0xB496B0")]
		public EffectorMode effectorMode;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB496E8", Offset = "0xB496E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB496E8", Offset = "0xB496E8")]
		public Warp[] warps;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x1625428", Offset = "0x1625428", VA = "0x1625428", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x1625454", Offset = "0x1625454", VA = "0x1625454")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x1625674", Offset = "0x1625674", VA = "0x1625674", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x1625A28", Offset = "0x1625A28", VA = "0x1625A28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x1625AC8", Offset = "0x1625AC8", VA = "0x1625AC8")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB445A0", Offset = "0xB445A0")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x1625AD0", Offset = "0x1625AD0", VA = "0x1625AD0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x1625B28", Offset = "0x1625B28", VA = "0x1625B28")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x1625D60", Offset = "0x1625D60", VA = "0x1625D60", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x1625FC4", Offset = "0x1625FC4", VA = "0x1625FC4")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44604", Offset = "0xB44604")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44604", Offset = "0xB44604")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49738", Offset = "0xB49738")]
		public float headLookWeight;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x1625FD8", Offset = "0x1625FD8", VA = "0x1625FD8", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x1626144", Offset = "0x1626144", VA = "0x1626144", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x16261B8", Offset = "0x16261B8", VA = "0x16261B8")]
		private void Read()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x1626310", Offset = "0x1626310", VA = "0x1626310")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x1626358", Offset = "0x1626358", VA = "0x1626358")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x1626950", Offset = "0x1626950", VA = "0x1626950")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x1626714", Offset = "0x1626714", VA = "0x1626714")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x1626CA8", Offset = "0x1626CA8", VA = "0x1626CA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x1626DA0", Offset = "0x1626DA0", VA = "0x1626DA0")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x2000215")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44690", Offset = "0xB44690")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x1628280", Offset = "0x1628280", VA = "0x1628280", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x16282E0", Offset = "0x16282E0", VA = "0x16282E0", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x162859C", Offset = "0x162859C", VA = "0x162859C")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x1628754", Offset = "0x1628754", VA = "0x1628754")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB446F4", Offset = "0xB446F4")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CameraController cam;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000078")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x1629588", Offset = "0x1629588", VA = "0x1629588")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000079")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x1629628", Offset = "0x1629628", VA = "0x1629628")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x16292D4", Offset = "0x16292D4", VA = "0x16292D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x1629344", Offset = "0x1629344", VA = "0x1629344")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x16296C8", Offset = "0x16296C8", VA = "0x16296C8")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49760", Offset = "0xB49760")]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x162BB84", Offset = "0x162BB84", VA = "0x162BB84", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x162C168", Offset = "0x162C168", VA = "0x162C168")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x15CD0F4", Offset = "0x15CD0F4", VA = "0x15CD0F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x15CD194", Offset = "0x15CD194", VA = "0x15CD194")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x15CD610", Offset = "0x15CD610", VA = "0x15CD610")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x15CD6BC", Offset = "0x15CD6BC", VA = "0x15CD6BC")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000576")]
		public class Limb
		{
			[Token(Token = "0x4001D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x4001D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x4001D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x6002634")]
			[Address(RVA = "0x15CD890", Offset = "0x15CD890", VA = "0x15CD890")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x6002635")]
			[Address(RVA = "0x15CD9C4", Offset = "0x15CD9C4", VA = "0x15CD9C4")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x15CD744", Offset = "0x15CD744", VA = "0x15CD744")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x15CD914", Offset = "0x15CD914", VA = "0x15CD914")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x15CD9B0", Offset = "0x15CD9B0", VA = "0x15CD9B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x15CD9B4", Offset = "0x15CD9B4", VA = "0x15CD9B4")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x15CD9D4", Offset = "0x15CD9D4", VA = "0x15CD9D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x15CDA40", Offset = "0x15CDA40", VA = "0x15CDA40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x15CDB18", Offset = "0x15CDB18", VA = "0x15CDB18")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49778", Offset = "0xB49778")]
		public Transform target;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB497B0", Offset = "0xB497B0")]
		public Transform pin;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB497E8", Offset = "0xB497E8")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49820", Offset = "0xB49820")]
		public AimIK aim;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49858", Offset = "0xB49858")]
		public float weight;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49890", Offset = "0xB49890")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB498C8", Offset = "0xB498C8")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x15CDB20", Offset = "0x15CDB20", VA = "0x15CDB20")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x15CDB78", Offset = "0x15CDB78", VA = "0x15CDB78")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x15CDD14", Offset = "0x15CDD14", VA = "0x15CDD14")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x15CDD1C", Offset = "0x15CDD1C", VA = "0x15CDD1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x15CDDDC", Offset = "0x15CDDDC", VA = "0x15CDDDC")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x15CDE68", Offset = "0x15CDE68", VA = "0x15CDE68")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x15CE2FC", Offset = "0x15CE2FC", VA = "0x15CE2FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x15CE3F4", Offset = "0x15CE3F4", VA = "0x15CE3F4")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49900", Offset = "0xB49900")]
		public float aimWeight;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49918", Offset = "0xB49918")]
		public float sightWeight;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49930", Offset = "0xB49930")]
		public float maxAngle;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool animatePhysics;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform gun;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform gunTarget;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AimIK gunAim;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CameraControllerFPS cam;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Recoil recoil;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB499BC", Offset = "0xB499BC")]
		private float cameraRecoilWeight;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool updateFrame;

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x15CE3FC", Offset = "0x15CE3FC", VA = "0x15CE3FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x15CE55C", Offset = "0x15CE55C", VA = "0x15CE55C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x15CE568", Offset = "0x15CE568", VA = "0x15CE568")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x15CE8AC", Offset = "0x15CE8AC", VA = "0x15CE8AC")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x15CEA80", Offset = "0x15CEA80", VA = "0x15CEA80")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x15CE630", Offset = "0x15CE630", VA = "0x15CE630")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x15CF48C", Offset = "0x15CF48C", VA = "0x15CF48C")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x200021E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44758", Offset = "0xB44758")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44758", Offset = "0xB44758")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB499FC", Offset = "0xB499FC")]
		public float walkSpeed;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x15CF4AC", Offset = "0x15CF4AC", VA = "0x15CF4AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x15CF51C", Offset = "0x15CF51C", VA = "0x15CF51C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x15CF640", Offset = "0x15CF640", VA = "0x15CF640")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x15CF6F0", Offset = "0x15CF6F0", VA = "0x15CF6F0")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReaction hitReaction;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x15CFA84", Offset = "0x15CFA84", VA = "0x15CFA84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x15CFC44", Offset = "0x15CFC44", VA = "0x15CFC44")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x15CFE08", Offset = "0x15CFE08", VA = "0x15CFE08")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x15CFE18", Offset = "0x15CFE18", VA = "0x15CFE18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x15CFFC4", Offset = "0x15CFFC4", VA = "0x15CFFC4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x15D0380", Offset = "0x15D0380", VA = "0x15D0380")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x15D0390", Offset = "0x15D0390", VA = "0x15D0390")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x15D04C4", Offset = "0x15D04C4", VA = "0x15D04C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x15D0614", Offset = "0x15D0614", VA = "0x15D0614")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x2000222")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x15D061C", Offset = "0x15D061C", VA = "0x15D061C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x15D0CEC", Offset = "0x15D0CEC", VA = "0x15D0CEC")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB447E4", Offset = "0xB447E4")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49A34", Offset = "0xB49A34")]
		[SerializeField]
		private InteractionObject interactionObject;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49A80", Offset = "0xB49A80")]
		[SerializeField]
		private FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x15D0CF4", Offset = "0x15D0CF4", VA = "0x15D0CF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x15D0D4C", Offset = "0x15D0D4C", VA = "0x15D0D4C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x15D1058", Offset = "0x15D1058", VA = "0x15D1058")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000577")]
		public class Partner
		{
			[Token(Token = "0x4001D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4001D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4001D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4001D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4001D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4001D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4001DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4001DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4001DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4001DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4001DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x170003D4")]
			private Transform neck
			{
				[Token(Token = "0x6002638")]
				[Address(RVA = "0x15D195C", Offset = "0x15D195C", VA = "0x15D195C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002636")]
			[Address(RVA = "0x15D1094", Offset = "0x15D1094", VA = "0x15D1094")]
			public void Initiate()
			{
			}

			[Token(Token = "0x6002637")]
			[Address(RVA = "0x15D1114", Offset = "0x15D1114", VA = "0x15D1114")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6002639")]
			[Address(RVA = "0x15D1780", Offset = "0x15D1780", VA = "0x15D1780")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x600263A")]
			[Address(RVA = "0x15D19B4", Offset = "0x15D19B4", VA = "0x15D19B4")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x15D1060", Offset = "0x15D1060", VA = "0x15D1060")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x15D10B4", Offset = "0x15D10B4", VA = "0x15D10B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x15D1770", Offset = "0x15D1770", VA = "0x15D1770")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class MotionAbsorb : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000578")]
		public class Absorber
		{
			[Token(Token = "0x4001DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56C48", Offset = "0xB56C48")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56C80", Offset = "0xB56C80")]
			public float weight;

			[Token(Token = "0x600263B")]
			[Address(RVA = "0x15D3B5C", Offset = "0x15D3B5C", VA = "0x15D3B5C")]
			public void SetToBone(IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x600263C")]
			[Address(RVA = "0x15D3C14", Offset = "0x15D3C14", VA = "0x15D3C14")]
			public void SetEffectorWeights(IKSolverFullBodyBiped solver, float w)
			{
			}

			[Token(Token = "0x600263D")]
			[Address(RVA = "0x15D3CF8", Offset = "0x15D3CF8", VA = "0x15D3CF8")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x2000579")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4742C", Offset = "0xB4742C")]
		private sealed class <AbsorbMotion>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MotionAbsorb <>4__this;

			[Token(Token = "0x170003D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002641")]
				[Address(RVA = "0x15D3C88", Offset = "0x15D3C88", VA = "0x15D3C88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002643")]
				[Address(RVA = "0x15D3CF0", Offset = "0x15D3CF0", VA = "0x15D3CF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600263E")]
			[Address(RVA = "0x15D39A8", Offset = "0x15D39A8", VA = "0x15D39A8")]
			[DebuggerHidden]
			public <AbsorbMotion>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600263F")]
			[Address(RVA = "0x15D39E8", Offset = "0x15D39E8", VA = "0x15D39E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002640")]
			[Address(RVA = "0x15D39EC", Offset = "0x15D39EC", VA = "0x15D39EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002642")]
			[Address(RVA = "0x15D3C90", Offset = "0x15D3C90", VA = "0x15D3C90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49ACC", Offset = "0xB49ACC")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49B04", Offset = "0xB49B04")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49B3C", Offset = "0xB49B3C")]
		public float weight;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49B74", Offset = "0xB49B74")]
		public AnimationCurve falloff;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49BAC", Offset = "0xB49BAC")]
		public float falloffSpeed;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float timer;

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x15D38FC", Offset = "0x15D38FC", VA = "0x15D38FC")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x15D3938", Offset = "0x15D3938", VA = "0x15D3938")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5AA78", Offset = "0xB5AA78")]
		private IEnumerator AbsorbMotion()
		{
			return null;
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x15D39D4", Offset = "0x15D39D4", VA = "0x15D39D4")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x15D3D08", Offset = "0x15D3D08", VA = "0x15D3D08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x15D3D80", Offset = "0x15D3D80", VA = "0x15D3D80")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x15D3E4C", Offset = "0x15D3E4C", VA = "0x15D3E4C")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x15D3FAC", Offset = "0x15D3FAC", VA = "0x15D3FAC")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200057A")]
		public class EffectorLink
		{
			[Token(Token = "0x4001DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4001DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4001DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6002644")]
			[Address(RVA = "0x15D42F4", Offset = "0x15D42F4", VA = "0x15D42F4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x15D3FC0", Offset = "0x15D3FC0", VA = "0x15D3FC0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x15D40C0", Offset = "0x15D40C0", VA = "0x15D40C0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x15D42EC", Offset = "0x15D42EC", VA = "0x15D42EC")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44848", Offset = "0xB44848")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49BE4", Offset = "0xB49BE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49BE4", Offset = "0xB49BE4")]
		public float weight;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49C38", Offset = "0xB49C38")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49C70", Offset = "0xB49C70")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49CBC", Offset = "0xB49CBC")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform leftHandTarget;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform rightHandTarget;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform leftFootTarget;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform rightFootTarget;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform pelvisTarget;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform bodyTarget;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform headTarget;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3 pelvisDownAxis;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x15D4304", Offset = "0x15D4304", VA = "0x15D4304")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x15D4640", Offset = "0x15D4640", VA = "0x15D4640")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x15D4D90", Offset = "0x15D4D90", VA = "0x15D4D90")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int GUIspace;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x1700007A")]
		private bool holding
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x15D50D4", Offset = "0x15D50D4", VA = "0x15D50D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x15D4E14", Offset = "0x15D4E14", VA = "0x15D4E14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E48")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x15D50F4", Offset = "0x15D50F4", VA = "0x15D50F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x15D525C", Offset = "0x15D525C", VA = "0x15D525C")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x15D53D8", Offset = "0x15D53D8", VA = "0x15D53D8")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x15D54B8", Offset = "0x15D54B8", VA = "0x15D54B8")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x15D55E4", Offset = "0x15D55E4", VA = "0x15D55E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x15D57F4", Offset = "0x15D57F4", VA = "0x15D57F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x15D5994", Offset = "0x15D5994", VA = "0x15D5994")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x15D59A8", Offset = "0x15D59A8", VA = "0x15D59A8", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x15D5B9C", Offset = "0x15D5B9C", VA = "0x15D5B9C")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x15D5BB0", Offset = "0x15D5BB0", VA = "0x15D5BB0", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x15D5D5C", Offset = "0x15D5D5C", VA = "0x15D5D5C")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x15D64D8", Offset = "0x15D64D8", VA = "0x15D64D8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x15D65B0", Offset = "0x15D65B0", VA = "0x15D65B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x15D6758", Offset = "0x15D6758", VA = "0x15D6758")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB448AC", Offset = "0xB448AC")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x15D6760", Offset = "0x15D6760", VA = "0x15D6760")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x15D67B8", Offset = "0x15D67B8", VA = "0x15D67B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x15D6814", Offset = "0x15D6814", VA = "0x15D6814")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x15D68EC", Offset = "0x15D68EC", VA = "0x15D68EC")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200057B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4743C", Offset = "0xB4743C")]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4001DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x170003D7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002648")]
				[Address(RVA = "0x15D6C60", Offset = "0x15D6C60", VA = "0x15D6C60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600264A")]
				[Address(RVA = "0x15D6CC8", Offset = "0x15D6CC8", VA = "0x15D6CC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002645")]
			[Address(RVA = "0x15D6A7C", Offset = "0x15D6A7C", VA = "0x15D6A7C")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002646")]
			[Address(RVA = "0x15D6AB8", Offset = "0x15D6AB8", VA = "0x15D6AB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002647")]
			[Address(RVA = "0x15D6ABC", Offset = "0x15D6ABC", VA = "0x15D6ABC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002649")]
			[Address(RVA = "0x15D6C68", Offset = "0x15D6C68", VA = "0x15D6C68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x15D68FC", Offset = "0x15D68FC", VA = "0x15D68FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x15D69B4", Offset = "0x15D69B4", VA = "0x15D69B4")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x15D69FC", Offset = "0x15D69FC", VA = "0x15D69FC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5AADC", Offset = "0xB5AADC")]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x15D6AA8", Offset = "0x15D6AA8", VA = "0x15D6AA8")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44910", Offset = "0xB44910")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x200057C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4744C", Offset = "0xB4744C")]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x170003D9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600264E")]
				[Address(RVA = "0x15D8194", Offset = "0x15D8194", VA = "0x15D8194", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002650")]
				[Address(RVA = "0x15D81FC", Offset = "0x15D81FC", VA = "0x15D81FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600264B")]
			[Address(RVA = "0x15D803C", Offset = "0x15D803C", VA = "0x15D803C")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600264C")]
			[Address(RVA = "0x15D8070", Offset = "0x15D8070", VA = "0x15D8070", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600264D")]
			[Address(RVA = "0x15D8074", Offset = "0x15D8074", VA = "0x15D8074", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600264F")]
			[Address(RVA = "0x15D819C", Offset = "0x15D819C", VA = "0x15D819C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x15D7F1C", Offset = "0x15D7F1C", VA = "0x15D7F1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x15D7FCC", Offset = "0x15D7FCC", VA = "0x15D7FCC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5AB40", Offset = "0xB5AB40")]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x15D8068", Offset = "0x15D8068", VA = "0x15D8068")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200057D")]
		public class EffectorLink
		{
			[Token(Token = "0x4001DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4001DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4001DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4001DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4001DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4001DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4001DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x4001DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x4001DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x4001DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x4001DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x4001DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x4001DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4001DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4001DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4001DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4001DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4001DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4001DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4001DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x6002651")]
			[Address(RVA = "0x15D87A4", Offset = "0x15D87A4", VA = "0x15D87A4")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6002652")]
			[Address(RVA = "0x15D942C", Offset = "0x15D942C", VA = "0x15D942C")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6002653")]
			[Address(RVA = "0x15D8AE4", Offset = "0x15D8AE4", VA = "0x15D8AE4")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6002654")]
			[Address(RVA = "0x15D9514", Offset = "0x15D9514", VA = "0x15D9514")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6002655")]
			[Address(RVA = "0x15D96B0", Offset = "0x15D96B0", VA = "0x15D96B0")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6002656")]
			[Address(RVA = "0x15D974C", Offset = "0x15D974C", VA = "0x15D974C")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6002657")]
			[Address(RVA = "0x15D97E4", Offset = "0x15D97E4", VA = "0x15D97E4")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6002658")]
			[Address(RVA = "0x15D92C4", Offset = "0x15D92C4", VA = "0x15D92C4")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6002659")]
			[Address(RVA = "0x15D987C", Offset = "0x15D987C", VA = "0x15D987C")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x15D872C", Offset = "0x15D872C", VA = "0x15D872C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x15D8A78", Offset = "0x15D8A78", VA = "0x15D8A78")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x15D91FC", Offset = "0x15D91FC", VA = "0x15D91FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x15D9424", Offset = "0x15D9424", VA = "0x15D9424")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49DA8", Offset = "0xB49DA8")]
		public Transform to;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49DE0", Offset = "0xB49DE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49DE0", Offset = "0xB49DE0")]
		public float transferMotion;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x15D98B0", Offset = "0x15D98B0", VA = "0x15D98B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x15D98EC", Offset = "0x15D98EC", VA = "0x15D98EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x15D9A44", Offset = "0x15D9A44", VA = "0x15D9A44")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49E34", Offset = "0xB49E34")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x15D9C04", Offset = "0x15D9C04", VA = "0x15D9C04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x15D9DBC", Offset = "0x15D9DBC", VA = "0x15D9DBC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x15DA058", Offset = "0x15DA058", VA = "0x15DA058")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x15DA124", Offset = "0x15DA124", VA = "0x15DA124")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x15DA21C", Offset = "0x15DA21C", VA = "0x15DA21C")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CharacterThirdPerson character;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool disableInputInInteraction;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x15DA454", Offset = "0x15DA454", VA = "0x15DA454", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x15DA8CC", Offset = "0x15DA8CC", VA = "0x15DA8CC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x15DAB24", Offset = "0x15DAB24", VA = "0x15DAB24")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x15CF700", Offset = "0x15CF700", VA = "0x15CF700")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x15CF9FC", Offset = "0x15CF9FC", VA = "0x15CF9FC")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x15CFA7C", Offset = "0x15CFA7C", VA = "0x15CFA7C")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x200057E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4745C", Offset = "0xB4745C")]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x170003DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600265D")]
				[Address(RVA = "0x15D6468", Offset = "0x15D6468", VA = "0x15D6468", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600265F")]
				[Address(RVA = "0x15D64D0", Offset = "0x15D64D0", VA = "0x15D64D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600265A")]
			[Address(RVA = "0x15D6124", Offset = "0x15D6124", VA = "0x15D6124")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600265B")]
			[Address(RVA = "0x15D6330", Offset = "0x15D6330", VA = "0x15D6330", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600265C")]
			[Address(RVA = "0x15D6334", Offset = "0x15D6334", VA = "0x15D6334", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600265E")]
			[Address(RVA = "0x15D6470", Offset = "0x15D6470", VA = "0x15D6470", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x15D5D70", Offset = "0x15D5D70", VA = "0x15D5D70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x15D5EFC", Offset = "0x15D5EFC", VA = "0x15D5EFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x15D5E8C", Offset = "0x15D5E8C", VA = "0x15D5E8C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5ABA4", Offset = "0xB5ABA4")]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x15D6150", Offset = "0x15D6150", VA = "0x15D6150")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x15D6234", Offset = "0x15D6234", VA = "0x15D6234")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x15D6314", Offset = "0x15D6314", VA = "0x15D6314")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49E9C", Offset = "0xB49E9C")]
		public float weight;

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x1626E00", Offset = "0x1626E00", VA = "0x1626E00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x1626E6C", Offset = "0x1626E6C", VA = "0x1626E6C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x1626F28", Offset = "0x1626F28", VA = "0x1626F28")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200057F")]
		public class Part
		{
			[Token(Token = "0x4001DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6002660")]
			[Address(RVA = "0x15D9AD0", Offset = "0x15D9AD0", VA = "0x15D9AD0")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6002661")]
			[Address(RVA = "0x15D9BFC", Offset = "0x15D9BFC", VA = "0x15D9BFC")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x15D9A58", Offset = "0x15D9A58", VA = "0x15D9A58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x15D9BF4", Offset = "0x15D9BF4", VA = "0x15D9BF4")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x15DAB80", Offset = "0x15DAB80", VA = "0x15DAB80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x15DABDC", Offset = "0x15DABDC", VA = "0x15DABDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x15DADF0", Offset = "0x15DADF0", VA = "0x15DADF0")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 localPosition;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion localRotation;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x1700007B")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000E84")]
			[Address(RVA = "0x1627428", Offset = "0x1627428", VA = "0x1627428", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x1627404", Offset = "0x1627404", VA = "0x1627404", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x1627430", Offset = "0x1627430", VA = "0x1627430")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x16274F4", Offset = "0x16274F4", VA = "0x16274F4", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x162774C", Offset = "0x162774C", VA = "0x162774C", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x16279AC", Offset = "0x16279AC", VA = "0x16279AC")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x200023A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44974", Offset = "0xB44974")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CharacterThirdPerson characterController;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float pivotOffset;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AnimationCurve moveSpeed;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x16279C4", Offset = "0x16279C4", VA = "0x16279C4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1627A24", Offset = "0x1627A24", VA = "0x1627A24", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1627B50", Offset = "0x1627B50", VA = "0x1627B50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x1627CCC", Offset = "0x1627CCC", VA = "0x1627CCC")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x200023B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB449D8", Offset = "0xB449D8")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB49F14", Offset = "0xB49F14")]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Animator animator;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 lastForward;

		[Token(Token = "0x4000E5C")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000E5D")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x1700007C")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x1627D84", Offset = "0x1627D84", VA = "0x1627D84", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x1627CE4", Offset = "0x1627CE4", VA = "0x1627CE4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x1627D68", Offset = "0x1627D68", VA = "0x1627D68", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x1627E74", Offset = "0x1627E74", VA = "0x1627E74", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x16281C0", Offset = "0x16281C0", VA = "0x16281C0")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x162825C", Offset = "0x162825C", VA = "0x162825C")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x200023C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44A3C", Offset = "0xB44A3C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44A3C", Offset = "0xB44A3C")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB49F58", Offset = "0xB49F58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49F58", Offset = "0xB49F58")]
		public Transform gravityTarget;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB49FB8", Offset = "0xB49FB8")]
		[SerializeField]
		protected float gravityMultiplier;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float airborneThreshold;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float slopeStartAngle;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float slopeEndAngle;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float spherecastRadius;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private LayerMask groundLayers;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x4000E68")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000E93")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x1628778", Offset = "0x1628778", VA = "0x1628778")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x16288FC", Offset = "0x16288FC", VA = "0x16288FC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x1628A94", Offset = "0x1628A94", VA = "0x1628A94", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x1628D0C", Offset = "0x1628D0C", VA = "0x1628D0C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x1628DD0", Offset = "0x1628DD0", VA = "0x1628DD0")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x1628FB8", Offset = "0x1628FB8", VA = "0x1628FB8")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x1629168", Offset = "0x1629168", VA = "0x1629168")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x162918C", Offset = "0x162918C", VA = "0x162918C")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x16291B0", Offset = "0x16291B0", VA = "0x16291B0")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x16292B4", Offset = "0x16292B4", VA = "0x16292B4")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000580")]
		public enum MoveMode
		{
			[Token(Token = "0x4001DCE")]
			Directional,
			[Token(Token = "0x4001DCF")]
			Strafe
		}

		[Token(Token = "0x2000581")]
		public struct AnimState
		{
			[Token(Token = "0x4001DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4001DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4001DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4001DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4001DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4001DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;
		}

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A054", Offset = "0xB4A054")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A08C", Offset = "0xB4A08C")]
		public MoveMode moveMode;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A0C4", Offset = "0xB4A0C4")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A0FC", Offset = "0xB4A0FC")]
		public float airSpeed;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airControl;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float jumpPower;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A134", Offset = "0xB4A134")]
		[SerializeField]
		private LayerMask wallRunLayers;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4A180", Offset = "0xB4A180")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4A1B8", Offset = "0xB4A1B8")]
		private bool <onGround>k__BackingField;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AnimState animState;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Animator animator;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 normal;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private RaycastHit hit;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float jumpLeg;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float jumpEndTime;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float forwardMlp;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float groundDistance;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float lastAirTime;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float stickyForce;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float wallRunWeight;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private bool fixedFrame;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float wallRunEndTime;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Vector3 gravity;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float velocityY;

		[Token(Token = "0x1700007D")]
		public bool onGround
		{
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0x16296D0", Offset = "0x16296D0", VA = "0x16296D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AC08", Offset = "0xB5AC08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0x16296D8", Offset = "0x16296D8", VA = "0x16296D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AC18", Offset = "0xB5AC18")]
			private set
			{
			}
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x16296E4", Offset = "0x16296E4", VA = "0x16296E4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x1629868", Offset = "0x1629868", VA = "0x1629868")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x16298F8", Offset = "0x16298F8", VA = "0x16298F8", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x1629A34", Offset = "0x1629A34", VA = "0x1629A34")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x162A85C", Offset = "0x162A85C", VA = "0x162A85C", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x162ABD8", Offset = "0x162ABD8", VA = "0x162ABD8", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x1629E54", Offset = "0x1629E54", VA = "0x1629E54")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x162ACB8", Offset = "0x162ACB8", VA = "0x162ACB8")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x162B2A8", Offset = "0x162B2A8", VA = "0x162B2A8")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x162A938", Offset = "0x162A938", VA = "0x162A938")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x162B348", Offset = "0x162B348", VA = "0x162B348", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x162B780", Offset = "0x162B780", VA = "0x162B780")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x162B90C", Offset = "0x162B90C", VA = "0x162B90C", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x162A43C", Offset = "0x162A43C", VA = "0x162A43C")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x162BAA0", Offset = "0x162BAA0", VA = "0x162BAA0")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x200023E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB44AC8", Offset = "0xB44AC8")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000582")]
		public enum RotationMode
		{
			[Token(Token = "0x4001DD7")]
			Smooth,
			[Token(Token = "0x4001DD8")]
			Linear
		}

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A1C8", Offset = "0xB4A1C8")]
		[SerializeField]
		private CameraController cameraController;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A214", Offset = "0xB4A214")]
		[SerializeField]
		private float accelerationTime;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A260", Offset = "0xB4A260")]
		[SerializeField]
		private float turnTime;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A2AC", Offset = "0xB4A2AC")]
		[SerializeField]
		private bool walkByDefault;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A2F8", Offset = "0xB4A2F8")]
		[SerializeField]
		private RotationMode rotationMode;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A344", Offset = "0xB4A344")]
		[SerializeField]
		private float moveSpeed;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4A390", Offset = "0xB4A390")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x1700007E")]
		public bool isGrounded
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0x15D7490", Offset = "0x15D7490", VA = "0x15D7490")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AC28", Offset = "0xB5AC28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0x15D7498", Offset = "0x15D7498", VA = "0x15D7498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AC38", Offset = "0xB5AC38")]
			private set
			{
			}
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x15D74A4", Offset = "0x15D74A4", VA = "0x15D74A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x15D752C", Offset = "0x15D752C", VA = "0x15D752C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x15D7C28", Offset = "0x15D7C28", VA = "0x15D7C28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x15D7580", Offset = "0x15D7580", VA = "0x15D7580")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x15D7980", Offset = "0x15D7980", VA = "0x15D7980")]
		private void Move()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x15D7C64", Offset = "0x15D7C64", VA = "0x15D7C64")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x15D7D5C", Offset = "0x15D7D5C", VA = "0x15D7D5C")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x15D7DFC", Offset = "0x15D7DFC", VA = "0x15D7DFC")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x15DA224", Offset = "0x15DA224", VA = "0x15DA224", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x15DA428", Offset = "0x15DA428", VA = "0x15DA428")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x2000583")]
		public struct State
		{
			[Token(Token = "0x4001DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4001DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4001DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4001DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4001DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x15DAB48", Offset = "0x15DAB48", VA = "0x15DAB48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x15DA568", Offset = "0x15DA568", VA = "0x15DA568", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x15DA444", Offset = "0x15DA444", VA = "0x15DA444")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x1626DBC", Offset = "0x1626DBC", VA = "0x1626DBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x1626DF8", Offset = "0x1626DF8", VA = "0x1626DF8")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode[] keyCodes;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool mouse0;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool mouse1;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float slowMoTimeScale;

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x15D7E24", Offset = "0x15D7E24", VA = "0x15D7E24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x15D7E58", Offset = "0x15D7E58", VA = "0x15D7E58")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x15D7F08", Offset = "0x15D7F08", VA = "0x15D7F08")]
		public SlowMo()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000243")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44B2C", Offset = "0xB44B2C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44B2C", Offset = "0xB44B2C")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x15DB954", Offset = "0x15DB954", VA = "0x15DB954")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AC48", Offset = "0xB5AC48")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x15DB9A0", Offset = "0x15DB9A0", VA = "0x15DB9A0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AC80", Offset = "0xB5AC80")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x15DB9EC", Offset = "0x15DB9EC", VA = "0x15DB9EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5ACB8", Offset = "0xB5ACB8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x15DBA38", Offset = "0x15DBA38", VA = "0x15DBA38")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5ACF0", Offset = "0xB5ACF0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x15DBA84", Offset = "0x15DBA84", VA = "0x15DBA84")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x15DBB20", Offset = "0x15DBB20", VA = "0x15DBB20")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x15DBB40", Offset = "0x15DBB40", VA = "0x15DBB40")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x15DBB70", Offset = "0x15DBB70", VA = "0x15DBB70")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x15DBBA0", Offset = "0x15DBBA0", VA = "0x15DBBA0")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x15DBBE0", Offset = "0x15DBBE0", VA = "0x15DBBE0")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x15DBC24", Offset = "0x15DBC24", VA = "0x15DBC24")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x15DBC48", Offset = "0x15DBC48", VA = "0x15DBC48")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x15DBC6C", Offset = "0x15DBC6C", VA = "0x15DBC6C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x15DBC94", Offset = "0x15DBC94", VA = "0x15DBC94")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x15DBCC0", Offset = "0x15DBCC0", VA = "0x15DBCC0")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x15DBCEC", Offset = "0x15DBCEC", VA = "0x15DBCEC")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x15DBAA4", Offset = "0x15DBAA4", VA = "0x15DBAA4")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x15DBD14", Offset = "0x15DBD14", VA = "0x15DBD14")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x15DBD20", Offset = "0x15DBD20", VA = "0x15DBD20")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x15DBD2C", Offset = "0x15DBD2C", VA = "0x15DBD2C")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x15DC014", Offset = "0x15DC014", VA = "0x15DC014", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x15DC0BC", Offset = "0x15DC0BC", VA = "0x15DC0BC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x15DC404", Offset = "0x15DC404", VA = "0x15DC404", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x15DC854", Offset = "0x15DC854", VA = "0x15DC854")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x15DC888", Offset = "0x15DC888", VA = "0x15DC888")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000244")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x1700007F")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x15DBECC", Offset = "0x15DBECC", VA = "0x15DBECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x15DCA54", Offset = "0x15DCA54", VA = "0x15DCA54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x15DC28C", Offset = "0x15DC28C", VA = "0x15DC28C")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x15DC90C", Offset = "0x15DC90C", VA = "0x15DC90C")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000245")]
	public abstract class Constraint
	{
		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000081")]
		public bool isValid
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x15DD054", Offset = "0x15DD054", VA = "0x15DD054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EE1")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x15DD0C4", Offset = "0x15DD0C4", VA = "0x15DD0C4")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000246")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x15DD0CC", Offset = "0x15DD0CC", VA = "0x15DD0CC", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x15DD1D8", Offset = "0x15DD1D8", VA = "0x15DD1D8")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x15DD1E0", Offset = "0x15DD1E0", VA = "0x15DD1E0")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000247")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000082")]
		private bool positionChanged
		{
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x15DD3A8", Offset = "0x15DD3A8", VA = "0x15DD3A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x15DD20C", Offset = "0x15DD20C", VA = "0x15DD20C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x15DD464", Offset = "0x15DD464", VA = "0x15DD464")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x15DD46C", Offset = "0x15DD46C", VA = "0x15DD46C")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000248")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x15DD498", Offset = "0x15DD498", VA = "0x15DD498", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x15DD5C0", Offset = "0x15DD5C0", VA = "0x15DD5C0")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x15DD5C8", Offset = "0x15DD5C8", VA = "0x15DD5C8")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000249")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000083")]
		private bool rotationChanged
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x15DD794", Offset = "0x15DD794", VA = "0x15DD794")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x15DD5F4", Offset = "0x15DD5F4", VA = "0x15DD5F4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x15DD864", Offset = "0x15DD864", VA = "0x15DD864")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x15DD86C", Offset = "0x15DD86C", VA = "0x15DD86C")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024A")]
	public class Constraints
	{
		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 position;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A3E0", Offset = "0xB4A3E0")]
		public float positionWeight;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 rotation;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A3F8", Offset = "0xB4A3F8")]
		public float rotationWeight;

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x15DD898", Offset = "0x15DD898", VA = "0x15DD898")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x15DC3B0", Offset = "0x15DC3B0", VA = "0x15DC3B0")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x15DC58C", Offset = "0x15DC58C", VA = "0x15DC58C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x15DCC20", Offset = "0x15DCC20", VA = "0x15DCC20")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024B")]
	public class Finger
	{
		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A410", Offset = "0xB4A410")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A410", Offset = "0xB4A410")]
		public float weight;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A464", Offset = "0xB4A464")]
		public Transform bone1;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A49C", Offset = "0xB4A49C")]
		public Transform bone2;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A4D4", Offset = "0xB4A4D4")]
		public Transform bone3;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A50C", Offset = "0xB4A50C")]
		public Transform tip;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A544", Offset = "0xB4A544")]
		public Transform target;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4A57C", Offset = "0xB4A57C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x17000084")]
		public bool initiated
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x1B162E0", Offset = "0x1B162E0", VA = "0x1B162E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AD28", Offset = "0xB5AD28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x1B162E8", Offset = "0x1B162E8", VA = "0x1B162E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AD38", Offset = "0xB5AD38")]
			private set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x1B162F4", Offset = "0x1B162F4", VA = "0x1B162F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x1B16314", Offset = "0x1B16314", VA = "0x1B16314")]
			set
			{
			}
		}

		[Token(Token = "0x17000086")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0x1B16334", Offset = "0x1B16334", VA = "0x1B16334")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x1B16354", Offset = "0x1B16354", VA = "0x1B16354")]
			set
			{
			}
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x1B16374", Offset = "0x1B16374", VA = "0x1B16374")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x1B16474", Offset = "0x1B16474", VA = "0x1B16474")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x1B1682C", Offset = "0x1B1682C", VA = "0x1B1682C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x1B168FC", Offset = "0x1B168FC", VA = "0x1B168FC")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x1B16C14", Offset = "0x1B16C14", VA = "0x1B16C14")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A58C", Offset = "0xB4A58C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A58C", Offset = "0xB4A58C")]
		public float weight;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4A5E0", Offset = "0xB4A5E0")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x17000087")]
		public bool initiated
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x1B16C24", Offset = "0x1B16C24", VA = "0x1B16C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AD48", Offset = "0xB5AD48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x1B16C2C", Offset = "0x1B16C2C", VA = "0x1B16C2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5AD58", Offset = "0xB5AD58")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1B16C38", Offset = "0x1B16C38", VA = "0x1B16C38")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x1B16CC0", Offset = "0x1B16CC0", VA = "0x1B16CC0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AD68", Offset = "0xB5AD68")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x1B16FE0", Offset = "0x1B16FE0", VA = "0x1B16FE0")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x1B17150", Offset = "0x1B17150", VA = "0x1B17150")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x1B16ED8", Offset = "0x1B16ED8", VA = "0x1B16ED8")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x1B172B8", Offset = "0x1B172B8", VA = "0x1B172B8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x1B17378", Offset = "0x1B17378", VA = "0x1B17378")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x1B173FC", Offset = "0x1B173FC", VA = "0x1B173FC")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x1B17464", Offset = "0x1B17464", VA = "0x1B17464", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x1B17468", Offset = "0x1B17468", VA = "0x1B17468", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x1B1746C", Offset = "0x1B1746C", VA = "0x1B1746C")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000584")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A5F0", Offset = "0xB4A5F0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A5F0", Offset = "0xB4A5F0")]
		public float weight;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A644", Offset = "0xB4A644")]
		public Grounding solver;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool initiated;

		[Token(Token = "0x6000F0D")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x1B184A8", Offset = "0x1B184A8", VA = "0x1B184A8")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x1B1877C", Offset = "0x1B1877C", VA = "0x1B1877C")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x1B185EC", Offset = "0x1B185EC", VA = "0x1B185EC")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x1B187B0", Offset = "0x1B187B0", VA = "0x1B187B0")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F12")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000F13")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x1B189B8", Offset = "0x1B189B8", VA = "0x1B189B8")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44B8C", Offset = "0xB44B8C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44B8C", Offset = "0xB44B8C")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A67C", Offset = "0xB4A67C")]
		public BipedIK ik;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A6B4", Offset = "0xB4A6B4")]
		public float spineBend;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A6EC", Offset = "0xB4A6EC")]
		public float spineSpeed;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x1B18D08", Offset = "0x1B18D08", VA = "0x1B18D08", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5ADA0", Offset = "0xB5ADA0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x1B18D54", Offset = "0x1B18D54", VA = "0x1B18D54", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5ADD8", Offset = "0xB5ADD8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x1B18DA0", Offset = "0x1B18DA0", VA = "0x1B18DA0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x1B18EA4", Offset = "0x1B18EA4", VA = "0x1B18EA4")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x1B18F54", Offset = "0x1B18F54", VA = "0x1B18F54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x1B19008", Offset = "0x1B19008", VA = "0x1B19008")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x1B1951C", Offset = "0x1B1951C", VA = "0x1B1951C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x1B19570", Offset = "0x1B19570", VA = "0x1B19570")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x1B19D24", Offset = "0x1B19D24", VA = "0x1B19D24")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x1B19E84", Offset = "0x1B19E84", VA = "0x1B19E84")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x1B1A014", Offset = "0x1B1A014", VA = "0x1B1A014")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x1B1A184", Offset = "0x1B1A184", VA = "0x1B1A184")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x200024F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44BEC", Offset = "0xB44BEC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44BEC", Offset = "0xB44BEC")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000585")]
		public class SpineEffector
		{
			[Token(Token = "0x4001DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56CC8", Offset = "0xB56CC8")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4001DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56D00", Offset = "0xB56D00")]
			public float horizontalWeight;

			[Token(Token = "0x4001DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56D38", Offset = "0xB56D38")]
			public float verticalWeight;

			[Token(Token = "0x6002666")]
			[Address(RVA = "0x1B1AFEC", Offset = "0x1B1AFEC", VA = "0x1B1AFEC")]
			public SpineEffector()
			{
			}
		}

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A724", Offset = "0xB4A724")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A75C", Offset = "0xB4A75C")]
		public float spineBend;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A794", Offset = "0xB4A794")]
		public float spineSpeed;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x1B1A204", Offset = "0x1B1A204", VA = "0x1B1A204")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AE10", Offset = "0xB5AE10")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x1B1A250", Offset = "0x1B1A250", VA = "0x1B1A250", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AE48", Offset = "0xB5AE48")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x1B1A29C", Offset = "0x1B1A29C", VA = "0x1B1A29C", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AE80", Offset = "0xB5AE80")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x1B1A2E8", Offset = "0x1B1A2E8", VA = "0x1B1A2E8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x1B1A368", Offset = "0x1B1A368", VA = "0x1B1A368")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x1B1A400", Offset = "0x1B1A400", VA = "0x1B1A400")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x1B1A6BC", Offset = "0x1B1A6BC", VA = "0x1B1A6BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x1B1A6C8", Offset = "0x1B1A6C8", VA = "0x1B1A6C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x1B1A4BC", Offset = "0x1B1A4BC", VA = "0x1B1A4BC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x1B1A6D4", Offset = "0x1B1A6D4", VA = "0x1B1A6D4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x1B1AB74", Offset = "0x1B1AB74", VA = "0x1B1AB74")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x1B1AD34", Offset = "0x1B1AD34", VA = "0x1B1AD34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x1B1AE6C", Offset = "0x1B1AE6C", VA = "0x1B1AE6C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x1B1AF6C", Offset = "0x1B1AF6C", VA = "0x1B1AF6C")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000250")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44C4C", Offset = "0xB44C4C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44C4C", Offset = "0xB44C4C")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A7CC", Offset = "0xB4A7CC")]
		public Transform pelvis;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A804", Offset = "0xB4A804")]
		public Transform characterRoot;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A83C", Offset = "0xB4A83C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A83C", Offset = "0xB4A83C")]
		public float rootRotationWeight;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A890", Offset = "0xB4A890")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A8C8", Offset = "0xB4A8C8")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x1B1AFFC", Offset = "0x1B1AFFC", VA = "0x1B1AFFC", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AEB8", Offset = "0xB5AEB8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1B1B048", Offset = "0x1B1B048", VA = "0x1B1B048", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AEF0", Offset = "0xB5AEF0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1B1B094", Offset = "0x1B1B094", VA = "0x1B1B094", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1B1B0AC", Offset = "0x1B1B0AC", VA = "0x1B1B0AC")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1B1B29C", Offset = "0x1B1B29C", VA = "0x1B1B29C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x1B1B39C", Offset = "0x1B1B39C", VA = "0x1B1B39C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x1B1B9E0", Offset = "0x1B1B9E0", VA = "0x1B1B9E0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x1B1BDA8", Offset = "0x1B1BDA8", VA = "0x1B1BDA8")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x1B1C018", Offset = "0x1B1C018", VA = "0x1B1C018")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x1B1C338", Offset = "0x1B1C338", VA = "0x1B1C338")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x1B1C4C4", Offset = "0x1B1C4C4", VA = "0x1B1C4C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x1B1C68C", Offset = "0x1B1C68C", VA = "0x1B1C68C")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44CAC", Offset = "0xB44CAC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44CAC", Offset = "0xB44CAC")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000586")]
		public struct Foot
		{
			[Token(Token = "0x4001DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4001DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4001DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4001DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6002667")]
			[Address(RVA = "0x1B1D1EC", Offset = "0x1B1D1EC", VA = "0x1B1D1EC")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A900", Offset = "0xB4A900")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A938", Offset = "0xB4A938")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A938", Offset = "0xB4A938")]
		public float rootRotationWeight;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A98C", Offset = "0xB4A98C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A98C", Offset = "0xB4A98C")]
		public float minRootRotation;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4A9E4", Offset = "0xB4A9E4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4A9E4", Offset = "0xB4A9E4")]
		public float maxRootRotation;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AA3C", Offset = "0xB4AA3C")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AA74", Offset = "0xB4AA74")]
		public float maxLegOffset;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AAAC", Offset = "0xB4AAAC")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AAE4", Offset = "0xB4AAE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AAE4", Offset = "0xB4AAE4")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AB38", Offset = "0xB4AB38")]
		public Transform characterRoot;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AB70", Offset = "0xB4AB70")]
		public Transform pelvis;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ABA8", Offset = "0xB4ABA8")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ABE0", Offset = "0xB4ABE0")]
		public Transform head;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x1B1C70C", Offset = "0x1B1C70C", VA = "0x1B1C70C", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AF28", Offset = "0xB5AF28")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x1B1C758", Offset = "0x1B1C758", VA = "0x1B1C758", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AF60", Offset = "0xB5AF60")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x1B1C7A4", Offset = "0x1B1C7A4", VA = "0x1B1C7A4", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x1B1C7D8", Offset = "0x1B1C7D8", VA = "0x1B1C7D8")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x1B1C908", Offset = "0x1B1C908", VA = "0x1B1C908")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x1B1CAC8", Offset = "0x1B1CAC8", VA = "0x1B1CAC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x1B1CB30", Offset = "0x1B1CB30", VA = "0x1B1CB30")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x1B1CBE8", Offset = "0x1B1CBE8", VA = "0x1B1CBE8")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x1B1CECC", Offset = "0x1B1CECC", VA = "0x1B1CECC")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x1B1D22C", Offset = "0x1B1D22C", VA = "0x1B1D22C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x1B1D378", Offset = "0x1B1D378", VA = "0x1B1D378")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x1B1D708", Offset = "0x1B1D708", VA = "0x1B1D708")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1B1DEF8", Offset = "0x1B1DEF8", VA = "0x1B1DEF8")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x1B1E1B8", Offset = "0x1B1E1B8", VA = "0x1B1E1B8")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1B1E318", Offset = "0x1B1E318", VA = "0x1B1E318")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1B1E5F4", Offset = "0x1B1E5F4", VA = "0x1B1E5F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1B1E62C", Offset = "0x1B1E62C", VA = "0x1B1E62C")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x1B1E7EC", Offset = "0x1B1E7EC", VA = "0x1B1E7EC")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000252")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44D0C", Offset = "0xB44D0C")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AC28", Offset = "0xB4AC28")]
		public VRIK ik;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x1B1E8F8", Offset = "0x1B1E8F8", VA = "0x1B1E8F8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AF98", Offset = "0xB5AF98")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x1B1E8FC", Offset = "0x1B1E8FC", VA = "0x1B1E8FC", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5AFD0", Offset = "0xB5AFD0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x1B1E900", Offset = "0x1B1E900", VA = "0x1B1E900", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B008", Offset = "0xB5B008")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x1B1E904", Offset = "0x1B1E904", VA = "0x1B1E904", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x1B1E91C", Offset = "0x1B1E91C", VA = "0x1B1E91C")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x1B1E9B4", Offset = "0x1B1E9B4", VA = "0x1B1E9B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x1B1EA68", Offset = "0x1B1EA68", VA = "0x1B1EA68")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x1B1EC68", Offset = "0x1B1EC68", VA = "0x1B1EC68")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x1B1EEFC", Offset = "0x1B1EEFC", VA = "0x1B1EEFC")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x1B1F004", Offset = "0x1B1F004", VA = "0x1B1F004")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x1B1F204", Offset = "0x1B1F204", VA = "0x1B1F204")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x1B1F33C", Offset = "0x1B1F33C", VA = "0x1B1F33C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x1B1F49C", Offset = "0x1B1F49C", VA = "0x1B1F49C")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000253")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000587")]
		public enum Quality
		{
			[Token(Token = "0x4001DE6")]
			Fastest,
			[Token(Token = "0x4001DE7")]
			Simple,
			[Token(Token = "0x4001DE8")]
			Best
		}

		[Token(Token = "0x2000588")]
		public class Leg
		{
			[Token(Token = "0x4001DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56D70", Offset = "0xB56D70")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x4001DEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56D80", Offset = "0xB56D80")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4001DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4001DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56D90", Offset = "0xB56D90")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x4001DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DA0", Offset = "0xB56DA0")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x4001DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DB0", Offset = "0xB56DB0")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x4001DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DC0", Offset = "0xB56DC0")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x4001DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DD0", Offset = "0xB56DD0")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x4001DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4001DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Grounding grounding;

			[Token(Token = "0x4001DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private float lastTime;

			[Token(Token = "0x4001DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private float deltaTime;

			[Token(Token = "0x4001DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3 lastPosition;

			[Token(Token = "0x4001DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4001DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Quaternion r;

			[Token(Token = "0x4001DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private RaycastHit heelHit;

			[Token(Token = "0x4001DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 up;

			[Token(Token = "0x170003DD")]
			public bool isGrounded
			{
				[Token(Token = "0x6002668")]
				[Address(RVA = "0x1B20CAC", Offset = "0x1B20CAC", VA = "0x1B20CAC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB622F8", Offset = "0xB622F8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6002669")]
				[Address(RVA = "0x1B20CB4", Offset = "0x1B20CB4", VA = "0x1B20CB4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62308", Offset = "0xB62308")]
				private set
				{
				}
			}

			[Token(Token = "0x170003DE")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x600266A")]
				[Address(RVA = "0x1B20CC0", Offset = "0x1B20CC0", VA = "0x1B20CC0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62318", Offset = "0xB62318")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600266B")]
				[Address(RVA = "0x1B20CCC", Offset = "0x1B20CCC", VA = "0x1B20CCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62328", Offset = "0xB62328")]
				private set
				{
				}
			}

			[Token(Token = "0x170003DF")]
			public bool initiated
			{
				[Token(Token = "0x600266C")]
				[Address(RVA = "0x1B20CD8", Offset = "0x1B20CD8", VA = "0x1B20CD8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62338", Offset = "0xB62338")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600266D")]
				[Address(RVA = "0x1B20CE0", Offset = "0x1B20CE0", VA = "0x1B20CE0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62348", Offset = "0xB62348")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E0")]
			public float heightFromGround
			{
				[Token(Token = "0x600266E")]
				[Address(RVA = "0x1B20CEC", Offset = "0x1B20CEC", VA = "0x1B20CEC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62358", Offset = "0xB62358")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600266F")]
				[Address(RVA = "0x1B20CF4", Offset = "0x1B20CF4", VA = "0x1B20CF4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62368", Offset = "0xB62368")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E1")]
			public Vector3 velocity
			{
				[Token(Token = "0x6002670")]
				[Address(RVA = "0x1B20CFC", Offset = "0x1B20CFC", VA = "0x1B20CFC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62378", Offset = "0xB62378")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002671")]
				[Address(RVA = "0x1B20D08", Offset = "0x1B20D08", VA = "0x1B20D08")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62388", Offset = "0xB62388")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E2")]
			public Transform transform
			{
				[Token(Token = "0x6002672")]
				[Address(RVA = "0x1B20D14", Offset = "0x1B20D14", VA = "0x1B20D14")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62398", Offset = "0xB62398")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002673")]
				[Address(RVA = "0x1B20D1C", Offset = "0x1B20D1C", VA = "0x1B20D1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623A8", Offset = "0xB623A8")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E3")]
			public float IKOffset
			{
				[Token(Token = "0x6002674")]
				[Address(RVA = "0x1B20D24", Offset = "0x1B20D24", VA = "0x1B20D24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623B8", Offset = "0xB623B8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002675")]
				[Address(RVA = "0x1B20D2C", Offset = "0x1B20D2C", VA = "0x1B20D2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623C8", Offset = "0xB623C8")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E4")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x600267A")]
				[Address(RVA = "0x1B215F8", Offset = "0x1B215F8", VA = "0x1B215F8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170003E5")]
			private float rootYOffset
			{
				[Token(Token = "0x6002683")]
				[Address(RVA = "0x1B218EC", Offset = "0x1B218EC", VA = "0x1B218EC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6002676")]
			[Address(RVA = "0x1B1FB34", Offset = "0x1B1FB34", VA = "0x1B1FB34")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6002677")]
			[Address(RVA = "0x1B20D34", Offset = "0x1B20D34", VA = "0x1B20D34")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6002678")]
			[Address(RVA = "0x1B207CC", Offset = "0x1B207CC", VA = "0x1B207CC")]
			public void Reset()
			{
			}

			[Token(Token = "0x6002679")]
			[Address(RVA = "0x1B1FC40", Offset = "0x1B1FC40", VA = "0x1B1FC40")]
			public void Process()
			{
			}

			[Token(Token = "0x600267B")]
			[Address(RVA = "0x1B21344", Offset = "0x1B21344", VA = "0x1B21344")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600267C")]
			[Address(RVA = "0x1B20D80", Offset = "0x1B20D80", VA = "0x1B20D80")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600267D")]
			[Address(RVA = "0x1B21778", Offset = "0x1B21778", VA = "0x1B21778")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600267E")]
			[Address(RVA = "0x1B20FD4", Offset = "0x1B20FD4", VA = "0x1B20FD4")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x600267F")]
			[Address(RVA = "0x1B210DC", Offset = "0x1B210DC", VA = "0x1B210DC")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6002680")]
			[Address(RVA = "0x1B21874", Offset = "0x1B21874", VA = "0x1B21874")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6002681")]
			[Address(RVA = "0x1B21684", Offset = "0x1B21684", VA = "0x1B21684")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6002682")]
			[Address(RVA = "0x1B21A20", Offset = "0x1B21A20", VA = "0x1B21A20")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6002684")]
			[Address(RVA = "0x1B1FA84", Offset = "0x1B1FA84", VA = "0x1B1FA84")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000589")]
		public class Pelvis
		{
			[Token(Token = "0x4001DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DE0", Offset = "0xB56DE0")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x4001DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56DF0", Offset = "0xB56DF0")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x4001DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4001DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4001DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4001DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4001E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x170003E6")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6002685")]
				[Address(RVA = "0x1B21B10", Offset = "0x1B21B10", VA = "0x1B21B10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623D8", Offset = "0xB623D8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002686")]
				[Address(RVA = "0x1B21B1C", Offset = "0x1B21B1C", VA = "0x1B21B1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623E8", Offset = "0xB623E8")]
				private set
				{
				}
			}

			[Token(Token = "0x170003E7")]
			public float heightOffset
			{
				[Token(Token = "0x6002687")]
				[Address(RVA = "0x1B21B28", Offset = "0x1B21B28", VA = "0x1B21B28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB623F8", Offset = "0xB623F8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002688")]
				[Address(RVA = "0x1B21B30", Offset = "0x1B21B30", VA = "0x1B21B30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62408", Offset = "0xB62408")]
				private set
				{
				}
			}

			[Token(Token = "0x6002689")]
			[Address(RVA = "0x1B1FC18", Offset = "0x1B1FC18", VA = "0x1B1FC18")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x600268A")]
			[Address(RVA = "0x1B2071C", Offset = "0x1B2071C", VA = "0x1B2071C")]
			public void Reset()
			{
			}

			[Token(Token = "0x600268B")]
			[Address(RVA = "0x1B21B38", Offset = "0x1B21B38", VA = "0x1B21B38")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600268C")]
			[Address(RVA = "0x1B204B0", Offset = "0x1B204B0", VA = "0x1B204B0")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x600268D")]
			[Address(RVA = "0x1B1FB2C", Offset = "0x1B1FB2C", VA = "0x1B1FB2C")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AC60", Offset = "0xB4AC60")]
		public LayerMask layers;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AC98", Offset = "0xB4AC98")]
		public float maxStep;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ACD0", Offset = "0xB4ACD0")]
		public float heightOffset;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AD08", Offset = "0xB4AD08")]
		public float footSpeed;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AD40", Offset = "0xB4AD40")]
		public float footRadius;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AD78", Offset = "0xB4AD78")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ADC4", Offset = "0xB4ADC4")]
		public float prediction;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ADFC", Offset = "0xB4ADFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4ADFC", Offset = "0xB4ADFC")]
		public float footRotationWeight;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AE50", Offset = "0xB4AE50")]
		public float footRotationSpeed;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AE88", Offset = "0xB4AE88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AE88", Offset = "0xB4AE88")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AEE0", Offset = "0xB4AEE0")]
		public bool rotateSolver;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AF18", Offset = "0xB4AF18")]
		public float pelvisSpeed;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AF50", Offset = "0xB4AF50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4AF50", Offset = "0xB4AF50")]
		public float pelvisDamper;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AFA4", Offset = "0xB4AFA4")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4AFDC", Offset = "0xB4AFDC")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B014", Offset = "0xB4B014")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B04C", Offset = "0xB4B04C")]
		public Quality quality;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B084", Offset = "0xB4B084")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B094", Offset = "0xB4B094")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B0A4", Offset = "0xB4B0A4")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B0B4", Offset = "0xB4B0B4")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B0C4", Offset = "0xB4B0C4")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x17000088")]
		public Leg[] legs
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0x1B1F4F8", Offset = "0x1B1F4F8", VA = "0x1B1F4F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B040", Offset = "0xB5B040")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0x1B1F500", Offset = "0x1B1F500", VA = "0x1B1F500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B050", Offset = "0xB5B050")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x1B1F508", Offset = "0x1B1F508", VA = "0x1B1F508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B060", Offset = "0xB5B060")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x1B1F510", Offset = "0x1B1F510", VA = "0x1B1F510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B070", Offset = "0xB5B070")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public bool isGrounded
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x1B1F518", Offset = "0x1B1F518", VA = "0x1B1F518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B080", Offset = "0xB5B080")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x1B1F520", Offset = "0x1B1F520", VA = "0x1B1F520")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B090", Offset = "0xB5B090")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public Transform root
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x1B1F52C", Offset = "0x1B1F52C", VA = "0x1B1F52C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B0A0", Offset = "0xB5B0A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x1B1F534", Offset = "0x1B1F534", VA = "0x1B1F534")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B0B0", Offset = "0xB5B0B0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x1B1F53C", Offset = "0x1B1F53C", VA = "0x1B1F53C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B0C0", Offset = "0xB5B0C0")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x1B1F554", Offset = "0x1B1F554", VA = "0x1B1F554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5B0D0", Offset = "0xB5B0D0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public bool rootGrounded
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x1B1F574", Offset = "0x1B1F574", VA = "0x1B1F574")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008E")]
		public Vector3 up
		{
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0x1B19DF8", Offset = "0x1B19DF8", VA = "0x1B19DF8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700008F")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0x1B20880", Offset = "0x1B20880", VA = "0x1B20880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x1B1F5C8", Offset = "0x1B1F5C8", VA = "0x1B1F5C8")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x1B1F9A8", Offset = "0x1B1F9A8", VA = "0x1B1F9A8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x1B192BC", Offset = "0x1B192BC", VA = "0x1B192BC")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x1B19ABC", Offset = "0x1B19ABC", VA = "0x1B19ABC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x1B1B7C8", Offset = "0x1B1B7C8", VA = "0x1B1B7C8")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x1B18E20", Offset = "0x1B18E20", VA = "0x1B18E20")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x1B1FC28", Offset = "0x1B1FC28", VA = "0x1B1FC28")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x1B20950", Offset = "0x1B20950", VA = "0x1B20950")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x1B20AB8", Offset = "0x1B20AB8", VA = "0x1B20AB8")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x1B20BBC", Offset = "0x1B20BBC", VA = "0x1B20BBC")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x1B18A6C", Offset = "0x1B18A6C", VA = "0x1B18A6C")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000254")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44D44", Offset = "0xB44D44")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44D44", Offset = "0xB44D44")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x15DAE68", Offset = "0x15DAE68", VA = "0x15DAE68", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B0E0", Offset = "0xB5B0E0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x15DAEB4", Offset = "0x15DAEB4", VA = "0x15DAEB4", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B118", Offset = "0xB5B118")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x15DAF00", Offset = "0x15DAF00", VA = "0x15DAF00")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B150", Offset = "0xB5B150")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x15DAF4C", Offset = "0x15DAF4C", VA = "0x15DAF4C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B188", Offset = "0xB5B188")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x15DAF98", Offset = "0x15DAF98", VA = "0x15DAF98")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B1C0", Offset = "0xB5B1C0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x15DAFE4", Offset = "0x15DAFE4", VA = "0x15DAFE4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x15DAFEC", Offset = "0x15DAFEC", VA = "0x15DAFEC")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000255")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44DA4", Offset = "0xB44DA4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44DA4", Offset = "0xB44DA4")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x15DCEB4", Offset = "0x15DCEB4", VA = "0x15DCEB4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B1F8", Offset = "0xB5B1F8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x15DCF00", Offset = "0x15DCF00", VA = "0x15DCF00", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B230", Offset = "0xB5B230")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x15DCF4C", Offset = "0x15DCF4C", VA = "0x15DCF4C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B268", Offset = "0xB5B268")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x15DCF98", Offset = "0x15DCF98", VA = "0x15DCF98")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B2A0", Offset = "0xB5B2A0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x15DCFE4", Offset = "0x15DCFE4", VA = "0x15DCFE4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x15DCFEC", Offset = "0x15DCFEC", VA = "0x15DCFEC")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000256")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44E04", Offset = "0xB44E04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44E04", Offset = "0xB44E04")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x15DD908", Offset = "0x15DD908", VA = "0x15DD908", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B2D8", Offset = "0xB5B2D8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x15DD954", Offset = "0x15DD954", VA = "0x15DD954", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B310", Offset = "0xB5B310")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x15DD9A0", Offset = "0x15DD9A0", VA = "0x15DD9A0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B348", Offset = "0xB5B348")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x15DD9EC", Offset = "0x15DD9EC", VA = "0x15DD9EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B380", Offset = "0xB5B380")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x15DDA38", Offset = "0x15DDA38", VA = "0x15DDA38", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x15DDA40", Offset = "0x15DDA40", VA = "0x15DDA40")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44E64", Offset = "0xB44E64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44E64", Offset = "0xB44E64")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x15DE0C0", Offset = "0x15DE0C0", VA = "0x15DE0C0", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B3B8", Offset = "0xB5B3B8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x15DE10C", Offset = "0x15DE10C", VA = "0x15DE10C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B3F0", Offset = "0xB5B3F0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x15DE158", Offset = "0x15DE158", VA = "0x15DE158")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B428", Offset = "0xB5B428")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x15DE1A4", Offset = "0x15DE1A4", VA = "0x15DE1A4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B460", Offset = "0xB5B460")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x15DE1F0", Offset = "0x15DE1F0", VA = "0x15DE1F0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x15DE1F8", Offset = "0x15DE1F8", VA = "0x15DE1F8")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000258")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44EC4", Offset = "0xB44EC4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44EC4", Offset = "0xB44EC4")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x1B174D4", Offset = "0x1B174D4", VA = "0x1B174D4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B498", Offset = "0xB5B498")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x1B17520", Offset = "0x1B17520", VA = "0x1B17520", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B4D0", Offset = "0xB5B4D0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x1B1756C", Offset = "0x1B1756C", VA = "0x1B1756C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B508", Offset = "0xB5B508")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x1B175B8", Offset = "0x1B175B8", VA = "0x1B175B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B540", Offset = "0xB5B540")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x1B17604", Offset = "0x1B17604", VA = "0x1B17604")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B578", Offset = "0xB5B578")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x1B17650", Offset = "0x1B17650", VA = "0x1B17650")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B5B0", Offset = "0xB5B5B0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x1B1769C", Offset = "0x1B1769C", VA = "0x1B1769C")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x1B176C0", Offset = "0x1B176C0", VA = "0x1B176C0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x1B176C8", Offset = "0x1B176C8", VA = "0x1B176C8")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x1B17884", Offset = "0x1B17884", VA = "0x1B17884")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x1B17BD8", Offset = "0x1B17BD8", VA = "0x1B17BD8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B5E8", Offset = "0xB5B5E8")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x1B17BF8", Offset = "0x1B17BF8", VA = "0x1B17BF8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B620", Offset = "0xB5B620")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x1B17CD4", Offset = "0x1B17CD4", VA = "0x1B17CD4")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000F98")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x1B24554", Offset = "0x1B24554", VA = "0x1B24554", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x1B245D8", Offset = "0x1B245D8", VA = "0x1B245D8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x1B24648", Offset = "0x1B24648", VA = "0x1B24648", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000F9C")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000F9D")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x1B17D5C", Offset = "0x1B17D5C", VA = "0x1B17D5C")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B0D4", Offset = "0xB4B0D4")]
		public IK[] IKComponents;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B10C", Offset = "0xB4B10C")]
		public Animator animator;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000090")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0x1B275B4", Offset = "0x1B275B4", VA = "0x1B275B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x1B27650", Offset = "0x1B27650", VA = "0x1B27650")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x1B276C0", Offset = "0x1B276C0", VA = "0x1B276C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x1B2777C", Offset = "0x1B2777C", VA = "0x1B2777C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x1B277B8", Offset = "0x1B277B8", VA = "0x1B277B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x1B276F4", Offset = "0x1B276F4", VA = "0x1B276F4")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x1B27844", Offset = "0x1B27844", VA = "0x1B27844")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44F24", Offset = "0xB44F24")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x1B42DEC", Offset = "0x1B42DEC", VA = "0x1B42DEC", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B658", Offset = "0xB5B658")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x1B42E58", Offset = "0x1B42E58", VA = "0x1B42E58", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B690", Offset = "0xB5B690")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x1B42EC4", Offset = "0x1B42EC4", VA = "0x1B42EC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B6C8", Offset = "0xB5B6C8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x1B42F10", Offset = "0x1B42F10", VA = "0x1B42F10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B700", Offset = "0xB5B700")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x1B42F5C", Offset = "0x1B42F5C", VA = "0x1B42F5C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x1B42F64", Offset = "0x1B42F64", VA = "0x1B42F64")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200025C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44F5C", Offset = "0xB44F5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44F5C", Offset = "0xB44F5C")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x1B42FCC", Offset = "0x1B42FCC", VA = "0x1B42FCC", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B738", Offset = "0xB5B738")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x1B43018", Offset = "0x1B43018", VA = "0x1B43018", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B770", Offset = "0xB5B770")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x1B43064", Offset = "0x1B43064", VA = "0x1B43064")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B7A8", Offset = "0xB5B7A8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x1B430B0", Offset = "0x1B430B0", VA = "0x1B430B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B7E0", Offset = "0xB5B7E0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x1B430FC", Offset = "0x1B430FC", VA = "0x1B430FC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x1B43104", Offset = "0x1B43104", VA = "0x1B43104")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB44FBC", Offset = "0xB44FBC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB44FBC", Offset = "0xB44FBC")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x1B4316C", Offset = "0x1B4316C", VA = "0x1B4316C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B818", Offset = "0xB5B818")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x1B431B8", Offset = "0x1B431B8", VA = "0x1B431B8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B850", Offset = "0xB5B850")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x1B43204", Offset = "0x1B43204", VA = "0x1B43204")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B888", Offset = "0xB5B888")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x1B43250", Offset = "0x1B43250", VA = "0x1B43250")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B8C0", Offset = "0xB5B8C0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x1B4329C", Offset = "0x1B4329C", VA = "0x1B4329C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x1B432A4", Offset = "0x1B432A4", VA = "0x1B432A4")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB4501C", Offset = "0xB4501C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4501C", Offset = "0xB4501C")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x175225C", Offset = "0x175225C", VA = "0x175225C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B8F8", Offset = "0xB5B8F8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x17522A8", Offset = "0x17522A8", VA = "0x17522A8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B930", Offset = "0xB5B930")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x17522F4", Offset = "0x17522F4", VA = "0x17522F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B968", Offset = "0xB5B968")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x1752340", Offset = "0x1752340", VA = "0x1752340")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B9A0", Offset = "0xB5B9A0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x175238C", Offset = "0x175238C", VA = "0x175238C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x1752394", Offset = "0x1752394", VA = "0x1752394")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200025F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB4507C", Offset = "0xB4507C")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200058A")]
		public class References
		{
			[Token(Token = "0x4001E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4001E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4001E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4001E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform chest;

			[Token(Token = "0x4001E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform neck;

			[Token(Token = "0x4001E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4001E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Transform leftShoulder;

			[Token(Token = "0x4001E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4001E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4001E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4001E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Transform rightShoulder;

			[Token(Token = "0x4001E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4001E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4001E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4001E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Transform leftThigh;

			[Token(Token = "0x4001E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Transform leftCalf;

			[Token(Token = "0x4001E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Transform leftFoot;

			[Token(Token = "0x4001E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Transform leftToes;

			[Token(Token = "0x4001E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Transform rightThigh;

			[Token(Token = "0x4001E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Transform rightCalf;

			[Token(Token = "0x4001E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Transform rightFoot;

			[Token(Token = "0x4001E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public Transform rightToes;

			[Token(Token = "0x170003E8")]
			public bool isFilled
			{
				[Token(Token = "0x600268F")]
				[Address(RVA = "0x17534A8", Offset = "0x17534A8", VA = "0x17534A8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003E9")]
			public bool isEmpty
			{
				[Token(Token = "0x6002690")]
				[Address(RVA = "0x175302C", Offset = "0x175302C", VA = "0x175302C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600268E")]
			[Address(RVA = "0x1753894", Offset = "0x1753894", VA = "0x1753894")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6002691")]
			[Address(RVA = "0x1752C18", Offset = "0x1752C18", VA = "0x1752C18")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6002692")]
			[Address(RVA = "0x175388C", Offset = "0x175388C", VA = "0x175388C")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0xB4B144", Offset = "0xB4B144")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B144", Offset = "0xB4B144")]
		public References references;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B1C0", Offset = "0xB4B1C0")]
		public IKSolverVR solver;

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x1752ACC", Offset = "0x1752ACC", VA = "0x1752ACC", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5B9D8", Offset = "0xB5B9D8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x1752B38", Offset = "0x1752B38", VA = "0x1752B38", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BA10", Offset = "0xB5BA10")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x1752BA4", Offset = "0x1752BA4", VA = "0x1752BA4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BA48", Offset = "0xB5BA48")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1752BF0", Offset = "0x1752BF0", VA = "0x1752BF0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BA80", Offset = "0xB5BA80")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x1752F88", Offset = "0x1752F88", VA = "0x1752F88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BAB8", Offset = "0xB5BAB8")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x1752FB0", Offset = "0x1752FB0", VA = "0x1752FB0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x1752FB8", Offset = "0x1752FB8", VA = "0x1752FB8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x1753804", Offset = "0x1753804", VA = "0x1753804")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000260")]
	public class FABRIKChain
	{
		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B1F8", Offset = "0xB4B1F8")]
		public float pull;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B210", Offset = "0xB4B210")]
		public float pin;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x15DDAA8", Offset = "0x15DDAA8", VA = "0x15DDAA8")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x15DDB70", Offset = "0x15DDB70", VA = "0x15DDB70")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x15DDB90", Offset = "0x15DDB90", VA = "0x15DDB90")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x15DDF60", Offset = "0x15DDF60", VA = "0x15DDF60")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x15DDC64", Offset = "0x15DDC64", VA = "0x15DDC64")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x15DE058", Offset = "0x15DE058", VA = "0x15DE058")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x15DE260", Offset = "0x15DE260", VA = "0x15DE260")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x15DE7C8", Offset = "0x15DE7C8", VA = "0x15DE7C8")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x15DE988", Offset = "0x15DE988", VA = "0x15DE988")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x15DEA80", Offset = "0x15DEA80", VA = "0x15DEA80")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200058B")]
		public class BendBone
		{
			[Token(Token = "0x4001E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56E00", Offset = "0xB56E00")]
			public Transform transform;

			[Token(Token = "0x4001E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56E38", Offset = "0xB56E38")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB56E38", Offset = "0xB56E38")]
			public float weight;

			[Token(Token = "0x4001E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6002693")]
			[Address(RVA = "0x15E1AE8", Offset = "0x15E1AE8", VA = "0x15E1AE8")]
			public BendBone()
			{
			}

			[Token(Token = "0x6002694")]
			[Address(RVA = "0x15E1B68", Offset = "0x15E1B68", VA = "0x15E1B68")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6002695")]
			[Address(RVA = "0x15DF238", Offset = "0x15DF238", VA = "0x15DF238")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6002696")]
			[Address(RVA = "0x15DF640", Offset = "0x15DF640", VA = "0x15DF640")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B228", Offset = "0xB4B228")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB4B260", Offset = "0xB4B260")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B260", Offset = "0xB4B260")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B260", Offset = "0xB4B260")]
		public float positionWeight;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B2D8", Offset = "0xB4B2D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B2D8", Offset = "0xB4B2D8")]
		public float bodyWeight;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B32C", Offset = "0xB4B32C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B32C", Offset = "0xB4B32C")]
		public float thighWeight;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B380", Offset = "0xB4B380")]
		public bool handsPullBody;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB4B3B8", Offset = "0xB4B3B8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B3B8", Offset = "0xB4B3B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B3B8", Offset = "0xB4B3B8")]
		public float rotationWeight;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B430", Offset = "0xB4B430")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B430", Offset = "0xB4B430")]
		public float bodyClampWeight;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B484", Offset = "0xB4B484")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B484", Offset = "0xB4B484")]
		public float headClampWeight;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B4D8", Offset = "0xB4B4D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B4D8", Offset = "0xB4B4D8")]
		public float bendWeight;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B52C", Offset = "0xB4B52C")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB4B564", Offset = "0xB4B564")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B564", Offset = "0xB4B564")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B564", Offset = "0xB4B564")]
		public float CCDWeight;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B5DC", Offset = "0xB4B5DC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B5DC", Offset = "0xB4B5DC")]
		public float roll;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B630", Offset = "0xB4B630")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B630", Offset = "0xB4B630")]
		public float damper;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B688", Offset = "0xB4B688")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB4B6C0", Offset = "0xB4B6C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B6C0", Offset = "0xB4B6C0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B6C0", Offset = "0xB4B6C0")]
		public float postStretchWeight;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B738", Offset = "0xB4B738")]
		public float maxStretch;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B770", Offset = "0xB4B770")]
		public float stretchDamper;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B7A8", Offset = "0xB4B7A8")]
		public bool fixHead;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B7E0", Offset = "0xB4B7E0")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB4B818", Offset = "0xB4B818")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B850", Offset = "0xB4B850")]
		public float chestDirectionWeight;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x15DEA88", Offset = "0x15DEA88", VA = "0x15DEA88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x15DEDB0", Offset = "0x15DEDB0", VA = "0x15DEDB0")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x15DF270", Offset = "0x15DF270", VA = "0x15DF270")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x15DF668", Offset = "0x15DF668", VA = "0x15DF668")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x15DFFF4", Offset = "0x15DFFF4", VA = "0x15DFFF4")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x15E0340", Offset = "0x15E0340", VA = "0x15E0340")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x15E06DC", Offset = "0x15E06DC", VA = "0x15E06DC")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x15E115C", Offset = "0x15E115C", VA = "0x15E115C")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x15DFD20", Offset = "0x15DFD20", VA = "0x15DFD20")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x15E1380", Offset = "0x15E1380", VA = "0x15E1380")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x15E1018", Offset = "0x15E1018", VA = "0x15E1018")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x15E0E7C", Offset = "0x15E0E7C", VA = "0x15E0E7C")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x15E16EC", Offset = "0x15E16EC", VA = "0x15E16EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x15E196C", Offset = "0x15E196C", VA = "0x15E196C")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000263")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x200058C")]
		public class ChildConstraint
		{
			[Token(Token = "0x4001E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4001E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4001E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4001E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4001E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56EAC", Offset = "0xB56EAC")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x4001E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56EBC", Offset = "0xB56EBC")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x4001E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4001E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4001E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4001E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x170003EA")]
			public float nominalDistance
			{
				[Token(Token = "0x6002697")]
				[Address(RVA = "0x1B15D10", Offset = "0x1B15D10", VA = "0x1B15D10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62418", Offset = "0xB62418")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002698")]
				[Address(RVA = "0x1B15D18", Offset = "0x1B15D18", VA = "0x1B15D18")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62428", Offset = "0xB62428")]
				private set
				{
				}
			}

			[Token(Token = "0x170003EB")]
			public bool isRigid
			{
				[Token(Token = "0x6002699")]
				[Address(RVA = "0x1B15D20", Offset = "0x1B15D20", VA = "0x1B15D20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62438", Offset = "0xB62438")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600269A")]
				[Address(RVA = "0x1B15D28", Offset = "0x1B15D28", VA = "0x1B15D28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62448", Offset = "0xB62448")]
				private set
				{
				}
			}

			[Token(Token = "0x600269B")]
			[Address(RVA = "0x1B15D34", Offset = "0x1B15D34", VA = "0x1B15D34")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x600269C")]
			[Address(RVA = "0x1B15D80", Offset = "0x1B15D80", VA = "0x1B15D80")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600269D")]
			[Address(RVA = "0x1B15DD8", Offset = "0x1B15DD8", VA = "0x1B15DD8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x600269E")]
			[Address(RVA = "0x1B15FDC", Offset = "0x1B15FDC", VA = "0x1B15FDC")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200058D")]
		public enum Smoothing
		{
			[Token(Token = "0x4001E25")]
			None,
			[Token(Token = "0x4001E26")]
			Exponential,
			[Token(Token = "0x4001E27")]
			Cubic
		}

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B868", Offset = "0xB4B868")]
		public float pin;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B880", Offset = "0xB4B880")]
		public float pull;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B898", Offset = "0xB4B898")]
		public float push;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B8B0", Offset = "0xB4B8B0")]
		public float pushParent;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B8C8", Offset = "0xB4B8C8")]
		public float reach;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000F9D")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x15E1C0C", Offset = "0x15E1C0C", VA = "0x15E1C0C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x15E1CD8", Offset = "0x15E1CD8", VA = "0x15E1CD8")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x15E1DE4", Offset = "0x15E1DE4", VA = "0x15E1DE4")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x15E1F08", Offset = "0x15E1F08", VA = "0x15E1F08")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x15E1FE4", Offset = "0x15E1FE4", VA = "0x15E1FE4")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x15E20E8", Offset = "0x15E20E8", VA = "0x15E20E8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x15E27B4", Offset = "0x15E27B4", VA = "0x15E27B4")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x15E227C", Offset = "0x15E227C", VA = "0x15E227C")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x15E2CA0", Offset = "0x15E2CA0", VA = "0x15E2CA0")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x15E3044", Offset = "0x15E3044", VA = "0x15E3044")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x15E3428", Offset = "0x15E3428", VA = "0x15E3428")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x15E39AC", Offset = "0x15E39AC", VA = "0x15E39AC")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x15E3F80", Offset = "0x15E3F80", VA = "0x15E3F80")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x15E4218", Offset = "0x15E4218", VA = "0x15E4218")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x15E3E78", Offset = "0x15E3E78", VA = "0x15E3E78")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x15E3794", Offset = "0x15E3794", VA = "0x15E3794")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x15E3DFC", Offset = "0x15E3DFC", VA = "0x15E3DFC")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x15E4300", Offset = "0x15E4300", VA = "0x15E4300")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x15E3D1C", Offset = "0x15E3D1C", VA = "0x15E3D1C")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x15E4100", Offset = "0x15E4100", VA = "0x15E4100")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000264")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B8E0", Offset = "0xB4B8E0")]
		public float weight;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B8F8", Offset = "0xB4B8F8")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x17000091")]
		public bool initiated
		{
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0x1B24870", Offset = "0x1B24870", VA = "0x1B24870")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BAF0", Offset = "0xB5BAF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0x1B24878", Offset = "0x1B24878", VA = "0x1B24878")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB00", Offset = "0xB5BB00")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x1B246A8", Offset = "0x1B246A8", VA = "0x1B246A8")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x1B24884", Offset = "0x1B24884", VA = "0x1B24884")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x1B24908", Offset = "0x1B24908", VA = "0x1B24908")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x1B249B4", Offset = "0x1B249B4", VA = "0x1B249B4")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x1B249C0", Offset = "0x1B249C0", VA = "0x1B249C0")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x1B24E84", Offset = "0x1B24E84", VA = "0x1B24E84")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x1B250B4", Offset = "0x1B250B4", VA = "0x1B250B4")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x1B25550", Offset = "0x1B25550", VA = "0x1B25550")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x1B24C44", Offset = "0x1B24C44", VA = "0x1B24C44")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x1B24D64", Offset = "0x1B24D64", VA = "0x1B24D64")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000265")]
	public class IKEffector
	{
		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B908", Offset = "0xB4B908")]
		public float positionWeight;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B920", Offset = "0xB4B920")]
		public float rotationWeight;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4B938", Offset = "0xB4B938")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B948", Offset = "0xB4B948")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x17000092")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0x1B25BBC", Offset = "0x1B25BBC", VA = "0x1B25BBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB10", Offset = "0xB5BB10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001000")]
			[Address(RVA = "0x1B25BC4", Offset = "0x1B25BC4", VA = "0x1B25BC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB20", Offset = "0xB5BB20")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x1B25B54", Offset = "0x1B25B54", VA = "0x1B25B54")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x1B25BD0", Offset = "0x1B25BD0", VA = "0x1B25BD0")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x1B25CA4", Offset = "0x1B25CA4", VA = "0x1B25CA4")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x1B25DE0", Offset = "0x1B25DE0", VA = "0x1B25DE0")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x1B25F38", Offset = "0x1B25F38", VA = "0x1B25F38")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1B26228", Offset = "0x1B26228", VA = "0x1B26228")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x1B264C8", Offset = "0x1B264C8", VA = "0x1B264C8")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x1B26608", Offset = "0x1B26608", VA = "0x1B26608")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x1B266B4", Offset = "0x1B266B4", VA = "0x1B266B4")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1B26D08", Offset = "0x1B26D08", VA = "0x1B26D08")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x1B26D78", Offset = "0x1B26D78", VA = "0x1B26D78")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x1B26F90", Offset = "0x1B26F90", VA = "0x1B26F90")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x1B272D8", Offset = "0x1B272D8", VA = "0x1B272D8")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000266")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x200058E")]
		public class BoneMap
		{
			[Token(Token = "0x4001E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4001E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4001E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4001E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4001E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4001E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4001E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4001E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4001E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4001E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4001E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4001E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4001E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4001E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4001E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4001E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4001E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4001E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4001E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4001E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4001E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x170003EC")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60026A0")]
				[Address(RVA = "0x1B27AB8", Offset = "0x1B27AB8", VA = "0x1B27AB8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170003ED")]
			public bool isNodeBone
			{
				[Token(Token = "0x60026A3")]
				[Address(RVA = "0x1B27C24", Offset = "0x1B27C24", VA = "0x1B27C24")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003EE")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x60026B7")]
				[Address(RVA = "0x1B28208", Offset = "0x1B28208", VA = "0x1B28208")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x600269F")]
			[Address(RVA = "0x1B27A8C", Offset = "0x1B27A8C", VA = "0x1B27A8C")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60026A1")]
			[Address(RVA = "0x1B27B84", Offset = "0x1B27B84", VA = "0x1B27B84")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60026A2")]
			[Address(RVA = "0x1B27BD4", Offset = "0x1B27BD4", VA = "0x1B27BD4")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60026A4")]
			[Address(RVA = "0x1B27C34", Offset = "0x1B27C34", VA = "0x1B27C34")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60026A5")]
			[Address(RVA = "0x1B27D1C", Offset = "0x1B27D1C", VA = "0x1B27D1C")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60026A6")]
			[Address(RVA = "0x1B27D24", Offset = "0x1B27D24", VA = "0x1B27D24")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60026A7")]
			[Address(RVA = "0x1B27EB4", Offset = "0x1B27EB4", VA = "0x1B27EB4")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60026A8")]
			[Address(RVA = "0x1B27FC0", Offset = "0x1B27FC0", VA = "0x1B27FC0")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60026A9")]
			[Address(RVA = "0x1B28058", Offset = "0x1B28058", VA = "0x1B28058")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60026AA")]
			[Address(RVA = "0x1B2842C", Offset = "0x1B2842C", VA = "0x1B2842C")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60026AB")]
			[Address(RVA = "0x1B28464", Offset = "0x1B28464", VA = "0x1B28464")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60026AC")]
			[Address(RVA = "0x1B2849C", Offset = "0x1B2849C", VA = "0x1B2849C")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60026AD")]
			[Address(RVA = "0x1B284C4", Offset = "0x1B284C4", VA = "0x1B284C4")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60026AE")]
			[Address(RVA = "0x1B285F0", Offset = "0x1B285F0", VA = "0x1B285F0")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60026AF")]
			[Address(RVA = "0x1B28938", Offset = "0x1B28938", VA = "0x1B28938")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60026B0")]
			[Address(RVA = "0x1B28968", Offset = "0x1B28968", VA = "0x1B28968")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60026B1")]
			[Address(RVA = "0x1B28B00", Offset = "0x1B28B00", VA = "0x1B28B00")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x60026B2")]
			[Address(RVA = "0x1B28B70", Offset = "0x1B28B70", VA = "0x1B28B70")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x60026B3")]
			[Address(RVA = "0x1B28DB4", Offset = "0x1B28DB4", VA = "0x1B28DB4")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x60026B4")]
			[Address(RVA = "0x1B28FDC", Offset = "0x1B28FDC", VA = "0x1B28FDC")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x60026B5")]
			[Address(RVA = "0x1B290F4", Offset = "0x1B290F4", VA = "0x1B290F4")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60026B6")]
			[Address(RVA = "0x1B28734", Offset = "0x1B28734", VA = "0x1B28734")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60026B8")]
			[Address(RVA = "0x1B29290", Offset = "0x1B29290", VA = "0x1B29290")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x1B2784C", Offset = "0x1B2784C", VA = "0x1B2784C", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x1B27854", Offset = "0x1B27854", VA = "0x1B27854", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x1B27858", Offset = "0x1B27858", VA = "0x1B27858")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x1B2797C", Offset = "0x1B2797C", VA = "0x1B2797C")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x1B27A84", Offset = "0x1B27A84", VA = "0x1B27A84")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000267")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B960", Offset = "0xB4B960")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x1B292AC", Offset = "0x1B292AC", VA = "0x1B292AC", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x1B2934C", Offset = "0x1B2934C", VA = "0x1B2934C")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x1B293D0", Offset = "0x1B293D0", VA = "0x1B293D0")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x1B29468", Offset = "0x1B29468", VA = "0x1B29468")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x1B29480", Offset = "0x1B29480", VA = "0x1B29480")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x1B2949C", Offset = "0x1B2949C", VA = "0x1B2949C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x1B29538", Offset = "0x1B29538", VA = "0x1B29538")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x1B29550", Offset = "0x1B29550", VA = "0x1B29550")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000268")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x200058F")]
		public enum BoneMapType
		{
			[Token(Token = "0x4001E3F")]
			Parent,
			[Token(Token = "0x4001E40")]
			Bone1,
			[Token(Token = "0x4001E41")]
			Bone2,
			[Token(Token = "0x4001E42")]
			Bone3
		}

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B978", Offset = "0xB4B978")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B990", Offset = "0xB4B990")]
		public float weight;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap3;

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x1B29574", Offset = "0x1B29574", VA = "0x1B29574", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x1B295F8", Offset = "0x1B295F8", VA = "0x1B295F8")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x1B296CC", Offset = "0x1B296CC", VA = "0x1B296CC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x1B29A20", Offset = "0x1B29A20", VA = "0x1B29A20")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x1B29B20", Offset = "0x1B29B20", VA = "0x1B29B20")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x1B29C4C", Offset = "0x1B29C4C", VA = "0x1B29C4C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x1B29C58", Offset = "0x1B29C58", VA = "0x1B29C58")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x1B29D00", Offset = "0x1B29D00", VA = "0x1B29D00")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x1B29DB8", Offset = "0x1B29DB8", VA = "0x1B29DB8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x1B2A028", Offset = "0x1B2A028", VA = "0x1B2A028")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x1B2A0E0", Offset = "0x1B2A0E0", VA = "0x1B2A0E0")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000269")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B9A8", Offset = "0xB4B9A8")]
		public int iterations;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B9C0", Offset = "0xB4B9C0")]
		public float twistWeight;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x1B2A24C", Offset = "0x1B2A24C", VA = "0x1B2A24C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x1B2A53C", Offset = "0x1B2A53C", VA = "0x1B2A53C")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1B2A658", Offset = "0x1B2A658", VA = "0x1B2A658")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x1B2A7B0", Offset = "0x1B2A7B0", VA = "0x1B2A7B0")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x1B2A7C0", Offset = "0x1B2A7C0", VA = "0x1B2A7C0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x1B2A828", Offset = "0x1B2A828", VA = "0x1B2A828")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1B2A8A8", Offset = "0x1B2A8A8", VA = "0x1B2A8A8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x1B2AEFC", Offset = "0x1B2AEFC", VA = "0x1B2AEFC")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x1B2AF34", Offset = "0x1B2AF34", VA = "0x1B2AF34")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x1B2B214", Offset = "0x1B2B214", VA = "0x1B2B214")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x1B2B5C8", Offset = "0x1B2B5C8", VA = "0x1B2B5C8")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x1B2B6B4", Offset = "0x1B2B6B4", VA = "0x1B2B6B4")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1B2B77C", Offset = "0x1B2B77C", VA = "0x1B2B77C")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026A")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000590")]
		public class Point
		{
			[Token(Token = "0x4001E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB56ECC", Offset = "0xB56ECC")]
			public float weight;

			[Token(Token = "0x4001E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4001E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4001E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4001E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60026B9")]
			[Address(RVA = "0x1BD21E0", Offset = "0x1BD21E0", VA = "0x1BD21E0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60026BA")]
			[Address(RVA = "0x1BD2230", Offset = "0x1BD2230", VA = "0x1BD2230")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60026BB")]
			[Address(RVA = "0x1BD23B8", Offset = "0x1BD23B8", VA = "0x1BD23B8")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60026BC")]
			[Address(RVA = "0x1BD23F0", Offset = "0x1BD23F0", VA = "0x1BD23F0")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60026BD")]
			[Address(RVA = "0x1BD2428", Offset = "0x1BD2428", VA = "0x1BD2428")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60026BE")]
			[Address(RVA = "0x1BD2478", Offset = "0x1BD2478", VA = "0x1BD2478")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60026BF")]
			[Address(RVA = "0x1BD2100", Offset = "0x1BD2100", VA = "0x1BD2100")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000591")]
		public class Bone : Point
		{
			[Token(Token = "0x4001E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4001E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4001E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4001E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4001E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x170003EF")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60026C0")]
				[Address(RVA = "0x1B2C13C", Offset = "0x1B2C13C", VA = "0x1B2C13C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60026C1")]
				[Address(RVA = "0x1B2C230", Offset = "0x1B2C230", VA = "0x1B2C230")]
				set
				{
				}
			}

			[Token(Token = "0x60026C2")]
			[Address(RVA = "0x1B2C2B8", Offset = "0x1B2C2B8", VA = "0x1B2C2B8")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60026C3")]
			[Address(RVA = "0x1B2C578", Offset = "0x1B2C578", VA = "0x1B2C578")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60026C4")]
			[Address(RVA = "0x1B2C858", Offset = "0x1B2C858", VA = "0x1B2C858")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60026C5")]
			[Address(RVA = "0x1B2CAC0", Offset = "0x1B2CAC0", VA = "0x1B2CAC0")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60026C6")]
			[Address(RVA = "0x1B2CAE8", Offset = "0x1B2CAE8", VA = "0x1B2CAE8")]
			public Bone()
			{
			}

			[Token(Token = "0x60026C7")]
			[Address(RVA = "0x1B2CB70", Offset = "0x1B2CB70", VA = "0x1B2CB70")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60026C8")]
			[Address(RVA = "0x1B2CC0C", Offset = "0x1B2CC0C", VA = "0x1B2CC0C")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000592")]
		public class Node : Point
		{
			[Token(Token = "0x4001E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4001E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4001E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4001E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x60026C9")]
			[Address(RVA = "0x1BD20FC", Offset = "0x1BD20FC", VA = "0x1BD20FC")]
			public Node()
			{
			}

			[Token(Token = "0x60026CA")]
			[Address(RVA = "0x1BD2180", Offset = "0x1BD2180", VA = "0x1BD2180")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60026CB")]
			[Address(RVA = "0x1BD21A8", Offset = "0x1BD21A8", VA = "0x1BD21A8")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x2000593")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000594")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4B9E8", Offset = "0xB4B9E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4B9E8", Offset = "0xB4B9E8")]
		public float IKPositionWeight;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BA3C", Offset = "0xB4BA3C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x17000093")]
		public bool initiated
		{
			[Token(Token = "0x600103B")]
			[Address(RVA = "0x1B2BB8C", Offset = "0x1B2BB8C", VA = "0x1B2BB8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB30", Offset = "0xB5BB30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600103C")]
			[Address(RVA = "0x1B2BB94", Offset = "0x1B2BB94", VA = "0x1B2BB94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB40", Offset = "0xB5BB40")]
			private set
			{
			}
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x1B2BA64", Offset = "0x1B2BA64", VA = "0x1B2BA64")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001033")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x1B166D8", Offset = "0x1B166D8", VA = "0x1B166D8")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x1B16BA4", Offset = "0x1B16BA4", VA = "0x1B16BA4")]
		public void Update()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x1B2BAE0", Offset = "0x1B2BAE0", VA = "0x1B2BAE0", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1B2BAEC", Offset = "0x1B2BAEC", VA = "0x1B2BAEC")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1B2BAF8", Offset = "0x1B2BAF8", VA = "0x1B2BAF8")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x1B2BB00", Offset = "0x1B2BB00", VA = "0x1B2BB00")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x1B2BB84", Offset = "0x1B2BB84", VA = "0x1B2BB84")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x600103D")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x600103E")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x600103F")]
		public abstract void FixTransforms();

		[Token(Token = "0x6001040")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6001041")]
		protected abstract void OnInitiate();

		[Token(Token = "0x6001042")]
		protected abstract void OnUpdate();

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x1B2BBA0", Offset = "0x1B2BBA0", VA = "0x1B2BBA0")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x1B2BBB8", Offset = "0x1B2BBB8", VA = "0x1B2BBB8")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x1B2BCF4", Offset = "0x1B2BCF4", VA = "0x1B2BCF4")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1B2BDA0", Offset = "0x1B2BDA0", VA = "0x1B2BDA0")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x1B2C124", Offset = "0x1B2C124", VA = "0x1B2C124")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026B")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BA84", Offset = "0xB4BA84")]
		public float poleWeight;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BA9C", Offset = "0xB4BA9C")]
		public float clampWeight;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BAB4", Offset = "0xB4BAB4")]
		public int clampSmoothing;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000094")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0x1BD281C", Offset = "0x1BD281C", VA = "0x1BD281C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000095")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x600104A")]
			[Address(RVA = "0x1BD28E8", Offset = "0x1BD28E8", VA = "0x1BD28E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000096")]
		protected override int minBones
		{
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x1BD3660", Offset = "0x1BD3660", VA = "0x1BD3660", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000097")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6001051")]
			[Address(RVA = "0x1BD3C0C", Offset = "0x1BD3C0C", VA = "0x1BD3C0C", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x1BD271C", Offset = "0x1BD271C", VA = "0x1BD271C")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x1BD29B4", Offset = "0x1BD29B4", VA = "0x1BD29B4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x1BD2C3C", Offset = "0x1BD2C3C", VA = "0x1BD2C3C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x1BD35AC", Offset = "0x1BD35AC", VA = "0x1BD35AC")]
		private void Solve()
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x1BD31D4", Offset = "0x1BD31D4", VA = "0x1BD31D4")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x1BD3668", Offset = "0x1BD3668", VA = "0x1BD3668")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1BD3C80", Offset = "0x1BD3C80", VA = "0x1BD3C80")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026C")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x1BD3D84", Offset = "0x1BD3D84", VA = "0x1BD3D84")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x1BD3E34", Offset = "0x1BD3E34", VA = "0x1BD3E34", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x1BD4434", Offset = "0x1BD4434", VA = "0x1BD4434", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x1BD4B94", Offset = "0x1BD4B94", VA = "0x1BD4B94")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x1BD52F8", Offset = "0x1BD52F8", VA = "0x1BD52F8")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026D")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000098")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x1BD6514", Offset = "0x1BD6514", VA = "0x1BD6514", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x1BD52FC", Offset = "0x1BD52FC", VA = "0x1BD52FC")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x1BD5A40", Offset = "0x1BD5A40", VA = "0x1BD5A40")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x1BD5B74", Offset = "0x1BD5B74", VA = "0x1BD5B74", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x1BD5C0C", Offset = "0x1BD5C0C", VA = "0x1BD5C0C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x1BD61B0", Offset = "0x1BD61B0", VA = "0x1BD61B0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x1BD651C", Offset = "0x1BD651C", VA = "0x1BD651C")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x1BD53CC", Offset = "0x1BD53CC", VA = "0x1BD53CC")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x1BD5B20", Offset = "0x1BD5B20", VA = "0x1BD5B20")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x1BD64B8", Offset = "0x1BD64B8", VA = "0x1BD64B8")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x1BD5868", Offset = "0x1BD5868", VA = "0x1BD5868")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x1BD6D64", Offset = "0x1BD6D64", VA = "0x1BD6D64")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x1BD6E74", Offset = "0x1BD6E74", VA = "0x1BD6E74")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x1BD6FA0", Offset = "0x1BD6FA0", VA = "0x1BD6FA0")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x1BD70B8", Offset = "0x1BD70B8", VA = "0x1BD70B8")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x1BD5F18", Offset = "0x1BD5F18", VA = "0x1BD5F18")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x1BD6064", Offset = "0x1BD6064", VA = "0x1BD6064")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x1BD72A4", Offset = "0x1BD72A4", VA = "0x1BD72A4")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x1BD67D8", Offset = "0x1BD67D8", VA = "0x1BD67D8")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x1BD5B10", Offset = "0x1BD5B10", VA = "0x1BD5B10")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x1BD7A14", Offset = "0x1BD7A14", VA = "0x1BD7A14")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x1BD747C", Offset = "0x1BD747C", VA = "0x1BD747C")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x1BD6634", Offset = "0x1BD6634", VA = "0x1BD6634")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x1BD6714", Offset = "0x1BD6714", VA = "0x1BD6714")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x1BD7AE0", Offset = "0x1BD7AE0", VA = "0x1BD7AE0")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026E")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BACC", Offset = "0xB4BACC")]
		public float rootPin;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x1BD7B54", Offset = "0x1BD7B54", VA = "0x1BD7B54", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x1BD8420", Offset = "0x1BD8420", VA = "0x1BD8420", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x1BD84B8", Offset = "0x1BD84B8", VA = "0x1BD84B8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x1BD8550", Offset = "0x1BD8550", VA = "0x1BD8550", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x1BD8650", Offset = "0x1BD8650", VA = "0x1BD8650")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x1BD86EC", Offset = "0x1BD86EC", VA = "0x1BD86EC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x1BD8C54", Offset = "0x1BD8C54", VA = "0x1BD8C54", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x1BD8E54", Offset = "0x1BD8E54", VA = "0x1BD8E54", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x1BD8D04", Offset = "0x1BD8D04", VA = "0x1BD8D04")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x1BD8920", Offset = "0x1BD8920", VA = "0x1BD8920")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x1BD8EEC", Offset = "0x1BD8EEC", VA = "0x1BD8EEC")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026F")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BAE4", Offset = "0xB4BAE4")]
		public int iterations;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x1BD8F54", Offset = "0x1BD8F54", VA = "0x1BD8F54")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x1BD9048", Offset = "0x1BD9048", VA = "0x1BD9048")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1BD90A4", Offset = "0x1BD90A4", VA = "0x1BD90A4")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x1BD91D8", Offset = "0x1BD91D8", VA = "0x1BD91D8")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x1BD9234", Offset = "0x1BD9234", VA = "0x1BD9234")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x1BD92B4", Offset = "0x1BD92B4", VA = "0x1BD92B4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x1BD943C", Offset = "0x1BD943C", VA = "0x1BD943C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x1BD95B0", Offset = "0x1BD95B0", VA = "0x1BD95B0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x1BD97B4", Offset = "0x1BD97B4", VA = "0x1BD97B4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x1BD9888", Offset = "0x1BD9888", VA = "0x1BD9888", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x1BD9968", Offset = "0x1BD9968", VA = "0x1BD9968", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x1BD9ADC", Offset = "0x1BD9ADC", VA = "0x1BD9ADC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x1BD9C98", Offset = "0x1BD9C98", VA = "0x1BD9C98", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x1BD9EE4", Offset = "0x1BD9EE4", VA = "0x1BD9EE4", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x1BDA1BC", Offset = "0x1BDA1BC", VA = "0x1BDA1BC", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x1BDA200", Offset = "0x1BDA200", VA = "0x1BDA200", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x1BDA2F0", Offset = "0x1BDA2F0", VA = "0x1BDA2F0")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000270")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x400101A")]
		Body,
		[Token(Token = "0x400101B")]
		LeftShoulder,
		[Token(Token = "0x400101C")]
		RightShoulder,
		[Token(Token = "0x400101D")]
		LeftThigh,
		[Token(Token = "0x400101E")]
		RightThigh,
		[Token(Token = "0x400101F")]
		LeftHand,
		[Token(Token = "0x4001020")]
		RightHand,
		[Token(Token = "0x4001021")]
		LeftFoot,
		[Token(Token = "0x4001022")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000271")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4001024")]
		LeftArm,
		[Token(Token = "0x4001025")]
		RightArm,
		[Token(Token = "0x4001026")]
		LeftLeg,
		[Token(Token = "0x4001027")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x2000272")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BAFC", Offset = "0xB4BAFC")]
		public float spineStiffness;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB14", Offset = "0xB4BB14")]
		public float pullBodyVertical;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB2C", Offset = "0xB4BB2C")]
		public float pullBodyHorizontal;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BB44", Offset = "0xB4BB44")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000099")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x600108D")]
			[Address(RVA = "0x1BDA3C8", Offset = "0x1BDA3C8", VA = "0x1BDA3C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0x1BDA510", Offset = "0x1BDA510", VA = "0x1BDA510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x1BDA518", Offset = "0x1BDA518", VA = "0x1BDA518")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0x1BDA520", Offset = "0x1BDA520", VA = "0x1BDA520")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x1BDA528", Offset = "0x1BDA528", VA = "0x1BDA528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0x1BDA530", Offset = "0x1BDA530", VA = "0x1BDA530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0x1BDA538", Offset = "0x1BDA538", VA = "0x1BDA538")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0x1BDA540", Offset = "0x1BDA540", VA = "0x1BDA540")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x1BDA548", Offset = "0x1BDA548", VA = "0x1BDA548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x1BDA550", Offset = "0x1BDA550", VA = "0x1BDA550")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0x1BDA588", Offset = "0x1BDA588", VA = "0x1BDA588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x6001098")]
			[Address(RVA = "0x1BDA5C0", Offset = "0x1BDA5C0", VA = "0x1BDA5C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6001099")]
			[Address(RVA = "0x1BDA5F8", Offset = "0x1BDA5F8", VA = "0x1BDA5F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0x1BDA630", Offset = "0x1BDA630", VA = "0x1BDA630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x600109B")]
			[Address(RVA = "0x1BDA664", Offset = "0x1BDA664", VA = "0x1BDA664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x1BDA69C", Offset = "0x1BDA69C", VA = "0x1BDA69C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0x1BDA6D4", Offset = "0x1BDA6D4", VA = "0x1BDA6D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x1BDA70C", Offset = "0x1BDA70C", VA = "0x1BDA70C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60010AE")]
			[Address(RVA = "0x1BDC6D0", Offset = "0x1BDC6D0", VA = "0x1BDC6D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB50", Offset = "0xB5BB50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0x1BDC6DC", Offset = "0x1BDC6DC", VA = "0x1BDC6DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB60", Offset = "0xB5BB60")]
			private set
			{
			}
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1BDA740", Offset = "0x1BDA740", VA = "0x1BDA740")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x1BDA84C", Offset = "0x1BDA84C", VA = "0x1BDA84C")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1BDA794", Offset = "0x1BDA794", VA = "0x1BDA794")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1BDA928", Offset = "0x1BDA928", VA = "0x1BDA928")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x1BDA3D0", Offset = "0x1BDA3D0", VA = "0x1BDA3D0")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x1BDA9F8", Offset = "0x1BDA9F8", VA = "0x1BDA9F8")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1BDAAB0", Offset = "0x1BDAAB0", VA = "0x1BDAAB0")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1BDAB64", Offset = "0x1BDAB64", VA = "0x1BDAB64")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1BDAC18", Offset = "0x1BDAC18", VA = "0x1BDAC18")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x1BDAC20", Offset = "0x1BDAC20", VA = "0x1BDAC20")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x1BDAC54", Offset = "0x1BDAC54", VA = "0x1BDAC54")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x1BDAD1C", Offset = "0x1BDAD1C", VA = "0x1BDAD1C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1BDAEAC", Offset = "0x1BDAEAC", VA = "0x1BDAEAC")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1BDBFE8", Offset = "0x1BDBFE8", VA = "0x1BDBFE8")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x1BDC47C", Offset = "0x1BDC47C", VA = "0x1BDC47C")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x1BDC4DC", Offset = "0x1BDC4DC", VA = "0x1BDC4DC")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x1BDC2FC", Offset = "0x1BDC2FC", VA = "0x1BDC2FC")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1BDC3BC", Offset = "0x1BDC3BC", VA = "0x1BDC3BC")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x1BDC6E8", Offset = "0x1BDC6E8", VA = "0x1BDC6E8")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x1BDC7C4", Offset = "0x1BDC7C4", VA = "0x1BDC7C4", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x1BDC90C", Offset = "0x1BDC90C", VA = "0x1BDC90C")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x1BDCA9C", Offset = "0x1BDCA9C", VA = "0x1BDCA9C")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x1BDCC9C", Offset = "0x1BDCC9C", VA = "0x1BDCC9C")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x1BDCE9C", Offset = "0x1BDCE9C", VA = "0x1BDCE9C", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x1BDD1D0", Offset = "0x1BDD1D0", VA = "0x1BDD1D0", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x1BDD2D0", Offset = "0x1BDD2D0", VA = "0x1BDD2D0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000273")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000AC")]
		protected virtual int minBones
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0x1BDDB10", Offset = "0x1BDDB10", VA = "0x1BDDB10", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AD")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0x1BDDB18", Offset = "0x1BDDB18", VA = "0x1BDDB18", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AE")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0x1BDDB20", Offset = "0x1BDDB20", VA = "0x1BDDB20", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0x1BDDB30", Offset = "0x1BDDB30", VA = "0x1BDDB30", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000B0")]
		protected float positionOffset
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x1BD4AD0", Offset = "0x1BD4AD0", VA = "0x1BD4AD0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x1BDD2DC", Offset = "0x1BDD2DC", VA = "0x1BDD2DC")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x1BDD470", Offset = "0x1BDD470", VA = "0x1BDD470")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x1BDD5AC", Offset = "0x1BDD5AC", VA = "0x1BDD5AC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x1BDD614", Offset = "0x1BDD614", VA = "0x1BDD614", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x1BDD688", Offset = "0x1BDD688", VA = "0x1BDD688", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x1BDDA14", Offset = "0x1BDDA14", VA = "0x1BDDA14", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x1BDDA1C", Offset = "0x1BDDA1C", VA = "0x1BDDA1C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x1BDDB28", Offset = "0x1BDDB28", VA = "0x1BDDB28", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x1BDDB2C", Offset = "0x1BDDB2C", VA = "0x1BDDB2C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x1BD3EB4", Offset = "0x1BD3EB4", VA = "0x1BD3EB4")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x1BD472C", Offset = "0x1BD472C", VA = "0x1BD472C")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x1BDDC64", Offset = "0x1BDDC64", VA = "0x1BDDC64")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x1BD3D14", Offset = "0x1BD3D14", VA = "0x1BD3D14")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000274")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB54", Offset = "0xB4BB54")]
		public float IKRotationWeight;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x1BDDF18", Offset = "0x1BDDF18", VA = "0x1BDDF18", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x1BDE28C", Offset = "0x1BDE28C", VA = "0x1BDE28C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x1BDE2FC", Offset = "0x1BDE2FC", VA = "0x1BDE2FC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x1BDE458", Offset = "0x1BDE458", VA = "0x1BDE458", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x1BDE5F0", Offset = "0x1BDE5F0", VA = "0x1BDE5F0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x1BDE63C", Offset = "0x1BDE63C", VA = "0x1BDE63C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x1BDE688", Offset = "0x1BDE688", VA = "0x1BDE688", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x1BDE9F0", Offset = "0x1BDE9F0", VA = "0x1BDE9F0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x1BDEA1C", Offset = "0x1BDEA1C", VA = "0x1BDEA1C")]
		private void Solve()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x1BDE6EC", Offset = "0x1BDE6EC", VA = "0x1BDE6EC")]
		private void Read()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x1BDEB20", Offset = "0x1BDEB20", VA = "0x1BDEB20")]
		private void Write()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x1BDEC38", Offset = "0x1BDEC38", VA = "0x1BDEC38")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000275")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x2000595")]
		public enum BendModifier
		{
			[Token(Token = "0x4001E53")]
			Animation,
			[Token(Token = "0x4001E54")]
			Target,
			[Token(Token = "0x4001E55")]
			Parent,
			[Token(Token = "0x4001E56")]
			Arm,
			[Token(Token = "0x4001E57")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x2000596")]
		public struct AxisDirection
		{
			[Token(Token = "0x4001E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4001E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4001E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60026D4")]
			[Address(RVA = "0x1BE049C", Offset = "0x1BE049C", VA = "0x1BE049C")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB6C", Offset = "0xB4BB6C")]
		public float maintainRotationWeight;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB84", Offset = "0xB4BB84")]
		public float bendModifierWeight;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000B1")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0x1BE0480", Offset = "0x1BE0480", VA = "0x1BE0480")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x1BDED7C", Offset = "0x1BDED7C", VA = "0x1BDED7C")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x1BDEDCC", Offset = "0x1BDEDCC", VA = "0x1BDEDCC")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x1BDEEE0", Offset = "0x1BDEEE0", VA = "0x1BDEEE0", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x1BDF550", Offset = "0x1BDF550", VA = "0x1BDF550", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x1BE012C", Offset = "0x1BE012C", VA = "0x1BE012C", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x1BE0274", Offset = "0x1BE0274", VA = "0x1BE0274")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x1BE03F8", Offset = "0x1BE03F8", VA = "0x1BE03F8")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x1BDF25C", Offset = "0x1BDF25C", VA = "0x1BDF25C")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x1BDF67C", Offset = "0x1BDF67C", VA = "0x1BDF67C")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000597")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x170003F0")]
			public Vector3 forward
			{
				[Token(Token = "0x60026D9")]
				[Address(RVA = "0x1BE22E4", Offset = "0x1BE22E4", VA = "0x1BE22E4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60026D5")]
			[Address(RVA = "0x1BE2A30", Offset = "0x1BE2A30", VA = "0x1BE2A30")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x60026D6")]
			[Address(RVA = "0x1BE16B8", Offset = "0x1BE16B8", VA = "0x1BE16B8")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x60026D7")]
			[Address(RVA = "0x1BE19F4", Offset = "0x1BE19F4", VA = "0x1BE19F4")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x60026D8")]
			[Address(RVA = "0x1BE26E8", Offset = "0x1BE26E8", VA = "0x1BE26E8")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BB9C", Offset = "0xB4BB9C")]
		public float bodyWeight;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BBB4", Offset = "0xB4BBB4")]
		public float headWeight;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BBCC", Offset = "0xB4BBCC")]
		public float eyesWeight;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BBE4", Offset = "0xB4BBE4")]
		public float clampWeight;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BBFC", Offset = "0xB4BBFC")]
		public float clampWeightHead;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BC14", Offset = "0xB4BC14")]
		public float clampWeightEyes;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BC2C", Offset = "0xB4BC2C")]
		public int clampSmoothing;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3[] spineForwards;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] headForwards;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] eyeForward;

		[Token(Token = "0x170000B2")]
		private bool spineIsValid
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x1BE0E1C", Offset = "0x1BE0E1C", VA = "0x1BE0E1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		private bool spineIsEmpty
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x1BE0FF4", Offset = "0x1BE0FF4", VA = "0x1BE0FF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B4")]
		private bool headIsValid
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x1BE0F00", Offset = "0x1BE0F00", VA = "0x1BE0F00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B5")]
		private bool headIsEmpty
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x1BE1018", Offset = "0x1BE1018", VA = "0x1BE1018")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B6")]
		private bool eyesIsValid
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x1BE0F10", Offset = "0x1BE0F10", VA = "0x1BE0F10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B7")]
		private bool eyesIsEmpty
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0x1BE1094", Offset = "0x1BE1094", VA = "0x1BE1094")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x1BE04FC", Offset = "0x1BE04FC", VA = "0x1BE04FC")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x1BE0580", Offset = "0x1BE0580", VA = "0x1BE0580")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x1BE062C", Offset = "0x1BE062C", VA = "0x1BE062C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x1BE06F4", Offset = "0x1BE06F4", VA = "0x1BE06F4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x1BE07E0", Offset = "0x1BE07E0", VA = "0x1BE07E0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x1BE08EC", Offset = "0x1BE08EC", VA = "0x1BE08EC")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x1BE0A34", Offset = "0x1BE0A34", VA = "0x1BE0A34", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x1BE0B58", Offset = "0x1BE0B58", VA = "0x1BE0B58", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x1BE0C88", Offset = "0x1BE0C88", VA = "0x1BE0C88", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x1BE10B8", Offset = "0x1BE10B8", VA = "0x1BE10B8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x1BE12F0", Offset = "0x1BE12F0", VA = "0x1BE12F0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x1BE1490", Offset = "0x1BE1490", VA = "0x1BE1490")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x1BE16E4", Offset = "0x1BE16E4", VA = "0x1BE16E4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x1BE1B30", Offset = "0x1BE1B30", VA = "0x1BE1B30", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x1BE1C34", Offset = "0x1BE1C34", VA = "0x1BE1C34")]
		private void SolveSpine()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x1BE1E28", Offset = "0x1BE1E28", VA = "0x1BE1E28")]
		private void SolveHead()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x1BE2084", Offset = "0x1BE2084", VA = "0x1BE2084")]
		private void SolveEyes()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x1BE23B0", Offset = "0x1BE23B0", VA = "0x1BE23B0")]
		private Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x1BE1540", Offset = "0x1BE1540", VA = "0x1BE1540")]
		private void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x1BE2850", Offset = "0x1BE2850", VA = "0x1BE2850")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000277")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000598")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4001E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4001E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60026DA")]
			[Address(RVA = "0x1BE3FDC", Offset = "0x1BE3FDC", VA = "0x1BE3FDC")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60026DB")]
			[Address(RVA = "0x1BE4B84", Offset = "0x1BE4B84", VA = "0x1BE4B84")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60026DC")]
			[Address(RVA = "0x1BDEE14", Offset = "0x1BDEE14", VA = "0x1BDEE14")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60026DD")]
			[Address(RVA = "0x1BE4C4C", Offset = "0x1BE4C4C", VA = "0x1BE4C4C")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BC44", Offset = "0xB4BC44")]
		public float IKRotationWeight;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x1BE2A38", Offset = "0x1BE2A38", VA = "0x1BE2A38")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x1BE2C28", Offset = "0x1BE2C28", VA = "0x1BE2C28")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x1BE2DDC", Offset = "0x1BE2DDC", VA = "0x1BE2DDC")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x1BE2DE8", Offset = "0x1BE2DE8", VA = "0x1BE2DE8")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x1BE2E6C", Offset = "0x1BE2E6C", VA = "0x1BE2E6C")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x1BE2E78", Offset = "0x1BE2E78", VA = "0x1BE2E78")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x1BE2E80", Offset = "0x1BE2E80", VA = "0x1BE2E80", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x1BE2F84", Offset = "0x1BE2F84", VA = "0x1BE2F84", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x1BE30A4", Offset = "0x1BE30A4", VA = "0x1BE30A4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x1BE30E4", Offset = "0x1BE30E4", VA = "0x1BE30E4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x1BE3124", Offset = "0x1BE3124", VA = "0x1BE3124", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x1BE3500", Offset = "0x1BE3500", VA = "0x1BE3500")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x1BE3558", Offset = "0x1BE3558", VA = "0x1BE3558")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x1BE3B00", Offset = "0x1BE3B00", VA = "0x1BE3B00")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x1BE3D18", Offset = "0x1BE3D18", VA = "0x1BE3D18", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x1BE3ED4", Offset = "0x1BE3ED4", VA = "0x1BE3ED4")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x1BE3E50", Offset = "0x1BE3E50", VA = "0x1BE3E50")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x1BE417C", Offset = "0x1BE417C", VA = "0x1BE417C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x1BE4C40", Offset = "0x1BE4C40", VA = "0x1BE4C40", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x1BE4C44", Offset = "0x1BE4C44", VA = "0x1BE4C44", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x1BE4C48", Offset = "0x1BE4C48", VA = "0x1BE4C48", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x1BE4888", Offset = "0x1BE4888", VA = "0x1BE4888")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x1BE02E8", Offset = "0x1BE02E8", VA = "0x1BE02E8")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000278")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000599")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20006DA")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4002323")]
				YawPitch,
				[Token(Token = "0x4002324")]
				FromTo
			}

			[Token(Token = "0x4001E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56EE4", Offset = "0xB56EE4")]
			public Transform target;

			[Token(Token = "0x4001E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56F1C", Offset = "0xB56F1C")]
			public Transform bendGoal;

			[Token(Token = "0x4001E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56F54", Offset = "0xB56F54")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB56F54", Offset = "0xB56F54")]
			public float positionWeight;

			[Token(Token = "0x4001E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56FA8", Offset = "0xB56FA8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB56FA8", Offset = "0xB56FA8")]
			public float rotationWeight;

			[Token(Token = "0x4001E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56FFC", Offset = "0xB56FFC")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4001E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57034", Offset = "0xB57034")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57034", Offset = "0xB57034")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4001E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57088", Offset = "0xB57088")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57088", Offset = "0xB57088")]
			public float bendGoalWeight;

			[Token(Token = "0x4001E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB570DC", Offset = "0xB570DC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB570DC", Offset = "0xB570DC")]
			public float swivelOffset;

			[Token(Token = "0x4001E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57138", Offset = "0xB57138")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4001E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57170", Offset = "0xB57170")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4001E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			public Vector3 IKPosition;

			[Token(Token = "0x4001E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Quaternion IKRotation;

			[Token(Token = "0x4001E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[Token(Token = "0x4001E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4001E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB571E8", Offset = "0xB571E8")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4001E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB571F8", Offset = "0xB571F8")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4001E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private bool hasShoulder;

			[Token(Token = "0x4001E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4001E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4001E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private Quaternion chestRotation;

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Vector3 chestForward;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Vector3 chestUp;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4001E74")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4001E75")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x170003F1")]
			public Vector3 position
			{
				[Token(Token = "0x60026DE")]
				[Address(RVA = "0x1B2CFC0", Offset = "0x1B2CFC0", VA = "0x1B2CFC0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62458", Offset = "0xB62458")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60026DF")]
				[Address(RVA = "0x1B2CFCC", Offset = "0x1B2CFCC", VA = "0x1B2CFCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62468", Offset = "0xB62468")]
				private set
				{
				}
			}

			[Token(Token = "0x170003F2")]
			public Quaternion rotation
			{
				[Token(Token = "0x60026E0")]
				[Address(RVA = "0x1B2CFD8", Offset = "0x1B2CFD8", VA = "0x1B2CFD8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62478", Offset = "0xB62478")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60026E1")]
				[Address(RVA = "0x1B2CFE4", Offset = "0x1B2CFE4", VA = "0x1B2CFE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62488", Offset = "0xB62488")]
				private set
				{
				}
			}

			[Token(Token = "0x170003F3")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x60026E2")]
				[Address(RVA = "0x1B2CFF0", Offset = "0x1B2CFF0", VA = "0x1B2CFF0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F4")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x60026E3")]
				[Address(RVA = "0x1B2D024", Offset = "0x1B2D024", VA = "0x1B2D024")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F5")]
			private VirtualBone forearm
			{
				[Token(Token = "0x60026E4")]
				[Address(RVA = "0x1B2D05C", Offset = "0x1B2D05C", VA = "0x1B2D05C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003F6")]
			private VirtualBone hand
			{
				[Token(Token = "0x60026E5")]
				[Address(RVA = "0x1B2D094", Offset = "0x1B2D094", VA = "0x1B2D094")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60026E6")]
			[Address(RVA = "0x1B2D0CC", Offset = "0x1B2D0CC", VA = "0x1B2D0CC", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60026E7")]
			[Address(RVA = "0x1B2D8D0", Offset = "0x1B2D8D0", VA = "0x1B2D8D0", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60026E8")]
			[Address(RVA = "0x1B2DAC4", Offset = "0x1B2DAC4", VA = "0x1B2DAC4", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60026E9")]
			[Address(RVA = "0x1B2DB70", Offset = "0x1B2DB70", VA = "0x1B2DB70")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x60026EA")]
			[Address(RVA = "0x1B2FE6C", Offset = "0x1B2FE6C", VA = "0x1B2FE6C", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60026EB")]
			[Address(RVA = "0x1B2FEDC", Offset = "0x1B2FEDC", VA = "0x1B2FEDC", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60026EC")]
			[Address(RVA = "0x1B2EDF8", Offset = "0x1B2EDF8", VA = "0x1B2EDF8")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x60026ED")]
			[Address(RVA = "0x1B2F104", Offset = "0x1B2F104", VA = "0x1B2F104")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60026EE")]
			[Address(RVA = "0x1B2FFE8", Offset = "0x1B2FFE8", VA = "0x1B2FFE8")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x60026EF")]
			[Address(RVA = "0x1B30110", Offset = "0x1B30110", VA = "0x1B30110")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059A")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57208", Offset = "0xB57208")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57218", Offset = "0xB57218")]
			private float <mag>k__BackingField;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4001E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x170003F7")]
			public float sqrMag
			{
				[Token(Token = "0x60026F5")]
				[Address(RVA = "0x1B302A4", Offset = "0x1B302A4", VA = "0x1B302A4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62498", Offset = "0xB62498")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60026F6")]
				[Address(RVA = "0x1B302AC", Offset = "0x1B302AC", VA = "0x1B302AC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624A8", Offset = "0xB624A8")]
				private set
				{
				}
			}

			[Token(Token = "0x170003F8")]
			public float mag
			{
				[Token(Token = "0x60026F7")]
				[Address(RVA = "0x1B302B4", Offset = "0x1B302B4", VA = "0x1B302B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624B8", Offset = "0xB624B8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60026F8")]
				[Address(RVA = "0x1B302BC", Offset = "0x1B302BC", VA = "0x1B302BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624C8", Offset = "0xB624C8")]
				private set
				{
				}
			}

			[Token(Token = "0x60026F0")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index);

			[Token(Token = "0x60026F1")]
			public abstract void PreSolve();

			[Token(Token = "0x60026F2")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x60026F3")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x60026F4")]
			public abstract void ResetOffsets();

			[Token(Token = "0x60026F9")]
			[Address(RVA = "0x1B302C4", Offset = "0x1B302C4", VA = "0x1B302C4")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60026FA")]
			[Address(RVA = "0x1B30674", Offset = "0x1B30674", VA = "0x1B30674")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x60026FB")]
			[Address(RVA = "0x1B307E0", Offset = "0x1B307E0", VA = "0x1B307E0")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x60026FC")]
			[Address(RVA = "0x1B30A70", Offset = "0x1B30A70", VA = "0x1B30A70")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60026FD")]
			[Address(RVA = "0x1B30AC4", Offset = "0x1B30AC4", VA = "0x1B30AC4")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x60026FE")]
			[Address(RVA = "0x1B2FCCC", Offset = "0x1B2FCCC", VA = "0x1B2FCCC")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x60026FF")]
			[Address(RVA = "0x1B30CB0", Offset = "0x1B30CB0", VA = "0x1B30CB0")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6002700")]
			[Address(RVA = "0x1B30DF4", Offset = "0x1B30DF4", VA = "0x1B30DF4")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6002701")]
			[Address(RVA = "0x1B3020C", Offset = "0x1B3020C", VA = "0x1B3020C")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059B")]
		public class Footstep
		{
			[Token(Token = "0x4001E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4001E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4001E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57238", Offset = "0xB57238")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x4001E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4001E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4001E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4001E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4001E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4001E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4001E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170003F9")]
			public bool isStepping
			{
				[Token(Token = "0x6002702")]
				[Address(RVA = "0x1B30E1C", Offset = "0x1B30E1C", VA = "0x1B30E1C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003FA")]
			public float stepProgress
			{
				[Token(Token = "0x6002703")]
				[Address(RVA = "0x1B30E30", Offset = "0x1B30E30", VA = "0x1B30E30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624D8", Offset = "0xB624D8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002704")]
				[Address(RVA = "0x1B30E38", Offset = "0x1B30E38", VA = "0x1B30E38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624E8", Offset = "0xB624E8")]
				private set
				{
				}
			}

			[Token(Token = "0x6002705")]
			[Address(RVA = "0x1B30E40", Offset = "0x1B30E40", VA = "0x1B30E40")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6002706")]
			[Address(RVA = "0x1B30F70", Offset = "0x1B30F70", VA = "0x1B30F70")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6002707")]
			[Address(RVA = "0x1B310A0", Offset = "0x1B310A0", VA = "0x1B310A0")]
			public void StepTo(Vector3 p, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6002708")]
			[Address(RVA = "0x1B311A0", Offset = "0x1B311A0", VA = "0x1B311A0")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6002709")]
			[Address(RVA = "0x1B31378", Offset = "0x1B31378", VA = "0x1B31378")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x600270A")]
			[Address(RVA = "0x1B31564", Offset = "0x1B31564", VA = "0x1B31564")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059C")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4001E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57248", Offset = "0xB57248")]
			public Transform target;

			[Token(Token = "0x4001E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57280", Offset = "0xB57280")]
			public Transform bendGoal;

			[Token(Token = "0x4001E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB572B8", Offset = "0xB572B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB572B8", Offset = "0xB572B8")]
			public float positionWeight;

			[Token(Token = "0x4001E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5730C", Offset = "0xB5730C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB5730C", Offset = "0xB5730C")]
			public float rotationWeight;

			[Token(Token = "0x4001E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57360", Offset = "0xB57360")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57360", Offset = "0xB57360")]
			public float bendGoalWeight;

			[Token(Token = "0x4001E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB573B4", Offset = "0xB573B4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB573B4", Offset = "0xB573B4")]
			public float swivelOffset;

			[Token(Token = "0x4001E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public Vector3 IKPosition;

			[Token(Token = "0x4001E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[HideInInspector]
			public Quaternion IKRotation;

			[Token(Token = "0x4001E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[Token(Token = "0x4001E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[Token(Token = "0x4001E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[Token(Token = "0x4001E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4001E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57470", Offset = "0xB57470")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4001E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57480", Offset = "0xB57480")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4001E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57490", Offset = "0xB57490")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB574A0", Offset = "0xB574A0")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x4001E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Vector3 footPosition;

			[Token(Token = "0x4001E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Quaternion footRotation;

			[Token(Token = "0x4001E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 bendNormal;

			[Token(Token = "0x4001E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x170003FB")]
			public Vector3 position
			{
				[Token(Token = "0x600270B")]
				[Address(RVA = "0x1B31780", Offset = "0x1B31780", VA = "0x1B31780")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB624F8", Offset = "0xB624F8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600270C")]
				[Address(RVA = "0x1B3178C", Offset = "0x1B3178C", VA = "0x1B3178C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62508", Offset = "0xB62508")]
				private set
				{
				}
			}

			[Token(Token = "0x170003FC")]
			public Quaternion rotation
			{
				[Token(Token = "0x600270D")]
				[Address(RVA = "0x1B31798", Offset = "0x1B31798", VA = "0x1B31798")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62518", Offset = "0xB62518")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600270E")]
				[Address(RVA = "0x1B317A4", Offset = "0x1B317A4", VA = "0x1B317A4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62528", Offset = "0xB62528")]
				private set
				{
				}
			}

			[Token(Token = "0x170003FD")]
			public bool hasToes
			{
				[Token(Token = "0x600270F")]
				[Address(RVA = "0x1B317B0", Offset = "0x1B317B0", VA = "0x1B317B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62538", Offset = "0xB62538")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6002710")]
				[Address(RVA = "0x1B317B8", Offset = "0x1B317B8", VA = "0x1B317B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62548", Offset = "0xB62548")]
				private set
				{
				}
			}

			[Token(Token = "0x170003FE")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6002711")]
				[Address(RVA = "0x1B317C4", Offset = "0x1B317C4", VA = "0x1B317C4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003FF")]
			private VirtualBone calf
			{
				[Token(Token = "0x6002712")]
				[Address(RVA = "0x1B317F8", Offset = "0x1B317F8", VA = "0x1B317F8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000400")]
			private VirtualBone foot
			{
				[Token(Token = "0x6002713")]
				[Address(RVA = "0x1B31830", Offset = "0x1B31830", VA = "0x1B31830")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000401")]
			private VirtualBone toes
			{
				[Token(Token = "0x6002714")]
				[Address(RVA = "0x1B31868", Offset = "0x1B31868", VA = "0x1B31868")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000402")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6002715")]
				[Address(RVA = "0x1B318A0", Offset = "0x1B318A0", VA = "0x1B318A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000403")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6002716")]
				[Address(RVA = "0x1B318E0", Offset = "0x1B318E0", VA = "0x1B318E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62558", Offset = "0xB62558")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002717")]
				[Address(RVA = "0x1B318EC", Offset = "0x1B318EC", VA = "0x1B318EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62568", Offset = "0xB62568")]
				private set
				{
				}
			}

			[Token(Token = "0x6002718")]
			[Address(RVA = "0x1B318F8", Offset = "0x1B318F8", VA = "0x1B318F8", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6002719")]
			[Address(RVA = "0x1B31DA0", Offset = "0x1B31DA0", VA = "0x1B31DA0", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x600271A")]
			[Address(RVA = "0x1B32480", Offset = "0x1B32480", VA = "0x1B32480", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x600271B")]
			[Address(RVA = "0x1B3237C", Offset = "0x1B3237C", VA = "0x1B3237C")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x600271C")]
			[Address(RVA = "0x1B32154", Offset = "0x1B32154", VA = "0x1B32154")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x600271D")]
			[Address(RVA = "0x1B32A30", Offset = "0x1B32A30", VA = "0x1B32A30")]
			public void Solve()
			{
			}

			[Token(Token = "0x600271E")]
			[Address(RVA = "0x1B32D70", Offset = "0x1B32D70", VA = "0x1B32D70", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600271F")]
			[Address(RVA = "0x1B32E78", Offset = "0x1B32E78", VA = "0x1B32E78", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6002720")]
			[Address(RVA = "0x1B32F28", Offset = "0x1B32F28", VA = "0x1B32F28")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059D")]
		public class Locomotion
		{
			[Token(Token = "0x4001E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB574B0", Offset = "0xB574B0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB574B0", Offset = "0xB574B0")]
			public float weight;

			[Token(Token = "0x4001EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57504", Offset = "0xB57504")]
			public float footDistance;

			[Token(Token = "0x4001EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5753C", Offset = "0xB5753C")]
			public float stepThreshold;

			[Token(Token = "0x4001EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57574", Offset = "0xB57574")]
			public float angleThreshold;

			[Token(Token = "0x4001EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB575AC", Offset = "0xB575AC")]
			public float comAngleMlp;

			[Token(Token = "0x4001EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB575E4", Offset = "0xB575E4")]
			public float maxVelocity;

			[Token(Token = "0x4001EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5761C", Offset = "0xB5761C")]
			public float velocityFactor;

			[Token(Token = "0x4001EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57654", Offset = "0xB57654")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57654", Offset = "0xB57654")]
			public float maxLegStretch;

			[Token(Token = "0x4001EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB576AC", Offset = "0xB576AC")]
			public float rootSpeed;

			[Token(Token = "0x4001EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB576E4", Offset = "0xB576E4")]
			public float stepSpeed;

			[Token(Token = "0x4001EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5771C", Offset = "0xB5771C")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4001EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57754", Offset = "0xB57754")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4001EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5778C", Offset = "0xB5778C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB5778C", Offset = "0xB5778C")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4001EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB577E4", Offset = "0xB577E4")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4001EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5781C", Offset = "0xB5781C")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4001EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57854", Offset = "0xB57854")]
			public Vector3 offset;

			[Token(Token = "0x4001EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4001EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4001EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4001EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4001EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB578CC", Offset = "0xB578CC")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4001EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57904", Offset = "0xB57904")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4001EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5793C", Offset = "0xB5793C")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x4001EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4001EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4001EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4001EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4001EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x17000404")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6002721")]
				[Address(RVA = "0x1B32FD4", Offset = "0x1B32FD4", VA = "0x1B32FD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62578", Offset = "0xB62578")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002722")]
				[Address(RVA = "0x1B32FE0", Offset = "0x1B32FE0", VA = "0x1B32FE0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62588", Offset = "0xB62588")]
				private set
				{
				}
			}

			[Token(Token = "0x17000405")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6002728")]
				[Address(RVA = "0x1B35414", Offset = "0x1B35414", VA = "0x1B35414")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000406")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6002729")]
				[Address(RVA = "0x1B35454", Offset = "0x1B35454", VA = "0x1B35454")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000407")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x600272A")]
				[Address(RVA = "0x1B35498", Offset = "0x1B35498", VA = "0x1B35498")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x17000408")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x600272B")]
				[Address(RVA = "0x1B354D8", Offset = "0x1B354D8", VA = "0x1B354D8")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6002723")]
			[Address(RVA = "0x1B32FEC", Offset = "0x1B32FEC", VA = "0x1B32FEC")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6002724")]
			[Address(RVA = "0x1B332E4", Offset = "0x1B332E4", VA = "0x1B332E4")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6002725")]
			[Address(RVA = "0x1B33558", Offset = "0x1B33558", VA = "0x1B33558")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6002726")]
			[Address(RVA = "0x1B33930", Offset = "0x1B33930", VA = "0x1B33930")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6002727")]
			[Address(RVA = "0x1B33AE0", Offset = "0x1B33AE0", VA = "0x1B33AE0")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x600272C")]
			[Address(RVA = "0x1B35020", Offset = "0x1B35020", VA = "0x1B35020")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x600272D")]
			[Address(RVA = "0x1B351C4", Offset = "0x1B351C4", VA = "0x1B351C4")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x600272E")]
			[Address(RVA = "0x1B35248", Offset = "0x1B35248", VA = "0x1B35248")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x600272F")]
			[Address(RVA = "0x1B3551C", Offset = "0x1B3551C", VA = "0x1B3551C")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059E")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4001EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5794C", Offset = "0xB5794C")]
			public Transform headTarget;

			[Token(Token = "0x4001EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57984", Offset = "0xB57984")]
			public Transform pelvisTarget;

			[Token(Token = "0x4001EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB579BC", Offset = "0xB579BC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB579BC", Offset = "0xB579BC")]
			public float positionWeight;

			[Token(Token = "0x4001EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57A10", Offset = "0xB57A10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57A10", Offset = "0xB57A10")]
			public float rotationWeight;

			[Token(Token = "0x4001EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57A64", Offset = "0xB57A64")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57A64", Offset = "0xB57A64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57AB8", Offset = "0xB57AB8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57AB8", Offset = "0xB57AB8")]
			public float pelvisRotationWeight;

			[Token(Token = "0x4001EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57B0C", Offset = "0xB57B0C")]
			public float minHeadHeight;

			[Token(Token = "0x4001EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57B44", Offset = "0xB57B44")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57B44", Offset = "0xB57B44")]
			public float bodyPosStiffness;

			[Token(Token = "0x4001EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57B98", Offset = "0xB57B98")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57B98", Offset = "0xB57B98")]
			public float bodyRotStiffness;

			[Token(Token = "0x4001EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57BEC", Offset = "0xB57BEC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57BEC", Offset = "0xB57BEC")]
			public float chestRotationWeight;

			[Token(Token = "0x4001EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57C40", Offset = "0xB57C40")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57C40", Offset = "0xB57C40")]
			public float chestClampWeight;

			[Token(Token = "0x4001EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57C94", Offset = "0xB57C94")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57C94", Offset = "0xB57C94")]
			public float headClampWeight;

			[Token(Token = "0x4001EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57CE8", Offset = "0xB57CE8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57CE8", Offset = "0xB57CE8")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4001EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57D3C", Offset = "0xB57D3C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB57D3C", Offset = "0xB57D3C")]
			public float maxRootAngle;

			[Token(Token = "0x4001EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[Token(Token = "0x4001ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[Token(Token = "0x4001ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[Token(Token = "0x4001ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[Token(Token = "0x4001ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[Token(Token = "0x4001ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[Token(Token = "0x4001ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[Token(Token = "0x4001ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[Token(Token = "0x4001ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[Token(Token = "0x4001ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[Token(Token = "0x4001ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[HideInInspector]
			public Vector3 faceDirection;

			[Token(Token = "0x4001ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB57E44", Offset = "0xB57E44")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x4001ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private Vector3 headPosition;

			[Token(Token = "0x4001ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Quaternion headRotation;

			[Token(Token = "0x4001ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			private Quaternion anchorRelativeToHead;

			[Token(Token = "0x4001ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4001ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4001EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4001EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4001EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4001EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			private int pelvisIndex;

			[Token(Token = "0x4001EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private int spineIndex;

			[Token(Token = "0x4001EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
			private int chestIndex;

			[Token(Token = "0x4001EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private int neckIndex;

			[Token(Token = "0x4001EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
			private int headIndex;

			[Token(Token = "0x4001EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private float length;

			[Token(Token = "0x4001EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
			private bool hasChest;

			[Token(Token = "0x4001EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
			private bool hasNeck;

			[Token(Token = "0x4001EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
			private float headHeight;

			[Token(Token = "0x4001EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
			private float sizeMlp;

			[Token(Token = "0x17000409")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6002730")]
				[Address(RVA = "0x1B34FA0", Offset = "0x1B34FA0", VA = "0x1B34FA0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040A")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6002731")]
				[Address(RVA = "0x1B35600", Offset = "0x1B35600", VA = "0x1B35600")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040B")]
			public VirtualBone chest
			{
				[Token(Token = "0x6002732")]
				[Address(RVA = "0x1B35640", Offset = "0x1B35640", VA = "0x1B35640")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040C")]
			private VirtualBone neck
			{
				[Token(Token = "0x6002733")]
				[Address(RVA = "0x1B35694", Offset = "0x1B35694", VA = "0x1B35694")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040D")]
			public VirtualBone head
			{
				[Token(Token = "0x6002734")]
				[Address(RVA = "0x1B34FE0", Offset = "0x1B34FE0", VA = "0x1B34FE0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040E")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6002735")]
				[Address(RVA = "0x1B356D4", Offset = "0x1B356D4", VA = "0x1B356D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62598", Offset = "0xB62598")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6002736")]
				[Address(RVA = "0x1B356E8", Offset = "0x1B356E8", VA = "0x1B356E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB625A8", Offset = "0xB625A8")]
				private set
				{
				}
			}

			[Token(Token = "0x6002737")]
			[Address(RVA = "0x1B356FC", Offset = "0x1B356FC", VA = "0x1B356FC", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6002738")]
			[Address(RVA = "0x1B36098", Offset = "0x1B36098", VA = "0x1B36098", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6002739")]
			[Address(RVA = "0x1B36224", Offset = "0x1B36224", VA = "0x1B36224", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x600273A")]
			[Address(RVA = "0x1B36748", Offset = "0x1B36748", VA = "0x1B36748")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x600273B")]
			[Address(RVA = "0x1B36D80", Offset = "0x1B36D80", VA = "0x1B36D80")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x600273C")]
			[Address(RVA = "0x1B37CFC", Offset = "0x1B37CFC", VA = "0x1B37CFC")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x600273D")]
			[Address(RVA = "0x1B3809C", Offset = "0x1B3809C", VA = "0x1B3809C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600273E")]
			[Address(RVA = "0x1B38278", Offset = "0x1B38278", VA = "0x1B38278", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600273F")]
			[Address(RVA = "0x1B36CB4", Offset = "0x1B36CB4", VA = "0x1B36CB4")]
			private void AdjustChestByOffset(ref Quaternion chestTargetRotation)
			{
			}

			[Token(Token = "0x6002740")]
			[Address(RVA = "0x1B36988", Offset = "0x1B36988", VA = "0x1B36988")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6002741")]
			[Address(RVA = "0x1B37B74", Offset = "0x1B37B74", VA = "0x1B37B74")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6002742")]
			[Address(RVA = "0x1B371EC", Offset = "0x1B371EC", VA = "0x1B371EC")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x6002743")]
			[Address(RVA = "0x1B38360", Offset = "0x1B38360", VA = "0x1B38360")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002744")]
			[Address(RVA = "0x1B37928", Offset = "0x1B37928", VA = "0x1B37928")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6002745")]
			[Address(RVA = "0x1B38680", Offset = "0x1B38680", VA = "0x1B38680")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200059F")]
		public enum PositionOffset
		{
			[Token(Token = "0x4001EE8")]
			Pelvis,
			[Token(Token = "0x4001EE9")]
			Chest,
			[Token(Token = "0x4001EEA")]
			Head,
			[Token(Token = "0x4001EEB")]
			LeftHand,
			[Token(Token = "0x4001EEC")]
			RightHand,
			[Token(Token = "0x4001EED")]
			LeftFoot,
			[Token(Token = "0x4001EEE")]
			RightFoot,
			[Token(Token = "0x4001EEF")]
			LeftHeel,
			[Token(Token = "0x4001EF0")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20005A0")]
		public enum RotationOffset
		{
			[Token(Token = "0x4001EF2")]
			Pelvis,
			[Token(Token = "0x4001EF3")]
			Chest,
			[Token(Token = "0x4001EF4")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20005A1")]
		public class VirtualBone
		{
			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4001EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4001EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4001EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4001EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4001EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6002746")]
			[Address(RVA = "0x1B2D834", Offset = "0x1B2D834", VA = "0x1B2D834")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6002747")]
			[Address(RVA = "0x1B2D8B0", Offset = "0x1B2D8B0", VA = "0x1B2D8B0")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6002748")]
			[Address(RVA = "0x1B387DC", Offset = "0x1B387DC", VA = "0x1B387DC")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6002749")]
			[Address(RVA = "0x1B30388", Offset = "0x1B30388", VA = "0x1B30388")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x600274A")]
			[Address(RVA = "0x1B30888", Offset = "0x1B30888", VA = "0x1B30888")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x600274B")]
			[Address(RVA = "0x1B38A6C", Offset = "0x1B38A6C", VA = "0x1B38A6C")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x600274C")]
			[Address(RVA = "0x1B2EED0", Offset = "0x1B2EED0", VA = "0x1B2EED0")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x600274D")]
			[Address(RVA = "0x1B38CA4", Offset = "0x1B38CA4", VA = "0x1B38CA4")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x600274E")]
			[Address(RVA = "0x1B2F720", Offset = "0x1B2F720", VA = "0x1B2F720")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x600274F")]
			[Address(RVA = "0x1B38D5C", Offset = "0x1B38D5C", VA = "0x1B38D5C")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002750")]
			[Address(RVA = "0x1B37574", Offset = "0x1B37574", VA = "0x1B37574")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length)
			{
			}

			[Token(Token = "0x6002751")]
			[Address(RVA = "0x1B38F74", Offset = "0x1B38F74", VA = "0x1B38F74")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002752")]
			[Address(RVA = "0x1B3907C", Offset = "0x1B3907C", VA = "0x1B3907C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPelvisLocalPosition;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 rootV;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int supportLegIndex;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BC5C", Offset = "0xB4BC5C")]
		public bool plantFeet;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BC94", Offset = "0xB4BC94")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BCA4", Offset = "0xB4BCA4")]
		public Spine spine;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BCDC", Offset = "0xB4BCDC")]
		public Arm leftArm;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BD14", Offset = "0xB4BD14")]
		public Arm rightArm;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BD4C", Offset = "0xB4BD4C")]
		public Leg leftLeg;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BD84", Offset = "0xB4BD84")]
		public Leg rightLeg;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BDBC", Offset = "0xB4BDBC")]
		public Locomotion locomotion;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000B8")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x600112D")]
			[Address(RVA = "0x1BE8B44", Offset = "0x1BE8B44", VA = "0x1BE8B44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB70", Offset = "0xB5BB70")]
			get
			{
				return null;
			}
			[Token(Token = "0x600112E")]
			[Address(RVA = "0x1BE8B4C", Offset = "0x1BE8B4C", VA = "0x1BE8B4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB80", Offset = "0xB5BB80")]
			private set
			{
			}
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x1BE4C54", Offset = "0x1BE4C54", VA = "0x1BE4C54")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x1BE5048", Offset = "0x1BE5048", VA = "0x1BE5048")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x1BE4EF0", Offset = "0x1BE4EF0", VA = "0x1BE4EF0")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x1BE5A2C", Offset = "0x1BE5A2C", VA = "0x1BE5A2C")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x1BE5D08", Offset = "0x1BE5D08", VA = "0x1BE5D08")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x1BE5DAC", Offset = "0x1BE5DAC", VA = "0x1BE5DAC")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x1BE5F0C", Offset = "0x1BE5F0C", VA = "0x1BE5F0C")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x1BE6098", Offset = "0x1BE6098", VA = "0x1BE6098")]
		public void Reset()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x1BE6884", Offset = "0x1BE6884", VA = "0x1BE6884", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x1BE69C8", Offset = "0x1BE69C8", VA = "0x1BE69C8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x1BE6B0C", Offset = "0x1BE6B0C", VA = "0x1BE6B0C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x1BE6B80", Offset = "0x1BE6B80", VA = "0x1BE6B80", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x1BE6BF4", Offset = "0x1BE6BF4", VA = "0x1BE6BF4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x1BE6E08", Offset = "0x1BE6E08", VA = "0x1BE6E08")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x1BE52E0", Offset = "0x1BE52E0", VA = "0x1BE52E0")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x1BE54B8", Offset = "0x1BE54B8", VA = "0x1BE54B8")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x1BE5908", Offset = "0x1BE5908", VA = "0x1BE5908")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x1BE61FC", Offset = "0x1BE61FC", VA = "0x1BE61FC")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x1BE70E8", Offset = "0x1BE70E8", VA = "0x1BE70E8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x1BE7120", Offset = "0x1BE7120", VA = "0x1BE7120", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x1BE8268", Offset = "0x1BE8268", VA = "0x1BE8268")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x1BE6364", Offset = "0x1BE6364", VA = "0x1BE6364")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x1BE7180", Offset = "0x1BE7180", VA = "0x1BE7180")]
		private void Solve()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x1BE8440", Offset = "0x1BE8440", VA = "0x1BE8440")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x1BE8500", Offset = "0x1BE8500", VA = "0x1BE8500")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x1BE8120", Offset = "0x1BE8120", VA = "0x1BE8120")]
		private void Write()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x1BE8544", Offset = "0x1BE8544", VA = "0x1BE8544")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x1BE8B54", Offset = "0x1BE8B54", VA = "0x1BE8B54")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BDF4", Offset = "0xB4BDF4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BDF4", Offset = "0xB4BDF4")]
		public float weight;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BE48", Offset = "0xB4BE48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4BE48", Offset = "0xB4BE48")]
		public float parentChildCrossfade;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 twistAxis;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 axis;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform parent;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform child;

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x17523FC", Offset = "0x17523FC", VA = "0x17523FC")]
		public void Relax()
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x1752758", Offset = "0x1752758", VA = "0x1752758")]
		private void Start()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x1752A34", Offset = "0x1752A34", VA = "0x1752A34")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x1752A38", Offset = "0x1752A38", VA = "0x1752A38")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class InteractionEffector
	{
		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BE9C", Offset = "0xB4BE9C")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEAC", Offset = "0xB4BEAC")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4BEBC", Offset = "0xB4BEBC")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float resetTimer;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool positionWeightUsed;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool rotationWeightUsed;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool pullUsed;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		private bool reachUsed;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool pushUsed;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool pushParentUsed;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pickedUp;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool defaults;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform target;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<bool> triggered;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool started;

		[Token(Token = "0x170000B9")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0x1B399A0", Offset = "0x1B399A0", VA = "0x1B399A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BB90", Offset = "0xB5BB90")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6001137")]
			[Address(RVA = "0x1B399A8", Offset = "0x1B399A8", VA = "0x1B399A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BBA0", Offset = "0xB5BBA0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool isPaused
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0x1B399B0", Offset = "0x1B399B0", VA = "0x1B399B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BBB0", Offset = "0xB5BBB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x1B399B8", Offset = "0x1B399B8", VA = "0x1B399B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BBC0", Offset = "0xB5BBC0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0x1B399C4", Offset = "0x1B399C4", VA = "0x1B399C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BBD0", Offset = "0xB5BBD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600113B")]
			[Address(RVA = "0x1B399CC", Offset = "0x1B399CC", VA = "0x1B399CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BBE0", Offset = "0xB5BBE0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool inInteraction
		{
			[Token(Token = "0x600113C")]
			[Address(RVA = "0x1B399D4", Offset = "0x1B399D4", VA = "0x1B399D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		public float progress
		{
			[Token(Token = "0x6001145")]
			[Address(RVA = "0x1B3C28C", Offset = "0x1B3C28C", VA = "0x1B3C28C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x1B39A44", Offset = "0x1B39A44", VA = "0x1B39A44")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x1B39AC8", Offset = "0x1B39AC8", VA = "0x1B39AC8")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x1B39B6C", Offset = "0x1B39B6C", VA = "0x1B39B6C")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x1B39CAC", Offset = "0x1B39CAC", VA = "0x1B39CAC")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x1B3A0B8", Offset = "0x1B3A0B8", VA = "0x1B3A0B8")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x1B3A478", Offset = "0x1B3A478", VA = "0x1B3A478")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x1B3A4CC", Offset = "0x1B3A4CC", VA = "0x1B3A4CC")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x1B3AFFC", Offset = "0x1B3AFFC", VA = "0x1B3AFFC")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x1B3BADC", Offset = "0x1B3BADC", VA = "0x1B3BADC")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x1B3BD04", Offset = "0x1B3BD04", VA = "0x1B3BD04")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x1B3C138", Offset = "0x1B3C138", VA = "0x1B3C138")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x1B3C764", Offset = "0x1B3C764", VA = "0x1B3C764")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027B")]
	public class InteractionLookAt
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BECC", Offset = "0xB4BECC")]
		public LookAtIK ik;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BF04", Offset = "0xB4BF04")]
		public float lerpSpeed;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BF3C", Offset = "0xB4BF3C")]
		public float weightSpeed;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x1B3C9C8", Offset = "0x1B3C9C8", VA = "0x1B3C9C8")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0x1B3CB40", Offset = "0x1B3CB40", VA = "0x1B3CB40")]
		public void Update()
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x1B3CD84", Offset = "0x1B3CD84", VA = "0x1B3CD84")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x1B3CE7C", Offset = "0x1B3CE7C", VA = "0x1B3CE7C")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x1B3CF48", Offset = "0x1B3CF48", VA = "0x1B3CF48")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x200027C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB450B4", Offset = "0xB450B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB450B4", Offset = "0xB450B4")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005A2")]
		public class InteractionEvent
		{
			[Token(Token = "0x4001EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57E54", Offset = "0xB57E54")]
			public float time;

			[Token(Token = "0x4001EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57E8C", Offset = "0xB57E8C")]
			public bool pause;

			[Token(Token = "0x4001EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57EC4", Offset = "0xB57EC4")]
			public bool pickUp;

			[Token(Token = "0x4001EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57EFC", Offset = "0xB57EFC")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4001F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57F34", Offset = "0xB57F34")]
			public Message[] messages;

			[Token(Token = "0x6002753")]
			[Address(RVA = "0x1B3C2C8", Offset = "0x1B3C2C8", VA = "0x1B3C2C8")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6002754")]
			[Address(RVA = "0x1B3E1E8", Offset = "0x1B3E1E8", VA = "0x1B3E1E8")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A3")]
		public class Message
		{
			[Token(Token = "0x4001F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57F6C", Offset = "0xB57F6C")]
			public string function;

			[Token(Token = "0x4001F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57FA4", Offset = "0xB57FA4")]
			public GameObject recipient;

			[Token(Token = "0x4001F03")]
			private const string empty = "";

			[Token(Token = "0x6002755")]
			[Address(RVA = "0x1B3E0F8", Offset = "0x1B3E0F8", VA = "0x1B3E0F8")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6002756")]
			[Address(RVA = "0x1B3E1F0", Offset = "0x1B3E1F0", VA = "0x1B3E1F0")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A4")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4001F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB57FDC", Offset = "0xB57FDC")]
			public Animator animator;

			[Token(Token = "0x4001F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58014", Offset = "0xB58014")]
			public Animation animation;

			[Token(Token = "0x4001F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5804C", Offset = "0xB5804C")]
			public string animationState;

			[Token(Token = "0x4001F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58084", Offset = "0xB58084")]
			public float crossfadeTime;

			[Token(Token = "0x4001F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB580BC", Offset = "0xB580BC")]
			public int layer;

			[Token(Token = "0x4001F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB580F4", Offset = "0xB580F4")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4001F0A")]
			private const string empty = "";

			[Token(Token = "0x6002757")]
			[Address(RVA = "0x1B3DE58", Offset = "0x1B3DE58", VA = "0x1B3DE58")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6002758")]
			[Address(RVA = "0x1B3DF4C", Offset = "0x1B3DF4C", VA = "0x1B3DF4C")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6002759")]
			[Address(RVA = "0x1B3E004", Offset = "0x1B3E004", VA = "0x1B3E004")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x600275A")]
			[Address(RVA = "0x1B3E0E4", Offset = "0x1B3E0E4", VA = "0x1B3E0E4")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A5")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20006DB")]
			public enum Type
			{
				[Token(Token = "0x4002326")]
				PositionWeight,
				[Token(Token = "0x4002327")]
				RotationWeight,
				[Token(Token = "0x4002328")]
				PositionOffsetX,
				[Token(Token = "0x4002329")]
				PositionOffsetY,
				[Token(Token = "0x400232A")]
				PositionOffsetZ,
				[Token(Token = "0x400232B")]
				Pull,
				[Token(Token = "0x400232C")]
				Reach,
				[Token(Token = "0x400232D")]
				RotateBoneWeight,
				[Token(Token = "0x400232E")]
				Push,
				[Token(Token = "0x400232F")]
				PushParent,
				[Token(Token = "0x4002330")]
				PoserWeight
			}

			[Token(Token = "0x4001F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5812C", Offset = "0xB5812C")]
			public Type type;

			[Token(Token = "0x4001F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58164", Offset = "0xB58164")]
			public AnimationCurve curve;

			[Token(Token = "0x600275B")]
			[Address(RVA = "0x1B3D654", Offset = "0x1B3D654", VA = "0x1B3D654")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x600275C")]
			[Address(RVA = "0x1B3E208", Offset = "0x1B3E208", VA = "0x1B3E208")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005A6")]
		public class Multiplier
		{
			[Token(Token = "0x4001F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5819C", Offset = "0xB5819C")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4001F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB581D4", Offset = "0xB581D4")]
			public float multiplier;

			[Token(Token = "0x4001F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5820C", Offset = "0xB5820C")]
			public WeightCurve.Type result;

			[Token(Token = "0x600275D")]
			[Address(RVA = "0x1B3DCB8", Offset = "0x1B3DCB8", VA = "0x1B3DCB8")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x600275E")]
			[Address(RVA = "0x1B3E1F8", Offset = "0x1B3E1F8", VA = "0x1B3E1F8")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BF84", Offset = "0xB4BF84")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BFBC", Offset = "0xB4BFBC")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4BFF4", Offset = "0xB4BFF4")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C02C", Offset = "0xB4C02C")]
		private float <length>k__BackingField;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C03C", Offset = "0xB4C03C")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000BE")]
		public float length
		{
			[Token(Token = "0x6001155")]
			[Address(RVA = "0x1B3D124", Offset = "0x1B3D124", VA = "0x1B3D124")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BD40", Offset = "0xB5BD40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001156")]
			[Address(RVA = "0x1B3D12C", Offset = "0x1B3D12C", VA = "0x1B3D12C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BD50", Offset = "0xB5BD50")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6001157")]
			[Address(RVA = "0x1B3D134", Offset = "0x1B3D134", VA = "0x1B3D134")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BD60", Offset = "0xB5BD60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001158")]
			[Address(RVA = "0x1B3D13C", Offset = "0x1B3D13C", VA = "0x1B3D13C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BD70", Offset = "0xB5BD70")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0x1B3D358", Offset = "0x1B3D358", VA = "0x1B3D358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C1")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6001162")]
			[Address(RVA = "0x1B3C638", Offset = "0x1B3C638", VA = "0x1B3C638")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x1B3CF5C", Offset = "0x1B3CF5C", VA = "0x1B3CF5C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BBF0", Offset = "0xB5BBF0")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x1B3CFA8", Offset = "0x1B3CFA8", VA = "0x1B3CFA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BC28", Offset = "0xB5BC28")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x1B3CFF4", Offset = "0x1B3CFF4", VA = "0x1B3CFF4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BC60", Offset = "0xB5BC60")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x1B3D040", Offset = "0x1B3D040", VA = "0x1B3D040")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BC98", Offset = "0xB5BC98")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x1B3D08C", Offset = "0x1B3D08C", VA = "0x1B3D08C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BCD0", Offset = "0xB5BCD0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x1B3D0D8", Offset = "0x1B3D0D8", VA = "0x1B3D0D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BD08", Offset = "0xB5BD08")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x1B3D144", Offset = "0x1B3D144", VA = "0x1B3D144")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x1B3D3E8", Offset = "0x1B3D3E8", VA = "0x1B3D3E8")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x1B3AA24", Offset = "0x1B3AA24", VA = "0x1B3AA24")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1B3D56C", Offset = "0x1B3D56C", VA = "0x1B3D56C")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x1B3A8D8", Offset = "0x1B3A8D8", VA = "0x1B3A8D8")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x1B3AA1C", Offset = "0x1B3AA1C", VA = "0x1B3AA1C")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x1B3B6C0", Offset = "0x1B3B6C0", VA = "0x1B3B6C0")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x1B3BF10", Offset = "0x1B3BF10", VA = "0x1B3BF10")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x1B3DCF4", Offset = "0x1B3DCF4", VA = "0x1B3DCF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x1B3D670", Offset = "0x1B3D670", VA = "0x1B3D670")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x1B3D574", Offset = "0x1B3D574", VA = "0x1B3D574")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x1B3DC50", Offset = "0x1B3DC50", VA = "0x1B3DC50")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x1B3DCF8", Offset = "0x1B3DCF8", VA = "0x1B3DCF8")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x1B3DD60", Offset = "0x1B3DD60", VA = "0x1B3DD60")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BD80", Offset = "0xB5BD80")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x1B3DDAC", Offset = "0x1B3DDAC", VA = "0x1B3DDAC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BDB8", Offset = "0xB5BDB8")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x1B3DDF8", Offset = "0x1B3DDF8", VA = "0x1B3DDF8")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x200027D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB45114", Offset = "0xB45114")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45114", Offset = "0xB45114")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20005A7")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20005A8")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C04C", Offset = "0xB4C04C")]
		public string targetTag;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C084", Offset = "0xB4C084")]
		public float fadeInTime;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C0BC", Offset = "0xB4C0BC")]
		public float speed;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C0F4", Offset = "0xB4C0F4")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4C12C", Offset = "0xB4C12C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C12C", Offset = "0xB4C12C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4C12C", Offset = "0xB4C12C")]
		public Collider characterCollider;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C1B0", Offset = "0xB4C1B0")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4C1B0", Offset = "0xB4C1B0")]
		public Transform FPSCamera;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C210", Offset = "0xB4C210")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C248", Offset = "0xB4C248")]
		public float camRaycastDistance;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4C280", Offset = "0xB4C280")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB4C290", Offset = "0xB4C290")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C290", Offset = "0xB4C290")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C2F0", Offset = "0xB4C2F0")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000C2")]
		public bool inInteraction
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x1B3E3D8", Offset = "0x1B3E3D8", VA = "0x1B3E3D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C3")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0x1B3FFF0", Offset = "0x1B3FFF0", VA = "0x1B3FFF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x1B3FFF8", Offset = "0x1B3FFF8", VA = "0x1B3FFF8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x1B40000", Offset = "0x1B40000", VA = "0x1B40000")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BF40", Offset = "0xB5BF40")]
			get
			{
				return null;
			}
			[Token(Token = "0x600118E")]
			[Address(RVA = "0x1B40008", Offset = "0x1B40008", VA = "0x1B40008")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5BF50", Offset = "0xB5BF50")]
			private set
			{
			}
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x1B3E210", Offset = "0x1B3E210", VA = "0x1B3E210")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BDF0", Offset = "0xB5BDF0")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x1B3E25C", Offset = "0x1B3E25C", VA = "0x1B3E25C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BE28", Offset = "0xB5BE28")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x1B3E2A8", Offset = "0x1B3E2A8", VA = "0x1B3E2A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BE60", Offset = "0xB5BE60")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x1B3E2F4", Offset = "0x1B3E2F4", VA = "0x1B3E2F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BE98", Offset = "0xB5BE98")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x1B3E340", Offset = "0x1B3E340", VA = "0x1B3E340")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BED0", Offset = "0xB5BED0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x1B3E38C", Offset = "0x1B3E38C", VA = "0x1B3E38C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BF08", Offset = "0xB5BF08")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x1B3E568", Offset = "0x1B3E568", VA = "0x1B3E568")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x1B3E634", Offset = "0x1B3E634", VA = "0x1B3E634")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x1B3E700", Offset = "0x1B3E700", VA = "0x1B3E700")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x1B3E7AC", Offset = "0x1B3E7AC", VA = "0x1B3E7AC")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x1B3E8A4", Offset = "0x1B3E8A4", VA = "0x1B3E8A4")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x1B3E9C0", Offset = "0x1B3E9C0", VA = "0x1B3E9C0")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x1B3EA50", Offset = "0x1B3EA50", VA = "0x1B3EA50")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x1B3EAE0", Offset = "0x1B3EAE0", VA = "0x1B3EAE0")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x1B3EB70", Offset = "0x1B3EB70", VA = "0x1B3EB70")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x1B3EBE4", Offset = "0x1B3EBE4", VA = "0x1B3EBE4")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1B3EC58", Offset = "0x1B3EC58", VA = "0x1B3EC58")]
		public void StopAll()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1B3ECC0", Offset = "0x1B3ECC0", VA = "0x1B3ECC0")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1B3ED4C", Offset = "0x1B3ED4C", VA = "0x1B3ED4C")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x1B3EE00", Offset = "0x1B3EE00", VA = "0x1B3EE00")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x1B3EEE4", Offset = "0x1B3EEE4", VA = "0x1B3EEE4")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x1B3F188", Offset = "0x1B3F188", VA = "0x1B3F188")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x1B3F360", Offset = "0x1B3F360", VA = "0x1B3F360")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x1B3F5D4", Offset = "0x1B3F5D4", VA = "0x1B3F5D4")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x1B3F8C8", Offset = "0x1B3F8C8", VA = "0x1B3F8C8")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1B3F90C", Offset = "0x1B3F90C", VA = "0x1B3F90C")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1B3F984", Offset = "0x1B3F984", VA = "0x1B3F984")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x1B3FAA4", Offset = "0x1B3FAA4", VA = "0x1B3FAA4")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x1B3FC1C", Offset = "0x1B3FC1C", VA = "0x1B3FC1C")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x1B3FEC4", Offset = "0x1B3FEC4", VA = "0x1B3FEC4")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x1B3F6D4", Offset = "0x1B3F6D4", VA = "0x1B3F6D4")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x1B40010", Offset = "0x1B40010", VA = "0x1B40010", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x1B40664", Offset = "0x1B40664", VA = "0x1B40664")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1B40684", Offset = "0x1B40684", VA = "0x1B40684")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1B406A0", Offset = "0x1B406A0", VA = "0x1B406A0")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x1B406BC", Offset = "0x1B406BC", VA = "0x1B406BC")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x1B4071C", Offset = "0x1B4071C", VA = "0x1B4071C")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x1B40838", Offset = "0x1B40838", VA = "0x1B40838")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x1B40934", Offset = "0x1B40934", VA = "0x1B40934")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x1B40C94", Offset = "0x1B40C94", VA = "0x1B40C94")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x1B40D80", Offset = "0x1B40D80", VA = "0x1B40D80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x1B40FCC", Offset = "0x1B40FCC", VA = "0x1B40FCC")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x1B403DC", Offset = "0x1B403DC", VA = "0x1B403DC")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x1B4110C", Offset = "0x1B4110C", VA = "0x1B4110C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x1B41238", Offset = "0x1B41238", VA = "0x1B41238")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x1B412D8", Offset = "0x1B412D8", VA = "0x1B412D8")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x1B413C0", Offset = "0x1B413C0", VA = "0x1B413C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x1B3E484", Offset = "0x1B3E484", VA = "0x1B3E484")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x1B3F084", Offset = "0x1B3F084", VA = "0x1B3F084")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x1B41650", Offset = "0x1B41650", VA = "0x1B41650")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BF60", Offset = "0xB5BF60")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x1B4169C", Offset = "0x1B4169C", VA = "0x1B4169C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BF98", Offset = "0xB5BF98")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x1B416E8", Offset = "0x1B416E8", VA = "0x1B416E8")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x200027E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB45174", Offset = "0xB45174")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45174", Offset = "0xB45174")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005A9")]
		public class Multiplier
		{
			[Token(Token = "0x4001F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58244", Offset = "0xB58244")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4001F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5827C", Offset = "0xB5827C")]
			public float multiplier;

			[Token(Token = "0x6002767")]
			[Address(RVA = "0x1B41E88", Offset = "0x1B41E88", VA = "0x1B41E88")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C328", Offset = "0xB4C328")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C360", Offset = "0xB4C360")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C398", Offset = "0xB4C398")]
		public float interactionSpeedMlp;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C3D0", Offset = "0xB4C3D0")]
		public Transform pivot;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C408", Offset = "0xB4C408")]
		public Vector3 twistAxis;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C440", Offset = "0xB4C440")]
		public float twistWeight;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C478", Offset = "0xB4C478")]
		public float swingWeight;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C4B0", Offset = "0xB4C4B0")]
		public bool rotateOnce;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x1B41B9C", Offset = "0x1B41B9C", VA = "0x1B41B9C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5BFD0", Offset = "0xB5BFD0")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x1B41BE8", Offset = "0x1B41BE8", VA = "0x1B41BE8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C008", Offset = "0xB5C008")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x1B41C34", Offset = "0x1B41C34", VA = "0x1B41C34")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C040", Offset = "0xB5C040")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x1B41C80", Offset = "0x1B41C80", VA = "0x1B41C80")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C078", Offset = "0xB5C078")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x1B41CCC", Offset = "0x1B41CCC", VA = "0x1B41CCC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C0B0", Offset = "0xB5C0B0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x1B41D18", Offset = "0x1B41D18", VA = "0x1B41D18")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C0E8", Offset = "0xB5C0E8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x1B3D5E4", Offset = "0x1B3D5E4", VA = "0x1B3D5E4")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x1B3C6C8", Offset = "0x1B3C6C8", VA = "0x1B3C6C8")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x1B3AAD8", Offset = "0x1B3AAD8", VA = "0x1B3AAD8")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x1B41D64", Offset = "0x1B41D64", VA = "0x1B41D64")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C120", Offset = "0xB5C120")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x1B41DB0", Offset = "0x1B41DB0", VA = "0x1B41DB0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C158", Offset = "0xB5C158")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x1B41DFC", Offset = "0x1B41DFC", VA = "0x1B41DFC")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB451D4", Offset = "0xB451D4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB451D4", Offset = "0xB451D4")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005AA")]
		public class CharacterPosition
		{
			[Token(Token = "0x4001F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB582B4", Offset = "0xB582B4")]
			public bool use;

			[Token(Token = "0x4001F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB582EC", Offset = "0xB582EC")]
			public Vector2 offset;

			[Token(Token = "0x4001F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58324", Offset = "0xB58324")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB58324", Offset = "0xB58324")]
			public float angleOffset;

			[Token(Token = "0x4001F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58380", Offset = "0xB58380")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB58380", Offset = "0xB58380")]
			public float maxAngle;

			[Token(Token = "0x4001F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB583D8", Offset = "0xB583D8")]
			public float radius;

			[Token(Token = "0x4001F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58410", Offset = "0xB58410")]
			public bool orbit;

			[Token(Token = "0x4001F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58448", Offset = "0xB58448")]
			public bool fixYAxis;

			[Token(Token = "0x1700040F")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6002768")]
				[Address(RVA = "0x1B42610", Offset = "0x1B42610", VA = "0x1B42610")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000410")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6002769")]
				[Address(RVA = "0x1B4264C", Offset = "0x1B4264C", VA = "0x1B4264C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x600276A")]
			[Address(RVA = "0x1B42744", Offset = "0x1B42744", VA = "0x1B42744")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x600276B")]
			[Address(RVA = "0x1B42DC0", Offset = "0x1B42DC0", VA = "0x1B42DC0")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005AB")]
		public class CameraPosition
		{
			[Token(Token = "0x4001F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58480", Offset = "0xB58480")]
			public Collider lookAtTarget;

			[Token(Token = "0x4001F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB584B8", Offset = "0xB584B8")]
			public Vector3 direction;

			[Token(Token = "0x4001F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB584F0", Offset = "0xB584F0")]
			public float maxDistance;

			[Token(Token = "0x4001F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58528", Offset = "0xB58528")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB58528", Offset = "0xB58528")]
			public float maxAngle;

			[Token(Token = "0x4001F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58580", Offset = "0xB58580")]
			public bool fixYAxis;

			[Token(Token = "0x600276C")]
			[Address(RVA = "0x1B420FC", Offset = "0x1B420FC", VA = "0x1B420FC")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600276D")]
			[Address(RVA = "0x1B422A4", Offset = "0x1B422A4", VA = "0x1B422A4")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x600276E")]
			[Address(RVA = "0x1B42584", Offset = "0x1B42584", VA = "0x1B42584")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005AC")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20006DC")]
			public class Interaction
			{
				[Token(Token = "0x4002331")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5941C", Offset = "0xB5941C")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4002332")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59454", Offset = "0xB59454")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6002AE5")]
				[Address(RVA = "0x1B42DE4", Offset = "0x1B42DE4", VA = "0x1B42DE4")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4001F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4001F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4001F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58628", Offset = "0xB58628")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4001F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58660", Offset = "0xB58660")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4001F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58698", Offset = "0xB58698")]
			public Interaction[] interactions;

			[Token(Token = "0x600276F")]
			[Address(RVA = "0x1B41F78", Offset = "0x1B41F78", VA = "0x1B41F78")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6002770")]
			[Address(RVA = "0x1B42DD4", Offset = "0x1B42DD4", VA = "0x1B42DD4")]
			public Range()
			{
			}
		}

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C4E8", Offset = "0xB4C4E8")]
		public Range[] ranges;

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x1B41E90", Offset = "0x1B41E90", VA = "0x1B41E90")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C190", Offset = "0xB5C190")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x1B41EDC", Offset = "0x1B41EDC", VA = "0x1B41EDC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C1C8", Offset = "0xB5C1C8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x1B41F28", Offset = "0x1B41F28", VA = "0x1B41F28")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C200", Offset = "0xB5C200")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x1B41F74", Offset = "0x1B41F74", VA = "0x1B41F74")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x1B40AD8", Offset = "0x1B40AD8", VA = "0x1B40AD8")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x1B4209C", Offset = "0x1B4209C", VA = "0x1B4209C")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20005AD")]
		public class Map
		{
			[Token(Token = "0x4001F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4001F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4001F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4001F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6002771")]
			[Address(RVA = "0x1B1804C", Offset = "0x1B1804C", VA = "0x1B1804C")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6002772")]
			[Address(RVA = "0x1B18450", Offset = "0x1B18450", VA = "0x1B18450")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6002773")]
			[Address(RVA = "0x1B18404", Offset = "0x1B18404", VA = "0x1B18404")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6002774")]
			[Address(RVA = "0x1B181FC", Offset = "0x1B181FC", VA = "0x1B181FC")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x1B17D64", Offset = "0x1B17D64", VA = "0x1B17D64", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C238", Offset = "0xB5C238")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x1B180F0", Offset = "0x1B180F0", VA = "0x1B180F0", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x1B180F4", Offset = "0x1B180F4", VA = "0x1B180F4", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x1B1839C", Offset = "0x1B1839C", VA = "0x1B1839C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x1B18088", Offset = "0x1B18088", VA = "0x1B18088")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x1B17FAC", Offset = "0x1B17FAC", VA = "0x1B17FAC")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x1B184A0", Offset = "0x1B184A0", VA = "0x1B184A0")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _poseRoot;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] children;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x1B21B98", Offset = "0x1B21B98", VA = "0x1B21B98", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x1B21C50", Offset = "0x1B21C50", VA = "0x1B21C50", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x1B21E08", Offset = "0x1B21E08", VA = "0x1B21E08", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x1B21F04", Offset = "0x1B21F04", VA = "0x1B21F04", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x1B21CAC", Offset = "0x1B21CAC", VA = "0x1B21CAC")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x1B222B4", Offset = "0x1B222B4", VA = "0x1B222B4")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C520", Offset = "0xB4C520")]
		public float weight;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C538", Offset = "0xB4C538")]
		public float localRotationWeight;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C550", Offset = "0xB4C550")]
		public float localPositionWeight;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x60011C3")]
		public abstract void AutoMapping();

		[Token(Token = "0x60011C4")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x60011C5")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x60011C6")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x174B27C", Offset = "0x174B27C", VA = "0x174B27C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x174B2D0", Offset = "0x174B2D0", VA = "0x174B2D0", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x174B30C", Offset = "0x174B30C", VA = "0x174B30C", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x174B324", Offset = "0x174B324", VA = "0x174B324")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB45234", Offset = "0xB45234")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20005AE")]
		public class Rigidbone
		{
			[Token(Token = "0x4001F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4001F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4001F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4001F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4001F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4001F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4001F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4001F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4001F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4001F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4001F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6002775")]
			[Address(RVA = "0x174B8C0", Offset = "0x174B8C0", VA = "0x174B8C0")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6002776")]
			[Address(RVA = "0x174C4CC", Offset = "0x174C4CC", VA = "0x174C4CC")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6002777")]
			[Address(RVA = "0x174C2B0", Offset = "0x174C2B0", VA = "0x174C2B0")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20005AF")]
		public class Child
		{
			[Token(Token = "0x4001F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4001F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4001F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6002778")]
			[Address(RVA = "0x174BA1C", Offset = "0x174BA1C", VA = "0x174BA1C")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6002779")]
			[Address(RVA = "0x174C664", Offset = "0x174C664", VA = "0x174C664")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x600277A")]
			[Address(RVA = "0x174C614", Offset = "0x174C614", VA = "0x174C614")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20005B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4746C", Offset = "0xB4746C")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x17000411")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600277E")]
				[Address(RVA = "0x174CC44", Offset = "0x174CC44", VA = "0x174CC44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000412")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002780")]
				[Address(RVA = "0x174CCAC", Offset = "0x174CCAC", VA = "0x174CCAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600277B")]
			[Address(RVA = "0x174BA7C", Offset = "0x174BA7C", VA = "0x174BA7C")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x600277C")]
			[Address(RVA = "0x174C9FC", Offset = "0x174C9FC", VA = "0x174C9FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600277D")]
			[Address(RVA = "0x174CA00", Offset = "0x174CA00", VA = "0x174CA00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600277F")]
			[Address(RVA = "0x174CC4C", Offset = "0x174CC4C", VA = "0x174CC4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C568", Offset = "0xB4C568")]
		public IK ik;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C5A0", Offset = "0xB4C5A0")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C5D8", Offset = "0xB4C5D8")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C610", Offset = "0xB4C610")]
		public float applyVelocity;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C648", Offset = "0xB4C648")]
		public float applyAngularVelocity;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000C5")]
		private bool isRagdoll
		{
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x174B384", Offset = "0x174B384", VA = "0x174B384")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C6")]
		private bool ikUsed
		{
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0x174BE68", Offset = "0x174BE68", VA = "0x174BE68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x174B34C", Offset = "0x174B34C", VA = "0x174B34C")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x174B3FC", Offset = "0x174B3FC", VA = "0x174B3FC")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x174B52C", Offset = "0x174B52C", VA = "0x174B52C")]
		public void Start()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x174B4BC", Offset = "0x174B4BC", VA = "0x174B4BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5C270", Offset = "0xB5C270")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x174BAA8", Offset = "0x174BAA8", VA = "0x174BAA8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x174BCF4", Offset = "0x174BCF4", VA = "0x174BCF4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x174BDAC", Offset = "0x174BDAC", VA = "0x174BDAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x174BFEC", Offset = "0x174BFEC", VA = "0x174BFEC")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x174BE2C", Offset = "0x174BE2C", VA = "0x174BE2C")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x174BFA8", Offset = "0x174BFA8", VA = "0x174BFA8")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x174C088", Offset = "0x174C088", VA = "0x174C088")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x174C020", Offset = "0x174C020", VA = "0x174C020")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x174B454", Offset = "0x174B454", VA = "0x174B454")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x174BD34", Offset = "0x174BD34", VA = "0x174BD34")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x174C82C", Offset = "0x174C82C", VA = "0x174C82C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x174C930", Offset = "0x174C930", VA = "0x174C930")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool initiated;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool applicationQuit;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000C7")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x174E628", Offset = "0x174E628", VA = "0x174E628")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C8")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x174E664", Offset = "0x174E664", VA = "0x174E664")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x174E2B0", Offset = "0x174E2B0", VA = "0x174E2B0")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x174E2F4", Offset = "0x174E2F4", VA = "0x174E2F4")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x174E580", Offset = "0x174E580", VA = "0x174E580")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x174E5F0", Offset = "0x174E5F0", VA = "0x174E5F0")]
		public void Disable()
		{
		}

		[Token(Token = "0x60011E3")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x174E490", Offset = "0x174E490", VA = "0x174E490")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x174E734", Offset = "0x174E734", VA = "0x174E734")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x174E738", Offset = "0x174E738", VA = "0x174E738")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x174E820", Offset = "0x174E820", VA = "0x174E820")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x174E904", Offset = "0x174E904", VA = "0x174E904")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x174EB80", Offset = "0x174EB80", VA = "0x174EB80")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x174EC3C", Offset = "0x174EC3C", VA = "0x174EC3C")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB45298", Offset = "0xB45298")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45298", Offset = "0xB45298")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C690", Offset = "0xB4C690")]
		public float limit;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C6AC", Offset = "0xB4C6AC")]
		public float twistLimit;

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x174ECB4", Offset = "0x174ECB4", VA = "0x174ECB4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C2D4", Offset = "0xB5C2D4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x174ED00", Offset = "0x174ED00", VA = "0x174ED00")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C30C", Offset = "0xB5C30C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x174ED4C", Offset = "0x174ED4C", VA = "0x174ED4C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C344", Offset = "0xB5C344")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x174ED98", Offset = "0x174ED98", VA = "0x174ED98")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C37C", Offset = "0xB5C37C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x174EDE4", Offset = "0x174EDE4", VA = "0x174EDE4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x174EE9C", Offset = "0x174EE9C", VA = "0x174EE9C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x174F0E4", Offset = "0x174F0E4", VA = "0x174F0E4")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x2000286")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB452F8", Offset = "0xB452F8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB452F8", Offset = "0xB452F8")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool useLimits;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float min;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float max;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastRotation;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastAngle;

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x174F0F4", Offset = "0x174F0F4", VA = "0x174F0F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C3B4", Offset = "0xB5C3B4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x174F140", Offset = "0x174F140", VA = "0x174F140")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C3EC", Offset = "0xB5C3EC")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x174F18C", Offset = "0x174F18C", VA = "0x174F18C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C424", Offset = "0xB5C424")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x174F1D8", Offset = "0x174F1D8", VA = "0x174F1D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C45C", Offset = "0xB5C45C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x174F224", Offset = "0x174F224", VA = "0x174F224", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x174F24C", Offset = "0x174F24C", VA = "0x174F24C")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x174F54C", Offset = "0x174F54C", VA = "0x174F54C")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB45358", Offset = "0xB45358")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45358", Offset = "0xB45358")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20005B1")]
		public class ReachCone
		{
			[Token(Token = "0x4001F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4001F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4001F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4001F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x17000413")]
			public Vector3 o
			{
				[Token(Token = "0x6002781")]
				[Address(RVA = "0x17514E8", Offset = "0x17514E8", VA = "0x17514E8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000414")]
			public Vector3 a
			{
				[Token(Token = "0x6002782")]
				[Address(RVA = "0x1751520", Offset = "0x1751520", VA = "0x1751520")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000415")]
			public Vector3 b
			{
				[Token(Token = "0x6002783")]
				[Address(RVA = "0x175155C", Offset = "0x175155C", VA = "0x175155C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000416")]
			public Vector3 c
			{
				[Token(Token = "0x6002784")]
				[Address(RVA = "0x1751598", Offset = "0x1751598", VA = "0x1751598")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000417")]
			public bool isValid
			{
				[Token(Token = "0x6002786")]
				[Address(RVA = "0x175064C", Offset = "0x175064C", VA = "0x175064C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002785")]
			[Address(RVA = "0x1750C98", Offset = "0x1750C98", VA = "0x1750C98")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6002787")]
			[Address(RVA = "0x1750DF8", Offset = "0x1750DF8", VA = "0x1750DF8")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005B2")]
		public class LimitPoint
		{
			[Token(Token = "0x4001F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4001F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6002788")]
			[Address(RVA = "0x175065C", Offset = "0x175065C", VA = "0x175065C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C6D8", Offset = "0xB4C6D8")]
		public float twistLimit;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C6F4", Offset = "0xB4C6F4")]
		public int smoothIterations;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x174F5D4", Offset = "0x174F5D4", VA = "0x174F5D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C494", Offset = "0xB5C494")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x174F620", Offset = "0x174F620", VA = "0x174F620")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C4CC", Offset = "0xB5C4CC")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x174F66C", Offset = "0x174F66C", VA = "0x174F66C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C504", Offset = "0xB5C504")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x174F6B8", Offset = "0x174F6B8", VA = "0x174F6B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C53C", Offset = "0xB5C53C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x174F704", Offset = "0x174F704", VA = "0x174F704")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x174FBE8", Offset = "0x174FBE8", VA = "0x174FBE8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x174FCE0", Offset = "0x174FCE0", VA = "0x174FCE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1750298", Offset = "0x1750298", VA = "0x1750298")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x174F7A0", Offset = "0x174F7A0", VA = "0x174F7A0")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x17506E0", Offset = "0x17506E0", VA = "0x17506E0")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1750FB8", Offset = "0x1750FB8", VA = "0x1750FB8")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x1750FFC", Offset = "0x1750FFC", VA = "0x1750FFC")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x1751144", Offset = "0x1751144", VA = "0x1751144")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x174FF60", Offset = "0x174FF60", VA = "0x174FF60")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x17512D4", Offset = "0x17512D4", VA = "0x17512D4")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x1751484", Offset = "0x1751484", VA = "0x1751484")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x2000288")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB453B8", Offset = "0xB453B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB453B8", Offset = "0xB453B8")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4C7B4", Offset = "0xB4C7B4")]
		public float twistLimit;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x17515D4", Offset = "0x17515D4", VA = "0x17515D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C574", Offset = "0xB5C574")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x1751620", Offset = "0x1751620", VA = "0x1751620")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C5AC", Offset = "0xB5C5AC")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x175166C", Offset = "0x175166C", VA = "0x175166C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C5E4", Offset = "0xB5C5E4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x17516B8", Offset = "0x17516B8", VA = "0x17516B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5C61C", Offset = "0xB5C61C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x1751704", Offset = "0x1751704", VA = "0x1751704")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x1751720", Offset = "0x1751720", VA = "0x1751720", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x17517D8", Offset = "0x17517D8", VA = "0x17517D8")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x1751B04", Offset = "0x1751B04", VA = "0x1751B04")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005B3")]
		public class Pose
		{
			[Token(Token = "0x4001F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4001F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4001F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4001F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4001F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6002789")]
			[Address(RVA = "0x15DB054", Offset = "0x15DB054", VA = "0x15DB054")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x600278A")]
			[Address(RVA = "0x15DB354", Offset = "0x15DB354", VA = "0x15DB354")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x600278B")]
			[Address(RVA = "0x15DB35C", Offset = "0x15DB35C", VA = "0x15DB35C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x15D725C", Offset = "0x15D725C", VA = "0x15D725C")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x15D7338", Offset = "0x15D7338", VA = "0x15D7338")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x15DB2EC", Offset = "0x15DB2EC", VA = "0x15DB2EC")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005B4")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20006DD")]
			public class EffectorLink
			{
				[Token(Token = "0x4002333")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5948C", Offset = "0xB5948C")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4002334")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB594C4", Offset = "0xB594C4")]
				public float weight;

				[Token(Token = "0x6002AE6")]
				[Address(RVA = "0x15DB94C", Offset = "0x15DB94C", VA = "0x15DB94C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB586D0", Offset = "0xB586D0")]
			public Transform transform;

			[Token(Token = "0x4001F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58708", Offset = "0xB58708")]
			public Transform relativeTo;

			[Token(Token = "0x4001F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58740", Offset = "0xB58740")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58778", Offset = "0xB58778")]
			public float verticalWeight;

			[Token(Token = "0x4001F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB587B0", Offset = "0xB587B0")]
			public float horizontalWeight;

			[Token(Token = "0x4001F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB587E8", Offset = "0xB587E8")]
			public float speed;

			[Token(Token = "0x4001F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4001F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4001F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x600278C")]
			[Address(RVA = "0x15DB4B8", Offset = "0x15DB4B8", VA = "0x15DB4B8")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x600278D")]
			[Address(RVA = "0x15DB924", Offset = "0x15DB924", VA = "0x15DB924")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600278E")]
			[Address(RVA = "0x15DB934", Offset = "0x15DB934", VA = "0x15DB934")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C808", Offset = "0xB4C808")]
		public Body[] bodies;

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x15DB378", Offset = "0x15DB378", VA = "0x15DB378", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x15DB91C", Offset = "0x15DB91C", VA = "0x15DB91C")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C840", Offset = "0xB4C840")]
		public float tiltSpeed;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C878", Offset = "0xB4C878")]
		public float tiltSensitivity;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C8B0", Offset = "0xB4C8B0")]
		public OffsetPose poseLeft;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C8E8", Offset = "0xB4C8E8")]
		public OffsetPose poseRight;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x15DCC28", Offset = "0x15DCC28", VA = "0x15DCC28", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x15DCC70", Offset = "0x15DCC70", VA = "0x15DCC70", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x15DCEA0", Offset = "0x15DCEA0", VA = "0x15DCEA0")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005B5")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4001F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58820", Offset = "0xB58820")]
			public string name;

			[Token(Token = "0x4001F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58858", Offset = "0xB58858")]
			public Collider collider;

			[Token(Token = "0x4001F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58890", Offset = "0xB58890")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB588DC", Offset = "0xB588DC")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4001F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB588EC", Offset = "0xB588EC")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4001F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB588FC", Offset = "0xB588FC")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4001F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5890C", Offset = "0xB5890C")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4001F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4001F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4001F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x17000418")]
			protected float crossFader
			{
				[Token(Token = "0x600278F")]
				[Address(RVA = "0x1B22850", Offset = "0x1B22850", VA = "0x1B22850")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62608", Offset = "0xB62608")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002790")]
				[Address(RVA = "0x1B22858", Offset = "0x1B22858", VA = "0x1B22858")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62618", Offset = "0xB62618")]
				private set
				{
				}
			}

			[Token(Token = "0x17000419")]
			protected float timer
			{
				[Token(Token = "0x6002791")]
				[Address(RVA = "0x1B22860", Offset = "0x1B22860", VA = "0x1B22860")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62628", Offset = "0xB62628")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002792")]
				[Address(RVA = "0x1B22868", Offset = "0x1B22868", VA = "0x1B22868")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62638", Offset = "0xB62638")]
				private set
				{
				}
			}

			[Token(Token = "0x1700041A")]
			protected Vector3 force
			{
				[Token(Token = "0x6002793")]
				[Address(RVA = "0x1B22870", Offset = "0x1B22870", VA = "0x1B22870")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62648", Offset = "0xB62648")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002794")]
				[Address(RVA = "0x1B2287C", Offset = "0x1B2287C", VA = "0x1B2287C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62658", Offset = "0xB62658")]
				private set
				{
				}
			}

			[Token(Token = "0x1700041B")]
			protected Vector3 point
			{
				[Token(Token = "0x6002795")]
				[Address(RVA = "0x1B22888", Offset = "0x1B22888", VA = "0x1B22888")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62668", Offset = "0xB62668")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6002796")]
				[Address(RVA = "0x1B22894", Offset = "0x1B22894", VA = "0x1B22894")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62678", Offset = "0xB62678")]
				private set
				{
				}
			}

			[Token(Token = "0x6002797")]
			[Address(RVA = "0x1B2271C", Offset = "0x1B2271C", VA = "0x1B2271C")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6002798")]
			[Address(RVA = "0x1B22390", Offset = "0x1B22390", VA = "0x1B22390")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6002799")]
			protected abstract float GetLength();

			[Token(Token = "0x600279A")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x600279B")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x600279C")]
			[Address(RVA = "0x1B228A0", Offset = "0x1B228A0", VA = "0x1B228A0")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005B6")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20006DE")]
			public class EffectorLink
			{
				[Token(Token = "0x4002335")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB594FC", Offset = "0xB594FC")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4002336")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59534", Offset = "0xB59534")]
				public float weight;

				[Token(Token = "0x4002337")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4002338")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6002AE7")]
				[Address(RVA = "0x1B2320C", Offset = "0x1B2320C", VA = "0x1B2320C")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6002AE8")]
				[Address(RVA = "0x1B23000", Offset = "0x1B23000", VA = "0x1B23000")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6002AE9")]
				[Address(RVA = "0x1B23348", Offset = "0x1B23348", VA = "0x1B23348")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5891C", Offset = "0xB5891C")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4001F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58954", Offset = "0xB58954")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4001F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5898C", Offset = "0xB5898C")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x600279D")]
			[Address(RVA = "0x1B22E1C", Offset = "0x1B22E1C", VA = "0x1B22E1C", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x600279E")]
			[Address(RVA = "0x1B22F94", Offset = "0x1B22F94", VA = "0x1B22F94", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600279F")]
			[Address(RVA = "0x1B23014", Offset = "0x1B23014", VA = "0x1B23014", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60027A0")]
			[Address(RVA = "0x1B23334", Offset = "0x1B23334", VA = "0x1B23334")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005B7")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20006DF")]
			public class BoneLink
			{
				[Token(Token = "0x4002339")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5956C", Offset = "0xB5956C")]
				public Transform bone;

				[Token(Token = "0x400233A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB595A4", Offset = "0xB595A4")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB595A4", Offset = "0xB595A4")]
				public float weight;

				[Token(Token = "0x400233B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x400233C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6002AEA")]
				[Address(RVA = "0x1B22C24", Offset = "0x1B22C24", VA = "0x1B22C24")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6002AEB")]
				[Address(RVA = "0x1B229BC", Offset = "0x1B229BC", VA = "0x1B229BC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6002AEC")]
				[Address(RVA = "0x1B22D94", Offset = "0x1B22D94", VA = "0x1B22D94")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4001F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB589C4", Offset = "0xB589C4")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4001F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB589FC", Offset = "0xB589FC")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4001F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x60027A1")]
			[Address(RVA = "0x1B228B4", Offset = "0x1B228B4", VA = "0x1B228B4", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60027A2")]
			[Address(RVA = "0x1B22958", Offset = "0x1B22958", VA = "0x1B22958", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60027A3")]
			[Address(RVA = "0x1B229C8", Offset = "0x1B229C8", VA = "0x1B229C8", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60027A4")]
			[Address(RVA = "0x1B22D80", Offset = "0x1B22D80", VA = "0x1B22D80")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C920", Offset = "0xB4C920")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C958", Offset = "0xB4C958")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x1B222BC", Offset = "0x1B222BC", VA = "0x1B222BC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x1B224DC", Offset = "0x1B224DC", VA = "0x1B224DC")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x1B22848", Offset = "0x1B22848", VA = "0x1B22848")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20005B8")]
		public abstract class Offset
		{
			[Token(Token = "0x4001F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58A34", Offset = "0xB58A34")]
			public string name;

			[Token(Token = "0x4001F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58A6C", Offset = "0xB58A6C")]
			public Collider collider;

			[Token(Token = "0x4001F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58AA4", Offset = "0xB58AA4")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB58AF0", Offset = "0xB58AF0")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4001F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB58B00", Offset = "0xB58B00")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4001F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB58B10", Offset = "0xB58B10")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4001F63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB58B20", Offset = "0xB58B20")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4001F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4001F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4001F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x1700041C")]
			protected float crossFader
			{
				[Token(Token = "0x60027A5")]
				[Address(RVA = "0x1B23900", Offset = "0x1B23900", VA = "0x1B23900")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62688", Offset = "0xB62688")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60027A6")]
				[Address(RVA = "0x1B23908", Offset = "0x1B23908", VA = "0x1B23908")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62698", Offset = "0xB62698")]
				private set
				{
				}
			}

			[Token(Token = "0x1700041D")]
			protected float timer
			{
				[Token(Token = "0x60027A7")]
				[Address(RVA = "0x1B23910", Offset = "0x1B23910", VA = "0x1B23910")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626A8", Offset = "0xB626A8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60027A8")]
				[Address(RVA = "0x1B23918", Offset = "0x1B23918", VA = "0x1B23918")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626B8", Offset = "0xB626B8")]
				private set
				{
				}
			}

			[Token(Token = "0x1700041E")]
			protected Vector3 force
			{
				[Token(Token = "0x60027A9")]
				[Address(RVA = "0x1B23920", Offset = "0x1B23920", VA = "0x1B23920")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626C8", Offset = "0xB626C8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60027AA")]
				[Address(RVA = "0x1B2392C", Offset = "0x1B2392C", VA = "0x1B2392C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626D8", Offset = "0xB626D8")]
				private set
				{
				}
			}

			[Token(Token = "0x1700041F")]
			protected Vector3 point
			{
				[Token(Token = "0x60027AB")]
				[Address(RVA = "0x1B23938", Offset = "0x1B23938", VA = "0x1B23938")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626E8", Offset = "0xB626E8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60027AC")]
				[Address(RVA = "0x1B23944", Offset = "0x1B23944", VA = "0x1B23944")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB626F8", Offset = "0xB626F8")]
				private set
				{
				}
			}

			[Token(Token = "0x60027AD")]
			[Address(RVA = "0x1B237B8", Offset = "0x1B237B8", VA = "0x1B237B8")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60027AE")]
			[Address(RVA = "0x1B2341C", Offset = "0x1B2341C", VA = "0x1B2341C")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60027AF")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x60027B0")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60027B1")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x60027B2")]
			[Address(RVA = "0x1B23950", Offset = "0x1B23950", VA = "0x1B23950")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005B9")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20006E0")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x400233D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB595F8", Offset = "0xB595F8")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x400233E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59630", Offset = "0xB59630")]
				public float weight;

				[Token(Token = "0x400233F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4002340")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6002AED")]
				[Address(RVA = "0x1B23E0C", Offset = "0x1B23E0C", VA = "0x1B23E0C")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6002AEE")]
				[Address(RVA = "0x1B23BC8", Offset = "0x1B23BC8", VA = "0x1B23BC8")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6002AEF")]
				[Address(RVA = "0x1B23F28", Offset = "0x1B23F28", VA = "0x1B23F28")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4001F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58B30", Offset = "0xB58B30")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4001F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58B68", Offset = "0xB58B68")]
			public int upDirCurveIndex;

			[Token(Token = "0x4001F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58BA0", Offset = "0xB58BA0")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x60027B3")]
			[Address(RVA = "0x1B23964", Offset = "0x1B23964", VA = "0x1B23964", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60027B4")]
			[Address(RVA = "0x1B23B5C", Offset = "0x1B23B5C", VA = "0x1B23B5C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60027B5")]
			[Address(RVA = "0x1B23BDC", Offset = "0x1B23BDC", VA = "0x1B23BDC", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60027B6")]
			[Address(RVA = "0x1B23F0C", Offset = "0x1B23F0C", VA = "0x1B23F0C")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005BA")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20006E1")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4002341")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59668", Offset = "0xB59668")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4002342")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB596A0", Offset = "0xB596A0")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB596A0", Offset = "0xB596A0")]
				public float weight;

				[Token(Token = "0x4002343")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4002344")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6002AF0")]
				[Address(RVA = "0x1B24390", Offset = "0x1B24390", VA = "0x1B24390")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6002AF1")]
				[Address(RVA = "0x1B24078", Offset = "0x1B24078", VA = "0x1B24078")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6002AF2")]
				[Address(RVA = "0x1B244CC", Offset = "0x1B244CC", VA = "0x1B244CC")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4001F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58BD8", Offset = "0xB58BD8")]
			public int curveIndex;

			[Token(Token = "0x4001F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58C10", Offset = "0xB58C10")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4001F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x60027B7")]
			[Address(RVA = "0x1B23F30", Offset = "0x1B23F30", VA = "0x1B23F30", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60027B8")]
			[Address(RVA = "0x1B24014", Offset = "0x1B24014", VA = "0x1B24014", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60027B9")]
			[Address(RVA = "0x1B24084", Offset = "0x1B24084", VA = "0x1B24084", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60027BA")]
			[Address(RVA = "0x1B244B8", Offset = "0x1B244B8", VA = "0x1B244B8")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C990", Offset = "0xB4C990")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4C9C8", Offset = "0xB4C9C8")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x1B23350", Offset = "0x1B23350", VA = "0x1B23350", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x1B23570", Offset = "0x1B23570", VA = "0x1B23570")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x1B238F8", Offset = "0x1B238F8", VA = "0x1B238F8")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005BB")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20006E2")]
			public class EffectorLink
			{
				[Token(Token = "0x4002345")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB596F4", Offset = "0xB596F4")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4002346")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5972C", Offset = "0xB5972C")]
				public float weight;

				[Token(Token = "0x6002AF3")]
				[Address(RVA = "0x1B39998", Offset = "0x1B39998", VA = "0x1B39998")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58C48", Offset = "0xB58C48")]
			public Transform transform;

			[Token(Token = "0x4001F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58C80", Offset = "0xB58C80")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58CB8", Offset = "0xB58CB8")]
			public float speed;

			[Token(Token = "0x4001F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58CF0", Offset = "0xB58CF0")]
			public float acceleration;

			[Token(Token = "0x4001F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58D28", Offset = "0xB58D28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB58D28", Offset = "0xB58D28")]
			public float matchVelocity;

			[Token(Token = "0x4001F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58D7C", Offset = "0xB58D7C")]
			public float gravity;

			[Token(Token = "0x4001F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4001F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4001F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4001F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4001F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x60027BB")]
			[Address(RVA = "0x1B39368", Offset = "0x1B39368", VA = "0x1B39368")]
			public void Reset()
			{
			}

			[Token(Token = "0x60027BC")]
			[Address(RVA = "0x1B39528", Offset = "0x1B39528", VA = "0x1B39528")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x60027BD")]
			[Address(RVA = "0x1B3997C", Offset = "0x1B3997C", VA = "0x1B3997C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CA00", Offset = "0xB4CA00")]
		public Body[] bodies;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CA38", Offset = "0xB4CA38")]
		public OffsetLimits[] limits;

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x1B392F0", Offset = "0x1B392F0", VA = "0x1B392F0")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x1B39444", Offset = "0x1B39444", VA = "0x1B39444", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x1B3995C", Offset = "0x1B3995C", VA = "0x1B3995C")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005BC")]
		public class OffsetLimits
		{
			[Token(Token = "0x4001F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58DB4", Offset = "0xB58DB4")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58DEC", Offset = "0xB58DEC")]
			public float spring;

			[Token(Token = "0x4001F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58E24", Offset = "0xB58E24")]
			public bool x;

			[Token(Token = "0x4001F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58E5C", Offset = "0xB58E5C")]
			public bool y;

			[Token(Token = "0x4001F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58E94", Offset = "0xB58E94")]
			public bool z;

			[Token(Token = "0x4001F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58ECC", Offset = "0xB58ECC")]
			public float minX;

			[Token(Token = "0x4001F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58F04", Offset = "0xB58F04")]
			public float maxX;

			[Token(Token = "0x4001F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58F3C", Offset = "0xB58F3C")]
			public float minY;

			[Token(Token = "0x4001F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58F74", Offset = "0xB58F74")]
			public float maxY;

			[Token(Token = "0x4001F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58FAC", Offset = "0xB58FAC")]
			public float minZ;

			[Token(Token = "0x4001F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB58FE4", Offset = "0xB58FE4")]
			public float maxZ;

			[Token(Token = "0x60027BE")]
			[Address(RVA = "0x1B434E0", Offset = "0x1B434E0", VA = "0x1B434E0")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60027BF")]
			[Address(RVA = "0x1B439E8", Offset = "0x1B439E8", VA = "0x1B439E8")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x60027C0")]
			[Address(RVA = "0x1B43A18", Offset = "0x1B43A18", VA = "0x1B43A18")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x60027C1")]
			[Address(RVA = "0x1B43AF0", Offset = "0x1B43AF0", VA = "0x1B43AF0")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20005BD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4747C", Offset = "0xB4747C")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x17000420")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027C5")]
				[Address(RVA = "0x1B43978", Offset = "0x1B43978", VA = "0x1B43978", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000421")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027C7")]
				[Address(RVA = "0x1B439E0", Offset = "0x1B439E0", VA = "0x1B439E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027C2")]
			[Address(RVA = "0x1B433A8", Offset = "0x1B433A8", VA = "0x1B433A8")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60027C3")]
			[Address(RVA = "0x1B43838", Offset = "0x1B43838", VA = "0x1B43838", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027C4")]
			[Address(RVA = "0x1B4383C", Offset = "0x1B4383C", VA = "0x1B4383C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027C6")]
			[Address(RVA = "0x1B43980", Offset = "0x1B43980", VA = "0x1B43980", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CA70", Offset = "0xB4CA70")]
		public float weight;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CAA8", Offset = "0xB4CAA8")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000C9")]
		protected float deltaTime
		{
			[Token(Token = "0x6001222")]
			[Address(RVA = "0x1B394FC", Offset = "0x1B394FC", VA = "0x1B394FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001223")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x1B4330C", Offset = "0x1B4330C", VA = "0x1B4330C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x1B43338", Offset = "0x1B43338", VA = "0x1B43338")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5C654", Offset = "0xB5C654")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x1B433D4", Offset = "0x1B433D4", VA = "0x1B433D4")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x1B398A0", Offset = "0x1B398A0", VA = "0x1B398A0")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x1B43740", Offset = "0x1B43740", VA = "0x1B43740", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x1B3996C", Offset = "0x1B3996C", VA = "0x1B3996C")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20005BE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4748C", Offset = "0xB4748C")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x17000422")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027CB")]
				[Address(RVA = "0x174ACF4", Offset = "0x174ACF4", VA = "0x174ACF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000423")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027CD")]
				[Address(RVA = "0x174AD5C", Offset = "0x174AD5C", VA = "0x174AD5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027C8")]
			[Address(RVA = "0x174AB88", Offset = "0x174AB88", VA = "0x174AB88")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60027C9")]
			[Address(RVA = "0x174ABB4", Offset = "0x174ABB4", VA = "0x174ABB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027CA")]
			[Address(RVA = "0x174ABB8", Offset = "0x174ABB8", VA = "0x174ABB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027CC")]
			[Address(RVA = "0x174ACFC", Offset = "0x174ACFC", VA = "0x174ACFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CAE0", Offset = "0xB4CAE0")]
		public float weight;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CB18", Offset = "0xB4CB18")]
		public VRIK ik;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000CA")]
		protected float deltaTime
		{
			[Token(Token = "0x600122A")]
			[Address(RVA = "0x1B43AF8", Offset = "0x1B43AF8", VA = "0x1B43AF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600122B")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x1B43B24", Offset = "0x1B43B24", VA = "0x1B43B24", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x1B43B50", Offset = "0x1B43B50", VA = "0x1B43B50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5C6B8", Offset = "0xB5C6B8")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x1B43BC0", Offset = "0x1B43BC0", VA = "0x1B43BC0")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x1B43CCC", Offset = "0x1B43CCC", VA = "0x1B43CCC", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x1B43DC4", Offset = "0x1B43DC4", VA = "0x1B43DC4")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005BF")]
		public class EffectorLink
		{
			[Token(Token = "0x4001F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4001F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4001F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x60027CE")]
			[Address(RVA = "0x174AE24", Offset = "0x174AE24", VA = "0x174AE24")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x60027CF")]
			[Address(RVA = "0x174B274", Offset = "0x174B274", VA = "0x174B274")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x174AD64", Offset = "0x174AD64", VA = "0x174AD64")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x174B15C", Offset = "0x174B15C", VA = "0x174B15C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x174B214", Offset = "0x174B214", VA = "0x174B214")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20005C0")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x20006E3")]
			public class EffectorLink
			{
				[Token(Token = "0x4002347")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59764", Offset = "0xB59764")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4002348")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5979C", Offset = "0xB5979C")]
				public float weight;

				[Token(Token = "0x6002AF4")]
				[Address(RVA = "0x174E2A8", Offset = "0x174E2A8", VA = "0x174E2A8")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5901C", Offset = "0xB5901C")]
			public Vector3 offset;

			[Token(Token = "0x4001F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59054", Offset = "0xB59054")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB59054", Offset = "0xB59054")]
			public float additivity;

			[Token(Token = "0x4001F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB590A8", Offset = "0xB590A8")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4001F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB590E0", Offset = "0xB590E0")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4001F92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x60027D0")]
			[Address(RVA = "0x174D030", Offset = "0x174D030", VA = "0x174D030")]
			public void Start()
			{
			}

			[Token(Token = "0x60027D1")]
			[Address(RVA = "0x174DB80", Offset = "0x174DB80", VA = "0x174DB80")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x60027D2")]
			[Address(RVA = "0x174E294", Offset = "0x174E294", VA = "0x174E294")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005C1")]
		public enum Handedness
		{
			[Token(Token = "0x4001F94")]
			Right,
			[Token(Token = "0x4001F95")]
			Left
		}

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CB50", Offset = "0xB4CB50")]
		public AimIK aimIK;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CB88", Offset = "0xB4CB88")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CBC0", Offset = "0xB4CBC0")]
		public Handedness handedness;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CBF8", Offset = "0xB4CBF8")]
		public bool twoHanded;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CC30", Offset = "0xB4CC30")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CC68", Offset = "0xB4CC68")]
		public float magnitudeRandom;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CCA0", Offset = "0xB4CCA0")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CCD8", Offset = "0xB4CCD8")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CD10", Offset = "0xB4CD10")]
		public float blendTime;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB4CD48", Offset = "0xB4CD48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CD48", Offset = "0xB4CD48")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000CB")]
		public bool isFinished
		{
			[Token(Token = "0x6001234")]
			[Address(RVA = "0x174CE08", Offset = "0x174CE08", VA = "0x174CE08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x600123A")]
			[Address(RVA = "0x174DE34", Offset = "0x174DE34", VA = "0x174DE34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x600123B")]
			[Address(RVA = "0x174DE74", Offset = "0x174DE74", VA = "0x174DE74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		private Transform primaryHand
		{
			[Token(Token = "0x600123C")]
			[Address(RVA = "0x174DDF4", Offset = "0x174DDF4", VA = "0x174DDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		private Transform secondaryHand
		{
			[Token(Token = "0x600123D")]
			[Address(RVA = "0x174DE14", Offset = "0x174DE14", VA = "0x174DE14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x174CE38", Offset = "0x174CE38", VA = "0x174CE38")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x174CE64", Offset = "0x174CE64", VA = "0x174CE64")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x174D0E0", Offset = "0x174D0E0", VA = "0x174D0E0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x174DEB4", Offset = "0x174DEB4", VA = "0x174DEB4")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x174E00C", Offset = "0x174E00C", VA = "0x174E00C")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x174E048", Offset = "0x174E048", VA = "0x174E048", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x174E1E4", Offset = "0x174E1E4", VA = "0x174E1E4")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x2000293")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CDA8", Offset = "0xB4CDA8")]
		public float weight;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4CDE0", Offset = "0xB4CDE0")]
		public float offset;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x1751B10", Offset = "0x1751B10", VA = "0x1751B10")]
		private void Start()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x1751BE4", Offset = "0x1751BE4", VA = "0x1751BE4")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x1751CD0", Offset = "0x1751CD0", VA = "0x1751CD0")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x1752118", Offset = "0x1752118", VA = "0x1752118")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x1752150", Offset = "0x1752150", VA = "0x1752150")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x1752248", Offset = "0x1752248", VA = "0x1752248")]
		public ShoulderRotator()
		{
		}
	}
}
namespace LeapInternal
{
	[Token(Token = "0x2000294")]
	public class CircularObjectBuffer<T> where T : new()
	{
		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] array;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int current;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object locker;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE18", Offset = "0xB4CE18")]
		private int <Count>k__BackingField;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE28", Offset = "0xB4CE28")]
		private int <Capacity>k__BackingField;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE38", Offset = "0xB4CE38")]
		private bool <IsEmpty>k__BackingField;

		[Token(Token = "0x170000D0")]
		public int Count
		{
			[Token(Token = "0x6001246")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C71C", Offset = "0xB5C71C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001247")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C72C", Offset = "0xB5C72C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public int Capacity
		{
			[Token(Token = "0x6001248")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C73C", Offset = "0xB5C73C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001249")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C74C", Offset = "0xB5C74C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public bool IsEmpty
		{
			[Token(Token = "0x600124A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C75C", Offset = "0xB5C75C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600124B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C76C", Offset = "0xB5C76C")]
			private set
			{
			}
		}

		[Token(Token = "0x600124C")]
		public CircularObjectBuffer(int capacity)
		{
		}

		[Token(Token = "0x600124D")]
		public virtual void Put(ref T item)
		{
		}

		[Token(Token = "0x600124E")]
		public void Get(out T t, int index = 0)
		{
		}

		[Token(Token = "0x600124F")]
		public void Resize(int newCapacity)
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class Connection
	{
		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, Connection> connectionDictionary;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static long _handIdOffset;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static long _handPositionOffset;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static long _handOrientationOffset;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE48", Offset = "0xB4CE48")]
		private int <ConnectionKey>k__BackingField;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE58", Offset = "0xB4CE58")]
		private CircularObjectBuffer<LEAP_TRACKING_EVENT> <Frames>k__BackingField;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DeviceList _devices;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FailedDeviceList _failedDevices;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DistortionData _currentLeftDistortionData;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DistortionData _currentRightDistortionData;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _frameBufferLength;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IntPtr _leapConnection;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _isRunning;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Thread _polster;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ulong _requestedPolicies;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ulong _activePolicies;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<uint, string> _configRequests;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE68", Offset = "0xB4CE68")]
		private SynchronizationContext <EventContext>k__BackingField;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private EventHandler<LeapEventArgs> _leapInit;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private EventHandler<ConnectionEventArgs> _leapConnectionEvent;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public EventHandler<ConnectionLostEventArgs> LeapConnectionLost;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public EventHandler<DeviceEventArgs> LeapDevice;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public EventHandler<DeviceEventArgs> LeapDeviceLost;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public EventHandler<DeviceFailureEventArgs> LeapDeviceFailure;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public EventHandler<PolicyEventArgs> LeapPolicyChange;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public EventHandler<FrameEventArgs> LeapFrame;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EventHandler<InternalFrameEventArgs> LeapInternalFrame;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public EventHandler<LogEventArgs> LeapLogEvent;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public EventHandler<SetConfigResponseEventArgs> LeapConfigResponse;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public EventHandler<ConfigChangeEventArgs> LeapConfigChange;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public EventHandler<DistortionEventArgs> LeapDistortionChange;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public EventHandler<DroppedFrameEventArgs> LeapDroppedFrame;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public EventHandler<ImageEventArgs> LeapImage;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public EventHandler<PointMappingChangeEventArgs> LeapPointMappingChange;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public EventHandler<HeadPoseEventArgs> LeapHeadPoseChange;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Action<BeginProfilingForThreadArgs> LeapBeginProfilingForThread;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Action<EndProfilingForThreadArgs> LeapEndProfilingForThread;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Action<BeginProfilingBlockArgs> LeapBeginProfilingBlock;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Action<EndProfilingBlockArgs> LeapEndProfilingBlock;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool _disposed;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private LEAP_ALLOCATOR _pLeapAllocator;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private eLeapRS _lastResult;

		[Token(Token = "0x170000D3")]
		public int ConnectionKey
		{
			[Token(Token = "0x6001252")]
			[Address(RVA = "0x14A0A34", Offset = "0x14A0A34", VA = "0x14A0A34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C77C", Offset = "0xB5C77C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001253")]
			[Address(RVA = "0x14A0A3C", Offset = "0x14A0A3C", VA = "0x14A0A3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C78C", Offset = "0xB5C78C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public CircularObjectBuffer<LEAP_TRACKING_EVENT> Frames
		{
			[Token(Token = "0x6001254")]
			[Address(RVA = "0x14A0A44", Offset = "0x14A0A44", VA = "0x14A0A44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C79C", Offset = "0xB5C79C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001255")]
			[Address(RVA = "0x14A0A4C", Offset = "0x14A0A4C", VA = "0x14A0A4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C7AC", Offset = "0xB5C7AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public SynchronizationContext EventContext
		{
			[Token(Token = "0x6001256")]
			[Address(RVA = "0x14A0A54", Offset = "0x14A0A54", VA = "0x14A0A54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C7BC", Offset = "0xB5C7BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001257")]
			[Address(RVA = "0x14A0A5C", Offset = "0x14A0A5C", VA = "0x14A0A5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C7CC", Offset = "0xB5C7CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public bool IsServiceConnected
		{
			[Token(Token = "0x6001282")]
			[Address(RVA = "0x14A0CA4", Offset = "0x14A0CA4", VA = "0x14A0CA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D7")]
		public DeviceList Devices
		{
			[Token(Token = "0x6001283")]
			[Address(RVA = "0x14A3DCC", Offset = "0x14A3DCC", VA = "0x14A3DCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D8")]
		public FailedDeviceList FailedDevices
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0x14A3E38", Offset = "0x14A3E38", VA = "0x14A3E38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000003")]
		public event EventHandler<LeapEventArgs> LeapInit
		{
			[Token(Token = "0x6001258")]
			[Address(RVA = "0x14A0A64", Offset = "0x14A0A64", VA = "0x14A0A64")]
			add
			{
			}
			[Token(Token = "0x6001259")]
			[Address(RVA = "0x14A0B4C", Offset = "0x14A0B4C", VA = "0x14A0B4C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event EventHandler<ConnectionEventArgs> LeapConnection
		{
			[Token(Token = "0x600125A")]
			[Address(RVA = "0x14A0BCC", Offset = "0x14A0BCC", VA = "0x14A0BCC")]
			add
			{
			}
			[Token(Token = "0x600125B")]
			[Address(RVA = "0x14A0DA4", Offset = "0x14A0DA4", VA = "0x14A0DA4")]
			remove
			{
			}
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x14A0650", Offset = "0x14A0650", VA = "0x14A0650")]
		static Connection()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x14A0824", Offset = "0x14A0824", VA = "0x14A0824")]
		public static Connection GetConnection(int connectionKey = 0)
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x14A0E24", Offset = "0x14A0E24", VA = "0x14A0E24")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x14A0EA0", Offset = "0x14A0EA0", VA = "0x14A0EA0", Slot = "4")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x14A0FC4", Offset = "0x14A0FC4", VA = "0x14A0FC4", Slot = "1")]
		~Connection()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x14A091C", Offset = "0x14A091C", VA = "0x14A091C")]
		private Connection(int connectionKey)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x14A1038", Offset = "0x14A1038", VA = "0x14A1038")]
		public void Start(bool multiDeviceAware = false)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x14A111C", Offset = "0x14A111C", VA = "0x14A111C")]
		public void Start(LEAP_CONNECTION_CONFIG config)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x14A0F2C", Offset = "0x14A0F2C", VA = "0x14A0F2C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x14A1500", Offset = "0x14A1500", VA = "0x14A1500")]
		private void processMessages()
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x14A23D0", Offset = "0x14A23D0", VA = "0x14A23D0")]
		private void handleTrackingMessage(ref LEAP_TRACKING_EVENT trackingMsg, uint deviceID)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x14A2F04", Offset = "0x14A2F04", VA = "0x14A2F04")]
		public ulong GetInterpolatedFrameSize(long time)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x14A2FA8", Offset = "0x14A2FA8", VA = "0x14A2FA8")]
		public void GetInterpolatedFrame(Frame toFill, long time)
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x14A312C", Offset = "0x14A312C", VA = "0x14A312C")]
		public void GetInterpolatedFrameFromTime(Frame toFill, long time, long sourceTime)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x14A32B8", Offset = "0x14A32B8", VA = "0x14A32B8")]
		public Frame GetInterpolatedFrame(long time)
		{
			return null;
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x14A3338", Offset = "0x14A3338", VA = "0x14A3338")]
		public void GetInterpolatedHeadPose(ref LEAP_HEAD_POSE_EVENT toFill, long time)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x14A33D4", Offset = "0x14A33D4", VA = "0x14A33D4")]
		public LEAP_HEAD_POSE_EVENT GetInterpolatedHeadPose(long time)
		{
			return default(LEAP_HEAD_POSE_EVENT);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x14A3428", Offset = "0x14A3428", VA = "0x14A3428")]
		public void GetInterpolatedEyePositions(ref LEAP_EYE_EVENT toFill, long time)
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x14A34C4", Offset = "0x14A34C4", VA = "0x14A34C4")]
		public void GetInterpolatedLeftRightTransform(long time, long sourceTime, long leftId, long rightId, out LeapTransform leftTransform, out LeapTransform rightTransform)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x14A1D74", Offset = "0x14A1D74", VA = "0x14A1D74")]
		private void handleConnection(ref LEAP_CONNECTION_EVENT connectionMsg)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x14A1E10", Offset = "0x14A1E10", VA = "0x14A1E10")]
		private void handleConnectionLost(ref LEAP_CONNECTION_LOST_EVENT connectionMsg)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x14A1EAC", Offset = "0x14A1EAC", VA = "0x14A1EAC")]
		private void handleDevice(ref LEAP_DEVICE_EVENT deviceMsg)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x14A25E8", Offset = "0x14A25E8", VA = "0x14A25E8")]
		private void handleLostDevice(ref LEAP_DEVICE_EVENT deviceMsg)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x14A2194", Offset = "0x14A2194", VA = "0x14A2194")]
		private void handleFailedDevice(ref LEAP_DEVICE_FAILURE_EVENT deviceMsg)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x14A2708", Offset = "0x14A2708", VA = "0x14A2708")]
		private void handleConfigChange(ref LEAP_CONFIG_CHANGE_EVENT configEvent)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x14A281C", Offset = "0x14A281C", VA = "0x14A281C")]
		private void handleConfigResponse(ref LEAP_CONNECTION_MESSAGE configMsg)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x14A24D8", Offset = "0x14A24D8", VA = "0x14A24D8")]
		private void reportLogMessage(ref LEAP_LOG_EVENT logMsg)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x14A38D8", Offset = "0x14A38D8", VA = "0x14A38D8")]
		private MessageSeverity publicSeverity(eLeapLogSeverity leapCSeverity)
		{
			return default(MessageSeverity);
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x14A2D3C", Offset = "0x14A2D3C", VA = "0x14A2D3C")]
		private void handlePointMappingChange(ref LEAP_POINT_MAPPING_CHANGE_EVENT pointMapping)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x14A2A78", Offset = "0x14A2A78", VA = "0x14A2A78")]
		private void handleDroppedFrame(ref LEAP_DROPPED_FRAME_EVENT droppedFrame)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x14A2E08", Offset = "0x14A2E08", VA = "0x14A2E08")]
		private void handleHeadPoseChange(ref LEAP_HEAD_POSE_EVENT headPose)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x14A38E8", Offset = "0x14A38E8", VA = "0x14A38E8")]
		private DistortionData createDistortionData(LEAP_IMAGE image, Leap.Image.CameraType camera)
		{
			return null;
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x14A2B34", Offset = "0x14A2B34", VA = "0x14A2B34")]
		private void handleImage(ref LEAP_IMAGE_EVENT imageMsg, uint deviceID)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x14A2304", Offset = "0x14A2304", VA = "0x14A2304")]
		private void handlePolicyChange(ref LEAP_POLICY_EVENT policyMsg)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x14A3A80", Offset = "0x14A3A80", VA = "0x14A3A80")]
		public void SetPolicy(Controller.PolicyFlag policy)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x14A3BAC", Offset = "0x14A3BAC", VA = "0x14A3BAC")]
		public void ClearPolicy(Controller.PolicyFlag policy)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x14A3B78", Offset = "0x14A3B78", VA = "0x14A3B78")]
		private eLeapPolicyFlag flagForPolicy(Controller.PolicyFlag singlePolicy)
		{
			return default(eLeapPolicyFlag);
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x14A3CA0", Offset = "0x14A3CA0", VA = "0x14A3CA0")]
		public bool IsPolicySet(Controller.PolicyFlag policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x14A3D04", Offset = "0x14A3D04", VA = "0x14A3D04")]
		public uint GetConfigValue(string config_key)
		{
			return default(uint);
		}

		[Token(Token = "0x6001281")]
		public uint SetConfigValue<T>(string config_key, T value) where T : IConvertible
		{
			return default(uint);
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x14A3EA4", Offset = "0x14A3EA4", VA = "0x14A3EA4")]
		public void SubscribeToDeviceEvents(Device device)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x14A3F44", Offset = "0x14A3F44", VA = "0x14A3F44")]
		public void UnsubscribeFromDeviceEvents(Device device)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x14A3FE4", Offset = "0x14A3FE4", VA = "0x14A3FE4")]
		public Vector PixelToRectilinear(Leap.Image.CameraType camera, Vector pixel)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x14A40C8", Offset = "0x14A40C8", VA = "0x14A40C8")]
		public Vector PixelToRectilinearEx(IntPtr deviceHandle, Leap.Image.CameraType camera, Leap.Image.CalibrationType calibType, Vector pixel)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x14A41CC", Offset = "0x14A41CC", VA = "0x14A41CC")]
		public Vector RectilinearToPixel(Leap.Image.CameraType camera, Vector ray)
		{
			return default(Vector);
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x14A42B0", Offset = "0x14A42B0", VA = "0x14A42B0")]
		public void TelemetryProfiling(ref LEAP_TELEMETRY_DATA telemetryData)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x14A4344", Offset = "0x14A4344", VA = "0x14A4344")]
		public void GetPointMapping(ref PointMapping pm)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x14A13D0", Offset = "0x14A13D0", VA = "0x14A13D0")]
		private void reportAbnormalResults(string context, eLeapRS result)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x14A46C8", Offset = "0x14A46C8", VA = "0x14A46C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C7DC", Offset = "0xB5C7DC")]
		private void <Start>b__63_0(object arg1, EventArgs arg2)
		{
		}
	}
	[Token(Token = "0x2000296")]
	public static class CopyFromLeapCExtensions
	{
		[Token(Token = "0x600128E")]
		[Address(RVA = "0x16160F8", Offset = "0x16160F8", VA = "0x16160F8")]
		public static Frame CopyFrom(this Frame frame, ref LEAP_TRACKING_EVENT trackingMsg)
		{
			return null;
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x1616234", Offset = "0x1616234", VA = "0x1616234")]
		public static Leap.Hand CopyFrom(this Leap.Hand hand, ref LEAP_HAND leapHand, long frameId)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x1616854", Offset = "0x1616854", VA = "0x1616854")]
		public static Leap.Finger CopyFrom(this Leap.Finger finger, LEAP_DIGIT leapBone, Leap.Finger.FingerType type, int handId, float timeVisible)
		{
			return null;
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x16165B0", Offset = "0x16165B0", VA = "0x16165B0")]
		public static Leap.Bone CopyFrom(this Leap.Bone bone, LEAP_BONE leapBone, Leap.Bone.BoneType type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000297")]
	public class ImageData
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LEAP_IMAGE_PROPERTIES _properties;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private object _object;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE78", Offset = "0xB4CE78")]
		private Leap.Image.CameraType <camera>k__BackingField;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE88", Offset = "0xB4CE88")]
		private uint <byteOffset>k__BackingField;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CE98", Offset = "0xB4CE98")]
		private ulong <DistortionMatrixKey>k__BackingField;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEA8", Offset = "0xB4CEA8")]
		private DistortionData <DistortionData>k__BackingField;

		[Token(Token = "0x170000D9")]
		public Leap.Image.CameraType camera
		{
			[Token(Token = "0x6001292")]
			[Address(RVA = "0x1616D98", Offset = "0x1616D98", VA = "0x1616D98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C82C", Offset = "0xB5C82C")]
			get
			{
				return default(Leap.Image.CameraType);
			}
			[Token(Token = "0x6001293")]
			[Address(RVA = "0x1616DA0", Offset = "0x1616DA0", VA = "0x1616DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C83C", Offset = "0xB5C83C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public eLeapImageType type
		{
			[Token(Token = "0x6001294")]
			[Address(RVA = "0x1616DA8", Offset = "0x1616DA8", VA = "0x1616DA8")]
			get
			{
				return default(eLeapImageType);
			}
		}

		[Token(Token = "0x170000DB")]
		public eLeapImageFormat format
		{
			[Token(Token = "0x6001295")]
			[Address(RVA = "0x1616DB0", Offset = "0x1616DB0", VA = "0x1616DB0")]
			get
			{
				return default(eLeapImageFormat);
			}
		}

		[Token(Token = "0x170000DC")]
		public uint bpp
		{
			[Token(Token = "0x6001296")]
			[Address(RVA = "0x1616DB8", Offset = "0x1616DB8", VA = "0x1616DB8")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170000DD")]
		public uint width
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0x1616DC0", Offset = "0x1616DC0", VA = "0x1616DC0")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170000DE")]
		public uint height
		{
			[Token(Token = "0x6001298")]
			[Address(RVA = "0x1616DC8", Offset = "0x1616DC8", VA = "0x1616DC8")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170000DF")]
		public float RayScaleX
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x1616DD0", Offset = "0x1616DD0", VA = "0x1616DD0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E0")]
		public float RayScaleY
		{
			[Token(Token = "0x600129A")]
			[Address(RVA = "0x1616DD8", Offset = "0x1616DD8", VA = "0x1616DD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E1")]
		public float RayOffsetX
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0x1616DE0", Offset = "0x1616DE0", VA = "0x1616DE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E2")]
		public float RayOffsetY
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x1616DE8", Offset = "0x1616DE8", VA = "0x1616DE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E3")]
		public byte[] AsByteArray
		{
			[Token(Token = "0x600129D")]
			[Address(RVA = "0x1616DF0", Offset = "0x1616DF0", VA = "0x1616DF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		public float[] AsFloatArray
		{
			[Token(Token = "0x600129E")]
			[Address(RVA = "0x1616E40", Offset = "0x1616E40", VA = "0x1616E40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public uint byteOffset
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x1616E90", Offset = "0x1616E90", VA = "0x1616E90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C84C", Offset = "0xB5C84C")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0x1616E98", Offset = "0x1616E98", VA = "0x1616E98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C85C", Offset = "0xB5C85C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public int DistortionSize
		{
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0x1616EA0", Offset = "0x1616EA0", VA = "0x1616EA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E7")]
		public ulong DistortionMatrixKey
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0x1616F08", Offset = "0x1616F08", VA = "0x1616F08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C86C", Offset = "0xB5C86C")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0x1616F10", Offset = "0x1616F10", VA = "0x1616F10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C87C", Offset = "0xB5C87C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public DistortionData DistortionData
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x1616F18", Offset = "0x1616F18", VA = "0x1616F18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C88C", Offset = "0xB5C88C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0x1616F20", Offset = "0x1616F20", VA = "0x1616F20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5C89C", Offset = "0xB5C89C")]
			protected set
			{
			}
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x1616F28", Offset = "0x1616F28", VA = "0x1616F28")]
		public ImageData(Leap.Image.CameraType camera, LEAP_IMAGE image, DistortionData distortionData)
		{
		}
	}
	[Token(Token = "0x2000298")]
	public enum eLeapConnectionFlag : uint
	{
		[Token(Token = "0x4001180")]
		eLeapConnectionFlag_MultipleDevicesAware = 1u
	}
	[Token(Token = "0x2000299")]
	public enum eLeapConnectionStatus : uint
	{
		[Token(Token = "0x4001182")]
		NotConnected = 0u,
		[Token(Token = "0x4001183")]
		Connected = 1u,
		[Token(Token = "0x4001184")]
		HandshakeIncomplete = 2u,
		[Token(Token = "0x4001185")]
		NotRunning = 3875733508u
	}
	[Token(Token = "0x200029A")]
	public enum eLeapDeviceCaps : uint
	{
		[Token(Token = "0x4001187")]
		eLeapDeviceCaps_Color = 1u
	}
	[Token(Token = "0x200029B")]
	public enum eLeapDeviceType : uint
	{
		[Token(Token = "0x4001189")]
		eLeapDeviceType_Peripheral = 3u,
		[Token(Token = "0x400118A")]
		eLeapDeviceType_Dragonfly = 4354u,
		[Token(Token = "0x400118B")]
		eLeapDeviceType_Nightcrawler = 4609u,
		[Token(Token = "0x400118C")]
		eLeapDevicePID_Rigel = 4610u
	}
	[Token(Token = "0x200029C")]
	public enum eLeapServiceDisposition : uint
	{
		[Token(Token = "0x400118E")]
		eLeapServiceState_LowFpsDetected = 1u,
		[Token(Token = "0x400118F")]
		eLeapServiceState_PoorPerformancePause
	}
	[Token(Token = "0x200029D")]
	public enum eDistortionMatrixType
	{
		[Token(Token = "0x4001191")]
		eDistortionMatrixType_64x64
	}
	[Token(Token = "0x200029E")]
	public enum eLeapPolicyFlag : uint
	{
		[Token(Token = "0x4001193")]
		eLeapPolicyFlag_BackgroundFrames = 1u,
		[Token(Token = "0x4001194")]
		eLeapPolicyFlag_Images = 2u,
		[Token(Token = "0x4001195")]
		eLeapPolicyFlag_OptimizeHMD = 4u,
		[Token(Token = "0x4001196")]
		eLeapPolicyFlag_AllowPauseResume = 8u,
		[Token(Token = "0x4001197")]
		eLeapPolicyFlag_MapPoints = 0x80u
	}
	[Token(Token = "0x200029F")]
	public enum eLeapDeviceStatus : uint
	{
		[Token(Token = "0x4001199")]
		eLeapDeviceStatus_Streaming = 1u,
		[Token(Token = "0x400119A")]
		eLeapDeviceStatus_Paused = 2u,
		[Token(Token = "0x400119B")]
		eLeapDeviceStatus_Robust = 4u,
		[Token(Token = "0x400119C")]
		eLeapDeviceStatus_Smudged = 8u,
		[Token(Token = "0x400119D")]
		eLeapDeviceStatus_LowResource = 16u,
		[Token(Token = "0x400119E")]
		eLeapDeviceStatus_UnknownFailure = 3892379648u,
		[Token(Token = "0x400119F")]
		eLeapDeviceStatus_BadCalibration = 3892379649u,
		[Token(Token = "0x40011A0")]
		eLeapDeviceStatus_BadFirmware = 3892379650u,
		[Token(Token = "0x40011A1")]
		eLeapDeviceStatus_BadTransport = 3892379651u,
		[Token(Token = "0x40011A2")]
		eLeapDeviceStatus_BadControl = 3892379652u
	}
	[Token(Token = "0x20002A0")]
	public enum eLeapImageType
	{
		[Token(Token = "0x40011A4")]
		eLeapImageType_Unknown,
		[Token(Token = "0x40011A5")]
		eLeapImageType_Default,
		[Token(Token = "0x40011A6")]
		eLeapImageType_Raw
	}
	[Token(Token = "0x20002A1")]
	public enum eLeapImageFormat : uint
	{
		[Token(Token = "0x40011A8")]
		eLeapImageFormat_UNKNOWN = 0u,
		[Token(Token = "0x40011A9")]
		eLeapImageType_IR = 3240521u,
		[Token(Token = "0x40011AA")]
		eLeapImageType_RGBIr_Bayer = 1229083207u
	}
	[Token(Token = "0x20002A2")]
	public enum eLeapPerspectiveType
	{
		[Token(Token = "0x40011AC")]
		eLeapPerspectiveType_invalid,
		[Token(Token = "0x40011AD")]
		eLeapPerspectiveType_stereo_left,
		[Token(Token = "0x40011AE")]
		eLeapPerspectiveType_stereo_right,
		[Token(Token = "0x40011AF")]
		eLeapPerspectiveType_mono
	}
	[Token(Token = "0x20002A3")]
	public enum eLeapCameraCalibrationType
	{
		[Token(Token = "0x40011B1")]
		eLeapCameraCalibrationType_infrared,
		[Token(Token = "0x40011B2")]
		eLeapCameraCalibrationType_visual
	}
	[Token(Token = "0x20002A4")]
	public enum eLeapHandType
	{
		[Token(Token = "0x40011B4")]
		eLeapHandType_Left,
		[Token(Token = "0x40011B5")]
		eLeapHandType_Right
	}
	[Token(Token = "0x20002A5")]
	public enum eLeapLogSeverity
	{
		[Token(Token = "0x40011B7")]
		eLeapLogSeverity_Unknown,
		[Token(Token = "0x40011B8")]
		eLeapLogSeverity_Critical,
		[Token(Token = "0x40011B9")]
		eLeapLogSeverity_Warning,
		[Token(Token = "0x40011BA")]
		eLeapLogSeverity_Information
	}
	[Token(Token = "0x20002A6")]
	public enum eLeapValueType
	{
		[Token(Token = "0x40011BC")]
		eLeapValueType_Unknown,
		[Token(Token = "0x40011BD")]
		eLeapValueType_Boolean,
		[Token(Token = "0x40011BE")]
		eLeapValueType_Int32,
		[Token(Token = "0x40011BF")]
		eLeapValueType_Float,
		[Token(Token = "0x40011C0")]
		eLeapValueType_String
	}
	[Token(Token = "0x20002A7")]
	public enum eLeapAllocatorType : uint
	{
		[Token(Token = "0x40011C2")]
		eLeapAllocatorType_Int8 = 0u,
		[Token(Token = "0x40011C3")]
		eLeapAllocatorType_Uint8 = 1u,
		[Token(Token = "0x40011C4")]
		eLeapAllocatorType_Int16 = 2u,
		[Token(Token = "0x40011C5")]
		eLeapAllocatorType_UInt16 = 3u,
		[Token(Token = "0x40011C6")]
		eLeapAllocatorType_Int32 = 4u,
		[Token(Token = "0x40011C7")]
		eLeapAllocatorType_UInt32 = 5u,
		[Token(Token = "0x40011C8")]
		eLeapAllocatorType_Float = 6u,
		[Token(Token = "0x40011C9")]
		eLeapAllocatorType_Int64 = 8u,
		[Token(Token = "0x40011CA")]
		eLeapAllocatorType_UInt64 = 9u,
		[Token(Token = "0x40011CB")]
		eLeapAllocatorType_Double = 10u
	}
	[Token(Token = "0x20002A8")]
	public enum eLeapRS : uint
	{
		[Token(Token = "0x40011CD")]
		eLeapRS_Success = 0u,
		[Token(Token = "0x40011CE")]
		eLeapRS_UnknownError = 3791716352u,
		[Token(Token = "0x40011CF")]
		eLeapRS_InvalidArgument = 3791716353u,
		[Token(Token = "0x40011D0")]
		eLeapRS_InsufficientResources = 3791716354u,
		[Token(Token = "0x40011D1")]
		eLeapRS_InsufficientBuffer = 3791716355u,
		[Token(Token = "0x40011D2")]
		eLeapRS_Timeout = 3791716356u,
		[Token(Token = "0x40011D3")]
		eLeapRS_NotConnected = 3791716357u,
		[Token(Token = "0x40011D4")]
		eLeapRS_HandshakeIncomplete = 3791716358u,
		[Token(Token = "0x40011D5")]
		eLeapRS_BufferSizeOverflow = 3791716359u,
		[Token(Token = "0x40011D6")]
		eLeapRS_ProtocolError = 3791716360u,
		[Token(Token = "0x40011D7")]
		eLeapRS_InvalidClientID = 3791716361u,
		[Token(Token = "0x40011D8")]
		eLeapRS_UnexpectedClosed = 3791716362u,
		[Token(Token = "0x40011D9")]
		eLeapRS_UnknownImageFrameRequest = 3791716363u,
		[Token(Token = "0x40011DA")]
		eLeapRS_UnknownTrackingFrameID = 3791716364u,
		[Token(Token = "0x40011DB")]
		eLeapRS_RoutineIsNotSeer = 3791716365u,
		[Token(Token = "0x40011DC")]
		eLeapRS_TimestampTooEarly = 3791716366u,
		[Token(Token = "0x40011DD")]
		eLeapRS_ConcurrentPoll = 3791716367u,
		[Token(Token = "0x40011DE")]
		eLeapRS_NotAvailable = 3875602434u,
		[Token(Token = "0x40011DF")]
		eLeapRS_NotStreaming = 3875602436u,
		[Token(Token = "0x40011E0")]
		eLeapRS_CannotOpenDevice = 3875602437u
	}
	[Token(Token = "0x20002A9")]
	public enum eLeapEventType
	{
		[Token(Token = "0x40011E2")]
		eLeapEventType_None = 0,
		[Token(Token = "0x40011E3")]
		eLeapEventType_Connection = 1,
		[Token(Token = "0x40011E4")]
		eLeapEventType_ConnectionLost = 2,
		[Token(Token = "0x40011E5")]
		eLeapEventType_Device = 3,
		[Token(Token = "0x40011E6")]
		eLeapEventType_DeviceFailure = 4,
		[Token(Token = "0x40011E7")]
		eLeapEventType_Policy = 5,
		[Token(Token = "0x40011E8")]
		eLeapEventType_Tracking = 256,
		[Token(Token = "0x40011E9")]
		eLeapEventType_ImageRequestError = 257,
		[Token(Token = "0x40011EA")]
		eLeapEventType_ImageComplete = 258,
		[Token(Token = "0x40011EB")]
		eLeapEventType_LogEvent = 259,
		[Token(Token = "0x40011EC")]
		eLeapEventType_DeviceLost = 260,
		[Token(Token = "0x40011ED")]
		eLeapEventType_ConfigResponse = 261,
		[Token(Token = "0x40011EE")]
		eLeapEventType_ConfigChange = 262,
		[Token(Token = "0x40011EF")]
		eLeapEventType_DeviceStatusChange = 263,
		[Token(Token = "0x40011F0")]
		eLeapEventType_DroppedFrame = 264,
		[Token(Token = "0x40011F1")]
		eLeapEventType_Image = 265,
		[Token(Token = "0x40011F2")]
		eLeapEventType_PointMappingChange = 266,
		[Token(Token = "0x40011F3")]
		eLeapEventType_LogEvents = 267,
		[Token(Token = "0x40011F4")]
		eLeapEventType_HeadPose = 268
	}
	[Token(Token = "0x20002AA")]
	public enum eLeapDeviceFlag : uint
	{
		[Token(Token = "0x40011F6")]
		eLeapDeviceFlag_Stream = 1u
	}
	[Token(Token = "0x20002AB")]
	public enum eLeapDroppedFrameType
	{
		[Token(Token = "0x40011F8")]
		eLeapDroppedFrameType_PreprocessingQueue,
		[Token(Token = "0x40011F9")]
		eLeapDroppedFrameType_TrackingQueue,
		[Token(Token = "0x40011FA")]
		eLeapDroppedFrameType_Other
	}
	[Token(Token = "0x20002AC")]
	public struct LEAP_CONNECTION_CONFIG
	{
		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint flags;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr server_namespace;
	}
	[Token(Token = "0x20002AD")]
	public struct LEAP_CONNECTION_INFO
	{
		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public eLeapConnectionStatus status;
	}
	[Token(Token = "0x20002AE")]
	public struct LEAP_CONNECTION_EVENT
	{
		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapServiceDisposition flags;
	}
	[Token(Token = "0x20002AF")]
	public struct LEAP_DEVICE_REF
	{
		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr connectionHandle;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint id;
	}
	[Token(Token = "0x20002B0")]
	public struct LEAP_CONNECTION_LOST_EVENT
	{
		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint flags;
	}
	[Token(Token = "0x20002B1")]
	public struct LEAP_ALLOCATOR
	{
		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Allocate allocate;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Deallocate deallocate;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr state;
	}
	[Token(Token = "0x20002B2")]
	public struct LEAP_DEVICE_EVENT
	{
		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint flags;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public LEAP_DEVICE_REF device;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public eLeapDeviceStatus status;
	}
	[Token(Token = "0x20002B3")]
	public struct LEAP_DEVICE_FAILURE_EVENT
	{
		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapDeviceStatus status;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr hDevice;
	}
	[Token(Token = "0x20002B4")]
	public struct LEAP_TRACKING_EVENT
	{
		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_FRAME_HEADER info;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long tracking_id;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint nHands;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntPtr pHands;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float framerate;
	}
	[Token(Token = "0x20002B5")]
	public struct LEAP_DROPPED_FRAME_EVENT
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long frame_id;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public eLeapDroppedFrameType reason;
	}
	[Token(Token = "0x20002B6")]
	public struct LEAP_POINT_MAPPING_CHANGE_EVENT
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long frame_id;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long timestamp;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nPoints;
	}
	[Token(Token = "0x20002B7")]
	public struct LEAP_POINT_MAPPING
	{
		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long frame_id;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long timestamp;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nPoints;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr points;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IntPtr ids;
	}
	[Token(Token = "0x20002B8")]
	public struct LEAP_HEAD_POSE_EVENT
	{
		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long timestamp;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LEAP_VECTOR head_position;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LEAP_QUATERNION head_orientation;
	}
	[Token(Token = "0x20002B9")]
	public struct LEAP_EYE_EVENT
	{
		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long frame_id;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long timestamp;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LEAP_VECTOR left_eye_position;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LEAP_VECTOR right_eye_position;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float left_eye_estimated_error;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float right_eye_estimated_error;
	}
	[Token(Token = "0x20002BA")]
	public struct LEAP_CONNECTION_MESSAGE
	{
		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public eLeapEventType type;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr eventStructPtr;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint deviceID;
	}
	[Token(Token = "0x20002BB")]
	public struct LEAP_DISCONNECTION_EVENT
	{
		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint reserved;
	}
	[Token(Token = "0x20002BC")]
	public struct LEAP_DEVICE_INFO
	{
		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public eLeapDeviceStatus status;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public eLeapDeviceCaps caps;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public eLeapDeviceType type;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint baseline;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint serial_length;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr serial;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float h_fov;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float v_fov;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint range;
	}
	[Token(Token = "0x20002BD")]
	public struct LEAP_FRAME_HEADER
	{
		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr reserved;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long frame_id;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long timestamp;
	}
	[Token(Token = "0x20002BE")]
	public struct LEAP_IMAGE_PROPERTIES
	{
		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapImageType type;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public eLeapImageFormat format;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint bpp;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint width;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint height;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float x_scale;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float y_scale;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float x_offset;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float y_offset;
	}
	[Token(Token = "0x20002BF")]
	public struct LEAP_IMAGE
	{
		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_IMAGE_PROPERTIES properties;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ulong matrix_version;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public IntPtr distortionMatrix;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public IntPtr data;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint offset;
	}
	[Token(Token = "0x20002C0")]
	public struct LEAP_IMAGE_EVENT
	{
		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_FRAME_HEADER info;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LEAP_IMAGE leftImage;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LEAP_IMAGE rightImage;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IntPtr calib;
	}
	[Token(Token = "0x20002C1")]
	public struct LEAP_VECTOR
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x16167E0", Offset = "0x16167E0", VA = "0x16167E0")]
		public Vector ToLeapVector()
		{
			return default(Vector);
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x161711C", Offset = "0x161711C", VA = "0x161711C")]
		public LEAP_VECTOR(Vector leap)
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public struct LEAP_QUATERNION
	{
		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x161681C", Offset = "0x161681C", VA = "0x161681C")]
		public LeapQuaternion ToLeapQuaternion()
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x1617110", Offset = "0x1617110", VA = "0x1617110")]
		public LEAP_QUATERNION(LeapQuaternion q)
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public struct LEAP_MATRIX_3x3
	{
		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_VECTOR m1;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LEAP_VECTOR m2;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LEAP_VECTOR m3;
	}
	[Token(Token = "0x20002C4")]
	public struct LEAP_BONE
	{
		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_VECTOR prev_joint;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LEAP_VECTOR next_joint;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float width;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LEAP_QUATERNION rotation;
	}
	[Token(Token = "0x20002C5")]
	public struct LEAP_DIGIT
	{
		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int finger_id;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public LEAP_BONE metacarpal;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LEAP_BONE proximal;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public LEAP_BONE intermediate;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public LEAP_BONE distal;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int is_extended;
	}
	[Token(Token = "0x20002C6")]
	public struct LEAP_PALM
	{
		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_VECTOR position;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LEAP_VECTOR stabilized_position;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LEAP_VECTOR velocity;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LEAP_VECTOR normal;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float width;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LEAP_VECTOR direction;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LEAP_QUATERNION orientation;
	}
	[Token(Token = "0x20002C7")]
	public struct LEAP_HAND
	{
		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint id;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint flags;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public eLeapHandType type;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float confidence;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong visible_time;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float pinch_distance;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grab_angle;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float pinch_strength;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grab_strength;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LEAP_PALM palm;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LEAP_DIGIT thumb;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public LEAP_DIGIT index;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public LEAP_DIGIT middle;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public LEAP_DIGIT ring;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public LEAP_DIGIT pinky;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public LEAP_BONE arm;
	}
	[Token(Token = "0x20002C8")]
	public struct LEAP_TIP
	{
		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LEAP_VECTOR position;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;
	}
	[Token(Token = "0x20002C9")]
	public struct LEAP_LOG_EVENT
	{
		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapLogSeverity severity;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public long timestamp;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr message;
	}
	[Token(Token = "0x20002CA")]
	public struct LEAP_POLICY_EVENT
	{
		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint reserved;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint current_policy;
	}
	[StructLayout(2)]
	[Token(Token = "0x20002CB")]
	public struct LEAP_VARIANT_VALUE_TYPE
	{
		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapValueType type;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int boolValue;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int intValue;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float floatValue;
	}
	[Token(Token = "0x20002CC")]
	public struct LEAP_VARIANT_REF_TYPE
	{
		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public eLeapValueType type;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string stringValue;
	}
	[Token(Token = "0x20002CD")]
	public struct LEAP_CONFIG_RESPONSE_EVENT
	{
		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint requestId;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public LEAP_VARIANT_VALUE_TYPE value;
	}
	[Token(Token = "0x20002CE")]
	public struct LEAP_CONFIG_RESPONSE_EVENT_WITH_REF_TYPE
	{
		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint requestId;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LEAP_VARIANT_REF_TYPE value;
	}
	[Token(Token = "0x20002CF")]
	public struct LEAP_CONFIG_CHANGE_EVENT
	{
		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint requestId;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool status;
	}
	[Token(Token = "0x20002D0")]
	public struct LEAP_TELEMETRY_DATA
	{
		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint threadId;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong startTime;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong endTime;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint zoneDepth;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fileName;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint lineNumber;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string zoneName;
	}
	[Token(Token = "0x20002D1")]
	public class LeapC
	{
		[Token(Token = "0x20005C2")]
		public struct LEAP_RECORDING_PARAMETERS
		{
			[Token(Token = "0x4001F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint mode;
		}

		[Token(Token = "0x20005C3")]
		public struct LEAP_RECORDING_STATUS
		{
			[Token(Token = "0x4001F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint mode;
		}

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DistortionSize;

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x1617128", Offset = "0x1617128", VA = "0x1617128")]
		private LeapC()
		{
		}

		[PreserveSig]
		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x1617130", Offset = "0x1617130", VA = "0x1617130")]
		public static extern long GetNow();

		[PreserveSig]
		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x16171A4", Offset = "0x16171A4", VA = "0x16171A4")]
		public static extern eLeapRS CreateClockRebaser(out IntPtr phClockRebaser);

		[PreserveSig]
		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x1617224", Offset = "0x1617224", VA = "0x1617224")]
		public static extern eLeapRS DestroyClockRebaser(IntPtr hClockRebaser);

		[PreserveSig]
		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x16172A4", Offset = "0x16172A4", VA = "0x16172A4")]
		public static extern eLeapRS UpdateRebase(IntPtr hClockRebaser, long userClock, long leapClock);

		[PreserveSig]
		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x161733C", Offset = "0x161733C", VA = "0x161733C")]
		public static extern eLeapRS RebaseClock(IntPtr hClockRebaser, long userClock, out long leapClock);

		[PreserveSig]
		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x16173D4", Offset = "0x16173D4", VA = "0x16173D4")]
		public static extern eLeapRS CreateConnection(ref LEAP_CONNECTION_CONFIG pConfig, out IntPtr pConnection);

		[PreserveSig]
		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x1617464", Offset = "0x1617464", VA = "0x1617464")]
		private static extern eLeapRS CreateConnection(IntPtr nulled, out IntPtr pConnection);

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x16174F4", Offset = "0x16174F4", VA = "0x16174F4")]
		public static eLeapRS CreateConnection(out IntPtr pConnection)
		{
			return default(eLeapRS);
		}

		[PreserveSig]
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x161755C", Offset = "0x161755C", VA = "0x161755C")]
		public static extern eLeapRS GetConnectionInfo(IntPtr hConnection, ref LEAP_CONNECTION_INFO pInfo);

		[PreserveSig]
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x16175EC", Offset = "0x16175EC", VA = "0x16175EC")]
		public static extern eLeapRS OpenConnection(IntPtr hConnection);

		[PreserveSig]
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x161766C", Offset = "0x161766C", VA = "0x161766C")]
		public static extern eLeapRS SetAllocator(IntPtr hConnection, ref LEAP_ALLOCATOR pAllocator);

		[PreserveSig]
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x1617740", Offset = "0x1617740", VA = "0x1617740")]
		public static extern eLeapRS GetDeviceList(IntPtr hConnection, [In][Out] LEAP_DEVICE_REF[] pArray, out uint pnArray);

		[PreserveSig]
		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x16177E0", Offset = "0x16177E0", VA = "0x16177E0")]
		private static extern eLeapRS GetDeviceList(IntPtr hConnection, [In][Out] IntPtr pArray, out uint pnArray);

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x1617878", Offset = "0x1617878", VA = "0x1617878")]
		public static eLeapRS GetDeviceCount(IntPtr hConnection, out uint deviceCount)
		{
			return default(eLeapRS);
		}

		[PreserveSig]
		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x16178F0", Offset = "0x16178F0", VA = "0x16178F0")]
		public static extern eLeapRS OpenDevice(LEAP_DEVICE_REF rDevice, out IntPtr pDevice);

		[PreserveSig]
		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x1617988", Offset = "0x1617988", VA = "0x1617988")]
		public static extern eLeapRS LeapSubscribeEvents(IntPtr hConnection, IntPtr hDevice);

		[PreserveSig]
		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x1617A18", Offset = "0x1617A18", VA = "0x1617A18")]
		public static extern eLeapRS LeapUnsubscribeEvents(IntPtr hConnection, IntPtr hDevice);

		[PreserveSig]
		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x1617AA8", Offset = "0x1617AA8", VA = "0x1617AA8")]
		public static extern eLeapRS GetDeviceInfo(IntPtr hDevice, ref LEAP_DEVICE_INFO info);

		[PreserveSig]
		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x1617B30", Offset = "0x1617B30", VA = "0x1617B30")]
		public static extern eLeapRS SetPolicyFlags(IntPtr hConnection, ulong set, ulong clear);

		[PreserveSig]
		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x1617BC8", Offset = "0x1617BC8", VA = "0x1617BC8")]
		public static extern eLeapRS SetDeviceFlags(IntPtr hDevice, ulong set, ulong clear, out ulong prior);

		[PreserveSig]
		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x1617C70", Offset = "0x1617C70", VA = "0x1617C70")]
		public static extern eLeapRS PollConnection(IntPtr hConnection, uint timeout, ref LEAP_CONNECTION_MESSAGE msg);

		[PreserveSig]
		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x1617D08", Offset = "0x1617D08", VA = "0x1617D08")]
		public static extern eLeapRS GetFrameSize(IntPtr hConnection, long timestamp, out ulong pncbEvent);

		[PreserveSig]
		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x1617DA0", Offset = "0x1617DA0", VA = "0x1617DA0")]
		public static extern eLeapRS InterpolateFrame(IntPtr hConnection, long timestamp, IntPtr pEvent, ulong ncbEvent);

		[PreserveSig]
		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x1617E48", Offset = "0x1617E48", VA = "0x1617E48")]
		public static extern eLeapRS InterpolateFrameFromTime(IntPtr hConnection, long timestamp, long sourceTimestamp, IntPtr pEvent, ulong ncbEvent);

		[PreserveSig]
		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x1617EF8", Offset = "0x1617EF8", VA = "0x1617EF8")]
		public static extern eLeapRS InterpolateHeadPose(IntPtr hConnection, long timestamp, ref LEAP_HEAD_POSE_EVENT headPose);

		[PreserveSig]
		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x1617F90", Offset = "0x1617F90", VA = "0x1617F90")]
		public static extern eLeapRS InterpolateEyePositions(IntPtr hConnection, long timestamp, ref LEAP_EYE_EVENT eyes);

		[PreserveSig]
		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x1618028", Offset = "0x1618028", VA = "0x1618028")]
		public static extern LEAP_VECTOR LeapPixelToRectilinear(IntPtr hConnection, eLeapPerspectiveType camera, LEAP_VECTOR pixel);

		[PreserveSig]
		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x16180E0", Offset = "0x16180E0", VA = "0x16180E0")]
		public static extern LEAP_VECTOR LeapPixelToRectilinearEx(IntPtr hConnection, IntPtr hDevice, eLeapPerspectiveType camera, eLeapCameraCalibrationType calibrationType, LEAP_VECTOR pixel);

		[PreserveSig]
		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x16181B0", Offset = "0x16181B0", VA = "0x16181B0")]
		public static extern LEAP_VECTOR LeapRectilinearToPixel(IntPtr hConnection, eLeapPerspectiveType camera, LEAP_VECTOR rectilinear);

		[PreserveSig]
		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x1618268", Offset = "0x1618268", VA = "0x1618268")]
		public static extern LEAP_VECTOR LeapRectilinearToPixelEx(IntPtr hConnection, IntPtr hDevice, eLeapPerspectiveType camera, eLeapCameraCalibrationType calibrationType, LEAP_VECTOR rectilinear);

		[PreserveSig]
		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x1618338", Offset = "0x1618338", VA = "0x1618338")]
		public static extern void CloseDevice(IntPtr pDevice);

		[PreserveSig]
		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x16183B8", Offset = "0x16183B8", VA = "0x16183B8")]
		public static extern eLeapRS CloseConnection(IntPtr hConnection);

		[PreserveSig]
		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x1618438", Offset = "0x1618438", VA = "0x1618438")]
		public static extern void DestroyConnection(IntPtr connection);

		[PreserveSig]
		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x16184B8", Offset = "0x16184B8", VA = "0x16184B8")]
		private static extern eLeapRS SaveConfigValue(IntPtr hConnection, string key, IntPtr value, out uint requestId);

		[PreserveSig]
		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x161857C", Offset = "0x161857C", VA = "0x161857C")]
		public static extern eLeapRS RequestConfigValue(IntPtr hConnection, string name, out uint request_id);

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1618630", Offset = "0x1618630", VA = "0x1618630")]
		public static eLeapRS SaveConfigValue(IntPtr hConnection, string key, bool value, out uint requestId)
		{
			return default(eLeapRS);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1618844", Offset = "0x1618844", VA = "0x1618844")]
		public static eLeapRS SaveConfigValue(IntPtr hConnection, string key, int value, out uint requestId)
		{
			return default(eLeapRS);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x16188D8", Offset = "0x16188D8", VA = "0x16188D8")]
		public static eLeapRS SaveConfigValue(IntPtr hConnection, string key, float value, out uint requestId)
		{
			return default(eLeapRS);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x1618970", Offset = "0x1618970", VA = "0x1618970")]
		public static eLeapRS SaveConfigValue(IntPtr hConnection, string key, string value, out uint requestId)
		{
			return default(eLeapRS);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x16186D4", Offset = "0x16186D4", VA = "0x16186D4")]
		private static eLeapRS SaveConfigWithValueType(IntPtr hConnection, string key, LEAP_VARIANT_VALUE_TYPE valueStruct, out uint requestId)
		{
			return default(eLeapRS);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x1618A00", Offset = "0x1618A00", VA = "0x1618A00")]
		private static eLeapRS SaveConfigWithRefType(IntPtr hConnection, string key, LEAP_VARIANT_REF_TYPE valueStruct, out uint requestId)
		{
			return default(eLeapRS);
		}

		[PreserveSig]
		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x1618B84", Offset = "0x1618B84", VA = "0x1618B84")]
		public static extern eLeapRS GetPointMappingSize(IntPtr hConnection, ref ulong pSize);

		[PreserveSig]
		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x1618C14", Offset = "0x1618C14", VA = "0x1618C14")]
		public static extern eLeapRS GetPointMapping(IntPtr hConnection, IntPtr pointMapping, ref ulong pSize);

		[PreserveSig]
		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x1618CAC", Offset = "0x1618CAC", VA = "0x1618CAC")]
		public static extern eLeapRS RecordingOpen(ref IntPtr ppRecording, string userPath, LEAP_RECORDING_PARAMETERS parameters);

		[PreserveSig]
		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x1618D60", Offset = "0x1618D60", VA = "0x1618D60")]
		public static extern eLeapRS RecordingClose(ref IntPtr ppRecording);

		[PreserveSig]
		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x1618DE0", Offset = "0x1618DE0", VA = "0x1618DE0")]
		public static extern eLeapRS LeapRecordingGetStatus(IntPtr pRecording, ref LEAP_RECORDING_STATUS status);

		[PreserveSig]
		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x1618E70", Offset = "0x1618E70", VA = "0x1618E70")]
		public static extern eLeapRS RecordingReadSize(IntPtr pRecording, ref ulong pncbEvent);

		[PreserveSig]
		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x1618F00", Offset = "0x1618F00", VA = "0x1618F00")]
		public static extern eLeapRS RecordingRead(IntPtr pRecording, ref LEAP_TRACKING_EVENT pEvent, ulong ncbEvent);

		[PreserveSig]
		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x1618F98", Offset = "0x1618F98", VA = "0x1618F98")]
		public static extern eLeapRS RecordingWrite(IntPtr pRecording, ref LEAP_TRACKING_EVENT pEvent, ref ulong pnBytesWritten);

		[PreserveSig]
		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x1619030", Offset = "0x1619030", VA = "0x1619030")]
		public static extern eLeapRS LeapTelemetryProfiling(IntPtr hConnection, ref LEAP_TELEMETRY_DATA telemetryData);

		[PreserveSig]
		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x161917C", Offset = "0x161917C", VA = "0x161917C")]
		public static extern ulong TelemetryGetNow();
	}
	[Token(Token = "0x20002D2")]
	public static class Logger
	{
		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x1619244", Offset = "0x1619244", VA = "0x1619244")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x16192AC", Offset = "0x16192AC", VA = "0x16192AC")]
		public static void LogStruct(object thisObject, string title = "")
		{
		}
	}
	[Token(Token = "0x20002D3")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB45428", Offset = "0xB45428")]
	public delegate IntPtr Allocate(uint size, eLeapAllocatorType typeHint, IntPtr state);
	[Token(Token = "0x20002D4")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xB4543C", Offset = "0xB4543C")]
	public delegate void Deallocate(IntPtr buffer, IntPtr state);
	[Token(Token = "0x20002D5")]
	public static class MemoryManager
	{
		[Token(Token = "0x20005C4")]
		private struct PoolKey : IEquatable<PoolKey>
		{
			[Token(Token = "0x4001F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public eLeapAllocatorType type;

			[Token(Token = "0x4001F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint size;

			[Token(Token = "0x60027D3")]
			[Address(RVA = "0x1619B40", Offset = "0x1619B40", VA = "0x1619B40", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60027D4")]
			[Address(RVA = "0x1619B4C", Offset = "0x1619B4C", VA = "0x1619B4C", Slot = "4")]
			public bool Equals(PoolKey other)
			{
				return default(bool);
			}

			[Token(Token = "0x60027D5")]
			[Address(RVA = "0x1619B74", Offset = "0x1619B74", VA = "0x1619B74", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20005C5")]
		private struct ActiveMemoryInfo
		{
			[Token(Token = "0x4001F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GCHandle handle;

			[Token(Token = "0x4001F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public PoolKey key;
		}

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool EnablePooling;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static uint MinPoolSize;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<IntPtr, ActiveMemoryInfo> _activeMemory;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<PoolKey, Queue<object>> _pooledMemory;

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x1619558", Offset = "0x1619558", VA = "0x1619558")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0xB5C8AC", Offset = "0xB5C8AC")]
		public static IntPtr Pin(uint size, eLeapAllocatorType typeHint, IntPtr state)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x1619894", Offset = "0x1619894", VA = "0x1619894")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0xB5C910", Offset = "0xB5C910")]
		public static void Unpin(IntPtr ptr, IntPtr state)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x1616FE4", Offset = "0x1616FE4", VA = "0x1616FE4")]
		public static object GetPinnedObject(IntPtr ptr)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D6")]
	public static class StructMarshal<T> where T : struct
	{
		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _sizeofT;

		[Token(Token = "0x170000E9")]
		public static int Size
		{
			[Token(Token = "0x60012EF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60012EE")]
		static StructMarshal()
		{
		}

		[Token(Token = "0x60012F0")]
		public static void PtrToStruct(IntPtr ptr, out T t)
		{
		}

		[Token(Token = "0x60012F1")]
		public static void ArrayElementToStruct(IntPtr ptr, int arrayIndex, out T t)
		{
		}
	}
}
namespace Leap
{
	[Serializable]
	[Token(Token = "0x20002D7")]
	public class Arm : Bone, IEquatable<Arm>
	{
		[Token(Token = "0x170000EA")]
		public Vector ElbowPosition
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x16DE12C", Offset = "0x16DE12C", VA = "0x16DE12C")]
			get
			{
				return default(Vector);
			}
		}

		[Token(Token = "0x170000EB")]
		public Vector WristPosition
		{
			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x16DE138", Offset = "0x16DE138", VA = "0x16DE138")]
			get
			{
				return default(Vector);
			}
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x16DDE54", Offset = "0x16DDE54", VA = "0x16DDE54")]
		public Arm()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x16DDEAC", Offset = "0x16DDEAC", VA = "0x16DDEAC")]
		public Arm(Vector elbow, Vector wrist, Vector center, Vector direction, float length, float width, LeapQuaternion rotation)
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x16DDFBC", Offset = "0x16DDFBC", VA = "0x16DDFBC", Slot = "5")]
		public bool Equals(Arm other)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x16DE0E4", Offset = "0x16DE0E4", VA = "0x16DE0E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002D8")]
	public class Bone : IEquatable<Bone>
	{
		[Token(Token = "0x20005C6")]
		public enum BoneType
		{
			[Token(Token = "0x4001F9D")]
			TYPE_INVALID = -1,
			[Token(Token = "0x4001F9E")]
			TYPE_METACARPAL,
			[Token(Token = "0x4001F9F")]
			TYPE_PROXIMAL,
			[Token(Token = "0x4001FA0")]
			TYPE_INTERMEDIATE,
			[Token(Token = "0x4001FA1")]
			TYPE_DISTAL
		}

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector PrevJoint;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector NextJoint;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector Center;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector Direction;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Length;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Width;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BoneType Type;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LeapQuaternion Rotation;

		[Token(Token = "0x170000EC")]
		public LeapTransform Basis
		{
			[Token(Token = "0x60012FC")]
			[Address(RVA = "0x16DE240", Offset = "0x16DE240", VA = "0x16DE240")]
			get
			{
				return default(LeapTransform);
			}
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x16DDE80", Offset = "0x16DDE80", VA = "0x16DDE80")]
		public Bone()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x16DDEF4", Offset = "0x16DDEF4", VA = "0x16DDEF4")]
		public Bone(Vector prevJoint, Vector nextJoint, Vector center, Vector direction, float length, float width, BoneType type, LeapQuaternion rotation)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x16DDFC0", Offset = "0x16DDFC0", VA = "0x16DDFC0", Slot = "4")]
		public bool Equals(Bone other)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x16DE154", Offset = "0x16DE154", VA = "0x16DE154", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002D9")]
	public static class CSharpExtensions
	{
		[Token(Token = "0x20005C7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4749C", Offset = "0xB4749C")]
		private sealed class <>c__DisplayClass5_0<T> where T : EventArgs
		{
			[Token(Token = "0x4001FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EventHandler<T> handler;

			[Token(Token = "0x4001FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object sender;

			[Token(Token = "0x60027D6")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x60027D7")]
			internal void <DispatchOnContext>b__0(object spc_args)
			{
			}
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x16DE2C0", Offset = "0x16DE2C0", VA = "0x16DE2C0")]
		public static bool NearlyEquals(this float a, float b, float epsilon = 1.1920929E-07f)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x16DE388", Offset = "0x16DE388", VA = "0x16DE388")]
		public static bool HasMethod(this object objectToCheck, string methodName)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x16DE3CC", Offset = "0x16DE3CC", VA = "0x16DE3CC")]
		public static int indexOf(this Enum enumItem)
		{
			return default(int);
		}

		[Token(Token = "0x6001300")]
		public static T itemFor<T>(this int ordinal)
		{
			return (T)null;
		}

		[Token(Token = "0x6001301")]
		public static void Dispatch<T>(this EventHandler<T> handler, object sender, T eventArgs) where T : EventArgs
		{
		}

		[Token(Token = "0x6001302")]
		public static void DispatchOnContext<T>(this EventHandler<T> handler, object sender, SynchronizationContext context, T eventArgs) where T : EventArgs
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class Config
	{
		[Token(Token = "0x20005C8")]
		public enum ValueType
		{
			[Token(Token = "0x4001FA5")]
			TYPE_UNKNOWN = 0,
			[Token(Token = "0x4001FA6")]
			TYPE_BOOLEAN = 1,
			[Token(Token = "0x4001FA7")]
			TYPE_INT32 = 2,
			[Token(Token = "0x4001FA8")]
			TYPE_FLOAT = 6,
			[Token(Token = "0x4001FA9")]
			TYPE_STRING = 8
		}

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Connection _connection;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<uint, object> _transactions;

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x16DE45C", Offset = "0x16DE45C", VA = "0x16DE45C")]
		public Config(int connectionKey)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x16DE5EC", Offset = "0x16DE5EC", VA = "0x16DE5EC")]
		private void handleConfigChange(object sender, ConfigChangeEventArgs eventArgs)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x16DE6C0", Offset = "0x16DE6C0", VA = "0x16DE6C0")]
		private void handleConfigResponse(object sender, SetConfigResponseEventArgs eventArgs)
		{
		}

		[Token(Token = "0x6001306")]
		public bool Get<T>(string key, Action<T> onResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		public bool Set<T>(string key, T value, Action<bool> onResult) where T : IConvertible
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x16DE940", Offset = "0x16DE940", VA = "0x16DE940")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5C9D4", Offset = "0xB5C9D4")]
		public ValueType Type(string key)
		{
			return default(ValueType);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x16DE948", Offset = "0x16DE948", VA = "0x16DE948")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CA0C", Offset = "0xB5CA0C")]
		public bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x16DE950", Offset = "0x16DE950", VA = "0x16DE950")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CA44", Offset = "0xB5CA44")]
		public bool SetBool(string key, bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x16DE958", Offset = "0x16DE958", VA = "0x16DE958")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CA7C", Offset = "0xB5CA7C")]
		public bool GetInt32(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x16DE960", Offset = "0x16DE960", VA = "0x16DE960")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CAB4", Offset = "0xB5CAB4")]
		public bool SetInt32(string key, int value)
		{
			return default(bool);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x16DE968", Offset = "0x16DE968", VA = "0x16DE968")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CAEC", Offset = "0xB5CAEC")]
		public bool GetFloat(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x16DE970", Offset = "0x16DE970", VA = "0x16DE970")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CB24", Offset = "0xB5CB24")]
		public bool SetFloat(string key, float value)
		{
			return default(bool);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x16DE978", Offset = "0x16DE978", VA = "0x16DE978")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CB5C", Offset = "0xB5CB5C")]
		public bool GetString(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x16DE980", Offset = "0x16DE980", VA = "0x16DE980")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CB94", Offset = "0xB5CB94")]
		public bool SetString(string key, string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x16DE988", Offset = "0x16DE988", VA = "0x16DE988")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5CBCC", Offset = "0xB5CBCC")]
		public bool Save()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002DB")]
	public class Controller : IController, IDisposable
	{
		[Token(Token = "0x20005C9")]
		public enum PolicyFlag
		{
			[Token(Token = "0x4001FAB")]
			POLICY_DEFAULT = 0,
			[Token(Token = "0x4001FAC")]
			POLICY_BACKGROUND_FRAMES = 1,
			[Token(Token = "0x4001FAD")]
			POLICY_IMAGES = 2,
			[Token(Token = "0x4001FAE")]
			POLICY_OPTIMIZE_HMD = 4,
			[Token(Token = "0x4001FAF")]
			POLICY_ALLOW_PAUSE_RESUME = 8,
			[Token(Token = "0x4001FB0")]
			POLICY_MAP_POINTS = 0x80
		}

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Connection _connection;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _disposed;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _supportsMultipleDevices;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Config _config;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _hasInitialized;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EventHandler<LeapEventArgs> _init;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _hasConnected;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private EventHandler<ConnectionEventArgs> _connect;

		[Token(Token = "0x170000ED")]
		public SynchronizationContext EventContext
		{
			[Token(Token = "0x6001312")]
			[Address(RVA = "0x16DEA28", Offset = "0x16DEA28", VA = "0x16DEA28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001313")]
			[Address(RVA = "0x16DEA44", Offset = "0x16DEA44", VA = "0x16DEA44")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool IsServiceConnected
		{
			[Token(Token = "0x6001342")]
			[Address(RVA = "0x16E0350", Offset = "0x16E0350", VA = "0x16E0350")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EF")]
		public bool IsConnected
		{
			[Token(Token = "0x6001359")]
			[Address(RVA = "0x16E0B58", Offset = "0x16E0B58", VA = "0x16E0B58", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F0")]
		public Config Config
		{
			[Token(Token = "0x600135A")]
			[Address(RVA = "0x16E0BD8", Offset = "0x16E0BD8", VA = "0x16E0BD8", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		public DeviceList Devices
		{
			[Token(Token = "0x600135B")]
			[Address(RVA = "0x16E0938", Offset = "0x16E0938", VA = "0x16E0938", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000005")]
		public event EventHandler<LeapEventArgs> Init
		{
			[Token(Token = "0x6001314")]
			[Address(RVA = "0x16DEA60", Offset = "0x16DEA60", VA = "0x16DEA60")]
			add
			{
			}
			[Token(Token = "0x6001315")]
			[Address(RVA = "0x16DEB2C", Offset = "0x16DEB2C", VA = "0x16DEB2C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event EventHandler<ConnectionEventArgs> Connect
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0x16DEBAC", Offset = "0x16DEBAC", VA = "0x16DEBAC", Slot = "14")]
			add
			{
			}
			[Token(Token = "0x6001317")]
			[Address(RVA = "0x16DEC78", Offset = "0x16DEC78", VA = "0x16DEC78", Slot = "15")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event EventHandler<ConnectionLostEventArgs> Disconnect
		{
			[Token(Token = "0x6001318")]
			[Address(RVA = "0x16DECF8", Offset = "0x16DECF8", VA = "0x16DECF8", Slot = "16")]
			add
			{
			}
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x16DED84", Offset = "0x16DED84", VA = "0x16DED84", Slot = "17")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event EventHandler<FrameEventArgs> FrameReady
		{
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x16DEE10", Offset = "0x16DEE10", VA = "0x16DEE10", Slot = "18")]
			add
			{
			}
			[Token(Token = "0x600131B")]
			[Address(RVA = "0x16DEE9C", Offset = "0x16DEE9C", VA = "0x16DEE9C", Slot = "19")]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event EventHandler<InternalFrameEventArgs> InternalFrameReady
		{
			[Token(Token = "0x600131C")]
			[Address(RVA = "0x16DEF28", Offset = "0x16DEF28", VA = "0x16DEF28")]
			add
			{
			}
			[Token(Token = "0x600131D")]
			[Address(RVA = "0x16DEFB4", Offset = "0x16DEFB4", VA = "0x16DEFB4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event EventHandler<DeviceEventArgs> Device
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0x16DF040", Offset = "0x16DF040", VA = "0x16DF040", Slot = "20")]
			add
			{
			}
			[Token(Token = "0x600131F")]
			[Address(RVA = "0x16DF0CC", Offset = "0x16DF0CC", VA = "0x16DF0CC", Slot = "21")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event EventHandler<DeviceEventArgs> DeviceLost
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0x16DF158", Offset = "0x16DF158", VA = "0x16DF158", Slot = "22")]
			add
			{
			}
			[Token(Token = "0x6001321")]
			[Address(RVA = "0x16DF1E4", Offset = "0x16DF1E4", VA = "0x16DF1E4", Slot = "23")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event EventHandler<DeviceFailureEventArgs> DeviceFailure
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0x16DF270", Offset = "0x16DF270", VA = "0x16DF270", Slot = "24")]
			add
			{
			}
			[Token(Token = "0x6001323")]
			[Address(RVA = "0x16DF2FC", Offset = "0x16DF2FC", VA = "0x16DF2FC", Slot = "25")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event EventHandler<LogEventArgs> LogMessage
		{
			[Token(Token = "0x6001324")]
			[Address(RVA = "0x16DF388", Offset = "0x16DF388", VA = "0x16DF388", Slot = "26")]
			add
			{
			}
			[Token(Token = "0x6001325")]
			[Address(RVA = "0x16DF414", Offset = "0x16DF414", VA = "0x16DF414", Slot = "27")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event EventHandler<PolicyEventArgs> PolicyChange
		{
			[Token(Token = "0x6001326")]
			[Address(RVA = "0x16DF4A0", Offset = "0x16DF4A0", VA = "0x16DF4A0", Slot = "28")]
			add
			{
			}
			[Token(Token = "0x6001327")]
			[Address(RVA = "0x16DF52C", Offset = "0x16DF52C", VA = "0x16DF52C", Slot = "29")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event EventHandler<ConfigChangeEventArgs> ConfigChange
		{
			[Token(Token = "0x6001328")]
			[Address(RVA = "0x16DF5B8", Offset = "0x16DF5B8", VA = "0x16DF5B8", Slot = "30")]
			add
			{
			}
			[Token(Token = "0x6001329")]
			[Address(RVA = "0x16DF644", Offset = "0x16DF644", VA = "0x16DF644", Slot = "31")]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event EventHandler<DistortionEventArgs> DistortionChange
		{
			[Token(Token = "0x600132A")]
			[Address(RVA = "0x16DF6D0", Offset = "0x16DF6D0", VA = "0x16DF6D0", Slot = "32")]
			add
			{
			}
			[Token(Token = "0x600132B")]
			[Address(RVA = "0x16DF75C", Offset = "0x16DF75C", VA = "0x16DF75C", Slot = "33")]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event EventHandler<DroppedFrameEventArgs> DroppedFrame
		{
			[Token(Token = "0x600132C")]
			[Address(RVA = "0x16DF7E8", Offset = "0x16DF7E8", VA = "0x16DF7E8")]
			add
			{
			}
			[Token(Token = "0x600132D")]
			[Address(RVA = "0x16DF874", Offset = "0x16DF874", VA = "0x16DF874")]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event EventHandler<ImageEventArgs> ImageReady
		{
			[Token(Token = "0x600132E")]
			[Address(RVA = "0x16DF900", Offset = "0x16DF900", VA = "0x16DF900", Slot = "34")]
			add
			{
			}
			[Token(Token = "0x600132F")]
			[Address(RVA = "0x16DF98C", Offset = "0x16DF98C", VA = "0x16DF98C", Slot = "35")]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event Action<BeginProfilingForThreadArgs> BeginProfilingForThread
		{
			[Token(Token = "0x6001330")]
			[Address(RVA = "0x16DFA18", Offset = "0x16DFA18", VA = "0x16DFA18")]
			add
			{
			}
			[Token(Token = "0x6001331")]
			[Address(RVA = "0x16DFAA4", Offset = "0x16DFAA4", VA = "0x16DFAA4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event Action<EndProfilingForThreadArgs> EndProfilingForThread
		{
			[Token(Token = "0x6001332")]
			[Address(RVA = "0x16DFB30", Offset = "0x16DFB30", VA = "0x16DFB30")]
			add
			{
			}
			[Token(Token = "0x6001333")]
			[Address(RVA = "0x16DFBBC", Offset = "0x16DFBBC", VA = "0x16DFBBC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event Action<BeginProfilingBlockArgs> BeginProfilingBlock
		{
			[Token(Token = "0x6001334")]
			[Address(RVA = "0x16DFC48", Offset = "0x16DFC48", VA = "0x16DFC48")]
			add
			{
			}
			[Token(Token = "0x6001335")]
			[Address(RVA = "0x16DFCD4", Offset = "0x16DFCD4", VA = "0x16DFCD4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event Action<EndProfilingBlockArgs> EndProfilingBlock
		{
			[Token(Token = "0x6001336")]
			[Address(RVA = "0x16DFD60", Offset = "0x16DFD60", VA = "0x16DFD60")]
			add
			{
			}
			[Token(Token = "0x6001337")]
			[Address(RVA = "0x16DFDEC", Offset = "0x16DFDEC", VA = "0x16DFDEC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event EventHandler<PointMappingChangeEventArgs> PointMappingChange
		{
			[Token(Token = "0x6001338")]
			[Address(RVA = "0x16DFE78", Offset = "0x16DFE78", VA = "0x16DFE78", Slot = "36")]
			add
			{
			}
			[Token(Token = "0x6001339")]
			[Address(RVA = "0x16DFF04", Offset = "0x16DFF04", VA = "0x16DFF04", Slot = "37")]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event EventHandler<HeadPoseEventArgs> HeadPoseChange
		{
			[Token(Token = "0x600133A")]
			[Address(RVA = "0x16DFF90", Offset = "0x16DFF90", VA = "0x16DFF90", Slot = "38")]
			add
			{
			}
			[Token(Token = "0x600133B")]
			[Address(RVA = "0x16E001C", Offset = "0x16E001C", VA = "0x16E001C", Slot = "39")]
			remove
			{
			}
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x16E00A8", Offset = "0x16E00A8", VA = "0x16E00A8", Slot = "40")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x16E0128", Offset = "0x16E0128", VA = "0x16E0128", Slot = "41")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x16E0140", Offset = "0x16E0140", VA = "0x16E0140")]
		public Controller(bool supportsMultipleDevices = true)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x16E014C", Offset = "0x16E014C", VA = "0x16E014C")]
		public Controller(int connectionKey, bool supportsMultipleDevices = true)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x16E0310", Offset = "0x16E0310", VA = "0x16E0310")]
		public void StartConnection()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x16E0334", Offset = "0x16E0334", VA = "0x16E0334")]
		public void StopConnection()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x16E036C", Offset = "0x16E036C", VA = "0x16E036C", Slot = "7")]
		public void SetPolicy(PolicyFlag policy)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x16E0388", Offset = "0x16E0388", VA = "0x16E0388", Slot = "8")]
		public void ClearPolicy(PolicyFlag policy)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x16E03A4", Offset = "0x16E03A4", VA = "0x16E03A4", Slot = "9")]
		public bool IsPolicySet(PolicyFlag policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x16E03C0", Offset = "0x16E03C0", VA = "0x16E03C0", Slot = "4")]
		public Frame Frame(int history = 0)
		{
			return null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x16E04C0", Offset = "0x16E04C0", VA = "0x16E04C0")]
		public void Frame(Frame toFill, int history = 0)
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x16E0560", Offset = "0x16E0560", VA = "0x16E0560")]
		public long FrameTimestamp(int history = 0)
		{
			return default(long);
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x16E05F0", Offset = "0x16E05F0", VA = "0x16E05F0", Slot = "5")]
		public Frame GetTransformedFrame(LeapTransform trs, int history = 0)
		{
			return null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x16E07A8", Offset = "0x16E07A8", VA = "0x16E07A8", Slot = "6")]
		public Frame GetInterpolatedFrame(long time)
		{
			return null;
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x16E07C4", Offset = "0x16E07C4", VA = "0x16E07C4")]
		public void GetInterpolatedFrame(Frame toFill, long time)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x16E07E0", Offset = "0x16E07E0", VA = "0x16E07E0")]
		public LEAP_HEAD_POSE_EVENT GetInterpolatedHeadPose(long time)
		{
			return default(LEAP_HEAD_POSE_EVENT);
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x16E07FC", Offset = "0x16E07FC", VA = "0x16E07FC")]
		public void GetInterpolatedHeadPose(ref LEAP_HEAD_POSE_EVENT toFill, long time)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x16E0818", Offset = "0x16E0818", VA = "0x16E0818")]
		public void GetInterpolatedEyePositions(ref LEAP_EYE_EVENT toFill, long time)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x16E0834", Offset = "0x16E0834", VA = "0x16E0834")]
		public void SubscribeToDeviceEvents(Device device)
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x16E0850", Offset = "0x16E0850", VA = "0x16E0850")]
		public void UnsubscribeFromDeviceEvents(Device device)
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x16E086C", Offset = "0x16E086C", VA = "0x16E086C")]
		public void SubscribeToAllDevices()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x16E0954", Offset = "0x16E0954", VA = "0x16E0954")]
		public void UnsubscribeFromAllDevices()
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x16E0A20", Offset = "0x16E0A20", VA = "0x16E0A20")]
		public void TelemetryProfiling(ref LEAP_TELEMETRY_DATA telemetryData)
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x16E0A3C", Offset = "0x16E0A3C", VA = "0x16E0A3C")]
		public ulong TelemetryGetNow()
		{
			return default(ulong);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x16E0A9C", Offset = "0x16E0A9C", VA = "0x16E0A9C")]
		public void GetPointMapping(ref PointMapping pointMapping)
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x16E0AB8", Offset = "0x16E0AB8", VA = "0x16E0AB8")]
		public void GetInterpolatedLeftRightTransform(long time, long sourceTime, int leftId, int rightId, out LeapTransform leftTransform, out LeapTransform rightTransform)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x16E0ADC", Offset = "0x16E0ADC", VA = "0x16E0ADC")]
		public void GetInterpolatedFrameFromTime(Frame toFill, long time, long sourceTime)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x16E0AF8", Offset = "0x16E0AF8", VA = "0x16E0AF8", Slot = "10")]
		public long Now()
		{
			return default(long);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x16E0C5C", Offset = "0x16E0C5C", VA = "0x16E0C5C")]
		public FailedDeviceList FailedDevices()
		{
			return null;
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x16E0C78", Offset = "0x16E0C78", VA = "0x16E0C78", Slot = "42")]
		protected virtual void OnInit(object sender, LeapEventArgs eventArgs)
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x16E0C84", Offset = "0x16E0C84", VA = "0x16E0C84", Slot = "43")]
		protected virtual void OnConnect(object sender, ConnectionEventArgs eventArgs)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x16E0C90", Offset = "0x16E0C90", VA = "0x16E0C90", Slot = "44")]
		protected virtual void OnDisconnect(object sender, ConnectionLostEventArgs eventArgs)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public static class CopyFromOtherExtensions
	{
		[Token(Token = "0x6001360")]
		[Address(RVA = "0x16E069C", Offset = "0x16E069C", VA = "0x16E069C")]
		public static Frame CopyFrom(this Frame frame, Frame source)
		{
			return null;
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x16E0E6C", Offset = "0x16E0E6C", VA = "0x16E0E6C")]
		public static Hand CopyFrom(this Hand hand, Hand source)
		{
			return null;
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x16E1074", Offset = "0x16E1074", VA = "0x16E1074")]
		public static Finger CopyFrom(this Finger finger, Finger source)
		{
			return null;
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x16E0FF0", Offset = "0x16E0FF0", VA = "0x16E0FF0")]
		public static Bone CopyFrom(this Bone bone, Bone source)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DD")]
	public class Device : IEquatable<Device>
	{
		[Token(Token = "0x20005CA")]
		public enum DeviceType
		{
			[Token(Token = "0x4001FB2")]
			TYPE_INVALID = -1,
			[Token(Token = "0x4001FB3")]
			TYPE_PERIPHERAL = 3,
			[Token(Token = "0x4001FB4")]
			TYPE_DRAGONFLY = 4354,
			[Token(Token = "0x4001FB5")]
			TYPE_NIGHTCRAWLER = 4609,
			[Token(Token = "0x4001FB6")]
			TYPE_RIGEL = 4610,
			[Token(Token = "0x4001FB7")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB59118", Offset = "0xB59118")]
			TYPE_LAPTOP = 4611,
			[Token(Token = "0x4001FB8")]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB59128", Offset = "0xB59128")]
			TYPE_KEYBOARD = 4612
		}

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEB8", Offset = "0xB4CEB8")]
		private IntPtr <Handle>k__BackingField;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEC8", Offset = "0xB4CEC8")]
		private float <HorizontalViewAngle>k__BackingField;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CED8", Offset = "0xB4CED8")]
		private float <VerticalViewAngle>k__BackingField;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEE8", Offset = "0xB4CEE8")]
		private float <Range>k__BackingField;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CEF8", Offset = "0xB4CEF8")]
		private float <Baseline>k__BackingField;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF08", Offset = "0xB4CF08")]
		private bool <IsStreaming>k__BackingField;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF18", Offset = "0xB4CF18")]
		private DeviceType <Type>k__BackingField;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF28", Offset = "0xB4CF28")]
		private string <SerialNumber>k__BackingField;

		[Token(Token = "0x170000F2")]
		public IntPtr Handle
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0x16E123C", Offset = "0x16E123C", VA = "0x16E123C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC1C", Offset = "0xB5CC1C")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x16E1244", Offset = "0x16E1244", VA = "0x16E1244")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC2C", Offset = "0xB5CC2C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public float HorizontalViewAngle
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0x16E12C0", Offset = "0x16E12C0", VA = "0x16E12C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC3C", Offset = "0xB5CC3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x16E12C8", Offset = "0x16E12C8", VA = "0x16E12C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC4C", Offset = "0xB5CC4C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public float VerticalViewAngle
		{
			[Token(Token = "0x600136E")]
			[Address(RVA = "0x16E12D0", Offset = "0x16E12D0", VA = "0x16E12D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC5C", Offset = "0xB5CC5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600136F")]
			[Address(RVA = "0x16E12D8", Offset = "0x16E12D8", VA = "0x16E12D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC6C", Offset = "0xB5CC6C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public float Range
		{
			[Token(Token = "0x6001370")]
			[Address(RVA = "0x16E12E0", Offset = "0x16E12E0", VA = "0x16E12E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC7C", Offset = "0xB5CC7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001371")]
			[Address(RVA = "0x16E12E8", Offset = "0x16E12E8", VA = "0x16E12E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC8C", Offset = "0xB5CC8C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public float Baseline
		{
			[Token(Token = "0x6001372")]
			[Address(RVA = "0x16E12F0", Offset = "0x16E12F0", VA = "0x16E12F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CC9C", Offset = "0xB5CC9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001373")]
			[Address(RVA = "0x16E12F8", Offset = "0x16E12F8", VA = "0x16E12F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCAC", Offset = "0xB5CCAC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool IsStreaming
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0x16E1300", Offset = "0x16E1300", VA = "0x16E1300")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCBC", Offset = "0xB5CCBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001375")]
			[Address(RVA = "0x16E1308", Offset = "0x16E1308", VA = "0x16E1308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCCC", Offset = "0xB5CCCC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public DeviceType Type
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0x16E1314", Offset = "0x16E1314", VA = "0x16E1314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCDC", Offset = "0xB5CCDC")]
			get
			{
				return default(DeviceType);
			}
			[Token(Token = "0x6001377")]
			[Address(RVA = "0x16E131C", Offset = "0x16E131C", VA = "0x16E131C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCEC", Offset = "0xB5CCEC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public string SerialNumber
		{
			[Token(Token = "0x6001378")]
			[Address(RVA = "0x16E1324", Offset = "0x16E1324", VA = "0x16E1324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CCFC", Offset = "0xB5CCFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001379")]
			[Address(RVA = "0x16E132C", Offset = "0x16E132C", VA = "0x16E132C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD0C", Offset = "0xB5CD0C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public bool IsSmudged
		{
			[Token(Token = "0x600137A")]
			[Address(RVA = "0x16E1334", Offset = "0x16E1334", VA = "0x16E1334")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FB")]
		public bool IsLightingBad
		{
			[Token(Token = "0x600137B")]
			[Address(RVA = "0x16E1394", Offset = "0x16E1394", VA = "0x16E1394")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x16E1158", Offset = "0x16E1158", VA = "0x16E1158")]
		public Device()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x16E1160", Offset = "0x16E1160", VA = "0x16E1160")]
		public Device(IntPtr deviceHandle, float horizontalViewAngle, float verticalViewAngle, float range, float baseline, DeviceType type, bool isStreaming, string serialNumber)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x16E11E0", Offset = "0x16E11E0", VA = "0x16E11E0")]
		public void Update(float horizontalViewAngle, float verticalViewAngle, float range, float baseline, bool isStreaming, string serialNumber)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x16E11F8", Offset = "0x16E11F8", VA = "0x16E11F8")]
		public void Update(Device updatedDevice)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x16E124C", Offset = "0x16E124C", VA = "0x16E124C", Slot = "4")]
		public bool Equals(Device other)
		{
			return default(bool);
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x16E126C", Offset = "0x16E126C", VA = "0x16E126C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002DE")]
	public class DeviceList : List<Device>
	{
		[Token(Token = "0x170000FC")]
		public Device ActiveDevice
		{
			[Token(Token = "0x600137E")]
			[Address(RVA = "0x16E15E8", Offset = "0x16E15E8", VA = "0x16E15E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public bool IsEmpty
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x16E173C", Offset = "0x16E173C", VA = "0x16E173C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x16E14A8", Offset = "0x16E14A8", VA = "0x16E14A8")]
		public DeviceList()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x16E1518", Offset = "0x16E1518", VA = "0x16E1518")]
		public Device FindDeviceByHandle(IntPtr deviceHandle)
		{
			return null;
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x16E16B0", Offset = "0x16E16B0", VA = "0x16E16B0")]
		public void AddOrUpdate(Device device)
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class DistortionData
	{
		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF38", Offset = "0xB4CF38")]
		private ulong <Version>k__BackingField;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF48", Offset = "0xB4CF48")]
		private float <Width>k__BackingField;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF58", Offset = "0xB4CF58")]
		private float <Height>k__BackingField;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF68", Offset = "0xB4CF68")]
		private float[] <Data>k__BackingField;

		[Token(Token = "0x170000FE")]
		public ulong Version
		{
			[Token(Token = "0x6001383")]
			[Address(RVA = "0x16E17E0", Offset = "0x16E17E0", VA = "0x16E17E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD1C", Offset = "0xB5CD1C")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6001384")]
			[Address(RVA = "0x16E17E8", Offset = "0x16E17E8", VA = "0x16E17E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD2C", Offset = "0xB5CD2C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public float Width
		{
			[Token(Token = "0x6001385")]
			[Address(RVA = "0x16E17F0", Offset = "0x16E17F0", VA = "0x16E17F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD3C", Offset = "0xB5CD3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001386")]
			[Address(RVA = "0x16E17F8", Offset = "0x16E17F8", VA = "0x16E17F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD4C", Offset = "0xB5CD4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public float Height
		{
			[Token(Token = "0x6001387")]
			[Address(RVA = "0x16E1800", Offset = "0x16E1800", VA = "0x16E1800")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD5C", Offset = "0xB5CD5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001388")]
			[Address(RVA = "0x16E1808", Offset = "0x16E1808", VA = "0x16E1808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD6C", Offset = "0xB5CD6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float[] Data
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0x16E1810", Offset = "0x16E1810", VA = "0x16E1810")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD7C", Offset = "0xB5CD7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x16E1818", Offset = "0x16E1818", VA = "0x16E1818")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD8C", Offset = "0xB5CD8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public bool IsValid
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x16E1820", Offset = "0x16E1820", VA = "0x16E1820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x16E1788", Offset = "0x16E1788", VA = "0x16E1788")]
		public DistortionData()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x16E1790", Offset = "0x16E1790", VA = "0x16E1790")]
		public DistortionData(ulong version, float width, float height, float[] data)
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public enum LeapEvent
	{
		[Token(Token = "0x40012B2")]
		EVENT_CONNECTION,
		[Token(Token = "0x40012B3")]
		EVENT_CONNECTION_LOST,
		[Token(Token = "0x40012B4")]
		EVENT_DEVICE,
		[Token(Token = "0x40012B5")]
		EVENT_DEVICE_FAILURE,
		[Token(Token = "0x40012B6")]
		EVENT_DEVICE_LOST,
		[Token(Token = "0x40012B7")]
		EVENT_POLICY_CHANGE,
		[Token(Token = "0x40012B8")]
		EVENT_CONFIG_RESPONSE,
		[Token(Token = "0x40012B9")]
		EVENT_CONFIG_CHANGE,
		[Token(Token = "0x40012BA")]
		EVENT_FRAME,
		[Token(Token = "0x40012BB")]
		EVENT_INTERNAL_FRAME,
		[Token(Token = "0x40012BC")]
		EVENT_IMAGE_COMPLETE,
		[Token(Token = "0x40012BD")]
		EVENT_IMAGE_REQUEST_FAILED,
		[Token(Token = "0x40012BE")]
		EVENT_DISTORTION_CHANGE,
		[Token(Token = "0x40012BF")]
		EVENT_LOG_EVENT,
		[Token(Token = "0x40012C0")]
		EVENT_INIT,
		[Token(Token = "0x40012C1")]
		EVENT_DROPPED_FRAME,
		[Token(Token = "0x40012C2")]
		EVENT_IMAGE,
		[Token(Token = "0x40012C3")]
		EVENT_POINT_MAPPING_CHANGE,
		[Token(Token = "0x40012C4")]
		EVENT_HEAD_POSE
	}
	[Token(Token = "0x20002E1")]
	public class LeapEventArgs : EventArgs
	{
		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF78", Offset = "0xB4CF78")]
		private LeapEvent <type>k__BackingField;

		[Token(Token = "0x17000103")]
		public LeapEvent type
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0x162D258", Offset = "0x162D258", VA = "0x162D258")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CD9C", Offset = "0xB5CD9C")]
			get
			{
				return default(LeapEvent);
			}
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x162D260", Offset = "0x162D260", VA = "0x162D260")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDAC", Offset = "0xB5CDAC")]
			set
			{
			}
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x162D1AC", Offset = "0x162D1AC", VA = "0x162D1AC")]
		public LeapEventArgs(LeapEvent type)
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class FrameEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF88", Offset = "0xB4CF88")]
		private Frame <frame>k__BackingField;

		[Token(Token = "0x17000104")]
		public Frame frame
		{
			[Token(Token = "0x6001390")]
			[Address(RVA = "0x16E2644", Offset = "0x16E2644", VA = "0x16E2644")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDBC", Offset = "0xB5CDBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001391")]
			[Address(RVA = "0x16E264C", Offset = "0x16E264C", VA = "0x16E264C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDCC", Offset = "0xB5CDCC")]
			set
			{
			}
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x16E2614", Offset = "0x16E2614", VA = "0x16E2614")]
		public FrameEventArgs(Frame frame)
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class InternalFrameEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CF98", Offset = "0xB4CF98")]
		private LEAP_TRACKING_EVENT <frame>k__BackingField;

		[Token(Token = "0x17000105")]
		public LEAP_TRACKING_EVENT frame
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0x162D228", Offset = "0x162D228", VA = "0x162D228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDDC", Offset = "0xB5CDDC")]
			get
			{
				return default(LEAP_TRACKING_EVENT);
			}
			[Token(Token = "0x6001394")]
			[Address(RVA = "0x162D240", Offset = "0x162D240", VA = "0x162D240")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDEC", Offset = "0xB5CDEC")]
			set
			{
			}
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x162D170", Offset = "0x162D170", VA = "0x162D170")]
		public InternalFrameEventArgs(ref LEAP_TRACKING_EVENT frame)
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class LogEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFA8", Offset = "0xB4CFA8")]
		private MessageSeverity <severity>k__BackingField;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFB8", Offset = "0xB4CFB8")]
		private long <timestamp>k__BackingField;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFC8", Offset = "0xB4CFC8")]
		private string <message>k__BackingField;

		[Token(Token = "0x17000106")]
		public MessageSeverity severity
		{
			[Token(Token = "0x6001396")]
			[Address(RVA = "0x162EE48", Offset = "0x162EE48", VA = "0x162EE48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CDFC", Offset = "0xB5CDFC")]
			get
			{
				return default(MessageSeverity);
			}
			[Token(Token = "0x6001397")]
			[Address(RVA = "0x162EE50", Offset = "0x162EE50", VA = "0x162EE50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE0C", Offset = "0xB5CE0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public long timestamp
		{
			[Token(Token = "0x6001398")]
			[Address(RVA = "0x162EE58", Offset = "0x162EE58", VA = "0x162EE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE1C", Offset = "0xB5CE1C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x162EE60", Offset = "0x162EE60", VA = "0x162EE60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE2C", Offset = "0xB5CE2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public string message
		{
			[Token(Token = "0x600139A")]
			[Address(RVA = "0x162EE68", Offset = "0x162EE68", VA = "0x162EE68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE3C", Offset = "0xB5CE3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600139B")]
			[Address(RVA = "0x162EE70", Offset = "0x162EE70", VA = "0x162EE70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE4C", Offset = "0xB5CE4C")]
			set
			{
			}
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x162EE08", Offset = "0x162EE08", VA = "0x162EE08")]
		public LogEventArgs(MessageSeverity severity, long timestamp, string message)
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class PolicyEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFD8", Offset = "0xB4CFD8")]
		private ulong <currentPolicies>k__BackingField;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFE8", Offset = "0xB4CFE8")]
		private ulong <oldPolicies>k__BackingField;

		[Token(Token = "0x17000109")]
		public ulong currentPolicies
		{
			[Token(Token = "0x600139D")]
			[Address(RVA = "0x16307D0", Offset = "0x16307D0", VA = "0x16307D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE5C", Offset = "0xB5CE5C")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x600139E")]
			[Address(RVA = "0x16307D8", Offset = "0x16307D8", VA = "0x16307D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE6C", Offset = "0xB5CE6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public ulong oldPolicies
		{
			[Token(Token = "0x600139F")]
			[Address(RVA = "0x16307E0", Offset = "0x16307E0", VA = "0x16307E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE7C", Offset = "0xB5CE7C")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60013A0")]
			[Address(RVA = "0x16307E8", Offset = "0x16307E8", VA = "0x16307E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE8C", Offset = "0xB5CE8C")]
			set
			{
			}
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x1630798", Offset = "0x1630798", VA = "0x1630798")]
		public PolicyEventArgs(ulong currentPolicies, ulong oldPolicies)
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class DistortionEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4CFF8", Offset = "0xB4CFF8")]
		private DistortionData <distortion>k__BackingField;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D008", Offset = "0xB4D008")]
		private Image.CameraType <camera>k__BackingField;

		[Token(Token = "0x1700010B")]
		public DistortionData distortion
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x16E1950", Offset = "0x16E1950", VA = "0x16E1950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CE9C", Offset = "0xB5CE9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x16E1958", Offset = "0x16E1958", VA = "0x16E1958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CEAC", Offset = "0xB5CEAC")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public Image.CameraType camera
		{
			[Token(Token = "0x60013A4")]
			[Address(RVA = "0x16E1960", Offset = "0x16E1960", VA = "0x16E1960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CEBC", Offset = "0xB5CEBC")]
			get
			{
				return default(Image.CameraType);
			}
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x16E1968", Offset = "0x16E1968", VA = "0x16E1968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CECC", Offset = "0xB5CECC")]
			protected set
			{
			}
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x16E1910", Offset = "0x16E1910", VA = "0x16E1910")]
		public DistortionEventArgs(DistortionData distortion, Image.CameraType camera)
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class ConfigChangeEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D018", Offset = "0xB4D018")]
		private string <ConfigKey>k__BackingField;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D028", Offset = "0xB4D028")]
		private bool <Succeeded>k__BackingField;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D038", Offset = "0xB4D038")]
		private uint <RequestId>k__BackingField;

		[Token(Token = "0x1700010D")]
		public string ConfigKey
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0x16DE9DC", Offset = "0x16DE9DC", VA = "0x16DE9DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CEDC", Offset = "0xB5CEDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0x16DE9E4", Offset = "0x16DE9E4", VA = "0x16DE9E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CEEC", Offset = "0xB5CEEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public bool Succeeded
		{
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0x16DE9EC", Offset = "0x16DE9EC", VA = "0x16DE9EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CEFC", Offset = "0xB5CEFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013AA")]
			[Address(RVA = "0x16DE9F4", Offset = "0x16DE9F4", VA = "0x16DE9F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF0C", Offset = "0xB5CF0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public uint RequestId
		{
			[Token(Token = "0x60013AB")]
			[Address(RVA = "0x16DEA00", Offset = "0x16DEA00", VA = "0x16DEA00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF1C", Offset = "0xB5CF1C")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60013AC")]
			[Address(RVA = "0x16DEA08", Offset = "0x16DEA08", VA = "0x16DEA08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF2C", Offset = "0xB5CF2C")]
			set
			{
			}
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x16DE990", Offset = "0x16DE990", VA = "0x16DE990")]
		public ConfigChangeEventArgs(string config_key, bool succeeded, uint requestId)
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class SetConfigResponseEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D048", Offset = "0xB4D048")]
		private string <ConfigKey>k__BackingField;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D058", Offset = "0xB4D058")]
		private Config.ValueType <DataType>k__BackingField;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D068", Offset = "0xB4D068")]
		private object <Value>k__BackingField;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D078", Offset = "0xB4D078")]
		private uint <RequestId>k__BackingField;

		[Token(Token = "0x17000110")]
		public string ConfigKey
		{
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0x1630844", Offset = "0x1630844", VA = "0x1630844")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF3C", Offset = "0xB5CF3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013AF")]
			[Address(RVA = "0x163084C", Offset = "0x163084C", VA = "0x163084C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF4C", Offset = "0xB5CF4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public Config.ValueType DataType
		{
			[Token(Token = "0x60013B0")]
			[Address(RVA = "0x1630854", Offset = "0x1630854", VA = "0x1630854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF5C", Offset = "0xB5CF5C")]
			get
			{
				return default(Config.ValueType);
			}
			[Token(Token = "0x60013B1")]
			[Address(RVA = "0x163085C", Offset = "0x163085C", VA = "0x163085C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF6C", Offset = "0xB5CF6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public object Value
		{
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0x1630864", Offset = "0x1630864", VA = "0x1630864")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF7C", Offset = "0xB5CF7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0x163086C", Offset = "0x163086C", VA = "0x163086C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF8C", Offset = "0xB5CF8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public uint RequestId
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0x1630874", Offset = "0x1630874", VA = "0x1630874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CF9C", Offset = "0xB5CF9C")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0x163087C", Offset = "0x163087C", VA = "0x163087C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFAC", Offset = "0xB5CFAC")]
			set
			{
			}
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x16307F0", Offset = "0x16307F0", VA = "0x16307F0")]
		public SetConfigResponseEventArgs(string config_key, Config.ValueType dataType, object value, uint requestId)
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class ConnectionEventArgs : LeapEventArgs
	{
		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x16DEA10", Offset = "0x16DEA10", VA = "0x16DEA10")]
		public ConnectionEventArgs()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class ConnectionLostEventArgs : LeapEventArgs
	{
		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x16DEA1C", Offset = "0x16DEA1C", VA = "0x16DEA1C")]
		public ConnectionLostEventArgs()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class DeviceEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D088", Offset = "0xB4D088")]
		private Device <Device>k__BackingField;

		[Token(Token = "0x17000114")]
		public Device Device
		{
			[Token(Token = "0x60013B9")]
			[Address(RVA = "0x16E1424", Offset = "0x16E1424", VA = "0x16E1424")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFBC", Offset = "0xB5CFBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013BA")]
			[Address(RVA = "0x16E142C", Offset = "0x16E142C", VA = "0x16E142C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFCC", Offset = "0xB5CFCC")]
			set
			{
			}
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x16E13F4", Offset = "0x16E13F4", VA = "0x16E13F4")]
		public DeviceEventArgs(Device device)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class DeviceFailureEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D098", Offset = "0xB4D098")]
		private uint <ErrorCode>k__BackingField;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0A8", Offset = "0xB4D0A8")]
		private string <ErrorMessage>k__BackingField;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0B8", Offset = "0xB4D0B8")]
		private string <DeviceSerialNumber>k__BackingField;

		[Token(Token = "0x17000115")]
		public uint ErrorCode
		{
			[Token(Token = "0x60013BC")]
			[Address(RVA = "0x16E1478", Offset = "0x16E1478", VA = "0x16E1478")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFDC", Offset = "0xB5CFDC")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60013BD")]
			[Address(RVA = "0x16E1480", Offset = "0x16E1480", VA = "0x16E1480")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFEC", Offset = "0xB5CFEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public string ErrorMessage
		{
			[Token(Token = "0x60013BE")]
			[Address(RVA = "0x16E1488", Offset = "0x16E1488", VA = "0x16E1488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5CFFC", Offset = "0xB5CFFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x16E1490", Offset = "0x16E1490", VA = "0x16E1490")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D00C", Offset = "0xB5D00C")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public string DeviceSerialNumber
		{
			[Token(Token = "0x60013C0")]
			[Address(RVA = "0x16E1498", Offset = "0x16E1498", VA = "0x16E1498")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D01C", Offset = "0xB5D01C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x16E14A0", Offset = "0x16E14A0", VA = "0x16E14A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D02C", Offset = "0xB5D02C")]
			set
			{
			}
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x16E1434", Offset = "0x16E1434", VA = "0x16E1434")]
		public DeviceFailureEventArgs(uint code, string message, string serial)
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class DroppedFrameEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0C8", Offset = "0xB4D0C8")]
		private long <frameID>k__BackingField;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0D8", Offset = "0xB4D0D8")]
		private eLeapDroppedFrameType <reason>k__BackingField;

		[Token(Token = "0x17000118")]
		public long frameID
		{
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0x16E19B0", Offset = "0x16E19B0", VA = "0x16E19B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D03C", Offset = "0xB5D03C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0x16E19B8", Offset = "0x16E19B8", VA = "0x16E19B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D04C", Offset = "0xB5D04C")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public eLeapDroppedFrameType reason
		{
			[Token(Token = "0x60013C5")]
			[Address(RVA = "0x16E19C0", Offset = "0x16E19C0", VA = "0x16E19C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D05C", Offset = "0xB5D05C")]
			get
			{
				return default(eLeapDroppedFrameType);
			}
			[Token(Token = "0x60013C6")]
			[Address(RVA = "0x16E19C8", Offset = "0x16E19C8", VA = "0x16E19C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D06C", Offset = "0xB5D06C")]
			set
			{
			}
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x16E1970", Offset = "0x16E1970", VA = "0x16E1970")]
		public DroppedFrameEventArgs(long frame_id, eLeapDroppedFrameType type)
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class ImageEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0E8", Offset = "0xB4D0E8")]
		private Image <image>k__BackingField;

		[Token(Token = "0x1700011A")]
		public Image image
		{
			[Token(Token = "0x60013C8")]
			[Address(RVA = "0x16E3510", Offset = "0x16E3510", VA = "0x16E3510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D07C", Offset = "0xB5D07C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013C9")]
			[Address(RVA = "0x16E3518", Offset = "0x16E3518", VA = "0x16E3518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D08C", Offset = "0xB5D08C")]
			set
			{
			}
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x16E34E0", Offset = "0x16E34E0", VA = "0x16E34E0")]
		public ImageEventArgs(Image image)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class PointMappingChangeEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D0F8", Offset = "0xB4D0F8")]
		private long <frameID>k__BackingField;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D108", Offset = "0xB4D108")]
		private long <timestamp>k__BackingField;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D118", Offset = "0xB4D118")]
		private uint <nPoints>k__BackingField;

		[Token(Token = "0x1700011B")]
		public long frameID
		{
			[Token(Token = "0x60013CB")]
			[Address(RVA = "0x1630768", Offset = "0x1630768", VA = "0x1630768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D09C", Offset = "0xB5D09C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0x1630770", Offset = "0x1630770", VA = "0x1630770")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0AC", Offset = "0xB5D0AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public long timestamp
		{
			[Token(Token = "0x60013CD")]
			[Address(RVA = "0x1630778", Offset = "0x1630778", VA = "0x1630778")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0BC", Offset = "0xB5D0BC")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60013CE")]
			[Address(RVA = "0x1630780", Offset = "0x1630780", VA = "0x1630780")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0CC", Offset = "0xB5D0CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public uint nPoints
		{
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0x1630788", Offset = "0x1630788", VA = "0x1630788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0DC", Offset = "0xB5D0DC")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60013D0")]
			[Address(RVA = "0x1630790", Offset = "0x1630790", VA = "0x1630790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0EC", Offset = "0xB5D0EC")]
			set
			{
			}
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x1630728", Offset = "0x1630728", VA = "0x1630728")]
		public PointMappingChangeEventArgs(long frame_id, long timestamp, uint nPoints)
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class HeadPoseEventArgs : LeapEventArgs
	{
		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D128", Offset = "0xB4D128")]
		private LEAP_VECTOR <headPosition>k__BackingField;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D138", Offset = "0xB4D138")]
		private LEAP_QUATERNION <headOrientation>k__BackingField;

		[Token(Token = "0x1700011E")]
		public LEAP_VECTOR headPosition
		{
			[Token(Token = "0x60013D2")]
			[Address(RVA = "0x16E2A70", Offset = "0x16E2A70", VA = "0x16E2A70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D0FC", Offset = "0xB5D0FC")]
			get
			{
				return default(LEAP_VECTOR);
			}
			[Token(Token = "0x60013D3")]
			[Address(RVA = "0x16E2A7C", Offset = "0x16E2A7C", VA = "0x16E2A7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D10C", Offset = "0xB5D10C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public LEAP_QUATERNION headOrientation
		{
			[Token(Token = "0x60013D4")]
			[Address(RVA = "0x16E2A88", Offset = "0x16E2A88", VA = "0x16E2A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D11C", Offset = "0xB5D11C")]
			get
			{
				return default(LEAP_QUATERNION);
			}
			[Token(Token = "0x60013D5")]
			[Address(RVA = "0x16E2A94", Offset = "0x16E2A94", VA = "0x16E2A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D12C", Offset = "0xB5D12C")]
			set
			{
			}
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x16E29FC", Offset = "0x16E29FC", VA = "0x16E29FC")]
		public HeadPoseEventArgs(LEAP_VECTOR head_position, LEAP_QUATERNION head_orientation)
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public struct BeginProfilingForThreadArgs
	{
		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string threadName;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string[] blockNames;

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x16DE14C", Offset = "0x16DE14C", VA = "0x16DE14C")]
		public BeginProfilingForThreadArgs(string threadName, params string[] blockNames)
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public struct EndProfilingForThreadArgs
	{
	}
	[Token(Token = "0x20002F3")]
	public struct BeginProfilingBlockArgs
	{
		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string blockName;

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x16DE144", Offset = "0x16DE144", VA = "0x16DE144")]
		public BeginProfilingBlockArgs(string blockName)
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public struct EndProfilingBlockArgs
	{
		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string blockName;

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x16E19D0", Offset = "0x16E19D0", VA = "0x16E19D0")]
		public EndProfilingBlockArgs(string blockName)
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class FailedDevice : IEquatable<FailedDevice>
	{
		[Token(Token = "0x20005CB")]
		public enum FailureType
		{
			[Token(Token = "0x4001FBA")]
			FAIL_UNKNOWN,
			[Token(Token = "0x4001FBB")]
			FAIL_CALIBRATION,
			[Token(Token = "0x4001FBC")]
			FAIL_FIRMWARE,
			[Token(Token = "0x4001FBD")]
			FAIL_TRANSPORT,
			[Token(Token = "0x4001FBE")]
			FAIL_CONTROl
		}

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D148", Offset = "0xB4D148")]
		private string <PnpId>k__BackingField;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D158", Offset = "0xB4D158")]
		private FailureType <Failure>k__BackingField;

		[Token(Token = "0x17000120")]
		public string PnpId
		{
			[Token(Token = "0x60013DB")]
			[Address(RVA = "0x16E1A58", Offset = "0x16E1A58", VA = "0x16E1A58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D13C", Offset = "0xB5D13C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013DC")]
			[Address(RVA = "0x16E1A60", Offset = "0x16E1A60", VA = "0x16E1A60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D14C", Offset = "0xB5D14C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public FailureType Failure
		{
			[Token(Token = "0x60013DD")]
			[Address(RVA = "0x16E1A68", Offset = "0x16E1A68", VA = "0x16E1A68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D15C", Offset = "0xB5D15C")]
			get
			{
				return default(FailureType);
			}
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x16E1A70", Offset = "0x16E1A70", VA = "0x16E1A70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D16C", Offset = "0xB5D16C")]
			private set
			{
			}
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x16E19D8", Offset = "0x16E19D8", VA = "0x16E19D8")]
		public FailedDevice()
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x16E1A38", Offset = "0x16E1A38", VA = "0x16E1A38", Slot = "4")]
		public bool Equals(FailedDevice other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002F6")]
	public class FailedDeviceList : List<FailedDevice>
	{
		[Token(Token = "0x17000122")]
		public bool IsEmpty
		{
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0x16E1B50", Offset = "0x16E1B50", VA = "0x16E1B50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x16E1A78", Offset = "0x16E1A78", VA = "0x16E1A78")]
		public FailedDeviceList()
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x16E1AE8", Offset = "0x16E1AE8", VA = "0x16E1AE8")]
		public FailedDeviceList Append(FailedDeviceList other)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F7")]
	public class Finger
	{
		[Token(Token = "0x20005CC")]
		public enum FingerType
		{
			[Token(Token = "0x4001FC0")]
			TYPE_THUMB = 0,
			[Token(Token = "0x4001FC1")]
			TYPE_INDEX = 1,
			[Token(Token = "0x4001FC2")]
			TYPE_MIDDLE = 2,
			[Token(Token = "0x4001FC3")]
			TYPE_RING = 3,
			[Token(Token = "0x4001FC4")]
			TYPE_PINKY = 4,
			[Token(Token = "0x4001FC5")]
			TYPE_UNKNOWN = -1
		}

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Bone[] bones;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FingerType Type;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Id;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int HandId;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector TipPosition;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector Direction;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Width;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Length;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IsExtended;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float TimeVisible;

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x16E1B9C", Offset = "0x16E1B9C", VA = "0x16E1B9C")]
		public Finger()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x16E1D58", Offset = "0x16E1D58", VA = "0x16E1D58")]
		public Finger(long frameId, int handId, int fingerId, float timeVisible, Vector tipPosition, Vector direction, float width, float length, bool isExtended, FingerType type, Bone metacarpal, Bone proximal, Bone intermediate, Bone distal)
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x16E1F3C", Offset = "0x16E1F3C", VA = "0x16E1F3C")]
		public Bone Bone(Bone.BoneType boneIx)
		{
			return null;
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x16E1F78", Offset = "0x16E1F78", VA = "0x16E1F78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F8")]
	public class Frame : IEquatable<Frame>
	{
		[Token(Token = "0x40012F2")]
		[ThreadStatic]
		private static Queue<Hand> _handPool;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long Id;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long Timestamp;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CurrentFramesPerSecond;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Hand> Hands;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint DeviceID;

		[Token(Token = "0x17000123")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB63008", Offset = "0xB63008")]
		public int SerializeLength
		{
			[Token(Token = "0x60013E8")]
			[Address(RVA = "0x16E20E4", Offset = "0x16E20E4", VA = "0x16E20E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000124")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB63018", Offset = "0xB63018")]
		public byte[] Serialize
		{
			[Token(Token = "0x60013E9")]
			[Address(RVA = "0x16E2144", Offset = "0x16E2144", VA = "0x16E2144")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x16E043C", Offset = "0x16E043C", VA = "0x16E043C")]
		public Frame(uint DeviceID = 1u)
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x16E208C", Offset = "0x16E208C", VA = "0x16E208C")]
		public Frame(long id, long timestamp, float fps, List<Hand> hands)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x16E21A4", Offset = "0x16E21A4", VA = "0x16E21A4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5D17C", Offset = "0xB5D17C")]
		public void Deserialize(byte[] arg)
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x16E2204", Offset = "0x16E2204", VA = "0x16E2204")]
		public Hand Hand(int id)
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x16E22D4", Offset = "0x16E22D4", VA = "0x16E22D4", Slot = "4")]
		public bool Equals(Frame other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x16E2310", Offset = "0x16E2310", VA = "0x16E2310", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x16E0C9C", Offset = "0x16E0C9C", VA = "0x16E0C9C")]
		public void ResizeHandList(int count)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F9")]
	public class Hand : IEquatable<Hand>
	{
		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long FrameId;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Id;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Finger> Fingers;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector PalmPosition;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector PalmVelocity;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector PalmNormal;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector Direction;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LeapQuaternion Rotation;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float GrabStrength;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float GrabAngle;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float PinchStrength;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float PinchDistance;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float PalmWidth;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector StabilizedPalmPosition;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector WristPosition;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float TimeVisible;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float Confidence;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool IsLeft;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Arm Arm;

		[Token(Token = "0x17000125")]
		public LeapTransform Basis
		{
			[Token(Token = "0x60013F4")]
			[Address(RVA = "0x16E296C", Offset = "0x16E296C", VA = "0x16E296C")]
			get
			{
				return default(LeapTransform);
			}
		}

		[Token(Token = "0x17000126")]
		public bool IsRight
		{
			[Token(Token = "0x60013F5")]
			[Address(RVA = "0x16E29EC", Offset = "0x16E29EC", VA = "0x16E29EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x16E2490", Offset = "0x16E2490", VA = "0x16E2490")]
		public Hand()
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x16E2654", Offset = "0x16E2654", VA = "0x16E2654")]
		public Hand(long frameID, int id, float confidence, float grabStrength, float grabAngle, float pinchStrength, float pinchDistance, float palmWidth, bool isLeft, float timeVisible, Arm arm, List<Finger> fingers, Vector palmPosition, Vector stabilizedPalmPosition, Vector palmVelocity, Vector palmNormal, LeapQuaternion palmOrientation, Vector direction, Vector wristPosition)
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x16E27C0", Offset = "0x16E27C0", VA = "0x16E27C0")]
		public Finger Finger(int id)
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x16E2890", Offset = "0x16E2890", VA = "0x16E2890", Slot = "4")]
		public bool Equals(Hand other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x16E28CC", Offset = "0x16E28CC", VA = "0x16E28CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002FA")]
	public interface IController : IDisposable
	{
		[Token(Token = "0x17000127")]
		bool IsConnected
		{
			[Token(Token = "0x60013FD")]
			get;
		}

		[Token(Token = "0x17000128")]
		Config Config
		{
			[Token(Token = "0x60013FE")]
			get;
		}

		[Token(Token = "0x17000129")]
		DeviceList Devices
		{
			[Token(Token = "0x60013FF")]
			get;
		}

		[Token(Token = "0x14000019")]
		event EventHandler<ConnectionEventArgs> Connect;

		[Token(Token = "0x1400001A")]
		event EventHandler<ConnectionLostEventArgs> Disconnect;

		[Token(Token = "0x1400001B")]
		event EventHandler<FrameEventArgs> FrameReady;

		[Token(Token = "0x1400001C")]
		event EventHandler<DeviceEventArgs> Device;

		[Token(Token = "0x1400001D")]
		event EventHandler<DeviceEventArgs> DeviceLost;

		[Token(Token = "0x1400001E")]
		event EventHandler<DeviceFailureEventArgs> DeviceFailure;

		[Token(Token = "0x1400001F")]
		event EventHandler<LogEventArgs> LogMessage;

		[Token(Token = "0x14000020")]
		event EventHandler<PolicyEventArgs> PolicyChange;

		[Token(Token = "0x14000021")]
		event EventHandler<ConfigChangeEventArgs> ConfigChange;

		[Token(Token = "0x14000022")]
		event EventHandler<DistortionEventArgs> DistortionChange;

		[Token(Token = "0x14000023")]
		event EventHandler<ImageEventArgs> ImageReady;

		[Token(Token = "0x14000024")]
		event EventHandler<PointMappingChangeEventArgs> PointMappingChange;

		[Token(Token = "0x14000025")]
		event EventHandler<HeadPoseEventArgs> HeadPoseChange;

		[Token(Token = "0x60013F6")]
		Frame Frame(int history = 0);

		[Token(Token = "0x60013F7")]
		Frame GetTransformedFrame(LeapTransform trs, int history = 0);

		[Token(Token = "0x60013F8")]
		Frame GetInterpolatedFrame(long time);

		[Token(Token = "0x60013F9")]
		void SetPolicy(Controller.PolicyFlag policy);

		[Token(Token = "0x60013FA")]
		void ClearPolicy(Controller.PolicyFlag policy);

		[Token(Token = "0x60013FB")]
		bool IsPolicySet(Controller.PolicyFlag policy);

		[Token(Token = "0x60013FC")]
		long Now();
	}
	[Token(Token = "0x20002FB")]
	public class Image
	{
		[Token(Token = "0x20005CD")]
		public enum FormatType
		{
			[Token(Token = "0x4001FC7")]
			INFRARED,
			[Token(Token = "0x4001FC8")]
			IBRG
		}

		[Token(Token = "0x20005CE")]
		public enum ImageType
		{
			[Token(Token = "0x4001FCA")]
			DEFAULT,
			[Token(Token = "0x4001FCB")]
			RAW
		}

		[Token(Token = "0x20005CF")]
		public enum CameraType
		{
			[Token(Token = "0x4001FCD")]
			LEFT,
			[Token(Token = "0x4001FCE")]
			RIGHT
		}

		[Token(Token = "0x20005D0")]
		public enum CalibrationType
		{
			[Token(Token = "0x4001FD0")]
			INFRARED,
			[Token(Token = "0x4001FD1")]
			VISIBLE
		}

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ImageData leftImage;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ImageData rightImage;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long frameId;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long timestamp;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint deviceId;

		[Token(Token = "0x1700012A")]
		public uint NumBytes
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0x16E2D88", Offset = "0x16E2D88", VA = "0x16E2D88")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x1700012B")]
		public long SequenceId
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0x16E3298", Offset = "0x16E3298", VA = "0x16E3298")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700012C")]
		public int Width
		{
			[Token(Token = "0x6001425")]
			[Address(RVA = "0x16E32A0", Offset = "0x16E32A0", VA = "0x16E32A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012D")]
		public int Height
		{
			[Token(Token = "0x6001426")]
			[Address(RVA = "0x16E32BC", Offset = "0x16E32BC", VA = "0x16E32BC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012E")]
		public int BytesPerPixel
		{
			[Token(Token = "0x6001427")]
			[Address(RVA = "0x16E32D8", Offset = "0x16E32D8", VA = "0x16E32D8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012F")]
		public FormatType Format
		{
			[Token(Token = "0x6001428")]
			[Address(RVA = "0x16E3248", Offset = "0x16E3248", VA = "0x16E3248")]
			get
			{
				return default(FormatType);
			}
		}

		[Token(Token = "0x17000130")]
		public ImageType Type
		{
			[Token(Token = "0x6001429")]
			[Address(RVA = "0x16E2FF4", Offset = "0x16E2FF4", VA = "0x16E2FF4")]
			get
			{
				return default(ImageType);
			}
		}

		[Token(Token = "0x17000131")]
		public int DistortionWidth
		{
			[Token(Token = "0x600142A")]
			[Address(RVA = "0x16E32F4", Offset = "0x16E32F4", VA = "0x16E32F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000132")]
		public int DistortionHeight
		{
			[Token(Token = "0x600142B")]
			[Address(RVA = "0x16E336C", Offset = "0x16E336C", VA = "0x16E336C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000133")]
		public long Timestamp
		{
			[Token(Token = "0x6001430")]
			[Address(RVA = "0x16E34D0", Offset = "0x16E34D0", VA = "0x16E34D0")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000134")]
		public uint DeviceID
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0x16E34D8", Offset = "0x16E34D8", VA = "0x16E34D8")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x16E2AA0", Offset = "0x16E2AA0", VA = "0x16E2AA0")]
		public Image(long frameId, long timestamp, ImageData leftImage, ImageData rightImage, uint deviceId)
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x16E2CF8", Offset = "0x16E2CF8", VA = "0x16E2CF8")]
		private ImageData imageData(CameraType camera)
		{
			return null;
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x16E2D10", Offset = "0x16E2D10", VA = "0x16E2D10")]
		public byte[] Data(CameraType camera)
		{
			return null;
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x16E2D4C", Offset = "0x16E2D4C", VA = "0x16E2D4C")]
		public uint ByteOffset(CameraType camera)
		{
			return default(uint);
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x16E2DF0", Offset = "0x16E2DF0", VA = "0x16E2DF0")]
		public float[] Distortion(CameraType camera)
		{
			return null;
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x16E2E38", Offset = "0x16E2E38", VA = "0x16E2E38")]
		public Vector PixelToRectilinear(CameraType camera, Vector pixel)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x16E2EDC", Offset = "0x16E2EDC", VA = "0x16E2EDC")]
		public Vector RectilinearToPixel(CameraType camera, Vector ray)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x16E2F80", Offset = "0x16E2F80", VA = "0x16E2F80")]
		public bool Equals(Image other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x16E3034", Offset = "0x16E3034", VA = "0x16E3034", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x16E33E0", Offset = "0x16E33E0", VA = "0x16E33E0")]
		public float RayOffsetX(CameraType camera)
		{
			return default(float);
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x16E341C", Offset = "0x16E341C", VA = "0x16E341C")]
		public float RayOffsetY(CameraType camera)
		{
			return default(float);
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x16E3458", Offset = "0x16E3458", VA = "0x16E3458")]
		public float RayScaleX(CameraType camera)
		{
			return default(float);
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x16E3494", Offset = "0x16E3494", VA = "0x16E3494")]
		public float RayScaleY(CameraType camera)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20002FC")]
	public struct LeapQuaternion : IEquatable<LeapQuaternion>
	{
		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LeapQuaternion Identity;

		[Token(Token = "0x17000135")]
		public float Magnitude
		{
			[Token(Token = "0x6001439")]
			[Address(RVA = "0x162D710", Offset = "0x162D710", VA = "0x162D710")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000136")]
		public float MagnitudeSquared
		{
			[Token(Token = "0x600143A")]
			[Address(RVA = "0x162D7C8", Offset = "0x162D7C8", VA = "0x162D7C8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000137")]
		public LeapQuaternion Normalized
		{
			[Token(Token = "0x600143B")]
			[Address(RVA = "0x162D7F0", Offset = "0x162D7F0", VA = "0x162D7F0")]
			get
			{
				return default(LeapQuaternion);
			}
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x162D268", Offset = "0x162D268", VA = "0x162D268")]
		public LeapQuaternion(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x162D274", Offset = "0x162D274", VA = "0x162D274")]
		public LeapQuaternion(LeapQuaternion quaternion)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x162D280", Offset = "0x162D280", VA = "0x162D280")]
		public LeapQuaternion(LEAP_QUATERNION quaternion)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x162D28C", Offset = "0x162D28C", VA = "0x162D28C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x162D520", Offset = "0x162D520", VA = "0x162D520", Slot = "4")]
		public bool Equals(LeapQuaternion v)
		{
			return default(bool);
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x162D5D8", Offset = "0x162D5D8", VA = "0x162D5D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x162D668", Offset = "0x162D668", VA = "0x162D668")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x162D8F4", Offset = "0x162D8F4", VA = "0x162D8F4")]
		public LeapQuaternion Multiply(LeapQuaternion rhs)
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x162D970", Offset = "0x162D970", VA = "0x162D970", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002FD")]
	public struct LeapTransform
	{
		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly LeapTransform Identity;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector _translation;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector _scale;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LeapQuaternion _quaternion;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _quaternionDirty;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _flip;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector _flipAxes;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector _xBasis;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector _yBasis;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector _zBasis;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector _xBasisScaled;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector _yBasisScaled;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector _zBasisScaled;

		[Token(Token = "0x17000138")]
		public Vector xBasis
		{
			[Token(Token = "0x6001447")]
			[Address(RVA = "0x162E904", Offset = "0x162E904", VA = "0x162E904")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x6001448")]
			[Address(RVA = "0x162E910", Offset = "0x162E910", VA = "0x162E910")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public Vector yBasis
		{
			[Token(Token = "0x6001449")]
			[Address(RVA = "0x162E9C0", Offset = "0x162E9C0", VA = "0x162E9C0")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600144A")]
			[Address(RVA = "0x162E9CC", Offset = "0x162E9CC", VA = "0x162E9CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Vector zBasis
		{
			[Token(Token = "0x600144B")]
			[Address(RVA = "0x162EA7C", Offset = "0x162EA7C", VA = "0x162EA7C")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600144C")]
			[Address(RVA = "0x162EA88", Offset = "0x162EA88", VA = "0x162EA88")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public Vector translation
		{
			[Token(Token = "0x600144D")]
			[Address(RVA = "0x162EB38", Offset = "0x162EB38", VA = "0x162EB38")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600144E")]
			[Address(RVA = "0x162EB44", Offset = "0x162EB44", VA = "0x162EB44")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public Vector scale
		{
			[Token(Token = "0x600144F")]
			[Address(RVA = "0x162EB50", Offset = "0x162EB50", VA = "0x162EB50")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x6001450")]
			[Address(RVA = "0x162EB5C", Offset = "0x162EB5C", VA = "0x162EB5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public LeapQuaternion rotation
		{
			[Token(Token = "0x6001451")]
			[Address(RVA = "0x162EC58", Offset = "0x162EC58", VA = "0x162EC58")]
			get
			{
				return default(LeapQuaternion);
			}
			[Token(Token = "0x6001452")]
			[Address(RVA = "0x162E188", Offset = "0x162E188", VA = "0x162E188")]
			set
			{
			}
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x162E0A0", Offset = "0x162E0A0", VA = "0x162E0A0")]
		public LeapTransform(Vector translation, LeapQuaternion rotation)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x162DBC8", Offset = "0x162DBC8", VA = "0x162DBC8")]
		public LeapTransform(Vector translation, LeapQuaternion rotation, Vector scale)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x162E3DC", Offset = "0x162E3DC", VA = "0x162E3DC")]
		public Vector TransformPoint(Vector point)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x162E514", Offset = "0x162E514", VA = "0x162E514")]
		public Vector TransformDirection(Vector direction)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x162E63C", Offset = "0x162E63C", VA = "0x162E63C")]
		public Vector TransformVelocity(Vector velocity)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x162E764", Offset = "0x162E764", VA = "0x162E764")]
		public LeapQuaternion TransformQuaternion(LeapQuaternion rhs)
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x162E838", Offset = "0x162E838", VA = "0x162E838")]
		public void MirrorX()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x162DC5C", Offset = "0x162DC5C", VA = "0x162DC5C")]
		public void MirrorZ()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public struct Matrix
	{
		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D178", Offset = "0xB4D178")]
		private Vector <xBasis>k__BackingField;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D188", Offset = "0xB4D188")]
		private Vector <yBasis>k__BackingField;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D198", Offset = "0xB4D198")]
		private Vector <zBasis>k__BackingField;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4D1A8", Offset = "0xB4D1A8")]
		private Vector <origin>k__BackingField;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Matrix Identity;

		[Token(Token = "0x1700013E")]
		public Vector xBasis
		{
			[Token(Token = "0x6001469")]
			[Address(RVA = "0x1630634", Offset = "0x1630634", VA = "0x1630634")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D32C", Offset = "0xB5D32C")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600146A")]
			[Address(RVA = "0x1630640", Offset = "0x1630640", VA = "0x1630640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D33C", Offset = "0xB5D33C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public Vector yBasis
		{
			[Token(Token = "0x600146B")]
			[Address(RVA = "0x163064C", Offset = "0x163064C", VA = "0x163064C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D34C", Offset = "0xB5D34C")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600146C")]
			[Address(RVA = "0x1630658", Offset = "0x1630658", VA = "0x1630658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D35C", Offset = "0xB5D35C")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public Vector zBasis
		{
			[Token(Token = "0x600146D")]
			[Address(RVA = "0x1630664", Offset = "0x1630664", VA = "0x1630664")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D36C", Offset = "0xB5D36C")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x600146E")]
			[Address(RVA = "0x1630670", Offset = "0x1630670", VA = "0x1630670")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D37C", Offset = "0xB5D37C")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public Vector origin
		{
			[Token(Token = "0x600146F")]
			[Address(RVA = "0x163067C", Offset = "0x163067C", VA = "0x163067C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D38C", Offset = "0xB5D38C")]
			get
			{
				return default(Vector);
			}
			[Token(Token = "0x6001470")]
			[Address(RVA = "0x1630688", Offset = "0x1630688", VA = "0x1630688")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D39C", Offset = "0xB5D39C")]
			set
			{
			}
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x162EE78", Offset = "0x162EE78", VA = "0x162EE78")]
		public static Matrix operator *(Matrix m1, Matrix m2)
		{
			return default(Matrix);
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x162EF7C", Offset = "0x162EF7C", VA = "0x162EF7C")]
		public float[] ToArray3x3(float[] output)
		{
			return null;
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x162F034", Offset = "0x162F034", VA = "0x162F034")]
		public double[] ToArray3x3(double[] output)
		{
			return null;
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x162F110", Offset = "0x162F110", VA = "0x162F110")]
		public float[] ToArray3x3()
		{
			return null;
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x162F16C", Offset = "0x162F16C", VA = "0x162F16C")]
		public float[] ToArray4x4(float[] output)
		{
			return null;
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x162F288", Offset = "0x162F288", VA = "0x162F288")]
		public double[] ToArray4x4(double[] output)
		{
			return null;
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x162F3D4", Offset = "0x162F3D4", VA = "0x162F3D4")]
		public float[] ToArray4x4()
		{
			return null;
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x162F430", Offset = "0x162F430", VA = "0x162F430")]
		public Matrix(Matrix other)
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x162F480", Offset = "0x162F480", VA = "0x162F480")]
		public Matrix(Vector xBasis, Vector yBasis, Vector zBasis)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x162F560", Offset = "0x162F560", VA = "0x162F560")]
		public Matrix(Vector xBasis, Vector yBasis, Vector zBasis, Vector origin)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x162F590", Offset = "0x162F590", VA = "0x162F590")]
		public Matrix(Vector axis, float angleRadians)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x162FA3C", Offset = "0x162FA3C", VA = "0x162FA3C")]
		public Matrix(Vector axis, float angleRadians, Vector translation)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x162FB44", Offset = "0x162FB44", VA = "0x162FB44")]
		public Matrix(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x162FCA4", Offset = "0x162FCA4", VA = "0x162FCA4")]
		public Matrix(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, float m30, float m31, float m32)
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x162F688", Offset = "0x162F688", VA = "0x162F688")]
		public void SetRotation(Vector axis, float angleRadians)
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x162FDD0", Offset = "0x162FDD0", VA = "0x162FDD0")]
		public Vector TransformPoint(Vector point)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x162FF08", Offset = "0x162FF08", VA = "0x162FF08")]
		public Vector TransformDirection(Vector direction)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x1630030", Offset = "0x1630030", VA = "0x1630030")]
		public Matrix RigidInverse()
		{
			return default(Matrix);
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x162EEA8", Offset = "0x162EEA8", VA = "0x162EEA8")]
		private Matrix _operator_mul(Matrix other)
		{
			return default(Matrix);
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x16302BC", Offset = "0x16302BC", VA = "0x16302BC")]
		public bool Equals(Matrix other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x1630470", Offset = "0x1630470", VA = "0x1630470", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002FF")]
	public enum MessageSeverity
	{
		[Token(Token = "0x4001328")]
		MESSAGE_UNKNOWN,
		[Token(Token = "0x4001329")]
		MESSAGE_CRITICAL,
		[Token(Token = "0x400132A")]
		MESSAGE_WARNING,
		[Token(Token = "0x400132B")]
		MESSAGE_INFORMATION
	}
	[Token(Token = "0x2000300")]
	public struct PointMapping
	{
		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long frameId;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long timestamp;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector[] points;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] ids;
	}
	[Token(Token = "0x2000301")]
	public static class TransformExtensions
	{
		[Token(Token = "0x6001472")]
		[Address(RVA = "0x16323B0", Offset = "0x16323B0", VA = "0x16323B0")]
		public static Frame Transform(this Frame frame, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x1632470", Offset = "0x1632470", VA = "0x1632470")]
		public static Frame TransformedCopy(this Frame frame, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x162DE4C", Offset = "0x162DE4C", VA = "0x162DE4C")]
		public static Hand Transform(this Hand hand, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x1632770", Offset = "0x1632770", VA = "0x1632770")]
		public static Hand TransformedCopy(this Hand hand, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x16325A0", Offset = "0x16325A0", VA = "0x16325A0")]
		public static Finger Transform(this Finger finger, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x16329F4", Offset = "0x16329F4", VA = "0x16329F4")]
		public static Finger TransformedCopy(this Finger finger, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x1632514", Offset = "0x1632514", VA = "0x1632514")]
		public static Bone Transform(this Bone bone, LeapTransform transform)
		{
			return null;
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x1632810", Offset = "0x1632810", VA = "0x1632810")]
		internal static void TransformGivenJoints(this Bone bone, LeapTransform transform)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x1632A94", Offset = "0x1632A94", VA = "0x1632A94")]
		public static Bone TransformedCopy(this Bone bone, LeapTransform transform)
		{
			return null;
		}
	}
	[Token(Token = "0x2000302")]
	public static class Constants
	{
		[Token(Token = "0x4001330")]
		public const float PI = (float)Math.PI;

		[Token(Token = "0x4001331")]
		public const float DEG_TO_RAD = (float)Math.PI / 180f;

		[Token(Token = "0x4001332")]
		public const float RAD_TO_DEG = 57.29578f;

		[Token(Token = "0x4001333")]
		public const float EPSILON = 1.1920929E-07f;
	}
	[Serializable]
	[Token(Token = "0x2000303")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45480", Offset = "0xB45480")]
	public struct Vector : IEquatable<Vector>
	{
		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector Zero;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector Ones;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector XAxis;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly Vector YAxis;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Vector ZAxis;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static readonly Vector Forward;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly Vector Backward;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly Vector Left;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly Vector Right;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly Vector Up;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly Vector Down;

		[Token(Token = "0x17000142")]
		public float Item
		{
			[Token(Token = "0x600148E")]
			[Address(RVA = "0x149FAC0", Offset = "0x149FAC0", VA = "0x149FAC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x149FB60", Offset = "0x149FB60", VA = "0x149FB60")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public float Magnitude
		{
			[Token(Token = "0x6001490")]
			[Address(RVA = "0x149FBFC", Offset = "0x149FBFC", VA = "0x149FBFC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000144")]
		public float MagnitudeSquared
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x149F710", Offset = "0x149F710", VA = "0x149F710")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000145")]
		public float Pitch
		{
			[Token(Token = "0x6001492")]
			[Address(RVA = "0x149FCAC", Offset = "0x149FCAC", VA = "0x149FCAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000146")]
		public float Roll
		{
			[Token(Token = "0x6001493")]
			[Address(RVA = "0x149FD2C", Offset = "0x149FD2C", VA = "0x149FD2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000147")]
		public float Yaw
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x149FDAC", Offset = "0x149FDAC", VA = "0x149FDAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000148")]
		public Vector Normalized
		{
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x149FE30", Offset = "0x149FE30", VA = "0x149FE30")]
			get
			{
				return default(Vector);
			}
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x149F2E0", Offset = "0x149F2E0", VA = "0x149F2E0")]
		public static Vector operator +(Vector v1, Vector v2)
		{
			return default(Vector);
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x149F2F0", Offset = "0x149F2F0", VA = "0x149F2F0")]
		public static Vector operator -(Vector v1, Vector v2)
		{
			return default(Vector);
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x149F300", Offset = "0x149F300", VA = "0x149F300")]
		public static Vector operator *(Vector v1, float scalar)
		{
			return default(Vector);
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x149F310", Offset = "0x149F310", VA = "0x149F310")]
		public static Vector operator *(float scalar, Vector v1)
		{
			return default(Vector);
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x149F324", Offset = "0x149F324", VA = "0x149F324")]
		public static Vector operator /(Vector v1, float scalar)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x149F334", Offset = "0x149F334", VA = "0x149F334")]
		public static Vector operator -(Vector v1)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x149F344", Offset = "0x149F344", VA = "0x149F344")]
		public static bool operator ==(Vector v1, Vector v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x149F418", Offset = "0x149F418", VA = "0x149F418")]
		public static bool operator !=(Vector v1, Vector v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x149F454", Offset = "0x149F454", VA = "0x149F454")]
		public float[] ToFloatArray()
		{
			return null;
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x14963A0", Offset = "0x14963A0", VA = "0x14963A0")]
		public Vector(float x, float y, float z)
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x149F4EC", Offset = "0x149F4EC", VA = "0x149F4EC")]
		public Vector(Vector vector)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x149F4F8", Offset = "0x149F4F8", VA = "0x149F4F8")]
		public float DistanceTo(Vector other)
		{
			return default(float);
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x149F5CC", Offset = "0x149F5CC", VA = "0x149F5CC")]
		public float AngleTo(Vector other)
		{
			return default(float);
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0x149F730", Offset = "0x149F730", VA = "0x149F730")]
		public float Dot(Vector other)
		{
			return default(float);
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x149F750", Offset = "0x149F750", VA = "0x149F750")]
		public Vector Cross(Vector other)
		{
			return default(Vector);
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x149F780", Offset = "0x149F780", VA = "0x149F780", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x149F37C", Offset = "0x149F37C", VA = "0x149F37C", Slot = "4")]
		public bool Equals(Vector v)
		{
			return default(bool);
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x149F9A8", Offset = "0x149F9A8", VA = "0x149F9A8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x149FA38", Offset = "0x149FA38", VA = "0x149FA38")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x149FF28", Offset = "0x149FF28", VA = "0x149FF28")]
		public static Vector Lerp(Vector a, Vector b, float t)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0x149FF50", Offset = "0x149FF50", VA = "0x149FF50", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000304")]
	public static class TestHandFactory
	{
		[Token(Token = "0x20005D1")]
		public enum UnitType
		{
			[Token(Token = "0x4001FD3")]
			LeapUnits,
			[Token(Token = "0x4001FD4")]
			UnityUnits
		}

		[Token(Token = "0x20005D2")]
		public enum TestHandPose
		{
			[Token(Token = "0x4001FD6")]
			HeadMountedA,
			[Token(Token = "0x4001FD7")]
			HeadMountedB,
			[Token(Token = "0x4001FD8")]
			DesktopModeA
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x1630884", Offset = "0x1630884", VA = "0x1630884")]
		public static Frame MakeTestFrame(int frameId, bool includeLeftHand = true, bool includeRightHand = true, TestHandPose handPose = TestHandPose.HeadMountedA, UnitType unitType = UnitType.LeapUnits)
		{
			return null;
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x1630A44", Offset = "0x1630A44", VA = "0x1630A44")]
		public static Hand MakeTestHand(bool isLeft, LeapTransform leftHandTransform, int frameId = 0, int handId = 0, UnitType unitType = UnitType.LeapUnits)
		{
			return null;
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x16310BC", Offset = "0x16310BC", VA = "0x16310BC")]
		public static Hand MakeTestHand(bool isLeft, int frameId = 0, int handId = 0, UnitType unitType = UnitType.LeapUnits)
		{
			return null;
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x16309E8", Offset = "0x16309E8", VA = "0x16309E8")]
		public static Hand MakeTestHand(bool isLeft, TestHandPose pose, int frameId = 0, int handId = 0, UnitType unitType = UnitType.LeapUnits)
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x163116C", Offset = "0x163116C", VA = "0x163116C")]
		public static LeapTransform GetTestPoseLeftHandTransform(TestHandPose pose)
		{
			return default(LeapTransform);
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x1630C84", Offset = "0x1630C84", VA = "0x1630C84")]
		private static Hand makeLeapSpaceTestHand(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x16313D0", Offset = "0x16313D0", VA = "0x16313D0")]
		private static LeapQuaternion angleAxis(float angle, Vector axis)
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x1631B30", Offset = "0x1631B30", VA = "0x1631B30")]
		private static LeapQuaternion rotationBetween(Vector fromDirection, Vector toDirection)
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x16314F4", Offset = "0x16314F4", VA = "0x16314F4")]
		private static Finger makeThumb(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x1631630", Offset = "0x1631630", VA = "0x1631630")]
		private static Finger makeIndexFinger(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x1631770", Offset = "0x1631770", VA = "0x1631770")]
		private static Finger makeMiddleFinger(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x16318B0", Offset = "0x16318B0", VA = "0x16318B0")]
		private static Finger makeRingFinger(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x16319F0", Offset = "0x16319F0", VA = "0x16319F0")]
		private static Finger makePinky(int frameId, int handId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x1631C5C", Offset = "0x1631C5C", VA = "0x1631C5C")]
		private static Finger makeFinger(Finger.FingerType name, Vector position, Vector forward, Vector up, float[] jointLengths, int frameId, int handId, int fingerId, bool isLeft)
		{
			return null;
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x16320F4", Offset = "0x16320F4", VA = "0x16320F4")]
		private static Bone makeBone(Bone.BoneType name, Vector proximalPosition, float length, float width, Vector direction, Vector up, bool isLeft)
		{
			return null;
		}
	}
	[Token(Token = "0x2000305")]
	public static class LeapTestProviderExtensions
	{
		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float MM_TO_M;

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x162DA40", Offset = "0x162DA40", VA = "0x162DA40")]
		public static LeapTransform GetLeapTransform(Vector3 position, Quaternion rotation)
		{
			return default(LeapTransform);
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x162DD28", Offset = "0x162DD28", VA = "0x162DD28")]
		public static void TransformToUnityUnits(this Hand hand)
		{
		}
	}
}
namespace Leap.Unity
{
	[Token(Token = "0x2000306")]
	public class SlidingMax
	{
		[Token(Token = "0x20005D3")]
		private struct IndexValuePair
		{
			[Token(Token = "0x4001FD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int index;

			[Token(Token = "0x4001FDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float value;

			[Token(Token = "0x60027D8")]
			[Address(RVA = "0x12B4FA0", Offset = "0x12B4FA0", VA = "0x12B4FA0")]
			public IndexValuePair(int index, float value)
			{
			}
		}

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _history;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _count;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Deque<IndexValuePair> _buffer;

		[Token(Token = "0x17000149")]
		public float Max
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0x12B4FAC", Offset = "0x12B4FAC", VA = "0x12B4FAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x12B4DF8", Offset = "0x12B4DF8", VA = "0x12B4DF8")]
		public SlidingMax(int history)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x12B4E80", Offset = "0x12B4E80", VA = "0x12B4E80")]
		public void AddValue(float value)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public class SmoothedFloat
	{
		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float value;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float delay;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool reset;

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x12B5010", Offset = "0x12B5010", VA = "0x12B5010")]
		public SmoothedFloat(float blend = 0f, float deltaTime = 1f)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x12B5058", Offset = "0x12B5058", VA = "0x12B5058")]
		public void SetBlend(float blend, float deltaTime = 1f)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x12B5070", Offset = "0x12B5070", VA = "0x12B5070")]
		public float Update(float input, float deltaTime = 1f)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x2000308")]
	public class SmoothedQuaternion
	{
		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion value;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool reset;

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x12B5138", Offset = "0x12B5138", VA = "0x12B5138")]
		public void SetBlend(float blend, float deltaTime = 1f)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x12B5150", Offset = "0x12B5150", VA = "0x12B5150")]
		public Quaternion Update(Quaternion input, float deltaTime = 1f)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x12B5288", Offset = "0x12B5288", VA = "0x12B5288")]
		public SmoothedQuaternion()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000309")]
	public class SmoothedVector3
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 value;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool reset;

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x12B5308", Offset = "0x12B5308", VA = "0x12B5308")]
		public void SetBlend(float blend, float deltaTime = 1f)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x12B5320", Offset = "0x12B5320", VA = "0x12B5320")]
		public Vector3 Update(Vector3 input, float deltaTime = 1f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x12B542C", Offset = "0x12B542C", VA = "0x12B542C")]
		public SmoothedVector3()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public interface IValueProxy
	{
		[Token(Token = "0x60014B7")]
		void OnPushValue();

		[Token(Token = "0x60014B8")]
		void OnPullValue();
	}
	[Token(Token = "0x200030B")]
	public abstract class AutoValueProxy : MonoBehaviour, IValueProxy
	{
		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private bool _autoPushingEnabled;

		[Token(Token = "0x1700014A")]
		public bool autoPushingEnabled
		{
			[Token(Token = "0x60014B9")]
			[Address(RVA = "0x1562B84", Offset = "0x1562B84", VA = "0x1562B84")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014BA")]
			[Address(RVA = "0x1562B8C", Offset = "0x1562B8C", VA = "0x1562B8C")]
			set
			{
			}
		}

		[Token(Token = "0x60014BB")]
		public abstract void OnPullValue();

		[Token(Token = "0x60014BC")]
		public abstract void OnPushValue();

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x1562B98", Offset = "0x1562B98", VA = "0x1562B98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x1562BB0", Offset = "0x1562BB0", VA = "0x1562BB0")]
		protected AutoValueProxy()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030C")]
	public class AssetFolder
	{
		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected UnityEngine.Object _assetFolder;

		[Token(Token = "0x1700014B")]
		public virtual string Path
		{
			[Token(Token = "0x60014C1")]
			[Address(RVA = "0x155A89C", Offset = "0x155A89C", VA = "0x155A89C", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60014C2")]
			[Address(RVA = "0x155A908", Offset = "0x155A908", VA = "0x155A908", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x155A85C", Offset = "0x155A85C", VA = "0x155A85C")]
		public AssetFolder()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x155A864", Offset = "0x155A864", VA = "0x155A864")]
		public AssetFolder(string path)
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class DelayBuffer<T>
	{
		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private RingBuffer<T> _buffer;

		[Token(Token = "0x1700014C")]
		public RingBuffer<T> Buffer
		{
			[Token(Token = "0x60014C3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public int Count
		{
			[Token(Token = "0x60014C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014E")]
		public bool IsFull
		{
			[Token(Token = "0x60014C5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		public bool IsEmpty
		{
			[Token(Token = "0x60014C6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000150")]
		public int Capacity
		{
			[Token(Token = "0x60014C7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60014C8")]
		public void Clear()
		{
		}

		[Token(Token = "0x60014C9")]
		public DelayBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60014CA")]
		public bool Add(T t, out T delayedT)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200030E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB454C8", Offset = "0xB454C8")]
	public abstract class DeltaBuffer<SampleType, DerivativeType> : IIndexable<SampleType>
	{
		[Token(Token = "0x20005D4")]
		protected struct ValueTimePair
		{
			[Token(Token = "0x4001FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SampleType value;

			[Token(Token = "0x4001FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;
		}

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected RingBuffer<ValueTimePair> _buffer;

		[Token(Token = "0x17000151")]
		public int Count
		{
			[Token(Token = "0x60014CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000152")]
		public bool IsFull
		{
			[Token(Token = "0x60014CD")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000153")]
		public bool IsEmpty
		{
			[Token(Token = "0x60014CE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000154")]
		public int Capacity
		{
			[Token(Token = "0x60014CF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000155")]
		public SampleType Item
		{
			[Token(Token = "0x60014D0")]
			get
			{
				return (SampleType)null;
			}
		}

		[Token(Token = "0x60014CB")]
		public DeltaBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60014D1")]
		public void Clear()
		{
		}

		[Token(Token = "0x60014D2")]
		public void Add(SampleType sample, float sampleTime)
		{
		}

		[Token(Token = "0x60014D3")]
		public SampleType Get(int idx)
		{
			return (SampleType)null;
		}

		[Token(Token = "0x60014D4")]
		public SampleType GetLatest()
		{
			return (SampleType)null;
		}

		[Token(Token = "0x60014D5")]
		public void Set(int idx, SampleType sample, float sampleTime)
		{
		}

		[Token(Token = "0x60014D6")]
		public void SetLatest(SampleType sample, float sampleTime)
		{
		}

		[Token(Token = "0x60014D7")]
		public float GetTime(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x60014D8")]
		public float GetLatestTime()
		{
			return default(float);
		}

		[Token(Token = "0x60014D9")]
		public abstract DerivativeType Delta();

		[Token(Token = "0x60014DA")]
		public IndexableEnumerator<SampleType> GetEnumerator()
		{
			return default(IndexableEnumerator<SampleType>);
		}
	}
	[Token(Token = "0x200030F")]
	public class DeltaBuffer : DeltaBuffer<Vector3, Vector3>
	{
		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x156945C", Offset = "0x156945C", VA = "0x156945C")]
		public DeltaBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x15694BC", Offset = "0x15694BC", VA = "0x15694BC", Slot = "6")]
		public override Vector3 Delta()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000310")]
	public class DeltaFloatBuffer : DeltaBuffer<float, float>
	{
		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x1569740", Offset = "0x1569740", VA = "0x1569740")]
		public DeltaFloatBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x15697A0", Offset = "0x15697A0", VA = "0x15697A0", Slot = "6")]
		public override float Delta()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000311")]
	public class DeltaQuaternionBuffer : DeltaBuffer<Quaternion, Vector3>
	{
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x15698EC", Offset = "0x15698EC", VA = "0x15698EC")]
		public DeltaQuaternionBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x156994C", Offset = "0x156994C", VA = "0x156994C", Slot = "6")]
		public override Vector3 Delta()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000312")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45500", Offset = "0xB45500")]
	public class Deque<T>
	{
		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] _array;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _front;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _count;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _indexMask;

		[Token(Token = "0x17000156")]
		public int Count
		{
			[Token(Token = "0x60014E2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000157")]
		public T Front
		{
			[Token(Token = "0x60014EA")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60014EB")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public T Back
		{
			[Token(Token = "0x60014EC")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60014ED")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public T Item
		{
			[Token(Token = "0x60014EE")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60014EF")]
			set
			{
			}
		}

		[Token(Token = "0x60014E1")]
		public Deque(int minCapacity = 8)
		{
		}

		[Token(Token = "0x60014E3")]
		public void Clear()
		{
		}

		[Token(Token = "0x60014E4")]
		public void PushBack(T t)
		{
		}

		[Token(Token = "0x60014E5")]
		public void PushFront(T t)
		{
		}

		[Token(Token = "0x60014E6")]
		public void PopBack()
		{
		}

		[Token(Token = "0x60014E7")]
		public void PopFront()
		{
		}

		[Token(Token = "0x60014E8")]
		public void PopBack(out T back)
		{
		}

		[Token(Token = "0x60014E9")]
		public void PopFront(out T front)
		{
		}

		[Token(Token = "0x60014F0")]
		public string ToDebugString()
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		private uint getBackIndex()
		{
			return default(uint);
		}

		[Token(Token = "0x60014F2")]
		private uint getIndex(uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60014F3")]
		private void doubleCapacityIfFull()
		{
		}

		[Token(Token = "0x60014F4")]
		private void recalculateIndexMask()
		{
		}

		[Token(Token = "0x60014F5")]
		private void checkForValidIndex(uint index)
		{
		}

		[Token(Token = "0x60014F6")]
		private void checkForEmpty(string actionName)
		{
		}
	}
	[Token(Token = "0x2000313")]
	public struct Either<A, B> : IEquatable<Either<A, B>>, IComparable, IComparable<Either<A, B>>
	{
		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly bool isA;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly A _a;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly B _b;

		[Token(Token = "0x1700015A")]
		public bool isB
		{
			[Token(Token = "0x60014F7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015B")]
		public Maybe<A> a
		{
			[Token(Token = "0x60014F8")]
			get
			{
				return default(Maybe<A>);
			}
		}

		[Token(Token = "0x1700015C")]
		public Maybe<B> b
		{
			[Token(Token = "0x60014F9")]
			get
			{
				return default(Maybe<B>);
			}
		}

		[Token(Token = "0x60014FA")]
		public Either(A a)
		{
		}

		[Token(Token = "0x60014FB")]
		public Either(B b)
		{
		}

		[Token(Token = "0x60014FC")]
		public void Match(Action<A> ifA, Action<B> ifB)
		{
		}

		[Token(Token = "0x60014FD")]
		public bool TryGetA(out A a)
		{
			return default(bool);
		}

		[Token(Token = "0x60014FE")]
		public bool TryGetB(out B b)
		{
			return default(bool);
		}

		[Token(Token = "0x60014FF")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001500")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001501")]
		public bool Equals(Either<A, B> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001502")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001503")]
		public int CompareTo(Either<A, B> other)
		{
			return default(int);
		}

		[Token(Token = "0x6001504")]
		public static bool operator ==(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001505")]
		public static bool operator !=(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001506")]
		public static bool operator >(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001507")]
		public static bool operator >=(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001508")]
		public static bool operator <(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001509")]
		public static bool operator <=(Either<A, B> either0, Either<A, B> either1)
		{
			return default(bool);
		}

		[Token(Token = "0x600150A")]
		public static implicit operator Either<A, B>(A a)
		{
			return default(Either<A, B>);
		}

		[Token(Token = "0x600150B")]
		public static implicit operator Either<A, B>(B b)
		{
			return default(Either<A, B>);
		}
	}
	[Serializable]
	[Token(Token = "0x2000314")]
	public struct Hash : IEnumerable, IEquatable<Hash>
	{
		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _hash;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Behaviour> _behaviourCache;

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xF40B68", Offset = "0xF40B68", VA = "0xF40B68")]
		public Hash(int hash)
		{
		}

		[Token(Token = "0x600150D")]
		public void Add<T>(T t)
		{
		}

		[Token(Token = "0x600150E")]
		public void AddRange<T>(List<T> sequence)
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xF40B70", Offset = "0xF40B70", VA = "0xF40B70")]
		public static Hash GetHierarchyHash(Transform root)
		{
			return default(Hash);
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xF40D94", Offset = "0xF40D94", VA = "0xF40D94")]
		public static Hash GetDataHash(Transform transform)
		{
			return default(Hash);
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xF40ED4", Offset = "0xF40ED4", VA = "0xF40ED4", Slot = "4")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xF40F34", Offset = "0xF40F34", VA = "0xF40F34", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xF40F3C", Offset = "0xF40F3C", VA = "0xF40F3C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xF40FC4", Offset = "0xF40FC4", VA = "0xF40FC4", Slot = "5")]
		public bool Equals(Hash other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xF40FD4", Offset = "0xF40FD4", VA = "0xF40FD4")]
		public static implicit operator Hash(int hash)
		{
			return default(Hash);
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xF40FDC", Offset = "0xF40FDC", VA = "0xF40FDC")]
		public static implicit operator int(Hash hash)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000315")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45538", Offset = "0xB45538")]
	public interface IIndexable<T>
	{
		[Token(Token = "0x1700015D")]
		T Item
		{
			[Token(Token = "0x6001518")]
			get;
		}

		[Token(Token = "0x1700015E")]
		int Count
		{
			[Token(Token = "0x6001519")]
			get;
		}
	}
	[Token(Token = "0x2000316")]
	public static class IIndexableExtensions
	{
		[Token(Token = "0x600151A")]
		public static IndexableEnumerator<T> GetEnumerator<T>(this IIndexable<T> indexable)
		{
			return default(IndexableEnumerator<T>);
		}

		[Token(Token = "0x600151B")]
		public static Query<T> Query<T>(this IIndexable<T> indexable)
		{
			return default(Query<T>);
		}
	}
	[Token(Token = "0x2000317")]
	public struct IndexableEnumerator<Element>
	{
		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IIndexable<Element> indexable;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int index;

		[Token(Token = "0x1700015F")]
		public Element Current
		{
			[Token(Token = "0x6001520")]
			get
			{
				return (Element)null;
			}
		}

		[Token(Token = "0x600151C")]
		public IndexableEnumerator(IIndexable<Element> indexable)
		{
		}

		[Token(Token = "0x600151D")]
		public IndexableEnumerator<Element> GetEnumerator()
		{
			return default(IndexableEnumerator<Element>);
		}

		[Token(Token = "0x600151E")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600151F")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000318")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45580", Offset = "0xB45580")]
	public interface IIndexableStruct<T, ThisIndexableType> where ThisIndexableType : struct, IIndexableStruct<T, ThisIndexableType>
	{
		[Token(Token = "0x17000160")]
		T Item
		{
			[Token(Token = "0x6001521")]
			get;
		}

		[Token(Token = "0x17000161")]
		int Count
		{
			[Token(Token = "0x6001522")]
			get;
		}
	}
	[Token(Token = "0x2000319")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB455B8", Offset = "0xB455B8")]
	public class BoxedIndexableStruct<Element, IndexableStruct> : IIndexable<Element>, IPoolable where IndexableStruct : struct, IIndexableStruct<Element, IndexableStruct>
	{
		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IndexableStruct? maybeIndexableStruct;

		[Token(Token = "0x17000162")]
		public Element Item
		{
			[Token(Token = "0x6001523")]
			get
			{
				return (Element)null;
			}
		}

		[Token(Token = "0x17000163")]
		public int Count
		{
			[Token(Token = "0x6001524")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001525")]
		public void OnSpawn()
		{
		}

		[Token(Token = "0x6001526")]
		public void OnRecycle()
		{
		}

		[Token(Token = "0x6001527")]
		public BoxedIndexableStruct()
		{
		}
	}
	[Token(Token = "0x200031A")]
	public static class BoxedIndexableStructExtensions
	{
		[Token(Token = "0x6001528")]
		public static void Recycle<Element, IndexableStruct>(this BoxedIndexableStruct<Element, IndexableStruct> pooledWrapper) where IndexableStruct : struct, IIndexableStruct<Element, IndexableStruct>
		{
		}
	}
	[Token(Token = "0x200031B")]
	public struct IndexableStructEnumerator<Element, IndexableStruct> where IndexableStruct : struct, IIndexableStruct<Element, IndexableStruct>
	{
		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IndexableStruct? maybeIndexable;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int index;

		[Token(Token = "0x17000164")]
		public Element Current
		{
			[Token(Token = "0x600152D")]
			get
			{
				return (Element)null;
			}
		}

		[Token(Token = "0x6001529")]
		public IndexableStructEnumerator(IndexableStruct indexable)
		{
		}

		[Token(Token = "0x600152A")]
		public IndexableStructEnumerator<Element, IndexableStruct> GetEnumerator()
		{
			return default(IndexableStructEnumerator<Element, IndexableStruct>);
		}

		[Token(Token = "0x600152B")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600152C")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public static class Maybe
	{
		[Token(Token = "0x20005D5")]
		public struct NoneType
		{
		}

		[Token(Token = "0x20005D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474AC", Offset = "0xB474AC")]
		private sealed class <>c__DisplayClass2_0<A, B>
		{
			[Token(Token = "0x4001FDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<B> maybeB;

			[Token(Token = "0x4001FDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<A, B> action;

			[Token(Token = "0x60027D9")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60027DA")]
			internal void <MatchAll>b__0(A a)
			{
			}
		}

		[Token(Token = "0x20005D7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474BC", Offset = "0xB474BC")]
		private sealed class <>c__DisplayClass2_1<A, B>
		{
			[Token(Token = "0x4001FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public A a;

			[Token(Token = "0x4001FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass2_0<A, B> CS$<>8__locals1;

			[Token(Token = "0x60027DB")]
			public <>c__DisplayClass2_1()
			{
			}

			[Token(Token = "0x60027DC")]
			internal void <MatchAll>b__1(B b)
			{
			}
		}

		[Token(Token = "0x20005D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474CC", Offset = "0xB474CC")]
		private sealed class <>c__DisplayClass3_0<A, B, C>
		{
			[Token(Token = "0x4001FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<B> maybeB;

			[Token(Token = "0x4001FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<C> maybeC;

			[Token(Token = "0x4001FE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<A, B, C> action;

			[Token(Token = "0x60027DD")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60027DE")]
			internal void <MatchAll>b__0(A a)
			{
			}
		}

		[Token(Token = "0x20005D9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474DC", Offset = "0xB474DC")]
		private sealed class <>c__DisplayClass3_1<A, B, C>
		{
			[Token(Token = "0x4001FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public A a;

			[Token(Token = "0x4001FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass3_0<A, B, C> CS$<>8__locals1;

			[Token(Token = "0x60027DF")]
			public <>c__DisplayClass3_1()
			{
			}

			[Token(Token = "0x60027E0")]
			internal void <MatchAll>b__1(B b)
			{
			}
		}

		[Token(Token = "0x20005DA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474EC", Offset = "0xB474EC")]
		private sealed class <>c__DisplayClass3_2<A, B, C>
		{
			[Token(Token = "0x4001FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public B b;

			[Token(Token = "0x4001FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass3_1<A, B, C> CS$<>8__locals2;

			[Token(Token = "0x60027E1")]
			public <>c__DisplayClass3_2()
			{
			}

			[Token(Token = "0x60027E2")]
			internal void <MatchAll>b__2(C c)
			{
			}
		}

		[Token(Token = "0x20005DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB474FC", Offset = "0xB474FC")]
		private sealed class <>c__DisplayClass4_0<A, B, C, D>
		{
			[Token(Token = "0x4001FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<B> maybeB;

			[Token(Token = "0x4001FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<C> maybeC;

			[Token(Token = "0x4001FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Maybe<D> maybeD;

			[Token(Token = "0x4001FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<A, B, C, D> action;

			[Token(Token = "0x60027E3")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60027E4")]
			internal void <MatchAll>b__0(A a)
			{
			}
		}

		[Token(Token = "0x20005DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4750C", Offset = "0xB4750C")]
		private sealed class <>c__DisplayClass4_1<A, B, C, D>
		{
			[Token(Token = "0x4001FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public A a;

			[Token(Token = "0x4001FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass4_0<A, B, C, D> CS$<>8__locals1;

			[Token(Token = "0x60027E5")]
			public <>c__DisplayClass4_1()
			{
			}

			[Token(Token = "0x60027E6")]
			internal void <MatchAll>b__1(B b)
			{
			}
		}

		[Token(Token = "0x20005DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4751C", Offset = "0xB4751C")]
		private sealed class <>c__DisplayClass4_2<A, B, C, D>
		{
			[Token(Token = "0x4001FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public B b;

			[Token(Token = "0x4001FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass4_1<A, B, C, D> CS$<>8__locals2;

			[Token(Token = "0x60027E7")]
			public <>c__DisplayClass4_2()
			{
			}

			[Token(Token = "0x60027E8")]
			internal void <MatchAll>b__2(C c)
			{
			}
		}

		[Token(Token = "0x20005DE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4752C", Offset = "0xB4752C")]
		private sealed class <>c__DisplayClass4_3<A, B, C, D>
		{
			[Token(Token = "0x4001FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public C c;

			[Token(Token = "0x4001FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public <>c__DisplayClass4_2<A, B, C, D> CS$<>8__locals3;

			[Token(Token = "0x60027E9")]
			public <>c__DisplayClass4_3()
			{
			}

			[Token(Token = "0x60027EA")]
			internal void <MatchAll>b__3(D d)
			{
			}
		}

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly NoneType None;

		[Token(Token = "0x600152E")]
		public static Maybe<T> Some<T>(T value)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x600152F")]
		public static void MatchAll<A, B>(Maybe<A> maybeA, Maybe<B> maybeB, Action<A, B> action)
		{
		}

		[Token(Token = "0x6001530")]
		public static void MatchAll<A, B, C>(Maybe<A> maybeA, Maybe<B> maybeB, Maybe<C> maybeC, Action<A, B, C> action)
		{
		}

		[Token(Token = "0x6001531")]
		public static void MatchAll<A, B, C, D>(Maybe<A> maybeA, Maybe<B> maybeB, Maybe<C> maybeC, Maybe<D> maybeD, Action<A, B, C, D> action)
		{
		}
	}
	[Token(Token = "0x200031D")]
	public struct Maybe<T> : IEquatable<Maybe<T>>, IComparable, IComparable<Maybe<T>>
	{
		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Maybe<T> None;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly bool hasValue;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T _t;

		[Token(Token = "0x17000165")]
		public T valueOrDefault
		{
			[Token(Token = "0x6001533")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6001534")]
		public Maybe(T t)
		{
		}

		[Token(Token = "0x6001535")]
		public static Maybe<T> Some(T t)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6001536")]
		public bool TryGetValue(out T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6001537")]
		public void Match(Action<T> ifValue)
		{
		}

		[Token(Token = "0x6001538")]
		public void Match(Action<T> ifValue, Action ifNot)
		{
		}

		[Token(Token = "0x6001539")]
		public K Match<K>(Func<T, K> ifValue, Func<K> ifNot)
		{
			return (K)null;
		}

		[Token(Token = "0x600153A")]
		public T ValueOr(T customDefault)
		{
			return (T)null;
		}

		[Token(Token = "0x600153B")]
		public Maybe<T> ValueOr(Maybe<T> maybeCustomDefault)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x600153C")]
		public Query<T> Query()
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600153D")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600153E")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600153F")]
		public bool Equals(Maybe<T> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001540")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6001541")]
		public int CompareTo(Maybe<T> other)
		{
			return default(int);
		}

		[Token(Token = "0x6001542")]
		public static bool operator ==(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001543")]
		public static bool operator !=(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001544")]
		public static bool operator >(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001545")]
		public static bool operator >=(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001546")]
		public static bool operator <(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001547")]
		public static bool operator <=(Maybe<T> maybe0, Maybe<T> maybe1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001548")]
		public static implicit operator Maybe<T>(T t)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6001549")]
		public static implicit operator Maybe<T>(Maybe.NoneType none)
		{
			return default(Maybe<T>);
		}
	}
	[Token(Token = "0x200031E")]
	public interface IMinHeapNode
	{
		[Token(Token = "0x17000166")]
		int heapIndex
		{
			[Token(Token = "0x600154B")]
			get;
			[Token(Token = "0x600154C")]
			set;
		}
	}
	[Token(Token = "0x200031F")]
	public class MinHeap<T> where T : IMinHeapNode, IComparable<T>
	{
		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] _array;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _count;

		[Token(Token = "0x17000167")]
		public int Count
		{
			[Token(Token = "0x600154D")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600154E")]
		public void Clear()
		{
		}

		[Token(Token = "0x600154F")]
		public void Insert(T element)
		{
		}

		[Token(Token = "0x6001550")]
		public void Remove(T element)
		{
		}

		[Token(Token = "0x6001551")]
		public T PeekMin()
		{
			return (T)null;
		}

		[Token(Token = "0x6001552")]
		public T RemoveMin()
		{
			return (T)null;
		}

		[Token(Token = "0x6001553")]
		private T removeAt(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6001554")]
		private void bubbleUp(T element)
		{
		}

		[Token(Token = "0x6001555")]
		public bool Validate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001556")]
		private void bubbleDown(T element)
		{
		}

		[Token(Token = "0x6001557")]
		private bool validateHeapInternal(string operation)
		{
			return default(bool);
		}

		[Token(Token = "0x6001558")]
		private static int getChildLeftIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001559")]
		private static int getChildRightIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600155A")]
		private static int getParentIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600155B")]
		private bool isValidIndex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600155C")]
		public MinHeap()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public abstract class MultiTypedList
	{
		[Serializable]
		[Token(Token = "0x20005DF")]
		public struct Key
		{
			[Token(Token = "0x4001FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int id;

			[Token(Token = "0x4001FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int index;
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x10A9FA0", Offset = "0x10A9FA0", VA = "0x10A9FA0")]
		protected MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45600", Offset = "0xB45600")]
	public abstract class MultiTypedList<BaseType> : MultiTypedList, IList<BaseType>, ICollection<BaseType>, IEnumerable<BaseType>, IEnumerable
	{
		[Token(Token = "0x20005E0")]
		public struct Enumerator : IEnumerator<BaseType>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private MultiTypedList<BaseType> _list;

			[Token(Token = "0x4001FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _index;

			[Token(Token = "0x4001FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private BaseType _current;

			[Token(Token = "0x17000424")]
			public BaseType Current
			{
				[Token(Token = "0x60027EC")]
				get
				{
					return (BaseType)null;
				}
			}

			[Token(Token = "0x17000425")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027ED")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027EB")]
			public Enumerator(MultiTypedList<BaseType> list)
			{
			}

			[Token(Token = "0x60027EE")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60027EF")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027F0")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x17000168")]
		public abstract int Count
		{
			[Token(Token = "0x600155E")]
			get;
		}

		[Token(Token = "0x17000169")]
		public bool IsReadOnly
		{
			[Token(Token = "0x600155F")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016A")]
		public abstract BaseType Item
		{
			[Token(Token = "0x6001560")]
			get;
			[Token(Token = "0x6001561")]
			set;
		}

		[Token(Token = "0x6001562")]
		public abstract void Add(BaseType obj);

		[Token(Token = "0x6001563")]
		public abstract void Clear();

		[Token(Token = "0x6001564")]
		public bool Contains(BaseType item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001565")]
		public void CopyTo(BaseType[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001566")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6001567")]
		public int IndexOf(BaseType item)
		{
			return default(int);
		}

		[Token(Token = "0x6001568")]
		public abstract void Insert(int index, BaseType item);

		[Token(Token = "0x6001569")]
		public bool Remove(BaseType item)
		{
			return default(bool);
		}

		[Token(Token = "0x600156A")]
		public abstract void RemoveAt(int index);

		[Token(Token = "0x600156B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600156C")]
		private IEnumerator<BaseType> System.Collections.Generic.IEnumerable<BaseType>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600156D")]
		protected MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class MultiTypedListUtil
	{
		[Token(Token = "0x600156E")]
		[Address(RVA = "0x10A9FA8", Offset = "0x10A9FA8", VA = "0x10A9FA8")]
		public MultiTypedListUtil()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000323")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45638", Offset = "0xB45638")]
	public class MultiTypedList<BaseType, A, B> : MultiTypedList<BaseType> where A : BaseType where B : BaseType
	{
		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<Key> _table;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<A> _a;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<B> _b;

		[Token(Token = "0x1700016B")]
		public override int Count
		{
			[Token(Token = "0x600156F")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016C")]
		public override BaseType Item
		{
			[Token(Token = "0x6001574")]
			get
			{
				return (BaseType)null;
			}
			[Token(Token = "0x6001575")]
			set
			{
			}
		}

		[Token(Token = "0x6001570")]
		public override void Add(BaseType obj)
		{
		}

		[Token(Token = "0x6001571")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001572")]
		public override void Insert(int index, BaseType obj)
		{
		}

		[Token(Token = "0x6001573")]
		public override void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001576")]
		protected Key addHelper(IList list, BaseType instance, int id)
		{
			return default(Key);
		}

		[Token(Token = "0x6001577")]
		protected virtual Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x6001578")]
		protected virtual IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x6001579")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class MultiTypedList<BaseType, A, B, C> : MultiTypedList<BaseType, A, B> where A : BaseType where B : BaseType where C : BaseType
	{
		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<C> _c;

		[Token(Token = "0x600157A")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x600157B")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x600157C")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600157D")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class MultiTypedList<BaseType, A, B, C, D> : MultiTypedList<BaseType, A, B, C> where A : BaseType where B : BaseType where C : BaseType where D : BaseType
	{
		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<D> _d;

		[Token(Token = "0x600157E")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x600157F")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x6001580")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001581")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000326")]
	public class MultiTypedList<BaseType, A, B, C, D, E> : MultiTypedList<BaseType, A, B, C, D> where A : BaseType where B : BaseType where C : BaseType where D : BaseType where E : BaseType
	{
		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<E> _e;

		[Token(Token = "0x6001582")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x6001583")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x6001584")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001585")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class MultiTypedList<BaseType, A, B, C, D, E, F> : MultiTypedList<BaseType, A, B, C, D, E> where A : BaseType where B : BaseType where C : BaseType where D : BaseType where E : BaseType where F : BaseType
	{
		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<F> _f;

		[Token(Token = "0x6001586")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x6001587")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x6001588")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001589")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class MultiTypedList<BaseType, A, B, C, D, E, F, G> : MultiTypedList<BaseType, A, B, C, D, E, F> where A : BaseType where B : BaseType where C : BaseType where D : BaseType where E : BaseType where F : BaseType where G : BaseType
	{
		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<G> _g;

		[Token(Token = "0x600158A")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x600158B")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x600158C")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600158D")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class MultiTypedList<BaseType, A, B, C, D, E, F, G, H> : MultiTypedList<BaseType, A, B, C, D, E, F, G> where A : BaseType where B : BaseType where C : BaseType where D : BaseType where E : BaseType where F : BaseType where G : BaseType where H : BaseType
	{
		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<H> _h;

		[Token(Token = "0x600158E")]
		protected override Key addInternal(BaseType obj)
		{
			return default(Key);
		}

		[Token(Token = "0x600158F")]
		protected override IList getList(int id)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001591")]
		public MultiTypedList()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public abstract class MultiTypedReference<BaseType> where BaseType : class
	{
		[Token(Token = "0x1700016D")]
		public abstract BaseType Value
		{
			[Token(Token = "0x6001593")]
			get;
			[Token(Token = "0x6001594")]
			set;
		}

		[Token(Token = "0x6001592")]
		public abstract void Clear();

		[Token(Token = "0x6001595")]
		protected MultiTypedReference()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public static class MultiTypedReferenceUtil
	{
	}
	[Token(Token = "0x200032C")]
	public class MultiTypedReference<BaseType, A, B> : MultiTypedReference<BaseType> where BaseType : class where A : BaseType where B : BaseType
	{
		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int _index;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<A> _a;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<B> _b;

		[NonSerialized]
		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected BaseType _cachedValue;

		[Token(Token = "0x1700016E")]
		public sealed override BaseType Value
		{
			[Token(Token = "0x6001597")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001598")]
			set
			{
			}
		}

		[Token(Token = "0x6001596")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001599")]
		protected virtual BaseType internalGet()
		{
			return null;
		}

		[Token(Token = "0x600159A")]
		protected virtual void internalSetAfterClear(BaseType obj)
		{
		}

		[Token(Token = "0x600159B")]
		public MultiTypedReference()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class MultiTypedReference<BaseType, A, B, C> : MultiTypedReference<BaseType, A, B> where BaseType : class where A : BaseType where B : BaseType where C : BaseType
	{
		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<C> _c;

		[Token(Token = "0x600159C")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600159D")]
		protected override BaseType internalGet()
		{
			return null;
		}

		[Token(Token = "0x600159E")]
		protected override void internalSetAfterClear(BaseType obj)
		{
		}

		[Token(Token = "0x600159F")]
		public MultiTypedReference()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class MultiTypedReference<BaseType, A, B, C, D> : MultiTypedReference<BaseType, A, B, C> where BaseType : class where A : BaseType where B : BaseType where C : BaseType where D : BaseType
	{
		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<D> _d;

		[Token(Token = "0x60015A0")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60015A1")]
		protected override BaseType internalGet()
		{
			return null;
		}

		[Token(Token = "0x60015A2")]
		protected override void internalSetAfterClear(BaseType obj)
		{
		}

		[Token(Token = "0x60015A3")]
		public MultiTypedReference()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public interface IPoolable
	{
		[Token(Token = "0x60015A4")]
		void OnSpawn();

		[Token(Token = "0x60015A5")]
		void OnRecycle();
	}
	[Token(Token = "0x2000330")]
	public static class Pool<T> where T : new()
	{
		[Token(Token = "0x4001376")]
		[ThreadStatic]
		private static Stack<T> _pool;

		[Token(Token = "0x60015A6")]
		public static T Spawn()
		{
			return (T)null;
		}

		[Token(Token = "0x60015A7")]
		public static void Recycle(T t)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000331")]
	public struct Pose : IEquatable<Pose>, IInterpolable<Pose>
	{
		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rotation;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Pose identity;

		[Token(Token = "0x1700016F")]
		public Pose inverse
		{
			[Token(Token = "0x60015AC")]
			[Address(RVA = "0x12A0D90", Offset = "0x12A0D90", VA = "0x12A0D90")]
			get
			{
				return default(Pose);
			}
		}

		[Token(Token = "0x17000170")]
		public Matrix4x4 matrix
		{
			[Token(Token = "0x60015AD")]
			[Address(RVA = "0x12A0EBC", Offset = "0x12A0EBC", VA = "0x12A0EBC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x12A0C50", Offset = "0x12A0C50", VA = "0x12A0C50")]
		public Pose(Vector3 position)
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x12A0CF8", Offset = "0x12A0CF8", VA = "0x12A0CF8")]
		public Pose(Quaternion rotation)
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x12A0CE4", Offset = "0x12A0CE4", VA = "0x12A0CE4")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x12A0FC8", Offset = "0x12A0FC8", VA = "0x12A0FC8")]
		public static Pose operator *(Pose A, Pose B)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x12A1124", Offset = "0x12A1124", VA = "0x12A1124")]
		public static Pose operator +(Pose A, Pose B)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x12A126C", Offset = "0x12A126C", VA = "0x12A126C")]
		public static Pose operator *(Pose pose, Vector3 localPosition)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x12A1398", Offset = "0x12A1398", VA = "0x12A1398")]
		public bool ApproxEquals(Pose other)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x12A1628", Offset = "0x12A1628", VA = "0x12A1628")]
		public static Pose Lerp(Pose a, Pose b, float t)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x12A17F8", Offset = "0x12A17F8", VA = "0x12A17F8")]
		public static Pose LerpUnclamped(Pose a, Pose b, float t)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x12A1954", Offset = "0x12A1954", VA = "0x12A1954")]
		public static Pose LerpUnclampedTimed(Pose a, float aTime, Pose b, float bTime, float extrapolateTime)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x12A1A7C", Offset = "0x12A1A7C", VA = "0x12A1A7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x12A1C0C", Offset = "0x12A1C0C", VA = "0x12A1C0C")]
		public string ToString(string format)
		{
			return null;
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x12A1DA8", Offset = "0x12A1DA8", VA = "0x12A1DA8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x12A1E48", Offset = "0x12A1E48", VA = "0x12A1E48", Slot = "4")]
		public bool Equals(Pose other)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x12A1F80", Offset = "0x12A1F80", VA = "0x12A1F80", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x12A202C", Offset = "0x12A202C", VA = "0x12A202C")]
		public static bool operator ==(Pose a, Pose b)
		{
			return default(bool);
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x12A2060", Offset = "0x12A2060", VA = "0x12A2060")]
		public static bool operator !=(Pose a, Pose b)
		{
			return default(bool);
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x12A2098", Offset = "0x12A2098", VA = "0x12A2098", Slot = "5")]
		public Pose CopyFrom(Pose h)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x12A20C4", Offset = "0x12A20C4", VA = "0x12A20C4", Slot = "6")]
		public bool FillLerped(Pose a, Pose b, float t)
		{
			return default(bool);
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x12A21BC", Offset = "0x12A21BC", VA = "0x12A21BC", Slot = "7")]
		public bool FillSplined(Pose a, Pose b, Pose c, Pose d, float t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000332")]
	public static class PoseExtensions
	{
		[Token(Token = "0x400137A")]
		public const float EPSILON = 0.0001f;

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x12A228C", Offset = "0x12A228C", VA = "0x12A228C")]
		public static Pose ToLocalPose(this Transform t)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x12A22F4", Offset = "0x12A22F4", VA = "0x12A22F4")]
		public static Pose ToPose(this Transform t)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x12A235C", Offset = "0x12A235C", VA = "0x12A235C")]
		public static Pose ToWorldPose(this Transform t)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x12A2360", Offset = "0x12A2360", VA = "0x12A2360")]
		public static void SetLocalPose(this Transform t, Pose localPose)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x12A23A8", Offset = "0x12A23A8", VA = "0x12A23A8")]
		public static void SetPose(this Transform t, Pose worldPose)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x12A23F0", Offset = "0x12A23F0", VA = "0x12A23F0")]
		public static void SetWorldPose(this Transform t, Pose worldPose)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x12A2420", Offset = "0x12A2420", VA = "0x12A2420")]
		public static Pose GetPose(this Matrix4x4 m)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x12A2650", Offset = "0x12A2650", VA = "0x12A2650")]
		public static Pose WithRotation(this Pose pose, Quaternion newRotation)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x12A266C", Offset = "0x12A266C", VA = "0x12A266C")]
		public static Pose WithPosition(this Pose pose, Vector3 newPosition)
		{
			return default(Pose);
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x12A2680", Offset = "0x12A2680", VA = "0x12A2680")]
		public static Vector3 GetVector3(this Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x12A2724", Offset = "0x12A2724", VA = "0x12A2724")]
		public static Quaternion GetQuaternion(this Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x12A13F0", Offset = "0x12A13F0", VA = "0x12A13F0")]
		public static bool ApproxEquals(this Vector3 v0, Vector3 v1)
		{
			return default(bool);
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x12A14D0", Offset = "0x12A14D0", VA = "0x12A14D0")]
		public static bool ApproxEquals(this Quaternion q0, Quaternion q1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000333")]
	public class ProduceConsumeBuffer<T>
	{
		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] _buffer;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _bufferMask;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _head;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _tail;

		[Token(Token = "0x17000171")]
		public int Capacity
		{
			[Token(Token = "0x60015CE")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000172")]
		public int Count
		{
			[Token(Token = "0x60015CF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60015CD")]
		public ProduceConsumeBuffer(int minCapacity)
		{
		}

		[Token(Token = "0x60015D0")]
		public bool TryEnqueue(ref T t)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D1")]
		public bool TryEnqueue(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D2")]
		public bool TryPeek(out T t)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D3")]
		public bool TryDequeue(out T t)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D4")]
		public bool TryDequeue()
		{
			return default(bool);
		}

		[Token(Token = "0x60015D5")]
		public bool TryDequeueAll(out T mostRecent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000334")]
	public struct ReadonlyHashSet<T>
	{
		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly HashSet<T> _set;

		[Token(Token = "0x17000173")]
		public int Count
		{
			[Token(Token = "0x60015D7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60015D6")]
		public ReadonlyHashSet(HashSet<T> set)
		{
		}

		[Token(Token = "0x60015D8")]
		public HashSet<T>.Enumerator GetEnumerator()
		{
			return default(HashSet<T>.Enumerator);
		}

		[Token(Token = "0x60015D9")]
		public bool Contains(T obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DA")]
		public Query<T> Query()
		{
			return default(Query<T>);
		}

		[Token(Token = "0x60015DB")]
		public static implicit operator ReadonlyHashSet<T>(HashSet<T> set)
		{
			return default(ReadonlyHashSet<T>);
		}

		[Token(Token = "0x60015DC")]
		public static implicit operator ReadonlyHashSet<T>(SerializableHashSet<T> set)
		{
			return default(ReadonlyHashSet<T>);
		}
	}
	[Token(Token = "0x2000335")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45680", Offset = "0xB45680")]
	public struct ReadonlyList<T>
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> _list;

		[Token(Token = "0x17000174")]
		public bool isValid
		{
			[Token(Token = "0x60015DE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000175")]
		public int Count
		{
			[Token(Token = "0x60015DF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000176")]
		public T Item
		{
			[Token(Token = "0x60015E0")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60015DD")]
		public ReadonlyList(List<T> list)
		{
		}

		[Token(Token = "0x60015E1")]
		public List<T>.Enumerator GetEnumerator()
		{
			return default(List<T>.Enumerator);
		}

		[Token(Token = "0x60015E2")]
		public static implicit operator ReadonlyList<T>(List<T> list)
		{
			return default(ReadonlyList<T>);
		}

		[Token(Token = "0x60015E3")]
		public int IndexOf(T item)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000336")]
	public static class ReadonlySliceExtensions
	{
		[Token(Token = "0x60015E4")]
		public static ReadonlySlice<T> ReadonlySlice<T>(this ReadonlyList<T> list, int beginIdx = -1, int endIdx = -1)
		{
			return default(ReadonlySlice<T>);
		}

		[Token(Token = "0x60015E5")]
		public static ReadonlySlice<T> FromIndex<T>(this ReadonlyList<T> list, int fromIdx)
		{
			return default(ReadonlySlice<T>);
		}
	}
	[Token(Token = "0x2000337")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB456C8", Offset = "0xB456C8")]
	public struct ReadonlySlice<T> : IIndexableStruct<T, ReadonlySlice<T>>
	{
		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ReadonlyList<T> _list;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _beginIdx;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _endIdx;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _direction;

		[Token(Token = "0x17000177")]
		public T Item
		{
			[Token(Token = "0x60015E7")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000178")]
		public int Count
		{
			[Token(Token = "0x60015E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60015E6")]
		public ReadonlySlice(ReadonlyList<T> list, int beginIdx, int endIdx)
		{
		}

		[Token(Token = "0x60015E9")]
		public IndexableStructEnumerator<T, ReadonlySlice<T>> GetEnumerator()
		{
			return default(IndexableStructEnumerator<T, ReadonlySlice<T>>);
		}

		[Token(Token = "0x60015EA")]
		public Query<T> Query()
		{
			return default(Query<T>);
		}
	}
	[Token(Token = "0x2000338")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45700", Offset = "0xB45700")]
	public class RingBuffer<T> : IIndexable<T>
	{
		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] arr;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int firstIdx;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int lastIdx;

		[Token(Token = "0x17000179")]
		public int Count
		{
			[Token(Token = "0x60015EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017A")]
		public int Capacity
		{
			[Token(Token = "0x60015ED")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017B")]
		public bool IsFull
		{
			[Token(Token = "0x60015EE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017C")]
		public bool IsEmpty
		{
			[Token(Token = "0x60015EF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017D")]
		public T Item
		{
			[Token(Token = "0x60015F0")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60015F1")]
			set
			{
			}
		}

		[Token(Token = "0x60015EB")]
		public RingBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x60015F2")]
		public void Clear()
		{
		}

		[Token(Token = "0x60015F3")]
		public void Add(T t)
		{
		}

		[Token(Token = "0x60015F4")]
		public T Get(int idx)
		{
			return (T)null;
		}

		[Token(Token = "0x60015F5")]
		public T GetLatest()
		{
			return (T)null;
		}

		[Token(Token = "0x60015F6")]
		public T GetOldest()
		{
			return (T)null;
		}

		[Token(Token = "0x60015F7")]
		public void Set(int idx, T t)
		{
		}

		[Token(Token = "0x60015F8")]
		public void SetLatest(T t)
		{
		}
	}
	[Token(Token = "0x2000339")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB45738", Offset = "0xB45738")]
	public class SDictionaryAttribute : PropertyAttribute
	{
		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x12B443C", Offset = "0x12B443C", VA = "0x12B443C")]
		public SDictionaryAttribute()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public abstract class SerializableDictionaryBase
	{
		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x12B444C", Offset = "0x12B444C", VA = "0x12B444C")]
		protected SerializableDictionaryBase()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public interface ICanReportDuplicateInformation
	{
	}
	[Token(Token = "0x200033C")]
	public interface ISerializableDictionary
	{
		[Token(Token = "0x60015FB")]
		float KeyDisplayRatio();
	}
	[Token(Token = "0x200033D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB45770", Offset = "0xB45770")]
	public class SerializableDictionary<TKey, TValue> : SerializableDictionaryBase, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ICanReportDuplicateInformation, ISerializationCallbackReceiver, ISerializableDictionary
	{
		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TKey> _keys;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<TValue> _values;

		[NonSerialized]
		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<TKey, TValue> _dictionary;

		[Token(Token = "0x1700017E")]
		public TValue Item
		{
			[Token(Token = "0x60015FC")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x60015FD")]
			set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public Dictionary<TKey, TValue>.KeyCollection Keys
		{
			[Token(Token = "0x60015FE")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public Dictionary<TKey, TValue>.ValueCollection Values
		{
			[Token(Token = "0x60015FF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000181")]
		public int Count
		{
			[Token(Token = "0x6001600")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001601")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6001602")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001603")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001604")]
		public bool ContainsValue(TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001605")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001606")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001607")]
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001608")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001609")]
		public static implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue> serializableDictionary)
		{
			return null;
		}

		[Token(Token = "0x600160A")]
		public virtual float KeyDisplayRatio()
		{
			return default(float);
		}

		[Token(Token = "0x600160B")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600160C")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x600160D")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x600160E")]
		public SerializableDictionary()
		{
		}
	}
	[Token(Token = "0x200033E")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB457A8", Offset = "0xB457A8")]
	public class SHashSetAttribute : PropertyAttribute
	{
		[Token(Token = "0x600160F")]
		[Address(RVA = "0x12B4444", Offset = "0x12B4444", VA = "0x12B4444")]
		public SHashSetAttribute()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public abstract class SerializableHashSetBase
	{
		[Token(Token = "0x6001610")]
		[Address(RVA = "0x12B4454", Offset = "0x12B4454", VA = "0x12B4454")]
		protected SerializableHashSetBase()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class SerializableHashSet<T> : SerializableHashSetBase, ICanReportDuplicateInformation, ISerializationCallbackReceiver, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<T> _values;

		[NonSerialized]
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HashSet<T> _set;

		[Token(Token = "0x17000182")]
		public int Count
		{
			[Token(Token = "0x6001611")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001612")]
		public bool Add(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001613")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001614")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001615")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001616")]
		public static implicit operator HashSet<T>(SerializableHashSet<T> serializableHashSet)
		{
			return null;
		}

		[Token(Token = "0x6001617")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001618")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001619")]
		public void ClearDuplicates()
		{
		}

		[Token(Token = "0x600161A")]
		public List<int> GetDuplicationInformation()
		{
			return null;
		}

		[Token(Token = "0x600161B")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x600161C")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x600161D")]
		private bool isNull(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600161E")]
		public SerializableHashSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000341")]
	public struct SerializableType : ISerializationCallbackReceiver
	{
		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[HideInInspector]
		private Type _type;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		[HideInInspector]
		private string _fullName;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Assembly[] _cachedAssemblies;

		[Token(Token = "0x17000183")]
		private static Assembly[] _assemblies
		{
			[Token(Token = "0x600161F")]
			[Address(RVA = "0x12B445C", Offset = "0x12B445C", VA = "0x12B445C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x12B4530", Offset = "0x12B4530", VA = "0x12B4530", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x12B465C", Offset = "0x12B465C", VA = "0x12B465C", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x12B46F4", Offset = "0x12B46F4", VA = "0x12B46F4")]
		public static implicit operator Type(SerializableType serializableType)
		{
			return null;
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x12B46F8", Offset = "0x12B46F8", VA = "0x12B46F8")]
		public static implicit operator SerializableType(Type type)
		{
			return default(SerializableType);
		}
	}
	[Token(Token = "0x2000342")]
	public static class SliceExtensions
	{
		[Token(Token = "0x6001625")]
		public static Slice<T> Slice<T>(this IList<T> list, int beginIdx = -1, int endIdx = -1)
		{
			return default(Slice<T>);
		}

		[Token(Token = "0x6001626")]
		public static Slice<T> FromIndex<T>(this IList<T> list, int fromIdx)
		{
			return default(Slice<T>);
		}
	}
	[Token(Token = "0x2000343")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB457F0", Offset = "0xB457F0")]
	public struct Slice<T> : IIndexableStruct<T, Slice<T>>
	{
		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IList<T> _list;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _beginIdx;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _endIdx;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _direction;

		[Token(Token = "0x17000184")]
		public T Item
		{
			[Token(Token = "0x6001628")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001629")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public int Count
		{
			[Token(Token = "0x600162A")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001627")]
		public Slice(IList<T> list, int beginIdx = 0, int endIdx = -1)
		{
		}

		[Token(Token = "0x600162B")]
		public IndexableStructEnumerator<T, Slice<T>> GetEnumerator()
		{
			return default(IndexableStructEnumerator<T, Slice<T>>);
		}

		[Token(Token = "0x600162C")]
		public Query<T> Query()
		{
			return default(Query<T>);
		}
	}
	[Serializable]
	[Token(Token = "0x2000344")]
	public class StreamingAsset : StreamingFolder, ISerializationCallbackReceiver
	{
		[Token(Token = "0x600162D")]
		[Address(RVA = "0x148E1B0", Offset = "0x148E1B0", VA = "0x148E1B0")]
		public StreamingAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000345")]
	public class StreamingFolder : AssetFolder, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _relativePath;

		[Token(Token = "0x17000186")]
		public override string Path
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0x148E1C0", Offset = "0x148E1C0", VA = "0x148E1C0", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600162F")]
			[Address(RVA = "0x148E240", Offset = "0x148E240", VA = "0x148E240", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0x148E2A0", Offset = "0x148E2A0", VA = "0x148E2A0", Slot = "7")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0x148E2A4", Offset = "0x148E2A4", VA = "0x148E2A4", Slot = "6")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x148E1B8", Offset = "0x148E1B8", VA = "0x148E1B8")]
		public StreamingFolder()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public static class Type<T>
	{
		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly bool isValueType;

		[Token(Token = "0x6001633")]
		static Type()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public abstract class AbstractHoldDetector : Detector
	{
		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected HandModelBase _handModel;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D3B0", Offset = "0xB4D3B0")]
		public bool ControlsTransform;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D3E8", Offset = "0xB4D3E8")]
		public bool ShowGizmos;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected int _lastUpdateFrame;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected bool _didChange;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Vector3 _position;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Quaternion _rotation;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3 _direction;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected Vector3 _normal;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected float _distance;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected float _lastHoldTime;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float _lastReleaseTime;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected Vector3 _lastPosition;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Quaternion _lastRotation;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Vector3 _lastDirection;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected Vector3 _lastNormal;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float _lastDistance;

		[Token(Token = "0x17000187")]
		public HandModelBase HandModel
		{
			[Token(Token = "0x6001635")]
			[Address(RVA = "0x1371678", Offset = "0x1371678", VA = "0x1371678")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001636")]
			[Address(RVA = "0x1371680", Offset = "0x1371680", VA = "0x1371680")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public virtual bool IsHolding
		{
			[Token(Token = "0x6001639")]
			[Address(RVA = "0x1371830", Offset = "0x1371830", VA = "0x1371830", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000189")]
		public virtual bool DidChangeFromLastFrame
		{
			[Token(Token = "0x600163A")]
			[Address(RVA = "0x137185C", Offset = "0x137185C", VA = "0x137185C", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		public virtual bool DidStartHold
		{
			[Token(Token = "0x600163B")]
			[Address(RVA = "0x1371888", Offset = "0x1371888", VA = "0x1371888", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018B")]
		public virtual bool DidRelease
		{
			[Token(Token = "0x600163C")]
			[Address(RVA = "0x13718E0", Offset = "0x13718E0", VA = "0x13718E0", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018C")]
		public float LastHoldTime
		{
			[Token(Token = "0x600163D")]
			[Address(RVA = "0x137193C", Offset = "0x137193C", VA = "0x137193C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018D")]
		public float LastReleaseTime
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0x1371968", Offset = "0x1371968", VA = "0x1371968")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018E")]
		public Vector3 Position
		{
			[Token(Token = "0x600163F")]
			[Address(RVA = "0x1371994", Offset = "0x1371994", VA = "0x1371994")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700018F")]
		public Vector3 LastActivePosition
		{
			[Token(Token = "0x6001640")]
			[Address(RVA = "0x13719C4", Offset = "0x13719C4", VA = "0x13719C4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000190")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6001641")]
			[Address(RVA = "0x13719D0", Offset = "0x13719D0", VA = "0x13719D0")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000191")]
		public Quaternion LastActiveRotation
		{
			[Token(Token = "0x6001642")]
			[Address(RVA = "0x1371A00", Offset = "0x1371A00", VA = "0x1371A00")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000192")]
		public Vector3 Direction
		{
			[Token(Token = "0x6001643")]
			[Address(RVA = "0x1371A0C", Offset = "0x1371A0C", VA = "0x1371A0C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000193")]
		public Vector3 LastActiveDirection
		{
			[Token(Token = "0x6001644")]
			[Address(RVA = "0x1371A18", Offset = "0x1371A18", VA = "0x1371A18")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000194")]
		public Vector3 Normal
		{
			[Token(Token = "0x6001645")]
			[Address(RVA = "0x1371A24", Offset = "0x1371A24", VA = "0x1371A24")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000195")]
		public Vector3 LastActiveNormal
		{
			[Token(Token = "0x6001646")]
			[Address(RVA = "0x1371A30", Offset = "0x1371A30", VA = "0x1371A30")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000196")]
		public float Distance
		{
			[Token(Token = "0x6001647")]
			[Address(RVA = "0x1371A3C", Offset = "0x1371A3C", VA = "0x1371A3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000197")]
		public float LastActiveDistance
		{
			[Token(Token = "0x6001648")]
			[Address(RVA = "0x1371A44", Offset = "0x1371A44", VA = "0x1371A44")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001634")]
		protected abstract void ensureUpToDate();

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x1371688", Offset = "0x1371688", VA = "0x1371688", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x1371824", Offset = "0x1371824", VA = "0x1371824", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x1371A4C", Offset = "0x1371A4C", VA = "0x1371A4C", Slot = "13")]
		protected virtual void changeState(bool shouldBeActive)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x1371ACC", Offset = "0x1371ACC", VA = "0x1371ACC")]
		protected AbstractHoldDetector()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class Detector : MonoBehaviour
	{
		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isActive;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D420", Offset = "0xB4D420")]
		public UnityEvent OnActivate;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D458", Offset = "0xB4D458")]
		public UnityEvent OnDeactivate;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Color OnColor;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Color OffColor;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Color LimitColor;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Color DirectionColor;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Color NormalColor;

		[Token(Token = "0x17000198")]
		public bool IsActive
		{
			[Token(Token = "0x600164B")]
			[Address(RVA = "0x156C43C", Offset = "0x156C43C", VA = "0x156C43C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x156C444", Offset = "0x156C444", VA = "0x156C444", Slot = "4")]
		public virtual void Activate()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x156C478", Offset = "0x156C478", VA = "0x156C478", Slot = "5")]
		public virtual void Deactivate()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x156C4A8", Offset = "0x156C4A8", VA = "0x156C4A8")]
		public Detector()
		{
		}
	}
	[Token(Token = "0x2000349")]
	public class DetectorLogicGate : Detector
	{
		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D490", Offset = "0xB4D490")]
		private List<Detector> Detectors;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D4DC", Offset = "0xB4D4DC")]
		public bool AddAllSiblingDetectorsOnAwake;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D514", Offset = "0xB4D514")]
		public LogicType GateType;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D54C", Offset = "0xB4D54C")]
		public bool Negate;

		[Token(Token = "0x600164F")]
		[Address(RVA = "0x156C51C", Offset = "0x156C51C", VA = "0x156C51C")]
		public void AddDetector(Detector detector)
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x156C6F8", Offset = "0x156C6F8", VA = "0x156C6F8")]
		public void RemoveDetector(Detector detector)
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0x156C7E4", Offset = "0x156C7E4", VA = "0x156C7E4")]
		public void AddAllSiblingDetectors()
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0x156C900", Offset = "0x156C900", VA = "0x156C900")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x156C5C0", Offset = "0x156C5C0", VA = "0x156C5C0")]
		private void activateDetector(Detector detector)
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0x156C9B4", Offset = "0x156C9B4", VA = "0x156C9B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x156CAE0", Offset = "0x156CAE0", VA = "0x156CAE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x156C9B8", Offset = "0x156C9B8", VA = "0x156C9B8")]
		protected void CheckDetectors()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x156CAEC", Offset = "0x156CAEC", VA = "0x156CAEC")]
		public DetectorLogicGate()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public enum LogicType
	{
		[Token(Token = "0x40013B4")]
		AndGate,
		[Token(Token = "0x40013B5")]
		OrGate
	}
	[Token(Token = "0x200034B")]
	public class ExtendedFingerDetector : Detector
	{
		[Token(Token = "0x20005E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4753C", Offset = "0xB4753C")]
		private sealed class <extendedFingerWatcher>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExtendedFingerDetector <>4__this;

			[Token(Token = "0x17000426")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027F4")]
				[Address(RVA = "0x1024DB4", Offset = "0x1024DB4", VA = "0x1024DB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000427")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027F6")]
				[Address(RVA = "0x1024E1C", Offset = "0x1024E1C", VA = "0x1024E1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027F1")]
			[Address(RVA = "0x1024A30", Offset = "0x1024A30", VA = "0x1024A30")]
			[DebuggerHidden]
			public <extendedFingerWatcher>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60027F2")]
			[Address(RVA = "0x1024AE4", Offset = "0x1024AE4", VA = "0x1024AE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027F3")]
			[Address(RVA = "0x1024AE8", Offset = "0x1024AE8", VA = "0x1024AE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027F5")]
			[Address(RVA = "0x1024DBC", Offset = "0x1024DBC", VA = "0x1024DBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D584", Offset = "0xB4D584")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4D584", Offset = "0xB4D584")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4D584", Offset = "0xB4D584")]
		public float Period;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D5F8", Offset = "0xB4D5F8")]
		public HandModelBase HandModel;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4D630", Offset = "0xB4D630")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D630", Offset = "0xB4D630")]
		public PointingState Thumb;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D690", Offset = "0xB4D690")]
		public PointingState Index;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D6C8", Offset = "0xB4D6C8")]
		public PointingState Middle;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D700", Offset = "0xB4D700")]
		public PointingState Ring;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D738", Offset = "0xB4D738")]
		public PointingState Pinky;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4D770", Offset = "0xB4D770")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4D770", Offset = "0xB4D770")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D770", Offset = "0xB4D770")]
		public int MinimumExtendedCount;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4D7E8", Offset = "0xB4D7E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D7E8", Offset = "0xB4D7E8")]
		public int MaximumExtendedCount;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4D83C", Offset = "0xB4D83C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D83C", Offset = "0xB4D83C")]
		public bool ShowGizmos;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private IEnumerator watcherCoroutine;

		[Token(Token = "0x6001658")]
		[Address(RVA = "0x10247CC", Offset = "0x10247CC", VA = "0x10247CC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0x102495C", Offset = "0x102495C", VA = "0x102495C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0x10249F0", Offset = "0x10249F0", VA = "0x10249F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x10249FC", Offset = "0x10249FC", VA = "0x10249FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x1024980", Offset = "0x1024980", VA = "0x1024980")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D58C", Offset = "0xB5D58C")]
		private IEnumerator extendedFingerWatcher()
		{
			return null;
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x1024A5C", Offset = "0x1024A5C", VA = "0x1024A5C")]
		private bool matchFingerState(Finger finger, PointingState requiredState)
		{
			return default(bool);
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x1024AB0", Offset = "0x1024AB0", VA = "0x1024AB0")]
		public ExtendedFingerDetector()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public enum PointingState
	{
		[Token(Token = "0x40013C2")]
		Extended,
		[Token(Token = "0x40013C3")]
		NotExtended,
		[Token(Token = "0x40013C4")]
		Either
	}
	[Token(Token = "0x200034D")]
	public class FingerDirectionDetector : Detector
	{
		[Token(Token = "0x20005E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4754C", Offset = "0xB4754C")]
		private sealed class <fingerPointingWatcher>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerDirectionDetector <>4__this;

			[Token(Token = "0x4001FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <selectedFinger>5__2;

			[Token(Token = "0x17000428")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60027FA")]
				[Address(RVA = "0x1025440", Offset = "0x1025440", VA = "0x1025440", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000429")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60027FC")]
				[Address(RVA = "0x10254A8", Offset = "0x10254A8", VA = "0x10254A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027F7")]
			[Address(RVA = "0x1024F0C", Offset = "0x1024F0C", VA = "0x1024F0C")]
			[DebuggerHidden]
			public <fingerPointingWatcher>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60027F8")]
			[Address(RVA = "0x10251C8", Offset = "0x10251C8", VA = "0x10251C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027F9")]
			[Address(RVA = "0x10251CC", Offset = "0x10251CC", VA = "0x10251CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60027FB")]
			[Address(RVA = "0x1025448", Offset = "0x1025448", VA = "0x1025448", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4D89C", Offset = "0xB4D89C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D89C", Offset = "0xB4D89C")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4D89C", Offset = "0xB4D89C")]
		public float Period;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D910", Offset = "0xB4D910")]
		public HandModelBase HandModel;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D948", Offset = "0xB4D948")]
		public Finger.FingerType FingerName;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4D980", Offset = "0xB4D980")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D980", Offset = "0xB4D980")]
		public PointingType PointingType;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4D9E0", Offset = "0xB4D9E0")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4D9E0", Offset = "0xB4D9E0")]
		public Vector3 PointingDirection;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DA9C", Offset = "0xB4DA9C")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4DA9C", Offset = "0xB4DA9C")]
		public Transform TargetObject;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DB58", Offset = "0xB4DB58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4DB58", Offset = "0xB4DB58")]
		public float OnAngle;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DBB0", Offset = "0xB4DBB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4DBB0", Offset = "0xB4DBB0")]
		public float OffAngle;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4DC08", Offset = "0xB4DC08")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DC08", Offset = "0xB4DC08")]
		public bool ShowGizmos;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private IEnumerator watcherCoroutine;

		[Token(Token = "0x600165F")]
		[Address(RVA = "0x1024E24", Offset = "0x1024E24", VA = "0x1024E24")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0x1024E38", Offset = "0x1024E38", VA = "0x1024E38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x1024ECC", Offset = "0x1024ECC", VA = "0x1024ECC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x1024ED8", Offset = "0x1024ED8", VA = "0x1024ED8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x1024E5C", Offset = "0x1024E5C", VA = "0x1024E5C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D5F0", Offset = "0xB5D5F0")]
		private IEnumerator fingerPointingWatcher()
		{
			return null;
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x1024F38", Offset = "0x1024F38", VA = "0x1024F38")]
		private Vector3 selectedDirection(Vector3 tipPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x1025118", Offset = "0x1025118", VA = "0x1025118")]
		private int selectedFingerOrdinal()
		{
			return default(int);
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x1025128", Offset = "0x1025128", VA = "0x1025128")]
		public FingerDirectionDetector()
		{
		}
	}
	[Token(Token = "0x200034E")]
	public class PalmDirectionDetector : Detector
	{
		[Token(Token = "0x20005E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4755C", Offset = "0xB4755C")]
		private sealed class <palmWatcher>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PalmDirectionDetector <>4__this;

			[Token(Token = "0x1700042A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002800")]
				[Address(RVA = "0x10AA630", Offset = "0x10AA630", VA = "0x10AA630", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002802")]
				[Address(RVA = "0x10AA698", Offset = "0x10AA698", VA = "0x10AA698", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60027FD")]
			[Address(RVA = "0x10AA15C", Offset = "0x10AA15C", VA = "0x10AA15C")]
			[DebuggerHidden]
			public <palmWatcher>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60027FE")]
			[Address(RVA = "0x10AA468", Offset = "0x10AA468", VA = "0x10AA468", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60027FF")]
			[Address(RVA = "0x10AA46C", Offset = "0x10AA46C", VA = "0x10AA46C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002801")]
			[Address(RVA = "0x10AA638", Offset = "0x10AA638", VA = "0x10AA638", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4DC68", Offset = "0xB4DC68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DC68", Offset = "0xB4DC68")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4DC68", Offset = "0xB4DC68")]
		public float Period;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DCDC", Offset = "0xB4DCDC")]
		public HandModelBase HandModel;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4DD14", Offset = "0xB4DD14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DD14", Offset = "0xB4DD14")]
		public PointingType PointingType;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DD74", Offset = "0xB4DD74")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4DD74", Offset = "0xB4DD74")]
		public Vector3 PointingDirection;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DE30", Offset = "0xB4DE30")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4DE30", Offset = "0xB4DE30")]
		public Transform TargetObject;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DEEC", Offset = "0xB4DEEC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4DEEC", Offset = "0xB4DEEC")]
		public float OnAngle;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DF44", Offset = "0xB4DF44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4DF44", Offset = "0xB4DF44")]
		public float OffAngle;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4DF9C", Offset = "0xB4DF9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DF9C", Offset = "0xB4DF9C")]
		public bool ShowGizmos;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private IEnumerator watcherCoroutine;

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x10AA074", Offset = "0x10AA074", VA = "0x10AA074")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x10AA088", Offset = "0x10AA088", VA = "0x10AA088")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x10AA11C", Offset = "0x10AA11C", VA = "0x10AA11C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x10AA128", Offset = "0x10AA128", VA = "0x10AA128")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x10AA0AC", Offset = "0x10AA0AC", VA = "0x10AA0AC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D654", Offset = "0xB5D654")]
		private IEnumerator palmWatcher()
		{
			return null;
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x10AA188", Offset = "0x10AA188", VA = "0x10AA188")]
		private Vector3 selectedDirection(Vector3 tipPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x10AA3CC", Offset = "0x10AA3CC", VA = "0x10AA3CC")]
		public PalmDirectionDetector()
		{
		}
	}
	[Token(Token = "0x200034F")]
	public enum PointingType
	{
		[Token(Token = "0x40013D9")]
		RelativeToCamera,
		[Token(Token = "0x40013DA")]
		RelativeToHorizon,
		[Token(Token = "0x40013DB")]
		RelativeToWorld,
		[Token(Token = "0x40013DC")]
		AtTarget
	}
	[Token(Token = "0x2000350")]
	public class PinchDetector : AbstractHoldDetector
	{
		[Token(Token = "0x40013DD")]
		protected const float MM_TO_M = 0.001f;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4DFFC", Offset = "0xB4DFFC")]
		public float ActivateDistance;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E0B8", Offset = "0xB4E0B8")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E0B8", Offset = "0xB4E0B8")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4E0B8", Offset = "0xB4E0B8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4E0B8", Offset = "0xB4E0B8")]
		public float DeactivateDistance;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected bool _isPinching;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected float _lastPinchTime;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected float _lastUnpinchTime;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Vector3 _pinchPos;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected Quaternion _pinchRotation;

		[Token(Token = "0x17000199")]
		public bool IsPinching
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0x10AA6A0", Offset = "0x10AA6A0", VA = "0x10AA6A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019A")]
		public bool DidStartPinch
		{
			[Token(Token = "0x600166F")]
			[Address(RVA = "0x10AA6AC", Offset = "0x10AA6AC", VA = "0x10AA6AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019B")]
		public bool DidEndPinch
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0x10AA6B8", Offset = "0x10AA6B8", VA = "0x10AA6B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x10AA6C4", Offset = "0x10AA6C4", VA = "0x10AA6C4", Slot = "14")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0x10AA764", Offset = "0x10AA764", VA = "0x10AA764")]
		private float GetPinchDistance(Hand hand)
		{
			return default(float);
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0x10AA874", Offset = "0x10AA874", VA = "0x10AA874", Slot = "6")]
		protected override void ensureUpToDate()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x10AAB44", Offset = "0x10AAB44", VA = "0x10AAB44")]
		public PinchDetector()
		{
		}
	}
	[Token(Token = "0x2000351")]
	public class ProximityDetector : Detector
	{
		[Token(Token = "0x20005E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4756C", Offset = "0xB4756C")]
		private sealed class <proximityWatcher>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ProximityDetector <>4__this;

			[Token(Token = "0x4002004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <proximityState>5__2;

			[Token(Token = "0x1700042C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002806")]
				[Address(RVA = "0x12A3CE4", Offset = "0x12A3CE4", VA = "0x12A3CE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002808")]
				[Address(RVA = "0x12A3D4C", Offset = "0x12A3D4C", VA = "0x12A3D4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002803")]
			[Address(RVA = "0x12A3864", Offset = "0x12A3864", VA = "0x12A3864")]
			[DebuggerHidden]
			public <proximityWatcher>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002804")]
			[Address(RVA = "0x12A3A9C", Offset = "0x12A3A9C", VA = "0x12A3A9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002805")]
			[Address(RVA = "0x12A3AA0", Offset = "0x12A3AA0", VA = "0x12A3AA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002807")]
			[Address(RVA = "0x12A3CEC", Offset = "0x12A3CEC", VA = "0x12A3CEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E150", Offset = "0xB4E150")]
		public ProximityEvent OnProximity;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4E188", Offset = "0xB4E188")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E188", Offset = "0xB4E188")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E188", Offset = "0xB4E188")]
		public float Period;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4E1FC", Offset = "0xB4E1FC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E1FC", Offset = "0xB4E1FC")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4E1FC", Offset = "0xB4E1FC")]
		public GameObject[] TargetObjects;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E2DC", Offset = "0xB4E2DC")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4E2DC", Offset = "0xB4E2DC")]
		public string TagName;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E398", Offset = "0xB4E398")]
		public bool UseLayersNotList;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E3D0", Offset = "0xB4E3D0")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4E3D0", Offset = "0xB4E3D0")]
		public LayerMask Layer;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4E488", Offset = "0xB4E488")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E488", Offset = "0xB4E488")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E488", Offset = "0xB4E488")]
		public float OnDistance;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E4FC", Offset = "0xB4E4FC")]
		public float OffDistance;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4E534", Offset = "0xB4E534")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E534", Offset = "0xB4E534")]
		public bool ShowGizmos;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private IEnumerator proximityWatcherCoroutine;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject _currentObj;

		[Token(Token = "0x1700019C")]
		public GameObject CurrentObject
		{
			[Token(Token = "0x6001675")]
			[Address(RVA = "0x12A35E8", Offset = "0x12A35E8", VA = "0x12A35E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x12A35F0", Offset = "0x12A35F0", VA = "0x12A35F0", Slot = "6")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x12A3604", Offset = "0x12A3604", VA = "0x12A3604")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x12A37FC", Offset = "0x12A37FC", VA = "0x12A37FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0x12A3830", Offset = "0x12A3830", VA = "0x12A3830")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x12A378C", Offset = "0x12A378C", VA = "0x12A378C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D6B8", Offset = "0xB5D6B8")]
		private IEnumerator proximityWatcher()
		{
			return null;
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x12A3890", Offset = "0x12A3890", VA = "0x12A3890")]
		private float distanceSquared(GameObject target)
		{
			return default(float);
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x12A3A24", Offset = "0x12A3A24", VA = "0x12A3A24")]
		public ProximityDetector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000352")]
	public class ProximityEvent : UnityEvent<GameObject>
	{
		[Token(Token = "0x600167D")]
		[Address(RVA = "0x12A3D54", Offset = "0x12A3D54", VA = "0x12A3D54")]
		public ProximityEvent()
		{
		}
	}
	[Token(Token = "0x2000353")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB45828", Offset = "0xB45828")]
	public class LeapPreferences : Attribute
	{
		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string header;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int order;

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x10A3F68", Offset = "0x10A3F68", VA = "0x10A3F68")]
		public LeapPreferences(string header, int order)
		{
		}
	}
	[Token(Token = "0x2000354")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB4585C", Offset = "0xB4585C")]
	public class LeapProjectCheckAttribute : Attribute
	{
		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string header;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int order;

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x10A45B4", Offset = "0x10A45B4", VA = "0x10A45B4")]
		public LeapProjectCheckAttribute(string header, int order)
		{
		}
	}
	[Token(Token = "0x2000355")]
	public static class LeapProjectChecks
	{
		[Token(Token = "0x20005E5")]
		private struct ProjectCheck
		{
			[Token(Token = "0x4002005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<bool> checkFunc;

			[Token(Token = "0x4002006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public LeapProjectCheckAttribute attribute;
		}

		[Token(Token = "0x20005E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4757C", Offset = "0xB4757C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4002007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MethodInfo method;

			[Token(Token = "0x6002809")]
			[Address(RVA = "0x10A4B98", Offset = "0x10A4B98", VA = "0x10A4B98")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x600280A")]
			[Address(RVA = "0x10A4E30", Offset = "0x10A4E30", VA = "0x10A4E30")]
			internal bool <ensureChecksLoaded>b__2()
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20005E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4758C", Offset = "0xB4758C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Assembly, ICollection<Type>> <>9__2_1;

			[Token(Token = "0x400200A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<ProjectCheck> <>9__2_0;

			[Token(Token = "0x600280C")]
			[Address(RVA = "0x10A4DDC", Offset = "0x10A4DDC", VA = "0x10A4DDC")]
			public <>c()
			{
			}

			[Token(Token = "0x600280D")]
			[Address(RVA = "0x10A4DE4", Offset = "0x10A4DE4", VA = "0x10A4DE4")]
			internal ICollection<Type> <ensureChecksLoaded>b__2_1(Assembly a)
			{
				return null;
			}

			[Token(Token = "0x600280E")]
			[Address(RVA = "0x10A4E08", Offset = "0x10A4E08", VA = "0x10A4E08")]
			internal int <ensureChecksLoaded>b__2_0(ProjectCheck a, ProjectCheck b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ProjectCheck> _projectChecks;

		[Token(Token = "0x40013F5")]
		private const string IGNORED_KEYS_PREF = "LeapUnityWindow_IgnoredKeys";

		[Token(Token = "0x1700019D")]
		private static HashSet<string> _ignoredKeys
		{
			[Token(Token = "0x6001682")]
			[Address(RVA = "0x10A4BA4", Offset = "0x10A4BA4", VA = "0x10A4BA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x10A45F0", Offset = "0x10A45F0", VA = "0x10A45F0")]
		private static void ensureChecksLoaded()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0x10A4BA0", Offset = "0x10A4BA0", VA = "0x10A4BA0")]
		public static void DrawProjectChecksGUI()
		{
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0x10A4BAC", Offset = "0x10A4BAC", VA = "0x10A4BAC")]
		public static bool CheckIgnoredKey(string editorPrefKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0x10A4BB4", Offset = "0x10A4BB4", VA = "0x10A4BB4")]
		public static void SetIgnoredKey(string editorPrefKey, bool ignore)
		{
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0x10A4BB8", Offset = "0x10A4BB8", VA = "0x10A4BB8")]
		public static void ClearAllIgnoredKeys()
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0x10A4BBC", Offset = "0x10A4BBC", VA = "0x10A4BBC")]
		private static HashSet<string> splitBySemicolonToSet(string ignoredKeys_semicolonDelimited)
		{
			return null;
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0x10A4CD8", Offset = "0x10A4CD8", VA = "0x10A4CD8")]
		private static string joinBySemicolon(HashSet<string> keys)
		{
			return null;
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x10A4D70", Offset = "0x10A4D70", VA = "0x10A4D70")]
		private static void uploadignoredKeyChangesToEditorPrefs()
		{
		}
	}
	[Token(Token = "0x2000356")]
	public class HandModelManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20005E8")]
		public class ModelGroup
		{
			[Token(Token = "0x400200B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string GroupName;

			[Token(Token = "0x400200C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public HandModelManager _handModelManager;

			[Token(Token = "0x400200D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandModelBase LeftModel;

			[Token(Token = "0x400200E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[HideInInspector]
			public bool IsLeftToBeSpawned;

			[Token(Token = "0x400200F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public HandModelBase RightModel;

			[Token(Token = "0x4002010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[HideInInspector]
			public bool IsRightToBeSpawned;

			[NonSerialized]
			[Token(Token = "0x4002011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<HandModelBase> modelList;

			[NonSerialized]
			[Token(Token = "0x4002012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<HandModelBase> modelsCheckedOut;

			[Token(Token = "0x4002013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool IsEnabled;

			[Token(Token = "0x4002014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
			public bool CanDuplicate;

			[Token(Token = "0x600280F")]
			[Address(RVA = "0xF3D320", Offset = "0xF3D320", VA = "0xF3D320")]
			public HandModelBase TryGetModel(Chirality chirality, ModelType modelType)
			{
				return null;
			}

			[Token(Token = "0x6002810")]
			[Address(RVA = "0xF3D5F8", Offset = "0xF3D5F8", VA = "0xF3D5F8")]
			public void ReturnToGroup(HandModelBase model)
			{
			}

			[Token(Token = "0x6002811")]
			[Address(RVA = "0xF3D6A0", Offset = "0xF3D6A0", VA = "0xF3D6A0")]
			public ModelGroup()
			{
			}
		}

		[Token(Token = "0x20005E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4759C", Offset = "0xB4759C")]
		private sealed class <enableGroup>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandModelManager <>4__this;

			[Token(Token = "0x4002018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string groupName;

			[Token(Token = "0x1700042E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002815")]
				[Address(RVA = "0x100AAF4", Offset = "0x100AAF4", VA = "0x100AAF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002817")]
				[Address(RVA = "0x100AB5C", Offset = "0x100AB5C", VA = "0x100AB5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002812")]
			[Address(RVA = "0x100A06C", Offset = "0x100A06C", VA = "0x100A06C")]
			[DebuggerHidden]
			public <enableGroup>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6002813")]
			[Address(RVA = "0x100A8A0", Offset = "0x100A8A0", VA = "0x100A8A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002814")]
			[Address(RVA = "0x100A8A4", Offset = "0x100A8A4", VA = "0x100A8A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002816")]
			[Address(RVA = "0x100AAFC", Offset = "0x100AAFC", VA = "0x100AAFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475AC", Offset = "0xB475AC")]
		private sealed class <disableGroup>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400201A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400201B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandModelManager <>4__this;

			[Token(Token = "0x400201C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string groupName;

			[Token(Token = "0x17000430")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600281B")]
				[Address(RVA = "0x100A830", Offset = "0x100A830", VA = "0x100A830", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000431")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600281D")]
				[Address(RVA = "0x100A898", Offset = "0x100A898", VA = "0x100A898", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002818")]
			[Address(RVA = "0x100A140", Offset = "0x100A140", VA = "0x100A140")]
			[DebuggerHidden]
			public <disableGroup>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6002819")]
			[Address(RVA = "0x100A61C", Offset = "0x100A61C", VA = "0x100A61C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600281A")]
			[Address(RVA = "0x100A620", Offset = "0x100A620", VA = "0x100A620", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600281C")]
			[Address(RVA = "0x100A838", Offset = "0x100A838", VA = "0x100A838", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005EB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475BC", Offset = "0xB475BC")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400201D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string groupName;

			[Token(Token = "0x600281E")]
			[Address(RVA = "0x100A5A8", Offset = "0x100A5A8", VA = "0x100A5A8")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x600281F")]
			[Address(RVA = "0x100A5B0", Offset = "0x100A5B0", VA = "0x100A5B0")]
			internal bool <toggleGroup>b__0(ModelGroup i)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20005EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475CC", Offset = "0xB475CC")]
		private sealed class <toggleGroup>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400201E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400201F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string groupName;

			[Token(Token = "0x4002021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HandModelManager <>4__this;

			[Token(Token = "0x4002022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass34_0 <>8__1;

			[Token(Token = "0x17000432")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002823")]
				[Address(RVA = "0x100AD30", Offset = "0x100AD30", VA = "0x100AD30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000433")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002825")]
				[Address(RVA = "0x100AD98", Offset = "0x100AD98", VA = "0x100AD98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002820")]
			[Address(RVA = "0x100A214", Offset = "0x100A214", VA = "0x100A214")]
			[DebuggerHidden]
			public <toggleGroup>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6002821")]
			[Address(RVA = "0x100AB64", Offset = "0x100AB64", VA = "0x100AB64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002822")]
			[Address(RVA = "0x100AB68", Offset = "0x100AB68", VA = "0x100AB68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002824")]
			[Address(RVA = "0x100AD38", Offset = "0x100AD38", VA = "0x100AD38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475DC", Offset = "0xB475DC")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4002023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string groupName;

			[Token(Token = "0x4002024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Predicate<ModelGroup> <>9__1;

			[Token(Token = "0x6002826")]
			[Address(RVA = "0x100A468", Offset = "0x100A468", VA = "0x100A468")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x6002827")]
			[Address(RVA = "0x100A5D4", Offset = "0x100A5D4", VA = "0x100A5D4")]
			internal bool <RemoveGroup>b__1(ModelGroup i)
			{
				return default(bool);
			}

			[Token(Token = "0x6002828")]
			[Address(RVA = "0x100A5F8", Offset = "0x100A5F8", VA = "0x100A5F8")]
			internal bool <RemoveGroup>b__0(ModelGroup i)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dictionary<int, HandRepresentation> graphicsHandReps;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<int, HandRepresentation> physicsHandReps;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool graphicsEnabled;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		protected bool physicsEnabled;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E594", Offset = "0xB4E594")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB4E594", Offset = "0xB4E594")]
		private LeapProvider _leapProvider;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E604", Offset = "0xB4E604")]
		private List<ModelGroup> ModelPool;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<HandRepresentation> activeHandReps;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<HandModelBase, ModelGroup> modelGroupMapping;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<HandModelBase, HandRepresentation> modelToHandRepMapping;

		[Token(Token = "0x1700019E")]
		public bool GraphicsEnabled
		{
			[Token(Token = "0x600168A")]
			[Address(RVA = "0x1009140", Offset = "0x1009140", VA = "0x1009140")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600168B")]
			[Address(RVA = "0x1009148", Offset = "0x1009148", VA = "0x1009148")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool PhysicsEnabled
		{
			[Token(Token = "0x600168C")]
			[Address(RVA = "0x1009154", Offset = "0x1009154", VA = "0x1009154")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600168D")]
			[Address(RVA = "0x100915C", Offset = "0x100915C", VA = "0x100915C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public LeapProvider leapProvider
		{
			[Token(Token = "0x6001691")]
			[Address(RVA = "0x1009580", Offset = "0x1009580", VA = "0x1009580")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001692")]
			[Address(RVA = "0x1009588", Offset = "0x1009588", VA = "0x1009588")]
			set
			{
			}
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x1009168", Offset = "0x1009168", VA = "0x1009168", Slot = "4")]
		protected virtual void OnUpdateFrame(Frame frame)
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x1009190", Offset = "0x1009190", VA = "0x1009190", Slot = "5")]
		protected virtual void OnFixedFrame(Frame frame)
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x10091B8", Offset = "0x10091B8", VA = "0x10091B8", Slot = "6")]
		protected virtual void UpdateHandRepresentations(Dictionary<int, HandRepresentation> all_hand_reps, ModelType modelType, Frame frame)
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x1009764", Offset = "0x1009764", VA = "0x1009764")]
		public void ReturnToPool(HandModelBase model)
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x10093B4", Offset = "0x10093B4", VA = "0x10093B4")]
		public HandRepresentation MakeHandRepresentation(Hand hand, ModelType modelType)
		{
			return null;
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x10099A4", Offset = "0x10099A4", VA = "0x10099A4")]
		public void RemoveHandRepresentation(HandRepresentation handRepresentation)
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x1009A0C", Offset = "0x1009A0C", VA = "0x1009A0C", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x1009BB8", Offset = "0x1009BB8", VA = "0x1009BB8", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x1009C8C", Offset = "0x1009C8C", VA = "0x1009C8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x1009D24", Offset = "0x1009D24", VA = "0x1009D24")]
		private void InitializeModelGroup(ModelGroup collectionGroup)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x1009FC4", Offset = "0x1009FC4", VA = "0x1009FC4")]
		public void EnableGroup(string groupName)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x1009FF0", Offset = "0x1009FF0", VA = "0x1009FF0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D71C", Offset = "0xB5D71C")]
		private IEnumerator enableGroup(string groupName)
		{
			return null;
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x100A098", Offset = "0x100A098", VA = "0x100A098")]
		public void DisableGroup(string groupName)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x100A0C4", Offset = "0x100A0C4", VA = "0x100A0C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D780", Offset = "0xB5D780")]
		private IEnumerator disableGroup(string groupName)
		{
			return null;
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x100A16C", Offset = "0x100A16C", VA = "0x100A16C")]
		public void ToggleGroup(string groupName)
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x100A198", Offset = "0x100A198", VA = "0x100A198")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D7E4", Offset = "0xB5D7E4")]
		private IEnumerator toggleGroup(string groupName)
		{
			return null;
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x100A240", Offset = "0x100A240", VA = "0x100A240")]
		public void AddNewGroup(string groupName, HandModelBase leftModel, HandModelBase rightModel)
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x100A2F8", Offset = "0x100A2F8", VA = "0x100A2F8")]
		public void RemoveGroup(string groupName)
		{
		}

		[Token(Token = "0x60016A2")]
		public T GetHandModel<T>(int handId) where T : HandModelBase
		{
			return null;
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0x100A470", Offset = "0x100A470", VA = "0x100A470")]
		public HandModelManager()
		{
		}
	}
	[Token(Token = "0x2000357")]
	public class HandRepresentation
	{
		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HandModelManager parent;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E650", Offset = "0xB4E650")]
		private int <HandID>k__BackingField;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E660", Offset = "0xB4E660")]
		private int <LastUpdatedTime>k__BackingField;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E670", Offset = "0xB4E670")]
		private bool <IsMarked>k__BackingField;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E680", Offset = "0xB4E680")]
		private Chirality <RepChirality>k__BackingField;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E690", Offset = "0xB4E690")]
		private ModelType <RepType>k__BackingField;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4E6A0", Offset = "0xB4E6A0")]
		private Hand <MostRecentHand>k__BackingField;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<HandModelBase> handModels;

		[Token(Token = "0x170001A1")]
		public int HandID
		{
			[Token(Token = "0x60016A4")]
			[Address(RVA = "0xF3D738", Offset = "0xF3D738", VA = "0xF3D738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D848", Offset = "0xB5D848")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016A5")]
			[Address(RVA = "0xF3D740", Offset = "0xF3D740", VA = "0xF3D740")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D858", Offset = "0xB5D858")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public int LastUpdatedTime
		{
			[Token(Token = "0x60016A6")]
			[Address(RVA = "0xF3D748", Offset = "0xF3D748", VA = "0xF3D748")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D868", Offset = "0xB5D868")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0xF3D750", Offset = "0xF3D750", VA = "0xF3D750")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D878", Offset = "0xB5D878")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public bool IsMarked
		{
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0xF3D758", Offset = "0xF3D758", VA = "0xF3D758")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D888", Offset = "0xB5D888")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0xF3D760", Offset = "0xF3D760", VA = "0xF3D760")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D898", Offset = "0xB5D898")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public Chirality RepChirality
		{
			[Token(Token = "0x60016AA")]
			[Address(RVA = "0xF3D76C", Offset = "0xF3D76C", VA = "0xF3D76C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8A8", Offset = "0xB5D8A8")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0xF3D774", Offset = "0xF3D774", VA = "0xF3D774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8B8", Offset = "0xB5D8B8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public ModelType RepType
		{
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0xF3D77C", Offset = "0xF3D77C", VA = "0xF3D77C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8C8", Offset = "0xB5D8C8")]
			get
			{
				return default(ModelType);
			}
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0xF3D784", Offset = "0xF3D784", VA = "0xF3D784")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8D8", Offset = "0xB5D8D8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public Hand MostRecentHand
		{
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0xF3D78C", Offset = "0xF3D78C", VA = "0xF3D78C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8E8", Offset = "0xB5D8E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0xF3D794", Offset = "0xF3D794", VA = "0xF3D794")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D8F8", Offset = "0xB5D8F8")]
			protected set
			{
			}
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xF3D79C", Offset = "0xF3D79C", VA = "0xF3D79C")]
		public HandRepresentation(HandModelManager parent, Hand hand, Chirality repChirality, ModelType repType)
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xF3D7FC", Offset = "0xF3D7FC", VA = "0xF3D7FC")]
		public void Finish()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xF3D90C", Offset = "0xF3D90C", VA = "0xF3D90C")]
		public void AddModel(HandModelBase model)
		{
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xF3DA0C", Offset = "0xF3DA0C", VA = "0xF3DA0C")]
		public void RemoveModel(HandModelBase model)
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xF3DAA0", Offset = "0xF3DAA0", VA = "0xF3DAA0")]
		public void UpdateRepresentation(Hand hand)
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class CapsuleHand : HandModelBase
	{
		[Token(Token = "0x4001407")]
		private const int TOTAL_JOINT_COUNT = 20;

		[Token(Token = "0x4001408")]
		private const float CYLINDER_MESH_RESOLUTION = 0.1f;

		[Token(Token = "0x4001409")]
		private const int THUMB_BASE_INDEX = 0;

		[Token(Token = "0x400140A")]
		private const int PINKY_BASE_INDEX = 16;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _leftColorIndex;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int _rightColorIndex;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Color[] _leftColorList;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Color[] _rightColorList;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Chirality handedness;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool _showArm;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool _castShadows;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Material _material;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Mesh _sphereMesh;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E700", Offset = "0xB4E700")]
		[SerializeField]
		private int _cylinderResolution;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E73C", Offset = "0xB4E73C")]
		[SerializeField]
		private float _jointRadius;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E778", Offset = "0xB4E778")]
		[SerializeField]
		private float _cylinderRadius;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4E7B4", Offset = "0xB4E7B4")]
		[SerializeField]
		private float _palmRadius;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material _sphereMat;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Hand _hand;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] _spherePositions;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<int, Mesh> _meshMap;

		[Token(Token = "0x170001A7")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x1563378", Offset = "0x1563378", VA = "0x1563378", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x170001A8")]
		public override Chirality Handedness
		{
			[Token(Token = "0x60016B6")]
			[Address(RVA = "0x1563380", Offset = "0x1563380", VA = "0x1563380", Slot = "4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0x1563388", Offset = "0x1563388", VA = "0x1563388", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x156338C", Offset = "0x156338C", VA = "0x156338C", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x1563394", Offset = "0x1563394", VA = "0x1563394", Slot = "11")]
		public override Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x156339C", Offset = "0x156339C", VA = "0x156339C", Slot = "12")]
		public override void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x15633A4", Offset = "0x15633A4", VA = "0x15633A4", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x1563470", Offset = "0x1563470", VA = "0x1563470")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x15634C8", Offset = "0x15634C8", VA = "0x15634C8", Slot = "8")]
		public override void BeginHand()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x1563634", Offset = "0x1563634", VA = "0x1563634", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x1563E18", Offset = "0x1563E18", VA = "0x1563E18")]
		private void drawSphere(Vector3 position)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x1563E20", Offset = "0x1563E20", VA = "0x1563E20")]
		private void drawSphere(Vector3 position, float radius)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x1564050", Offset = "0x1564050", VA = "0x1564050")]
		private void drawCylinder(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x15643C4", Offset = "0x15643C4", VA = "0x15643C4")]
		private bool isNaN(Vector3 v)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x15648C0", Offset = "0x15648C0", VA = "0x15648C0")]
		private void drawCylinder(int a, int b)
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x156437C", Offset = "0x156437C", VA = "0x156437C")]
		private void drawCylinder(Vector3 a, int b)
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x1563E10", Offset = "0x1563E10", VA = "0x1563E10")]
		private int getFingerJointIndex(int fingerIndex, int jointIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x1564418", Offset = "0x1564418", VA = "0x1564418")]
		private Mesh getCylinderMesh(float length)
		{
			return null;
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x1564924", Offset = "0x1564924", VA = "0x1564924")]
		public CapsuleHand()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public class DebugHand : HandModelBase
	{
		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand_;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool visualizeBasis;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Color[] colors;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Chirality handedness;

		[Token(Token = "0x170001A9")]
		public bool VisualizeBasis
		{
			[Token(Token = "0x60016C9")]
			[Address(RVA = "0x1568540", Offset = "0x1568540", VA = "0x1568540")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x1568548", Offset = "0x1568548", VA = "0x1568548")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x1568554", Offset = "0x1568554", VA = "0x1568554", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x170001AB")]
		public override Chirality Handedness
		{
			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x156855C", Offset = "0x156855C", VA = "0x156855C", Slot = "4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x1568564", Offset = "0x1568564", VA = "0x1568564", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x1568568", Offset = "0x1568568", VA = "0x1568568", Slot = "11")]
		public override Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x1568570", Offset = "0x1568570", VA = "0x1568570", Slot = "12")]
		public override void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x1568578", Offset = "0x1568578", VA = "0x1568578", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x1568580", Offset = "0x1568580", VA = "0x1568580", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x1568A84", Offset = "0x1568A84", VA = "0x1568A84", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x1568584", Offset = "0x1568584", VA = "0x1568584")]
		protected void DrawDebugLines()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x1568A88", Offset = "0x1568A88", VA = "0x1568A88")]
		public void DrawBasis(Vector position, LeapTransform basis, float scale)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x1568D08", Offset = "0x1568D08", VA = "0x1568D08")]
		public DebugHand()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public abstract class FingerModel : MonoBehaviour
	{
		[Token(Token = "0x4001420")]
		public const int NUM_BONES = 4;

		[Token(Token = "0x4001421")]
		public const int NUM_JOINTS = 3;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Finger.FingerType fingerType;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] bones;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] joints;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Hand hand_;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Finger finger_;

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x10254B0", Offset = "0x10254B0", VA = "0x10254B0")]
		public void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x1025538", Offset = "0x1025538", VA = "0x1025538")]
		public Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x1025540", Offset = "0x1025540", VA = "0x1025540")]
		public Finger GetLeapFinger()
		{
			return null;
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x1025548", Offset = "0x1025548", VA = "0x1025548", Slot = "4")]
		public virtual void InitFinger()
		{
		}

		[Token(Token = "0x60016DA")]
		public abstract void UpdateFinger();

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x1025554", Offset = "0x1025554", VA = "0x1025554")]
		public Vector3 GetTipPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x1025770", Offset = "0x1025770", VA = "0x1025770")]
		public Vector3 GetJointPosition(int joint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x10258C4", Offset = "0x10258C4", VA = "0x10258C4")]
		public Ray GetRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x1025AF0", Offset = "0x1025AF0", VA = "0x1025AF0")]
		public Vector3 GetBoneCenter(int bone_type)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x1025938", Offset = "0x1025938", VA = "0x1025938")]
		public Vector3 GetBoneDirection(int bone_type)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x1025C28", Offset = "0x1025C28", VA = "0x1025C28")]
		public Quaternion GetBoneRotation(int bone_type)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x1025D60", Offset = "0x1025D60", VA = "0x1025D60")]
		public float GetBoneLength(int bone_type)
		{
			return default(float);
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x1025D8C", Offset = "0x1025D8C", VA = "0x1025D8C")]
		public float GetBoneWidth(int bone_type)
		{
			return default(float);
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x1025DB8", Offset = "0x1025DB8", VA = "0x1025DB8")]
		public float GetFingerJointStretchMecanim(int joint_type)
		{
			return default(float);
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x1026068", Offset = "0x1026068", VA = "0x1026068")]
		public float GetFingerJointSpreadMecanim()
		{
			return default(float);
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x1026368", Offset = "0x1026368", VA = "0x1026368")]
		protected FingerModel()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class HandDrop : HandTransitionBehavior
	{
		[Token(Token = "0x20005EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475EC", Offset = "0xB475EC")]
		private sealed class <LerpToStart>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandDrop <>4__this;

			[Token(Token = "0x4002028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <droppedPosition>5__2;

			[Token(Token = "0x4002029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <droppedOrientation>5__3;

			[Token(Token = "0x400202A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <duration>5__4;

			[Token(Token = "0x400202B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <startTime>5__5;

			[Token(Token = "0x400202C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <endTime>5__6;

			[Token(Token = "0x17000434")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600282C")]
				[Address(RVA = "0x1008160", Offset = "0x1008160", VA = "0x1008160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000435")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600282E")]
				[Address(RVA = "0x10081C8", Offset = "0x10081C8", VA = "0x10081C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002829")]
			[Address(RVA = "0x1007F14", Offset = "0x1007F14", VA = "0x1007F14")]
			[DebuggerHidden]
			public <LerpToStart>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600282A")]
			[Address(RVA = "0x1007F48", Offset = "0x1007F48", VA = "0x1007F48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600282B")]
			[Address(RVA = "0x1007F4C", Offset = "0x1007F4C", VA = "0x1007F4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600282D")]
			[Address(RVA = "0x1008168", Offset = "0x1008168", VA = "0x1008168", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 startingPalmPosition;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion startingOrientation;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform palm;

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x1007DD4", Offset = "0x1007DD4", VA = "0x1007DD4", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x1007E70", Offset = "0x1007E70", VA = "0x1007E70", Slot = "5")]
		protected override void HandFinish()
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x1007F0C", Offset = "0x1007F0C", VA = "0x1007F0C", Slot = "4")]
		protected override void HandReset()
		{
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x1007E9C", Offset = "0x1007E9C", VA = "0x1007E9C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5D908", Offset = "0xB5D908")]
		private IEnumerator LerpToStart()
		{
			return null;
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x1007F40", Offset = "0x1007F40", VA = "0x1007F40")]
		public HandDrop()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class HandEnableDisable : HandTransitionBehavior
	{
		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x10081D0", Offset = "0x10081D0", VA = "0x10081D0", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x1008210", Offset = "0x1008210", VA = "0x1008210", Slot = "4")]
		protected override void HandReset()
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x1008238", Offset = "0x1008238", VA = "0x1008238", Slot = "5")]
		protected override void HandFinish()
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x1008260", Offset = "0x1008260", VA = "0x1008260")]
		public HandEnableDisable()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public abstract class HandModel : HandModelBase
	{
		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Chirality handedness;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private ModelType handModelType;

		[Token(Token = "0x400142C")]
		public const int NUM_FINGERS = 5;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float handModelPalmWidth;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FingerModel[] fingers;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform palm;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform forearm;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform wristJoint;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform elbowJoint;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Hand hand_;

		[Token(Token = "0x170001AC")]
		public override Chirality Handedness
		{
			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x1008268", Offset = "0x1008268", VA = "0x1008268", Slot = "4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x1008270", Offset = "0x1008270", VA = "0x1008270", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public abstract override ModelType HandModelType
		{
			[Token(Token = "0x60016F1")]
			get;
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x1008278", Offset = "0x1008278", VA = "0x1008278")]
		public Vector3 GetPalmPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x100829C", Offset = "0x100829C", VA = "0x100829C")]
		public Quaternion GetPalmRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x10083B4", Offset = "0x10083B4", VA = "0x10083B4")]
		public Vector3 GetPalmDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x1008488", Offset = "0x1008488", VA = "0x1008488")]
		public Vector3 GetPalmNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x10085B0", Offset = "0x10085B0", VA = "0x10085B0")]
		public Vector3 GetArmDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x100868C", Offset = "0x100868C", VA = "0x100868C")]
		public Vector3 GetArmCenter()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x1008800", Offset = "0x1008800", VA = "0x1008800")]
		public float GetArmLength()
		{
			return default(float);
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x10088DC", Offset = "0x10088DC", VA = "0x10088DC")]
		public float GetArmWidth()
		{
			return default(float);
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x1008904", Offset = "0x1008904", VA = "0x1008904")]
		public Vector3 GetElbowPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x10089E0", Offset = "0x10089E0", VA = "0x10089E0")]
		public Vector3 GetWristPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x1008ABC", Offset = "0x1008ABC", VA = "0x1008ABC")]
		public Quaternion GetArmRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x1008B98", Offset = "0x1008B98", VA = "0x1008B98", Slot = "11")]
		public override Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x1008BA0", Offset = "0x1008BA0", VA = "0x1008BA0", Slot = "12")]
		public override void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x1008C98", Offset = "0x1008C98", VA = "0x1008C98", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x1008DAC", Offset = "0x1008DAC", VA = "0x1008DAC")]
		public int LeapID()
		{
			return default(int);
		}

		[Token(Token = "0x6001701")]
		public abstract override void UpdateHand();

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x1008DC4", Offset = "0x1008DC4", VA = "0x1008DC4")]
		protected HandModel()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public enum Chirality
	{
		[Token(Token = "0x4001435")]
		Left,
		[Token(Token = "0x4001436")]
		Right
	}
	[Token(Token = "0x200035F")]
	public enum ModelType
	{
		[Token(Token = "0x4001438")]
		Graphics,
		[Token(Token = "0x4001439")]
		Physics
	}
	[Token(Token = "0x2000360")]
	[ExecuteInEditMode]
	public abstract class HandModelBase : MonoBehaviour
	{
		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isTracked;

		[NonSerialized]
		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HandModelManager.ModelGroup group;

		[Token(Token = "0x170001AE")]
		public bool IsTracked
		{
			[Token(Token = "0x6001707")]
			[Address(RVA = "0x10090C8", Offset = "0x10090C8", VA = "0x10090C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AF")]
		public abstract Chirality Handedness
		{
			[Token(Token = "0x6001708")]
			get;
			[Token(Token = "0x6001709")]
			set;
		}

		[Token(Token = "0x170001B0")]
		public abstract ModelType HandModelType
		{
			[Token(Token = "0x600170A")]
			get;
		}

		[Token(Token = "0x14000026")]
		public event Action OnBegin
		{
			[Token(Token = "0x6001703")]
			[Address(RVA = "0x1008E38", Offset = "0x1008E38", VA = "0x1008E38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D96C", Offset = "0xB5D96C")]
			add
			{
			}
			[Token(Token = "0x6001704")]
			[Address(RVA = "0x1008EDC", Offset = "0x1008EDC", VA = "0x1008EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D97C", Offset = "0xB5D97C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event Action OnFinish
		{
			[Token(Token = "0x6001705")]
			[Address(RVA = "0x1008F80", Offset = "0x1008F80", VA = "0x1008F80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D98C", Offset = "0xB5D98C")]
			add
			{
			}
			[Token(Token = "0x6001706")]
			[Address(RVA = "0x1009024", Offset = "0x1009024", VA = "0x1009024")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5D99C", Offset = "0xB5D99C")]
			remove
			{
			}
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x10090D0", Offset = "0x10090D0", VA = "0x10090D0", Slot = "7")]
		public virtual void InitHand()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x10090D4", Offset = "0x10090D4", VA = "0x10090D4", Slot = "8")]
		public virtual void BeginHand()
		{
		}

		[Token(Token = "0x600170D")]
		public abstract void UpdateHand();

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x1009108", Offset = "0x1009108", VA = "0x1009108", Slot = "10")]
		public virtual void FinishHand()
		{
		}

		[Token(Token = "0x600170F")]
		public abstract Hand GetLeapHand();

		[Token(Token = "0x6001710")]
		public abstract void SetLeapHand(Hand hand);

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x1009138", Offset = "0x1009138", VA = "0x1009138", Slot = "13")]
		public virtual bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x1008E30", Offset = "0x1008E30", VA = "0x1008E30")]
		protected HandModelBase()
		{
		}
	}
	[Token(Token = "0x2000361")]
	public abstract class HandTransitionBehavior : MonoBehaviour
	{
		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected HandModelBase handModelBase;

		[Token(Token = "0x6001713")]
		protected abstract void HandReset();

		[Token(Token = "0x6001714")]
		protected abstract void HandFinish();

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xF3DB84", Offset = "0xF3DB84", VA = "0xF3DB84", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xF3DD44", Offset = "0xF3DD44", VA = "0xF3DD44", Slot = "7")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xF3DEC4", Offset = "0xF3DEC4", VA = "0xF3DEC4")]
		protected HandTransitionBehavior()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public class RiggedFinger : FingerModel
	{
		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool deformPosition;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[HideInInspector]
		public bool scaleLastFingerBone;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 modelFingerPointing;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 modelPalmFacing;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] s_standardFingertipLengths;

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x12AABDC", Offset = "0x12AABDC", VA = "0x12AABDC")]
		public Quaternion Reorientation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x12AACC4", Offset = "0x12AACC4", VA = "0x12AACC4")]
		static RiggedFinger()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x12AADE4", Offset = "0x12AADE4", VA = "0x12AADE4", Slot = "5")]
		public override void UpdateFinger()
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x12AB138", Offset = "0x12AB138", VA = "0x12AB138")]
		private int getLargestComponentIndex(Vector3 pointingVector)
		{
			return default(int);
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x12AB210", Offset = "0x12AB210", VA = "0x12AB210")]
		public void SetupRiggedFinger(bool useMetaCarpals)
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x12AB244", Offset = "0x12AB244", VA = "0x12AB244")]
		private void findBoneTransforms(bool useMetaCarpals)
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x12AB4DC", Offset = "0x12AB4DC", VA = "0x12AB4DC")]
		private Vector3 calulateModelFingerPointing()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x12AB848", Offset = "0x12AB848", VA = "0x12AB848")]
		public RiggedFinger()
		{
		}
	}
	[Token(Token = "0x2000363")]
	public class RiggedHand : HandModel
	{
		[Token(Token = "0x20005EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB475FC", Offset = "0xB475FC")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x400202D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x600282F")]
			[Address(RVA = "0x12AD4AC", Offset = "0x12AD4AC", VA = "0x12AD4AC")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6002830")]
			[Address(RVA = "0x12AD7E8", Offset = "0x12AD7E8", VA = "0x12AD7E8")]
			internal bool <assignRiggedFingersByName>b__1(string w)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20005F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4760C", Offset = "0xB4760C")]
		private sealed class <>c__DisplayClass27_1
		{
			[Token(Token = "0x400202E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string lowercaseName;

			[Token(Token = "0x6002831")]
			[Address(RVA = "0x12AD4B4", Offset = "0x12AD4B4", VA = "0x12AD4B4")]
			public <>c__DisplayClass27_1()
			{
			}

			[Token(Token = "0x6002832")]
			[Address(RVA = "0x12AD830", Offset = "0x12AD830", VA = "0x12AD830")]
			internal bool <assignRiggedFingersByName>b__2(string w)
			{
				return default(bool);
			}

			[Token(Token = "0x6002833")]
			[Address(RVA = "0x12AD84C", Offset = "0x12AD84C", VA = "0x12AD84C")]
			internal bool <assignRiggedFingersByName>b__3(string w)
			{
				return default(bool);
			}

			[Token(Token = "0x6002834")]
			[Address(RVA = "0x12AD868", Offset = "0x12AD868", VA = "0x12AD868")]
			internal bool <assignRiggedFingersByName>b__4(string w)
			{
				return default(bool);
			}

			[Token(Token = "0x6002835")]
			[Address(RVA = "0x12AD884", Offset = "0x12AD884", VA = "0x12AD884")]
			internal bool <assignRiggedFingersByName>b__5(string w)
			{
				return default(bool);
			}

			[Token(Token = "0x6002836")]
			[Address(RVA = "0x12AD8A0", Offset = "0x12AD8A0", VA = "0x12AD8A0")]
			internal bool <assignRiggedFingersByName>b__6(string w)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E860", Offset = "0xB4E860")]
		[SerializeField]
		private bool setEditorLeapPose;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		public bool DeformPositionsInFingers;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E8BC", Offset = "0xB4E8BC")]
		[SerializeField]
		[HideInInspector]
		private bool deformPositionsState;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E918", Offset = "0xB4E918")]
		public bool ModelPalmAtLeapWrist;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E950", Offset = "0xB4E950")]
		public bool UseMetaCarpals;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4E988", Offset = "0xB4E988")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4E988", Offset = "0xB4E988")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB4E988", Offset = "0xB4E988")]
		private bool _scaleLastFingerBones;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 modelFingerPointing;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Vector3 modelPalmFacing;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4EA74", Offset = "0xB4EA74")]
		[SerializeField]
		private List<Transform> jointList;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private List<Quaternion> localRotations;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private List<Vector3> localPositions;

		[Token(Token = "0x170001B1")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x6001720")]
			[Address(RVA = "0x12AB8D8", Offset = "0x12AB8D8", VA = "0x12AB8D8", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x170001B2")]
		public bool SetEditorLeapPose
		{
			[Token(Token = "0x6001722")]
			[Address(RVA = "0x12AB8E8", Offset = "0x12AB8E8", VA = "0x12AB8E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001723")]
			[Address(RVA = "0x12AB8F0", Offset = "0x12AB8F0", VA = "0x12AB8F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public bool scaleLastFingerBones
		{
			[Token(Token = "0x6001724")]
			[Address(RVA = "0x12ABA70", Offset = "0x12ABA70", VA = "0x12ABA70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001725")]
			[Address(RVA = "0x12ABA78", Offset = "0x12ABA78", VA = "0x12ABA78")]
			set
			{
			}
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x12AB8E0", Offset = "0x12AB8E0", VA = "0x12AB8E0", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x12ABB34", Offset = "0x12ABB34", VA = "0x12ABB34", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x12ABC20", Offset = "0x12ABC20", VA = "0x12ABC20")]
		public Quaternion Reorientation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x12ABDDC", Offset = "0x12ABDDC", VA = "0x12ABDDC", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x12AC100", Offset = "0x12AC100", VA = "0x12AC100")]
		public Quaternion GetRiggedPalmRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x12AC1F4", Offset = "0x12AC1F4", VA = "0x12AC1F4")]
		private Quaternion CalculateRotation(LeapTransform trs)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x12AC2C4", Offset = "0x12AC2C4", VA = "0x12AC2C4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5D9AC", Offset = "0xB5D9AC")]
		public void SetupRiggedHand()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x12AD340", Offset = "0x12AD340", VA = "0x12AD340")]
		public void AutoRigRiggedHand(Transform palm, Transform finger1, Transform finger2)
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x12AC480", Offset = "0x12AC480", VA = "0x12AC480")]
		private void assignRiggedFingersByName()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x12ACCD4", Offset = "0x12ACCD4", VA = "0x12ACCD4")]
		private void SetupRiggedFingers()
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x12AD1E8", Offset = "0x12AD1E8", VA = "0x12AD1E8")]
		private void setFingerPalmFacing()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x12ACE38", Offset = "0x12ACE38", VA = "0x12ACE38")]
		private Vector3 calculateModelPalmFacing(Transform palm, Transform finger1, Transform finger2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x12AD074", Offset = "0x12AD074", VA = "0x12AD074")]
		private Vector3 calculateModelFingerPointing()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x12AB61C", Offset = "0x12AB61C", VA = "0x12AB61C")]
		public static Vector3 CalculateZeroedVector(Vector3 vectorToZero)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x12AD4BC", Offset = "0x12AD4BC", VA = "0x12AD4BC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5D9E4", Offset = "0xB5D9E4")]
		public void StoreJointsStartPose()
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x12AB924", Offset = "0x12AB924", VA = "0x12AB924")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5DA1C", Offset = "0xB5DA1C")]
		public void RestoreJointsStartPose()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x12ABB70", Offset = "0x12ABB70", VA = "0x12ABB70")]
		private void setDeformPositionsInFingers(bool onOff)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x12ABA84", Offset = "0x12ABA84", VA = "0x12ABA84")]
		private void setScaleLastFingerBoneInFingers(bool shouldScale)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x12AD5F0", Offset = "0x12AD5F0", VA = "0x12AD5F0")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x12AD660", Offset = "0x12AD660", VA = "0x12AD660")]
		public RiggedHand()
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x12AD79C", Offset = "0x12AD79C", VA = "0x12AD79C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DA54", Offset = "0xB5DA54")]
		private bool <assignRiggedFingersByName>b__27_0(string w)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000364")]
	public class RigidFinger : SkeletalFinger
	{
		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float filtering;

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x12AD8BC", Offset = "0x12AD8BC", VA = "0x12AD8BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x12AD9D0", Offset = "0x12AD9D0", VA = "0x12AD9D0", Slot = "5")]
		public override void UpdateFinger()
		{
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x12ADD38", Offset = "0x12ADD38", VA = "0x12ADD38")]
		public RigidFinger()
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class RigidHand : SkeletalHand
	{
		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float filtering;

		[Token(Token = "0x170001B4")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x600173D")]
			[Address(RVA = "0x12ADD50", Offset = "0x12ADD50", VA = "0x12ADD50", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x12ADD58", Offset = "0x12ADD58", VA = "0x12ADD58", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x12ADD60", Offset = "0x12ADD60", VA = "0x12ADD60", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x12ADD68", Offset = "0x12ADD68", VA = "0x12ADD68", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x12AE2A4", Offset = "0x12AE2A4", VA = "0x12AE2A4")]
		public RigidHand()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class SkeletalFinger : FingerModel
	{
		[Token(Token = "0x6001742")]
		[Address(RVA = "0x12B47FC", Offset = "0x12B47FC", VA = "0x12B47FC", Slot = "4")]
		public override void InitFinger()
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x12B4A60", Offset = "0x12B4A60", VA = "0x12B4A60", Slot = "5")]
		public override void UpdateFinger()
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x12B4800", Offset = "0x12B4800", VA = "0x12B4800")]
		protected void SetPositions()
		{
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x12ADD48", Offset = "0x12ADD48", VA = "0x12ADD48")]
		public SkeletalFinger()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class SkeletalHand : HandModel
	{
		[Token(Token = "0x4001451")]
		protected const float PALM_CENTER_OFFSET = 0.015f;

		[Token(Token = "0x170001B5")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0x12B4A64", Offset = "0x12B4A64", VA = "0x12B4A64", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x12B4A6C", Offset = "0x12B4A6C", VA = "0x12B4A6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x12B4BA8", Offset = "0x12B4BA8", VA = "0x12B4BA8", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x12AE17C", Offset = "0x12AE17C", VA = "0x12AE17C")]
		protected Vector3 GetPalmCenter()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x12B4BAC", Offset = "0x12B4BAC", VA = "0x12B4BAC")]
		protected void SetPositions()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x12AE2B4", Offset = "0x12AE2B4", VA = "0x12AE2B4")]
		public SkeletalHand()
		{
		}
	}
	[Token(Token = "0x2000368")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB458A0", Offset = "0xB458A0")]
	public class LeapImageRetriever : MonoBehaviour
	{
		[Token(Token = "0x20005F1")]
		public class LeapTextureData
		{
			[Token(Token = "0x400202F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LeapImageRetriever leapImageRetriever;

			[Token(Token = "0x4002030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Texture2D _combinedTexture;

			[Token(Token = "0x17000436")]
			public Texture2D CombinedTexture
			{
				[Token(Token = "0x6002837")]
				[Address(RVA = "0x10A3DA4", Offset = "0x10A3DA4", VA = "0x10A3DA4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002838")]
			[Address(RVA = "0x10A34CC", Offset = "0x10A34CC", VA = "0x10A34CC")]
			public bool CheckStale(Image image)
			{
				return default(bool);
			}

			[Token(Token = "0x6002839")]
			[Address(RVA = "0x10A3658", Offset = "0x10A3658", VA = "0x10A3658")]
			public void Reconstruct(Image image, string globalShaderName, string pixelSizeName, bool setShaderGlobal = true)
			{
			}

			[Token(Token = "0x600283A")]
			[Address(RVA = "0x10A3A2C", Offset = "0x10A3A2C", VA = "0x10A3A2C")]
			public void UpdateTexture(Image image, bool applyTexture = true)
			{
			}

			[Token(Token = "0x600283B")]
			[Address(RVA = "0x10A3DAC", Offset = "0x10A3DAC", VA = "0x10A3DAC")]
			private TextureFormat getTextureFormat(Image image)
			{
				return default(TextureFormat);
			}

			[Token(Token = "0x600283C")]
			[Address(RVA = "0x10A3EA4", Offset = "0x10A3EA4", VA = "0x10A3EA4")]
			private int bytesPerPixel(TextureFormat format)
			{
				return default(int);
			}

			[Token(Token = "0x600283D")]
			[Address(RVA = "0x10A3008", Offset = "0x10A3008", VA = "0x10A3008")]
			public LeapTextureData()
			{
			}
		}

		[Token(Token = "0x20005F2")]
		public class LeapDistortionData
		{
			[Token(Token = "0x4002031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Texture2D _combinedTexture;

			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LeapImageRetriever leapImageRetriever;

			[Token(Token = "0x17000437")]
			public Texture2D CombinedTexture
			{
				[Token(Token = "0x600283E")]
				[Address(RVA = "0x10A3B38", Offset = "0x10A3B38", VA = "0x10A3B38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600283F")]
			[Address(RVA = "0x10A35E8", Offset = "0x10A35E8", VA = "0x10A35E8")]
			public bool CheckStale()
			{
				return default(bool);
			}

			[Token(Token = "0x6002840")]
			[Address(RVA = "0x10A3868", Offset = "0x10A3868", VA = "0x10A3868")]
			public void Reconstruct(Image image, string shaderName)
			{
			}

			[Token(Token = "0x6002841")]
			[Address(RVA = "0x10A3B40", Offset = "0x10A3B40", VA = "0x10A3B40")]
			private void addDistortionData(Image image, Color32[] colors, int startIndex)
			{
			}

			[Token(Token = "0x6002842")]
			[Address(RVA = "0x10A3CFC", Offset = "0x10A3CFC", VA = "0x10A3CFC")]
			private void encodeFloat(float value, out byte byte0, out byte byte1)
			{
			}

			[Token(Token = "0x6002843")]
			[Address(RVA = "0x10A34C4", Offset = "0x10A34C4", VA = "0x10A34C4")]
			public LeapDistortionData()
			{
			}
		}

		[Token(Token = "0x20005F3")]
		public class EyeTextureData
		{
			[Token(Token = "0x4002033")]
			private const string GLOBAL_RAW_TEXTURE_NAME = "_LeapGlobalRawTexture";

			[Token(Token = "0x4002034")]
			private const string GLOBAL_DISTORTION_TEXTURE_NAME = "_LeapGlobalDistortion";

			[Token(Token = "0x4002035")]
			private const string GLOBAL_RAW_PIXEL_SIZE_NAME = "_LeapGlobalRawPixelSize";

			[Token(Token = "0x4002036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly List<LeapTextureData> TextureData;

			[Token(Token = "0x4002037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly LeapDistortionData Distortion;

			[Token(Token = "0x4002038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool _isStale;

			[Token(Token = "0x6002844")]
			[Address(RVA = "0x10A33B4", Offset = "0x10A33B4", VA = "0x10A33B4")]
			public static void ResetGlobalShaderValues()
			{
			}

			[Token(Token = "0x6002845")]
			[Address(RVA = "0x10A23AC", Offset = "0x10A23AC", VA = "0x10A23AC")]
			public EyeTextureData(LeapImageRetriever leapImageRetriever)
			{
			}

			[Token(Token = "0x6002846")]
			[Address(RVA = "0x10A2A7C", Offset = "0x10A2A7C", VA = "0x10A2A7C")]
			public bool CheckStale(Image image)
			{
				return default(bool);
			}

			[Token(Token = "0x6002847")]
			[Address(RVA = "0x10A3124", Offset = "0x10A3124", VA = "0x10A3124")]
			public void MarkStale()
			{
			}

			[Token(Token = "0x6002848")]
			[Address(RVA = "0x10A2B34", Offset = "0x10A2B34", VA = "0x10A2B34")]
			public void Reconstruct(Image image, bool setShaderGlobal = true)
			{
			}

			[Token(Token = "0x6002849")]
			[Address(RVA = "0x10A2C0C", Offset = "0x10A2C0C", VA = "0x10A2C0C")]
			public void UpdateTextures(Image image, bool applyTexture = true)
			{
			}
		}

		[Token(Token = "0x20005F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4761C", Offset = "0xB4761C")]
		private sealed class <serviceCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400203A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400203B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LeapImageRetriever <>4__this;

			[Token(Token = "0x400203C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Controller <controller>5__2;

			[Token(Token = "0x17000438")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600284D")]
				[Address(RVA = "0x10A3344", Offset = "0x10A3344", VA = "0x10A3344", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000439")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600284F")]
				[Address(RVA = "0x10A33AC", Offset = "0x10A33AC", VA = "0x10A33AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600284A")]
			[Address(RVA = "0x10A2DC4", Offset = "0x10A2DC4", VA = "0x10A2DC4")]
			[DebuggerHidden]
			public <serviceCoroutine>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x600284B")]
			[Address(RVA = "0x10A31F4", Offset = "0x10A31F4", VA = "0x10A31F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600284C")]
			[Address(RVA = "0x10A31F8", Offset = "0x10A31F8", VA = "0x10A31F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600284E")]
			[Address(RVA = "0x10A334C", Offset = "0x10A334C", VA = "0x10A334C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001452")]
		public const string GLOBAL_COLOR_SPACE_GAMMA_NAME = "_LeapGlobalColorSpaceGamma";

		[Token(Token = "0x4001453")]
		public const string GLOBAL_GAMMA_CORRECTION_EXPONENT_NAME = "_LeapGlobalGammaCorrectionExponent";

		[Token(Token = "0x4001454")]
		public const string GLOBAL_CAMERA_PROJECTION_NAME = "_LeapGlobalProjection";

		[Token(Token = "0x4001455")]
		public const int IMAGE_WARNING_WAIT = 10;

		[Token(Token = "0x4001456")]
		public const int LEFT_IMAGE_INDEX = 0;

		[Token(Token = "0x4001457")]
		public const int RIGHT_IMAGE_INDEX = 1;

		[Token(Token = "0x4001458")]
		public const float IMAGE_SETTING_POLL_RATE = 2f;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4EAE0", Offset = "0xB4EAE0")]
		private float _gammaCorrection;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, IntPtr> _deviceHandles;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4EB2C", Offset = "0xB4EB2C")]
		public uint shaderDataDevice;

		[NonSerialized]
		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int updateSpecificDeviceIDTexture;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LeapServiceProvider _provider;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EyeTextureData _backingEyeTextureData;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ProduceConsumeBuffer<Image> _imageQueue;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Image _currentImage;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Image[] latestDeviceImages;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _serviceCoroutine;

		[Token(Token = "0x170001B6")]
		private EyeTextureData _eyeTextureData
		{
			[Token(Token = "0x600174D")]
			[Address(RVA = "0x10A2340", Offset = "0x10A2340", VA = "0x10A2340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		public EyeTextureData TextureData
		{
			[Token(Token = "0x600174E")]
			[Address(RVA = "0x10A2458", Offset = "0x10A2458", VA = "0x10A2458")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x10A22C8", Offset = "0x10A22C8", VA = "0x10A22C8")]
		public IntPtr GetDeviceHandle(int deviceID)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x10A245C", Offset = "0x10A245C", VA = "0x10A245C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x10A25FC", Offset = "0x10A25FC", VA = "0x10A25FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x10A2640", Offset = "0x10A2640", VA = "0x10A2640")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x10A275C", Offset = "0x10A275C", VA = "0x10A275C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x10A2814", Offset = "0x10A2814", VA = "0x10A2814")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x10A2CA0", Offset = "0x10A2CA0", VA = "0x10A2CA0")]
		public bool UpdateDeviceIDTexture(int deviceID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x10A2600", Offset = "0x10A2600", VA = "0x10A2600")]
		private void subscribeToService()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x10A2644", Offset = "0x10A2644", VA = "0x10A2644")]
		private void unsubscribeFromService()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x10A2D54", Offset = "0x10A2D54", VA = "0x10A2D54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5DA64", Offset = "0xB5DA64")]
		private IEnumerator serviceCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x10A2DF0", Offset = "0x10A2DF0", VA = "0x10A2DF0")]
		private void initializeDeviceHandles()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x10A3010", Offset = "0x10A3010", VA = "0x10A3010")]
		private void onImageReady(object sender, ImageEventArgs args)
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x10A2538", Offset = "0x10A2538", VA = "0x10A2538")]
		public void ApplyGammaCorrectionValues()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x10A30AC", Offset = "0x10A30AC", VA = "0x10A30AC")]
		private void onDistortionChange(object sender, LeapEventArgs args)
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x10A3130", Offset = "0x10A3130", VA = "0x10A3130")]
		public LeapImageRetriever()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public static class LeapProfiling
	{
		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, CustomSampler> _samplers;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Queue<string> _samplersToCreate;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int _samplersToCreateCount;

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x10A3FA4", Offset = "0x10A3FA4", VA = "0x10A3FA4")]
		public static void Update()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x10A4218", Offset = "0x10A4218", VA = "0x10A4218")]
		public static void BeginProfilingForThread(BeginProfilingForThreadArgs eventData)
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x10A43D0", Offset = "0x10A43D0", VA = "0x10A43D0")]
		public static void EndProfilingForThread(EndProfilingForThreadArgs eventData)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x10A43D8", Offset = "0x10A43D8", VA = "0x10A43D8")]
		public static void BeginProfilingBlock(BeginProfilingBlockArgs eventData)
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x10A4470", Offset = "0x10A4470", VA = "0x10A4470")]
		public static void EndProfilingBlock(EndProfilingBlockArgs eventData)
		{
		}
	}
	[Token(Token = "0x200036A")]
	public abstract class LeapProvider : MonoBehaviour
	{
		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TestHandFactory.TestHandPose editTimePose;

		[Token(Token = "0x170001B8")]
		public abstract Frame CurrentFrame
		{
			[Token(Token = "0x6001767")]
			get;
		}

		[Token(Token = "0x170001B9")]
		public abstract Frame CurrentFixedFrame
		{
			[Token(Token = "0x6001768")]
			get;
		}

		[Token(Token = "0x14000028")]
		public event Action<Frame> OnUpdateFrame
		{
			[Token(Token = "0x6001763")]
			[Address(RVA = "0x10A4F88", Offset = "0x10A4F88", VA = "0x10A4F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DAC8", Offset = "0xB5DAC8")]
			add
			{
			}
			[Token(Token = "0x6001764")]
			[Address(RVA = "0x10A502C", Offset = "0x10A502C", VA = "0x10A502C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DAD8", Offset = "0xB5DAD8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event Action<Frame> OnFixedFrame
		{
			[Token(Token = "0x6001765")]
			[Address(RVA = "0x10A50D0", Offset = "0x10A50D0", VA = "0x10A50D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DAE8", Offset = "0xB5DAE8")]
			add
			{
			}
			[Token(Token = "0x6001766")]
			[Address(RVA = "0x10A5174", Offset = "0x10A5174", VA = "0x10A5174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DAF8", Offset = "0xB5DAF8")]
			remove
			{
			}
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x10A5218", Offset = "0x10A5218", VA = "0x10A5218")]
		protected void DispatchUpdateFrameEvent(Frame frame)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x10A528C", Offset = "0x10A528C", VA = "0x10A528C")]
		protected void DispatchFixedFrameEvent(Frame frame)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x10A5300", Offset = "0x10A5300", VA = "0x10A5300")]
		protected LeapProvider()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public static class LeapProviderExtensions
	{
		[Token(Token = "0x600176C")]
		[Address(RVA = "0x10A5308", Offset = "0x10A5308", VA = "0x10A5308")]
		public static Hand MakeTestHand(this LeapProvider provider, bool isLeft)
		{
			return null;
		}
	}
	[Token(Token = "0x200036C")]
	public class LeapServiceProvider : LeapProvider
	{
		[Token(Token = "0x20005F5")]
		public enum FrameOptimizationMode
		{
			[Token(Token = "0x400203E")]
			None,
			[Token(Token = "0x400203F")]
			ReuseUpdateForPhysics,
			[Token(Token = "0x4002040")]
			ReusePhysicsForUpdate
		}

		[Token(Token = "0x20005F6")]
		public enum PhysicsExtrapolationMode
		{
			[Token(Token = "0x4002042")]
			None,
			[Token(Token = "0x4002043")]
			Auto,
			[Token(Token = "0x4002044")]
			Manual
		}

		[Token(Token = "0x20005F7")]
		public enum MultipleDeviceMode
		{
			[Token(Token = "0x4002046")]
			Disabled,
			[Token(Token = "0x4002047")]
			All,
			[Token(Token = "0x4002048")]
			Specific
		}

		[Token(Token = "0x4001469")]
		protected const double NS_TO_S = 1E-06;

		[Token(Token = "0x400146A")]
		protected const double S_TO_NS = 1000000.0;

		[Token(Token = "0x400146B")]
		protected const string HAND_ARRAY_GLOBAL_NAME = "_LeapHandTransforms";

		[Token(Token = "0x400146C")]
		protected const int MAX_RECONNECTION_ATTEMPTS = 5;

		[Token(Token = "0x400146D")]
		protected const int RECONNECTION_INTERVAL = 180;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EB64", Offset = "0xB4EB64")]
		[SerializeField]
		protected FrameOptimizationMode _frameOptimization;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EBB0", Offset = "0xB4EBB0")]
		[SerializeField]
		protected PhysicsExtrapolationMode _physicsExtrapolation;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EBFC", Offset = "0xB4EBFC")]
		[SerializeField]
		protected float _physicsExtrapolationTime;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EC48", Offset = "0xB4EC48")]
		[EditTimeOnly]
		[SerializeField]
		protected MultipleDeviceMode _multipleDeviceMode;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ECA4", Offset = "0xB4ECA4")]
		[EditTimeOnly]
		[SerializeField]
		protected string _specificSerialNumber;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ED00", Offset = "0xB4ED00")]
		[EditTimeOnly]
		[SerializeField]
		protected bool _workerThreadProfiling;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		protected bool _useInterpolation;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected int ExtrapolationAmount;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected int BounceAmount;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Controller _leapController;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected bool _isDestroyed;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected SmoothedFloat _fixedOffset;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected SmoothedFloat _smoothedTrackingLatency;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected long _unityToLeapOffset;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Frame _untransformedUpdateFrame;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Frame _transformedUpdateFrame;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Frame _untransformedFixedFrame;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Frame _transformedFixedFrame;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Action<Device> _onDeviceSafe;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _framesSinceServiceConnectionChecked;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int _numberOfReconnectionAttempts;

		[Token(Token = "0x170001BA")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x600176F")]
			[Address(RVA = "0x10A6350", Offset = "0x10A6350", VA = "0x10A6350", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x6001770")]
			[Address(RVA = "0x10A636C", Offset = "0x10A636C", VA = "0x10A636C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400002A")]
		public event Action<Device> OnDeviceSafe
		{
			[Token(Token = "0x600176D")]
			[Address(RVA = "0x109F3E8", Offset = "0x109F3E8", VA = "0x109F3E8")]
			add
			{
			}
			[Token(Token = "0x600176E")]
			[Address(RVA = "0x109F5F0", Offset = "0x109F5F0", VA = "0x109F5F0")]
			remove
			{
			}
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x10A6388", Offset = "0x10A6388", VA = "0x10A6388", Slot = "6")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x10A6394", Offset = "0x10A6394", VA = "0x10A6394", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x10A63D8", Offset = "0x10A63D8", VA = "0x10A63D8", Slot = "8")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x10A67B8", Offset = "0x10A67B8", VA = "0x10A67B8", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x10A6C50", Offset = "0x10A6C50", VA = "0x10A6C50", Slot = "10")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x10A6F08", Offset = "0x10A6F08", VA = "0x10A6F08", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x10A6F9C", Offset = "0x10A6F9C", VA = "0x10A6F9C", Slot = "12")]
		protected virtual void OnApplicationPause(bool isPaused)
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x10A6FBC", Offset = "0x10A6FBC", VA = "0x10A6FBC", Slot = "13")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x10A6E18", Offset = "0x10A6E18", VA = "0x10A6E18")]
		public float CalculatePhysicsExtrapolation()
		{
			return default(float);
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0x10A6FE4", Offset = "0x10A6FE4", VA = "0x10A6FE4")]
		public Controller GetLeapController()
		{
			return null;
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x10A6FEC", Offset = "0x10A6FEC", VA = "0x10A6FEC")]
		public bool IsConnected()
		{
			return default(bool);
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x10A7008", Offset = "0x10A7008", VA = "0x10A7008")]
		public void RetransformFrames()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x10A704C", Offset = "0x10A704C", VA = "0x10A704C")]
		public void CopySettingsToLeapXRServiceProvider(LeapXRServiceProvider leapXRServiceProvider)
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x10A7080", Offset = "0x10A7080", VA = "0x10A7080", Slot = "14")]
		protected virtual long CalculateInterpolationTime(bool endOfFrame = false)
		{
			return default(long);
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x10A70AC", Offset = "0x10A70AC", VA = "0x10A70AC", Slot = "15")]
		protected virtual void initializeFlags()
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x10A64A0", Offset = "0x10A64A0", VA = "0x10A64A0")]
		protected void createController()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x10A6F30", Offset = "0x10A6F30", VA = "0x10A6F30")]
		protected void destroyController()
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x10A69AC", Offset = "0x10A69AC", VA = "0x10A69AC")]
		protected bool checkConnectionIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x10A70C4", Offset = "0x10A70C4", VA = "0x10A70C4")]
		protected void onHandControllerConnect(object sender, LeapEventArgs args)
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x10A7178", Offset = "0x10A7178", VA = "0x10A7178", Slot = "16")]
		protected virtual void transformFrame(Frame source, Frame dest)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x10A7250", Offset = "0x10A7250", VA = "0x10A7250")]
		public LeapServiceProvider()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x10A7318", Offset = "0x10A7318", VA = "0x10A7318")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DB18", Offset = "0xB5DB18")]
		private void <createController>b__49_0(object s, DeviceEventArgs e)
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x10A7394", Offset = "0x10A7394", VA = "0x10A7394")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DB28", Offset = "0xB5DB28")]
		private void <createController>b__49_1(Device d)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x10A73B0", Offset = "0x10A73B0", VA = "0x10A73B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5DB38", Offset = "0xB5DB38")]
		private void <createController>b__49_2(Device d)
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class LeapTestProvider : LeapProvider
	{
		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Frame frame;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4ED5C", Offset = "0xB4ED5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4ED5C", Offset = "0xB4ED5C")]
		public Transform leftHandBasis;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand _leftHand;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand _cachedLeftHand;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EDBC", Offset = "0xB4EDBC")]
		public Transform rightHandBasis;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Hand _rightHand;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Hand _cachedRightHand;

		[Token(Token = "0x170001BC")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0x10A740C", Offset = "0x10A740C", VA = "0x10A740C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x600178A")]
			[Address(RVA = "0x10A7414", Offset = "0x10A7414", VA = "0x10A7414", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x10A741C", Offset = "0x10A741C", VA = "0x10A741C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x10A7470", Offset = "0x10A7470", VA = "0x10A7470")]
		private void Update()
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x10A779C", Offset = "0x10A779C", VA = "0x10A779C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x10A77A4", Offset = "0x10A77A4", VA = "0x10A77A4")]
		public LeapTestProvider()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class LeapXRServiceProvider : LeapServiceProvider
	{
		[Token(Token = "0x20005F8")]
		public enum DeviceOffsetMode
		{
			[Token(Token = "0x400204A")]
			Default,
			[Token(Token = "0x400204B")]
			ManualHeadOffset,
			[Token(Token = "0x400204C")]
			Transform
		}

		[Token(Token = "0x20005F9")]
		public enum TemporalWarpingMode
		{
			[Token(Token = "0x400204E")]
			Auto,
			[Token(Token = "0x400204F")]
			Manual,
			[Token(Token = "0x4002050")]
			Images,
			[Token(Token = "0x4002051")]
			Off
		}

		[Token(Token = "0x400148A")]
		private const float DEFAULT_DEVICE_OFFSET_Y_AXIS = 0f;

		[Token(Token = "0x400148B")]
		private const float DEFAULT_DEVICE_OFFSET_Z_AXIS = 0.12f;

		[Token(Token = "0x400148C")]
		private const float DEFAULT_DEVICE_TILT_X_AXIS = 5f;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4EDF4", Offset = "0xB4EDF4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EDF4", Offset = "0xB4EDF4")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB4EDF4", Offset = "0xB4EDF4")]
		private DeviceOffsetMode _deviceOffsetMode;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EE88", Offset = "0xB4EE88")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4EE88", Offset = "0xB4EE88")]
		private float _deviceOffsetYAxis;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EEEC", Offset = "0xB4EEEC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4EEEC", Offset = "0xB4EEEC")]
		private float _deviceOffsetZAxis;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EF50", Offset = "0xB4EF50")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4EF50", Offset = "0xB4EF50")]
		private float _deviceTiltXAxis;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4EFBC", Offset = "0xB4EFBC")]
		[SerializeField]
		private Transform _deviceOrigin;

		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F008", Offset = "0xB4F008")]
		[SerializeField]
		private Camera _preCullCamera;

		[Token(Token = "0x4001493")]
		private const int DEFAULT_WARP_ADJUSTMENT = 45;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F054", Offset = "0xB4F054")]
		[SerializeField]
		private TemporalWarpingMode _temporalWarpingMode;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F0A0", Offset = "0xB4F0A0")]
		[SerializeField]
		private int _customWarpAdjustment;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F0EC", Offset = "0xB4F0EC")]
		[SerializeField]
		protected bool _updateHandInPrecull;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected TransformHistory transformHistory;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected bool manualUpdateHasBeenCalledSinceUpdate;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected Vector3 warpedPosition;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Quaternion warpedRotation;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Matrix4x4[] _transformArray;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Pose? _trackingBaseDeltaPose;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Camera _cachedCamera;

		[NonSerialized]
		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public long imageTimeStamp;

		[Token(Token = "0x170001BE")]
		public DeviceOffsetMode deviceOffsetMode
		{
			[Token(Token = "0x600178F")]
			[Address(RVA = "0x10A77AC", Offset = "0x10A77AC", VA = "0x10A77AC")]
			get
			{
				return default(DeviceOffsetMode);
			}
			[Token(Token = "0x6001790")]
			[Address(RVA = "0x10A77B4", Offset = "0x10A77B4", VA = "0x10A77B4")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public float deviceOffsetYAxis
		{
			[Token(Token = "0x6001791")]
			[Address(RVA = "0x10A77D8", Offset = "0x10A77D8", VA = "0x10A77D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001792")]
			[Address(RVA = "0x10A77E0", Offset = "0x10A77E0", VA = "0x10A77E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public float deviceOffsetZAxis
		{
			[Token(Token = "0x6001793")]
			[Address(RVA = "0x10A77E8", Offset = "0x10A77E8", VA = "0x10A77E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001794")]
			[Address(RVA = "0x10A77F0", Offset = "0x10A77F0", VA = "0x10A77F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public float deviceTiltXAxis
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0x10A77F8", Offset = "0x10A77F8", VA = "0x10A77F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001796")]
			[Address(RVA = "0x10A7800", Offset = "0x10A7800", VA = "0x10A7800")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public Transform deviceOrigin
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0x10A7808", Offset = "0x10A7808", VA = "0x10A7808")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001798")]
			[Address(RVA = "0x10A7810", Offset = "0x10A7810", VA = "0x10A7810")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public Camera preCullCamera
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0x10A7818", Offset = "0x10A7818", VA = "0x10A7818")]
			get
			{
				return null;
			}
			[Token(Token = "0x600179A")]
			[Address(RVA = "0x10A7820", Offset = "0x10A7820", VA = "0x10A7820")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public int warpingAdjustment
		{
			[Token(Token = "0x600179B")]
			[Address(RVA = "0x10A7828", Offset = "0x10A7828", VA = "0x10A7828")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600179C")]
			[Address(RVA = "0x10A7844", Offset = "0x10A7844", VA = "0x10A7844")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public bool updateHandInPrecull
		{
			[Token(Token = "0x600179D")]
			[Address(RVA = "0x10A78D4", Offset = "0x10A78D4", VA = "0x10A78D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600179E")]
			[Address(RVA = "0x10A78DC", Offset = "0x10A78DC", VA = "0x10A78DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		private Camera cachedCamera
		{
			[Token(Token = "0x600179F")]
			[Address(RVA = "0x10A7A1C", Offset = "0x10A7A1C", VA = "0x10A7A1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x10A7AB4", Offset = "0x10A7AB4", VA = "0x10A7AB4", Slot = "6")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x10A7B4C", Offset = "0x10A7B4C", VA = "0x10A7B4C", Slot = "17")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x10A7CC0", Offset = "0x10A7CC0", VA = "0x10A7CC0", Slot = "18")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x10A7D90", Offset = "0x10A7D90", VA = "0x10A7D90", Slot = "8")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x10A7EFC", Offset = "0x10A7EFC", VA = "0x10A7EFC", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x10A7F3C", Offset = "0x10A7F3C", VA = "0x10A7F3C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x10A83CC", Offset = "0x10A83CC", VA = "0x10A83CC", Slot = "19")]
		protected virtual void onPreCull(Camera preCullingCamera)
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x10A8E1C", Offset = "0x10A8E1C", VA = "0x10A8E1C", Slot = "14")]
		protected override long CalculateInterpolationTime(bool endOfFrame = false)
		{
			return default(long);
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x10A8E48", Offset = "0x10A8E48", VA = "0x10A8E48", Slot = "15")]
		protected override void initializeFlags()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x10A8E60", Offset = "0x10A8E60", VA = "0x10A8E60", Slot = "16")]
		protected override void transformFrame(Frame source, Frame dest)
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x10A7908", Offset = "0x10A7908", VA = "0x10A7908")]
		protected void resetShaderTransforms()
		{
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x10A8F10", Offset = "0x10A8F10", VA = "0x10A8F10", Slot = "20")]
		protected virtual LeapTransform GetWarpedMatrix(long timestamp, bool updateTemporalCompensation = true)
		{
			return default(LeapTransform);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x10A98C0", Offset = "0x10A98C0", VA = "0x10A98C0")]
		protected void transformHands(ref LeapTransform LeftHand, ref LeapTransform RightHand)
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x10A8734", Offset = "0x10A8734", VA = "0x10A8734")]
		protected void OnPreCullHandTransforms(Camera camera)
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x10A9A74", Offset = "0x10A9A74", VA = "0x10A9A74")]
		public LeapXRServiceProvider()
		{
		}
	}
	[Token(Token = "0x200036F")]
	public class StationaryTestLeapProvider : LeapProvider
	{
		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Frame _curFrame;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand _leftHand;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand _rightHand;

		[Token(Token = "0x170001C7")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x148E090", Offset = "0x148E090", VA = "0x148E090", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C8")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x148E098", Offset = "0x148E098", VA = "0x148E098", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x148E0A0", Offset = "0x148E0A0", VA = "0x148E0A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x148E0A4", Offset = "0x148E0A4", VA = "0x148E0A4")]
		private void refreshFrame()
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x148E170", Offset = "0x148E170", VA = "0x148E170")]
		private void Update()
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x148E19C", Offset = "0x148E19C", VA = "0x148E19C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x148E1A8", Offset = "0x148E1A8", VA = "0x148E1A8")]
		public StationaryTestLeapProvider()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public static class DefaultCurve
	{
		[Token(Token = "0x170001C9")]
		public static AnimationCurve Zero
		{
			[Token(Token = "0x60017B6")]
			[Address(RVA = "0x1568DF4", Offset = "0x1568DF4", VA = "0x1568DF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		public static AnimationCurve One
		{
			[Token(Token = "0x60017B7")]
			[Address(RVA = "0x1568E80", Offset = "0x1568E80", VA = "0x1568E80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CB")]
		public static AnimationCurve LinearUp
		{
			[Token(Token = "0x60017B8")]
			[Address(RVA = "0x1568F18", Offset = "0x1568F18", VA = "0x1568F18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		public static AnimationCurve LinearDown
		{
			[Token(Token = "0x60017B9")]
			[Address(RVA = "0x1569014", Offset = "0x1569014", VA = "0x1569014")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		public static AnimationCurve SigmoidUp
		{
			[Token(Token = "0x60017BA")]
			[Address(RVA = "0x1569110", Offset = "0x1569110", VA = "0x1569110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		public static AnimationCurve SigmoidDown
		{
			[Token(Token = "0x60017BB")]
			[Address(RVA = "0x156920C", Offset = "0x156920C", VA = "0x156920C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CF")]
		public static AnimationCurve SigmoidUpDown
		{
			[Token(Token = "0x60017BC")]
			[Address(RVA = "0x1569308", Offset = "0x1569308", VA = "0x1569308")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000371")]
	public static class AnimationCurveUtil
	{
		[Token(Token = "0x20005FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4762C", Offset = "0xB4762C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4002052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float time;

			[Token(Token = "0x4002053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float tolerance;

			[Token(Token = "0x6002850")]
			[Address(RVA = "0x155A39C", Offset = "0x155A39C", VA = "0x155A39C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6002851")]
			[Address(RVA = "0x155A7C4", Offset = "0x155A7C4", VA = "0x155A7C4")]
			internal bool <ContainsKeyAtTime>b__0(Keyframe k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x155A094", Offset = "0x155A094", VA = "0x155A094")]
		public static bool IsConstant(this AnimationCurve curve)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x155A2A0", Offset = "0x155A2A0", VA = "0x155A2A0")]
		public static bool ContainsKeyAtTime(this AnimationCurve curve, float time, float tolerance = 1E-07f)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x155A3A4", Offset = "0x155A3A4", VA = "0x155A3A4")]
		public static AnimationCurve GetCropped(this AnimationCurve curve, float start, float end, bool slideToStart = true)
		{
			return null;
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x155A730", Offset = "0x155A730", VA = "0x155A730")]
		public static void AddBooleanKey(this AnimationCurve curve, float time, bool value)
		{
		}
	}
	[Token(Token = "0x2000372")]
	public static class ArrayPool<T>
	{
		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, Stack<T[]>> _bins;

		[Token(Token = "0x60017C1")]
		static ArrayPool()
		{
		}

		[Token(Token = "0x60017C2")]
		public static T[] Spawn(int minLength)
		{
			return null;
		}

		[Token(Token = "0x60017C3")]
		public static void Recycle(T[] array)
		{
		}
	}
	[Token(Token = "0x2000373")]
	public static class BitConverterNonAlloc
	{
		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x1562BB8", Offset = "0x1562BB8", VA = "0x1562BB8")]
		public static ushort ToUInt16(byte[] bytes, int offset = 0)
		{
			return default(ushort);
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x1562BF0", Offset = "0x1562BF0", VA = "0x1562BF0")]
		public static short ToInt16(byte[] bytes, int offset = 0)
		{
			return default(short);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x1562C28", Offset = "0x1562C28", VA = "0x1562C28")]
		public static uint ToUInt32(byte[] bytes, int offset = 0)
		{
			return default(uint);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x1562C60", Offset = "0x1562C60", VA = "0x1562C60")]
		public static int ToInt32(byte[] bytes, int offset = 0)
		{
			return default(int);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x1562C98", Offset = "0x1562C98", VA = "0x1562C98")]
		public static ulong ToUInt64(byte[] bytes, int offset = 0)
		{
			return default(ulong);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x1562CD0", Offset = "0x1562CD0", VA = "0x1562CD0")]
		public static long ToInt64(byte[] bytes, int offset = 0)
		{
			return default(long);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x1562D08", Offset = "0x1562D08", VA = "0x1562D08")]
		public static float ToSingle(byte[] bytes, int offset = 0)
		{
			return default(float);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x1562D40", Offset = "0x1562D40", VA = "0x1562D40")]
		public static double ToDouble(byte[] bytes, int offset = 0)
		{
			return default(double);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x1562D78", Offset = "0x1562D78", VA = "0x1562D78")]
		public static ushort ToUInt16(byte[] bytes, ref int offset)
		{
			return default(ushort);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x1562DBC", Offset = "0x1562DBC", VA = "0x1562DBC")]
		public static short ToInt16(byte[] bytes, ref int offset)
		{
			return default(short);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x1562E00", Offset = "0x1562E00", VA = "0x1562E00")]
		public static uint ToUInt32(byte[] bytes, ref int offset)
		{
			return default(uint);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x1562E44", Offset = "0x1562E44", VA = "0x1562E44")]
		public static int ToInt32(byte[] bytes, ref int offset)
		{
			return default(int);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x1562E88", Offset = "0x1562E88", VA = "0x1562E88")]
		public static ulong ToUInt64(byte[] bytes, ref int offset)
		{
			return default(ulong);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x1562ECC", Offset = "0x1562ECC", VA = "0x1562ECC")]
		public static long ToInt64(byte[] bytes, ref int offset)
		{
			return default(long);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x1562F10", Offset = "0x1562F10", VA = "0x1562F10")]
		public static float ToSingle(byte[] bytes, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x1562F54", Offset = "0x1562F54", VA = "0x1562F54")]
		public static double ToDouble(byte[] bytes, ref int offset)
		{
			return default(double);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x1562F98", Offset = "0x1562F98", VA = "0x1562F98")]
		public static void GetBytes(ushort value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x1562FD0", Offset = "0x1562FD0", VA = "0x1562FD0")]
		public static void GetBytes(short value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x1563008", Offset = "0x1563008", VA = "0x1563008")]
		public static void GetBytes(uint value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x1563040", Offset = "0x1563040", VA = "0x1563040")]
		public static void GetBytes(int value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x1563078", Offset = "0x1563078", VA = "0x1563078")]
		public static void GetBytes(ulong value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x15630B0", Offset = "0x15630B0", VA = "0x15630B0")]
		public static void GetBytes(long value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x15630E8", Offset = "0x15630E8", VA = "0x15630E8")]
		public static void GetBytes(float value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x1563120", Offset = "0x1563120", VA = "0x1563120")]
		public static void GetBytes(double value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x1563158", Offset = "0x1563158", VA = "0x1563158")]
		public static void GetBytes(ushort value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x156319C", Offset = "0x156319C", VA = "0x156319C")]
		public static void GetBytes(short value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x15631E0", Offset = "0x15631E0", VA = "0x15631E0")]
		public static void GetBytes(uint value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x1563224", Offset = "0x1563224", VA = "0x1563224")]
		public static void GetBytes(int value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x1563268", Offset = "0x1563268", VA = "0x1563268")]
		public static void GetBytes(ulong value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x15632AC", Offset = "0x15632AC", VA = "0x15632AC")]
		public static void GetBytes(long value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x15632F0", Offset = "0x15632F0", VA = "0x15632F0")]
		public static void GetBytes(float value, byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x1563334", Offset = "0x1563334", VA = "0x1563334")]
		public static void GetBytes(double value, byte[] bytes, ref int offset)
		{
		}
	}
	[Token(Token = "0x2000374")]
	public class Comment : MonoBehaviour
	{
		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xB4F138", Offset = "0xB4F138")]
		[SerializeField]
		protected string _comment;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		protected bool _isEditing;

		[Token(Token = "0x170001D0")]
		public string text
		{
			[Token(Token = "0x60017E4")]
			[Address(RVA = "0x1564BAC", Offset = "0x1564BAC", VA = "0x1564BAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60017E5")]
			[Address(RVA = "0x1564BB4", Offset = "0x1564BB4", VA = "0x1564BB4")]
			set
			{
			}
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x1564BBC", Offset = "0x1564BBC", VA = "0x1564BBC")]
		public Comment()
		{
		}
	}
	[Token(Token = "0x2000375")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB45924", Offset = "0xB45924")]
	public class ConnectionMonitor : MonoBehaviour
	{
		[Token(Token = "0x20005FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4763C", Offset = "0xB4763C")]
		private sealed class <Monitor>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ConnectionMonitor <>4__this;

			[Token(Token = "0x1700043A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002855")]
				[Address(RVA = "0x15684D0", Offset = "0x15684D0", VA = "0x15684D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700043B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002857")]
				[Address(RVA = "0x1568538", Offset = "0x1568538", VA = "0x1568538", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002852")]
			[Address(RVA = "0x156820C", Offset = "0x156820C", VA = "0x156820C")]
			[DebuggerHidden]
			public <Monitor>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002853")]
			[Address(RVA = "0x15682A0", Offset = "0x15682A0", VA = "0x15682A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002854")]
			[Address(RVA = "0x15682A4", Offset = "0x15682A4", VA = "0x15682A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002856")]
			[Address(RVA = "0x15684D8", Offset = "0x15684D8", VA = "0x15684D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F1A8", Offset = "0xB4F1A8")]
		public LeapServiceProvider provider;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F1E0", Offset = "0xB4F1E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4F1E0", Offset = "0xB4F1E0")]
		public float fadeInTime;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F238", Offset = "0xB4F238")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4F238", Offset = "0xB4F238")]
		public float fadeOutTime;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F290", Offset = "0xB4F290")]
		public AnimationCurve fadeCurve;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F2C8", Offset = "0xB4F2C8")]
		public int monitorInterval;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F300", Offset = "0xB4F300")]
		public Color onColor;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F338", Offset = "0xB4F338")]
		public float distanceToCamera;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float fadedIn;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SpriteRenderer spriteRenderer;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool connected;

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x1567F2C", Offset = "0x1567F2C", VA = "0x1567F2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x1567FA4", Offset = "0x1567FA4", VA = "0x1567FA4")]
		private void SetAlpha(float alpha)
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x1568074", Offset = "0x1568074", VA = "0x1568074")]
		private void Update()
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x1568004", Offset = "0x1568004", VA = "0x1568004")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5DB88", Offset = "0xB5DB88")]
		private IEnumerator Monitor()
		{
			return null;
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x1568238", Offset = "0x1568238", VA = "0x1568238")]
		public ConnectionMonitor()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class DisconnectionNotice : MonoBehaviour
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fadeInTime;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fadeOutTime;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve fade;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int waitFrames;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color onColor;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Controller leap_controller_;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float fadedIn;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int frames_disconnected_;

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x156CAF8", Offset = "0x156CAF8", VA = "0x156CAF8")]
		private void Start()
		{
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x156CB64", Offset = "0x156CB64", VA = "0x156CB64")]
		private void SetAlpha(float alpha)
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x156CC04", Offset = "0x156CC04", VA = "0x156CC04")]
		private bool IsConnected()
		{
			return default(bool);
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x156CC20", Offset = "0x156CC20", VA = "0x156CC20")]
		private void Update()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x156CD20", Offset = "0x156CD20", VA = "0x156CD20")]
		public DisconnectionNotice()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[ExecuteInEditMode]
	public class EnableDepthBuffer : MonoBehaviour
	{
		[Token(Token = "0x40014B7")]
		public const string DEPTH_TEXTURE_VARIANT_NAME = "USE_DEPTH_TEXTURE";

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DepthTextureMode _depthTextureMode;

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x156CD64", Offset = "0x156CD64", VA = "0x156CD64")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x156CE10", Offset = "0x156CE10", VA = "0x156CE10")]
		public EnableDepthBuffer()
		{
		}
	}
	[Token(Token = "0x2000378")]
	public static class Enum<T>
	{
		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] names;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly T[] values;

		[Token(Token = "0x60017F3")]
		static Enum()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000379")]
	public class EnumEventTable : ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x20005FC")]
		private class Entry
		{
			[Token(Token = "0x4002057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public int enumValue;

			[Token(Token = "0x4002058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			public UnityEvent callback;

			[Token(Token = "0x6002858")]
			[Address(RVA = "0x156F48C", Offset = "0x156F48C", VA = "0x156F48C")]
			public Entry()
			{
			}
		}

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<Entry> _entries;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, UnityEvent> _entryMap;

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x156F16C", Offset = "0x156F16C", VA = "0x156F16C")]
		public bool HasUnityEvent(int enumValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x156F204", Offset = "0x156F204", VA = "0x156F204")]
		public void Invoke(int enumValue)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x156F28C", Offset = "0x156F28C", VA = "0x156F28C", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x156F290", Offset = "0x156F290", VA = "0x156F290", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x156F3F4", Offset = "0x156F3F4", VA = "0x156F3F4")]
		public EnumEventTable()
		{
		}
	}
	[Token(Token = "0x200037A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB45998", Offset = "0xB45998")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB45998", Offset = "0xB45998")]
	public class ExecuteBeforeAttribute : Attribute
	{
		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type beforeType;

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x10247BC", Offset = "0x10247BC", VA = "0x10247BC")]
		public ExecuteBeforeAttribute(Type beforeType)
		{
		}
	}
	[Token(Token = "0x200037B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB459E0", Offset = "0xB459E0")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB459E0", Offset = "0xB459E0")]
	public class ExecuteAfterAttribute : Attribute
	{
		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type afterType;

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x10247AC", Offset = "0x10247AC", VA = "0x10247AC")]
		public ExecuteAfterAttribute(Type afterType)
		{
		}
	}
	[Token(Token = "0x200037C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB45A28", Offset = "0xB45A28")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB45A28", Offset = "0xB45A28")]
	public class ExecuteBeforeDefault : Attribute
	{
		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x10247C4", Offset = "0x10247C4", VA = "0x10247C4")]
		public ExecuteBeforeDefault()
		{
		}
	}
	[Token(Token = "0x200037D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB45A6C", Offset = "0xB45A6C")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB45A6C", Offset = "0xB45A6C")]
	public class ExecuteAfterDefault : Attribute
	{
		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x10247B4", Offset = "0x10247B4", VA = "0x10247B4")]
		public ExecuteAfterDefault()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class FpsLabel : MonoBehaviour
	{
		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LeapProvider _provider;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMesh _frameRateText;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SmoothedFloat _smoothedRenderFps;

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x10263E0", Offset = "0x10263E0", VA = "0x10263E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x1026570", Offset = "0x1026570", VA = "0x1026570")]
		private void Update()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x10267F8", Offset = "0x10267F8", VA = "0x10267F8")]
		public FpsLabel()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class FrameRateControls : MonoBehaviour
	{
		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int targetRenderRate;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int targetRenderRateStep;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int fixedPhysicsRate;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int fixedPhysicsRateStep;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode unlockRender;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode unlockPhysics;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode decrease;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode increase;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyCode resetRate;

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x1026868", Offset = "0x1026868", VA = "0x1026868")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x1026954", Offset = "0x1026954", VA = "0x1026954")]
		private void Update()
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x1026A94", Offset = "0x1026A94", VA = "0x1026A94")]
		public void ResetRender()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x1026AAC", Offset = "0x1026AAC", VA = "0x1026AAC")]
		public void ResetPhysics()
		{
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x1026AC4", Offset = "0x1026AC4", VA = "0x1026AC4")]
		public void ResetAll()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x1026B08", Offset = "0x1026B08", VA = "0x1026B08")]
		public FrameRateControls()
		{
		}
	}
	[Token(Token = "0x2000380")]
	public static class GuiRectUtil
	{
		[Token(Token = "0x6001806")]
		[Address(RVA = "0x10078BC", Offset = "0x10078BC", VA = "0x10078BC")]
		public static Vector3 Corner00(this UnityEngine.Rect rect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x1007924", Offset = "0x1007924", VA = "0x1007924")]
		public static Vector3 Corner10(this UnityEngine.Rect rect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x100799C", Offset = "0x100799C", VA = "0x100799C")]
		public static Vector3 Corner01(this UnityEngine.Rect rect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x1007A14", Offset = "0x1007A14", VA = "0x1007A14")]
		public static Vector3 Corner11(this UnityEngine.Rect rect)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x1007AA8", Offset = "0x1007AA8", VA = "0x1007AA8")]
		public static UnityEngine.Rect Encapsulate(this UnityEngine.Rect rect, Vector2 point)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x1007C10", Offset = "0x1007C10", VA = "0x1007C10")]
		public static void SplitHorizontally(this UnityEngine.Rect rect, out UnityEngine.Rect left, out UnityEngine.Rect right)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x1007C8C", Offset = "0x1007C8C", VA = "0x1007C8C")]
		public static void SplitHorizontallyWithRight(this UnityEngine.Rect rect, out UnityEngine.Rect left, out UnityEngine.Rect right, float rightWidth)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x1007D18", Offset = "0x1007D18", VA = "0x1007D18")]
		public static UnityEngine.Rect NextLine(this UnityEngine.Rect rect)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x1007D74", Offset = "0x1007D74", VA = "0x1007D74")]
		public static UnityEngine.Rect FromRight(this UnityEngine.Rect rect, float width)
		{
			return default(UnityEngine.Rect);
		}
	}
	[Token(Token = "0x2000381")]
	public static class Hands
	{
		[Serializable]
		[Token(Token = "0x20005FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4764C", Offset = "0xB4764C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400205A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Hand, bool> <>9__12_0;

			[Token(Token = "0x400205B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Hand, bool> <>9__14_0;

			[Token(Token = "0x400205C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Hand, bool> <>9__16_0;

			[Token(Token = "0x400205D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<Hand, bool> <>9__18_0;

			[Token(Token = "0x600285A")]
			[Address(RVA = "0xF40AF8", Offset = "0xF40AF8", VA = "0xF40AF8")]
			public <>c()
			{
			}

			[Token(Token = "0x600285B")]
			[Address(RVA = "0xF40B00", Offset = "0xF40B00", VA = "0xF40B00")]
			internal bool <get_Left>b__12_0(Hand hand)
			{
				return default(bool);
			}

			[Token(Token = "0x600285C")]
			[Address(RVA = "0xF40B18", Offset = "0xF40B18", VA = "0xF40B18")]
			internal bool <get_Right>b__14_0(Hand hand)
			{
				return default(bool);
			}

			[Token(Token = "0x600285D")]
			[Address(RVA = "0xF40B34", Offset = "0xF40B34", VA = "0xF40B34")]
			internal bool <get_FixedLeft>b__16_0(Hand hand)
			{
				return default(bool);
			}

			[Token(Token = "0x600285E")]
			[Address(RVA = "0xF40B4C", Offset = "0xF40B4C", VA = "0xF40B4C")]
			internal bool <get_FixedRight>b__18_0(Hand hand)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LeapProvider s_provider;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static GameObject s_leapRig;

		[Token(Token = "0x170001D1")]
		public static GameObject CameraRig
		{
			[Token(Token = "0x6001812")]
			[Address(RVA = "0xF3E70C", Offset = "0xF3E70C", VA = "0xF3E70C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D2")]
		public static LeapProvider Provider
		{
			[Token(Token = "0x6001813")]
			[Address(RVA = "0xF3E7EC", Offset = "0xF3E7EC", VA = "0xF3E7EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D3")]
		public static Hand Left
		{
			[Token(Token = "0x6001816")]
			[Address(RVA = "0xF3E94C", Offset = "0xF3E94C", VA = "0xF3E94C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D4")]
		public static Hand Right
		{
			[Token(Token = "0x6001817")]
			[Address(RVA = "0xF3EB50", Offset = "0xF3EB50", VA = "0xF3EB50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D5")]
		public static Hand FixedLeft
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0xF3EDD4", Offset = "0xF3EDD4", VA = "0xF3EDD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		public static Hand FixedRight
		{
			[Token(Token = "0x6001819")]
			[Address(RVA = "0xF3EFD8", Offset = "0xF3EFD8", VA = "0xF3EFD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xF3E3D0", Offset = "0xF3E3D0", VA = "0xF3E3D0")]
		static Hands()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xF3E6B0", Offset = "0xF3E6B0", VA = "0xF3E6B0")]
		private static void InitStaticOnNewScene(Scene unused, Scene unused2)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xF3E46C", Offset = "0xF3E46C", VA = "0xF3E46C")]
		private static void InitStatic()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xF3E8CC", Offset = "0xF3E8CC", VA = "0xF3E8CC")]
		public static Hand Get(Chirality chirality)
		{
			return null;
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xF3ED54", Offset = "0xF3ED54", VA = "0xF3ED54")]
		public static Hand GetFixed(Chirality chirality)
		{
			return null;
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xF3F1DC", Offset = "0xF3F1DC", VA = "0xF3F1DC")]
		public static Finger GetThumb(this Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xF3F244", Offset = "0xF3F244", VA = "0xF3F244")]
		public static Finger GetIndex(this Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xF3F2B0", Offset = "0xF3F2B0", VA = "0xF3F2B0")]
		public static Finger GetMiddle(this Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xF3F31C", Offset = "0xF3F31C", VA = "0xF3F31C")]
		public static Finger GetRing(this Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xF3F388", Offset = "0xF3F388", VA = "0xF3F388")]
		public static Finger GetPinky(this Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xF3F3F4", Offset = "0xF3F3F4", VA = "0xF3F3F4")]
		public static Pose GetPalmPose(this Hand hand)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xF3F49C", Offset = "0xF3F49C", VA = "0xF3F49C")]
		public static void SetPalmPose(this Hand hand, Pose newPalmPose)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xF3F794", Offset = "0xF3F794", VA = "0xF3F794")]
		public static Vector3 PalmarAxis(this Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xF3F854", Offset = "0xF3F854", VA = "0xF3F854")]
		public static Vector3 RadialAxis(this Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xF3F944", Offset = "0xF3F944", VA = "0xF3F944")]
		public static Vector3 DistalAxis(this Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xF3F980", Offset = "0xF3F980", VA = "0xF3F980")]
		public static bool IsPinching(this Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xF3F9A8", Offset = "0xF3F9A8", VA = "0xF3F9A8")]
		public static Vector3 GetPinchPosition(this Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xF3FAFC", Offset = "0xF3FAFC", VA = "0xF3FAFC")]
		public static Vector3 GetPredictedPinchPosition(this Hand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xF3FE50", Offset = "0xF3FE50", VA = "0xF3FE50")]
		public static bool IsFacing(this Vector3 facingVector, Vector3 fromWorldPosition, Vector3 towardsWorldPosition, float maxOffsetAngleAllowed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xF3FF54", Offset = "0xF3FF54", VA = "0xF3FF54")]
		public static float GetFistStrength(this Hand hand)
		{
			return default(float);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xF402AC", Offset = "0xF402AC", VA = "0xF402AC")]
		public static void Transform(this Bone bone, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xF40394", Offset = "0xF40394", VA = "0xF40394")]
		public static void Transform(this Finger finger, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xF4047C", Offset = "0xF4047C", VA = "0xF4047C")]
		public static void Transform(this Hand hand, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xF40564", Offset = "0xF40564", VA = "0xF40564")]
		public static void Transform(this Frame frame, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xF4064C", Offset = "0xF4064C", VA = "0xF4064C")]
		public static void SetTransform(this Bone bone, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xF40844", Offset = "0xF40844", VA = "0xF40844")]
		public static void SetTipTransform(this Finger finger, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xF3F558", Offset = "0xF3F558", VA = "0xF3F558")]
		public static void SetTransform(this Hand hand, Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000382")]
	public static class HandUtils
	{
		[Token(Token = "0x20005FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4765C", Offset = "0xB4765C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400205E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Chirality whichHand;

			[Token(Token = "0x600285F")]
			[Address(RVA = "0xF3E348", Offset = "0xF3E348", VA = "0xF3E348")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6002860")]
			[Address(RVA = "0xF3E3A0", Offset = "0xF3E3A0", VA = "0xF3E3A0")]
			internal bool <Get>b__0(Hand h)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xF3DECC", Offset = "0xF3DECC", VA = "0xF3DECC")]
		public static void Fill(this Hand toFill, long frameID, int id, float confidence, float grabStrength, float grabAngle, float pinchStrength, float pinchDistance, float palmWidth, bool isLeft, float timeVisible, List<Finger> fingers, Vector palmPosition, Vector stabilizedPalmPosition, Vector palmVelocity, Vector palmNormal, LeapQuaternion rotation, Vector direction, Vector wristPosition)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xF3DF88", Offset = "0xF3DF88", VA = "0xF3DF88")]
		public static void Fill(this Bone toFill, Vector prevJoint, Vector nextJoint, Vector center, Vector direction, float length, float width, Bone.BoneType type, LeapQuaternion rotation)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xF3DFE8", Offset = "0xF3DFE8", VA = "0xF3DFE8")]
		public static void Fill(this Finger toFill, long frameId, int handId, int fingerId, float timeVisible, Vector tipPosition, Vector direction, float width, float length, bool isExtended, Finger.FingerType type, [Optional] Bone metacarpal, [Optional] Bone proximal, [Optional] Bone intermediate, [Optional] Bone distal)
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xF3E120", Offset = "0xF3E120", VA = "0xF3E120")]
		public static void Fill(this Arm toFill, Vector elbow, Vector wrist, Vector center, Vector direction, float length, float width, LeapQuaternion rotation)
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xF3E17C", Offset = "0xF3E17C", VA = "0xF3E17C")]
		public static void FillTemporalData(this Hand toFill, Hand previousHand, float deltaTime)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xF3E25C", Offset = "0xF3E25C", VA = "0xF3E25C")]
		public static Hand Get(this Frame frame, Chirality whichHand)
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xF3E350", Offset = "0xF3E350", VA = "0xF3E350")]
		public static Hand Get(this LeapProvider provider, Chirality whichHand)
		{
			return null;
		}
	}
	[Token(Token = "0x2000383")]
	public static class InternalUtility
	{
		[Token(Token = "0x6001837")]
		public static T AddComponent<T>(GameObject obj) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x109E6A8", Offset = "0x109E6A8", VA = "0x109E6A8")]
		public static Component AddComponent(GameObject obj, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x109E6C0", Offset = "0x109E6C0", VA = "0x109E6C0")]
		public static void Destroy(UnityEngine.Object obj)
		{
		}
	}
	[Token(Token = "0x2000384")]
	public class KeyEnableBehaviors : MonoBehaviour
	{
		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Behaviour> targets;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4F3B0", Offset = "0xB4F3B0")]
		public KeyCode unlockHold;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode toggle;

		[Token(Token = "0x600183A")]
		[Address(RVA = "0x109E728", Offset = "0x109E728", VA = "0x109E728")]
		private void Update()
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x109E850", Offset = "0x109E850", VA = "0x109E850")]
		public KeyEnableBehaviors()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class KeyEnableGameObjects : MonoBehaviour
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> targets;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4F3E8", Offset = "0xB4F3E8")]
		public KeyCode unlockHold;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode toggle;

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x109E860", Offset = "0x109E860", VA = "0x109E860")]
		private void Update()
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x109E988", Offset = "0x109E988", VA = "0x109E988")]
		public KeyEnableGameObjects()
		{
		}
	}
	[Token(Token = "0x2000386")]
	public static class LeapColor
	{
		[Token(Token = "0x170001D7")]
		public static Color black
		{
			[Token(Token = "0x600183E")]
			[Address(RVA = "0x109E99C", Offset = "0x109E99C", VA = "0x109E99C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001D8")]
		public static Color gray
		{
			[Token(Token = "0x600183F")]
			[Address(RVA = "0x109E9A4", Offset = "0x109E9A4", VA = "0x109E9A4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001D9")]
		public static Color white
		{
			[Token(Token = "0x6001840")]
			[Address(RVA = "0x109E9E0", Offset = "0x109E9E0", VA = "0x109E9E0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DA")]
		public static Color pink
		{
			[Token(Token = "0x6001841")]
			[Address(RVA = "0x109E9E8", Offset = "0x109E9E8", VA = "0x109E9E8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DB")]
		public static Color magenta
		{
			[Token(Token = "0x6001842")]
			[Address(RVA = "0x109EA2C", Offset = "0x109EA2C", VA = "0x109EA2C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DC")]
		public static Color fuschia
		{
			[Token(Token = "0x6001843")]
			[Address(RVA = "0x109EA34", Offset = "0x109EA34", VA = "0x109EA34")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DD")]
		public static Color red
		{
			[Token(Token = "0x6001844")]
			[Address(RVA = "0x109EAC0", Offset = "0x109EAC0", VA = "0x109EAC0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DE")]
		public static Color brown
		{
			[Token(Token = "0x6001845")]
			[Address(RVA = "0x109EAC8", Offset = "0x109EAC8", VA = "0x109EAC8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001DF")]
		public static Color beige
		{
			[Token(Token = "0x6001846")]
			[Address(RVA = "0x109EB0C", Offset = "0x109EB0C", VA = "0x109EB0C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E0")]
		public static Color coral
		{
			[Token(Token = "0x6001847")]
			[Address(RVA = "0x109EB50", Offset = "0x109EB50", VA = "0x109EB50")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E1")]
		public static Color orange
		{
			[Token(Token = "0x6001848")]
			[Address(RVA = "0x109EB94", Offset = "0x109EB94", VA = "0x109EB94")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E2")]
		public static Color khaki
		{
			[Token(Token = "0x6001849")]
			[Address(RVA = "0x109EC14", Offset = "0x109EC14", VA = "0x109EC14")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E3")]
		public static Color amber
		{
			[Token(Token = "0x600184A")]
			[Address(RVA = "0x109EC5C", Offset = "0x109EC5C", VA = "0x109EC5C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E4")]
		public static Color yellow
		{
			[Token(Token = "0x600184B")]
			[Address(RVA = "0x109EC0C", Offset = "0x109EC0C", VA = "0x109EC0C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E5")]
		public static Color gold
		{
			[Token(Token = "0x600184C")]
			[Address(RVA = "0x109EC9C", Offset = "0x109EC9C", VA = "0x109EC9C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E6")]
		public static Color green
		{
			[Token(Token = "0x600184D")]
			[Address(RVA = "0x109ECE4", Offset = "0x109ECE4", VA = "0x109ECE4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E7")]
		public static Color forest
		{
			[Token(Token = "0x600184E")]
			[Address(RVA = "0x109ECEC", Offset = "0x109ECEC", VA = "0x109ECEC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E8")]
		public static Color lime
		{
			[Token(Token = "0x600184F")]
			[Address(RVA = "0x109ED30", Offset = "0x109ED30", VA = "0x109ED30")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001E9")]
		public static Color mint
		{
			[Token(Token = "0x6001850")]
			[Address(RVA = "0x109ED78", Offset = "0x109ED78", VA = "0x109ED78")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001EA")]
		public static Color olive
		{
			[Token(Token = "0x6001851")]
			[Address(RVA = "0x109EDBC", Offset = "0x109EDBC", VA = "0x109EDBC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001EB")]
		public static Color jade
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0x109EDFC", Offset = "0x109EDFC", VA = "0x109EDFC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001EC")]
		public static Color teal
		{
			[Token(Token = "0x6001853")]
			[Address(RVA = "0x109EE40", Offset = "0x109EE40", VA = "0x109EE40")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001ED")]
		public static Color veridian
		{
			[Token(Token = "0x6001854")]
			[Address(RVA = "0x109EE80", Offset = "0x109EE80", VA = "0x109EE80")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001EE")]
		public static Color turquoise
		{
			[Token(Token = "0x6001855")]
			[Address(RVA = "0x109EEC8", Offset = "0x109EEC8", VA = "0x109EEC8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001EF")]
		public static Color cyan
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0x109EF10", Offset = "0x109EF10", VA = "0x109EF10")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F0")]
		public static Color cerulean
		{
			[Token(Token = "0x6001857")]
			[Address(RVA = "0x109EF18", Offset = "0x109EF18", VA = "0x109EF18")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F1")]
		public static Color aqua
		{
			[Token(Token = "0x6001858")]
			[Address(RVA = "0x109EF5C", Offset = "0x109EF5C", VA = "0x109EF5C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F2")]
		public static Color electricBlue
		{
			[Token(Token = "0x6001859")]
			[Address(RVA = "0x109EFA4", Offset = "0x109EFA4", VA = "0x109EFA4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F3")]
		public static Color blue
		{
			[Token(Token = "0x600185A")]
			[Address(RVA = "0x109EFE8", Offset = "0x109EFE8", VA = "0x109EFE8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F4")]
		public static Color navy
		{
			[Token(Token = "0x600185B")]
			[Address(RVA = "0x109EFF0", Offset = "0x109EFF0", VA = "0x109EFF0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F5")]
		public static Color periwinkle
		{
			[Token(Token = "0x600185C")]
			[Address(RVA = "0x109F030", Offset = "0x109F030", VA = "0x109F030")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F6")]
		public static Color purple
		{
			[Token(Token = "0x600185D")]
			[Address(RVA = "0x109F070", Offset = "0x109F070", VA = "0x109F070")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F7")]
		public static Color violet
		{
			[Token(Token = "0x600185E")]
			[Address(RVA = "0x109F0EC", Offset = "0x109F0EC", VA = "0x109F0EC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170001F8")]
		public static Color lavender
		{
			[Token(Token = "0x600185F")]
			[Address(RVA = "0x109F12C", Offset = "0x109F12C", VA = "0x109F12C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x109EAB0", Offset = "0x109EAB0", VA = "0x109EAB0")]
		private static Color lerp(Color a, Color b, float amount)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x2000387")]
	public static class UnityVectorExtension
	{
		[Token(Token = "0x6001861")]
		[Address(RVA = "0x14961E8", Offset = "0x14961E8", VA = "0x14961E8")]
		public static Vector3 ToVector3(this Vector vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x149669C", Offset = "0x149669C", VA = "0x149669C")]
		public static Vector3 ToVector3(this LEAP_VECTOR vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x14966D0", Offset = "0x14966D0", VA = "0x14966D0")]
		public static Vector4 ToVector4(this Vector vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x14963AC", Offset = "0x14963AC", VA = "0x14963AC")]
		public static Vector ToVector(this Vector3 vector)
		{
			return default(Vector);
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x1496704", Offset = "0x1496704", VA = "0x1496704")]
		public static LEAP_VECTOR ToCVector(this Vector3 vector)
		{
			return default(LEAP_VECTOR);
		}
	}
	[Token(Token = "0x2000388")]
	public static class UnityQuaternionExtension
	{
		[Token(Token = "0x6001866")]
		[Address(RVA = "0x1496638", Offset = "0x1496638", VA = "0x1496638")]
		public static Quaternion ToQuaternion(this LeapQuaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x1496668", Offset = "0x1496668", VA = "0x1496668")]
		public static Quaternion ToQuaternion(this LEAP_QUATERNION q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0x14963B0", Offset = "0x14963B0", VA = "0x14963B0")]
		public static LeapQuaternion ToLeapQuaternion(this Quaternion q)
		{
			return default(LeapQuaternion);
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x1496698", Offset = "0x1496698", VA = "0x1496698")]
		public static LEAP_QUATERNION ToCQuaternion(this Quaternion q)
		{
			return default(LEAP_QUATERNION);
		}
	}
	[Token(Token = "0x2000389")]
	public static class UnityMatrixExtension
	{
		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector LEAP_UP;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector LEAP_FORWARD;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector LEAP_ORIGIN;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly float MM_TO_M;

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x14960C0", Offset = "0x14960C0", VA = "0x14960C0")]
		public static Quaternion CalculateRotation(this LeapTransform trs)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x149621C", Offset = "0x149621C", VA = "0x149621C")]
		public static LeapTransform GetLeapMatrix(this Transform t)
		{
			return default(LeapTransform);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x14963E0", Offset = "0x14963E0", VA = "0x14963E0")]
		public static void Transform(this Transform thisTransform, Matrix4x4 transform)
		{
		}
	}
	[Token(Token = "0x200038A")]
	public static class ListAndArrayExtensions
	{
		[Token(Token = "0x600186E")]
		public static T[] Fill<T>(this T[] array, T value)
		{
			return null;
		}

		[Token(Token = "0x600186F")]
		public static T[] Fill<T>(this T[] array, Func<T> constructor)
		{
			return null;
		}

		[Token(Token = "0x6001870")]
		public static T[,] Fill<T>(this T[,] array, T value)
		{
			return null;
		}

		[Token(Token = "0x6001871")]
		public static List<T> Fill<T>(this List<T> list, T value)
		{
			return null;
		}

		[Token(Token = "0x6001872")]
		public static List<T> Fill<T>(this List<T> list, int count, T value)
		{
			return null;
		}

		[Token(Token = "0x6001873")]
		public static List<T> FillEach<T>(this List<T> list, Func<T> generator)
		{
			return null;
		}

		[Token(Token = "0x6001874")]
		public static List<T> FillEach<T>(this List<T> list, Func<int, T> generator)
		{
			return null;
		}

		[Token(Token = "0x6001875")]
		public static List<T> FillEach<T>(this List<T> list, int count, Func<T> generator)
		{
			return null;
		}

		[Token(Token = "0x6001876")]
		public static List<T> FillEach<T>(this List<T> list, int count, Func<int, T> generator)
		{
			return null;
		}

		[Token(Token = "0x6001877")]
		public static List<T> Append<T>(this List<T> list, int count, T value)
		{
			return null;
		}

		[Token(Token = "0x6001878")]
		public static T RemoveLast<T>(this List<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x6001879")]
		public static bool RemoveUnordered<T>(this List<T> list, T element)
		{
			return default(bool);
		}

		[Token(Token = "0x600187A")]
		public static void RemoveAtUnordered<T>(this List<T> list, int index)
		{
		}

		[Token(Token = "0x600187B")]
		public static void InsertUnordered<T>(this List<T> list, int index, T element)
		{
		}

		[Token(Token = "0x600187C")]
		public static void RemoveAtMany<T>(this List<T> list, List<int> sortedIndexes)
		{
		}

		[Token(Token = "0x600187D")]
		public static void InsertMany<T>(this List<T> list, List<int> sortedIndexes, List<T> elements)
		{
		}
	}
	[Token(Token = "0x200038B")]
	public abstract class PostProcessProvider : LeapProvider
	{
		[Token(Token = "0x20005FF")]
		public enum DataUpdateMode
		{
			[Token(Token = "0x4002060")]
			UpdateOnly,
			[Token(Token = "0x4002061")]
			FixedUpdateOnly,
			[Token(Token = "0x4002062")]
			UpdateAndFixedUpdate
		}

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F420", Offset = "0xB4F420")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB4F420", Offset = "0xB4F420")]
		protected LeapProvider _inputLeapProvider;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F490", Offset = "0xB4F490")]
		public DataUpdateMode dataUpdateMode;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F4C8", Offset = "0xB4F4C8")]
		public bool passthroughOnly;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Frame _cachedUpdateFrame;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Frame _cachedFixedFrame;

		[Token(Token = "0x170001F9")]
		public LeapProvider inputLeapProvider
		{
			[Token(Token = "0x600187E")]
			[Address(RVA = "0x12A290C", Offset = "0x12A290C", VA = "0x12A290C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600187F")]
			[Address(RVA = "0x12A2914", Offset = "0x12A2914", VA = "0x12A2914")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x6001880")]
			[Address(RVA = "0x12A2C58", Offset = "0x12A2C58", VA = "0x12A2C58", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FB")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x6001881")]
			[Address(RVA = "0x12A2C60", Offset = "0x12A2C60", VA = "0x12A2C60", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x12A2C68", Offset = "0x12A2C68", VA = "0x12A2C68", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x12A2C70", Offset = "0x12A2C70", VA = "0x12A2C70", Slot = "7")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001884")]
		public abstract void ProcessFrame(ref Frame inputFrame);

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x12A2B88", Offset = "0x12A2B88", VA = "0x12A2B88")]
		private void validateInput()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x12A2C74", Offset = "0x12A2C74", VA = "0x12A2C74")]
		private bool detectCycle()
		{
			return default(bool);
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x12A2E08", Offset = "0x12A2E08", VA = "0x12A2E08")]
		private void processUpdateFrame(Frame inputFrame)
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x12A2E6C", Offset = "0x12A2E6C", VA = "0x12A2E6C")]
		private void processFixedFrame(Frame inputFrame)
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x12A2ECC", Offset = "0x12A2ECC", VA = "0x12A2ECC")]
		protected PostProcessProvider()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public struct ProfilerSample : IDisposable
	{
		[Token(Token = "0x600188A")]
		[Address(RVA = "0x12A2F5C", Offset = "0x12A2F5C", VA = "0x12A2F5C")]
		public ProfilerSample(string sampleName)
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x12A2F60", Offset = "0x12A2F60", VA = "0x12A2F60")]
		public ProfilerSample(string sampleName, UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x12A2F64", Offset = "0x12A2F64", VA = "0x12A2F64", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public interface IProgressView
	{
		[Token(Token = "0x600188D")]
		void Clear();

		[Token(Token = "0x600188E")]
		void DisplayProgress(string title, string info, float progress);
	}
	[Token(Token = "0x200038E")]
	public class ProgressBar
	{
		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<int> chunks;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<int> progress;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<string> titleStrings;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> infoStrings;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Stopwatch stopwatch;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _forceUpdate;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IProgressView _view;

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x12A2F68", Offset = "0x12A2F68", VA = "0x12A2F68")]
		public ProgressBar(IProgressView view)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x12A306C", Offset = "0x12A306C", VA = "0x12A306C")]
		public void Begin(int sections, string title, string info, Action action)
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x12A32E8", Offset = "0x12A32E8", VA = "0x12A32E8")]
		public void Step(string infoString = "")
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x12A33D4", Offset = "0x12A33D4", VA = "0x12A33D4")]
		private void displayBar(string info = "")
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200038F")]
	public struct SingleLayer : IEquatable<SingleLayer>
	{
		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int layerIndex;

		[Token(Token = "0x170001FC")]
		public int layerMask
		{
			[Token(Token = "0x6001893")]
			[Address(RVA = "0x12B4704", Offset = "0x12B4704", VA = "0x12B4704")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001894")]
			[Address(RVA = "0x12B4714", Offset = "0x12B4714", VA = "0x12B4714")]
			set
			{
			}
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x12B47E0", Offset = "0x12B47E0", VA = "0x12B47E0")]
		public static implicit operator int(SingleLayer singleLayer)
		{
			return default(int);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x12B47E4", Offset = "0x12B47E4", VA = "0x12B47E4")]
		public static implicit operator SingleLayer(int layerIndex)
		{
			return default(SingleLayer);
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x12B47EC", Offset = "0x12B47EC", VA = "0x12B47EC", Slot = "4")]
		public bool Equals(SingleLayer other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000390")]
	public class TransformHistory
	{
		[Token(Token = "0x2000600")]
		public struct TransformData
		{
			[Token(Token = "0x4002063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public long time;

			[Token(Token = "0x4002064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 position;

			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Quaternion rotation;

			[Token(Token = "0x6002861")]
			[Address(RVA = "0x1495CCC", Offset = "0x1495CCC", VA = "0x1495CCC")]
			public static TransformData Lerp(TransformData from, TransformData to, long time)
			{
				return default(TransformData);
			}

			[Token(Token = "0x6002862")]
			[Address(RVA = "0x1495AC4", Offset = "0x1495AC4", VA = "0x1495AC4")]
			public static TransformData GetTransformAtTime(RingBuffer<TransformData> history, long desiredTime)
			{
				return default(TransformData);
			}
		}

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RingBuffer<TransformData> history;

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x1495960", Offset = "0x1495960", VA = "0x1495960")]
		public TransformHistory(int capacity = 32)
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x14959E4", Offset = "0x14959E4", VA = "0x14959E4")]
		public void UpdateDelay(Pose curPose, long timestamp)
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x1495A78", Offset = "0x1495A78", VA = "0x1495A78")]
		public void SampleTransform(long timestamp, out Vector3 delayedPos, out Quaternion delayedRot)
		{
		}
	}
	[Token(Token = "0x2000391")]
	public static class TransformUtil
	{
		[Token(Token = "0x600189B")]
		[Address(RVA = "0x1495E74", Offset = "0x1495E74", VA = "0x1495E74")]
		public static Quaternion TransformRotation(this Transform transform, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x1495F4C", Offset = "0x1495F4C", VA = "0x1495F4C")]
		public static Quaternion InverseTransformRotation(this Transform transform, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x149602C", Offset = "0x149602C", VA = "0x149602C")]
		public static void SetLocalX(this Transform transform, float localX)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x14960B0", Offset = "0x14960B0", VA = "0x14960B0")]
		public static void SetLocalY(this Transform transform, float localY)
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x14960B8", Offset = "0x14960B8", VA = "0x14960B8")]
		public static void SetLocalZ(this Transform transform, float localZ)
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x1496034", Offset = "0x1496034", VA = "0x1496034")]
		private static void setLocalAxis(this Transform transform, float value, int axis)
		{
		}
	}
	[Token(Token = "0x2000392")]
	public static class Utils
	{
		[Token(Token = "0x2000601")]
		public struct ChildrenEnumerator : IEnumerator<Transform>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Transform _t;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int _idx;

			[Token(Token = "0x4002068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private int _count;

			[Token(Token = "0x1700043C")]
			public Transform Current
			{
				[Token(Token = "0x6002866")]
				[Address(RVA = "0x149D5EC", Offset = "0x149D5EC", VA = "0x149D5EC", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700043D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002867")]
				[Address(RVA = "0x149D688", Offset = "0x149D688", VA = "0x149D688", Slot = "7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002863")]
			[Address(RVA = "0x149777C", Offset = "0x149777C", VA = "0x149777C")]
			public ChildrenEnumerator(Transform t)
			{
			}

			[Token(Token = "0x6002864")]
			[Address(RVA = "0x149D5C0", Offset = "0x149D5C0", VA = "0x149D5C0")]
			public ChildrenEnumerator GetEnumerator()
			{
				return default(ChildrenEnumerator);
			}

			[Token(Token = "0x6002865")]
			[Address(RVA = "0x149D5CC", Offset = "0x149D5CC", VA = "0x149D5CC", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002868")]
			[Address(RVA = "0x149D68C", Offset = "0x149D68C", VA = "0x149D68C", Slot = "8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6002869")]
			[Address(RVA = "0x149D6C8", Offset = "0x149D6C8", VA = "0x149D6C8", Slot = "5")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000602")]
		public struct HorizontalLineRectEnumerator
		{
			[Token(Token = "0x4002069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnityEngine.Rect rect;

			[Token(Token = "0x400206A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int numLines;

			[Token(Token = "0x400206B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int index;

			[Token(Token = "0x1700043E")]
			public float eachHeight
			{
				[Token(Token = "0x600286B")]
				[Address(RVA = "0x149D6CC", Offset = "0x149D6CC", VA = "0x149D6CC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700043F")]
			public UnityEngine.Rect Current
			{
				[Token(Token = "0x600286C")]
				[Address(RVA = "0x149D6FC", Offset = "0x149D6FC", VA = "0x149D6FC")]
				get
				{
					return default(UnityEngine.Rect);
				}
			}

			[Token(Token = "0x600286A")]
			[Address(RVA = "0x149B388", Offset = "0x149B388", VA = "0x149B388")]
			public HorizontalLineRectEnumerator(UnityEngine.Rect rect, int numLines)
			{
			}

			[Token(Token = "0x600286D")]
			[Address(RVA = "0x149D7C0", Offset = "0x149D7C0", VA = "0x149D7C0")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600286E")]
			[Address(RVA = "0x149D7DC", Offset = "0x149D7DC", VA = "0x149D7DC")]
			public HorizontalLineRectEnumerator GetEnumerator()
			{
				return default(HorizontalLineRectEnumerator);
			}

			[Token(Token = "0x600286F")]
			[Address(RVA = "0x149D7F0", Offset = "0x149D7F0", VA = "0x149D7F0")]
			public void Reset()
			{
			}

			[Token(Token = "0x6002870")]
			[Address(RVA = "0x149D7FC", Offset = "0x149D7FC", VA = "0x149D7FC")]
			public Query<UnityEngine.Rect> Query()
			{
				return default(Query<UnityEngine.Rect>);
			}
		}

		[Token(Token = "0x2000603")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4766C", Offset = "0xB4766C")]
		private sealed class <>c__DisplayClass10_0<T> where T : IComparable<T>
		{
			[Token(Token = "0x400206C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IList<T> list;

			[Token(Token = "0x6002871")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6002872")]
			internal int <GetSortedOrder>b__0(int a, int b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000604")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4767C", Offset = "0xB4767C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x400206D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string curr;

			[Token(Token = "0x6002873")]
			[Address(RVA = "0x1497194", Offset = "0x1497194", VA = "0x1497194")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x6002874")]
			[Address(RVA = "0x149D330", Offset = "0x149D330", VA = "0x149D330")]
			internal bool <GenerateNiceName>b__0(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x6002875")]
			[Address(RVA = "0x149D434", Offset = "0x149D434", VA = "0x149D434")]
			internal bool <GenerateNiceName>b__1(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x6002876")]
			[Address(RVA = "0x149D504", Offset = "0x149D504", VA = "0x149D504")]
			internal bool <GenerateNiceName>b__2(char c)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000605")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4768C", Offset = "0xB4768C")]
		private sealed class <>c
		{
			[Token(Token = "0x400206E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400206F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<char, bool> <>9__16_3;

			[Token(Token = "0x6002878")]
			[Address(RVA = "0x149D284", Offset = "0x149D284", VA = "0x149D284")]
			public <>c()
			{
			}

			[Token(Token = "0x6002879")]
			[Address(RVA = "0x149D28C", Offset = "0x149D28C", VA = "0x149D28C")]
			internal bool <GenerateNiceName>b__16_3(char c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000606")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4769C", Offset = "0xB4769C")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4002070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int maxValue;

			[Token(Token = "0x600287A")]
			[Address(RVA = "0x149773C", Offset = "0x149773C", VA = "0x149773C")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x600287B")]
			[Address(RVA = "0x149D5AC", Offset = "0x149D5AC", VA = "0x149D5AC")]
			internal int <NextTuple>b__0(int i)
			{
				return default(int);
			}
		}

		[Serializable]
		[Token(Token = "0x2000607")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476AC", Offset = "0xB476AC")]
		private sealed class <>c__37<T> where T : UnityEngine.Object
		{
			[Token(Token = "0x4002071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__37<T> <>9;

			[Token(Token = "0x4002072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, bool> <>9__37_0;

			[Token(Token = "0x600287D")]
			public <>c__37()
			{
			}

			[Token(Token = "0x600287E")]
			internal bool <FindObjectInHierarchy>b__37_0(T o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TextureFormat[] _incompressibleFormats;

		[Token(Token = "0x60018A1")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x60018A2")]
		public static void Swap<T>(this IList<T> list, int a, int b)
		{
		}

		[Token(Token = "0x60018A3")]
		public static void Swap<T>(this T[] array, int a, int b)
		{
		}

		[Token(Token = "0x60018A4")]
		public static void Reverse<T>(this T[] array)
		{
		}

		[Token(Token = "0x60018A5")]
		public static void Reverse<T>(this T[] array, int start, int length)
		{
		}

		[Token(Token = "0x60018A6")]
		public static void Shuffle<T>(this IList<T> list)
		{
		}

		[Token(Token = "0x60018A7")]
		public static void DoubleCapacity<T>(ref T[] array)
		{
		}

		[Token(Token = "0x60018A8")]
		public static bool AreEqualUnordered<T>(IList<T> a, IList<T> b)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x1496708", Offset = "0x1496708", VA = "0x1496708")]
		public static bool ImplementsInterface(this Type type, Type ifaceType)
		{
			return default(bool);
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x1496800", Offset = "0x1496800", VA = "0x1496800")]
		public static bool IsActiveRelativeToParent(this Transform obj, Transform parent)
		{
			return default(bool);
		}

		[Token(Token = "0x60018AB")]
		public static List<int> GetSortedOrder<T>(this IList<T> list) where T : IComparable<T>
		{
			return null;
		}

		[Token(Token = "0x60018AC")]
		public static void ApplyOrdering<T>(this IList<T> list, List<int> ordering)
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x1496950", Offset = "0x1496950", VA = "0x1496950")]
		public static string MakeRelativePath(string relativeTo, string path)
		{
			return null;
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x1496B60", Offset = "0x1496B60", VA = "0x1496B60")]
		public static string TrimEnd(this string str, int characters)
		{
			return null;
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x1496BF8", Offset = "0x1496BF8", VA = "0x1496BF8")]
		public static string TrimStart(this string str, int characters)
		{
			return null;
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0x1496C8C", Offset = "0x1496C8C", VA = "0x1496C8C")]
		public static string Capitalize(this string str)
		{
			return null;
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x1496D88", Offset = "0x1496D88", VA = "0x1496D88")]
		public static string GenerateNiceName(string value)
		{
			return null;
		}

		[Token(Token = "0x60018B2")]
		public static string ToArrayString<T>(this IEnumerable<T> enumerable)
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x149719C", Offset = "0x149719C", VA = "0x149719C")]
		public static int Repeat(int x, int m)
		{
			return default(int);
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x14971B0", Offset = "0x14971B0", VA = "0x14971B0")]
		public static int Sign(int value)
		{
			return default(int);
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x14971C4", Offset = "0x14971C4", VA = "0x14971C4")]
		public static Vector2 Perpendicular(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x14971FC", Offset = "0x14971FC", VA = "0x14971FC")]
		public static Vector3 Perpendicular(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x14972A4", Offset = "0x14972A4", VA = "0x14972A4")]
		public static bool ContainsNaN(this Vector3 v)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x14972F8", Offset = "0x14972F8", VA = "0x14972F8")]
		public static bool IsBetween(this float f, float f0, float f1)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x14973B4", Offset = "0x14973B4", VA = "0x14973B4")]
		public static bool IsBetween(this double d, double d0, double d1)
		{
			return default(bool);
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x1497470", Offset = "0x1497470", VA = "0x1497470")]
		public static Vector3 TimedExtrapolate(Vector3 a, float aTime, Vector3 b, float bTime, float extrapolatedTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x1497630", Offset = "0x1497630", VA = "0x1497630")]
		public static Quaternion TimedExtrapolate(Quaternion a, float aTime, Quaternion b, float bTime, float extrapolatedTime)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x148E748", Offset = "0x148E748", VA = "0x148E748")]
		public static bool NextTuple(IList<int> tuple, int maxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60018BD")]
		public static bool NextTuple<T>(IList<T> tuple, Func<T, T> nextItem) where T : IComparable<T>
		{
			return default(bool);
		}

		[Token(Token = "0x60018BE")]
		public static T[] ClearWithDefaults<T>(this T[] arr)
		{
			return null;
		}

		[Token(Token = "0x60018BF")]
		public static T[] ClearWith<T>(this T[] arr, T value)
		{
			return null;
		}

		[Token(Token = "0x60018C0")]
		public static void EnsureListExists<T>(ref List<T> list)
		{
		}

		[Token(Token = "0x60018C1")]
		public static void EnsureListCount<T>(this List<T> list, int count)
		{
		}

		[Token(Token = "0x60018C2")]
		public static void EnsureListCount<T>(this List<T> list, int count, Func<T> createT, [Optional] Action<T> deleteT)
		{
		}

		[Token(Token = "0x60018C3")]
		public static void Add<T>(this List<T> list, T t0, T t1)
		{
		}

		[Token(Token = "0x60018C4")]
		public static void Add<T>(this List<T> list, T t0, T t1, T t2)
		{
		}

		[Token(Token = "0x60018C5")]
		public static void Add<T>(this List<T> list, T t0, T t1, T t2, T t3)
		{
		}

		[Token(Token = "0x60018C6")]
		public static T FindObjectInHierarchy<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x1497744", Offset = "0x1497744", VA = "0x1497744")]
		public static ChildrenEnumerator GetChildren(this Transform t)
		{
			return default(ChildrenEnumerator);
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x14977BC", Offset = "0x14977BC", VA = "0x14977BC")]
		public static void ResetLocalTransform(this Transform t)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x149787C", Offset = "0x149787C", VA = "0x149787C")]
		public static void ResetLocalPose(this Transform t)
		{
		}

		[Token(Token = "0x60018CA")]
		public static void FindOwnedChildComponents<ComponentType, OwnerType>(OwnerType rootObj, List<ComponentType> ownedComponents, bool includeInactiveObjects = false) where OwnerType : Component
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x1497928", Offset = "0x1497928", VA = "0x1497928")]
		public static void LookAwayFrom(this Transform thisTransform, Transform transform)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x1497A70", Offset = "0x1497A70", VA = "0x1497A70")]
		public static void LookAwayFrom(this Transform thisTransform, Transform transform, Vector3 upwards)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x1497BBC", Offset = "0x1497BBC", VA = "0x1497BBC")]
		public static Vector3 ToVector3(this Vector4 v4)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x1497BF0", Offset = "0x1497BF0", VA = "0x1497BF0")]
		public static Vector3 InLocalSpace(this Vector3 v, Transform t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x1497C08", Offset = "0x1497C08", VA = "0x1497C08")]
		public static bool ContainsNaN(this Quaternion q)
		{
			return default(bool);
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x1497C7C", Offset = "0x1497C7C", VA = "0x1497C7C")]
		public static Vector3 ToAngleAxisVector(this Quaternion q)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x1497D3C", Offset = "0x1497D3C", VA = "0x1497D3C")]
		public static Quaternion QuaternionFromAngleAxisVector(Vector3 angleAxisVector)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x1497E7C", Offset = "0x1497E7C", VA = "0x1497E7C")]
		public static Quaternion ToNormalized(this Quaternion quaternion)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x1497FA8", Offset = "0x1497FA8", VA = "0x1497FA8")]
		public static Quaternion FaceTargetWithoutTwist(Vector3 fromPosition, Vector3 targetPosition, bool flip180 = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x14980A4", Offset = "0x14980A4", VA = "0x14980A4")]
		public static Quaternion FaceTargetWithoutTwist(Vector3 fromPosition, Vector3 targetPosition, Vector3 upwardDirection, bool flip180 = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x1498204", Offset = "0x1498204", VA = "0x1498204")]
		public static Quaternion Flipped(this Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x1498244", Offset = "0x1498244", VA = "0x1498244")]
		public static void CompressQuatToBytes(Quaternion quat, byte[] buffer, ref int offset)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x149849C", Offset = "0x149849C", VA = "0x149849C")]
		public static Quaternion DecompressBytesToQuat(byte[] bytes, ref int offset)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x149868C", Offset = "0x149868C", VA = "0x149868C")]
		public static Matrix4x4 CompMul(Matrix4x4 m, float f)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x1498820", Offset = "0x1498820", VA = "0x1498820")]
		public static void IgnoreCollisions(GameObject first, GameObject second, bool ignore = true)
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x1498BA8", Offset = "0x1498BA8", VA = "0x1498BA8")]
		public static Vector3 GetDirection(this CapsuleCollider capsule)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x1498C7C", Offset = "0x1498C7C", VA = "0x1498C7C")]
		public static float GetEffectiveRadius(this CapsuleCollider capsule)
		{
			return default(float);
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x1498D08", Offset = "0x1498D08", VA = "0x1498D08")]
		public static float GetEffectiveRadiusMultiplier(this CapsuleCollider capsule)
		{
			return default(float);
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x1498E88", Offset = "0x1498E88", VA = "0x1498E88")]
		public static void GetCapsulePoints(this CapsuleCollider capsule, out Vector3 a, out Vector3 b)
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x14990F0", Offset = "0x14990F0", VA = "0x14990F0")]
		public static void SetCapsulePoints(this CapsuleCollider capsule, Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x60018DF")]
		public static void FindColliders<T>(GameObject obj, List<T> colliders, bool includeInactiveObjects = false) where T : Collider
		{
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x14993C0", Offset = "0x14993C0", VA = "0x14993C0")]
		public static Color WithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x14993F4", Offset = "0x14993F4", VA = "0x14993F4")]
		public static Color ParseHtmlColorString(string htmlString)
		{
			return default(Color);
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0x14994BC", Offset = "0x14994BC", VA = "0x14994BC")]
		public static Color LerpHSV(this Color color, Color towardsColor, float t)
		{
			return default(Color);
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x1499660", Offset = "0x1499660", VA = "0x1499660")]
		public static float LerpHue(float h0, float h1, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x1499784", Offset = "0x1499784", VA = "0x1499784")]
		public static void DrawCircle(Vector3 center, Vector3 normal, float radius, Color color, int quality = 32, float duration = 0f, bool depthTest = true)
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x14998E0", Offset = "0x14998E0", VA = "0x14998E0")]
		public static void DrawArc(float arc, Vector3 center, Vector3 forward, Vector3 normal, float radius, Color color, int quality = 32)
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x1499B48", Offset = "0x1499B48", VA = "0x1499B48")]
		public static void DrawCone(Vector3 origin, Vector3 direction, float angle, float height, Color color, int quality = 4, float duration = 0f, bool depthTest = true)
		{
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x1499D2C", Offset = "0x1499D2C", VA = "0x1499D2C")]
		public static bool IsCompressible(TextureFormat format)
		{
			return default(bool);
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x1499DBC", Offset = "0x1499DBC", VA = "0x1499DBC")]
		public static float Area(this UnityEngine.Rect rect)
		{
			return default(float);
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0x1499E04", Offset = "0x1499E04", VA = "0x1499E04")]
		public static UnityEngine.Rect Extrude(this UnityEngine.Rect r, float margin)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x1499EA4", Offset = "0x1499EA4", VA = "0x1499EA4")]
		public static UnityEngine.Rect PadInner(this UnityEngine.Rect r, float padding)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x1499F4C", Offset = "0x1499F4C", VA = "0x1499F4C")]
		public static UnityEngine.Rect PadInner(this UnityEngine.Rect r, float padTop, float padBottom, float padLeft, float padRight)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0x149A088", Offset = "0x149A088", VA = "0x149A088")]
		public static UnityEngine.Rect PadTop(this UnityEngine.Rect r, float padding)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0x149A130", Offset = "0x149A130", VA = "0x149A130")]
		public static UnityEngine.Rect PadBottom(this UnityEngine.Rect r, float padding)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x149A1D8", Offset = "0x149A1D8", VA = "0x149A1D8")]
		public static UnityEngine.Rect PadLeft(this UnityEngine.Rect r, float padding)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x149A280", Offset = "0x149A280", VA = "0x149A280")]
		public static UnityEngine.Rect PadRight(this UnityEngine.Rect r, float padding)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x149A328", Offset = "0x149A328", VA = "0x149A328")]
		public static UnityEngine.Rect PadTop(this UnityEngine.Rect r, float padding, out UnityEngine.Rect marginRect)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x149A4F8", Offset = "0x149A4F8", VA = "0x149A4F8")]
		public static UnityEngine.Rect PadBottom(this UnityEngine.Rect r, float padding, out UnityEngine.Rect marginRect)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x149A6B4", Offset = "0x149A6B4", VA = "0x149A6B4")]
		public static UnityEngine.Rect PadLeft(this UnityEngine.Rect r, float padding, out UnityEngine.Rect marginRect)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x149A870", Offset = "0x149A870", VA = "0x149A870")]
		public static UnityEngine.Rect PadRight(this UnityEngine.Rect r, float padding, out UnityEngine.Rect marginRect)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x149AA40", Offset = "0x149AA40", VA = "0x149AA40")]
		public static UnityEngine.Rect PadTopBottomPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x149AB04", Offset = "0x149AB04", VA = "0x149AB04")]
		public static UnityEngine.Rect PadLeftRightPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x149ABC8", Offset = "0x149ABC8", VA = "0x149ABC8")]
		public static UnityEngine.Rect PadTopPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x149AC80", Offset = "0x149AC80", VA = "0x149AC80")]
		public static UnityEngine.Rect PadBottomPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x149AD38", Offset = "0x149AD38", VA = "0x149AD38")]
		public static UnityEngine.Rect PadLeftPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x149ADF8", Offset = "0x149ADF8", VA = "0x149ADF8")]
		public static UnityEngine.Rect PadRightPercent(this UnityEngine.Rect r, float padPercent)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x149A3E8", Offset = "0x149A3E8", VA = "0x149A3E8")]
		public static UnityEngine.Rect TakeTop(this UnityEngine.Rect r, float heightFromTop)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x149A5B8", Offset = "0x149A5B8", VA = "0x149A5B8")]
		public static UnityEngine.Rect TakeBottom(this UnityEngine.Rect r, float heightFromBottom)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x149A774", Offset = "0x149A774", VA = "0x149A774")]
		public static UnityEngine.Rect TakeLeft(this UnityEngine.Rect r, float widthFromLeft)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x149A930", Offset = "0x149A930", VA = "0x149A930")]
		public static UnityEngine.Rect TakeRight(this UnityEngine.Rect r, float widthFromRight)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x149AEB8", Offset = "0x149AEB8", VA = "0x149AEB8")]
		public static UnityEngine.Rect TakeTop(this UnityEngine.Rect r, float padding, out UnityEngine.Rect theRest)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x149AF78", Offset = "0x149AF78", VA = "0x149AF78")]
		public static UnityEngine.Rect TakeBottom(this UnityEngine.Rect r, float padding, out UnityEngine.Rect theRest)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x149B038", Offset = "0x149B038", VA = "0x149B038")]
		public static UnityEngine.Rect TakeLeft(this UnityEngine.Rect r, float padding, out UnityEngine.Rect theRest)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x149B0F8", Offset = "0x149B0F8", VA = "0x149B0F8")]
		public static UnityEngine.Rect TakeRight(this UnityEngine.Rect r, float padding, out UnityEngine.Rect theRest)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x149B1B8", Offset = "0x149B1B8", VA = "0x149B1B8")]
		public static UnityEngine.Rect TakeHorizontal(this UnityEngine.Rect r, float lineHeight, out UnityEngine.Rect theRest, bool fromTop = true)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x149B2D4", Offset = "0x149B2D4", VA = "0x149B2D4")]
		public static void SplitHorizontallyWithLeft(this UnityEngine.Rect rect, out UnityEngine.Rect left, out UnityEngine.Rect right, float leftWidth)
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x149B374", Offset = "0x149B374", VA = "0x149B374")]
		public static HorizontalLineRectEnumerator TakeAllLines(this UnityEngine.Rect r, int numLines)
		{
			return default(HorizontalLineRectEnumerator);
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x149B39C", Offset = "0x149B39C", VA = "0x149B39C")]
		public static Pose From(this Vector3 position, Pose fromPose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x149B564", Offset = "0x149B564", VA = "0x149B564")]
		public static Pose GetPose(this Rigidbody rigidbody)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x149B5FC", Offset = "0x149B5FC", VA = "0x149B5FC")]
		public static Pose MirroredX(this Pose pose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x149B714", Offset = "0x149B714", VA = "0x149B714")]
		public static Pose Negated(this Pose pose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x149B7C0", Offset = "0x149B7C0", VA = "0x149B7C0")]
		public static float Map(this float value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(float);
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x149756C", Offset = "0x149756C", VA = "0x149756C")]
		public static float MapUnclamped(this float value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(float);
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x149B884", Offset = "0x149B884", VA = "0x149B884")]
		public static Vector2 Map(this Vector2 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x149B960", Offset = "0x149B960", VA = "0x149B960")]
		public static Vector2 MapUnclamped(this Vector2 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x149BA3C", Offset = "0x149BA3C", VA = "0x149BA3C")]
		public static Vector3 Map(this Vector3 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0x149BB54", Offset = "0x149BB54", VA = "0x149BB54")]
		public static Vector3 MapUnclamped(this Vector3 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0x149BC6C", Offset = "0x149BC6C", VA = "0x149BC6C")]
		public static Vector4 Map(this Vector4 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001910")]
		[Address(RVA = "0x149BDA4", Offset = "0x149BDA4", VA = "0x149BDA4")]
		public static Vector4 MapUnclamped(this Vector4 value, float valueMin, float valueMax, float resultMin, float resultMax)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x149BEDC", Offset = "0x149BEDC", VA = "0x149BEDC")]
		public static Vector2 Map(float input, float valueMin, float valueMax, Vector2 resultMin, Vector2 resultMax)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x149BFC4", Offset = "0x149BFC4", VA = "0x149BFC4")]
		public static Vector3 Map(float input, float valueMin, float valueMax, Vector3 resultMin, Vector3 resultMax)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x149C0B8", Offset = "0x149C0B8", VA = "0x149C0B8")]
		public static Vector4 Map(float input, float valueMin, float valueMax, Vector4 resultMin, Vector4 resultMax)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x149C1C0", Offset = "0x149C1C0", VA = "0x149C1C0")]
		public static Vector2 CompMul(this Vector2 A, Vector2 B)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x149C1F4", Offset = "0x149C1F4", VA = "0x149C1F4")]
		public static Vector3 CompMul(this Vector3 A, Vector3 B)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x149C234", Offset = "0x149C234", VA = "0x149C234")]
		public static Vector4 CompMul(this Vector4 A, Vector4 B)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x149C274", Offset = "0x149C274", VA = "0x149C274")]
		public static Vector2 CompDiv(this Vector2 A, Vector2 B)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x149C2A8", Offset = "0x149C2A8", VA = "0x149C2A8")]
		public static Vector3 CompDiv(this Vector3 A, Vector3 B)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x149C2E8", Offset = "0x149C2E8", VA = "0x149C2E8")]
		public static Vector4 CompDiv(this Vector4 A, Vector4 B)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x149C328", Offset = "0x149C328", VA = "0x149C328")]
		public static float CompSum(this Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x149C330", Offset = "0x149C330", VA = "0x149C330")]
		public static float CompSum(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x149C33C", Offset = "0x149C33C", VA = "0x149C33C")]
		public static float CompSum(this Vector4 v)
		{
			return default(float);
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x1498E10", Offset = "0x1498E10", VA = "0x1498E10")]
		public static float CompMax(this Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x149C34C", Offset = "0x149C34C", VA = "0x149C34C")]
		public static float CompMax(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x149C3DC", Offset = "0x149C3DC", VA = "0x149C3DC")]
		public static float CompMax(this Vector4 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x149C47C", Offset = "0x149C47C", VA = "0x149C47C")]
		public static float CompMin(this Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x149C4F4", Offset = "0x149C4F4", VA = "0x149C4F4")]
		public static float CompMin(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x149C584", Offset = "0x149C584", VA = "0x149C584")]
		public static float CompMin(this Vector4 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x149C624", Offset = "0x149C624", VA = "0x149C624")]
		public static Vector2 CompLerp(this Vector2 A, Vector2 B, Vector2 Ts)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x149C6F8", Offset = "0x149C6F8", VA = "0x149C6F8")]
		public static Vector3 CompLerp(this Vector3 A, Vector3 B, Vector3 Ts)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x149C808", Offset = "0x149C808", VA = "0x149C808")]
		public static Vector4 CompLerp(this Vector4 A, Vector4 B, Vector4 Ts)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x149C930", Offset = "0x149C930", VA = "0x149C930")]
		public static float From(this float thisFloat, float otherFloat)
		{
			return default(float);
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x149C938", Offset = "0x149C938", VA = "0x149C938")]
		public static float To(this float thisFloat, float otherFloat)
		{
			return default(float);
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x149C940", Offset = "0x149C940", VA = "0x149C940")]
		public static float Then(this float thisFloat, float otherFloat)
		{
			return default(float);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x149C948", Offset = "0x149C948", VA = "0x149C948")]
		public static Vector3 From(this Vector3 thisVector, Vector3 otherVector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x149C9F0", Offset = "0x149C9F0", VA = "0x149C9F0")]
		public static Vector3 To(this Vector3 thisVector, Vector3 otherVector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x149CA98", Offset = "0x149CA98", VA = "0x149CA98")]
		public static Vector3 Then(this Vector3 thisVector, Vector3 otherVector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x149CB40", Offset = "0x149CB40", VA = "0x149CB40")]
		public static Quaternion From(this Quaternion thisQuaternion, Quaternion otherQuaternion)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x149CC08", Offset = "0x149CC08", VA = "0x149CC08")]
		public static Quaternion To(this Quaternion thisQuaternion, Quaternion otherQuaternion)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x149CCD0", Offset = "0x149CCD0", VA = "0x149CCD0")]
		public static Quaternion Then(this Quaternion thisQuaternion, Quaternion otherQuaternion)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x149B498", Offset = "0x149B498", VA = "0x149B498")]
		public static Pose From(this Pose thisPose, Pose otherPose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x149CD90", Offset = "0x149CD90", VA = "0x149CD90")]
		public static Pose To(this Pose thisPose, Pose otherPose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x149CE5C", Offset = "0x149CE5C", VA = "0x149CE5C")]
		public static Pose Then(this Pose thisPose, Pose otherPose)
		{
			return default(Pose);
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x149CF28", Offset = "0x149CF28", VA = "0x149CF28")]
		public static Matrix4x4 From(this Matrix4x4 thisMatrix, Matrix4x4 otherMatrix)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x149CFFC", Offset = "0x149CFFC", VA = "0x149CFFC")]
		public static Matrix4x4 To(this Matrix4x4 thisMatrix, Matrix4x4 otherMatrix)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x149D0D0", Offset = "0x149D0D0", VA = "0x149D0D0")]
		public static Matrix4x4 Then(this Matrix4x4 thisMatrix, Matrix4x4 otherMatrix)
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x2000393")]
	public static class XRSupportUtil
	{
		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool outputPresenceWarning;

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x149F110", Offset = "0x149F110", VA = "0x149F110")]
		public static bool IsXREnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x149DD74", Offset = "0x149DD74", VA = "0x149DD74")]
		public static bool IsXRDevicePresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x149E8B0", Offset = "0x149E8B0", VA = "0x149E8B0")]
		public static bool IsUserPresent(bool defaultPresence = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x149F118", Offset = "0x149F118", VA = "0x149F118")]
		public static Vector3 GetXRNodeCenterEyeLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x149F17C", Offset = "0x149F17C", VA = "0x149F17C")]
		public static Quaternion GetXRNodeCenterEyeLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x149F1E0", Offset = "0x149F1E0", VA = "0x149F1E0")]
		public static Vector3 GetXRNodeHeadLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x149F244", Offset = "0x149F244", VA = "0x149F244")]
		public static Quaternion GetXRNodeHeadLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x149E6BC", Offset = "0x149E6BC", VA = "0x149E6BC")]
		public static void Recenter()
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x149F2A8", Offset = "0x149F2A8", VA = "0x149F2A8")]
		public static string GetLoadedDeviceName()
		{
			return null;
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x149E650", Offset = "0x149E650", VA = "0x149E650")]
		public static bool IsRoomScale()
		{
			return default(bool);
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x149F2B0", Offset = "0x149F2B0", VA = "0x149F2B0")]
		public static float GetGPUTime()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000394")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB45B40", Offset = "0xB45B40")]
	public class LeapEyeDislocator : MonoBehaviour
	{
		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _useCustomBaseline;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4F510", Offset = "0xB4F510")]
		[AttributeAttribute(Name = "UnitsAttribute", RVA = "0xB4F510", Offset = "0xB4F510")]
		[AttributeAttribute(Name = "InspectorNameAttribute", RVA = "0xB4F510", Offset = "0xB4F510")]
		[SerializeField]
		private float _customBaselineValue;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _showEyePositions;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LeapServiceProvider _provider;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Maybe<float> _deviceBaseline;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _hasVisitedPreCull;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera _cachedCamera;

		[Token(Token = "0x170001FD")]
		private Camera _camera
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0x109F174", Offset = "0x109F174", VA = "0x109F174")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x109F20C", Offset = "0x109F20C", VA = "0x109F20C")]
		private void onDevice(Device device)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x109F2A4", Offset = "0x109F2A4", VA = "0x109F2A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x109F54C", Offset = "0x109F54C", VA = "0x109F54C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x109F670", Offset = "0x109F670", VA = "0x109F670")]
		private void Update()
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x109F6A4", Offset = "0x109F6A4", VA = "0x109F6A4")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x109F94C", Offset = "0x109F94C", VA = "0x109F94C")]
		private void adjustViewMatrix(Camera.StereoscopicEye eye, float baselineAdjust)
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x109FF20", Offset = "0x109FF20", VA = "0x109FF20")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x10A0134", Offset = "0x10A0134", VA = "0x10A0134")]
		public LeapEyeDislocator()
		{
		}
	}
	[Token(Token = "0x2000395")]
	[ExecuteInEditMode]
	public class XRHeightOffset : MonoBehaviour
	{
		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4F5A4", Offset = "0xB4F5A4")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB4F5A4", Offset = "0xB4F5A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F5A4", Offset = "0xB4F5A4")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB4F5A4", Offset = "0xB4F5A4")]
		private float _roomScaleHeightOffset;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _lastKnownHeightOffset;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4F64C", Offset = "0xB4F64C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB4F64C", Offset = "0xB4F64C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F64C", Offset = "0xB4F64C")]
		public bool recenterOnUserPresence;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F6D0", Offset = "0xB4F6D0")]
		public bool recenterOnStart;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F708", Offset = "0xB4F708")]
		public bool recenterOnKey;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F740", Offset = "0xB4F740")]
		public KeyCode recenterKey;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _lastUserPresence;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4F778", Offset = "0xB4F778")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F778", Offset = "0xB4F778")]
		public bool enableRuntimeAdjustment;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4F7D8", Offset = "0xB4F7D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F7D8", Offset = "0xB4F7D8")]
		public KeyCode stepUpKey;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4F890", Offset = "0xB4F890")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4F890", Offset = "0xB4F890")]
		public KeyCode stepDownKey;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB4F948", Offset = "0xB4F948")]
		public float stepSize;

		[Token(Token = "0x170001FE")]
		public float roomScaleHeightOffset
		{
			[Token(Token = "0x600194B")]
			[Address(RVA = "0x149E384", Offset = "0x149E384", VA = "0x149E384")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600194C")]
			[Address(RVA = "0x149E38C", Offset = "0x149E38C", VA = "0x149E38C")]
			set
			{
			}
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x149E4C0", Offset = "0x149E4C0", VA = "0x149E4C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x149E71C", Offset = "0x149E71C", VA = "0x149E71C")]
		private void Update()
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x149E9D0", Offset = "0x149E9D0", VA = "0x149E9D0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x149EE94", Offset = "0x149EE94", VA = "0x149EE94")]
		private void drawCircle(Vector3 position, Vector3 normal, float radius)
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x149F0CC", Offset = "0x149F0CC", VA = "0x149F0CC")]
		public XRHeightOffset()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class LeapRTS : MonoBehaviour
	{
		[Token(Token = "0x2000608")]
		public enum RotationMethod
		{
			[Token(Token = "0x4002074")]
			None,
			[Token(Token = "0x4002075")]
			Single,
			[Token(Token = "0x4002076")]
			Full
		}

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PinchDetector _pinchDetectorA;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PinchDetector _pinchDetectorB;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RotationMethod _oneHandedRotationMethod;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private RotationMethod _twoHandedRotationMethod;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _allowScale;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FA2C", Offset = "0xB4FA2C")]
		[SerializeField]
		private KeyCode _toggleGuiState;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool _showGUI;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _anchor;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _defaultNearClip;

		[Token(Token = "0x170001FF")]
		public PinchDetector PinchDetectorA
		{
			[Token(Token = "0x6001952")]
			[Address(RVA = "0x10A5414", Offset = "0x10A5414", VA = "0x10A5414")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001953")]
			[Address(RVA = "0x10A541C", Offset = "0x10A541C", VA = "0x10A541C")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public PinchDetector PinchDetectorB
		{
			[Token(Token = "0x6001954")]
			[Address(RVA = "0x10A5424", Offset = "0x10A5424", VA = "0x10A5424")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001955")]
			[Address(RVA = "0x10A542C", Offset = "0x10A542C", VA = "0x10A542C")]
			set
			{
			}
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x10A5434", Offset = "0x10A5434", VA = "0x10A5434")]
		private void Start()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x10A5508", Offset = "0x10A5508", VA = "0x10A5508")]
		private void Update()
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x10A5CA4", Offset = "0x10A5CA4", VA = "0x10A5CA4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x10A5EE8", Offset = "0x10A5EE8", VA = "0x10A5EE8")]
		private void doRotationMethodGUI(ref RotationMethod rotationMethod)
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x10A578C", Offset = "0x10A578C", VA = "0x10A578C")]
		private void transformDoubleAnchor()
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x10A5ADC", Offset = "0x10A5ADC", VA = "0x10A5ADC")]
		private void transformSingleAnchor(PinchDetector singlePinch)
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x10A633C", Offset = "0x10A633C", VA = "0x10A633C")]
		public LeapRTS()
		{
		}
	}
	[Token(Token = "0x2000397")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45BB4", Offset = "0xB45BB4")]
	public class LeapHandsAutoRig : MonoBehaviour
	{
		[Token(Token = "0x2000609")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476BC", Offset = "0xB476BC")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4002077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x600287F")]
			[Address(RVA = "0x10A1548", Offset = "0x10A1548", VA = "0x10A1548")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6002880")]
			[Address(RVA = "0x10A2238", Offset = "0x10A2238", VA = "0x10A2238")]
			internal bool <AutoRigByName>b__0(string w)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200060A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476CC", Offset = "0xB476CC")]
		private sealed class <>c__DisplayClass26_1
		{
			[Token(Token = "0x4002078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x6002881")]
			[Address(RVA = "0x10A1550", Offset = "0x10A1550", VA = "0x10A1550")]
			public <>c__DisplayClass26_1()
			{
			}

			[Token(Token = "0x6002882")]
			[Address(RVA = "0x10A2280", Offset = "0x10A2280", VA = "0x10A2280")]
			internal bool <AutoRigByName>b__1(string w)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HandModelManager HandPoolToPopulate;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator AnimatorForMapping;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string ModelGroupName;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FA88", Offset = "0xB4FA88")]
		public bool UseMetaCarpals;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FAC0", Offset = "0xB4FAC0")]
		public RiggedHand RiggedHand_L;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RiggedHand RiggedHand_R;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FAF8", Offset = "0xB4FAF8")]
		public HandTransitionBehavior HandTransitionBehavior_L;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public HandTransitionBehavior HandTransitionBehavior_R;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FB30", Offset = "0xB4FB30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FB30", Offset = "0xB4FB30")]
		public RiggedFinger RiggedFinger_L_Thumb;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RiggedFinger RiggedFinger_L_Index;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RiggedFinger RiggedFinger_L_Mid;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RiggedFinger RiggedFinger_L_Ring;

		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public RiggedFinger RiggedFinger_L_Pinky;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public RiggedFinger RiggedFinger_R_Thumb;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RiggedFinger RiggedFinger_R_Index;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RiggedFinger RiggedFinger_R_Mid;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public RiggedFinger RiggedFinger_R_Ring;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public RiggedFinger RiggedFinger_R_Pinky;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FB90", Offset = "0xB4FB90")]
		public Vector3 modelFingerPointing_L;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Vector3 modelPalmFacing_L;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Vector3 modelFingerPointing_R;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Vector3 modelPalmFacing_R;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FBC8", Offset = "0xB4FBC8")]
		[SerializeField]
		public bool FlipPalms;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		[SerializeField]
		[HideInInspector]
		private bool flippedPalmsState;

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x10A01EC", Offset = "0x10A01EC", VA = "0x10A01EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E7BC", Offset = "0xB5E7BC")]
		public void AutoRig()
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x10A12D8", Offset = "0x10A12D8", VA = "0x10A12D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E7F4", Offset = "0xB5E7F4")]
		public void StoreStartPose()
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x10A0710", Offset = "0x10A0710", VA = "0x10A0710")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E82C", Offset = "0xB5E82C")]
		private void AutoRigByName()
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x10A0314", Offset = "0x10A0314", VA = "0x10A0314")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E864", Offset = "0xB5E864")]
		private void AutoRigMecanim()
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x10A1558", Offset = "0x10A1558", VA = "0x10A1558")]
		private void findAndAssignRiggedFingers(bool useMetaCarpals)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x10A13E0", Offset = "0x10A13E0", VA = "0x10A13E0")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x10A1B08", Offset = "0x10A1B08", VA = "0x10A1B08")]
		public void PushVectorValues()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x10A1FAC", Offset = "0x10A1FAC", VA = "0x10A1FAC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x10A20B0", Offset = "0x10A20B0", VA = "0x10A20B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x10A2148", Offset = "0x10A2148", VA = "0x10A2148")]
		public LeapHandsAutoRig()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public class MinimalHand : HandModelBase
	{
		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Chirality _handedness;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Mesh _palmMesh;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _palmScale;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Material _palmMat;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Mesh _jointMesh;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float _jointScale;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Material _jointMat;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Hand _hand;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _palm;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform[] _joints;

		[Token(Token = "0x17000201")]
		public override Chirality Handedness
		{
			[Token(Token = "0x6001968")]
			[Address(RVA = "0x10A9B78", Offset = "0x10A9B78", VA = "0x10A9B78", Slot = "4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x6001969")]
			[Address(RVA = "0x10A9B80", Offset = "0x10A9B80", VA = "0x10A9B80", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x600196A")]
			[Address(RVA = "0x10A9B88", Offset = "0x10A9B88", VA = "0x10A9B88", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x10A9B70", Offset = "0x10A9B70", VA = "0x10A9B70", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x10A9B90", Offset = "0x10A9B90", VA = "0x10A9B90", Slot = "12")]
		public override void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x10A9B98", Offset = "0x10A9B98", VA = "0x10A9B98", Slot = "11")]
		public override Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x10A9BA0", Offset = "0x10A9BA0", VA = "0x10A9BA0", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x10A9E3C", Offset = "0x10A9E3C", VA = "0x10A9E3C", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x10A9CD4", Offset = "0x10A9CD4", VA = "0x10A9CD4")]
		private Transform createRenderer(string name, Mesh mesh, float scale, Material mat)
		{
			return null;
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x10A9F80", Offset = "0x10A9F80", VA = "0x10A9F80")]
		public MinimalHand()
		{
		}
	}
	[Token(Token = "0x2000399")]
	public class PolyFinger : FingerModel
	{
		[Token(Token = "0x4001524")]
		private const int MAX_SIDES = 30;

		[Token(Token = "0x4001525")]
		private const int TRIANGLE_INDICES_PER_QUAD = 6;

		[Token(Token = "0x4001526")]
		private const int VERTICES_PER_QUAD = 4;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int sides;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool smoothNormals;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float startingAngle;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float[] widths;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3[] vertices_;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3[] normals_;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Vector3[] joint_vertices_;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Mesh mesh_;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Mesh cap_mesh_;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector3[] cap_vertices_;

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x10ABA6C", Offset = "0x10ABA6C", VA = "0x10ABA6C", Slot = "4")]
		public override void InitFinger()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x10AC7B4", Offset = "0x10AC7B4", VA = "0x10AC7B4", Slot = "5")]
		public override void UpdateFinger()
		{
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x10AD498", Offset = "0x10AD498", VA = "0x10AD498")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x10AD53C", Offset = "0x10AD53C", VA = "0x10AD53C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x10AD540", Offset = "0x10AD540", VA = "0x10AD540")]
		protected Quaternion GetJointRotation(int joint)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x10ABB28", Offset = "0x10ABB28", VA = "0x10ABB28")]
		protected void InitJointVertices()
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x10AC93C", Offset = "0x10AC93C", VA = "0x10AC93C")]
		protected void UpdateMesh()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x10AD094", Offset = "0x10AD094", VA = "0x10AD094")]
		protected void UpdateCapMesh()
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x10AC238", Offset = "0x10AC238", VA = "0x10AC238")]
		protected void InitMesh()
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x10ABCD8", Offset = "0x10ABCD8", VA = "0x10ABCD8")]
		protected void InitCapsMesh()
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x10AD688", Offset = "0x10AD688", VA = "0x10AD688")]
		public PolyFinger()
		{
		}
	}
	[Token(Token = "0x200039A")]
	public class PolyHand : HandModel
	{
		[Token(Token = "0x17000203")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x600197C")]
			[Address(RVA = "0x12A0960", Offset = "0x12A0960", VA = "0x12A0960", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x12A0968", Offset = "0x12A0968", VA = "0x12A0968", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x12A0970", Offset = "0x12A0970", VA = "0x12A0970", Slot = "7")]
		public override void InitHand()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x12A0B50", Offset = "0x12A0B50", VA = "0x12A0B50", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x12A0A8C", Offset = "0x12A0A8C", VA = "0x12A0A8C")]
		protected void SetPalmOrientation()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x12A0C48", Offset = "0x12A0C48", VA = "0x12A0C48")]
		public PolyHand()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public static class Config
	{
		[Token(Token = "0x200060B")]
		private struct ValueAndType
		{
			[Token(Token = "0x4002079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string value;

			[Token(Token = "0x400207A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Type type;

			[Token(Token = "0x6002883")]
			[Address(RVA = "0x15672DC", Offset = "0x15672DC", VA = "0x15672DC")]
			public ValueAndType(string value, Type type)
			{
			}
		}

		[Token(Token = "0x200060C")]
		public struct LineEnumerator
		{
			[Token(Token = "0x400207B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private string remainingString;

			[Token(Token = "0x400207C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private string line;

			[Token(Token = "0x400207D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool gotLastLine;

			[Token(Token = "0x17000440")]
			public string Current
			{
				[Token(Token = "0x6002887")]
				[Address(RVA = "0x156709C", Offset = "0x156709C", VA = "0x156709C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002884")]
			[Address(RVA = "0x15665CC", Offset = "0x15665CC", VA = "0x15665CC")]
			public LineEnumerator(string str)
			{
			}

			[Token(Token = "0x6002885")]
			[Address(RVA = "0x1567088", Offset = "0x1567088", VA = "0x1567088")]
			public LineEnumerator GetEnumerator()
			{
				return default(LineEnumerator);
			}

			[Token(Token = "0x6002886")]
			[Address(RVA = "0x1566630", Offset = "0x1566630", VA = "0x1566630")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002888")]
			[Address(RVA = "0x15670A4", Offset = "0x15670A4", VA = "0x15670A4")]
			public bool OnLastLine()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200060D")]
		public class FieldNotFoundException : Exception
		{
			[Token(Token = "0x400207E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string field;

			[Token(Token = "0x6002889")]
			[Address(RVA = "0x1566F94", Offset = "0x1566F94", VA = "0x1566F94")]
			public FieldNotFoundException(string field)
			{
			}

			[Token(Token = "0x600288A")]
			[Address(RVA = "0x1567010", Offset = "0x1567010", VA = "0x1567010", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x200060E")]
		public class FailedToParseException : Exception
		{
			[Token(Token = "0x400207F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string value;

			[Token(Token = "0x4002080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public string typeString;

			[Token(Token = "0x600288B")]
			[Address(RVA = "0x156683C", Offset = "0x156683C", VA = "0x156683C")]
			public FailedToParseException(string value, Type type)
			{
			}

			[Token(Token = "0x600288C")]
			[Address(RVA = "0x1566DE4", Offset = "0x1566DE4", VA = "0x1566DE4", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x200060F")]
		public class TypeMismatchException : Exception
		{
			[Token(Token = "0x4002081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Type expectedType;

			[Token(Token = "0x4002082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Type gotType;

			[Token(Token = "0x600288D")]
			[Address(RVA = "0x15670AC", Offset = "0x15670AC", VA = "0x15670AC")]
			public TypeMismatchException(Type expectedType, Type gotType)
			{
			}

			[Token(Token = "0x600288E")]
			[Address(RVA = "0x156712C", Offset = "0x156712C", VA = "0x156712C", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x4001531")]
		public const string CONFIG_FILE_NAME = "config.json";

		[Token(Token = "0x4001532")]
		public const string TAB = "  ";

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ValueAndType> s_backingConfig;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<string> s_backingConfigFields;

		[Token(Token = "0x4001535")]
		[ThreadStatic]
		private static StringBuilder s_backingBuilder;

		[Token(Token = "0x17000204")]
		private static Dictionary<string, ValueAndType> s_config
		{
			[Token(Token = "0x6001982")]
			[Address(RVA = "0x1564BCC", Offset = "0x1564BCC", VA = "0x1564BCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001983")]
			[Address(RVA = "0x1564C5C", Offset = "0x1564C5C", VA = "0x1564C5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		private static List<string> s_configFields
		{
			[Token(Token = "0x6001984")]
			[Address(RVA = "0x1564CB0", Offset = "0x1564CB0", VA = "0x1564CB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001985")]
			[Address(RVA = "0x1564D3C", Offset = "0x1564D3C", VA = "0x1564D3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		private static string configFilePath
		{
			[Token(Token = "0x6001986")]
			[Address(RVA = "0x1564D90", Offset = "0x1564D90", VA = "0x1564D90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000207")]
		private static StringBuilder s_builder
		{
			[Token(Token = "0x6001992")]
			[Address(RVA = "0x1566544", Offset = "0x1566544", VA = "0x1566544")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001987")]
		public static bool TryRead<T>(string field, ref T value, bool verbose = false, [Optional] Action<string> logFunc)
		{
			return default(bool);
		}

		[Token(Token = "0x6001988")]
		public static T Read<T>(string field)
		{
			return (T)null;
		}

		[Token(Token = "0x6001989")]
		public static void Write<T>(string field, T value)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x1565100", Offset = "0x1565100", VA = "0x1565100")]
		private static void readConfigFile()
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x1565780", Offset = "0x1565780", VA = "0x1565780")]
		private static void writeConfigFile()
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0x156518C", Offset = "0x156518C", VA = "0x156518C")]
		private static void parseOverwrite(string json, Dictionary<string, ValueAndType> dict, List<string> fields)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x1565E34", Offset = "0x1565E34", VA = "0x1565E34")]
		private static bool tryConsumeValue(string input, out ValueAndType valueAndType, out string remainingInput)
		{
			return default(bool);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x1566340", Offset = "0x1566340", VA = "0x1566340")]
		private static int findBalancedClose(string input, char open, char close)
		{
			return default(int);
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x15663E4", Offset = "0x15663E4", VA = "0x15663E4")]
		private static int findWhitespace(string input)
		{
			return default(int);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x15664A4", Offset = "0x15664A4", VA = "0x15664A4")]
		private static int pickLowestNonNegative(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x1566258", Offset = "0x1566258", VA = "0x1566258")]
		private static int countNewlinesBeforeNonWhitespace(string input)
		{
			return default(int);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x15657C0", Offset = "0x15657C0", VA = "0x15657C0")]
		private static string toJson(Dictionary<string, ValueAndType> dict, List<string> fields)
		{
			return null;
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x1566724", Offset = "0x1566724", VA = "0x1566724")]
		private static bool parseBool(string boolString)
		{
			return default(bool);
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x15668D8", Offset = "0x15668D8", VA = "0x15668D8")]
		private static int parseInt(string intString)
		{
			return default(int);
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x15669B0", Offset = "0x15669B0", VA = "0x15669B0")]
		private static float parseFloat(string floatString)
		{
			return default(float);
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x1564EF8", Offset = "0x1564EF8", VA = "0x1564EF8")]
		private static string upOneDirectoryLevel(string directoryPath)
		{
			return null;
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x1566A88", Offset = "0x1566A88", VA = "0x1566A88")]
		private static string toJsonViaUtility(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001999")]
		private static T fromJsonViaUtility<T>(string json)
		{
			return (T)null;
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x1566B08", Offset = "0x1566B08", VA = "0x1566B08")]
		public static void Test()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public static class ConfigUsingJsonUtility
	{
		[Token(Token = "0x2000610")]
		public class FieldNotFoundException : Exception
		{
			[Token(Token = "0x4002083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string field;

			[Token(Token = "0x600288F")]
			[Address(RVA = "0x1567E38", Offset = "0x1567E38", VA = "0x1567E38")]
			public FieldNotFoundException(string field)
			{
			}

			[Token(Token = "0x6002890")]
			[Address(RVA = "0x1567EB4", Offset = "0x1567EB4", VA = "0x1567EB4", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x2000611")]
		public class FailedToParseException : Exception
		{
			[Token(Token = "0x4002084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string value;

			[Token(Token = "0x4002085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public string typeString;

			[Token(Token = "0x6002891")]
			[Address(RVA = "0x1567A3C", Offset = "0x1567A3C", VA = "0x1567A3C")]
			public FailedToParseException(string value, Type type)
			{
			}

			[Token(Token = "0x6002892")]
			[Address(RVA = "0x1567C88", Offset = "0x1567C88", VA = "0x1567C88", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x4001536")]
		public const string CONFIG_FILE_NAME = "config.json";

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, string> s_backingConfig;

		[Token(Token = "0x17000208")]
		private static Dictionary<string, string> s_config
		{
			[Token(Token = "0x600199B")]
			[Address(RVA = "0x15672E4", Offset = "0x15672E4", VA = "0x15672E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600199C")]
			[Address(RVA = "0x1567374", Offset = "0x1567374", VA = "0x1567374")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		private static string configFilePath
		{
			[Token(Token = "0x600199D")]
			[Address(RVA = "0x15673C8", Offset = "0x15673C8", VA = "0x15673C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600199E")]
		public static bool TryRead<T>(string field, out T value)
		{
			return default(bool);
		}

		[Token(Token = "0x600199F")]
		public static T Read<T>(string field)
		{
			return (T)null;
		}

		[Token(Token = "0x60019A0")]
		public static void Write<T>(string field, T value)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x15677A8", Offset = "0x15677A8", VA = "0x15677A8")]
		private static void readConfigFile()
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x1567880", Offset = "0x1567880", VA = "0x1567880")]
		private static void writeConfigFile()
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x1567924", Offset = "0x1567924", VA = "0x1567924")]
		private static bool parseBool(string boolString)
		{
			return default(bool);
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x1567AD8", Offset = "0x1567AD8", VA = "0x1567AD8")]
		private static int parseInt(string intString)
		{
			return default(int);
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0x1567BB0", Offset = "0x1567BB0", VA = "0x1567BB0")]
		private static float parseFloat(string floatString)
		{
			return default(float);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x1567554", Offset = "0x1567554", VA = "0x1567554")]
		private static string upOneDirectoryLevel(string directoryPath)
		{
			return null;
		}
	}
}
namespace Leap.Unity.AR
{
	[Token(Token = "0x200039D")]
	public class ARRaytracer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x2000612")]
		public struct OpticalSystem
		{
			[Token(Token = "0x4002086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float ellipseMinorAxis;

			[Token(Token = "0x4002087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float ellipseMajorAxis;

			[Token(Token = "0x4002088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 screenForward;

			[Token(Token = "0x4002089")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 screenPosition;

			[Token(Token = "0x400208A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 eyePosition;

			[Token(Token = "0x400208B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Matrix4x4 worldToSphereSpace;

			[Token(Token = "0x400208C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Matrix4x4 sphereToWorldSpace;

			[Token(Token = "0x400208D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			public Matrix4x4 worldToScreenSpace;

			[Token(Token = "0x400208E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			public Matrix4x4 clipToWorld;

			[Token(Token = "0x6002893")]
			[Address(RVA = "0x1633808", Offset = "0x1633808", VA = "0x1633808")]
			public OpticalSystem(Camera eyePerspective, EllipsoidTransform ellipse, Transform Screen, [Optional] Pose? headsetOrigin)
			{
			}

			[Token(Token = "0x6002894")]
			[Address(RVA = "0x1633CA4", Offset = "0x1633CA4", VA = "0x1633CA4", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x2000613")]
		public struct RaytraceOpticsJob : IJobParallelFor
		{
			[Token(Token = "0x400208F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public NativeArray<Vector2> uvs;

			[Token(Token = "0x4002090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ReadOnly]
			public OpticalSystem optics;

			[Token(Token = "0x4002091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			[WriteOnly]
			public NativeArray<Vector3> vertices;

			[Token(Token = "0x6002895")]
			[Address(RVA = "0x16364F8", Offset = "0x16364F8", VA = "0x16364F8", Slot = "4")]
			public void Execute(int i)
			{
			}
		}

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OpticalCalibrationManager manager;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera eyePerspective;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EllipsoidTransform ellipse;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform Screen;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshFilter filter;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 meshResolution;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CalibrationDeformer deformer;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FCCC", Offset = "0xB4FCCC")]
		public float aspectRatio;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public OpticalSystem optics;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FCE4", Offset = "0xB4FCE4")]
		public bool autoRefreshRuntimeEditor;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		public bool parallelizeRaytracing;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Mesh _backingDistortionMesh;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private List<Vector2> meshUVs;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private List<Vector3> meshVertices;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private List<Vector3> previousMeshVertices;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private List<int> meshTriangles;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private NativeArray<Vector2> rayUVs;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private NativeArray<Vector3> vertices;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3[] managedVertices;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private JobHandle raytraceJob;

		[Token(Token = "0x1700020A")]
		private Mesh _distortionMesh
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x1632B34", Offset = "0x1632B34", VA = "0x1632B34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x1632BD8", Offset = "0x1632BD8", VA = "0x1632BD8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x16334B4", Offset = "0x16334B4", VA = "0x16334B4", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x1633578", Offset = "0x1633578", VA = "0x1633578")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x16335E0", Offset = "0x16335E0", VA = "0x16335E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E89C", Offset = "0xB5E89C")]
		private void printOpticalConfig()
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x1632E48", Offset = "0x1632E48", VA = "0x1632E48")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5E8D4", Offset = "0xB5E8D4")]
		public void ScheduleCreateDistortionMesh(bool onlyRecomputeVertices = false, [Optional] RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x16341A4", Offset = "0x16341A4", VA = "0x16341A4")]
		public void CompleteDistortionMesh(bool onlyRecomputeVertices = false, [Optional] RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x1635414", Offset = "0x1635414", VA = "0x1635414")]
		public Vector2 RenderUVToDisplayUV(Vector2 UV, bool drawLine = false, [Optional] RuntimeGizmoDrawer drawer)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x16356B8", Offset = "0x16356B8", VA = "0x16356B8")]
		public static Vector2 RenderUVToDisplayUV(Vector2 inputUV, OpticalSystem optics)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x1634DD0", Offset = "0x1634DD0", VA = "0x1634DD0")]
		public static Vector2 RenderUVToDisplayUV(Vector3 inputUV, OpticalSystem optics, bool drawLine = false, bool printDebug = false)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x1635CA4", Offset = "0x1635CA4", VA = "0x1635CA4")]
		public static Vector2 DisplayUVToRenderUV(Vector2 inputUV, OpticalSystem optics, int iterations = 40)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x1635B58", Offset = "0x1635B58", VA = "0x1635B58")]
		[BurstDiscard]
		private static void drawTrace(Vector3 eyeOrigin, Vector3 firstBounce, Vector3 screenHit)
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x1635818", Offset = "0x1635818", VA = "0x1635818")]
		public static float intersectLineSphere(Vector3 Origin, Vector3 Direction, Vector3 spherePos, float SphereRadiusSqrd, bool frontSide = true)
		{
			return default(float);
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x1635F40", Offset = "0x1635F40", VA = "0x1635F40")]
		private static Vector3 Project(Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x16359EC", Offset = "0x16359EC", VA = "0x16359EC")]
		public static float intersectPlane(Vector3 n, Vector3 p0, Vector3 l0, Vector3 l)
		{
			return default(float);
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x1634CA4", Offset = "0x1634CA4", VA = "0x1634CA4")]
		public static Vector3 ViewportPointToRayDirection(Vector2 UV, Vector3 cameraPosition, Matrix4x4 clipToWorld)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x163604C", Offset = "0x163604C", VA = "0x163604C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x16360BC", Offset = "0x16360BC", VA = "0x16360BC")]
		public ARRaytracer()
		{
		}
	}
	[Token(Token = "0x200039E")]
	public class PointSpreadOptimizer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB4FD1C", Offset = "0xB4FD1C")]
		public ARRaytracer raytracer;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OpticalCalibrationManager manager;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform newScreen;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FD84", Offset = "0xB4FD84")]
		public float focalDistance;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FDA0", Offset = "0xB4FDA0")]
		public float pupilDiameter;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FDC0", Offset = "0xB4FDC0")]
		public int whichToDraw;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 planePos;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 planeNormal;

		[NonSerialized]
		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<Vector3> intersectionPoints;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DenseOptimizer.TransformEntry[] TransformsToOptimize;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isLeft;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float rotationUnitRatio;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FDDC", Offset = "0xB4FDDC")]
		public float simplexSize;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public KeyCode key;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private NelderMead solver;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float startingDist;

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x163D464", Offset = "0x163D464", VA = "0x163D464")]
		public void Solve()
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x163DE28", Offset = "0x163DE28", VA = "0x163DE28")]
		public float costFunction(float[] coordinate)
		{
			return default(float);
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x163EDF4", Offset = "0x163EDF4", VA = "0x163EDF4", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x163DF60", Offset = "0x163DF60", VA = "0x163DF60")]
		public float evaluateFocalPlane([Optional] RuntimeGizmoDrawer drawer)
		{
			return default(float);
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x163FB34", Offset = "0x163FB34", VA = "0x163FB34")]
		public PointSpreadOptimizer()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class PointSpreadTracer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x2000614")]
		public static class Fit
		{
			[Token(Token = "0x6002896")]
			[Address(RVA = "0x1641064", Offset = "0x1641064", VA = "0x1641064")]
			public static void Line(List<Vector3> points, out Vector3 position, ref Vector3 direction, int iters = 100, [Optional] RuntimeGizmoDrawer drawer)
			{
			}

			[Token(Token = "0x6002897")]
			[Address(RVA = "0x163F518", Offset = "0x163F518", VA = "0x163F518")]
			public static float Plane(List<Vector3> points, out Vector3 position, out Vector3 normal, int iters = 200, [Optional] RuntimeGizmoDrawer drawer)
			{
				return default(float);
			}

			[Token(Token = "0x6002898")]
			[Address(RVA = "0x1641660", Offset = "0x1641660", VA = "0x1641660")]
			public static float TimeAlongSegment(Vector3 position, Vector3 a, Vector3 b)
			{
				return default(float);
			}

			[Token(Token = "0x6002899")]
			[Address(RVA = "0x1641788", Offset = "0x1641788", VA = "0x1641788")]
			public static float ClosestTimeOnSegmentToLine(Vector3 segA, Vector3 segB, Vector3 lineA, Vector3 lineB)
			{
				return default(float);
			}

			[Token(Token = "0x600289A")]
			[Address(RVA = "0x163F320", Offset = "0x163F320", VA = "0x163F320")]
			public static Vector3 ClosestPointOnRayToRay(Ray a, Ray b)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600289B")]
			[Address(RVA = "0x1641A64", Offset = "0x1641A64", VA = "0x1641A64")]
			public static Vector3 ConstrainToSegment(Vector3 position, Vector3 a, Vector3 b)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<Vector3> averagedInterSectionPoints;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ARRaytracer raytracer;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OpticalCalibrationManager manager;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform newScreen;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FDFC", Offset = "0xB4FDFC")]
		public float focalDistance;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 curFocalPoint;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FE18", Offset = "0xB4FE18")]
		public int whichToDraw;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float curDrawing;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB4FE34", Offset = "0xB4FE34")]
		public float constantDistance;

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x163FBB4", Offset = "0x163FBB4", VA = "0x163FBB4", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x163EDF8", Offset = "0x163EDF8", VA = "0x163EDF8")]
		public static Ray traceRay(Vector3 rayDirection, ARRaytracer.OpticalSystem optics, [Optional] RuntimeGizmoDrawer drawer)
		{
			return default(Ray);
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x1640FD8", Offset = "0x1640FD8", VA = "0x1640FD8")]
		public PointSpreadTracer()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class RayScanner : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraPostProcessing processing;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivity;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera RightCamera;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Camera LeftCamera;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 meshResolution;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshFilter leftEyeMeshFilter;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshFilter rightEyeMeshFilter;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float lastTime;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 pos;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Mesh leftEyeDistortionMesh;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh rightEyeDistortionMesh;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<Vector2> leftEyeMeshUVs;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector2> rightEyeMeshUVs;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Vector3> meshVertices;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<int> meshTriangles;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int UVIndex;

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x1641BA8", Offset = "0x1641BA8", VA = "0x1641BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x1641C28", Offset = "0x1641C28", VA = "0x1641C28")]
		private void Update()
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x16421D8", Offset = "0x16421D8", VA = "0x16421D8", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x1642244", Offset = "0x1642244", VA = "0x1642244")]
		public Vector2 calculateUVFromRay(Vector3 ray, Camera camera)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x1641D78", Offset = "0x1641D78", VA = "0x1641D78")]
		public void CreateDistortionMeshes()
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x164218C", Offset = "0x164218C", VA = "0x164218C")]
		public void reapplyMeshUVs()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x1642314", Offset = "0x1642314", VA = "0x1642314")]
		public RayScanner()
		{
		}
	}
	[Token(Token = "0x20003A1")]
	public class CalibrationDeformer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshFilter filter;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isLeftEye;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera mainCamera;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<int> vertexIndices;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector3> controlPoints;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool drawRuntimeGizmos;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshDeformer calibrationMesh;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 curMousePosition;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 lastMousePosition;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int closestVertex;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 screen;

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x16366A4", Offset = "0x16366A4", VA = "0x16366A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x16366DC", Offset = "0x16366DC", VA = "0x16366DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x1635328", Offset = "0x1635328", VA = "0x1635328")]
		public void InitializeMeshDeformations()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x1636C14", Offset = "0x1636C14", VA = "0x1636C14")]
		private int findClosestVertexToMouse(MeshDeformer mesh, Camera cam)
		{
			return default(int);
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x163708C", Offset = "0x163708C", VA = "0x163708C")]
		private float SqrDistanceToSegment(Vector3 position, Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x1637210", Offset = "0x1637210", VA = "0x1637210", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x16374D4", Offset = "0x16374D4", VA = "0x16374D4")]
		public CalibrationDeformer()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class EllipsoidTransform : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Foci1;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform Foci2;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinorAxis;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float MajorAxis;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Matrix4x4 worldToSphereSpace;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Matrix4x4 sphereToWorldSpace;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool drawGizmos;

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x16375E8", Offset = "0x16375E8", VA = "0x16375E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x16375EC", Offset = "0x16375EC", VA = "0x16375EC", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x16361EC", Offset = "0x16361EC", VA = "0x16361EC")]
		public bool UpdateEllipsoid()
		{
			return default(bool);
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x16376B4", Offset = "0x16376B4", VA = "0x16376B4")]
		public void DrawEllipse(RuntimeGizmoDrawer drawer, Vector3 foci1, Vector3 foci2, float MinorAxis)
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x1637A0C", Offset = "0x1637A0C", VA = "0x1637A0C")]
		public EllipsoidTransform()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	[ExecuteInEditMode]
	public class ForceAspectRatio : MonoBehaviour
	{
		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float aspect;

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x1637A28", Offset = "0x1637A28", VA = "0x1637A28")]
		private void Start()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x1637A8C", Offset = "0x1637A8C", VA = "0x1637A8C")]
		public ForceAspectRatio()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class IPDAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FE84", Offset = "0xB4FE84")]
		public float ipd;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float heightOffset;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float depthOffset;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float pitchOffset;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float yawOffset;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float? _lastKnownIPD;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float? _lastKnownHeight;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float? _lastKnownDepth;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float? _lastKnownPitch;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float? _lastKnownYaw;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FEBC", Offset = "0xB4FEBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FEBC", Offset = "0xB4FEBC")]
		public Transform leftEyeIPDTransform;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FF1C", Offset = "0xB4FF1C")]
		public ARRaytracer leftEyeARRaytracer;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FF54", Offset = "0xB4FF54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FF54", Offset = "0xB4FF54")]
		public Transform rightEyeIPDTransform;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FFB4", Offset = "0xB4FFB4")]
		public ARRaytracer rightEyeARRaytracer;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB4FFEC", Offset = "0xB4FFEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB4FFEC", Offset = "0xB4FFEC")]
		public Transform leapTransform;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5004C", Offset = "0xB5004C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5004C", Offset = "0xB5004C")]
		public KeyCode adjustWiderKey;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB500AC", Offset = "0xB500AC")]
		public KeyCode adjustNarrowerKey;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB500E4", Offset = "0xB500E4")]
		public KeyCode adjustHigherKey;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5011C", Offset = "0xB5011C")]
		public KeyCode adjustLowerKey;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50154", Offset = "0xB50154")]
		public KeyCode adjustCloserKey;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5018C", Offset = "0xB5018C")]
		public KeyCode adjustFartherKey;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB501C4", Offset = "0xB501C4")]
		public KeyCode adjustTrackerHigherKey;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB501FC", Offset = "0xB501FC")]
		public KeyCode adjustTrackerLowerKey;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50234", Offset = "0xB50234")]
		public KeyCode adjustTrackerLeftKey;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5026C", Offset = "0xB5026C")]
		public KeyCode adjustTrackerRightKey;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB502A4", Offset = "0xB502A4")]
		public TextMesh debugText;

		[Token(Token = "0x1700020B")]
		private bool isConfigured
		{
			[Token(Token = "0x60019D6")]
			[Address(RVA = "0x1637AA0", Offset = "0x1637AA0", VA = "0x1637AA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x1637BEC", Offset = "0x1637BEC", VA = "0x1637BEC")]
		private void Start()
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x1637C7C", Offset = "0x1637C7C", VA = "0x1637C7C")]
		public void resetEyes()
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0x1637E78", Offset = "0x1637E78", VA = "0x1637E78")]
		private void Update()
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x1637CC8", Offset = "0x1637CC8", VA = "0x1637CC8")]
		public void RefreshIPD()
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x163859C", Offset = "0x163859C", VA = "0x163859C")]
		public IPDAdjuster()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class LeapDeviceTracking : MonoBehaviour
	{
		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB502DC", Offset = "0xB502DC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB502DC", Offset = "0xB502DC")]
		public LeapServiceProvider leapProvider;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform head;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB5033C", Offset = "0xB5033C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5033C", Offset = "0xB5033C")]
		public long extrapolationAmount;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5039C", Offset = "0xB5039C")]
		public float positionScaleFactor;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useDifferentRotationExtrapolation;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB503D4", Offset = "0xB503D4")]
		public long rotationExtrapolationAmount;

		[NonSerialized]
		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 _devicePosition;

		[NonSerialized]
		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Quaternion _deviceRotation;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Camera preRenderCamera;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useLateUpdate;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _positionalDrift;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50468", Offset = "0xB50468")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50468", Offset = "0xB50468")]
		public bool receiveButDontSet;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action<Pose> debugCallPerHeadPose;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action<Pose> debugCallPerLeapPose;

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x16385D0", Offset = "0x16385D0", VA = "0x16385D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x16386D8", Offset = "0x16386D8", VA = "0x16386D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x16386DC", Offset = "0x16386DC", VA = "0x16386DC")]
		private void onPreRender(Camera cameraAboutToRender)
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x1638E74", Offset = "0x1638E74", VA = "0x1638E74")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x1638790", Offset = "0x1638790", VA = "0x1638790")]
		private void updatePositionTracking()
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x1638EB8", Offset = "0x1638EB8", VA = "0x1638EB8")]
		public LeapDeviceTracking()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class MeshDeformer
	{
		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] originalMeshVertices;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] distortedMeshVertices;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] originalControlPoints;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] currentControlPoints;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[,] restingIntraControlPointDisplacements;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion[] controlPointRotations;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[,] vertexControlWeights;

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x1636E44", Offset = "0x1636E44", VA = "0x1636E44")]
		public MeshDeformer(MeshFilter inputMeshFilter, int[] controlVertices, float weight = 1f)
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x1636AE8", Offset = "0x1636AE8", VA = "0x1636AE8")]
		public void updateMeshDeformation(ref MeshFilter filter, Vector3[] controlPoints, bool useRotation = true, float weight = 1f, int iters = 10)
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x16391C8", Offset = "0x16391C8", VA = "0x16391C8")]
		public void updateWeights(float weight)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x1638F50", Offset = "0x1638F50", VA = "0x1638F50")]
		private static void initializeMeshDeformation(Mesh inputMesh, Vector3[] originalControlPoints, ref Vector3[] originalMeshVertices, ref Vector3[,] restingIntraControlPointDisplacements, ref float[,] vertexControlWeights, float weight = 1f)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x1639154", Offset = "0x1639154", VA = "0x1639154")]
		private static void updateMeshDeformation(Vector3[] originalControlPoints, ref Vector3[] originalMeshVertices, ref Vector3[] currentControlPoints, ref Quaternion[] controlPointRotations, ref Vector3[,] restingIntraControlPointDisplacements, ref float[,] vertexControlWeights, ref Vector3[] distortedMeshVertices, bool useRotation = true, float weight = 1f, int iters = 50)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x16391DC", Offset = "0x16391DC", VA = "0x16391DC")]
		private static void calculateVertexWeights(Vector3[] originalPlaneVerts, Vector3[] originalControlPoints, float weightFalloff, ref float[,] vertexControlWeights)
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x16394B4", Offset = "0x16394B4", VA = "0x16394B4")]
		private static void calculateControlPointRotations(Vector3[] currentControlPoints, Vector3[] originalControlPoints, Vector3[,] restingIntraControlPointDisplacements, ref Quaternion[] controlPointRotations, bool useRotation = true, int iters = 50)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x16399F4", Offset = "0x16399F4", VA = "0x16399F4")]
		private static void calculateVertexDisplacement(Vector3[] originalPlaneVerts, Vector3[] originalControlPoints, Vector3[] currentControlPoints, Quaternion[] controlPointRotations, float[,] controlPointWeights, ref Vector3[] distortedPlaneVerts)
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class OpticalCalibrationManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000615")]
		public struct HeadsetCalibration
		{
			[Token(Token = "0x4002092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReflectorOptics leftEye;

			[Token(Token = "0x4002093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			public ReflectorOptics rightEye;

			[Token(Token = "0x4002094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			public PhysicalComponent leapTracker;
		}

		[Serializable]
		[Token(Token = "0x2000616")]
		public struct ReflectorOptics
		{
			[Token(Token = "0x4002095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float ellipseMinorAxis;

			[Token(Token = "0x4002096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float ellipseMajorAxis;

			[Token(Token = "0x4002097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 screenForward;

			[Token(Token = "0x4002098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 screenPosition;

			[Token(Token = "0x4002099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 eyePosition;

			[Token(Token = "0x400209A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion eyeRotation;

			[Token(Token = "0x400209B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector4 cameraProjection;

			[Token(Token = "0x400209C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public Matrix4x4 sphereToWorldSpace;

			[Token(Token = "0x400209D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public Matrix4x4 worldToScreenSpace;

			[Token(Token = "0x600289C")]
			[Address(RVA = "0x163C3DC", Offset = "0x163C3DC", VA = "0x163C3DC")]
			public ReflectorOptics(Vector3 pupilPosition, EllipsoidTransform ellipse, Transform Screen, Vector4 projectionParameters, [Optional] Pose? headsetOrigin, [Optional] Quaternion? optionalPupilRotation, bool updateEllipsoid = true)
			{
			}

			[Token(Token = "0x600289D")]
			[Address(RVA = "0x163474C", Offset = "0x163474C", VA = "0x163474C")]
			public static implicit operator ARRaytracer.OpticalSystem(ReflectorOptics curOptics)
			{
				return default(ARRaytracer.OpticalSystem);
			}

			[Token(Token = "0x600289E")]
			[Address(RVA = "0x163CD24", Offset = "0x163CD24", VA = "0x163CD24", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000617")]
		public struct PhysicalComponent
		{
			[Token(Token = "0x400209E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x400209F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string serial;

			[Token(Token = "0x40020A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Pose localPose;

			[Token(Token = "0x600289F")]
			[Address(RVA = "0x163A5EC", Offset = "0x163A5EC", VA = "0x163A5EC")]
			public PhysicalComponent(Pose localPose, string name = "", string serial = "")
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000618")]
		public struct SteamVROptics
		{
			[Token(Token = "0x40020A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float ellipseMinorAxis;

			[Token(Token = "0x40020A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float ellipseMajorAxis;

			[Token(Token = "0x40020A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float screenForward_x;

			[Token(Token = "0x40020A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float screenForward_y;

			[Token(Token = "0x40020A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float screenForward_z;

			[Token(Token = "0x40020A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float screenPosition_x;

			[Token(Token = "0x40020A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float screenPosition_y;

			[Token(Token = "0x40020A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float screenPosition_z;

			[Token(Token = "0x40020A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float eyePosition_x;

			[Token(Token = "0x40020AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float eyePosition_y;

			[Token(Token = "0x40020AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float eyePosition_z;

			[Token(Token = "0x40020AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float cameraProjection_x;

			[Token(Token = "0x40020AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float cameraProjection_y;

			[Token(Token = "0x40020AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float cameraProjection_z;

			[Token(Token = "0x40020AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float cameraProjection_w;

			[Token(Token = "0x40020B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float sphereToWorldSpace_e00;

			[Token(Token = "0x40020B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float sphereToWorldSpace_e01;

			[Token(Token = "0x40020B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float sphereToWorldSpace_e02;

			[Token(Token = "0x40020B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float sphereToWorldSpace_e03;

			[Token(Token = "0x40020B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sphereToWorldSpace_e10;

			[Token(Token = "0x40020B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public float sphereToWorldSpace_e11;

			[Token(Token = "0x40020B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float sphereToWorldSpace_e12;

			[Token(Token = "0x40020B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sphereToWorldSpace_e13;

			[Token(Token = "0x40020B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float sphereToWorldSpace_e20;

			[Token(Token = "0x40020B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public float sphereToWorldSpace_e21;

			[Token(Token = "0x40020BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float sphereToWorldSpace_e22;

			[Token(Token = "0x40020BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float sphereToWorldSpace_e23;

			[Token(Token = "0x40020BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public float worldToScreenSpace_e00;

			[Token(Token = "0x40020BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public float worldToScreenSpace_e01;

			[Token(Token = "0x40020BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public float worldToScreenSpace_e02;

			[Token(Token = "0x40020BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float worldToScreenSpace_e03;

			[Token(Token = "0x40020C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public float worldToScreenSpace_e10;

			[Token(Token = "0x40020C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public float worldToScreenSpace_e11;

			[Token(Token = "0x40020C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public float worldToScreenSpace_e12;

			[Token(Token = "0x40020C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public float worldToScreenSpace_e13;

			[Token(Token = "0x40020C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float worldToScreenSpace_e20;

			[Token(Token = "0x40020C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public float worldToScreenSpace_e21;

			[Token(Token = "0x40020C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			public float worldToScreenSpace_e22;

			[Token(Token = "0x40020C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public float worldToScreenSpace_e23;

			[Token(Token = "0x60028A0")]
			[Address(RVA = "0x163D210", Offset = "0x163D210", VA = "0x163D210")]
			public static implicit operator ReflectorOptics(SteamVROptics curOptics)
			{
				return default(ReflectorOptics);
			}

			[Token(Token = "0x60028A1")]
			[Address(RVA = "0x163B624", Offset = "0x163B624", VA = "0x163B624")]
			public static implicit operator SteamVROptics(ReflectorOptics curOptics)
			{
				return default(SteamVROptics);
			}

			[Token(Token = "0x60028A2")]
			[Address(RVA = "0x163B6E4", Offset = "0x163B6E4", VA = "0x163B6E4")]
			public static string getSteamVRPrefixString()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000619")]
		public struct SteamVRHeadsetCalibration
		{
			[Token(Token = "0x40020C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SteamVROptics leftEye;

			[Token(Token = "0x40020C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			public SteamVROptics rightEye;
		}

		[Token(Token = "0x40015B8")]
		private const string CALIBRATION_ARG_REGEX = "--use_calibration=\"(.*)\"";

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Vector4 DEFAULT_PROJECTION_PARAMS;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector4 rightEyeProjectionParams;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector4 leftEyeProjectionParams;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Vector3 DEFAULT_LEFT_EYE;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB504C8", Offset = "0xB504C8")]
		public StreamingFolder calibrationsFolder;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50500", Offset = "0xB50500")]
		public KeyCode saveCalibrationKey;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50538", Offset = "0xB50538")]
		public bool requireCtrlHeld;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB50570", Offset = "0xB50570")]
		public string outputCalibrationFile;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB505D8", Offset = "0xB505D8")]
		public string inputCalibrationFile;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool loadInputFileOnStart;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool allowSavingInBuild;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool saveSteamVRStyleCalibration;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public KeyCode recalculateFromTransformsKey;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50640", Offset = "0xB50640")]
		public bool everyFrameRecalculateFromTransforms;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ARRaytracer leftEye;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ARRaytracer rightEye;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public LeapXRServiceProvider provider;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform headTransform;

		[NonSerialized]
		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public HeadsetCalibration currentCalibration;

		[Token(Token = "0x1700020C")]
		public Pose? maybeHeadsetPose
		{
			[Token(Token = "0x60019EA")]
			[Address(RVA = "0x1633730", Offset = "0x1633730", VA = "0x1633730")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020D")]
		public string outputFilePath
		{
			[Token(Token = "0x60019EB")]
			[Address(RVA = "0x1639E04", Offset = "0x1639E04", VA = "0x1639E04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		public string inputFilePath
		{
			[Token(Token = "0x60019EC")]
			[Address(RVA = "0x1639E94", Offset = "0x1639E94", VA = "0x1639E94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x1639F24", Offset = "0x1639F24", VA = "0x1639F24")]
		private void Start()
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x163AAC8", Offset = "0x163AAC8", VA = "0x163AAC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x163AB68", Offset = "0x163AB68", VA = "0x163AB68")]
		public void SaveCurrentCalibration()
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x163A19C", Offset = "0x163A19C", VA = "0x163A19C")]
		public void LoadCalibration(bool disableEllipsoids = true, bool ignoreConfig = false)
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x163B96C", Offset = "0x163B96C", VA = "0x163B96C")]
		public bool TryLoadCalibrationFromPath(string inputFilePath, bool disableEllipsoids = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x163845C", Offset = "0x163845C", VA = "0x163845C")]
		public void UpdateCalibrationFromObjects(bool onlyOneEye = false, bool updateLeftEye = true)
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0x163A60C", Offset = "0x163A60C", VA = "0x163A60C")]
		private ReflectorOptics constructLeftEyeOptics(bool useDefaultEyes = false)
		{
			return default(ReflectorOptics);
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x163A838", Offset = "0x163A838", VA = "0x163A838")]
		private ReflectorOptics constructRightEyeOptics(bool useDefaultEyes = false)
		{
			return default(ReflectorOptics);
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x163C888", Offset = "0x163C888", VA = "0x163C888")]
		public static Matrix4x4 MatrixFromQuaternion(Quaternion q)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x163C990", Offset = "0x163C990", VA = "0x163C990")]
		public static Quaternion QuaternionFromMatrix(Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0x163CAAC", Offset = "0x163CAAC", VA = "0x163CAAC")]
		public static Quaternion LossyMatrixMultQuaternion(Matrix4x4 m, Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x163CBB0", Offset = "0x163CBB0", VA = "0x163CBB0")]
		public OpticalCalibrationManager()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public static class ProjectionExtension
	{
		[Token(Token = "0x60019F9")]
		[Address(RVA = "0x1634A90", Offset = "0x1634A90", VA = "0x1634A90")]
		public static Matrix4x4 ComposeProjection(this Vector4 tangentHalfAngles, float zNear = 0.07f, float zFar = 1000f)
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x20003A9")]
	public class SerializedCalibration : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200061A")]
		public class StringTransformDictionary : SerializableDictionary<string, Transform>
		{
			[Token(Token = "0x60028A3")]
			[Address(RVA = "0x164321C", Offset = "0x164321C", VA = "0x164321C")]
			public StringTransformDictionary()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200061B")]
		public struct CalibrationComponent
		{
			[Token(Token = "0x40020CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x40020CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Pose localPose;

			[Token(Token = "0x40020CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 localScale;

			[Token(Token = "0x40020CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> vertexIndices;

			[Token(Token = "0x40020CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<Vector3> controlPoints;

			[Token(Token = "0x60028A4")]
			[Address(RVA = "0x164306C", Offset = "0x164306C", VA = "0x164306C")]
			public CalibrationComponent(string name, Pose localPose, Vector3 localScale)
			{
			}

			[Token(Token = "0x60028A5")]
			[Address(RVA = "0x1643154", Offset = "0x1643154", VA = "0x1643154")]
			public CalibrationComponent(string name, Pose localPose, Vector3 localScale, List<int> vertexIndices, List<Vector3> controlPoints)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200061C")]
		public struct ListWrapper<T>
		{
			[Token(Token = "0x40020CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<T> list;

			[Token(Token = "0x60028A6")]
			public ListWrapper(List<T> list)
			{
			}
		}

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50678", Offset = "0xB50678")]
		public StreamingFolder calibrationsFolder;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB506B0", Offset = "0xB506B0")]
		public KeyCode saveCalibrationKey;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB506E8", Offset = "0xB506E8")]
		public bool requireCtrlHeld;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB50720", Offset = "0xB50720")]
		public string outputCalibrationFile;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB50788", Offset = "0xB50788")]
		public string inputCalibrationFile;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool loadInputFileOnStart;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool allowSavingInBuild;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB507F0", Offset = "0xB507F0")]
		public StringTransformDictionary calibratedComponents;

		[Token(Token = "0x1700020F")]
		public string outputFilePath
		{
			[Token(Token = "0x60019FA")]
			[Address(RVA = "0x164246C", Offset = "0x164246C", VA = "0x164246C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000210")]
		public string inputFilePath
		{
			[Token(Token = "0x60019FB")]
			[Address(RVA = "0x16424FC", Offset = "0x16424FC", VA = "0x16424FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x164258C", Offset = "0x164258C", VA = "0x164258C")]
		private void Start()
		{
		}

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x1642A98", Offset = "0x1642A98", VA = "0x1642A98")]
		private void Update()
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x1642B10", Offset = "0x1642B10", VA = "0x1642B10")]
		public void SaveCurrentCalibration()
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x1642680", Offset = "0x1642680", VA = "0x1642680")]
		public void LoadCalibration()
		{
		}

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x1643180", Offset = "0x1643180", VA = "0x1643180")]
		public SerializedCalibration()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	[ExecuteInEditMode]
	public class WindowOffsetManager : MonoBehaviour
	{
		[Token(Token = "0x200061D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476DC", Offset = "0xB476DC")]
		private sealed class <Position>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindowOffsetManager <>4__this;

			[Token(Token = "0x17000441")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028AA")]
				[Address(RVA = "0x1371608", Offset = "0x1371608", VA = "0x1371608", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000442")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028AC")]
				[Address(RVA = "0x1371670", Offset = "0x1371670", VA = "0x1371670", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028A7")]
			[Address(RVA = "0x137137C", Offset = "0x137137C", VA = "0x137137C")]
			[DebuggerHidden]
			public <Position>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60028A8")]
			[Address(RVA = "0x1371490", Offset = "0x1371490", VA = "0x1371490", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028A9")]
			[Address(RVA = "0x1371494", Offset = "0x1371494", VA = "0x1371494", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028AB")]
			[Address(RVA = "0x1371610", Offset = "0x1371610", VA = "0x1371610", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2Int s_windowShift;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50828", Offset = "0xB50828")]
		public int xShift;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50860", Offset = "0xB50860")]
		public int yShift;

		[Token(Token = "0x17000211")]
		public static Vector2Int WindowShift
		{
			[Token(Token = "0x6001A01")]
			[Address(RVA = "0x1370E64", Offset = "0x1370E64", VA = "0x1370E64")]
			get
			{
				return default(Vector2Int);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x1370ECC", Offset = "0x1370ECC", VA = "0x1370ECC")]
		private static extern bool SetWindowPos(IntPtr hwnd, int hWndInsertAfter, int x, int Y, int cx, int cy, int wFlags);

		[PreserveSig]
		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x1370F9C", Offset = "0x1370F9C", VA = "0x1370F9C")]
		public static extern IntPtr FindWindow(string className, string windowName);

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x1371058", Offset = "0x1371058", VA = "0x1371058")]
		public static void SetPosition(int x, int y, int resX = 0, int resY = 0)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x1371134", Offset = "0x1371134", VA = "0x1371134")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x137130C", Offset = "0x137130C", VA = "0x137130C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5E92C", Offset = "0xB5E92C")]
		private IEnumerator Position()
		{
			return null;
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x13713A8", Offset = "0x13713A8", VA = "0x13713A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x1371408", Offset = "0x1371408", VA = "0x1371408")]
		public WindowOffsetManager()
		{
		}
	}
}
namespace Leap.Unity.AR.Testing
{
	[Token(Token = "0x20003AB")]
	public class ArucoCalibrator : MonoBehaviour
	{
		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArUcoProvider provider;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RayOptimizer leftOptimizer;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayOptimizer rightOptimizer;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform[] measuredPointTransforms;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyCode AddLeftMeasurementKey;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public KeyCode AddRightMeasurementKey;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public KeyCode SaveMeasurementKey;

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x164326C", Offset = "0x164326C", VA = "0x164326C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1643270", Offset = "0x1643270", VA = "0x1643270")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x16434A0", Offset = "0x16434A0", VA = "0x16434A0")]
		public ArucoCalibrator()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class DenseOptimizer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200061E")]
		public struct ListWrapper
		{
			[Token(Token = "0x40020D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<Vector4> data;
		}

		[Serializable]
		[Token(Token = "0x200061F")]
		public struct TransformEntry
		{
			[Token(Token = "0x40020D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform TransformToOptimize;

			[Token(Token = "0x40020D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool OptimizePositionX;

			[Token(Token = "0x40020D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool OptimizePositionY;

			[Token(Token = "0x40020D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool OptimizePositionZ;

			[Token(Token = "0x40020D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool OptimizeRotationX;

			[Token(Token = "0x40020D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool OptimizeRotationY;

			[Token(Token = "0x40020DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool OptimizeRotationZ;

			[Token(Token = "0x40020DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public Vector3 originalLocalPosition;

			[Token(Token = "0x40020DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public Quaternion originalLocalRotation;
		}

		[Token(Token = "0x2000620")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476EC", Offset = "0xB476EC")]
		private sealed class <StartNelderMead>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DenseOptimizer <>4__this;

			[Token(Token = "0x17000443")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028B0")]
				[Address(RVA = "0x136751C", Offset = "0x136751C", VA = "0x136751C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000444")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028B2")]
				[Address(RVA = "0x1367584", Offset = "0x1367584", VA = "0x1367584", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028AD")]
			[Address(RVA = "0x1367358", Offset = "0x1367358", VA = "0x1367358")]
			[DebuggerHidden]
			public <StartNelderMead>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60028AE")]
			[Address(RVA = "0x1367384", Offset = "0x1367384", VA = "0x1367384", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028AF")]
			[Address(RVA = "0x1367388", Offset = "0x1367388", VA = "0x1367388", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028B1")]
			[Address(RVA = "0x1367524", Offset = "0x1367524", VA = "0x1367524", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB50898", Offset = "0xB50898")]
		public ARRaytracer raytracer;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "QuickButtonAttribute", RVA = "0xB50900", Offset = "0xB50900")]
		public WebcamScreenCalibration calibration;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OpticalCalibrationManager manager;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TransformEntry[] TransformsToOptimize;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isLeft;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float rotationUnitRatio;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB50968", Offset = "0xB50968")]
		public float simplexSize;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KeyCode key;

		[NonSerialized]
		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NelderMeadRoutine solver;

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x16434A8", Offset = "0x16434A8", VA = "0x16434A8")]
		public void ToggleSolve()
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x16434B8", Offset = "0x16434B8", VA = "0x16434B8")]
		public void StartSolve()
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x163B5DC", Offset = "0x163B5DC", VA = "0x163B5DC")]
		public void StopSolve()
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x16434F0", Offset = "0x16434F0", VA = "0x16434F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5E990", Offset = "0xB5E990")]
		private IEnumerator StartNelderMead()
		{
			return null;
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x1643560", Offset = "0x1643560", VA = "0x1643560")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0x163D774", Offset = "0x163D774", VA = "0x163D774")]
		public static float[] calculateCoordsFromTransformEntries(ref TransformEntry[] TransformsToOptimize, float rotationUnitRatio)
		{
			return null;
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x16435AC", Offset = "0x16435AC", VA = "0x16435AC")]
		public void setTransforms(float[] coordinate)
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x16436A4", Offset = "0x16436A4", VA = "0x16436A4")]
		public float measureCost()
		{
			return default(float);
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x163DB08", Offset = "0x163DB08", VA = "0x163DB08")]
		public static void setTransformsFromCoord(float[] coord, ref TransformEntry[] TransformsToOptimize, float rotationUnitRatio)
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x1643768", Offset = "0x1643768", VA = "0x1643768")]
		public DenseOptimizer()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class MechanicalOptimizer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ARRaytracer raytracer;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform reflector;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform screen;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EllipsoidTransform ellipse;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationUnitRatio;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NelderMead solver;

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x1367710", Offset = "0x1367710", VA = "0x1367710")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x1367990", Offset = "0x1367990", VA = "0x1367990")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0x13679AC", Offset = "0x13679AC", VA = "0x13679AC", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x13679B0", Offset = "0x13679B0", VA = "0x13679B0")]
		public float distanceCost(float[] coordinate)
		{
			return default(float);
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x1367CE4", Offset = "0x1367CE4", VA = "0x1367CE4")]
		private void addAPoint(Vector2 point, ref float cost)
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0x1367FC0", Offset = "0x1367FC0", VA = "0x1367FC0")]
		private Vector3 screenToWorld(Vector2 screenUV)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x13680D0", Offset = "0x13680D0", VA = "0x13680D0")]
		public MechanicalOptimizer()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class OpenCVStereoWebcam : MonoBehaviour
	{
		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int deviceNumber;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer leftDisplay;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer rightDisplay;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool updateScreenAutomatically;

		[NonSerialized]
		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public byte[] leftData;

		[NonSerialized]
		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte[] rightData;

		[NonSerialized]
		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Mat leftImage;

		[NonSerialized]
		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Mat rightImage;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public VideoCapture cap;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Mat webcamImage;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mat grayImage;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Mat leftImageSlice;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Mat rightImageSlice;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D leftTexture;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D rightTexture;

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x13680E0", Offset = "0x13680E0", VA = "0x13680E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x13684D8", Offset = "0x13684D8", VA = "0x13684D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x1368938", Offset = "0x1368938", VA = "0x1368938")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x1368844", Offset = "0x1368844", VA = "0x1368844")]
		public void updateScreen(Mat image, bool isLeft)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x1368D0C", Offset = "0x1368D0C", VA = "0x1368D0C")]
		public void changeDeviceNumber(int newDeviceNumber)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x13689C4", Offset = "0x13689C4", VA = "0x13689C4")]
		public static void fillTexture(Mat input, ref Texture2D output, [Optional] byte[] bytes)
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x1368DAC", Offset = "0x1368DAC", VA = "0x1368DAC")]
		public OpenCVStereoWebcam()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class RayOptimizer : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Serializable]
		[Token(Token = "0x2000621")]
		public struct ListWrapper
		{
			[Token(Token = "0x40020E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<Vector4> data;
		}

		[Serializable]
		[Token(Token = "0x2000622")]
		public struct TransformEntry
		{
			[Token(Token = "0x40020E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform TransformToOptimize;

			[Token(Token = "0x40020E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool OptimizePositionX;

			[Token(Token = "0x40020E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool OptimizePositionY;

			[Token(Token = "0x40020E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool OptimizePositionZ;

			[Token(Token = "0x40020E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool OptimizeRotationX;

			[Token(Token = "0x40020E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool OptimizeRotationY;

			[Token(Token = "0x40020E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool OptimizeRotationZ;

			[Token(Token = "0x40020E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public Vector3 originalLocalPosition;

			[Token(Token = "0x40020E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public Quaternion originalLocalRotation;
		}

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ARRaytracer raytracer;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TransformEntry[] TransformsToOptimize;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform screenSpace;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rotationUnitRatio;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NelderMead solver;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Vector4> PointCorrespondences;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string filename;

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x1368DBC", Offset = "0x1368DBC", VA = "0x1368DBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x13692AC", Offset = "0x13692AC", VA = "0x13692AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x1368F24", Offset = "0x1368F24", VA = "0x1368F24")]
		private float[] calculateCoordsFromTransformEntries(ref TransformEntry[] TransformsToOptimize)
		{
			return null;
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x1369378", Offset = "0x1369378", VA = "0x1369378")]
		public void AddPosition(Vector3 canonicalPosition, Vector3 measuredPosition)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x13694E4", Offset = "0x13694E4", VA = "0x13694E4")]
		public void Save()
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x13695C4", Offset = "0x13695C4", VA = "0x13695C4", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x13698A8", Offset = "0x13698A8", VA = "0x13698A8")]
		public float distanceCost(float[] coordinate)
		{
			return default(float);
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x1369A68", Offset = "0x1369A68", VA = "0x1369A68")]
		private void setTransformsFromCoord(float[] coord, ref TransformEntry[] TransformsToOptimize)
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x1369D90", Offset = "0x1369D90", VA = "0x1369D90")]
		private void addRayCost(Vector2 canonicalUV, Vector2 measuredRay, ref float cost)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x1369FC4", Offset = "0x1369FC4", VA = "0x1369FC4")]
		public void drawCorrespondence(Vector3 canonicalPos, Vector3 measuredPos, RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x1369778", Offset = "0x1369778", VA = "0x1369778")]
		private void drawRayDisparity(Vector2 canonicalUV, Vector2 measuredRay, RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x1369EB4", Offset = "0x1369EB4", VA = "0x1369EB4")]
		private Vector3 screenToWorld(Vector2 screenUV)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x136A144", Offset = "0x136A144", VA = "0x136A144")]
		public RayOptimizer()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class WebcamScreenCalibration : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Serializable]
		[Token(Token = "0x2000623")]
		public struct CalibrationDevice
		{
			[Token(Token = "0x20006E4")]
			public struct ImageMetrics
			{
				[Token(Token = "0x4002349")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public double average;

				[Token(Token = "0x400234A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public double sum;

				[Token(Token = "0x400234B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public double numPixels;

				[Token(Token = "0x400234C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public float totalMaskDeviation;
			}

			[Token(Token = "0x40020EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x40020EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public OpenCVStereoWebcam webcam;

			[Token(Token = "0x40020EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform LeftCamera;

			[Token(Token = "0x40020ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform RightCamera;

			[NonSerialized]
			[Token(Token = "0x40020EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ImageMetrics leftImageMetrics;

			[NonSerialized]
			[Token(Token = "0x40020EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public ImageMetrics rightImageMetrics;

			[NonSerialized]
			[Token(Token = "0x40020F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<Vector3> triangulatedDots;

			[NonSerialized]
			[Token(Token = "0x40020F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public List<Vector3> rightBlobs;

			[NonSerialized]
			[Token(Token = "0x40020F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int biggestRightBlobIndex;

			[NonSerialized]
			[Token(Token = "0x40020F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public List<Vector3> leftBlobs;

			[NonSerialized]
			[Token(Token = "0x40020F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public int biggestLeftBlobIndex;

			[NonSerialized]
			[Token(Token = "0x40020F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public int pixelsFound;

			[NonSerialized]
			[Token(Token = "0x40020F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Mat[] subtractionImage;

			[NonSerialized]
			[Token(Token = "0x40020F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Mat[] maskImage;

			[NonSerialized]
			[Token(Token = "0x40020F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Mat[] undistortMaps;

			[NonSerialized]
			[Token(Token = "0x40020F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public bool undistortMapsInitialized;

			[NonSerialized]
			[Token(Token = "0x40020FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
			public bool undistortImage;

			[NonSerialized]
			[Token(Token = "0x40020FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public DeviceCalibrations.DeviceCalibration calibration;

			[NonSerialized]
			[Token(Token = "0x40020FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public int deviceID;

			[Token(Token = "0x17000445")]
			public bool isConnected
			{
				[Token(Token = "0x60028B3")]
				[Address(RVA = "0x136BCE4", Offset = "0x136BCE4", VA = "0x136BCE4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60028B4")]
			[Address(RVA = "0x136A9A0", Offset = "0x136A9A0", VA = "0x136A9A0")]
			public void initializeFields(int imageWidth, int imageHeight)
			{
			}

			[Token(Token = "0x60028B5")]
			[Address(RVA = "0x136FC00", Offset = "0x136FC00", VA = "0x136FC00")]
			public void resetMasks()
			{
			}

			[Token(Token = "0x60028B6")]
			[Address(RVA = "0x13703DC", Offset = "0x13703DC", VA = "0x13703DC")]
			public void resetSubtraction()
			{
			}

			[Token(Token = "0x60028B7")]
			[Address(RVA = "0x136B038", Offset = "0x136B038", VA = "0x136B038")]
			public void calculateUndistortMaps(DeviceCalibrations.DeviceCalibration calibration)
			{
			}

			[Token(Token = "0x60028B8")]
			[Address(RVA = "0x136E5F0", Offset = "0x136E5F0", VA = "0x136E5F0")]
			public void Dispose()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000624")]
		public struct DeviceCalibrations
		{
			[Serializable]
			[Token(Token = "0x20006E5")]
			public struct DeviceCalibration
			{
				[Serializable]
				[Token(Token = "0x20006E8")]
				public struct CameraCalibration
				{
					[Token(Token = "0x4002353")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
					public List<float> distCoeffs;

					[Token(Token = "0x4002354")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
					public List<float> cameraMatrix;

					[Token(Token = "0x4002355")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
					public List<float> rectificationMatrix;

					[Token(Token = "0x4002356")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
					public List<float> newCameraMatrix;

					[NonSerialized]
					[Token(Token = "0x4002357")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
					public Mat distCoeffsMat;

					[NonSerialized]
					[Token(Token = "0x4002358")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
					public Mat cameraMatrixMat;

					[NonSerialized]
					[Token(Token = "0x4002359")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
					public Mat rectificationMatrixMat;

					[NonSerialized]
					[Token(Token = "0x400235A")]
					[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
					public Mat newCameraMatrixMat;

					[Token(Token = "0x6002AFD")]
					[Address(RVA = "0x1370C28", Offset = "0x1370C28", VA = "0x1370C28")]
					public CameraCalibration processToMat()
					{
						return default(CameraCalibration);
					}

					[Token(Token = "0x6002AFE")]
					[Address(RVA = "0x1370E08", Offset = "0x1370E08", VA = "0x1370E08")]
					public void Dispose()
					{
					}
				}

				[Token(Token = "0x400234D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int source;

				[Token(Token = "0x400234E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public string date;

				[Token(Token = "0x400234F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float baseline;

				[Token(Token = "0x4002350")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public List<CameraCalibration> cameras;

				[Token(Token = "0x6002AF5")]
				[Address(RVA = "0x13707A0", Offset = "0x13707A0", VA = "0x13707A0")]
				public DeviceCalibration(bool dummy = true)
				{
				}

				[Token(Token = "0x6002AF6")]
				[Address(RVA = "0x13709A8", Offset = "0x13709A8", VA = "0x13709A8")]
				public DeviceCalibration processToMat()
				{
					return default(DeviceCalibration);
				}

				[Token(Token = "0x6002AF7")]
				[Address(RVA = "0x1370B68", Offset = "0x1370B68", VA = "0x1370B68")]
				public void Dispose()
				{
				}
			}

			[Token(Token = "0x40020FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool matsProcessed;

			[Token(Token = "0x40020FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<DeviceCalibration> deviceCalibrations;

			[Token(Token = "0x60028B9")]
			[Address(RVA = "0x13706B4", Offset = "0x13706B4", VA = "0x13706B4")]
			public DeviceCalibrations(bool dummy = true)
			{
			}

			[Token(Token = "0x60028BA")]
			[Address(RVA = "0x136AF70", Offset = "0x136AF70", VA = "0x136AF70")]
			public DeviceCalibrations processToMat()
			{
				return default(DeviceCalibrations);
			}

			[Token(Token = "0x60028BB")]
			[Address(RVA = "0x1370AB4", Offset = "0x1370AB4", VA = "0x1370AB4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000625")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB476FC", Offset = "0xB476FC")]
		private sealed class <CalibrateScreenLocation>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WebcamScreenCalibration <>4__this;

			[Token(Token = "0x4002102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4002103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private HyperMegaLines <drawer>5__3;

			[Token(Token = "0x4002104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__4;

			[Token(Token = "0x17000446")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028BF")]
				[Address(RVA = "0x136FFC8", Offset = "0x136FFC8", VA = "0x136FFC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000447")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028C1")]
				[Address(RVA = "0x1370030", Offset = "0x1370030", VA = "0x1370030", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028BC")]
			[Address(RVA = "0x136D5C0", Offset = "0x136D5C0", VA = "0x136D5C0")]
			[DebuggerHidden]
			public <CalibrateScreenLocation>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60028BD")]
			[Address(RVA = "0x136F338", Offset = "0x136F338", VA = "0x136F338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028BE")]
			[Address(RVA = "0x136F33C", Offset = "0x136F33C", VA = "0x136F33C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028C0")]
			[Address(RVA = "0x136FFD0", Offset = "0x136FFD0", VA = "0x136FFD0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000626")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4770C", Offset = "0xB4770C")]
		private sealed class <CreateReflectorMasks>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WebcamScreenCalibration <>4__this;

			[Token(Token = "0x4002108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x17000448")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028C5")]
				[Address(RVA = "0x1370644", Offset = "0x1370644", VA = "0x1370644", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000449")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028C7")]
				[Address(RVA = "0x13706AC", Offset = "0x13706AC", VA = "0x13706AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028C2")]
			[Address(RVA = "0x136D65C", Offset = "0x136D65C", VA = "0x136D65C")]
			[DebuggerHidden]
			public <CreateReflectorMasks>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x60028C3")]
			[Address(RVA = "0x1370038", Offset = "0x1370038", VA = "0x1370038", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028C4")]
			[Address(RVA = "0x137003C", Offset = "0x137003C", VA = "0x137003C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028C6")]
			[Address(RVA = "0x137064C", Offset = "0x137064C", VA = "0x137064C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float standardDelay;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode alignScreenKey;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode createReflectorMaskKey;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int blobThreshold;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte monitorMaskThreshold;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public byte headsetMaskThreshold;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float BlobSizeCutoff;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject monitorWhiteness;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject headsetWhiteness;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject whiteCircle;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject monitorPattern;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject headsetPattern;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform calibrationDotsParent;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform CalibrationMonitor;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Camera calibrationMonitorCamera;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform calibrationBars;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CalibrationDevice[] calibrationDevices;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool calculateSumOfDeviation;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DeviceCalibrations deviceCalibrations;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<Vector3> _realDots;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Renderer monitorPatternRenderer;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Renderer headsetPatternRenderer;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private DenseOptimizer[] optimizers;

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x136A1D8", Offset = "0x136A1D8", VA = "0x136A1D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x136B520", Offset = "0x136B520", VA = "0x136B520")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x136C644", Offset = "0x136C644", VA = "0x136C644")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x136B390", Offset = "0x136B390", VA = "0x136B390")]
		private void setScreenDimensions(float xDim, float yDim)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x136D4A8", Offset = "0x136D4A8", VA = "0x136D4A8")]
		private void calibrateScreenLocation()
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x136D550", Offset = "0x136D550", VA = "0x136D550")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5E9F4", Offset = "0xB5E9F4")]
		private IEnumerator CalibrateScreenLocation()
		{
			return null;
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x136D4FC", Offset = "0x136D4FC", VA = "0x136D4FC")]
		private void createReflectorMasks()
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x136D5EC", Offset = "0x136D5EC", VA = "0x136D5EC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5EA58", Offset = "0xB5EA58")]
		private IEnumerator CreateReflectorMasks()
		{
			return null;
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x136D688", Offset = "0x136D688", VA = "0x136D688", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x136D9C0", Offset = "0x136D9C0", VA = "0x136D9C0")]
		public static float ClosestAlphaOnSegmentToLine(Vector3 segA, Vector3 segB, Vector3 lineA, Vector3 lineB)
		{
			return default(float);
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x136DCA4", Offset = "0x136DCA4", VA = "0x136DCA4")]
		public static Vector3 RayRayIntersection(Ray rayA, Ray rayB)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x136DF0C", Offset = "0x136DF0C", VA = "0x136DF0C")]
		private void updateSubtractionBackgrounds()
		{
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x136E000", Offset = "0x136E000", VA = "0x136E000")]
		private void createBinaryMasks(byte maskThreshold, bool ANDwithExistingMask = false)
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x136E57C", Offset = "0x136E57C", VA = "0x136E57C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x136E6E8", Offset = "0x136E6E8", VA = "0x136E6E8")]
		private Vector3 triangulate(int j, [Optional] HyperMegaLines drawer)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x136BD98", Offset = "0x136BD98", VA = "0x136BD98")]
		private void calculateImageMetrics(int j)
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x136F288", Offset = "0x136F288", VA = "0x136F288")]
		public WebcamScreenCalibration()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class KeyCodeChildToggle : MonoBehaviour
	{
		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool childrenStartEnabled;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode toggleKey;

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x136758C", Offset = "0x136758C", VA = "0x136758C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x1367618", Offset = "0x1367618", VA = "0x1367618")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x1367700", Offset = "0x1367700", VA = "0x1367700")]
		public KeyCodeChildToggle()
		{
		}
	}
}
namespace Leap.Unity.HyperMegaStuff
{
	[Token(Token = "0x20003B2")]
	[ExecuteInEditMode]
	public class HyperMegaLines : MonoBehaviour
	{
		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HyperMegaLines _drawer;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool allowInBuilds;

		[NonSerialized]
		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool dontClear;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3? _lastLinePos;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] _posBuffer;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color[] _colorBuffer;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _numPositions;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] _idxBuffer;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _numIndices;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Mesh _mesh;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Material _material;

		[Token(Token = "0x17000212")]
		public static HyperMegaLines drawer
		{
			[Token(Token = "0x6001A46")]
			[Address(RVA = "0xF41054", Offset = "0xF41054", VA = "0xF41054")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xF4118C", Offset = "0xF4118C", VA = "0xF4118C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xF411B8", Offset = "0xF411B8", VA = "0xF411B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xF41268", Offset = "0xF41268", VA = "0xF41268")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xF41274", Offset = "0xF41274", VA = "0xF41274")]
		public void DrawLine(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0xF41650", Offset = "0xF41650", VA = "0xF41650")]
		public void DrawRay(Vector3 origin, Vector3 dir)
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0xF4182C", Offset = "0xF4182C", VA = "0xF4182C")]
		public void DrawLines(Vector3[] linePositions)
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0xF418D4", Offset = "0xF418D4", VA = "0xF418D4")]
		public void DrawLines(Vector3[] linePositions, int numPositions)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xF41998", Offset = "0xF41998", VA = "0xF41998")]
		public void DrawLines(IIndexable<Vector3> linePositions)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0xF41C58", Offset = "0xF41C58", VA = "0xF41C58")]
		public void DrawLines(ReadonlyList<Vector3> linePositions)
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0xF414E8", Offset = "0xF414E8", VA = "0xF414E8")]
		private void addLine(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0xF413E4", Offset = "0xF413E4", VA = "0xF413E4")]
		private void appendLinePosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xF41D7C", Offset = "0xF41D7C", VA = "0xF41D7C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xF41E30", Offset = "0xF41E30", VA = "0xF41E30")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xF4211C", Offset = "0xF4211C", VA = "0xF4211C")]
		public HyperMegaLines()
		{
		}
	}
}
namespace Leap.Unity.Interaction
{
	[Token(Token = "0x20003B3")]
	public enum ContactForceMode
	{
		[Token(Token = "0x400162A")]
		Object,
		[Token(Token = "0x400162B")]
		UI
	}
	[Token(Token = "0x20003B4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB45C2C", Offset = "0xB45C2C")]
	public class InteractionBehaviour : MonoBehaviour, IInteractionBehaviour
	{
		[Token(Token = "0x2000627")]
		public enum GraspedMovementType
		{
			[Token(Token = "0x400210A")]
			Inherit,
			[Token(Token = "0x400210B")]
			Kinematic,
			[Token(Token = "0x400210C")]
			Nonkinematic
		}

		[Token(Token = "0x2000628")]
		public enum EventType
		{
			[Token(Token = "0x400210E")]
			HoverBegin = 100,
			[Token(Token = "0x400210F")]
			HoverEnd = 101,
			[Token(Token = "0x4002110")]
			HoverStay = 102,
			[Token(Token = "0x4002111")]
			PerControllerHoverBegin = 110,
			[Token(Token = "0x4002112")]
			PerControllerHoverEnd = 111,
			[Token(Token = "0x4002113")]
			PrimaryHoverBegin = 120,
			[Token(Token = "0x4002114")]
			PrimaryHoverEnd = 121,
			[Token(Token = "0x4002115")]
			PrimaryHoverStay = 122,
			[Token(Token = "0x4002116")]
			PerControllerPrimaryHoverBegin = 130,
			[Token(Token = "0x4002117")]
			PerControllerPrimaryHoverEnd = 132,
			[Token(Token = "0x4002118")]
			GraspBegin = 140,
			[Token(Token = "0x4002119")]
			GraspEnd = 141,
			[Token(Token = "0x400211A")]
			GraspStay = 142,
			[Token(Token = "0x400211B")]
			PerControllerGraspBegin = 150,
			[Token(Token = "0x400211C")]
			PerControllerGraspEnd = 152,
			[Token(Token = "0x400211D")]
			SuspensionBegin = 160,
			[Token(Token = "0x400211E")]
			SuspensionEnd = 161,
			[Token(Token = "0x400211F")]
			ContactBegin = 170,
			[Token(Token = "0x4002120")]
			ContactEnd = 171,
			[Token(Token = "0x4002121")]
			ContactStay = 172,
			[Token(Token = "0x4002122")]
			PerControllerContactBegin = 180,
			[Token(Token = "0x4002123")]
			PerControllerContactEnd = 181
		}

		[Serializable]
		[Token(Token = "0x2000629")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4771C", Offset = "0xB4771C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<InteractionController, bool> <>9__141_0;

			[Token(Token = "0x4002126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<InteractionController, bool> <>9__150_0;

			[Token(Token = "0x4002127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<Collider> <>9__191_0;

			[Token(Token = "0x4002128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action <>9__207_1;

			[Token(Token = "0x4002129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static GraspedMovementEvent <>9__209_0;

			[Token(Token = "0x60028C9")]
			[Address(RVA = "0x13A6730", Offset = "0x13A6730", VA = "0x13A6730")]
			public <>c()
			{
			}

			[Token(Token = "0x60028CA")]
			[Address(RVA = "0x13A6738", Offset = "0x13A6738", VA = "0x13A6738")]
			internal bool <refreshClosestHoveringController>b__141_0(InteractionController controller)
			{
				return default(bool);
			}

			[Token(Token = "0x60028CB")]
			[Address(RVA = "0x13A67C8", Offset = "0x13A67C8", VA = "0x13A67C8")]
			internal bool <refreshClosestPrimaryHoveringController>b__150_0(InteractionController controller)
			{
				return default(bool);
			}

			[Token(Token = "0x60028CC")]
			[Address(RVA = "0x13A6858", Offset = "0x13A6858", VA = "0x13A6858")]
			internal bool <RefreshInteractionColliders>b__191_0(Collider c)
			{
				return default(bool);
			}

			[Token(Token = "0x60028CD")]
			[Address(RVA = "0x13A68E8", Offset = "0x13A68E8", VA = "0x13A68E8")]
			internal void <setupCallback>b__207_1()
			{
			}

			[Token(Token = "0x60028CE")]
			[Address(RVA = "0x13A68EC", Offset = "0x13A68EC", VA = "0x13A68EC")]
			internal void <.ctor>b__209_0(Vector3 preSolvedPos, Quaternion preSolvedRot, Vector3 solvedPos, Quaternion solvedRot, List<InteractionController> graspingControllers)
			{
			}
		}

		[Token(Token = "0x200062A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4772C", Offset = "0xB4772C")]
		private sealed class <>c__DisplayClass207_0
		{
			[Token(Token = "0x400212A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InteractionBehaviour <>4__this;

			[Token(Token = "0x400212B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EventType type;

			[Token(Token = "0x60028CF")]
			[Address(RVA = "0x13A68F0", Offset = "0x13A68F0", VA = "0x13A68F0")]
			public <>c__DisplayClass207_0()
			{
			}

			[Token(Token = "0x60028D0")]
			[Address(RVA = "0x13A68F8", Offset = "0x13A68F8", VA = "0x13A68F8")]
			internal void <setupCallback>b__0()
			{
			}
		}

		[Token(Token = "0x200062B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4773C", Offset = "0xB4773C")]
		private sealed class <>c__DisplayClass208_0<T>
		{
			[Token(Token = "0x400212C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public InteractionBehaviour <>4__this;

			[Token(Token = "0x400212D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EventType type;

			[Token(Token = "0x60028D1")]
			public <>c__DisplayClass208_0()
			{
			}

			[Token(Token = "0x60028D2")]
			internal void <setupCallback>b__0(T h)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200062C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4774C", Offset = "0xB4774C")]
		private sealed class <>c__208<T>
		{
			[Token(Token = "0x400212E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__208<T> <>9;

			[Token(Token = "0x400212F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<T> <>9__208_1;

			[Token(Token = "0x60028D4")]
			public <>c__208()
			{
			}

			[Token(Token = "0x60028D5")]
			internal void <setupCallback>b__208_1(T h)
			{
			}
		}

		[Token(Token = "0x400162C")]
		public const float MAX_ANGULAR_VELOCITY = 100f;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnHoverBegin;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnHoverEnd;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnHoverStay;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<InteractionController> OnPerControllerHoverBegin;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<InteractionController> OnPerControllerHoverEnd;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action OnPrimaryHoverBegin;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action OnPrimaryHoverEnd;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnPrimaryHoverStay;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<InteractionController> OnPerControllerPrimaryHoverBegin;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<InteractionController> OnPerControllerPrimaryHoverEnd;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<InteractionHand> _graspingHandsBuffer;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Pose? latestScheduledGraspPose;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GraspedMovementEvent OnGraspedMovement;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action OnGraspBegin;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action OnGraspEnd;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Action OnGraspStay;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<InteractionController> OnPerControllerGraspBegin;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Action<InteractionController> OnPerControllerGraspEnd;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Action<InteractionController> OnSuspensionBegin;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Action<InteractionController> OnSuspensionEnd;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Action OnContactBegin;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Action OnContactEnd;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Action OnContactStay;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Action<InteractionController> OnPerControllerContactBegin;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Action<InteractionController> OnPerControllerContactEnd;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB509A8", Offset = "0xB509A8")]
		[SerializeField]
		private InteractionManager _manager;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB509F4", Offset = "0xB509F4")]
		private ISpaceComponent <space>k__BackingField;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50A04", Offset = "0xB50A04")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50A04", Offset = "0xB50A04")]
		[SerializeField]
		private IgnoreHoverMode _ignoreHoverMode;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[HideInInspector]
		private bool _isIgnoringAllHoverState;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50AAC", Offset = "0xB50AAC")]
		[SerializeField]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB50AAC", Offset = "0xB50AAC")]
		private bool _ignorePrimaryHover;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x116")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50B78", Offset = "0xB50B78")]
		[SerializeField]
		private bool _ignoreContact;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x117")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50BC4", Offset = "0xB50BC4")]
		[SerializeField]
		private bool _ignoreGrasping;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50C10", Offset = "0xB50C10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50C10", Offset = "0xB50C10")]
		[SerializeField]
		private ContactForceMode _contactForceMode;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50C80", Offset = "0xB50C80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50C80", Offset = "0xB50C80")]
		[SerializeField]
		private bool _allowMultiGrasp;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50CF0", Offset = "0xB50CF0")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB50CF0", Offset = "0xB50CF0")]
		private bool _moveObjectWhenGrasped;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50D60", Offset = "0xB50D60")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB50D60", Offset = "0xB50D60")]
		public GraspedMovementType graspedMovementType;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50E18", Offset = "0xB50E18")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB50E18", Offset = "0xB50E18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50E18", Offset = "0xB50E18")]
		private bool _overrideInteractionLayer;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50EAC", Offset = "0xB50EAC")]
		[SerializeField]
		private SingleLayer _interactionLayer;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB50EF8", Offset = "0xB50EF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50EF8", Offset = "0xB50EF8")]
		private bool _overrideNoContactLayer;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50F68", Offset = "0xB50F68")]
		[SerializeField]
		private SingleLayer _noContactLayer;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private HashSet<InteractionController> _hoveringControllers;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InteractionController _closestHoveringController;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _closestHoveringControllerDistance;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InteractionHand _closestHoveringHand;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private HashSet<InteractionController> _primaryHoveringControllers;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InteractionController _closestPrimaryHoveringController;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InteractionHand _closestPrimaryHoveringHand;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private HashSet<InteractionController> _contactingControllers;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private HashSet<InteractionController> _graspingControllers;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool _wasKinematicBeforeGrasp;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		private bool _justGrasped;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private float _dragBeforeGrasp;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float _angularDragBeforeGrasp;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private IGraspedPoseHandler _graspedPoseHandler;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private KinematicGraspedMovement _lazyKinematicGraspedMovement;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private NonKinematicGraspedMovement _lazyNonKinematicGraspedMovement;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private IThrowHandler _throwHandler;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected InteractionController _suspendingController;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool _appliedForces;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		protected Vector3 _accumulatedLinearAcceleration;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected Vector3 _accumulatedAngularAcceleration;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected List<Collider> _interactionColliders;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int _lastInteractionLayer;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private int _lastNoContactLayer;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private bool _isPositionLocked;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		private EnumEventTable _eventTable;

		[Token(Token = "0x17000213")]
		public bool isHovered
		{
			[Token(Token = "0x6001A55")]
			[Address(RVA = "0xF513F4", Offset = "0xF513F4", VA = "0xF513F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000214")]
		public InteractionController closestHoveringController
		{
			[Token(Token = "0x6001A56")]
			[Address(RVA = "0xF54040", Offset = "0xF54040", VA = "0xF54040")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public Hand closestHoveringHand
		{
			[Token(Token = "0x6001A57")]
			[Address(RVA = "0xF5144C", Offset = "0xF5144C", VA = "0xF5144C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000216")]
		public float closestHoveringControllerDistance
		{
			[Token(Token = "0x6001A58")]
			[Address(RVA = "0xF54048", Offset = "0xF54048", VA = "0xF54048")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000217")]
		public ReadonlyHashSet<InteractionController> hoveringControllers
		{
			[Token(Token = "0x6001A59")]
			[Address(RVA = "0xF54050", Offset = "0xF54050", VA = "0xF54050")]
			get
			{
				return default(ReadonlyHashSet<InteractionController>);
			}
		}

		[Token(Token = "0x17000218")]
		public bool isPrimaryHovered
		{
			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0xF540A0", Offset = "0xF540A0", VA = "0xF540A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000219")]
		public InteractionController primaryHoveringController
		{
			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0xF540F8", Offset = "0xF540F8", VA = "0xF540F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021A")]
		public ReadonlyHashSet<InteractionController> primaryHoveringControllers
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0xF54100", Offset = "0xF54100", VA = "0xF54100")]
			get
			{
				return default(ReadonlyHashSet<InteractionController>);
			}
		}

		[Token(Token = "0x1700021B")]
		public Hand primaryHoveringHand
		{
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0xF54150", Offset = "0xF54150", VA = "0xF54150")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		public Finger primaryHoveringFinger
		{
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0xF541E0", Offset = "0xF541E0", VA = "0xF541E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public Vector3 primaryHoveringControllerPoint
		{
			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0xF54274", Offset = "0xF54274", VA = "0xF54274")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700021E")]
		public float primaryHoverDistance
		{
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0xF54300", Offset = "0xF54300", VA = "0xF54300")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021F")]
		public bool isGrasped
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0xF54340", Offset = "0xF54340", VA = "0xF54340", Slot = "28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000220")]
		public InteractionController graspingController
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0xF54398", Offset = "0xF54398", VA = "0xF54398")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		public ReadonlyHashSet<InteractionController> graspingControllers
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0xF54414", Offset = "0xF54414", VA = "0xF54414")]
			get
			{
				return default(ReadonlyHashSet<InteractionController>);
			}
		}

		[Token(Token = "0x17000222")]
		public ReadonlyHashSet<InteractionHand> graspingHands
		{
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0xF54464", Offset = "0xF54464", VA = "0xF54464")]
			get
			{
				return default(ReadonlyHashSet<InteractionHand>);
			}
		}

		[Token(Token = "0x17000223")]
		public bool isSuspended
		{
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0xF54534", Offset = "0xF54534", VA = "0xF54534", Slot = "32")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000224")]
		public ReadonlyHashSet<InteractionController> contactingControllers
		{
			[Token(Token = "0x6001A68")]
			[Address(RVA = "0xF546C8", Offset = "0xF546C8", VA = "0xF546C8")]
			get
			{
				return default(ReadonlyHashSet<InteractionController>);
			}
		}

		[Token(Token = "0x17000225")]
		public InteractionManager manager
		{
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0xF54934", Offset = "0xF54934", VA = "0xF54934", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0xF5493C", Offset = "0xF5493C", VA = "0xF5493C")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public Rigidbody rigidbody
		{
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0xF54A7C", Offset = "0xF54A7C", VA = "0xF54A7C", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A70")]
			[Address(RVA = "0xF54A84", Offset = "0xF54A84", VA = "0xF54A84")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public ISpaceComponent space
		{
			[Token(Token = "0x6001A71")]
			[Address(RVA = "0xF54A8C", Offset = "0xF54A8C", VA = "0xF54A8C", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EABC", Offset = "0xB5EABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A72")]
			[Address(RVA = "0xF54A94", Offset = "0xF54A94", VA = "0xF54A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EACC", Offset = "0xB5EACC")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public IgnoreHoverMode ignoreHoverMode
		{
			[Token(Token = "0x6001A73")]
			[Address(RVA = "0xF54A9C", Offset = "0xF54A9C", VA = "0xF54A9C", Slot = "10")]
			get
			{
				return default(IgnoreHoverMode);
			}
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0xF54AA4", Offset = "0xF54AA4", VA = "0xF54AA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public bool ignorePrimaryHover
		{
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0xF54D9C", Offset = "0xF54D9C", VA = "0xF54D9C", Slot = "11")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0xF54DA4", Offset = "0xF54DA4", VA = "0xF54DA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public bool ignoreContact
		{
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0xF55078", Offset = "0xF55078", VA = "0xF55078", Slot = "12")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0xF55080", Offset = "0xF55080", VA = "0xF55080")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public bool ignoreGrasping
		{
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0xF55358", Offset = "0xF55358", VA = "0xF55358", Slot = "13")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0xF55360", Offset = "0xF55360", VA = "0xF55360")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public ContactForceMode contactForceMode
		{
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0xF553B0", Offset = "0xF553B0", VA = "0xF553B0")]
			get
			{
				return default(ContactForceMode);
			}
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0xF553B8", Offset = "0xF553B8", VA = "0xF553B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public bool allowMultiGrasp
		{
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0xF553C0", Offset = "0xF553C0", VA = "0xF553C0", Slot = "14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0xF553C8", Offset = "0xF553C8", VA = "0xF553C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public bool moveObjectWhenGrasped
		{
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0xF553D4", Offset = "0xF553D4", VA = "0xF553D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xF553DC", Offset = "0xF553DC", VA = "0xF553DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public bool overrideInteractionLayer
		{
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0xF55538", Offset = "0xF55538", VA = "0xF55538")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A82")]
			[Address(RVA = "0xF55540", Offset = "0xF55540", VA = "0xF55540")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public SingleLayer interactionLayer
		{
			[Token(Token = "0x6001A83")]
			[Address(RVA = "0xF5554C", Offset = "0xF5554C", VA = "0xF5554C", Slot = "15")]
			get
			{
				return default(SingleLayer);
			}
			[Token(Token = "0x6001A84")]
			[Address(RVA = "0xF55554", Offset = "0xF55554", VA = "0xF55554")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public bool overrideNoContactLayer
		{
			[Token(Token = "0x6001A85")]
			[Address(RVA = "0xF5555C", Offset = "0xF5555C", VA = "0xF5555C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0xF55564", Offset = "0xF55564", VA = "0xF55564")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public SingleLayer noContactLayer
		{
			[Token(Token = "0x6001A87")]
			[Address(RVA = "0xF55570", Offset = "0xF55570", VA = "0xF55570", Slot = "16")]
			get
			{
				return default(SingleLayer);
			}
			[Token(Token = "0x6001A88")]
			[Address(RVA = "0xF55578", Offset = "0xF55578", VA = "0xF55578")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public List<Collider> primaryHoverColliders
		{
			[Token(Token = "0x6001A9C")]
			[Address(RVA = "0xF57AEC", Offset = "0xF57AEC", VA = "0xF57AEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000234")]
		public IGraspedPoseHandler graspedPoseHandler
		{
			[Token(Token = "0x6001AA1")]
			[Address(RVA = "0xF554C8", Offset = "0xF554C8", VA = "0xF554C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AA2")]
			[Address(RVA = "0xF57DE0", Offset = "0xF57DE0", VA = "0xF57DE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		private KinematicGraspedMovement _kinematicGraspedMovement
		{
			[Token(Token = "0x6001AA3")]
			[Address(RVA = "0xF57DE8", Offset = "0xF57DE8", VA = "0xF57DE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000236")]
		private NonKinematicGraspedMovement _nonKinematicGraspedMovement
		{
			[Token(Token = "0x6001AA4")]
			[Address(RVA = "0xF57E54", Offset = "0xF57E54", VA = "0xF57E54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000237")]
		public IThrowHandler throwHandler
		{
			[Token(Token = "0x6001AA5")]
			[Address(RVA = "0xF57EC0", Offset = "0xF57EC0", VA = "0xF57EC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0xF57F2C", Offset = "0xF57F2C", VA = "0xF57F2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public bool isPositionLocked
		{
			[Token(Token = "0x6001AB5")]
			[Address(RVA = "0xF58C98", Offset = "0xF58C98", VA = "0xF58C98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xF545A4", Offset = "0xF545A4", VA = "0xF545A4")]
		public bool ReleaseFromGrasp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xF545EC", Offset = "0xF545EC", VA = "0xF545EC")]
		public Vector3 GetGraspPoint(InteractionController intController)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xF54718", Offset = "0xF54718", VA = "0xF54718")]
		public void AddLinearAcceleration(Vector3 acceleration)
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xF547DC", Offset = "0xF547DC", VA = "0xF547DC")]
		public void AddAngularAcceleration(Vector3 acceleration)
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xF548A0", Offset = "0xF548A0", VA = "0xF548A0")]
		public void SetKinematicWithoutGrasp(bool isKinematic)
		{
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xF548F0", Offset = "0xF548F0", VA = "0xF548F0")]
		public bool GetKinematicWithoutGrasp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xF55580", Offset = "0xF55580", VA = "0xF55580", Slot = "35")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xF555F4", Offset = "0xF555F4", VA = "0xF555F4", Slot = "36")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xF5585C", Offset = "0xF5585C", VA = "0xF5585C", Slot = "37")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xF55E28", Offset = "0xF55E28", VA = "0xF55E28", Slot = "38")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xF56094", Offset = "0xF56094", VA = "0xF56094", Slot = "39")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xF563F0", Offset = "0xF563F0", VA = "0xF563F0", Slot = "17")]
		public void FixedUpdateObject()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xF5688C", Offset = "0xF5688C", VA = "0xF5688C", Slot = "40")]
		public virtual float GetHoverDistance(Vector3 worldPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0xF56CAC", Offset = "0xF56CAC", VA = "0xF56CAC", Slot = "19")]
		public void BeginHover(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xF5700C", Offset = "0xF5700C", VA = "0xF5700C", Slot = "20")]
		public void EndHover(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0xF57204", Offset = "0xF57204", VA = "0xF57204", Slot = "21")]
		public void StayHovered(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xF56EA4", Offset = "0xF56EA4", VA = "0xF56EA4")]
		private void refreshClosestHoveringController()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xF57234", Offset = "0xF57234", VA = "0xF57234")]
		private InteractionController getClosestController(HashSet<InteractionController> controllers, out float closestDistance, [Optional] Func<InteractionController, bool> filter)
		{
			return null;
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xF54AB8", Offset = "0xF54AB8", VA = "0xF54AB8")]
		public void ClearHoverTracking(bool onlyInvalidControllers = false)
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xF573E4", Offset = "0xF573E4", VA = "0xF573E4", Slot = "22")]
		public void BeginPrimaryHover(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xF57714", Offset = "0xF57714", VA = "0xF57714", Slot = "23")]
		public void EndPrimaryHover(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xF5790C", Offset = "0xF5790C", VA = "0xF5790C", Slot = "24")]
		public void StayPrimaryHovered(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xF575DC", Offset = "0xF575DC", VA = "0xF575DC")]
		private void refreshClosestPrimaryHoveringController()
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xF5793C", Offset = "0xF5793C", VA = "0xF5793C")]
		private InteractionController getClosestPrimaryHoveringController([Optional] Func<InteractionController, bool> filter)
		{
			return null;
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xF54DB8", Offset = "0xF54DB8", VA = "0xF54DB8")]
		public void ClearPrimaryHoverTracking()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xF57AF4", Offset = "0xF57AF4", VA = "0xF57AF4", Slot = "25")]
		public void BeginContact(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xF57C60", Offset = "0xF57C60", VA = "0xF57C60", Slot = "26")]
		public void EndContact(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xF57DC4", Offset = "0xF57DC4", VA = "0xF57DC4", Slot = "27")]
		public void StayContacted(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xF55094", Offset = "0xF55094", VA = "0xF55094")]
		public void ClearContactTracking()
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xF57F34", Offset = "0xF57F34", VA = "0xF57F34", Slot = "29")]
		public void BeginGrasp(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xF58264", Offset = "0xF58264", VA = "0xF58264", Slot = "30")]
		public void EndGrasp(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xF58638", Offset = "0xF58638", VA = "0xF58638", Slot = "31")]
		public void StayGrasped(List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xF588F8", Offset = "0xF588F8", VA = "0xF588F8", Slot = "41")]
		protected virtual void fixedUpdateGraspedMovement(Pose origPose, Pose newPose, List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xF58A9C", Offset = "0xF58A9C", VA = "0xF58A9C", Slot = "33")]
		public void BeginSuspension(InteractionController controller)
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xF585CC", Offset = "0xF585CC", VA = "0xF585CC", Slot = "34")]
		public void EndSuspension(InteractionController controller)
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xF56600", Offset = "0xF56600", VA = "0xF56600")]
		public void FixedUpdateForces()
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xF55ACC", Offset = "0xF55ACC", VA = "0xF55ACC")]
		public void RefreshInteractionColliders()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xF55C28", Offset = "0xF55C28", VA = "0xF55C28")]
		private void initLayers()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xF58C30", Offset = "0xF58C30", VA = "0xF58C30")]
		private void refreshInteractionLayer()
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xF58C64", Offset = "0xF58C64", VA = "0xF58C64")]
		private void refreshNoContactLayer()
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xF56428", Offset = "0xF56428", VA = "0xF56428")]
		private void fixedUpdateLayers()
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xF55EE0", Offset = "0xF55EE0", VA = "0xF55EE0")]
		private void finalizeLayers()
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xF58B08", Offset = "0xF58B08", VA = "0xF58B08")]
		private void refreshInteractionColliderLayers()
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xF56098", Offset = "0xF56098", VA = "0xF56098")]
		public void RefreshPositionLockedState()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xF55668", Offset = "0xF55668", VA = "0xF55668")]
		private void InitUnityEvents()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xF58CA0", Offset = "0xF58CA0", VA = "0xF58CA0")]
		private void setupCallback(ref Action action, EventType type)
		{
		}

		[Token(Token = "0x6001AB9")]
		private void setupCallback<T>(ref Action<T> action, EventType type)
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xF58E6C", Offset = "0xF58E6C", VA = "0xF58E6C")]
		public InteractionBehaviour()
		{
		}

		[SpecialName]
		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xF59074", Offset = "0xF59074", VA = "0xF59074", Slot = "4")]
		private string Leap.Unity.Interaction.IInteractionBehaviour.get_name()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xF5907C", Offset = "0xF5907C", VA = "0xF5907C", Slot = "5")]
		private GameObject Leap.Unity.Interaction.IInteractionBehaviour.get_gameObject()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xF59084", Offset = "0xF59084", VA = "0xF59084", Slot = "6")]
		private Transform Leap.Unity.Interaction.IInteractionBehaviour.get_transform()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003B5")]
	public class InteractionControllerSet : SerializableHashSet<InteractionController>
	{
		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x13B0F0C", Offset = "0x13B0F0C", VA = "0x13B0F0C")]
		public InteractionControllerSet()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public enum IgnoreHoverMode
	{
		[Token(Token = "0x4001671")]
		None,
		[Token(Token = "0x4001672")]
		Left,
		[Token(Token = "0x4001673")]
		Right,
		[Token(Token = "0x4001674")]
		Both
	}
	[Token(Token = "0x20003B7")]
	public enum ControllerType
	{
		[Token(Token = "0x4001676")]
		Hand,
		[Token(Token = "0x4001677")]
		XRController
	}
	[Token(Token = "0x20003B8")]
	[DisallowMultipleComponent]
	public abstract class InteractionController : MonoBehaviour, IInternalInteractionController
	{
		[Token(Token = "0x200062D")]
		private struct BoneIntObjPair : IEquatable<BoneIntObjPair>
		{
			[Token(Token = "0x4002130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ContactBone bone;

			[Token(Token = "0x4002131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IInteractionBehaviour intObj;

			[Token(Token = "0x60028D6")]
			[Address(RVA = "0x13B0BCC", Offset = "0x13B0BCC", VA = "0x13B0BCC", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60028D7")]
			[Address(RVA = "0x13B0CF8", Offset = "0x13B0CF8", VA = "0x13B0CF8", Slot = "4")]
			public bool Equals(BoneIntObjPair other)
			{
				return default(bool);
			}

			[Token(Token = "0x60028D8")]
			[Address(RVA = "0x13B0D10", Offset = "0x13B0D10", VA = "0x13B0D10")]
			public static bool operator !=(BoneIntObjPair one, BoneIntObjPair other)
			{
				return default(bool);
			}

			[Token(Token = "0x60028D9")]
			[Address(RVA = "0x13B0C60", Offset = "0x13B0C60", VA = "0x13B0C60")]
			public static bool operator ==(BoneIntObjPair one, BoneIntObjPair other)
			{
				return default(bool);
			}

			[Token(Token = "0x60028DA")]
			[Address(RVA = "0x13B0D2C", Offset = "0x13B0D2C", VA = "0x13B0D2C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x200062E")]
		public static class GizmoColors
		{
			[Token(Token = "0x1700044A")]
			public static Color ContactBone
			{
				[Token(Token = "0x60028DB")]
				[Address(RVA = "0x13AFFD8", Offset = "0x13AFFD8", VA = "0x13AFFD8")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x1700044B")]
			public static Color SoftContactBone
			{
				[Token(Token = "0x60028DC")]
				[Address(RVA = "0x13B0074", Offset = "0x13B0074", VA = "0x13B0074")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x1700044C")]
			public static Color HoverPoint
			{
				[Token(Token = "0x60028DD")]
				[Address(RVA = "0x13B01F0", Offset = "0x13B01F0", VA = "0x13B01F0")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x1700044D")]
			public static Color PrimaryHoverPoint
			{
				[Token(Token = "0x60028DE")]
				[Address(RVA = "0x13B028C", Offset = "0x13B028C", VA = "0x13B028C")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x1700044E")]
			public static Color GraspPoint
			{
				[Token(Token = "0x60028DF")]
				[Address(RVA = "0x13B0D80", Offset = "0x13B0D80", VA = "0x13B0D80")]
				get
				{
					return default(Color);
				}
			}

			[Token(Token = "0x1700044F")]
			public static Color Graspable
			{
				[Token(Token = "0x60028E0")]
				[Address(RVA = "0x13B0E70", Offset = "0x13B0E70", VA = "0x13B0E70")]
				get
				{
					return default(Color);
				}
			}
		}

		[Token(Token = "0x200062F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4775C", Offset = "0xB4775C")]
		private sealed class <DelayedDisableSoftContact>d__147 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InteractionController <>4__this;

			[Token(Token = "0x17000450")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60028E4")]
				[Address(RVA = "0x13B0B5C", Offset = "0x13B0B5C", VA = "0x13B0B5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000451")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60028E6")]
				[Address(RVA = "0x13B0BC4", Offset = "0x13B0BC4", VA = "0x13B0BC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60028E1")]
			[Address(RVA = "0x13ADF70", Offset = "0x13ADF70", VA = "0x13ADF70")]
			[DebuggerHidden]
			public <DelayedDisableSoftContact>d__147(int <>1__state)
			{
			}

			[Token(Token = "0x60028E2")]
			[Address(RVA = "0x13B09E4", Offset = "0x13B09E4", VA = "0x13B09E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60028E3")]
			[Address(RVA = "0x13B09E8", Offset = "0x13B09E8", VA = "0x13B09E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60028E5")]
			[Address(RVA = "0x13B0B64", Offset = "0x13B0B64", VA = "0x13B0B64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000630")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4776C", Offset = "0xB4776C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<InteractionBehaviour> <>9__210_0;

			[Token(Token = "0x4002137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<InteractionBehaviour> <>9__210_1;

			[Token(Token = "0x4002138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action<InteractionBehaviour> <>9__210_2;

			[Token(Token = "0x4002139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action <>9__210_3;

			[Token(Token = "0x400213A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Action <>9__210_4;

			[Token(Token = "0x400213B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Action <>9__210_5;

			[Token(Token = "0x60028E8")]
			[Address(RVA = "0x13B09C4", Offset = "0x13B09C4", VA = "0x13B09C4")]
			public <>c()
			{
			}

			[Token(Token = "0x60028E9")]
			[Address(RVA = "0x13B09CC", Offset = "0x13B09CC", VA = "0x13B09CC")]
			internal void <.ctor>b__210_0(InteractionBehaviour intObj)
			{
			}

			[Token(Token = "0x60028EA")]
			[Address(RVA = "0x13B09D0", Offset = "0x13B09D0", VA = "0x13B09D0")]
			internal void <.ctor>b__210_1(InteractionBehaviour intObj)
			{
			}

			[Token(Token = "0x60028EB")]
			[Address(RVA = "0x13B09D4", Offset = "0x13B09D4", VA = "0x13B09D4")]
			internal void <.ctor>b__210_2(InteractionBehaviour intObj)
			{
			}

			[Token(Token = "0x60028EC")]
			[Address(RVA = "0x13B09D8", Offset = "0x13B09D8", VA = "0x13B09D8")]
			internal void <.ctor>b__210_3()
			{
			}

			[Token(Token = "0x60028ED")]
			[Address(RVA = "0x13B09DC", Offset = "0x13B09DC", VA = "0x13B09DC")]
			internal void <.ctor>b__210_4()
			{
			}

			[Token(Token = "0x60028EE")]
			[Address(RVA = "0x13B09E0", Offset = "0x13B09E0", VA = "0x13B09E0")]
			internal void <.ctor>b__210_5()
			{
			}
		}

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50FC4", Offset = "0xB50FC4")]
		public InteractionManager manager;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB50FFC", Offset = "0xB50FFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB50FFC", Offset = "0xB50FFC")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB50FFC", Offset = "0xB50FFC")]
		private bool _hoverEnabled;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51090", Offset = "0xB51090")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB51090", Offset = "0xB51090")]
		private bool _contactEnabled;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51100", Offset = "0xB51100")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB51100", Offset = "0xB51100")]
		private bool _graspingEnabled;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<InteractionBehaviour> OnBeginPrimaryHoveringObject;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<InteractionBehaviour> OnEndPrimaryHoveringObject;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<InteractionBehaviour> OnStayPrimaryHoveringObject;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action OnGraspBegin;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action OnGraspStay;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnGraspEnd;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<InteractionController> _controllerListBuffer;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Func<IInteractionBehaviour, bool> customHoverActivityFilter;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Func<Collider, IInteractionBehaviour> hoverActivityFilter;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Func<int> hoverLayerMaskAccessor;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ActivityManager<IInteractionBehaviour> _hoverActivityManager;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool _primaryHoverLocked;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HashSet<IInteractionBehaviour> _hoveredObjects;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IInteractionBehaviour _primaryHoveredObject;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _primaryHoverDistance;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int _primaryHoverPointIdx;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<IInteractionBehaviour> _perPointPrimaryHovered;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<float> _perPointPrimaryHoverDistance;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private IInteractionBehaviour _primaryHoveredLastFrame;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HashSet<IInteractionBehaviour> _hoveredLastFrame;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private HashSet<IInteractionBehaviour> _hoverEndedBuffer;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private HashSet<IInteractionBehaviour> _hoverBeganBuffer;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<IInteractionBehaviour> _hoverRemovalCache;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private IInteractionBehaviour _primaryHoverEndedObject;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private IInteractionBehaviour _primaryHoverBeganObject;

		[Token(Token = "0x4001695")]
		protected const float DEAD_ZONE_FRACTION = 0.04f;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _softContactDislocationDistance;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PhysicMaterial s_defaultContactBoneMaterial;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool _contactInitialized;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float lastObjectTouchedAdjustedMassMass;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3[] _boneTargetPositions;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion[] _boneTargetRotations;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool _softContactEnabled;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		private bool _disableSoftContactEnqueued;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private IEnumerator _delayedDisableSoftContactCoroutine;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Collider[] _softContactColliderBuffer;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool _notTrackedLastFrame;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Dictionary<BoneIntObjPair, HashSet<Collider>> _softContactCollisions;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private HashSet<IInteractionBehaviour> _contactBehavioursSet;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Dictionary<IInteractionBehaviour, int> _contactBehaviours;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private HashSet<IInteractionBehaviour> _contactBehavioursLastFrame;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private List<IInteractionBehaviour> _contactBehaviourRemovalCache;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private HashSet<IInteractionBehaviour> _contactEndedBuffer;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private HashSet<IInteractionBehaviour> _contactBeganBuffer;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<IInteractionBehaviour> _removeContactObjsBuffer;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private HashSet<IInteractionBehaviour> _contactedObjects;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Func<Collider, IInteractionBehaviour> graspActivityFilter;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Func<int> graspLayerMaskAccessor;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private ActivityManager<IInteractionBehaviour> _graspActivityManager;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private IInteractionBehaviour _graspedObject;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private List<InteractionController> _releasingControllersBuffer;

		[Token(Token = "0x17000239")]
		public bool hoverEnabled
		{
			[Token(Token = "0x6001ABF")]
			[Address(RVA = "0x13A8BCC", Offset = "0x13A8BCC", VA = "0x13A8BCC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001AC0")]
			[Address(RVA = "0x13A8BD4", Offset = "0x13A8BD4", VA = "0x13A8BD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public bool contactEnabled
		{
			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0x13A8FA0", Offset = "0x13A8FA0", VA = "0x13A8FA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0x13A8FA8", Offset = "0x13A8FA8", VA = "0x13A8FA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public bool graspingEnabled
		{
			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0x13A97B0", Offset = "0x13A97B0", VA = "0x13A97B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0x13A97B8", Offset = "0x13A97B8", VA = "0x13A97B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public abstract bool isTracked
		{
			[Token(Token = "0x6001AC5")]
			get;
		}

		[Token(Token = "0x1700023D")]
		public abstract bool isBeingMoved
		{
			[Token(Token = "0x6001AC6")]
			get;
		}

		[Token(Token = "0x1700023E")]
		public abstract bool isLeft
		{
			[Token(Token = "0x6001AC7")]
			get;
		}

		[Token(Token = "0x1700023F")]
		public bool isRight
		{
			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0x13A9938", Offset = "0x13A9938", VA = "0x13A9938")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000240")]
		public abstract Vector3 position
		{
			[Token(Token = "0x6001AC9")]
			get;
		}

		[Token(Token = "0x17000241")]
		public abstract Quaternion rotation
		{
			[Token(Token = "0x6001ACA")]
			get;
		}

		[Token(Token = "0x17000242")]
		public abstract Vector3 velocity
		{
			[Token(Token = "0x6001ACB")]
			get;
		}

		[Token(Token = "0x17000243")]
		public abstract ControllerType controllerType
		{
			[Token(Token = "0x6001ACC")]
			get;
		}

		[Token(Token = "0x17000244")]
		public abstract InteractionHand intHand
		{
			[Token(Token = "0x6001ACD")]
			get;
		}

		[Token(Token = "0x17000245")]
		public float scale
		{
			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0x13A9960", Offset = "0x13A9960", VA = "0x13A9960")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000246")]
		public ActivityManager<IInteractionBehaviour> hoverActivityManager
		{
			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0x13AAE34", Offset = "0x13AAE34", VA = "0x13AAE34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000247")]
		public bool primaryHoverLocked
		{
			[Token(Token = "0x6001AD9")]
			[Address(RVA = "0x13AAF64", Offset = "0x13AAF64", VA = "0x13AAF64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001ADA")]
			[Address(RVA = "0x13AAF6C", Offset = "0x13AAF6C", VA = "0x13AAF6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public abstract Vector3 hoverPoint
		{
			[Token(Token = "0x6001ADC")]
			get;
		}

		[Token(Token = "0x17000249")]
		public ReadonlyHashSet<IInteractionBehaviour> hoveredObjects
		{
			[Token(Token = "0x6001ADD")]
			[Address(RVA = "0x13AAF78", Offset = "0x13AAF78", VA = "0x13AAF78")]
			get
			{
				return default(ReadonlyHashSet<IInteractionBehaviour>);
			}
		}

		[Token(Token = "0x1700024A")]
		protected abstract List<Transform> _primaryHoverPoints
		{
			[Token(Token = "0x6001ADE")]
			get;
		}

		[Token(Token = "0x1700024B")]
		public ReadonlyList<Transform> primaryHoverPoints
		{
			[Token(Token = "0x6001ADF")]
			[Address(RVA = "0x13AAFC8", Offset = "0x13AAFC8", VA = "0x13AAFC8")]
			get
			{
				return default(ReadonlyList<Transform>);
			}
		}

		[Token(Token = "0x1700024C")]
		public bool isPrimaryHovering
		{
			[Token(Token = "0x6001AE0")]
			[Address(RVA = "0x13AB028", Offset = "0x13AB028", VA = "0x13AB028")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024D")]
		public IInteractionBehaviour primaryHoveredObject
		{
			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0x13AB038", Offset = "0x13AB038", VA = "0x13AB038")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024E")]
		public float primaryHoverDistance
		{
			[Token(Token = "0x6001AE2")]
			[Address(RVA = "0x13AB040", Offset = "0x13AB040", VA = "0x13AB040")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700024F")]
		public Vector3 primaryHoveringPoint
		{
			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0x13AB048", Offset = "0x13AB048", VA = "0x13AB048")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000250")]
		public int primaryHoveringPointIndex
		{
			[Token(Token = "0x6001AE4")]
			[Address(RVA = "0x13AB10C", Offset = "0x13AB10C", VA = "0x13AB10C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000251")]
		public ReadonlyHashSet<IInteractionBehaviour> contactingObjects
		{
			[Token(Token = "0x6001AF6")]
			[Address(RVA = "0x13AC64C", Offset = "0x13AC64C", VA = "0x13AC64C")]
			get
			{
				return default(ReadonlyHashSet<IInteractionBehaviour>);
			}
		}

		[Token(Token = "0x17000252")]
		protected float softContactDislocationDistance
		{
			[Token(Token = "0x6001AF7")]
			[Address(RVA = "0x13AC69C", Offset = "0x13AC69C", VA = "0x13AC69C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0x13AC6A4", Offset = "0x13AC6A4", VA = "0x13AC6A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		protected static PhysicMaterial defaultContactBoneMaterial
		{
			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0x13AC6AC", Offset = "0x13AC6AC", VA = "0x13AC6AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000254")]
		protected bool _wasContactInitialized
		{
			[Token(Token = "0x6001AFB")]
			[Address(RVA = "0x13AC840", Offset = "0x13AC840", VA = "0x13AC840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000255")]
		public abstract ContactBone[] contactBones
		{
			[Token(Token = "0x6001AFC")]
			get;
		}

		[Token(Token = "0x17000256")]
		protected abstract GameObject contactBoneParent
		{
			[Token(Token = "0x6001AFD")]
			get;
		}

		[Token(Token = "0x17000257")]
		public bool softContactEnabled
		{
			[Token(Token = "0x6001B04")]
			[Address(RVA = "0x13ADE14", Offset = "0x13ADE14", VA = "0x13ADE14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000258")]
		public bool isGraspingObject
		{
			[Token(Token = "0x6001B19")]
			[Address(RVA = "0x13AEB80", Offset = "0x13AEB80", VA = "0x13AEB80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000259")]
		public IInteractionBehaviour graspedObject
		{
			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0x13AEB90", Offset = "0x13AEB90", VA = "0x13AEB90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025A")]
		public ReadonlyHashSet<IInteractionBehaviour> graspCandidates
		{
			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0x13AEB98", Offset = "0x13AEB98", VA = "0x13AEB98")]
			get
			{
				return default(ReadonlyHashSet<IInteractionBehaviour>);
			}
		}

		[Token(Token = "0x1700025B")]
		public abstract List<Vector3> graspManipulatorPoints
		{
			[Token(Token = "0x6001B1C")]
			get;
		}

		[Token(Token = "0x1700025C")]
		private ActivityManager<IInteractionBehaviour> graspActivityManager
		{
			[Token(Token = "0x6001B22")]
			[Address(RVA = "0x13AEBF8", Offset = "0x13AEBF8", VA = "0x13AEBF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x13A9984", Offset = "0x13A9984", VA = "0x13A9984", Slot = "27")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x13A9A14", Offset = "0x13A9A14", VA = "0x13A9A14", Slot = "28")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x13A9A44", Offset = "0x13A9A44", VA = "0x13A9A44", Slot = "29")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x13A9C04", Offset = "0x13A9C04", VA = "0x13A9C04", Slot = "30")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x13A9D5C", Offset = "0x13A9D5C", VA = "0x13A9D5C", Slot = "4")]
		private void Leap.Unity.Interaction.IInternalInteractionController.FixedUpdateController()
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x13AA994", Offset = "0x13AA994", VA = "0x13AA994")]
		public void NotifyObjectUnregistered(IInteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001AD5")]
		protected abstract void onObjectUnregistered(IInteractionBehaviour intObj);

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x13AAC9C", Offset = "0x13AAC9C", VA = "0x13AAC9C", Slot = "32")]
		protected virtual void fixedUpdateController()
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x13AACA0", Offset = "0x13AACA0", VA = "0x13AACA0")]
		private IInteractionBehaviour hoverFilterFunc(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x13A7FB0", Offset = "0x13A7FB0", VA = "0x13A7FB0")]
		public void LockPrimaryHover(InteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x13A9DC0", Offset = "0x13A9DC0", VA = "0x13A9DC0")]
		private void fixedUpdateHovering()
		{
		}

		[Token(Token = "0x6001AE6")]
		protected abstract void unwarpColliders(Transform primaryHoverPoint, ISpaceComponent warpedSpaceElement);

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x13AB124", Offset = "0x13AB124", VA = "0x13AB124")]
		private void refreshHoverState(HashSet<IInteractionBehaviour> hoverCandidates)
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x13ABA14", Offset = "0x13ABA14", VA = "0x13ABA14")]
		private void processPrimaryHover(IInteractionBehaviour behaviour, float maxNewPrimaryHoverDistance)
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x13A8BE8", Offset = "0x13A8BE8", VA = "0x13A8BE8")]
		public void ClearHoverTracking()
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x13AA9D8", Offset = "0x13AA9D8", VA = "0x13AA9D8")]
		public void ClearHoverTrackingForObject(IInteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x13AB5EC", Offset = "0x13AB5EC", VA = "0x13AB5EC")]
		private void refreshHoverStateBuffers()
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x13ABF1C", Offset = "0x13ABF1C", VA = "0x13ABF1C", Slot = "5")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckHoverEnd(out HashSet<IInteractionBehaviour> hoverEndedObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x13ABF88", Offset = "0x13ABF88", VA = "0x13ABF88", Slot = "6")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckHoverBegin(out HashSet<IInteractionBehaviour> hoverBeganObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x13ABFF4", Offset = "0x13ABFF4", VA = "0x13ABFF4", Slot = "7")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckHoverStay(out HashSet<IInteractionBehaviour> hoveredObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x13A9C4C", Offset = "0x13A9C4C", VA = "0x13A9C4C")]
		public void ClearPrimaryHoverTracking()
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x13AB9DC", Offset = "0x13AB9DC", VA = "0x13AB9DC")]
		private void refreshPrimaryHoverStateBuffers()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x13AC05C", Offset = "0x13AC05C", VA = "0x13AC05C", Slot = "8")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckPrimaryHoverEnd(out IInteractionBehaviour primaryHoverEndedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x13AC118", Offset = "0x13AC118", VA = "0x13AC118", Slot = "9")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckPrimaryHoverBegin(out IInteractionBehaviour primaryHoverBeganObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x13AC1D4", Offset = "0x13AC1D4", VA = "0x13AC1D4", Slot = "10")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckPrimaryHoverStay(out IInteractionBehaviour primaryHoveredObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x13ABCF8", Offset = "0x13ABCF8", VA = "0x13ABCF8")]
		public static float GetHoverDistance(Vector3 hoverPoint, IInteractionBehaviour behaviour)
		{
			return default(float);
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x13AC288", Offset = "0x13AC288", VA = "0x13AC288")]
		public static Vector3 TransformPoint(Vector3 worldPoint, ISpaceComponent element)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x13AC740", Offset = "0x13AC740", VA = "0x13AC740")]
		private static void initDefaultContactBoneMaterial()
		{
		}

		[Token(Token = "0x6001AFE")]
		protected abstract bool initContact();

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x13AC848", Offset = "0x13AC848", VA = "0x13AC848")]
		private void finishInitContact()
		{
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x13AA31C", Offset = "0x13AA31C", VA = "0x13AA31C")]
		private void fixedUpdateContact()
		{
		}

		[Token(Token = "0x6001B01")]
		protected abstract void getColliderBoneTargetPositionRotation(int contactBoneIndex, out Vector3 targetPosition, out Quaternion targetRotation);

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0x13ACAAC", Offset = "0x13ACAAC", VA = "0x13ACAAC")]
		private void normalizeBoneMasses()
		{
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x13ACC18", Offset = "0x13ACC18", VA = "0x13ACC18")]
		private void updateContactBone(int contactBoneIndex, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x13AD3F0", Offset = "0x13AD3F0", VA = "0x13AD3F0")]
		private void fixedUpdateSoftContact()
		{
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x13ADEF8", Offset = "0x13ADEF8", VA = "0x13ADEF8", Slot = "40")]
		protected virtual void onPreEnableSoftContact()
		{
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x13ADEFC", Offset = "0x13ADEFC", VA = "0x13ADEFC", Slot = "41")]
		protected virtual void onPostDisableSoftContact()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x13A95B0", Offset = "0x13A95B0", VA = "0x13A95B0")]
		public void EnableSoftContact()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x13ADE1C", Offset = "0x13ADE1C", VA = "0x13ADE1C")]
		public void DisableSoftContact()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x13ADF00", Offset = "0x13ADF00", VA = "0x13ADF00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5EADC", Offset = "0xB5EADC")]
		private IEnumerator DelayedDisableSoftContact()
		{
			return null;
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x13ADF9C", Offset = "0x13ADF9C", VA = "0x13ADF9C")]
		public void NotifySoftContactCollisionEnter(ContactBone bone, IInteractionBehaviour intObj, Collider collider)
		{
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x13AE0A0", Offset = "0x13AE0A0", VA = "0x13AE0A0")]
		public void NotifySoftContactCollisionExit(ContactBone bone, IInteractionBehaviour intObj, Collider collider)
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x13AE1E8", Offset = "0x13AE1E8", VA = "0x13AE1E8")]
		public void NotifyContactBoneCollisionEnter(ContactBone contactBone, IInteractionBehaviour interactionObj)
		{
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x13AE2C8", Offset = "0x13AE2C8", VA = "0x13AE2C8")]
		public void NotifyContactBoneCollisionStay(ContactBone contactBone, IInteractionBehaviour interactionObj)
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x13AE37C", Offset = "0x13AE37C", VA = "0x13AE37C")]
		public void NotifyContactBoneCollisionExit(ContactBone contactBone, IInteractionBehaviour interactionObj)
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x13A9074", Offset = "0x13A9074", VA = "0x13A9074")]
		public void ClearContactTracking()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x13AAB2C", Offset = "0x13AAB2C", VA = "0x13AAB2C")]
		public void ClearContactTrackingForObject(IInteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x13AD5F4", Offset = "0x13AD5F4", VA = "0x13AD5F4")]
		private void fixedUpdateContactState()
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x13AE524", Offset = "0x13AE524", VA = "0x13AE524", Slot = "11")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckContactEnd(out HashSet<IInteractionBehaviour> contactEndedObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x13AE944", Offset = "0x13AE944", VA = "0x13AE944", Slot = "12")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckContactBegin(out HashSet<IInteractionBehaviour> contactBeganObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x13AE9B0", Offset = "0x13AE9B0", VA = "0x13AE9B0", Slot = "13")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckContactStay(out HashSet<IInteractionBehaviour> contactedObjects)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x13A8FEC", Offset = "0x13A8FEC", VA = "0x13A8FEC")]
		private void disableContactBoneCollision()
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x13AEAF8", Offset = "0x13AEAF8", VA = "0x13AEAF8")]
		private void enableContactBoneCollision()
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x13A9444", Offset = "0x13A9444", VA = "0x13A9444")]
		private void resetContactBonePose()
		{
		}

		[Token(Token = "0x6001B1D")]
		public abstract Vector3 GetGraspPoint();

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x13AED14", Offset = "0x13AED14", VA = "0x13AED14")]
		public bool TryGrasp(IInteractionBehaviour intObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x13AED6C", Offset = "0x13AED6C", VA = "0x13AED6C", Slot = "44")]
		public virtual void SwapGrasp(IInteractionBehaviour replacement)
		{
		}

		[Token(Token = "0x6001B20")]
		protected abstract bool checkShouldGraspAtemporal(IInteractionBehaviour intObj);

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x13AF12C", Offset = "0x13AF12C", VA = "0x13AF12C")]
		private IInteractionBehaviour graspFilterFunc(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x13AA7CC", Offset = "0x13AA7CC", VA = "0x13AA7CC")]
		private void fixedUpdateGrasping()
		{
		}

		[Token(Token = "0x6001B24")]
		protected abstract void fixedUpdateGraspingState();

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x13AF28C", Offset = "0x13AF28C", VA = "0x13AF28C", Slot = "47")]
		protected virtual void onGraspedObjectForciblyReleased(IInteractionBehaviour objectToBeReleased)
		{
		}

		[Token(Token = "0x6001B26")]
		protected abstract bool checkShouldGrasp(out IInteractionBehaviour objectToGrasp);

		[Token(Token = "0x6001B27")]
		protected abstract bool checkShouldRelease(out IInteractionBehaviour objectToRelease);

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x13A97F4", Offset = "0x13A97F4", VA = "0x13A97F4")]
		public bool ReleaseGrasp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x13AF290", Offset = "0x13AF290", VA = "0x13AF290")]
		public static void ReleaseGrasps(IInteractionBehaviour graspedObj, ReadonlyHashSet<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x13AF98C", Offset = "0x13AF98C", VA = "0x13AF98C")]
		public bool ReleaseGrasp(out IInteractionBehaviour releasedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x13AF998", Offset = "0x13AF998", VA = "0x13AF998")]
		public bool ReleaseObject(IInteractionBehaviour toRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x13AF9C8", Offset = "0x13AF9C8", VA = "0x13AF9C8", Slot = "14")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckGraspEnd(out IInteractionBehaviour releasedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x13AFAFC", Offset = "0x13AFAFC", VA = "0x13AFAFC", Slot = "15")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckGraspBegin(out IInteractionBehaviour newlyGraspedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x13AFB64", Offset = "0x13AFB64", VA = "0x13AFB64", Slot = "16")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckGraspHold(out IInteractionBehaviour graspedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x13AFBA8", Offset = "0x13AFBA8", VA = "0x13AFBA8", Slot = "17")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckSuspensionBegin(out IInteractionBehaviour suspendedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x13AFCA8", Offset = "0x13AFCA8", VA = "0x13AFCA8", Slot = "18")]
		private bool Leap.Unity.Interaction.IInternalInteractionController.CheckSuspensionEnd(out IInteractionBehaviour resumedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x13AFDA8", Offset = "0x13AFDA8", VA = "0x13AFDA8", Slot = "50")]
		public virtual void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x13B0110", Offset = "0x13B0110", VA = "0x13B0110")]
		protected static void drawHoverPoint(RuntimeGizmoDrawer drawer, Vector3 pos)
		{
		}

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x13B0180", Offset = "0x13B0180", VA = "0x13B0180")]
		protected static void drawPrimaryHoverPoint(RuntimeGizmoDrawer drawer, Vector3 pos)
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x13B0378", Offset = "0x13B0378", VA = "0x13B0378")]
		protected InteractionController()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public enum HandDataMode
	{
		[Token(Token = "0x40016B0")]
		PlayerLeft,
		[Token(Token = "0x40016B1")]
		PlayerRight,
		[Token(Token = "0x40016B2")]
		Custom
	}
	[Token(Token = "0x20003BA")]
	[DisallowMultipleComponent]
	public class InteractionHand : InteractionController
	{
		[Token(Token = "0x2000631")]
		private delegate void BoneMapFunc(Hand hand, out Vector3 targetPosition, out Quaternion targetRotation);

		[Serializable]
		[Token(Token = "0x2000632")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4777C", Offset = "0xB4777C")]
		private sealed class <>c
		{
			[Token(Token = "0x400213C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400213D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Hand, bool> <>9__18_2;

			[Token(Token = "0x400213E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Frame, Hand> <>9__18_0;

			[Token(Token = "0x400213F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<Hand, bool> <>9__18_3;

			[Token(Token = "0x4002140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<Frame, Hand> <>9__18_1;

			[Token(Token = "0x4002141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static BoneMapFunc <>9__68_1;

			[Token(Token = "0x60028F4")]
			[Address(RVA = "0x13B4BBC", Offset = "0x13B4BBC", VA = "0x13B4BBC")]
			public <>c()
			{
			}

			[Token(Token = "0x60028F5")]
			[Address(RVA = "0x13B4BC4", Offset = "0x13B4BC4", VA = "0x13B4BC4")]
			internal Hand <Start>b__18_0(Frame frame)
			{
				return null;
			}

			[Token(Token = "0x60028F6")]
			[Address(RVA = "0x13B4D08", Offset = "0x13B4D08", VA = "0x13B4D08")]
			internal bool <Start>b__18_2(Hand hand)
			{
				return default(bool);
			}

			[Token(Token = "0x60028F7")]
			[Address(RVA = "0x13B4D20", Offset = "0x13B4D20", VA = "0x13B4D20")]
			internal Hand <Start>b__18_1(Frame frame)
			{
				return null;
			}

			[Token(Token = "0x60028F8")]
			[Address(RVA = "0x13B4E64", Offset = "0x13B4E64", VA = "0x13B4E64")]
			internal bool <Start>b__18_3(Hand hand)
			{
				return default(bool);
			}

			[Token(Token = "0x60028F9")]
			[Address(RVA = "0x13B4E80", Offset = "0x13B4E80", VA = "0x13B4E80")]
			internal void <initContactBones>b__68_1(Hand hand, out Vector3 targetPosition, out Quaternion targetRotation)
			{
			}
		}

		[Token(Token = "0x2000633")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4778C", Offset = "0xB4778C")]
		private sealed class <>c__DisplayClass68_0
		{
			[Token(Token = "0x4002142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int fingerIndexCopy;

			[Token(Token = "0x4002143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int jointIndexCopy;

			[Token(Token = "0x60028FA")]
			[Address(RVA = "0x13B3AA8", Offset = "0x13B3AA8", VA = "0x13B3AA8")]
			public <>c__DisplayClass68_0()
			{
			}

			[Token(Token = "0x60028FB")]
			[Address(RVA = "0x13B4EE4", Offset = "0x13B4EE4", VA = "0x13B4EE4")]
			internal void <initContactBones>b__0(Hand hand, out Vector3 targetPosition, out Quaternion targetRotation)
			{
			}
		}

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private LeapProvider _leapProvider;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51180", Offset = "0xB51180")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51180", Offset = "0xB51180")]
		[SerializeField]
		[EditTimeOnly]
		private HandDataMode _handDataMode;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool[] enabledPrimaryHoverFingertips;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Func<Frame, Hand> _handAccessorFunc;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Hand _handData;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Hand _unwarpedHandData;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Hand _hand;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Transform headTransform;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private bool _lastCustomHandWasLeft;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Transform _backingHoverPointTransform;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<Transform> _backingFingertipTransforms;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<Transform> _fingertipTransforms;

		[Token(Token = "0x40016BF")]
		private const int NUM_FINGERS = 5;

		[Token(Token = "0x40016C0")]
		private const int BONES_PER_FINGER = 3;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private ContactBone[] _contactBones;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private GameObject _contactBoneParent;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private BoneMapFunc[] _handContactBoneMapFunctions;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private List<Vector3> _graspManipulatorPoints;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private HeuristicGrabClassifier _grabClassifier;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3[] _fingertipPositionsBuffer;

		[Token(Token = "0x1700025D")]
		public HandDataMode handDataMode
		{
			[Token(Token = "0x6001B35")]
			[Address(RVA = "0x13B0F5C", Offset = "0x13B0F5C", VA = "0x13B0F5C")]
			get
			{
				return default(HandDataMode);
			}
			[Token(Token = "0x6001B36")]
			[Address(RVA = "0x13B0F64", Offset = "0x13B0F64", VA = "0x13B0F64")]
			set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public LeapProvider leapProvider
		{
			[Token(Token = "0x6001B37")]
			[Address(RVA = "0x13B0F6C", Offset = "0x13B0F6C", VA = "0x13B0F6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B38")]
			[Address(RVA = "0x13B0F74", Offset = "0x13B0F74", VA = "0x13B0F74")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public Func<Frame, Hand> handAccessorFunc
		{
			[Token(Token = "0x6001B39")]
			[Address(RVA = "0x13B10F4", Offset = "0x13B10F4", VA = "0x13B10F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0x13B10FC", Offset = "0x13B10FC", VA = "0x13B10FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public override bool isTracked
		{
			[Token(Token = "0x6001B3F")]
			[Address(RVA = "0x13B1798", Offset = "0x13B1798", VA = "0x13B1798", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000261")]
		public override bool isBeingMoved
		{
			[Token(Token = "0x6001B40")]
			[Address(RVA = "0x13B17A8", Offset = "0x13B17A8", VA = "0x13B17A8", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000262")]
		public Hand leapHand
		{
			[Token(Token = "0x6001B41")]
			[Address(RVA = "0x13B17B8", Offset = "0x13B17B8", VA = "0x13B17B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000263")]
		public override bool isLeft
		{
			[Token(Token = "0x6001B42")]
			[Address(RVA = "0x13B17C0", Offset = "0x13B17C0", VA = "0x13B17C0", Slot = "21")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000264")]
		public override Vector3 position
		{
			[Token(Token = "0x6001B43")]
			[Address(RVA = "0x13B17F0", Offset = "0x13B17F0", VA = "0x13B17F0", Slot = "22")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000265")]
		public override Quaternion rotation
		{
			[Token(Token = "0x6001B44")]
			[Address(RVA = "0x13B1814", Offset = "0x13B1814", VA = "0x13B1814", Slot = "23")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000266")]
		public override Vector3 velocity
		{
			[Token(Token = "0x6001B45")]
			[Address(RVA = "0x13B1838", Offset = "0x13B1838", VA = "0x13B1838", Slot = "24")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000267")]
		public override ControllerType controllerType
		{
			[Token(Token = "0x6001B46")]
			[Address(RVA = "0x13B18D8", Offset = "0x13B18D8", VA = "0x13B18D8", Slot = "25")]
			get
			{
				return default(ControllerType);
			}
		}

		[Token(Token = "0x17000268")]
		public override InteractionHand intHand
		{
			[Token(Token = "0x6001B47")]
			[Address(RVA = "0x13B18E0", Offset = "0x13B18E0", VA = "0x13B18E0", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		public override Vector3 hoverPoint
		{
			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0x13B1DD0", Offset = "0x13B1DD0", VA = "0x13B1DD0", Slot = "33")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700026A")]
		protected override List<Transform> _primaryHoverPoints
		{
			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0x13B1E78", Offset = "0x13B1E78", VA = "0x13B1E78", Slot = "34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026B")]
		public override ContactBone[] contactBones
		{
			[Token(Token = "0x6001B50")]
			[Address(RVA = "0x13B24D8", Offset = "0x13B24D8", VA = "0x13B24D8", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026C")]
		protected override GameObject contactBoneParent
		{
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0x13B24E0", Offset = "0x13B24E0", VA = "0x13B24E0", Slot = "37")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026D")]
		public override List<Vector3> graspManipulatorPoints
		{
			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0x13B4544", Offset = "0x13B4544", VA = "0x13B4544", Slot = "42")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		public HeuristicGrabClassifier grabClassifier
		{
			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0x13B1914", Offset = "0x13B1914", VA = "0x13B1914")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x13B1104", Offset = "0x13B1104", VA = "0x13B1104", Slot = "27")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x13B117C", Offset = "0x13B117C", VA = "0x13B117C", Slot = "29")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x13B15E8", Offset = "0x13B15E8", VA = "0x13B15E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x13B16C4", Offset = "0x13B16C4", VA = "0x13B16C4")]
		private void onProviderFixedFrame(Frame frame)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x13B18E4", Offset = "0x13B18E4", VA = "0x13B18E4", Slot = "31")]
		protected override void onObjectUnregistered(IInteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x13B19E4", Offset = "0x13B19E4", VA = "0x13B19E4", Slot = "32")]
		protected override void fixedUpdateController()
		{
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x13B176C", Offset = "0x13B176C", VA = "0x13B176C")]
		private void refreshPointDataFromHand()
		{
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x13B1E80", Offset = "0x13B1E80", VA = "0x13B1E80")]
		private void refreshHoverPoint()
		{
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x13B1EF4", Offset = "0x13B1EF4", VA = "0x13B1EF4")]
		private void refreshPrimaryHoverPoints()
		{
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x13B2208", Offset = "0x13B2208", VA = "0x13B2208", Slot = "35")]
		protected override void unwarpColliders(Transform primaryHoverPoint, ISpaceComponent warpedSpaceElement)
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x13B24E8", Offset = "0x13B24E8", VA = "0x13B24E8", Slot = "39")]
		protected override void getColliderBoneTargetPositionRotation(int contactBoneIndex, out Vector3 targetPosition, out Quaternion targetRotation)
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x13B29FC", Offset = "0x13B29FC", VA = "0x13B29FC", Slot = "38")]
		protected override bool initContact()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x13B32A8", Offset = "0x13B32A8", VA = "0x13B32A8", Slot = "40")]
		protected override void onPreEnableSoftContact()
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x13B3A68", Offset = "0x13B3A68", VA = "0x13B3A68", Slot = "41")]
		protected override void onPostDisableSoftContact()
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x13B2A48", Offset = "0x13B2A48", VA = "0x13B2A48")]
		private void initContactBoneContainer()
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x13B2AFC", Offset = "0x13B2AFC", VA = "0x13B2AFC")]
		private void initContactBones()
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x13B3AC0", Offset = "0x13B3AC0", VA = "0x13B3AC0")]
		private ContactBone initContactBone(Bone bone, GameObject contactBoneObj, int boneArrayIndex, Collider boneCollider)
		{
			return null;
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x13B3D8C", Offset = "0x13B3D8C", VA = "0x13B3D8C")]
		private void addContactBoneJoints()
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x13B32AC", Offset = "0x13B32AC", VA = "0x13B32AC")]
		private void resetContactBoneJoints()
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x13B4120", Offset = "0x13B4120", VA = "0x13B4120")]
		public void FillBones(Hand inHand)
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x13B20D0", Offset = "0x13B20D0", VA = "0x13B20D0")]
		private void refreshGraspManipulatorPoints()
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x13B454C", Offset = "0x13B454C", VA = "0x13B454C", Slot = "43")]
		public override Vector3 GetGraspPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x13B473C", Offset = "0x13B473C", VA = "0x13B473C", Slot = "45")]
		protected override bool checkShouldGraspAtemporal(IInteractionBehaviour intObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x13B4918", Offset = "0x13B4918", VA = "0x13B4918", Slot = "44")]
		public override void SwapGrasp(IInteractionBehaviour replacement)
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x13B4964", Offset = "0x13B4964", VA = "0x13B4964", Slot = "46")]
		protected override void fixedUpdateGraspingState()
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x13B4994", Offset = "0x13B4994", VA = "0x13B4994", Slot = "47")]
		protected override void onGraspedObjectForciblyReleased(IInteractionBehaviour objectToBeReleased)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x13B49C4", Offset = "0x13B49C4", VA = "0x13B49C4", Slot = "49")]
		protected override bool checkShouldRelease(out IInteractionBehaviour objectToRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x13B49F4", Offset = "0x13B49F4", VA = "0x13B49F4", Slot = "48")]
		protected override bool checkShouldGrasp(out IInteractionBehaviour objectToGrasp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x13B4A24", Offset = "0x13B4A24", VA = "0x13B4A24")]
		public InteractionHand()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	public class InteractionManager : MonoBehaviour, IInternalInteractionManager, IRuntimeGizmoComponent
	{
		[Token(Token = "0x2000634")]
		private delegate bool StateChangeCheckFunc(InteractionController controller, out IInteractionBehaviour obj);

		[Token(Token = "0x2000635")]
		private delegate bool MultiStateChangeCheckFunc(InteractionController controller, out HashSet<IInteractionBehaviour> objs);

		[Serializable]
		[Token(Token = "0x2000636")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4779C", Offset = "0xB4779C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static StateChangeCheckFunc <>9__55_0;

			[Token(Token = "0x4002146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__55_1;

			[Token(Token = "0x4002147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static MultiStateChangeCheckFunc <>9__56_0;

			[Token(Token = "0x4002148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__56_1;

			[Token(Token = "0x4002149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static StateChangeCheckFunc <>9__57_0;

			[Token(Token = "0x400214A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__57_1;

			[Token(Token = "0x400214B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static MultiStateChangeCheckFunc <>9__58_0;

			[Token(Token = "0x400214C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__58_1;

			[Token(Token = "0x400214D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static MultiStateChangeCheckFunc <>9__59_0;

			[Token(Token = "0x400214E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__59_1;

			[Token(Token = "0x400214F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static StateChangeCheckFunc <>9__60_0;

			[Token(Token = "0x4002150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__60_1;

			[Token(Token = "0x4002151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static MultiStateChangeCheckFunc <>9__61_0;

			[Token(Token = "0x4002152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__61_1;

			[Token(Token = "0x4002153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public static StateChangeCheckFunc <>9__62_0;

			[Token(Token = "0x4002154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__62_1;

			[Token(Token = "0x4002155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public static MultiStateChangeCheckFunc <>9__63_0;

			[Token(Token = "0x4002156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__63_1;

			[Token(Token = "0x4002157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public static StateChangeCheckFunc <>9__64_0;

			[Token(Token = "0x4002158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__64_1;

			[Token(Token = "0x4002159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public static MultiStateChangeCheckFunc <>9__65_0;

			[Token(Token = "0x400215A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__65_1;

			[Token(Token = "0x400215B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public static StateChangeCheckFunc <>9__66_0;

			[Token(Token = "0x400215C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public static Action<IInteractionBehaviour, List<InteractionController>> <>9__66_1;

			[Token(Token = "0x400215D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public static Action <>9__101_0;

			[Token(Token = "0x400215E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public static Action <>9__101_1;

			[Token(Token = "0x400215F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public static Action <>9__101_2;

			[Token(Token = "0x6002905")]
			[Address(RVA = "0x13BA1A0", Offset = "0x13BA1A0", VA = "0x13BA1A0")]
			public <>c()
			{
			}

			[Token(Token = "0x6002906")]
			[Address(RVA = "0x13BA1A8", Offset = "0x13BA1A8", VA = "0x13BA1A8")]
			internal bool <checkEndingGrasps>b__55_0(InteractionController maybeReleasingController, out IInteractionBehaviour maybeReleasedObject)
			{
				return default(bool);
			}

			[Token(Token = "0x6002907")]
			[Address(RVA = "0x13BA268", Offset = "0x13BA268", VA = "0x13BA268")]
			internal void <checkEndingGrasps>b__55_1(IInteractionBehaviour releasedObject, List<InteractionController> releasingIntControllers)
			{
			}

			[Token(Token = "0x6002908")]
			[Address(RVA = "0x13BA328", Offset = "0x13BA328", VA = "0x13BA328")]
			internal bool <checkEndingContacts>b__56_0(InteractionController maybeEndedContactingController, out HashSet<IInteractionBehaviour> endContactedObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x6002909")]
			[Address(RVA = "0x13BA3E8", Offset = "0x13BA3E8", VA = "0x13BA3E8")]
			internal void <checkEndingContacts>b__56_1(IInteractionBehaviour endContactedObject, List<InteractionController> endContactedIntControllers)
			{
			}

			[Token(Token = "0x600290A")]
			[Address(RVA = "0x13BA4A8", Offset = "0x13BA4A8", VA = "0x13BA4A8")]
			internal bool <checkEndingPrimaryHovers>b__57_0(InteractionController maybeEndedPrimaryHoveringController, out IInteractionBehaviour endPrimaryHoveredObject)
			{
				return default(bool);
			}

			[Token(Token = "0x600290B")]
			[Address(RVA = "0x13BA568", Offset = "0x13BA568", VA = "0x13BA568")]
			internal void <checkEndingPrimaryHovers>b__57_1(IInteractionBehaviour endPrimaryHoveredObject, List<InteractionController> noLongerPrimaryHoveringControllers)
			{
			}

			[Token(Token = "0x600290C")]
			[Address(RVA = "0x13BA628", Offset = "0x13BA628", VA = "0x13BA628")]
			internal bool <checkEndingHovers>b__58_0(InteractionController maybeEndedHoveringController, out HashSet<IInteractionBehaviour> endHoveredObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x600290D")]
			[Address(RVA = "0x13BA6E8", Offset = "0x13BA6E8", VA = "0x13BA6E8")]
			internal void <checkEndingHovers>b__58_1(IInteractionBehaviour endHoveredObject, List<InteractionController> endHoveringIntControllers)
			{
			}

			[Token(Token = "0x600290E")]
			[Address(RVA = "0x13BA7A8", Offset = "0x13BA7A8", VA = "0x13BA7A8")]
			internal bool <checkBeginningHovers>b__59_0(InteractionController maybeBeganHoveringController, out HashSet<IInteractionBehaviour> beganHoveredObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x600290F")]
			[Address(RVA = "0x13BA868", Offset = "0x13BA868", VA = "0x13BA868")]
			internal void <checkBeginningHovers>b__59_1(IInteractionBehaviour beganHoveredObject, List<InteractionController> beganHoveringIntControllers)
			{
			}

			[Token(Token = "0x6002910")]
			[Address(RVA = "0x13BA928", Offset = "0x13BA928", VA = "0x13BA928")]
			internal bool <checkBeginningPrimaryHovers>b__60_0(InteractionController maybeBeganPrimaryHoveringController, out IInteractionBehaviour primaryHoveredObject)
			{
				return default(bool);
			}

			[Token(Token = "0x6002911")]
			[Address(RVA = "0x13BA9E8", Offset = "0x13BA9E8", VA = "0x13BA9E8")]
			internal void <checkBeginningPrimaryHovers>b__60_1(IInteractionBehaviour newlyPrimaryHoveredObject, List<InteractionController> beganPrimaryHoveringControllers)
			{
			}

			[Token(Token = "0x6002912")]
			[Address(RVA = "0x13BAAA8", Offset = "0x13BAAA8", VA = "0x13BAAA8")]
			internal bool <checkBeginningContacts>b__61_0(InteractionController maybeBeganContactingController, out HashSet<IInteractionBehaviour> beganContactedObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x6002913")]
			[Address(RVA = "0x13BAB68", Offset = "0x13BAB68", VA = "0x13BAB68")]
			internal void <checkBeginningContacts>b__61_1(IInteractionBehaviour beganContactedObject, List<InteractionController> beganContactingIntControllers)
			{
			}

			[Token(Token = "0x6002914")]
			[Address(RVA = "0x13BAC28", Offset = "0x13BAC28", VA = "0x13BAC28")]
			internal bool <checkBeginningGrasps>b__62_0(InteractionController maybeBeganGraspingController, out IInteractionBehaviour graspedObject)
			{
				return default(bool);
			}

			[Token(Token = "0x6002915")]
			[Address(RVA = "0x13BACE8", Offset = "0x13BACE8", VA = "0x13BACE8")]
			internal void <checkBeginningGrasps>b__62_1(IInteractionBehaviour newlyGraspedObject, List<InteractionController> beganGraspingIntControllers)
			{
			}

			[Token(Token = "0x6002916")]
			[Address(RVA = "0x13BADA8", Offset = "0x13BADA8", VA = "0x13BADA8")]
			internal bool <checkSustainingHovers>b__63_0(InteractionController maybeSustainedHoveringController, out HashSet<IInteractionBehaviour> hoveredObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x6002917")]
			[Address(RVA = "0x13BAE68", Offset = "0x13BAE68", VA = "0x13BAE68")]
			internal void <checkSustainingHovers>b__63_1(IInteractionBehaviour hoveredObject, List<InteractionController> hoveringIntControllers)
			{
			}

			[Token(Token = "0x6002918")]
			[Address(RVA = "0x13BAF28", Offset = "0x13BAF28", VA = "0x13BAF28")]
			internal bool <checkSustainingPrimaryHovers>b__64_0(InteractionController maybeSustainedPrimaryHoveringController, out IInteractionBehaviour primaryHoveredObject)
			{
				return default(bool);
			}

			[Token(Token = "0x6002919")]
			[Address(RVA = "0x13BAFE8", Offset = "0x13BAFE8", VA = "0x13BAFE8")]
			internal void <checkSustainingPrimaryHovers>b__64_1(IInteractionBehaviour primaryHoveredObject, List<InteractionController> primaryHoveringControllers)
			{
			}

			[Token(Token = "0x600291A")]
			[Address(RVA = "0x13BB0A8", Offset = "0x13BB0A8", VA = "0x13BB0A8")]
			internal bool <checkSustainingContacts>b__65_0(InteractionController maybeSustainedContactingController, out HashSet<IInteractionBehaviour> contactedObjects)
			{
				return default(bool);
			}

			[Token(Token = "0x600291B")]
			[Address(RVA = "0x13BB168", Offset = "0x13BB168", VA = "0x13BB168")]
			internal void <checkSustainingContacts>b__65_1(IInteractionBehaviour contactedObject, List<InteractionController> contactingIntControllers)
			{
			}

			[Token(Token = "0x600291C")]
			[Address(RVA = "0x13BB228", Offset = "0x13BB228", VA = "0x13BB228")]
			internal bool <checkSustainingGrasps>b__66_0(InteractionController maybeSustainedGraspingController, out IInteractionBehaviour graspedObject)
			{
				return default(bool);
			}

			[Token(Token = "0x600291D")]
			[Address(RVA = "0x13BB2E8", Offset = "0x13BB2E8", VA = "0x13BB2E8")]
			internal void <checkSustainingGrasps>b__66_1(IInteractionBehaviour contactedObject, List<InteractionController> contactingIntControllers)
			{
			}

			[Token(Token = "0x600291E")]
			[Address(RVA = "0x13BB3A8", Offset = "0x13BB3A8", VA = "0x13BB3A8")]
			internal void <.ctor>b__101_0()
			{
			}

			[Token(Token = "0x600291F")]
			[Address(RVA = "0x13BB3AC", Offset = "0x13BB3AC", VA = "0x13BB3AC")]
			internal void <.ctor>b__101_1()
			{
			}

			[Token(Token = "0x6002920")]
			[Address(RVA = "0x13BB3B0", Offset = "0x13BB3B0", VA = "0x13BB3B0")]
			internal void <.ctor>b__101_2()
			{
			}
		}

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InteractionControllerSet _interactionControllers;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51210", Offset = "0xB51210")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51210", Offset = "0xB51210")]
		public float hoverActivationRadius;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51280", Offset = "0xB51280")]
		public float touchActivationRadius;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB512B8", Offset = "0xB512B8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB512B8", Offset = "0xB512B8")]
		[SerializeField]
		[EditTimeOnly]
		protected bool _autoGenerateLayers;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51338", Offset = "0xB51338")]
		[SerializeField]
		protected SingleLayer _templateLayer;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51384", Offset = "0xB51384")]
		[SerializeField]
		protected SingleLayer _interactionLayer;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB513D0", Offset = "0xB513D0")]
		[SerializeField]
		protected SingleLayer _interactionNoContactLayer;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5141C", Offset = "0xB5141C")]
		[SerializeField]
		protected SingleLayer _contactBoneLayer;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51468", Offset = "0xB51468")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51468", Offset = "0xB51468")]
		private bool _drawControllerRuntimeGizmos;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action OnGraphicalUpdate;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action OnPrePhysicalUpdate;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnPostPhysicalUpdate;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _scale;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HashSet<IInteractionBehaviour> _interactionObjects;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<Rigidbody, IInteractionBehaviour> _interactionObjectBodies;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<Rigidbody, ContactBone> _contactBoneBodies;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractionManager s_instance;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HashSet<InteractionController> _activeControllersBuffer;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HashSet<InteractionController> _hoverControllersBuffer;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HashSet<InteractionController> _contactControllersBuffer;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HashSet<InteractionController> _graspingControllersBuffer;

		[Token(Token = "0x40016DC")]
		[ThreadStatic]
		private static Dictionary<IInteractionBehaviour, List<InteractionController>> s_objControllersMap;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _prevPosition;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion _prevRotation;

		[NonSerialized]
		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<PhysicsUtility.SoftContact> _softContacts;

		[NonSerialized]
		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Dictionary<Rigidbody, PhysicsUtility.Velocities> _softContactOriginalVelocities;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<PhysicsUtility.SoftContact> _softContactsToDraw;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Dictionary<SingleLayer, HashSet<IInteractionBehaviour>> _intObjInteractionLayers;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Dictionary<SingleLayer, HashSet<IInteractionBehaviour>> _intObjNoContactLayers;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _interactionLayerMask;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool[] _contactBoneIgnoreCollisionLayers;

		[Token(Token = "0x1700026F")]
		public ReadonlyHashSet<InteractionController> interactionControllers
		{
			[Token(Token = "0x6001B67")]
			[Address(RVA = "0x13B50AC", Offset = "0x13B50AC", VA = "0x13B50AC")]
			get
			{
				return default(ReadonlyHashSet<InteractionController>);
			}
		}

		[Token(Token = "0x17000270")]
		public bool autoGenerateLayers
		{
			[Token(Token = "0x6001B68")]
			[Address(RVA = "0x13B50FC", Offset = "0x13B50FC", VA = "0x13B50FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000271")]
		public SingleLayer templateLayer
		{
			[Token(Token = "0x6001B69")]
			[Address(RVA = "0x13B5104", Offset = "0x13B5104", VA = "0x13B5104")]
			get
			{
				return default(SingleLayer);
			}
		}

		[Token(Token = "0x17000272")]
		public SingleLayer interactionLayer
		{
			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0x13B510C", Offset = "0x13B510C", VA = "0x13B510C")]
			get
			{
				return default(SingleLayer);
			}
		}

		[Token(Token = "0x17000273")]
		public SingleLayer interactionNoContactLayer
		{
			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0x13B5114", Offset = "0x13B5114", VA = "0x13B5114")]
			get
			{
				return default(SingleLayer);
			}
		}

		[Token(Token = "0x17000274")]
		public SingleLayer contactBoneLayer
		{
			[Token(Token = "0x6001B6C")]
			[Address(RVA = "0x13B511C", Offset = "0x13B511C", VA = "0x13B511C")]
			get
			{
				return default(SingleLayer);
			}
		}

		[Token(Token = "0x17000275")]
		public float WorldHoverActivationRadius
		{
			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0x13AB114", Offset = "0x13AB114", VA = "0x13AB114")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000276")]
		public float WorldTouchActivationRadius
		{
			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0x13B5124", Offset = "0x13B5124", VA = "0x13B5124")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000277")]
		public float SimulationScale
		{
			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0x13B5134", Offset = "0x13B5134", VA = "0x13B5134")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000278")]
		public ReadonlyHashSet<IInteractionBehaviour> interactionObjects
		{
			[Token(Token = "0x6001B70")]
			[Address(RVA = "0x13B513C", Offset = "0x13B513C", VA = "0x13B513C")]
			get
			{
				return default(ReadonlyHashSet<IInteractionBehaviour>);
			}
		}

		[Token(Token = "0x17000279")]
		public Dictionary<Rigidbody, IInteractionBehaviour> interactionObjectBodies
		{
			[Token(Token = "0x6001B71")]
			[Address(RVA = "0x13AADC0", Offset = "0x13AADC0", VA = "0x13AADC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027A")]
		public Dictionary<Rigidbody, ContactBone> contactBoneBodies
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0x13A8364", Offset = "0x13A8364", VA = "0x13A8364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		public static InteractionManager instance
		{
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x13A9AE4", Offset = "0x13A9AE4", VA = "0x13A9AE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0x13B518C", Offset = "0x13B518C", VA = "0x13B518C")]
			set
			{
			}
		}

		[Token(Token = "0x1700027C")]
		public bool hasMovingFrameOfReference
		{
			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0x13AD9D8", Offset = "0x13AD9D8", VA = "0x13AD9D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x13B51F8", Offset = "0x13B51F8", VA = "0x13B51F8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x13B55D4", Offset = "0x13B55D4", VA = "0x13B55D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x13B57BC", Offset = "0x13B57BC", VA = "0x13B57BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x13B59DC", Offset = "0x13B59DC", VA = "0x13B59DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x13B59E0", Offset = "0x13B59E0", VA = "0x13B59E0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x13B69A0", Offset = "0x13B69A0", VA = "0x13B69A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x13B5E6C", Offset = "0x13B5E6C", VA = "0x13B5E6C")]
		private void fixedUpdateInteractionControllers()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x13B69BC", Offset = "0x13B69BC", VA = "0x13B69BC")]
		private void checkEndingGrasps(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x13B6B30", Offset = "0x13B6B30", VA = "0x13B6B30")]
		private void checkEndingContacts(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x13B6CA4", Offset = "0x13B6CA4", VA = "0x13B6CA4")]
		private void checkEndingPrimaryHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x13B6E18", Offset = "0x13B6E18", VA = "0x13B6E18")]
		private void checkEndingHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x13B6F8C", Offset = "0x13B6F8C", VA = "0x13B6F8C")]
		private void checkBeginningHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x13B7100", Offset = "0x13B7100", VA = "0x13B7100")]
		private void checkBeginningPrimaryHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x13B7274", Offset = "0x13B7274", VA = "0x13B7274")]
		private void checkBeginningContacts(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x13B73E8", Offset = "0x13B73E8", VA = "0x13B73E8")]
		private void checkBeginningGrasps(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x13B755C", Offset = "0x13B755C", VA = "0x13B755C")]
		private void checkSustainingHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x13B76D0", Offset = "0x13B76D0", VA = "0x13B76D0")]
		private void checkSustainingPrimaryHovers(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x13B7844", Offset = "0x13B7844", VA = "0x13B7844")]
		private void checkSustainingContacts(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x13B79B8", Offset = "0x13B79B8", VA = "0x13B79B8")]
		private void checkSustainingGrasps(ReadonlyHashSet<InteractionController> interactionControllers)
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x13B7B3C", Offset = "0x13B7B3C", VA = "0x13B7B3C")]
		private void remapInteractionObjectStateChecks(ReadonlyHashSet<InteractionController> controllers, StateChangeCheckFunc stateCheckFunc, Action<IInteractionBehaviour, List<InteractionController>> actionPerInteractionObject)
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x13B7FBC", Offset = "0x13B7FBC", VA = "0x13B7FBC")]
		private void remapMultiInteractionObjectStateChecks(ReadonlyHashSet<InteractionController> controllers, MultiStateChangeCheckFunc multiObjectStateCheckFunc, Action<IInteractionBehaviour, List<InteractionController>> actionPerInteractionObject)
		{
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x13B8D94", Offset = "0x13B8D94", VA = "0x13B8D94")]
		public void RegisterInteractionBehaviour(IInteractionBehaviour interactionObj)
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x13B8E98", Offset = "0x13B8E98", VA = "0x13B8E98")]
		public bool UnregisterInteractionBehaviour(IInteractionBehaviour interactionObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x13B9198", Offset = "0x13B9198", VA = "0x13B9198")]
		public bool IsBehaviourRegistered(IInteractionBehaviour interactionObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x13B6790", Offset = "0x13B6790", VA = "0x13B6790")]
		private void updateMovingFrameOfReferenceSupport()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x13B1B48", Offset = "0x13B1B48", VA = "0x13B1B48")]
		public void TransformAheadByFixedUpdate(Vector3 position, Quaternion rotation, out Vector3 newPosition, out Quaternion newRotation)
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x13ADBC4", Offset = "0x13ADBC4", VA = "0x13ADBC4")]
		public void TransformAheadByFixedUpdate(Vector3 position, out Vector3 newPosition)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x13B53BC", Offset = "0x13B53BC", VA = "0x13B53BC")]
		private void refreshInteractionControllers()
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x13B5234", Offset = "0x13B5234", VA = "0x13B5234")]
		protected void generateAutomaticLayers()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x13B5714", Offset = "0x13B5714", VA = "0x13B5714")]
		private void setupAutomaticCollisionLayers()
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x13B9200", Offset = "0x13B9200", VA = "0x13B9200")]
		public int GetInteractionLayerMask()
		{
			return default(int);
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x13B9208", Offset = "0x13B9208", VA = "0x13B9208")]
		private void refreshInteractionLayerMask()
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x13B67EC", Offset = "0x13B67EC", VA = "0x13B67EC")]
		private void autoUpdateContactBoneLayerCollision()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x13B9404", Offset = "0x13B9404", VA = "0x13B9404", Slot = "8")]
		private void Leap.Unity.Interaction.IInternalInteractionManager.RefreshLayersNow()
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x13B9408", Offset = "0x13B9408", VA = "0x13B9408", Slot = "4")]
		private void Leap.Unity.Interaction.IInternalInteractionManager.NotifyIntObjAddedInteractionLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x13B9560", Offset = "0x13B9560", VA = "0x13B9560", Slot = "5")]
		private void Leap.Unity.Interaction.IInternalInteractionManager.NotifyIntObjRemovedInteractionLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x13B9620", Offset = "0x13B9620", VA = "0x13B9620", Slot = "6")]
		private void Leap.Unity.Interaction.IInternalInteractionManager.NotifyIntObjAddedNoContactLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x13B9778", Offset = "0x13B9778", VA = "0x13B9778", Slot = "7")]
		private void Leap.Unity.Interaction.IInternalInteractionManager.NotifyIntObjRemovedNoContactLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately)
		{
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x13B9838", Offset = "0x13B9838", VA = "0x13B9838", Slot = "9")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x13B9CAC", Offset = "0x13B9CAC", VA = "0x13B9CAC")]
		public InteractionManager()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	[DisallowMultipleComponent]
	public class InteractionXRController : InteractionController
	{
		[Token(Token = "0x2000637")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477AC", Offset = "0xB477AC")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x4002160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string[] controllerSupportTokens;

			[Token(Token = "0x6002921")]
			[Address(RVA = "0x1096454", Offset = "0x1096454", VA = "0x1096454")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x6002922")]
			[Address(RVA = "0x1098B50", Offset = "0x1098B50", VA = "0x1098B50")]
			internal bool <RefreshControllerConnection>b__1(string joystick)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000638")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477BC", Offset = "0xB477BC")]
		private sealed class <>c__DisplayClass32_1
		{
			[Token(Token = "0x4002161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string joystick;

			[Token(Token = "0x6002923")]
			[Address(RVA = "0x1098C3C", Offset = "0x1098C3C", VA = "0x1098C3C")]
			public <>c__DisplayClass32_1()
			{
			}

			[Token(Token = "0x6002924")]
			[Address(RVA = "0x1098C44", Offset = "0x1098C44", VA = "0x1098C44")]
			internal bool <RefreshControllerConnection>b__2(string token)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000639")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477CC", Offset = "0xB477CC")]
		private sealed class <>c
		{
			[Token(Token = "0x4002162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, string> <>9__32_0;

			[Token(Token = "0x6002926")]
			[Address(RVA = "0x1098B2C", Offset = "0x1098B2C", VA = "0x1098B2C")]
			public <>c()
			{
			}

			[Token(Token = "0x6002927")]
			[Address(RVA = "0x1098B34", Offset = "0x1098B34", VA = "0x1098B34")]
			internal string <RefreshControllerConnection>b__32_0(string s)
			{
				return null;
			}
		}

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB514E8", Offset = "0xB514E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB514E8", Offset = "0xB514E8")]
		[Disable]
		[SerializeField]
		private string _trackingProviderType;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51568", Offset = "0xB51568")]
		[SerializeField]
		[EditTimeOnly]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB51568", Offset = "0xB51568")]
		private string _deviceJoystickTokens;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB515E8", Offset = "0xB515E8")]
		[SerializeField]
		[EditTimeOnly]
		private Chirality _chirality;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51644", Offset = "0xB51644")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB51644", Offset = "0xB51644")]
		private bool _pollConnection;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB516B4", Offset = "0xB516B4")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB516B4", Offset = "0xB516B4")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB516B4", Offset = "0xB516B4")]
		public float pollConnectionInterval;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51780", Offset = "0xB51780")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51780", Offset = "0xB51780")]
		[SerializeField]
		private Transform _hoverPoint;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB517F0", Offset = "0xB517F0")]
		[SerializeField]
		public new List<Transform> primaryHoverPoints;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5183C", Offset = "0xB5183C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5183C", Offset = "0xB5183C")]
		public Transform graspPoint;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public float maxGraspDistance;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5189C", Offset = "0xB5189C")]
		public string graspButtonAxis;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB518D4", Offset = "0xB518D4")]
		public float graspTimingSlop;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5190C", Offset = "0xB5190C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5190C", Offset = "0xB5190C")]
		[SerializeField]
		private List<GameObject> _enableObjectsOnlyWhenTracked;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool _isJoystickDetected;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private float _pollTimer;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private bool _hasTrackedPositionLastFrame;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector3 _trackedPositionLastFrame;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Quaternion _trackedRotationLastFrame;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private IXRControllerTrackingProvider _backingTrackingProvider;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private IXRControllerTrackingProvider _backingDefaultTrackingProvider;

		[Token(Token = "0x40016F9")]
		private const float RIG_LOCAL_MOVEMENT_SPEED_THRESHOLD = 0.07f;

		[Token(Token = "0x40016FA")]
		private const float RIG_LOCAL_MOVEMENT_SPEED_THRESHOLD_SQR = 0.0049f;

		[Token(Token = "0x40016FB")]
		private const float RIG_LOCAL_ROTATION_SPEED_THRESHOLD = 10f;

		[Token(Token = "0x40016FC")]
		private const float BEING_MOVED_TIMEOUT = 0.5f;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private float _lastTimeMoved;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private bool _isBeingMoved;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Vector3 _pivotingPositionOffset;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private Vector3 _unwarpingPositionOffset;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Quaternion _unwarpingRotationOffset;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Vector3[] _contactBoneLocalPositions;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Quaternion[] _contactBoneLocalRotations;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3[] _contactBoneTargetPositions;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private Quaternion[] _contactBoneTargetRotations;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private ContactBone[] _contactBones;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private GameObject _contactBoneParent;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private List<ContactBone> _contactBoneBuffer;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private List<Collider> _colliderBuffer;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public Func<float> graspAxisOverride;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private float _graspDepressedValue;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private float _graspReleasedValue;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private List<Vector3> _graspManipulatorPointsBuffer;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private IInteractionBehaviour _closestGraspableObject;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private bool _graspButtonLastFrame;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B9")]
		private bool _graspButtonDown;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BA")]
		private bool _graspButtonUp;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private float _graspButtonDownSlopTimer;

		[Token(Token = "0x1700027D")]
		public bool isUsingCustomTracking
		{
			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x10956AC", Offset = "0x10956AC", VA = "0x10956AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027E")]
		public string deviceJoystickTokens
		{
			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0x1095770", Offset = "0x1095770", VA = "0x1095770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		public Chirality chirality
		{
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0x1095778", Offset = "0x1095778", VA = "0x1095778")]
			get
			{
				return default(Chirality);
			}
		}

		[Token(Token = "0x17000280")]
		public bool pollConnection
		{
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0x1095780", Offset = "0x1095780", VA = "0x1095780")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0x1095788", Offset = "0x1095788", VA = "0x1095788")]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public List<GameObject> enableObjectsOnlyWhenTracked
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0x1095794", Offset = "0x1095794", VA = "0x1095794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000282")]
		public bool isJoystickDetected
		{
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0x10961B0", Offset = "0x10961B0", VA = "0x10961B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000283")]
		public IXRControllerTrackingProvider trackingProvider
		{
			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0x1095740", Offset = "0x1095740", VA = "0x1095740")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0x109590C", Offset = "0x109590C", VA = "0x109590C")]
			set
			{
			}
		}

		[Token(Token = "0x17000284")]
		private IXRControllerTrackingProvider _defaultTrackingProvider
		{
			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0x10958DC", Offset = "0x10958DC", VA = "0x10958DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0x1096544", Offset = "0x1096544", VA = "0x1096544")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public override bool isTracked
		{
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0x10969D0", Offset = "0x10969D0", VA = "0x10969D0", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000286")]
		public override bool isBeingMoved
		{
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0x1096AB4", Offset = "0x1096AB4", VA = "0x1096AB4", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000287")]
		public XRNode xrNode
		{
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0x109654C", Offset = "0x109654C", VA = "0x109654C")]
			get
			{
				return default(XRNode);
			}
		}

		[Token(Token = "0x17000288")]
		public override bool isLeft
		{
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0x1096ABC", Offset = "0x1096ABC", VA = "0x1096ABC", Slot = "21")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000289")]
		public override Vector3 position
		{
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0x1096ACC", Offset = "0x1096ACC", VA = "0x1096ACC", Slot = "22")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700028A")]
		public override Quaternion rotation
		{
			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0x1096AF0", Offset = "0x1096AF0", VA = "0x1096AF0", Slot = "23")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700028B")]
		public override Vector3 velocity
		{
			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0x1096B14", Offset = "0x1096B14", VA = "0x1096B14", Slot = "24")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700028C")]
		public override ControllerType controllerType
		{
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0x1096C4C", Offset = "0x1096C4C", VA = "0x1096C4C", Slot = "25")]
			get
			{
				return default(ControllerType);
			}
		}

		[Token(Token = "0x1700028D")]
		public override InteractionHand intHand
		{
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0x1096C54", Offset = "0x1096C54", VA = "0x1096C54", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		public override Vector3 hoverPoint
		{
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0x1096C60", Offset = "0x1096C60", VA = "0x1096C60", Slot = "33")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700028F")]
		protected override List<Transform> _primaryHoverPoints
		{
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0x1096D18", Offset = "0x1096D18", VA = "0x1096D18", Slot = "34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		public override ContactBone[] contactBones
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0x1096F90", Offset = "0x1096F90", VA = "0x1096F90", Slot = "36")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000291")]
		protected override GameObject contactBoneParent
		{
			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0x1096F98", Offset = "0x1096F98", VA = "0x1096F98", Slot = "37")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		public float graspDepressedValue
		{
			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0x1097878", Offset = "0x1097878", VA = "0x1097878")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0x1097880", Offset = "0x1097880", VA = "0x1097880")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		public float graspReleasedValue
		{
			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0x1097888", Offset = "0x1097888", VA = "0x1097888")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0x1097890", Offset = "0x1097890", VA = "0x1097890")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public override List<Vector3> graspManipulatorPoints
		{
			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0x1097898", Offset = "0x1097898", VA = "0x1097898", Slot = "42")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x1095808", Offset = "0x1095808", VA = "0x1095808", Slot = "27")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x1095ABC", Offset = "0x1095ABC", VA = "0x1095ABC", Slot = "51")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x1095B10", Offset = "0x1095B10", VA = "0x1095B10", Slot = "29")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x1095C20", Offset = "0x1095C20", VA = "0x1095C20", Slot = "32")]
		protected override void fixedUpdateController()
		{
		}

		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x1095DF4", Offset = "0x1095DF4", VA = "0x1095DF4")]
		private void fixedUpdatePollConnection()
		{
		}

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0x10961F0", Offset = "0x10961F0", VA = "0x10961F0")]
		public void RefreshControllerConnection()
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x109645C", Offset = "0x109645C", VA = "0x109645C")]
		private void refreshDefaultTrackingProvider()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x1096560", Offset = "0x1096560", VA = "0x1096560")]
		private void refreshControllerTrackingData(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x10966C8", Offset = "0x10966C8", VA = "0x10966C8")]
		private void refreshIsBeingMoved(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x1096C5C", Offset = "0x1096C5C", VA = "0x1096C5C", Slot = "31")]
		protected override void onObjectUnregistered(IInteractionBehaviour intObj)
		{
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x1096D20", Offset = "0x1096D20", VA = "0x1096D20", Slot = "35")]
		protected override void unwarpColliders(Transform primaryHoverPoint, ISpaceComponent warpedSpaceElement)
		{
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x1096FA0", Offset = "0x1096FA0", VA = "0x1096FA0", Slot = "38")]
		protected override bool initContact()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0x1095E6C", Offset = "0x1095E6C", VA = "0x1095E6C")]
		private void refreshContactBoneTargets(bool useUnwarpingData = false)
		{
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x1097678", Offset = "0x1097678", VA = "0x1097678")]
		private void moveControllerTransform(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x109711C", Offset = "0x109711C", VA = "0x109711C")]
		private void initContactBones()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x1097808", Offset = "0x1097808", VA = "0x1097808", Slot = "39")]
		protected override void getColliderBoneTargetPositionRotation(int contactBoneIndex, out Vector3 targetPosition, out Quaternion targetRotation)
		{
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x1097B0C", Offset = "0x1097B0C", VA = "0x1097B0C", Slot = "43")]
		public override Vector3 GetGraspPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x1097B38", Offset = "0x1097B38", VA = "0x1097B38", Slot = "46")]
		protected override void fixedUpdateGraspingState()
		{
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x1097B60", Offset = "0x1097B60", VA = "0x1097B60")]
		private void refreshClosestGraspableObject()
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x1097D48", Offset = "0x1097D48", VA = "0x1097D48")]
		private void fixedUpdateGraspButtonState(bool ignoreTemporal = false)
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x10982F0", Offset = "0x10982F0", VA = "0x10982F0", Slot = "48")]
		protected override bool checkShouldGrasp(out IInteractionBehaviour objectToGrasp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x109835C", Offset = "0x109835C", VA = "0x109835C", Slot = "45")]
		protected override bool checkShouldGraspAtemporal(IInteractionBehaviour intObj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x1098594", Offset = "0x1098594", VA = "0x1098594", Slot = "49")]
		protected override bool checkShouldRelease(out IInteractionBehaviour objectToRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x10985EC", Offset = "0x10985EC", VA = "0x10985EC", Slot = "50")]
		public override void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x1098908", Offset = "0x1098908", VA = "0x1098908")]
		public InteractionXRController()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45CF8", Offset = "0xB45CF8")]
	public class ContactBone : MonoBehaviour
	{
		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionController interactionController;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rigidbody;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Collider collider;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionHand interactionHand;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FixedJoint joint;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FixedJoint metacarpalJoint;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 lastTargetPosition;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float _lastObjectTouchedAdjustedMass;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<IInteractionBehaviour, float> contactingInteractionBehaviours;

		[Token(Token = "0x17000295")]
		public float width
		{
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0xF51B1C", Offset = "0xF51B1C", VA = "0xF51B1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xF51E00", Offset = "0xF51E00", VA = "0xF51E00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xF51E74", Offset = "0xF51E74", VA = "0xF51E74")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xF51EE4", Offset = "0xF51EE4", VA = "0xF51EE4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xF52124", Offset = "0xF52124", VA = "0xF52124")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xF5233C", Offset = "0xF5233C", VA = "0xF5233C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xF5247C", Offset = "0xF5247C", VA = "0xF5247C")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xF5259C", Offset = "0xF5259C", VA = "0xF5259C")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xF526BC", Offset = "0xF526BC", VA = "0xF526BC")]
		public ContactBone()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class ContactBoneParent : MonoBehaviour
	{
		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionController controller;

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xF5272C", Offset = "0xF5272C", VA = "0xF5272C")]
		public ContactBoneParent()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class DefaultXRNodeTrackingProvider : MonoBehaviour, IXRControllerTrackingProvider
	{
		[Serializable]
		[Token(Token = "0x200063A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477DC", Offset = "0xB477DC")]
		private sealed class <>c
		{
			[Token(Token = "0x4002164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<Vector3, Quaternion> <>9__13_0;

			[Token(Token = "0x6002929")]
			[Address(RVA = "0xF52C5C", Offset = "0xF52C5C", VA = "0xF52C5C")]
			public <>c()
			{
			}

			[Token(Token = "0x600292A")]
			[Address(RVA = "0xF52C64", Offset = "0xF52C64", VA = "0xF52C64")]
			internal void <.ctor>b__13_0(Vector3 position, Quaternion rotation)
			{
			}
		}

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isTrackingController;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _isXRNodeSet;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private XRNode _backingXRNode;

		[Token(Token = "0x17000296")]
		public bool isTracked
		{
			[Token(Token = "0x6001BDF")]
			[Address(RVA = "0xF52734", Offset = "0xF52734", VA = "0xF52734", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000297")]
		public XRNode xrNode
		{
			[Token(Token = "0x6001BE0")]
			[Address(RVA = "0xF5273C", Offset = "0xF5273C", VA = "0xF5273C")]
			get
			{
				return default(XRNode);
			}
			[Token(Token = "0x6001BE1")]
			[Address(RVA = "0xF52744", Offset = "0xF52744", VA = "0xF52744")]
			set
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event Action<Vector3, Quaternion> OnTrackingDataUpdate
		{
			[Token(Token = "0x6001BE2")]
			[Address(RVA = "0xF52754", Offset = "0xF52754", VA = "0xF52754", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EB40", Offset = "0xB5EB40")]
			add
			{
			}
			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0xF527F8", Offset = "0xF527F8", VA = "0xF527F8", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EB50", Offset = "0xB5EB50")]
			remove
			{
			}
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xF5289C", Offset = "0xF5289C", VA = "0xF5289C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xF528A0", Offset = "0xF528A0", VA = "0xF528A0")]
		private void updateTrackingData()
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0xF52B0C", Offset = "0xF52B0C", VA = "0xF52B0C")]
		public DefaultXRNodeTrackingProvider()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public interface IXRControllerTrackingProvider
	{
		[Token(Token = "0x17000298")]
		bool isTracked
		{
			[Token(Token = "0x6001BE7")]
			get;
		}

		[Token(Token = "0x1400002C")]
		event Action<Vector3, Quaternion> OnTrackingDataUpdate;
	}
	[Token(Token = "0x20003C1")]
	public interface IGraspedMovementHandler
	{
		[Token(Token = "0x6001BEA")]
		void MoveTo(Vector3 solvedPosition, Quaternion solvedRotation, InteractionBehaviour interactionObj, bool justGrasped);
	}
	[Token(Token = "0x20003C2")]
	public interface IGraspedPoseHandler
	{
		[Token(Token = "0x6001BEB")]
		void AddController(InteractionController controller);

		[Token(Token = "0x6001BEC")]
		void RemoveController(InteractionController controller);

		[Token(Token = "0x6001BED")]
		void ClearControllers();

		[Token(Token = "0x6001BEE")]
		void GetGraspedPosition(out Vector3 position, out Quaternion rotation);
	}
	[Token(Token = "0x20003C3")]
	public interface IInteractionBehaviour
	{
		[Token(Token = "0x17000299")]
		string name
		{
			[Token(Token = "0x6001BEF")]
			get;
		}

		[Token(Token = "0x1700029A")]
		GameObject gameObject
		{
			[Token(Token = "0x6001BF0")]
			get;
		}

		[Token(Token = "0x1700029B")]
		Transform transform
		{
			[Token(Token = "0x6001BF1")]
			get;
		}

		[Token(Token = "0x1700029C")]
		InteractionManager manager
		{
			[Token(Token = "0x6001BF2")]
			get;
		}

		[Token(Token = "0x1700029D")]
		Rigidbody rigidbody
		{
			[Token(Token = "0x6001BF3")]
			get;
		}

		[Token(Token = "0x1700029E")]
		ISpaceComponent space
		{
			[Token(Token = "0x6001BF4")]
			get;
		}

		[Token(Token = "0x1700029F")]
		IgnoreHoverMode ignoreHoverMode
		{
			[Token(Token = "0x6001BF5")]
			get;
		}

		[Token(Token = "0x170002A0")]
		bool ignorePrimaryHover
		{
			[Token(Token = "0x6001BF6")]
			get;
		}

		[Token(Token = "0x170002A1")]
		bool ignoreContact
		{
			[Token(Token = "0x6001BF7")]
			get;
		}

		[Token(Token = "0x170002A2")]
		bool ignoreGrasping
		{
			[Token(Token = "0x6001BF8")]
			get;
		}

		[Token(Token = "0x170002A3")]
		bool allowMultiGrasp
		{
			[Token(Token = "0x6001BF9")]
			get;
		}

		[Token(Token = "0x170002A4")]
		SingleLayer interactionLayer
		{
			[Token(Token = "0x6001BFA")]
			get;
		}

		[Token(Token = "0x170002A5")]
		SingleLayer noContactLayer
		{
			[Token(Token = "0x6001BFB")]
			get;
		}

		[Token(Token = "0x170002A6")]
		bool isGrasped
		{
			[Token(Token = "0x6001C07")]
			get;
		}

		[Token(Token = "0x170002A7")]
		bool isSuspended
		{
			[Token(Token = "0x6001C0B")]
			get;
		}

		[Token(Token = "0x6001BFC")]
		void FixedUpdateObject();

		[Token(Token = "0x6001BFD")]
		float GetHoverDistance(Vector3 worldPosition);

		[Token(Token = "0x6001BFE")]
		void BeginHover(List<InteractionController> beganHovering);

		[Token(Token = "0x6001BFF")]
		void EndHover(List<InteractionController> endedHovering);

		[Token(Token = "0x6001C00")]
		void StayHovered(List<InteractionController> currentlyHovering);

		[Token(Token = "0x6001C01")]
		void BeginPrimaryHover(List<InteractionController> beganPrimaryHovering);

		[Token(Token = "0x6001C02")]
		void EndPrimaryHover(List<InteractionController> endedPrimaryHovering);

		[Token(Token = "0x6001C03")]
		void StayPrimaryHovered(List<InteractionController> currentlyPrimaryHovering);

		[Token(Token = "0x6001C04")]
		void BeginContact(List<InteractionController> beganContact);

		[Token(Token = "0x6001C05")]
		void EndContact(List<InteractionController> endedContact);

		[Token(Token = "0x6001C06")]
		void StayContacted(List<InteractionController> currentlyContacting);

		[Token(Token = "0x6001C08")]
		void BeginGrasp(List<InteractionController> beganGrasping);

		[Token(Token = "0x6001C09")]
		void EndGrasp(List<InteractionController> endedGrasping);

		[Token(Token = "0x6001C0A")]
		void StayGrasped(List<InteractionController> currentlyGrasping);

		[Token(Token = "0x6001C0C")]
		void BeginSuspension(InteractionController beganSuspending);

		[Token(Token = "0x6001C0D")]
		void EndSuspension(InteractionController endedSuspending);
	}
	[Token(Token = "0x20003C4")]
	public interface IInternalInteractionController
	{
		[Token(Token = "0x6001C0E")]
		void FixedUpdateController();

		[Token(Token = "0x6001C0F")]
		bool CheckHoverEnd(out HashSet<IInteractionBehaviour> hoverEndedObjects);

		[Token(Token = "0x6001C10")]
		bool CheckHoverBegin(out HashSet<IInteractionBehaviour> hoverBeganObjects);

		[Token(Token = "0x6001C11")]
		bool CheckHoverStay(out HashSet<IInteractionBehaviour> hoveredObjects);

		[Token(Token = "0x6001C12")]
		bool CheckPrimaryHoverEnd(out IInteractionBehaviour primaryHoverEndedObject);

		[Token(Token = "0x6001C13")]
		bool CheckPrimaryHoverBegin(out IInteractionBehaviour primaryHoverBeganObject);

		[Token(Token = "0x6001C14")]
		bool CheckPrimaryHoverStay(out IInteractionBehaviour primaryHoveredObject);

		[Token(Token = "0x6001C15")]
		bool CheckContactEnd(out HashSet<IInteractionBehaviour> contactEndedObjects);

		[Token(Token = "0x6001C16")]
		bool CheckContactBegin(out HashSet<IInteractionBehaviour> contactBeganObjects);

		[Token(Token = "0x6001C17")]
		bool CheckContactStay(out HashSet<IInteractionBehaviour> contactedObjects);

		[Token(Token = "0x6001C18")]
		bool CheckGraspEnd(out IInteractionBehaviour releasedObject);

		[Token(Token = "0x6001C19")]
		bool CheckGraspBegin(out IInteractionBehaviour newlyGraspedObject);

		[Token(Token = "0x6001C1A")]
		bool CheckGraspHold(out IInteractionBehaviour graspedObject);

		[Token(Token = "0x6001C1B")]
		bool CheckSuspensionBegin(out IInteractionBehaviour suspendedObject);

		[Token(Token = "0x6001C1C")]
		bool CheckSuspensionEnd(out IInteractionBehaviour resumedObject);
	}
	[Token(Token = "0x20003C5")]
	public interface IInternalInteractionManager
	{
		[Token(Token = "0x6001C1D")]
		void NotifyIntObjAddedInteractionLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately = true);

		[Token(Token = "0x6001C1E")]
		void NotifyIntObjRemovedInteractionLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately = true);

		[Token(Token = "0x6001C1F")]
		void NotifyIntObjAddedNoContactLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately = true);

		[Token(Token = "0x6001C20")]
		void NotifyIntObjRemovedNoContactLayer(IInteractionBehaviour intObj, int layer, bool refreshImmediately = true);

		[Token(Token = "0x6001C21")]
		void RefreshLayersNow();
	}
	[Token(Token = "0x20003C6")]
	public static class IInternalInteractionManagerExtensions
	{
		[Token(Token = "0x6001C22")]
		[Address(RVA = "0xF53CEC", Offset = "0xF53CEC", VA = "0xF53CEC")]
		public static void NotifyIntObjHasNewInteractionLayer(this IInternalInteractionManager manager, IInteractionBehaviour intObj, int oldInteractionLayer, int newInteractionLayer)
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xF53E94", Offset = "0xF53E94", VA = "0xF53E94")]
		public static void NotifyIntObjHasNewNoContactLayer(this IInternalInteractionManager manager, IInteractionBehaviour intObj, int oldNoContactLayer, int newNoContactLayer)
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public interface IThrowHandler
	{
		[Token(Token = "0x6001C24")]
		void OnHold(InteractionBehaviour intObj, ReadonlyList<InteractionController> controllers);

		[Token(Token = "0x6001C25")]
		void OnThrow(InteractionBehaviour intObj, InteractionController controller);
	}
	[Token(Token = "0x20003C8")]
	public class KabschGraspedPose : IGraspedPoseHandler
	{
		[Token(Token = "0x200063B")]
		public enum SolveMethod
		{
			[Token(Token = "0x4002167")]
			SixDegreeSolve,
			[Token(Token = "0x4002168")]
			PivotAroundOrigin
		}

		[Token(Token = "0x200063C")]
		protected class PosePointCollection
		{
			[Token(Token = "0x4002169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<PosePointCollection> _posePointCollectionPool;

			[Token(Token = "0x400216A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private List<Vector3> _localPositions;

			[Token(Token = "0x400216B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Matrix4x4 _inverseTransformMatrix;

			[Token(Token = "0x600292B")]
			[Address(RVA = "0x109A9E8", Offset = "0x109A9E8", VA = "0x109A9E8")]
			public static PosePointCollection Create(Vector3 position, Quaternion rotation)
			{
				return null;
			}

			[Token(Token = "0x600292C")]
			[Address(RVA = "0x109AD00", Offset = "0x109AD00", VA = "0x109AD00")]
			public static void Return(PosePointCollection posePointCollection)
			{
			}

			[Token(Token = "0x600292D")]
			[Address(RVA = "0x109C024", Offset = "0x109C024", VA = "0x109C024")]
			private PosePointCollection()
			{
			}

			[Token(Token = "0x600292E")]
			[Address(RVA = "0x109C098", Offset = "0x109C098", VA = "0x109C098")]
			private void Initialize(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600292F")]
			[Address(RVA = "0x109AB14", Offset = "0x109AB14", VA = "0x109AB14")]
			public void SetWorldPosition(int index, Vector3 worldPosition)
			{
			}

			[Token(Token = "0x6002930")]
			[Address(RVA = "0x109B500", Offset = "0x109B500", VA = "0x109B500")]
			public Vector3 GetLocalPosition(int index)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x4001721")]
		public const int NUM_FINGERS = 5;

		[Token(Token = "0x4001722")]
		public const int NUM_BONES = 4;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SolveMethod _solveMethod;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InteractionBehaviour _intObj;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KabschSolver _kabsch;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> _points;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Vector3> _refPoints;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 _controllerCentroid;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _objectCentroid;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _manipulatorCount;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<InteractionController, PosePointCollection> _controllerToPoints;

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x109A65C", Offset = "0x109A65C", VA = "0x109A65C")]
		public KabschGraspedPose(InteractionBehaviour interactionObj)
		{
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x109A81C", Offset = "0x109A81C", VA = "0x109A81C", Slot = "4")]
		public void AddController(InteractionController controller)
		{
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x109AC4C", Offset = "0x109AC4C", VA = "0x109AC4C", Slot = "5")]
		public void RemoveController(InteractionController controller)
		{
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x109AD84", Offset = "0x109AD84", VA = "0x109AD84", Slot = "6")]
		public void ClearControllers()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x109AEB8", Offset = "0x109AEB8", VA = "0x109AEB8", Slot = "7")]
		public void GetGraspedPosition(out Vector3 newPosition, out Quaternion newRotation)
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x109B584", Offset = "0x109B584", VA = "0x109B584")]
		private Matrix4x4 PerformSolve(Vector3 position)
		{
			return default(Matrix4x4);
		}
	}
	[Token(Token = "0x20003C9")]
	public class KinematicGraspedMovement : IGraspedMovementHandler
	{
		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x109C9BC", Offset = "0x109C9BC", VA = "0x109C9BC", Slot = "4")]
		public void MoveTo(Vector3 solvedPosition, Quaternion solvedRotation, InteractionBehaviour interactionObj, bool justGrasped)
		{
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x109CAF8", Offset = "0x109CAF8", VA = "0x109CAF8")]
		public KinematicGraspedMovement()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	public class NonKinematicGraspedMovement : IGraspedMovementHandler
	{
		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float _maxVelocity;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 _lastSolvedCoMPosition;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AnimationCurve _strengthByDistance;

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x109CB00", Offset = "0x109CB00", VA = "0x109CB00", Slot = "4")]
		public void MoveTo(Vector3 solvedPosition, Quaternion solvedRotation, InteractionBehaviour intObj, bool justGrasped)
		{
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x109D040", Offset = "0x109D040", VA = "0x109D040")]
		public NonKinematicGraspedMovement()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class SlidingWindowThrow : IThrowHandler
	{
		[Token(Token = "0x200063D")]
		private struct VelocitySample
		{
			[Token(Token = "0x400216C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;

			[Token(Token = "0x400216D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 position;

			[Token(Token = "0x400216E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x6002932")]
			[Address(RVA = "0x109D8F4", Offset = "0x109D8F4", VA = "0x109D8F4")]
			public VelocitySample(Vector3 position, Quaternion rotation, float time)
			{
			}

			[Token(Token = "0x6002933")]
			[Address(RVA = "0x109DDCC", Offset = "0x109DDCC", VA = "0x109DDCC")]
			public static VelocitySample Interpolate(VelocitySample a, VelocitySample b, float time)
			{
				return default(VelocitySample);
			}
		}

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _windowLength;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float _windowDelay;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AnimationCurve _velocityMultiplierCurve;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Queue<VelocitySample> _velocityQueue;

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x109D784", Offset = "0x109D784", VA = "0x109D784", Slot = "4")]
		public void OnHold(InteractionBehaviour intObj, ReadonlyList<InteractionController> controllers)
		{
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x109D92C", Offset = "0x109D92C", VA = "0x109D92C", Slot = "5")]
		public void OnThrow(InteractionBehaviour intObj, InteractionController throwingController)
		{
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x109DF80", Offset = "0x109DF80", VA = "0x109DF80")]
		public SlidingWindowThrow()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class Anchor : MonoBehaviour
	{
		[Token(Token = "0x200063E")]
		public enum EventType
		{
			[Token(Token = "0x4002170")]
			OnAnchorPreferred = 100,
			[Token(Token = "0x4002171")]
			OnAnchorNotPreferred = 110,
			[Token(Token = "0x4002172")]
			WhileAnchorPreferred = 120,
			[Token(Token = "0x4002173")]
			OnAnchorablesAttached = 130,
			[Token(Token = "0x4002174")]
			OnNoAnchorablesAttached = 140,
			[Token(Token = "0x4002175")]
			WhileAnchorablesAttached = 150
		}

		[Token(Token = "0x200063F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477EC", Offset = "0xB477EC")]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x4002176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Anchor <>4__this;

			[Token(Token = "0x4002177")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EventType type;

			[Token(Token = "0x6002934")]
			[Address(RVA = "0xF4D3FC", Offset = "0xF4D3FC", VA = "0xF4D3FC")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x6002935")]
			[Address(RVA = "0xF4D97C", Offset = "0xF4D97C", VA = "0xF4D97C")]
			internal void <setupCallback>b__0()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000640")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB477FC", Offset = "0xB477FC")]
		private sealed class <>c
		{
			[Token(Token = "0x4002178")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__42_0;

			[Token(Token = "0x400217A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__42_1;

			[Token(Token = "0x400217B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action <>9__42_2;

			[Token(Token = "0x400217C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action <>9__42_3;

			[Token(Token = "0x400217D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Action <>9__42_4;

			[Token(Token = "0x400217E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Action <>9__42_5;

			[Token(Token = "0x6002937")]
			[Address(RVA = "0xF4D95C", Offset = "0xF4D95C", VA = "0xF4D95C")]
			public <>c()
			{
			}

			[Token(Token = "0x6002938")]
			[Address(RVA = "0xF4D964", Offset = "0xF4D964", VA = "0xF4D964")]
			internal void <.ctor>b__42_0()
			{
			}

			[Token(Token = "0x6002939")]
			[Address(RVA = "0xF4D968", Offset = "0xF4D968", VA = "0xF4D968")]
			internal void <.ctor>b__42_1()
			{
			}

			[Token(Token = "0x600293A")]
			[Address(RVA = "0xF4D96C", Offset = "0xF4D96C", VA = "0xF4D96C")]
			internal void <.ctor>b__42_2()
			{
			}

			[Token(Token = "0x600293B")]
			[Address(RVA = "0xF4D970", Offset = "0xF4D970", VA = "0xF4D970")]
			internal void <.ctor>b__42_3()
			{
			}

			[Token(Token = "0x600293C")]
			[Address(RVA = "0xF4D974", Offset = "0xF4D974", VA = "0xF4D974")]
			internal void <.ctor>b__42_4()
			{
			}

			[Token(Token = "0x600293D")]
			[Address(RVA = "0xF4D978", Offset = "0xF4D978", VA = "0xF4D978")]
			internal void <.ctor>b__42_5()
			{
			}
		}

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<Anchor> _allAnchors;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5198C", Offset = "0xB5198C")]
		public bool allowMultipleObjects;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB519C4", Offset = "0xB519C4")]
		public bool matchActiveStateWithAttachedObjects;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<AnchorGroup> _groups;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<AnchorableBehaviour> _preferringAnchorables;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<AnchorableBehaviour> _anchoredObjects;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action OnAnchorPreferred;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action OnAnchorNotPreferred;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action WhileAnchorPreferred;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnAnchorablesAttached;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action OnNoAnchorablesAttached;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action WhileAnchorablesAttached;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Color AnchorGizmoColor;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector3[] worldDirs;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private EnumEventTable _eventTable;

		[Token(Token = "0x170002A8")]
		public static HashSet<Anchor> allAnchors
		{
			[Token(Token = "0x6001C33")]
			[Address(RVA = "0xF4C474", Offset = "0xF4C474", VA = "0xF4C474")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A9")]
		public HashSet<AnchorGroup> groups
		{
			[Token(Token = "0x6001C34")]
			[Address(RVA = "0xF4C54C", Offset = "0xF4C54C", VA = "0xF4C54C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AA")]
		public HashSet<AnchorableBehaviour> anchoredObjects
		{
			[Token(Token = "0x6001C35")]
			[Address(RVA = "0xF4C554", Offset = "0xF4C554", VA = "0xF4C554")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AB")]
		public bool isPreferred
		{
			[Token(Token = "0x6001C36")]
			[Address(RVA = "0xF4C55C", Offset = "0xF4C55C", VA = "0xF4C55C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AC")]
		public bool hasAnchoredObjects
		{
			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xF4C5B4", Offset = "0xF4C5B4", VA = "0xF4C5B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0xF4C60C", Offset = "0xF4C60C", VA = "0xF4C60C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0xF4C688", Offset = "0xF4C688", VA = "0xF4C688")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0xF4C7A0", Offset = "0xF4C7A0", VA = "0xF4C7A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xF4C818", Offset = "0xF4C818", VA = "0xF4C818")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0xF4C858", Offset = "0xF4C858", VA = "0xF4C858")]
		private void OnAnchorDisabled()
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0xF4C970", Offset = "0xF4C970", VA = "0xF4C970")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xF4CB40", Offset = "0xF4CB40", VA = "0xF4CB40")]
		public void NotifyAttached(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xF4CBDC", Offset = "0xF4CBDC", VA = "0xF4CBDC")]
		public void NotifyDetached(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0xF4C81C", Offset = "0xF4C81C", VA = "0xF4C81C")]
		private void updateAnchorCallbacks()
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xF4CC74", Offset = "0xF4CC74", VA = "0xF4CC74")]
		public void NotifyAnchorPreference(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xF4CD10", Offset = "0xF4CD10", VA = "0xF4CD10")]
		public void NotifyEndAnchorPreference(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xF4CDA8", Offset = "0xF4CDA8", VA = "0xF4CDA8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xF4CF1C", Offset = "0xF4CF1C", VA = "0xF4CF1C")]
		private void drawWireSphereGizmo(Vector3 pos, float radius)
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xF4D0E0", Offset = "0xF4D0E0", VA = "0xF4D0E0")]
		private void drawSphereCirclesGizmo(int numCircles, Vector3 pos, float radius, Vector3 poleDir)
		{
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xF4C7A4", Offset = "0xF4C7A4", VA = "0xF4C7A4")]
		private void initUnityEvents()
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xF4D308", Offset = "0xF4D308", VA = "0xF4D308")]
		private void setupCallback(ref Action action, EventType type)
		{
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xF4D404", Offset = "0xF4D404", VA = "0xF4D404")]
		public Anchor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CD")]
	public class AnchorSet : SerializableHashSet<Anchor>
	{
		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xF4EC14", Offset = "0xF4EC14", VA = "0xF4EC14")]
		public AnchorSet()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class AnchorGroup : MonoBehaviour
	{
		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51A0C", Offset = "0xB51A0C")]
		private AnchorSet _anchors;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<AnchorableBehaviour> _anchorableObjects;

		[Token(Token = "0x170002AD")]
		public AnchorSet anchors
		{
			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0xF4D9AC", Offset = "0xF4D9AC", VA = "0xF4D9AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		public HashSet<AnchorableBehaviour> anchorableObjects
		{
			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0xF4D9B4", Offset = "0xF4D9B4", VA = "0xF4D9B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0xF4D9BC", Offset = "0xF4D9BC", VA = "0xF4D9BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0xF4DC58", Offset = "0xF4DC58", VA = "0xF4DC58")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0xF4DE84", Offset = "0xF4DE84", VA = "0xF4DE84")]
		public bool Contains(Anchor anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0xF4DBBC", Offset = "0xF4DBBC", VA = "0xF4DBBC")]
		public bool Add(Anchor anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0xF4CAA4", Offset = "0xF4CAA4", VA = "0xF4CAA4")]
		public bool Remove(Anchor anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0xF4DEEC", Offset = "0xF4DEEC", VA = "0xF4DEEC")]
		public void NotifyAnchorableObjectAdded(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0xF4DF54", Offset = "0xF4DF54", VA = "0xF4DF54")]
		public void NotifyAnchorableObjectRemoved(AnchorableBehaviour anchObj)
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xF4DFBC", Offset = "0xF4DFBC", VA = "0xF4DFBC")]
		public AnchorGroup()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public class AnchorableBehaviour : MonoBehaviour
	{
		[Token(Token = "0x2000641")]
		public enum EventType
		{
			[Token(Token = "0x4002180")]
			OnAttachedToAnchor = 100,
			[Token(Token = "0x4002181")]
			OnLockedToAnchor = 105,
			[Token(Token = "0x4002182")]
			OnDetachedFromAnchor = 110,
			[Token(Token = "0x4002183")]
			WhileAttachedToAnchor = 120,
			[Token(Token = "0x4002184")]
			WhileLockedToAnchor = 125,
			[Token(Token = "0x4002185")]
			OnPostTryAnchorOnGraspEnd = 130
		}

		[Token(Token = "0x2000642")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4780C", Offset = "0xB4780C")]
		private sealed class <>c__DisplayClass81_0
		{
			[Token(Token = "0x4002186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AnchorableBehaviour <>4__this;

			[Token(Token = "0x4002187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EventType type;

			[Token(Token = "0x600293E")]
			[Address(RVA = "0xF51620", Offset = "0xF51620", VA = "0xF51620")]
			public <>c__DisplayClass81_0()
			{
			}

			[Token(Token = "0x600293F")]
			[Address(RVA = "0xF51AEC", Offset = "0xF51AEC", VA = "0xF51AEC")]
			internal void <setupCallback>b__0()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000643")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4781C", Offset = "0xB4781C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__82_0;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__82_1;

			[Token(Token = "0x400218B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action <>9__82_2;

			[Token(Token = "0x400218C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action <>9__82_3;

			[Token(Token = "0x400218D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Action <>9__82_4;

			[Token(Token = "0x400218E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Action <>9__82_5;

			[Token(Token = "0x6002941")]
			[Address(RVA = "0xF51ACC", Offset = "0xF51ACC", VA = "0xF51ACC")]
			public <>c()
			{
			}

			[Token(Token = "0x6002942")]
			[Address(RVA = "0xF51AD4", Offset = "0xF51AD4", VA = "0xF51AD4")]
			internal void <.ctor>b__82_0()
			{
			}

			[Token(Token = "0x6002943")]
			[Address(RVA = "0xF51AD8", Offset = "0xF51AD8", VA = "0xF51AD8")]
			internal void <.ctor>b__82_1()
			{
			}

			[Token(Token = "0x6002944")]
			[Address(RVA = "0xF51ADC", Offset = "0xF51ADC", VA = "0xF51ADC")]
			internal void <.ctor>b__82_2()
			{
			}

			[Token(Token = "0x6002945")]
			[Address(RVA = "0xF51AE0", Offset = "0xF51AE0", VA = "0xF51AE0")]
			internal void <.ctor>b__82_3()
			{
			}

			[Token(Token = "0x6002946")]
			[Address(RVA = "0xF51AE4", Offset = "0xF51AE4", VA = "0xF51AE4")]
			internal void <.ctor>b__82_4()
			{
			}

			[Token(Token = "0x6002947")]
			[Address(RVA = "0xF51AE8", Offset = "0xF51AE8", VA = "0xF51AE8")]
			internal void <.ctor>b__82_5()
			{
			}
		}

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Disable]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51A58", Offset = "0xB51A58")]
		private bool _isAttached;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51AB4", Offset = "0xB51AB4")]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB51AB4", Offset = "0xB51AB4")]
		[SerializeField]
		private Anchor _anchor;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51B24", Offset = "0xB51B24")]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB51B24", Offset = "0xB51B24")]
		[SerializeField]
		private AnchorGroup _anchorGroup;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51B94", Offset = "0xB51B94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51B94", Offset = "0xB51B94")]
		public float maxAnchorRange;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51BF4", Offset = "0xB51BF4")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB51BF4", Offset = "0xB51BF4")]
		public bool useTrajectory;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51CB0", Offset = "0xB51CB0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB51CB0", Offset = "0xB51CB0")]
		private float _motionlessRangeFraction;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Disable]
		private float _maxMotionlessRange;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51D50", Offset = "0xB51D50")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB51D50", Offset = "0xB51D50")]
		private float _maxAttachmentAngle;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _minAttachmentDotProduct;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51DB8", Offset = "0xB51DB8")]
		[SerializeField]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB51DB8", Offset = "0xB51DB8")]
		private float _alwaysAttachDistance;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB51E18", Offset = "0xB51E18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51E18", Offset = "0xB51E18")]
		public bool lockToAnchor;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51E78", Offset = "0xB51E78")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB51E78", Offset = "0xB51E78")]
		public bool lockWhenAttached;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51F34", Offset = "0xB51F34")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB51F34", Offset = "0xB51F34")]
		public bool matchAnchorMotionWhileAttaching;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB51FF0", Offset = "0xB51FF0")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB51FF0", Offset = "0xB51FF0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB51FF0", Offset = "0xB51FF0")]
		public float anchorLerpCoeffPerSec;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB520C8", Offset = "0xB520C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB520C8", Offset = "0xB520C8")]
		public bool anchorRotation;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB52128", Offset = "0xB52128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52128", Offset = "0xB52128")]
		[Disable]
		public InteractionBehaviour interactionBehaviour;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		private bool _interactionBehaviourIsNull;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB521D0", Offset = "0xB521D0")]
		[Disable]
		public bool detachWhenGrasped;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5221C", Offset = "0xB5221C")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB5221C", Offset = "0xB5221C")]
		private bool _tryAnchorNearestOnGraspEnd;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5228C", Offset = "0xB5228C")]
		public bool isAttractedByHand;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB522C4", Offset = "0xB522C4")]
		public float maxAttractionReach;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB522FC", Offset = "0xB522FC")]
		public AnimationCurve attractionReachByDistance;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Anchor _preferredAnchor;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action OnAttachedToAnchor;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action OnLockedToAnchor;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action OnDetachedFromAnchor;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action WhileAttachedToAnchor;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action WhileLockedToAnchor;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action OnPostTryAnchorOnGraspEnd;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool _isLockedToAnchor;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 _offsetTowardsHand;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 _targetPositionLastUpdate;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool _hasTargetPositionLastUpdate;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		private bool _isRotationLockedToAnchor;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion _targetRotationLastUpdate;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool _hasTargetRotationLastUpdate;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool _reactivateGravityOnDetach;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Anchor> _nearbyAnchorsBuffer;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private EnumEventTable _eventTable;

		[Token(Token = "0x170002AF")]
		public bool isAttached
		{
			[Token(Token = "0x6001C55")]
			[Address(RVA = "0xF4EC64", Offset = "0xF4EC64", VA = "0xF4EC64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C56")]
			[Address(RVA = "0xF4EC6C", Offset = "0xF4EC6C", VA = "0xF4EC6C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public Anchor anchor
		{
			[Token(Token = "0x6001C57")]
			[Address(RVA = "0xF4EE2C", Offset = "0xF4EE2C", VA = "0xF4EE2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C58")]
			[Address(RVA = "0xF4EE34", Offset = "0xF4EE34", VA = "0xF4EE34")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public AnchorGroup anchorGroup
		{
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0xF4F1C4", Offset = "0xF4F1C4", VA = "0xF4F1C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0xF4F1CC", Offset = "0xF4F1CC", VA = "0xF4F1CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public bool tryAnchorNearestOnGraspEnd
		{
			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0xF4F36C", Offset = "0xF4F36C", VA = "0xF4F36C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C5C")]
			[Address(RVA = "0xF4F374", Offset = "0xF4F374", VA = "0xF4F374")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public Anchor preferredAnchor
		{
			[Token(Token = "0x6001C5D")]
			[Address(RVA = "0xF4F510", Offset = "0xF4F510", VA = "0xF4F510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xF4F518", Offset = "0xF4F518", VA = "0xF4F518")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xF4F674", Offset = "0xF4F674", VA = "0xF4F674")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xF4F678", Offset = "0xF4F678", VA = "0xF4F678")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xF4F850", Offset = "0xF4F850", VA = "0xF4F850")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xF4F8FC", Offset = "0xF4F8FC", VA = "0xF4F8FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xF506DC", Offset = "0xF506DC", VA = "0xF506DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xF507AC", Offset = "0xF507AC", VA = "0xF507AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xF4F5E4", Offset = "0xF4F5E4", VA = "0xF4F5E4")]
		private void refreshInspectorConveniences()
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xF4F53C", Offset = "0xF4F53C", VA = "0xF4F53C")]
		private void refreshInteractionBehaviour()
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xF50714", Offset = "0xF50714", VA = "0xF50714")]
		public void Detach()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xF4F11C", Offset = "0xF4F11C", VA = "0xF4F11C")]
		public bool IsValidAnchor(Anchor anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0xF508F8", Offset = "0xF508F8", VA = "0xF508F8")]
		public bool IsWithinRange(Anchor anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xF50A20", Offset = "0xF50A20", VA = "0xF50A20")]
		public Anchor FindPreferredAnchor()
		{
			return null;
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xF50E84", Offset = "0xF50E84", VA = "0xF50E84")]
		public List<Anchor> GetNearbyValidAnchors(bool requireAnchorHasSpace = true, bool requireAnchorActiveAndEnabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xF50B78", Offset = "0xF50B78", VA = "0xF50B78")]
		public Anchor GetNearestValidAnchor(bool requireWithinRange = true, bool requireAnchorHasSpace = true, bool requireAnchorActiveAndEnabled = true)
		{
			return null;
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xF51290", Offset = "0xF51290", VA = "0xF51290")]
		public bool TryAttach(bool ignoreRange = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xF51344", Offset = "0xF51344", VA = "0xF51344")]
		public bool TryAttachToNearestAnchor()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xF511A8", Offset = "0xF511A8", VA = "0xF511A8")]
		private float getAnchorScore(Anchor anchor)
		{
			return default(float);
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xF4E764", Offset = "0xF4E764", VA = "0xF4E764")]
		public static float GetAnchorScore(Vector3 anchObjPos, Vector3 anchObjVel, Vector3 anchorPos, float maxDistance, float nonDirectedMaxDistance, float minAngleProduct, float alwaysAttachDistance = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xF4FA44", Offset = "0xF4FA44", VA = "0xF4FA44")]
		private void updateAttractionToHand()
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xF4FDB4", Offset = "0xF4FDB4", VA = "0xF4FDB4")]
		private void updateAnchorAttachment()
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0xF50204", Offset = "0xF50204", VA = "0xF50204")]
		private void updateAnchorAttachmentRotation()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xF505B0", Offset = "0xF505B0", VA = "0xF505B0")]
		private void updateAnchorPreference()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xF5071C", Offset = "0xF5071C", VA = "0xF5071C")]
		private void endAnchorPreference()
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xF514DC", Offset = "0xF514DC", VA = "0xF514DC")]
		private void detachAnchorOnGraspBegin()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xF514E4", Offset = "0xF514E4", VA = "0xF514E4")]
		private void tryToAnchorOnGraspEnd()
		{
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xF4F7DC", Offset = "0xF4F7DC", VA = "0xF4F7DC")]
		private void initUnityEvents()
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0xF51514", Offset = "0xF51514", VA = "0xF51514")]
		private void setupCallback(ref Action action, EventType type)
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0xF51628", Offset = "0xF51628", VA = "0xF51628")]
		public AnchorableBehaviour()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class AnchorScoreTest : MonoBehaviour
	{
		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform centerPositionOneSecondLater;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material testMaterialXY;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material testMaterialXZ;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material testMaterialYZ;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB52344", Offset = "0xB52344")]
		public float maxRange;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB52364", Offset = "0xB52364")]
		public float maxAngle;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB52380", Offset = "0xB52380")]
		public float alwaysAttachDistance;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB52398", Offset = "0xB52398")]
		public Texture2D textureXY;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture2D textureXZ;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D textureYZ;

		[Token(Token = "0x4001775")]
		public const int WIDTH = 64;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color[] _pixels;

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0xF4E02C", Offset = "0xF4E02C", VA = "0xF4E02C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xF4E118", Offset = "0xF4E118", VA = "0xF4E118")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xF4E288", Offset = "0xF4E288", VA = "0xF4E288")]
		private void setPixels(Texture2D tex, Vector3 dir1, Vector3 dir2)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xF4EBA8", Offset = "0xF4EBA8", VA = "0xF4EBA8")]
		public AnchorScoreTest()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class InteractionButton : InteractionBehaviour
	{
		[Token(Token = "0x2000644")]
		public enum StartingPositionMode
		{
			[Token(Token = "0x4002190")]
			Depressed,
			[Token(Token = "0x4002191")]
			Relaxed
		}

		[Serializable]
		[Token(Token = "0x2000645")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4782C", Offset = "0xB4782C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__68_0;

			[Token(Token = "0x4002194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__68_1;

			[Token(Token = "0x6002949")]
			[Address(RVA = "0x13A8BBC", Offset = "0x13A8BBC", VA = "0x13A8BBC")]
			public <>c()
			{
			}

			[Token(Token = "0x600294A")]
			[Address(RVA = "0x13A8BC4", Offset = "0x13A8BC4", VA = "0x13A8BC4")]
			internal void <.ctor>b__68_0()
			{
			}

			[Token(Token = "0x600294B")]
			[Address(RVA = "0x13A8BC8", Offset = "0x13A8BC8", VA = "0x13A8BC8")]
			internal void <.ctor>b__68_1()
			{
			}
		}

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB523D0", Offset = "0xB523D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB523D0", Offset = "0xB523D0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB523D0", Offset = "0xB523D0")]
		private bool _controlEnabled;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB52464", Offset = "0xB52464")]
		[EditTimeOnly]
		public StartingPositionMode startingPositionMode;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB524B0", Offset = "0xB524B0")]
		public Vector2 minMaxHeight;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB524E8", Offset = "0xB524E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB524E8", Offset = "0xB524E8")]
		public float restingHeight;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB5253C", Offset = "0xB5253C")]
		[SerializeField]
		private float _springForce;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB5257C", Offset = "0xB5257C")]
		private UnityEvent _OnPress;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB525C8", Offset = "0xB525C8")]
		private UnityEvent _OnUnpress;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public Action OnPress;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public Action OnUnpress;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		protected bool _isPressed;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x231")]
		protected bool _pressedThisFrame;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x232")]
		protected bool _unpressedThisFrame;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float _pressedAmount;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		protected Vector3 localPhysicsPosition;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		protected Vector3 physicsPosition;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Rigidbody _lastDepressor;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3 _localDepressorPosition;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private Vector3 _physicsVelocity;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private bool _physicsOccurred;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		private bool _initialIgnoreGrasping;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private Quaternion _initialLocalRotation;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private InteractionController _lockedInteractingController;

		[Token(Token = "0x400178E")]
		private const float FRICTION_COEFFICIENT = 30f;

		[Token(Token = "0x400178F")]
		private const float DRAG_COEFFICIENT = 60f;

		[Token(Token = "0x170002B4")]
		public bool controlEnabled
		{
			[Token(Token = "0x6001C7F")]
			[Address(RVA = "0x13A6928", Offset = "0x13A6928", VA = "0x13A6928")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0x13A6930", Offset = "0x13A6930", VA = "0x13A6930")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public float springForce
		{
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0x13A693C", Offset = "0x13A693C", VA = "0x13A693C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0x13A6944", Offset = "0x13A6944", VA = "0x13A6944")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public bool isPressed
		{
			[Token(Token = "0x6001C83")]
			[Address(RVA = "0x13A694C", Offset = "0x13A694C", VA = "0x13A694C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB63028", Offset = "0xB63028")]
		public bool isDepressed
		{
			[Token(Token = "0x6001C84")]
			[Address(RVA = "0x13A6954", Offset = "0x13A6954", VA = "0x13A6954")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B8")]
		public bool pressedThisFrame
		{
			[Token(Token = "0x6001C85")]
			[Address(RVA = "0x13A695C", Offset = "0x13A695C", VA = "0x13A695C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB63064", Offset = "0xB63064")]
		public bool depressedThisFrame
		{
			[Token(Token = "0x6001C86")]
			[Address(RVA = "0x13A6964", Offset = "0x13A6964", VA = "0x13A6964")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BA")]
		public bool unpressedThisFrame
		{
			[Token(Token = "0x6001C87")]
			[Address(RVA = "0x13A696C", Offset = "0x13A696C", VA = "0x13A696C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BB")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB630A0", Offset = "0xB630A0")]
		public bool unDepressedThisFrame
		{
			[Token(Token = "0x6001C88")]
			[Address(RVA = "0x13A6974", Offset = "0x13A6974", VA = "0x13A6974")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BC")]
		public float pressedAmount
		{
			[Token(Token = "0x6001C89")]
			[Address(RVA = "0x13A697C", Offset = "0x13A697C", VA = "0x13A697C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002BD")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB630DC", Offset = "0xB630DC")]
		public float depressedAmount
		{
			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0x13A6984", Offset = "0x13A6984", VA = "0x13A6984")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002BE")]
		public virtual Vector3 RelaxedLocalPosition
		{
			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0x13A698C", Offset = "0x13A698C", VA = "0x13A698C", Slot = "42")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x13A6AAC", Offset = "0x13A6AAC", VA = "0x13A6AAC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x13A6B70", Offset = "0x13A6B70", VA = "0x13A6B70", Slot = "38")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x13A6C20", Offset = "0x13A6C20", VA = "0x13A6C20", Slot = "39")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x13A7108", Offset = "0x13A7108", VA = "0x13A7108", Slot = "43")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x13A73CC", Offset = "0x13A73CC", VA = "0x13A73CC", Slot = "44")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x13A7F40", Offset = "0x13A7F40", VA = "0x13A7F40", Slot = "45")]
		protected virtual Vector3 constrainDepressedLocalPosition(Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x13A7F84", Offset = "0x13A7F84", VA = "0x13A7F84", Slot = "46")]
		protected virtual void onGraspBegin()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x13A7FC0", Offset = "0x13A7FC0", VA = "0x13A7FC0", Slot = "47")]
		protected virtual void onGraspEnd()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x13A8128", Offset = "0x13A8128", VA = "0x13A8128", Slot = "48")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x13A8324", Offset = "0x13A8324", VA = "0x13A8324", Slot = "49")]
		protected virtual void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x13A835C", Offset = "0x13A835C", VA = "0x13A835C", Slot = "50")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x13A8360", Offset = "0x13A8360", VA = "0x13A8360", Slot = "51")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x13A8160", Offset = "0x13A8160", VA = "0x13A8160")]
		private void trySetDepressor(Collider collider)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x13A83D8", Offset = "0x13A83D8", VA = "0x13A83D8", Slot = "52")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x13A87E4", Offset = "0x13A87E4", VA = "0x13A87E4")]
		public void SetMinHeight(float minHeight)
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x13A8888", Offset = "0x13A8888", VA = "0x13A8888")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5EBA0", Offset = "0xB5EBA0")]
		public void setMinHeight(float minHeight)
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x13A888C", Offset = "0x13A888C", VA = "0x13A888C")]
		public void SetMaxHeight(float maxHeight)
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x13A8934", Offset = "0x13A8934", VA = "0x13A8934")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB5EBDC", Offset = "0xB5EBDC")]
		public void setMaxHeight(float maxHeight)
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x13A8938", Offset = "0x13A8938", VA = "0x13A8938")]
		public InteractionButton()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public class InteractionSlider : InteractionButton
	{
		[Token(Token = "0x2000646")]
		public enum SliderType
		{
			[Token(Token = "0x4002196")]
			Vertical,
			[Token(Token = "0x4002197")]
			Horizontal,
			[Token(Token = "0x4002198")]
			TwoDimensional
		}

		[Serializable]
		[Token(Token = "0x2000647")]
		public class FloatEvent : UnityEvent<float>
		{
			[Token(Token = "0x600294C")]
			[Address(RVA = "0x1094E40", Offset = "0x1094E40", VA = "0x1094E40")]
			public FloatEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000648")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4783C", Offset = "0xB4783C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400219A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<float> <>9__68_0;

			[Token(Token = "0x400219B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<float> <>9__68_1;

			[Token(Token = "0x600294E")]
			[Address(RVA = "0x1094E30", Offset = "0x1094E30", VA = "0x1094E30")]
			public <>c()
			{
			}

			[Token(Token = "0x600294F")]
			[Address(RVA = "0x1094E38", Offset = "0x1094E38", VA = "0x1094E38")]
			internal void <.ctor>b__68_0(float f)
			{
			}

			[Token(Token = "0x6002950")]
			[Address(RVA = "0x1094E3C", Offset = "0x1094E3C", VA = "0x1094E3C")]
			internal void <.ctor>b__68_1(float f)
			{
			}
		}

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB52614", Offset = "0xB52614")]
		public SliderType sliderType;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		public bool dispatchSlideValueOnStart;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5264C", Offset = "0xB5264C")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB5264C", Offset = "0xB5264C")]
		public bool overrideRectLimits;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A6")]
		[SerializeField]
		[HideInInspector]
		private bool _parentHasRectTransform;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5273C", Offset = "0xB5273C")]
		public float defaultHorizontalValue;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52774", Offset = "0xB52774")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52774", Offset = "0xB52774")]
		[SerializeField]
		private Vector2 _horizontalValueRange;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB527E4", Offset = "0xB527E4")]
		[AttributeAttribute(Name = "MinMax", RVA = "0xB527E4", Offset = "0xB527E4")]
		public Vector2 horizontalSlideLimits;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52838", Offset = "0xB52838")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB52838", Offset = "0xB52838")]
		public int horizontalSteps;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52888", Offset = "0xB52888")]
		private FloatEvent _horizontalSlideEvent;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB528D4", Offset = "0xB528D4")]
		public float defaultVerticalValue;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5290C", Offset = "0xB5290C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB5290C", Offset = "0xB5290C")]
		[SerializeField]
		private Vector2 _verticalValueRange;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		[AttributeAttribute(Name = "MinMax", RVA = "0xB5297C", Offset = "0xB5297C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5297C", Offset = "0xB5297C")]
		public Vector2 verticalSlideLimits;

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB529D0", Offset = "0xB529D0")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB529D0", Offset = "0xB529D0")]
		public int verticalSteps;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52A20", Offset = "0xB52A20")]
		private FloatEvent _verticalSlideEvent;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public Action<float> HorizontalSlideEvent;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public Action<float> VerticalSlideEvent;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		protected float _horizontalSliderPercent;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		protected float _verticalSliderPercent;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		protected RectTransform parent;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private bool _started;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x309")]
		private bool _sawWasSlid;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30A")]
		private bool _wasSlid;

		[Token(Token = "0x170002BF")]
		public float minHorizontalValue
		{
			[Token(Token = "0x6001C9F")]
			[Address(RVA = "0x13BB48C", Offset = "0x13BB48C", VA = "0x13BB48C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA0")]
			[Address(RVA = "0x13BB494", Offset = "0x13BB494", VA = "0x13BB494")]
			set
			{
			}
		}

		[Token(Token = "0x170002C0")]
		public float maxHorizontalValue
		{
			[Token(Token = "0x6001CA1")]
			[Address(RVA = "0x13BB5B0", Offset = "0x13BB5B0", VA = "0x13BB5B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0x13BB5B8", Offset = "0x13BB5B8", VA = "0x13BB5B8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C1")]
		public float minVerticalValue
		{
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0x13BB648", Offset = "0x13BB648", VA = "0x13BB648")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA4")]
			[Address(RVA = "0x13BB650", Offset = "0x13BB650", VA = "0x13BB650")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public float maxVerticalValue
		{
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0x13BB76C", Offset = "0x13BB76C", VA = "0x13BB76C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0x13BB774", Offset = "0x13BB774", VA = "0x13BB774")]
			set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public float HorizontalSliderPercent
		{
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0x13BB804", Offset = "0x13BB804", VA = "0x13BB804")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0x13BB80C", Offset = "0x13BB80C", VA = "0x13BB80C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public float VerticalSliderPercent
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x13BB948", Offset = "0x13BB948", VA = "0x13BB948")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0x13BB950", Offset = "0x13BB950", VA = "0x13BB950")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public float HorizontalSliderValue
		{
			[Token(Token = "0x6001CAB")]
			[Address(RVA = "0x13BB524", Offset = "0x13BB524", VA = "0x13BB524")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAC")]
			[Address(RVA = "0x13BBA8C", Offset = "0x13BBA8C", VA = "0x13BBA8C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public float VerticalSliderValue
		{
			[Token(Token = "0x6001CAD")]
			[Address(RVA = "0x13BB6E0", Offset = "0x13BB6E0", VA = "0x13BB6E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAE")]
			[Address(RVA = "0x13BBB20", Offset = "0x13BBB20", VA = "0x13BBB20")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public float normalizedHorizontalValue
		{
			[Token(Token = "0x6001CB0")]
			[Address(RVA = "0x13BBD00", Offset = "0x13BBD00", VA = "0x13BBD00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0x13BBD08", Offset = "0x13BBD08", VA = "0x13BBD08")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public float normalizedVerticalValue
		{
			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0x13BBDC4", Offset = "0x13BBDC4", VA = "0x13BBDC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CB3")]
			[Address(RVA = "0x13BBDCC", Offset = "0x13BBDCC", VA = "0x13BBDCC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public int horizontalStepValue
		{
			[Token(Token = "0x6001CB4")]
			[Address(RVA = "0x13BBE88", Offset = "0x13BBE88", VA = "0x13BBE88")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002CA")]
		public bool wasSlid
		{
			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x13BBEE0", Offset = "0x13BBEE0", VA = "0x13BBEE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x13BBBB4", Offset = "0x13BBBB4", VA = "0x13BBBB4")]
		private void calculateSliderValues()
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x13BBF00", Offset = "0x13BBF00", VA = "0x13BBF00", Slot = "35")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x13BC01C", Offset = "0x13BC01C", VA = "0x13BC01C", Slot = "37")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x13BC0CC", Offset = "0x13BC0CC", VA = "0x13BC0CC", Slot = "38")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x13BC174", Offset = "0x13BC174", VA = "0x13BC174", Slot = "39")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x13BCA88", Offset = "0x13BCA88", VA = "0x13BCA88", Slot = "44")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x13BCAFC", Offset = "0x13BCAFC", VA = "0x13BCAFC")]
		public void RecalculateSliderLimits()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x13BC3FC", Offset = "0x13BC3FC", VA = "0x13BC3FC")]
		private void calculateSliderLimits()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x13BCB00", Offset = "0x13BCB00", VA = "0x13BCB00", Slot = "45")]
		protected override Vector3 constrainDepressedLocalPosition(Vector3 desiredOffset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x13BCE50", Offset = "0x13BCE50", VA = "0x13BCE50", Slot = "52")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x13BD584", Offset = "0x13BD584", VA = "0x13BD584")]
		public InteractionSlider()
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x13BD7E0", Offset = "0x13BD7E0", VA = "0x13BD7E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EC18", Offset = "0xB5EC18")]
		private void <Start>b__62_0(float f)
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x13BD7EC", Offset = "0x13BD7EC", VA = "0x13BD7EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EC28", Offset = "0xB5EC28")]
		private void <Start>b__62_1(float f)
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public class InteractionToggle : InteractionButton
	{
		[Serializable]
		[Token(Token = "0x2000649")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4784C", Offset = "0xB4784C")]
		private sealed class <>c
		{
			[Token(Token = "0x400219C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400219D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__24_0;

			[Token(Token = "0x400219E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__24_1;

			[Token(Token = "0x6002952")]
			[Address(RVA = "0x109569C", Offset = "0x109569C", VA = "0x109569C")]
			public <>c()
			{
			}

			[Token(Token = "0x6002953")]
			[Address(RVA = "0x10956A4", Offset = "0x10956A4", VA = "0x10956A4")]
			internal void <.ctor>b__24_0()
			{
			}

			[Token(Token = "0x6002954")]
			[Address(RVA = "0x10956A8", Offset = "0x10956A8", VA = "0x10956A8")]
			internal void <.ctor>b__24_1()
			{
			}
		}

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52A6C", Offset = "0xB52A6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB52A6C", Offset = "0xB52A6C")]
		public float toggledRestingHeight;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52AC0", Offset = "0xB52AC0")]
		private bool _isToggled;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A5")]
		[SerializeField]
		private bool _startToggled;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52B1C", Offset = "0xB52B1C")]
		[SerializeField]
		private UnityEvent _toggleEvent;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public Action OnToggle;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52B68", Offset = "0xB52B68")]
		[SerializeField]
		public UnityEvent _untoggleEvent;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public Action OnUntoggle;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private float _originalRestingHeight;

		[Token(Token = "0x170002CB")]
		public bool isToggled
		{
			[Token(Token = "0x6001CC2")]
			[Address(RVA = "0x1094E90", Offset = "0x1094E90", VA = "0x1094E90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CC3")]
			[Address(RVA = "0x1094E98", Offset = "0x1094E98", VA = "0x1094E98")]
			set
			{
			}
		}

		[Token(Token = "0x170002CC")]
		public float untoggledRestingHeight
		{
			[Token(Token = "0x6001CC4")]
			[Address(RVA = "0x1094F3C", Offset = "0x1094F3C", VA = "0x1094F3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002CD")]
		public Vector3 RelaxedToggledLocalPosition
		{
			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0x1094F44", Offset = "0x1094F44", VA = "0x1094F44")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002CE")]
		public override Vector3 RelaxedLocalPosition
		{
			[Token(Token = "0x6001CC6")]
			[Address(RVA = "0x1095064", Offset = "0x1095064", VA = "0x1095064", Slot = "42")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x10951CC", Offset = "0x10951CC", VA = "0x10951CC", Slot = "36")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x10951F8", Offset = "0x10951F8", VA = "0x10951F8", Slot = "39")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x1095314", Offset = "0x1095314", VA = "0x1095314", Slot = "37")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x10953C0", Offset = "0x10953C0", VA = "0x10953C0", Slot = "38")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x1095470", Offset = "0x1095470", VA = "0x1095470")]
		private void OnPressed()
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x1095480", Offset = "0x1095480", VA = "0x1095480")]
		public void Toggle()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x1095488", Offset = "0x1095488", VA = "0x1095488")]
		public void Untoggle()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x1095490", Offset = "0x1095490", VA = "0x1095490")]
		public InteractionToggle()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	public class ActivityManager<T>
	{
		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float activationRadius;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int activationLayerMask;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<int> activationLayerFunction;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<Collider, T> filter;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HashSet<T> _activeObjects;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool trackStateChanges;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HashSet<T> _activeObjectsLastFrame;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HashSet<T> _beganActiveObjects;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HashSet<T> _endedActiveObjects;

		[Token(Token = "0x40017B7")]
		[ThreadStatic]
		private static Collider[] s_colliderResultsBuffer;

		[Token(Token = "0x170002CF")]
		public HashSet<T> ActiveObjects
		{
			[Token(Token = "0x6001CCF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D0")]
		public HashSet<T> BeganActive
		{
			[Token(Token = "0x6001CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D1")]
		public HashSet<T> EndedActive
		{
			[Token(Token = "0x6001CD1")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CD2")]
		public ActivityManager(float activationRadius, Func<Collider, T> filter)
		{
		}

		[Token(Token = "0x6001CD3")]
		public void UpdateActivityQuery(Vector3? queryPosition, [Optional] List<LeapSpace> spaces)
		{
		}

		[Token(Token = "0x6001CD4")]
		private int GetSphereColliderResults(Vector3 position, ref Collider[] resultsBuffer)
		{
			return default(int);
		}

		[Token(Token = "0x6001CD5")]
		private void UpdateActiveList(int numResults, Collider[] results)
		{
		}

		[Token(Token = "0x6001CD6")]
		private Vector3 transformPoint(Vector3 worldPoint, LeapSpace space)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003D5")]
	public static class IInteractionBehaviourExtensions
	{
		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xF53B94", Offset = "0xF53B94", VA = "0xF53B94")]
		public static bool ShouldIgnoreHover(this IInteractionBehaviour intObj, InteractionController controller)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003D6")]
	public static class Vector3Extensions
	{
		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0x109E404", Offset = "0x109E404", VA = "0x109E404")]
		public static Vector3 ConstrainToSegment(this Vector3 position, Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x109E548", Offset = "0x109E548", VA = "0x109E548")]
		public static float LargestComp(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x109E5D8", Offset = "0x109E5D8", VA = "0x109E5D8")]
		public static int LargestCompIdx(this Vector3 v)
		{
			return default(int);
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0x109E600", Offset = "0x109E600", VA = "0x109E600")]
		public static Vector3 Abs(this Vector3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003D7")]
	public class KabschSolver
	{
		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] QuatBasis;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3[] DataCovariance;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 translation;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion OptimalRotation;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float scaleRatio;

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x109B7F4", Offset = "0x109B7F4", VA = "0x109B7F4")]
		public Matrix4x4 SolveKabsch(List<Vector3> inPoints, List<Vector3> refPoints, int optimalRotationIterations = 9, bool solveScale = false)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x109C438", Offset = "0x109C438", VA = "0x109C438")]
		private void extractRotation(Vector3[] A, ref Quaternion q, int optimalRotationIterations = 9)
		{
		}

		[Token(Token = "0x6001CDF")]
		[Address(RVA = "0x109C258", Offset = "0x109C258", VA = "0x109C258")]
		private Vector3[] TransposeMult(List<Vector3> vec1, List<Vector3> vec2, Vector3[] covariance)
		{
			return null;
		}

		[Token(Token = "0x6001CE0")]
		[Address(RVA = "0x109C82C", Offset = "0x109C82C", VA = "0x109C82C")]
		public static Vector3[] MatrixFromQuaternion(Quaternion q, Vector3[] covariance)
		{
			return null;
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0x109A744", Offset = "0x109A744", VA = "0x109A744")]
		public KabschSolver()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public static class FromMatrixExtension
	{
		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xF53768", Offset = "0xF53768", VA = "0xF53768")]
		public static Vector3 GetVector3(this Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xF5380C", Offset = "0xF5380C", VA = "0xF5380C")]
		public static Quaternion GetQuaternion(this Matrix4x4 m)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0xF539F4", Offset = "0xF539F4", VA = "0xF539F4")]
		public static void FillMatrixFromQuaternion(this Quaternion q, ref Vector3[] covariance)
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class PhysicsCallbacks : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200064A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4785C", Offset = "0xB4785C")]
		private sealed class <>c
		{
			[Token(Token = "0x400219F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action <>9__14_0;

			[Token(Token = "0x40021A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__14_1;

			[Token(Token = "0x6002956")]
			[Address(RVA = "0x109D774", Offset = "0x109D774", VA = "0x109D774")]
			public <>c()
			{
			}

			[Token(Token = "0x6002957")]
			[Address(RVA = "0x109D77C", Offset = "0x109D77C", VA = "0x109D77C")]
			internal void <.ctor>b__14_0()
			{
			}

			[Token(Token = "0x6002958")]
			[Address(RVA = "0x109D780", Offset = "0x109D780", VA = "0x109D780")]
			internal void <.ctor>b__14_1()
			{
			}
		}

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PhysicsCallbacks _instance;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action _onPrePhysics;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action _onPostPhysics;

		[Token(Token = "0x170002D2")]
		public static Action OnPrePhysics
		{
			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0x109D1D0", Offset = "0x109D1D0", VA = "0x109D1D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CE6")]
			[Address(RVA = "0x109D290", Offset = "0x109D290", VA = "0x109D290")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public static Action OnPostPhysics
		{
			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0x109D2BC", Offset = "0x109D2BC", VA = "0x109D2BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0x109D2DC", Offset = "0x109D2DC", VA = "0x109D2DC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public static PhysicsCallbacks Provider
		{
			[Token(Token = "0x6001CE9")]
			[Address(RVA = "0x109D1F0", Offset = "0x109D1F0", VA = "0x109D1F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x109D308", Offset = "0x109D308", VA = "0x109D308")]
		private static PhysicsCallbacks ConstructSingleton()
		{
			return null;
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x109D574", Offset = "0x109D574", VA = "0x109D574")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x109D590", Offset = "0x109D590", VA = "0x109D590")]
		private void OnTriggerStay()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x109D5AC", Offset = "0x109D5AC", VA = "0x109D5AC")]
		public PhysicsCallbacks()
		{
		}
	}
}
namespace Leap.Unity.Interaction.Tests
{
	[Token(Token = "0x20003DA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB45D70", Offset = "0xB45D70")]
	public class TestInteractionStateColor : MonoBehaviour
	{
		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionBehaviour intObj;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material _mat;

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x109E108", Offset = "0x109E108", VA = "0x109E108")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x109E1CC", Offset = "0x109E1CC", VA = "0x109E1CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x109E3FC", Offset = "0x109E3FC", VA = "0x109E3FC")]
		public TestInteractionStateColor()
		{
		}
	}
}
namespace Leap.Unity.Interaction.Internal
{
	[Token(Token = "0x20003DB")]
	public class HeuristicGrabClassifier
	{
		[Token(Token = "0x200064B")]
		private enum GraspUpdateMode
		{
			[Token(Token = "0x40021A3")]
			BeginGrasp,
			[Token(Token = "0x40021A4")]
			ReleaseGrasp
		}

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public InteractionHand interactionHand;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<IInteractionBehaviour, GrabClassifierHeuristics.GrabClassifier> _classifiers;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GrabClassifierHeuristics.ClassifierParameters _defaultGrabParams;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabClassifierHeuristics.ClassifierParameters _scaledGrabParams;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Collider[][] _collidingCandidates;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int[] _numberOfColliders;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] _fingerTipPositions;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] _fingerKnucklePositions;

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x1099130", Offset = "0x1099130", VA = "0x1099130")]
		public HeuristicGrabClassifier(InteractionHand intHand, float fingerStickiness = 0f, float thumbStickiness = 0.04f, float maxCurl = 0.65f, float minCurl = -0.1f, float fingerRadius = 0.012f, float thumbRadius = 0.017f, float grabCooldown = 0.2f, float maxCurlVel = 0f, float grabbedMaxCurlVel = -0.025f, float maxGrabDistance = 0.05f, int layerMask = 0, QueryTriggerInteraction queryTriggers = QueryTriggerInteraction.UseGlobal)
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x1099484", Offset = "0x1099484", VA = "0x1099484")]
		public void FixedUpdateClassifierHandState([Optional] Transform headTransform)
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x109977C", Offset = "0x109977C", VA = "0x109977C")]
		public bool FixedUpdateClassifierGrasp(out IInteractionBehaviour graspedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x1099CF4", Offset = "0x1099CF4", VA = "0x1099CF4")]
		public bool FixedUpdateClassifierRelease(out IInteractionBehaviour releasedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x10999FC", Offset = "0x10999FC", VA = "0x10999FC")]
		private bool updateBehaviour(IInteractionBehaviour behaviour, Hand hand, GraspUpdateMode graspMode, bool ignoreTemporal = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x109A120", Offset = "0x109A120", VA = "0x109A120")]
		public void UnregisterInteractionBehaviour(IInteractionBehaviour behaviour)
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x109A188", Offset = "0x109A188", VA = "0x109A188")]
		public void NotifyGraspForciblyReleased(IInteractionBehaviour behaviour)
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x109A254", Offset = "0x109A254", VA = "0x109A254")]
		public void GetGraspingFingertipPositions(IInteractionBehaviour behaviour, Vector3[] fingertipPositionsBuffer, out int numGraspingFingertips)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x109A388", Offset = "0x109A388", VA = "0x109A388")]
		public bool TryGrasp(IInteractionBehaviour intObj, Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x109A428", Offset = "0x109A428", VA = "0x109A428")]
		public void SwapClassifierState(IInteractionBehaviour original, IInteractionBehaviour replacement)
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x1099E24", Offset = "0x1099E24", VA = "0x1099E24")]
		protected void FillClassifier(IInteractionBehaviour behaviour, Hand hand, ref GrabClassifierHeuristics.GrabClassifier classifier)
		{
		}
	}
	[Token(Token = "0x20003DC")]
	public delegate void GraspedMovementEvent(Vector3 oldPosition, Quaternion oldRotation, Vector3 newPosition, Quaternion newRotation, List<InteractionController> graspingControllers);
}
namespace Leap.Unity.Interaction.Examples
{
	[Token(Token = "0x20003DD")]
	public class MovePoseExample : MonoBehaviour
	{
		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Pose _selfToTargetPose;

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xF53438", Offset = "0xF53438", VA = "0xF53438")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xF53554", Offset = "0xF53554", VA = "0xF53554")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xF535D8", Offset = "0xF535D8", VA = "0xF535D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xF536E0", Offset = "0xF536E0", VA = "0xF536E0")]
		public MovePoseExample()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class HideInteractionHandWhenControllerMoving : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200064C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4786C", Offset = "0xB4786C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Transform, InteractionHand> <>9__6_0;

			[Token(Token = "0x40021A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<InteractionHand, bool> <>9__6_1;

			[Token(Token = "0x600295A")]
			[Address(RVA = "0xF5336C", Offset = "0xF5336C", VA = "0xF5336C")]
			public <>c()
			{
			}

			[Token(Token = "0x600295B")]
			[Address(RVA = "0xF53374", Offset = "0xF53374", VA = "0xF53374")]
			internal InteractionHand <Reset>b__6_0(Transform t)
			{
				return null;
			}

			[Token(Token = "0x600295C")]
			[Address(RVA = "0xF533CC", Offset = "0xF533CC", VA = "0xF533CC")]
			internal bool <Reset>b__6_1(InteractionHand h)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionXRController intCtrl;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionHand intHand;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnInteractionHandEnabled;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnInteractionHandDisabled;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _handSeparationDistance;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _handHoldingDistance;

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xF52C68", Offset = "0xF52C68", VA = "0xF52C68")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xF53038", Offset = "0xF53038", VA = "0xF53038")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xF53290", Offset = "0xF53290", VA = "0xF53290")]
		public HideInteractionHandWhenControllerMoving()
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xF532A4", Offset = "0xF532A4", VA = "0xF532A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5ECB8", Offset = "0xB5ECB8")]
		private bool <Reset>b__6_2(InteractionHand h)
		{
			return default(bool);
		}
	}
}
namespace Leap.Unity.GraphicalRenderer
{
	[Token(Token = "0x20003DF")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public abstract class LeapGraphic : MonoBehaviour, ISpaceComponent, ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x200064D")]
		public class FeatureDataList : MultiTypedList<LeapFeatureData, LeapTextureData, LeapSpriteData, LeapRuntimeTintData, LeapBlendShapeData, CustomFloatChannelData, CustomVectorChannelData, CustomColorChannelData, CustomMatrixChannelData>
		{
			[Token(Token = "0x600295D")]
			[Address(RVA = "0x10327CC", Offset = "0x10327CC", VA = "0x10327CC")]
			public FeatureDataList()
			{
			}
		}

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected LeapSpaceAnchor _anchor;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected FeatureDataList _featureData;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected LeapGraphicRenderer _attachedRenderer;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected int _attachedGroupIndex;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected string _favoriteGroupName;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected SerializableType _preferredRendererType;

		[NonSerialized]
		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _willBeAttached;

		[NonSerialized]
		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool _willBeDetached;

		[NonSerialized]
		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LeapGraphicGroup _groupToBeAttachedTo;

		[NonSerialized]
		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _isRepresentationDirty;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<LeapGraphicGroup> OnAttachedToGroupEvent;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action OnDetachedFromGroupEvent;

		[Token(Token = "0x170002D5")]
		public bool isRepresentationDirty
		{
			[Token(Token = "0x6001D12")]
			[Address(RVA = "0x1031AA4", Offset = "0x1031AA4", VA = "0x1031AA4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D13")]
			[Address(RVA = "0x1031AAC", Offset = "0x1031AAC", VA = "0x1031AAC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public bool isRepresentationDirtyOrEditTime
		{
			[Token(Token = "0x6001D14")]
			[Address(RVA = "0x1031AB8", Offset = "0x1031AB8", VA = "0x1031AB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D7")]
		public string favoriteGroupName
		{
			[Token(Token = "0x6001D15")]
			[Address(RVA = "0x1031AC0", Offset = "0x1031AC0", VA = "0x1031AC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D16")]
			[Address(RVA = "0x1031AC8", Offset = "0x1031AC8", VA = "0x1031AC8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D8")]
		public LeapSpaceAnchor anchor
		{
			[Token(Token = "0x6001D17")]
			[Address(RVA = "0x1031AD0", Offset = "0x1031AD0", VA = "0x1031AD0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D9")]
		public ITransformer transformer
		{
			[Token(Token = "0x6001D18")]
			[Address(RVA = "0x102CF3C", Offset = "0x102CF3C", VA = "0x102CF3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		public IList<LeapFeatureData> featureData
		{
			[Token(Token = "0x6001D19")]
			[Address(RVA = "0x1031AD8", Offset = "0x1031AD8", VA = "0x1031AD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DB")]
		public LeapGraphicGroup attachedGroup
		{
			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0x1031AE0", Offset = "0x1031AE0", VA = "0x1031AE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public bool isAttachedToGroup
		{
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0x1031B98", Offset = "0x1031B98", VA = "0x1031B98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DD")]
		public bool willbeAttached
		{
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x1031BB4", Offset = "0x1031BB4", VA = "0x1031BB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DE")]
		public bool willbeDetached
		{
			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0x1031BBC", Offset = "0x1031BBC", VA = "0x1031BBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DF")]
		public Type preferredRendererType
		{
			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0x1031BC4", Offset = "0x1031BC4", VA = "0x1031BC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x10315C8", Offset = "0x10315C8", VA = "0x10315C8")]
		public void SetBlendShapeAmount(float amount)
		{
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0x1031650", Offset = "0x1031650", VA = "0x1031650")]
		public float GetBlendShapeAmount()
		{
			return default(float);
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0x10316B0", Offset = "0x10316B0", VA = "0x10316B0")]
		public void SetCustomChannel(string channelName, Color color)
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0x1031758", Offset = "0x1031758", VA = "0x1031758")]
		public void SetCustomChannel(string channelName, float value)
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x10317E0", Offset = "0x10317E0", VA = "0x10317E0")]
		public void SetCustomChannel(string channelName, Matrix4x4 value)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x103188C", Offset = "0x103188C", VA = "0x103188C")]
		public void SetCustomChannel(string channelName, Vector4 value)
		{
		}

		[Token(Token = "0x6001D0E")]
		public T GetCustomChannel<T>(string channelName) where T : CustomChannelDataBase
		{
			return null;
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x1031934", Offset = "0x1031934", VA = "0x1031934")]
		public void SetRuntimeTint(Color color)
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x10319C4", Offset = "0x10319C4", VA = "0x10319C4")]
		public void SetRuntimeTint(string htmlString)
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0x1031A40", Offset = "0x1031A40", VA = "0x1031A40")]
		public Color GetRuntimeTint()
		{
			return default(Color);
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x1031C2C", Offset = "0x1031C2C", VA = "0x1031C2C")]
		public bool TryDetach()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D20")]
		public T GetFeatureData<T>() where T : LeapFeatureData
		{
			return null;
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x1031DA4", Offset = "0x1031DA4", VA = "0x1031DA4", Slot = "7")]
		public virtual void NotifyWillBeAttached(LeapGraphicGroup toBeAttachedTo)
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x1031DB4", Offset = "0x1031DB4", VA = "0x1031DB4", Slot = "8")]
		public virtual void CancelWillBeAttached()
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x1031DC0", Offset = "0x1031DC0", VA = "0x1031DC0", Slot = "9")]
		public virtual void NotifyWillBeDetached(LeapGraphicGroup toBeDetachedFrom)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x1031DCC", Offset = "0x1031DCC", VA = "0x1031DCC", Slot = "10")]
		public virtual void CancelWillBeDetached()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x1031DD4", Offset = "0x1031DD4", VA = "0x1031DD4", Slot = "11")]
		public virtual void OnAttachedToGroup(LeapGraphicGroup group, LeapSpaceAnchor anchor)
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x1032008", Offset = "0x1032008", VA = "0x1032008")]
		public void OnUpdateAnchor(LeapSpaceAnchor anchor)
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x1032010", Offset = "0x1032010", VA = "0x1032010", Slot = "12")]
		public virtual void OnDetachedFromGroup()
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x10320B0", Offset = "0x10320B0", VA = "0x10320B0", Slot = "13")]
		public virtual void OnAssignFeatureData(List<LeapFeatureData> data)
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x10321D8", Offset = "0x10321D8", VA = "0x10321D8", Slot = "14")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x1032414", Offset = "0x1032414", VA = "0x1032414", Slot = "15")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x1032418", Offset = "0x1032418", VA = "0x1032418", Slot = "16")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x1032694", Offset = "0x1032694", VA = "0x1032694", Slot = "17")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x1032698", Offset = "0x1032698", VA = "0x1032698", Slot = "18")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x10326DC", Offset = "0x10326DC", VA = "0x10326DC", Slot = "19")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x10326E0", Offset = "0x10326E0", VA = "0x10326E0", Slot = "20")]
		public virtual void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x10326E4", Offset = "0x10326E4", VA = "0x10326E4", Slot = "21")]
		public virtual void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x1031EA4", Offset = "0x1031EA4", VA = "0x1031EA4")]
		private void patchReferences()
		{
		}

		[Token(Token = "0x6001D32")]
		private T getFeatureDataOrThrow<T>() where T : LeapFeatureData
		{
			return null;
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x1032758", Offset = "0x1032758", VA = "0x1032758")]
		protected LeapGraphic()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public interface ILeapInternalGraphicGroup
	{
		[Token(Token = "0x170002E0")]
		LeapGraphicRenderer renderer
		{
			[Token(Token = "0x6001D34")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x20003E1")]
	public class LeapGraphicGroup : ISerializationCallbackReceiver, ILeapInternalGraphicGroup
	{
		[Serializable]
		[Token(Token = "0x200064E")]
		public class FeatureList : MultiTypedList<LeapGraphicFeatureBase, LeapTextureFeature, LeapSpriteFeature, LeapRuntimeTintFeature, LeapBlendShapeFeature, CustomFloatChannelFeature, CustomVectorChannelFeature, CustomColorChannelFeature, CustomMatrixChannelFeature>
		{
			[Token(Token = "0x600295E")]
			[Address(RVA = "0xFF693C", Offset = "0xFF693C", VA = "0xFF693C")]
			public FeatureList()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200064F")]
		public class RenderingMethodReference : MultiTypedReference<LeapRenderingMethod, LeapBakedRenderer, LeapDynamicRenderer, LeapTextRenderer>
		{
			[Token(Token = "0x600295F")]
			[Address(RVA = "0xFF698C", Offset = "0xFF698C", VA = "0xFF698C")]
			public RenderingMethodReference()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000650")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4787C", Offset = "0xB4787C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SupportInfo> <>9__33_0;

			[Token(Token = "0x40021AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<SupportInfo> <>9__33_1;

			[Token(Token = "0x6002961")]
			[Address(RVA = "0xFF68C4", Offset = "0xFF68C4", VA = "0xFF68C4")]
			public <>c()
			{
			}

			[Token(Token = "0x6002962")]
			[Address(RVA = "0xFF68CC", Offset = "0xFF68CC", VA = "0xFF68CC")]
			internal SupportInfo <RebuildFeatureSupportInfo>b__33_0()
			{
				return default(SupportInfo);
			}

			[Token(Token = "0x6002963")]
			[Address(RVA = "0xFF68E4", Offset = "0xFF68E4", VA = "0xFF68E4")]
			internal SupportInfo <RebuildFeatureSupportInfo>b__33_1()
			{
				return default(SupportInfo);
			}
		}

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string _groupName;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RenderingMethodReference _renderingMethod;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private FeatureList _features;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private LeapGraphicRenderer _renderer;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private List<LeapGraphic> _graphics;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<SupportInfo> _supportInfo;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private bool _addRemoveSupported;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HashSet<LeapGraphic> _toAttach;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HashSet<LeapGraphic> _toDetach;

		[Token(Token = "0x170002E1")]
		public string name
		{
			[Token(Token = "0x6001D35")]
			[Address(RVA = "0x1032850", Offset = "0x1032850", VA = "0x1032850")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E2")]
		public LeapGraphicRenderer renderer
		{
			[Token(Token = "0x6001D36")]
			[Address(RVA = "0x1032858", Offset = "0x1032858", VA = "0x1032858")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		private LeapGraphicRenderer Leap.Unity.GraphicalRenderer.ILeapInternalGraphicGroup.renderer
		{
			[Token(Token = "0x6001D37")]
			[Address(RVA = "0x1032860", Offset = "0x1032860", VA = "0x1032860", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public LeapRenderingMethod renderingMethod
		{
			[Token(Token = "0x6001D38")]
			[Address(RVA = "0x102E2C0", Offset = "0x102E2C0", VA = "0x102E2C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E5")]
		public IList<LeapGraphicFeatureBase> features
		{
			[Token(Token = "0x6001D39")]
			[Address(RVA = "0x1032868", Offset = "0x1032868", VA = "0x1032868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E6")]
		public List<LeapGraphic> graphics
		{
			[Token(Token = "0x6001D3A")]
			[Address(RVA = "0x1032870", Offset = "0x1032870", VA = "0x1032870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		public int toBeAttachedCount
		{
			[Token(Token = "0x6001D3B")]
			[Address(RVA = "0x1032878", Offset = "0x1032878", VA = "0x1032878")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E8")]
		public List<SupportInfo> supportInfo
		{
			[Token(Token = "0x6001D3C")]
			[Address(RVA = "0x10328D8", Offset = "0x10328D8", VA = "0x10328D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E9")]
		public bool addRemoveSupported
		{
			[Token(Token = "0x6001D3D")]
			[Address(RVA = "0x10328E0", Offset = "0x10328E0", VA = "0x10328E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x10324C8", Offset = "0x10324C8", VA = "0x10324C8")]
		public bool TryAddGraphic(LeapGraphic graphic)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x10328E8", Offset = "0x10328E8", VA = "0x10328E8")]
		public void RefreshGraphicAnchors()
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x1031C60", Offset = "0x1031C60", VA = "0x1031C60")]
		public bool TryRemoveGraphic(LeapGraphic graphic)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D41")]
		public bool GetSupportedFeatures<T>(List<T> features) where T : LeapGraphicFeatureBase
		{
			return default(bool);
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x1032A78", Offset = "0x1032A78", VA = "0x1032A78")]
		public void UpdateRenderer()
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x1033530", Offset = "0x1033530", VA = "0x1033530")]
		public void RebuildFeatureData()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x1033B84", Offset = "0x1033B84", VA = "0x1033B84")]
		public void RebuildFeatureSupportInfo()
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x1034A20", Offset = "0x1034A20", VA = "0x1034A20")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x1034D04", Offset = "0x1034D04", VA = "0x1034D04")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x1032B94", Offset = "0x1032B94", VA = "0x1032B94")]
		private void handleRuntimeAddRemove()
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x1034D38", Offset = "0x1034D38", VA = "0x1034D38")]
		private bool addRemoveSupportedOrEditTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x1034D40", Offset = "0x1034D40", VA = "0x1034D40", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x1034D44", Offset = "0x1034D44", VA = "0x1034D44", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x1034F10", Offset = "0x1034F10", VA = "0x1034F10")]
		public LeapGraphicGroup()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	[ExecuteInEditMode]
	public class LeapGraphicRenderer : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000651")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4788C", Offset = "0xB4788C")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40021AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x6002964")]
			[Address(RVA = "0xFF6AD4", Offset = "0xFF6AD4", VA = "0xFF6AD4")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6002965")]
			[Address(RVA = "0xFF7A70", Offset = "0xFF7A70", VA = "0xFF7A70")]
			internal bool <FindGroup>b__0(LeapGraphicGroup g)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000652")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4789C", Offset = "0xB4789C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<LeapSpace, bool> <>9__21_0;

			[Token(Token = "0x6002967")]
			[Address(RVA = "0xFF7A4C", Offset = "0xFF7A4C", VA = "0xFF7A4C")]
			public <>c()
			{
			}

			[Token(Token = "0x6002968")]
			[Address(RVA = "0xFF7A54", Offset = "0xFF7A54", VA = "0xFF7A54")]
			internal bool <validateSpaceComponent>b__21_0(LeapSpace s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int _selectedGroup;

		[Token(Token = "0x40017E8")]
		public const string FEATURE_PREFIX = "GRAPHIC_RENDERER_";

		[Token(Token = "0x40017E9")]
		public const string PROPERTY_PREFIX = "_GraphicRenderer";

		[Token(Token = "0x40017EA")]
		public const string FEATURE_MOVEMENT_TRANSLATION = "GRAPHIC_RENDERER_MOVEMENT_TRANSLATION";

		[Token(Token = "0x40017EB")]
		public const string FEATURE_MOVEMENT_FULL = "GRAPHIC_RENDERER_MOVEMENT_FULL";

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LeapSpace _space;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _lastSpaceWasNull;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<LeapGraphicGroup> _groups;

		[Token(Token = "0x170002EA")]
		public LeapSpace space
		{
			[Token(Token = "0x6001D4C")]
			[Address(RVA = "0xFF69DC", Offset = "0xFF69DC", VA = "0xFF69DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EB")]
		public List<LeapGraphicGroup> groups
		{
			[Token(Token = "0x6001D4D")]
			[Address(RVA = "0xFF69E4", Offset = "0xFF69E4", VA = "0xFF69E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xFF69EC", Offset = "0xFF69EC", VA = "0xFF69EC")]
		public LeapGraphicGroup FindGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xFF6ADC", Offset = "0xFF6ADC", VA = "0xFF6ADC")]
		public bool TryAddGraphic(LeapGraphic graphic)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xFF6FA0", Offset = "0xFF6FA0", VA = "0xFF6FA0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xFF6FA4", Offset = "0xFF6FA4", VA = "0xFF6FA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xFF6FA8", Offset = "0xFF6FA8", VA = "0xFF6FA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xFF7108", Offset = "0xFF7108", VA = "0xFF7108")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xFF720C", Offset = "0xFF720C", VA = "0xFF720C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xFF73B4", Offset = "0xFF73B4", VA = "0xFF73B4")]
		private LeapGraphicRenderer()
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0xFF7210", Offset = "0xFF7210", VA = "0xFF7210")]
		private void doLateUpdateRuntime()
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xFF742C", Offset = "0xFF742C", VA = "0xFF742C")]
		public void validateSpaceComponent()
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xFF7720", Offset = "0xFF7720", VA = "0xFF7720")]
		private void onRuntimeSpaceChanged()
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xFF7880", Offset = "0xFF7880", VA = "0xFF7880", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0xFF7884", Offset = "0xFF7884", VA = "0xFF7884", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	[DisallowMultipleComponent]
	public abstract class LeapMeshGraphicBase : LeapGraphic
	{
		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52D64", Offset = "0xB52D64")]
		[EditTimeOnly]
		public Color vertexColor;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB52DB0", Offset = "0xB52DB0")]
		private Mesh <mesh>k__BackingField;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB52DC0", Offset = "0xB52DC0")]
		private UVChannelFlags <remappableChannels>k__BackingField;

		[Token(Token = "0x170002EC")]
		public Mesh mesh
		{
			[Token(Token = "0x6001D5B")]
			[Address(RVA = "0xFF817C", Offset = "0xFF817C", VA = "0xFF817C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5ECC8", Offset = "0xB5ECC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0xFF8184", Offset = "0xFF8184", VA = "0xFF8184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5ECD8", Offset = "0xB5ECD8")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public UVChannelFlags remappableChannels
		{
			[Token(Token = "0x6001D5D")]
			[Address(RVA = "0xFF818C", Offset = "0xFF818C", VA = "0xFF818C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5ECE8", Offset = "0xB5ECE8")]
			get
			{
				return default(UVChannelFlags);
			}
			[Token(Token = "0x6001D5E")]
			[Address(RVA = "0xFF8194", Offset = "0xFF8194", VA = "0xFF8194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5ECF8", Offset = "0xB5ECF8")]
			protected set
			{
			}
		}

		[Token(Token = "0x6001D5F")]
		public abstract void RefreshMeshData();

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xFF8148", Offset = "0xFF8148", VA = "0xFF8148")]
		public LeapMeshGraphicBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E4")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45E00", Offset = "0xB45E00")]
	public class LeapBlendShapeData : LeapFeatureData
	{
		[Token(Token = "0x2000653")]
		public enum BlendShapeType
		{
			[Token(Token = "0x40021AF")]
			Translation,
			[Token(Token = "0x40021B0")]
			Rotation,
			[Token(Token = "0x40021B1")]
			Scale,
			[Token(Token = "0x40021B2")]
			Transform,
			[Token(Token = "0x40021B3")]
			Mesh
		}

		[Serializable]
		[Token(Token = "0x2000654")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478AC", Offset = "0xB478AC")]
		private sealed class <>c
		{
			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Vector3, Vector3, Vector3> <>9__9_0;

			[Token(Token = "0x600296A")]
			[Address(RVA = "0x102E158", Offset = "0x102E158", VA = "0x102E158")]
			public <>c()
			{
			}

			[Token(Token = "0x600296B")]
			[Address(RVA = "0x102E160", Offset = "0x102E160", VA = "0x102E160")]
			internal Vector3 <TryGetBlendShape>b__9_0(Vector3 a, Vector3 b)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB52DD0", Offset = "0xB52DD0")]
		[SerializeField]
		private float _amount;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[EditTimeOnly]
		[SerializeField]
		private BlendShapeType _type;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[EditTimeOnly]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB52E48", Offset = "0xB52E48")]
		[SerializeField]
		private float _scale;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[EditTimeOnly]
		[SerializeField]
		private Vector3 _translation;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[EditTimeOnly]
		[SerializeField]
		private Vector3 _rotation;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EditTimeOnly]
		[SerializeField]
		private Transform _transform;

		[Token(Token = "0x170002EE")]
		public float amount
		{
			[Token(Token = "0x6001D61")]
			[Address(RVA = "0x102D924", Offset = "0x102D924", VA = "0x102D924")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D62")]
			[Address(RVA = "0x102D92C", Offset = "0x102D92C", VA = "0x102D92C")]
			set
			{
			}
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x102D964", Offset = "0x102D964", VA = "0x102D964")]
		public bool TryGetBlendShape(List<Vector3> blendVerts)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x102E050", Offset = "0x102E050", VA = "0x102E050")]
		public LeapBlendShapeData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E5")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45E3C", Offset = "0xB45E3C")]
	public class LeapBlendShapeFeature : LeapGraphicFeature<LeapBlendShapeData>
	{
		[Token(Token = "0x40017F8")]
		public const string FEATURE_NAME = "GRAPHIC_RENDERER_BLEND_SHAPES";

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x102E208", Offset = "0x102E208", VA = "0x102E208", Slot = "4")]
		public override SupportInfo GetSupportInfo(LeapGraphicGroup group)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x102E2E0", Offset = "0x102E2E0", VA = "0x102E2E0")]
		public LeapBlendShapeFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E6")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45E78", Offset = "0xB45E78")]
	public class CustomColorChannelData : CustomChannelDataBase<Color>
	{
		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x102BA8C", Offset = "0x102BA8C", VA = "0x102BA8C")]
		public CustomColorChannelData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E7")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45EB4", Offset = "0xB45EB4")]
	public class CustomColorChannelFeature : CustomChannelFeatureBase<CustomColorChannelData>
	{
		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x102BADC", Offset = "0x102BADC", VA = "0x102BADC")]
		public CustomColorChannelFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E8")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45EF0", Offset = "0xB45EF0")]
	public class CustomFloatChannelData : CustomChannelDataBase<float>
	{
		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x102BB2C", Offset = "0x102BB2C", VA = "0x102BB2C")]
		public CustomFloatChannelData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003E9")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45F2C", Offset = "0xB45F2C")]
	public class CustomFloatChannelFeature : CustomChannelFeatureBase<CustomFloatChannelData>
	{
		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x102BB7C", Offset = "0x102BB7C", VA = "0x102BB7C")]
		public CustomFloatChannelFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003EA")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45F68", Offset = "0xB45F68")]
	public class CustomMatrixChannelData : CustomChannelDataBase<Matrix4x4>
	{
		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x102BBCC", Offset = "0x102BBCC", VA = "0x102BBCC")]
		public CustomMatrixChannelData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003EB")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45FA4", Offset = "0xB45FA4")]
	public class CustomMatrixChannelFeature : CustomChannelFeatureBase<CustomMatrixChannelData>
	{
		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x102BC1C", Offset = "0x102BC1C", VA = "0x102BC1C")]
		public CustomMatrixChannelFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003EC")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB45FE0", Offset = "0xB45FE0")]
	public class CustomVectorChannelData : CustomChannelDataBase<Vector4>
	{
		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x102BC6C", Offset = "0x102BC6C", VA = "0x102BC6C")]
		public CustomVectorChannelData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003ED")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB4601C", Offset = "0xB4601C")]
	public class CustomVectorChannelFeature : CustomChannelFeatureBase<CustomVectorChannelData>
	{
		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x102BCBC", Offset = "0x102BCBC", VA = "0x102BCBC")]
		public CustomVectorChannelFeature()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public abstract class CustomChannelDataBase : LeapFeatureData
	{
		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x102BA7C", Offset = "0x102BA7C", VA = "0x102BA7C")]
		protected CustomChannelDataBase()
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public abstract class CustomChannelDataBase<T> : CustomChannelDataBase
	{
		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private T _value;

		[Token(Token = "0x170002EF")]
		public T value
		{
			[Token(Token = "0x6001D70")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6001D71")]
			set
			{
			}
		}

		[Token(Token = "0x6001D72")]
		protected CustomChannelDataBase()
		{
		}
	}
	[Token(Token = "0x20003F0")]
	public interface ICustomChannelFeature
	{
		[Token(Token = "0x170002F0")]
		string channelName
		{
			[Token(Token = "0x6001D73")]
			get;
		}
	}
	[Serializable]
	[Token(Token = "0x20003F1")]
	public abstract class CustomChannelFeatureBase<T> : LeapGraphicFeature<T>, ICustomChannelFeature where T : LeapFeatureData, new()
	{
		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB52F4C", Offset = "0xB52F4C")]
		[Delayed]
		[EditTimeOnly]
		[SerializeField]
		private string _channelName;

		[Token(Token = "0x170002F1")]
		public string channelName
		{
			[Token(Token = "0x6001D74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D75")]
		public override SupportInfo GetSupportInfo(LeapGraphicGroup group)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001D76")]
		protected CustomChannelFeatureBase()
		{
		}
	}
	[Token(Token = "0x20003F2")]
	public static class LeapSpriteFeatureExtension
	{
		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x1000390", Offset = "0x1000390", VA = "0x1000390")]
		public static LeapSpriteData Sprite(this LeapGraphic graphic)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003F3")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB46068", Offset = "0xB46068")]
	public class LeapSpriteData : LeapFeatureData
	{
		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB52FB8", Offset = "0xB52FB8")]
		[EditTimeOnly]
		[SerializeField]
		private Sprite _sprite;

		[Token(Token = "0x170002F2")]
		public Sprite sprite
		{
			[Token(Token = "0x6001D78")]
			[Address(RVA = "0x10002F0", Offset = "0x10002F0", VA = "0x10002F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D79")]
			[Address(RVA = "0x10002F8", Offset = "0x10002F8", VA = "0x10002F8")]
			set
			{
			}
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x1000320", Offset = "0x1000320", VA = "0x1000320")]
		public LeapSpriteData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F4")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB460A4", Offset = "0xB460A4")]
	public class LeapSpriteFeature : LeapGraphicFeature<LeapSpriteData>
	{
		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Delayed]
		[EditTimeOnly]
		public string propertyName;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[EditTimeOnly]
		public UVChannelFlags channel;

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x1000328", Offset = "0x1000328", VA = "0x1000328")]
		public LeapSpriteFeature()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public static class LeapTextureFeatureExtension
	{
		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x100411C", Offset = "0x100411C", VA = "0x100411C")]
		public static LeapTextureData Texture(this LeapGraphic graphic)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20003F6")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB460F0", Offset = "0xB460F0")]
	public class LeapTextureData : LeapFeatureData
	{
		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB5305C", Offset = "0xB5305C")]
		[EditTimeOnly]
		[SerializeField]
		private Texture2D _texture;

		[Token(Token = "0x170002F3")]
		public Texture2D texture
		{
			[Token(Token = "0x6001D7D")]
			[Address(RVA = "0x100407C", Offset = "0x100407C", VA = "0x100407C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0x1004084", Offset = "0x1004084", VA = "0x1004084")]
			set
			{
			}
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x10040AC", Offset = "0x10040AC", VA = "0x10040AC")]
		public LeapTextureData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB4612C", Offset = "0xB4612C")]
	public class LeapTextureFeature : LeapGraphicFeature<LeapTextureData>
	{
		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Delayed]
		[EditTimeOnly]
		public string propertyName;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[EditTimeOnly]
		public UVChannelFlags channel;

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x10040B4", Offset = "0x10040B4", VA = "0x10040B4")]
		public LeapTextureFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F8")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB46168", Offset = "0xB46168")]
	public class LeapRuntimeTintData : LeapFeatureData
	{
		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color _color;

		[Token(Token = "0x170002F4")]
		public Color color
		{
			[Token(Token = "0x6001D81")]
			[Address(RVA = "0xFFF8E0", Offset = "0xFFF8E0", VA = "0xFFF8E0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001D82")]
			[Address(RVA = "0xFFF8EC", Offset = "0xFFF8EC", VA = "0xFFF8EC")]
			set
			{
			}
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0xFFF950", Offset = "0xFFF950", VA = "0xFFF950")]
		public LeapRuntimeTintData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F9")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB461A4", Offset = "0xB461A4")]
	public class LeapRuntimeTintFeature : LeapGraphicFeature<LeapRuntimeTintData>
	{
		[Token(Token = "0x4001802")]
		public const string FEATURE_NAME = "GRAPHIC_RENDERER_TINTING";

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0xFFF984", Offset = "0xFFF984", VA = "0xFFF984")]
		public LeapRuntimeTintFeature()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class LeapMeshGraphic : LeapMeshGraphicBase
	{
		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53110", Offset = "0xB53110")]
		[EditTimeOnly]
		[SerializeField]
		private Mesh _mesh;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5316C", Offset = "0xB5316C")]
		[EditTimeOnly]
		[EnumFlags]
		[SerializeField]
		private UVChannelFlags _remappableChannels;

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0xFF8070", Offset = "0xFF8070", VA = "0xFF8070")]
		public void SetMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0xFF8128", Offset = "0xFF8128", VA = "0xFF8128", Slot = "22")]
		public override void RefreshMeshData()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0xFF813C", Offset = "0xFF813C", VA = "0xFF813C")]
		public LeapMeshGraphic()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class LeapTextGraphic : LeapGraphic
	{
		[Token(Token = "0x2000655")]
		public enum HorizontalAlignment
		{
			[Token(Token = "0x40021B7")]
			Left,
			[Token(Token = "0x40021B8")]
			Center,
			[Token(Token = "0x40021B9")]
			Right
		}

		[Token(Token = "0x2000656")]
		public enum VerticalAlignment
		{
			[Token(Token = "0x40021BB")]
			Top,
			[Token(Token = "0x40021BC")]
			Center,
			[Token(Token = "0x40021BD")]
			Bottom
		}

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xB531D8", Offset = "0xB531D8")]
		[SerializeField]
		private string _text;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB53210", Offset = "0xB53210")]
		[EditTimeOnly]
		[SerializeField]
		private FontStyle _fontStyle;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[EditTimeOnly]
		[SerializeField]
		private int _fontSize;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[EditTimeOnly]
		[SerializeField]
		private float _lineSpacing;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB532DC", Offset = "0xB532DC")]
		[EditTimeOnly]
		[SerializeField]
		private HorizontalAlignment _horizontalAlignment;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[EditTimeOnly]
		[SerializeField]
		private VerticalAlignment _verticalAlignment;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[EditTimeOnly]
		[SerializeField]
		private Color _color;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _tokensDirty;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<TextWrapper.Token> _cachedTokens;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Rect _prevRect;

		[Token(Token = "0x170002F5")]
		public List<TextWrapper.Token> tokens
		{
			[Token(Token = "0x6001D88")]
			[Address(RVA = "0x10008C0", Offset = "0x10008C0", VA = "0x10008C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		public string text
		{
			[Token(Token = "0x6001D89")]
			[Address(RVA = "0x1000970", Offset = "0x1000970", VA = "0x1000970")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0x1000B28", Offset = "0x1000B28", VA = "0x1000B28")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public FontStyle fontStyle
		{
			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0x1000B70", Offset = "0x1000B70", VA = "0x1000B70")]
			get
			{
				return default(FontStyle);
			}
			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0x1000B78", Offset = "0x1000B78", VA = "0x1000B78")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public int fontSize
		{
			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0x1000B94", Offset = "0x1000B94", VA = "0x1000B94")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0x1000B9C", Offset = "0x1000B9C", VA = "0x1000B9C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public float lineSpacing
		{
			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x1000BB8", Offset = "0x1000BB8", VA = "0x1000BB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D90")]
			[Address(RVA = "0x1000BC0", Offset = "0x1000BC0", VA = "0x1000BC0")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public HorizontalAlignment horizontalAlignment
		{
			[Token(Token = "0x6001D91")]
			[Address(RVA = "0x1000BDC", Offset = "0x1000BDC", VA = "0x1000BDC")]
			get
			{
				return default(HorizontalAlignment);
			}
			[Token(Token = "0x6001D92")]
			[Address(RVA = "0x1000BE4", Offset = "0x1000BE4", VA = "0x1000BE4")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public VerticalAlignment verticalAlignment
		{
			[Token(Token = "0x6001D93")]
			[Address(RVA = "0x1000C00", Offset = "0x1000C00", VA = "0x1000C00")]
			get
			{
				return default(VerticalAlignment);
			}
			[Token(Token = "0x6001D94")]
			[Address(RVA = "0x1000C08", Offset = "0x1000C08", VA = "0x1000C08")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public Color color
		{
			[Token(Token = "0x6001D95")]
			[Address(RVA = "0x1000C24", Offset = "0x1000C24", VA = "0x1000C24")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001D96")]
			[Address(RVA = "0x1000C30", Offset = "0x1000C30", VA = "0x1000C30")]
			set
			{
			}
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x1000C90", Offset = "0x1000C90", VA = "0x1000C90", Slot = "15")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x1000CBC", Offset = "0x1000CBC", VA = "0x1000CBC")]
		public bool HasRectChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x1000DBC", Offset = "0x1000DBC", VA = "0x1000DBC")]
		public LeapTextGraphic()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	[DisallowMultipleComponent]
	public abstract class LeapSlicedGraphic : LeapMeshGraphicBase
	{
		[Token(Token = "0x2000657")]
		public enum ResolutionType
		{
			[Token(Token = "0x40021BF")]
			Vertices,
			[Token(Token = "0x40021C0")]
			VerticesPerRectilinearMeter
		}

		[Token(Token = "0x2000658")]
		public struct Vector2i
		{
			[Token(Token = "0x40021C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x40021C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;
		}

		[Token(Token = "0x2000659")]
		public struct RectMargins
		{
			[Token(Token = "0x40021C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float left;

			[Token(Token = "0x40021C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float top;

			[Token(Token = "0x40021C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float right;

			[Token(Token = "0x40021C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float bottom;

			[Token(Token = "0x600296C")]
			[Address(RVA = "0xFFF7F0", Offset = "0xFFF7F0", VA = "0xFFF7F0")]
			public RectMargins(float left, float top, float right, float bottom)
			{
			}

			[Token(Token = "0x600296D")]
			[Address(RVA = "0x10002C0", Offset = "0x10002C0", VA = "0x10002C0")]
			public static implicit operator Vector4(RectMargins m)
			{
				return default(Vector4);
			}

			[Token(Token = "0x600296E")]
			[Address(RVA = "0x10002BC", Offset = "0x10002BC", VA = "0x10002BC")]
			public static implicit operator RectMargins(Vector4 v)
			{
				return default(RectMargins);
			}
		}

		[Token(Token = "0x400180F")]
		public const int MAX_RESOLUTION = 128;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[EditTimeOnly]
		[SerializeField]
		protected int _sourceDataIndex;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB533E0", Offset = "0xB533E0")]
		[EditTimeOnly]
		[SerializeField]
		protected ResolutionType _resolutionType;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[HideInInspector]
		[SerializeField]
		protected int _resolution_vert_x;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		[SerializeField]
		protected int _resolution_vert_y;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[EditTimeOnly]
		[SerializeField]
		protected Vector2 _resolution_verts_per_meter;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB534E4", Offset = "0xB534E4")]
		[EditTimeOnly]
		[SerializeField]
		protected Vector2 _size;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53530", Offset = "0xB53530")]
		[EditTimeOnly]
		[SerializeField]
		protected bool _nineSliced;

		[Token(Token = "0x170002FD")]
		public ResolutionType resolutionType
		{
			[Token(Token = "0x6001D9A")]
			[Address(RVA = "0xFFF9D4", Offset = "0xFFF9D4", VA = "0xFFF9D4")]
			get
			{
				return default(ResolutionType);
			}
		}

		[Token(Token = "0x170002FE")]
		public UnityEngine.Rect rect
		{
			[Token(Token = "0x6001D9B")]
			[Address(RVA = "0xFFE9EC", Offset = "0xFFE9EC", VA = "0xFFE9EC")]
			get
			{
				return default(UnityEngine.Rect);
			}
		}

		[Token(Token = "0x170002FF")]
		public bool nineSliced
		{
			[Token(Token = "0x6001D9C")]
			[Address(RVA = "0xFFF7DC", Offset = "0xFFF7DC", VA = "0xFFF7DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D9D")]
			[Address(RVA = "0xFFFAA8", Offset = "0xFFFAA8", VA = "0xFFFAA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		public bool canNineSlice
		{
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0xFFF9DC", Offset = "0xFFF9DC", VA = "0xFFF9DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000301")]
		public UVChannelFlags uvChannel
		{
			[Token(Token = "0x6001D9F")]
			[Address(RVA = "0xFFEBC8", Offset = "0xFFEBC8", VA = "0xFFEBC8")]
			get
			{
				return default(UVChannelFlags);
			}
		}

		[Token(Token = "0x17000302")]
		public LeapFeatureData sourceData
		{
			[Token(Token = "0x6001DA2")]
			[Address(RVA = "0xFFFAF8", Offset = "0xFFFAF8", VA = "0xFFFAF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xFFFC68", Offset = "0xFFFC68", VA = "0xFFFC68", Slot = "14")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xFFED58", Offset = "0xFFED58", VA = "0xFFED58", Slot = "15")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xFFFD50", Offset = "0xFFFD50", VA = "0xFFFD50")]
		public static bool IsValidDataSource(LeapFeatureData dataSource)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xFFFC98", Offset = "0xFFFC98", VA = "0xFFFC98")]
		protected void assignDefaultSourceValue()
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xFFFAB4", Offset = "0xFFFAB4", VA = "0xFFFAB4")]
		protected void setSourceFeatureDirty()
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xFFFE04", Offset = "0xFFFE04", VA = "0xFFFE04", Slot = "22")]
		public override void RefreshMeshData()
		{
		}

		[Token(Token = "0x6001DA7")]
		public abstract void RefreshSlicedMeshData(Vector2i resolution, RectMargins meshMargins, RectMargins uvMargins);

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xFFEB30", Offset = "0xFFEB30", VA = "0xFFEB30")]
		protected float calculateVertAxis(int vertIdx, int vertCount, float size, float border0, float border1, bool alwaysRespectBorder = false)
		{
			return default(float);
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xFFEC9C", Offset = "0xFFEC9C", VA = "0xFFEC9C")]
		protected LeapSlicedGraphic()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	[DisallowMultipleComponent]
	public class LeapBoxGraphic : LeapSlicedGraphic
	{
		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB5358C", Offset = "0xB5358C")]
		[EditTimeOnly]
		[SerializeField]
		private float _thickness;

		[Token(Token = "0x17000303")]
		public Vector3 size
		{
			[Token(Token = "0x6001DAA")]
			[Address(RVA = "0x102E330", Offset = "0x102E330", VA = "0x102E330")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001DAB")]
			[Address(RVA = "0x102E36C", Offset = "0x102E36C", VA = "0x102E36C")]
			private set
			{
			}
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x102E3B8", Offset = "0x102E3B8", VA = "0x102E3B8", Slot = "23")]
		public override void RefreshSlicedMeshData(Vector2i resolution, RectMargins meshMargins, RectMargins uvMargins)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x102FD20", Offset = "0x102FD20", VA = "0x102FD20")]
		private void addQuad(List<int> tris, int idx0, int idx1, int idx2, int idx3)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x102FDEC", Offset = "0x102FDEC", VA = "0x102FDEC")]
		public LeapBoxGraphic()
		{
		}
	}
	[Token(Token = "0x20003FE")]
	[DisallowMultipleComponent]
	public class LeapPanelGraphic : LeapSlicedGraphic
	{
		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xFFE4E8", Offset = "0xFFE4E8", VA = "0xFFE4E8", Slot = "23")]
		public override void RefreshSlicedMeshData(Vector2i resolution, RectMargins meshMargins, RectMargins uvMargins)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xFFEC98", Offset = "0xFFEC98", VA = "0xFFEC98")]
		public LeapPanelGraphic()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	[DisallowMultipleComponent]
	public class LeapPanelOutlineGraphic : LeapSlicedGraphic
	{
		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB535DC", Offset = "0xB535DC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB535DC", Offset = "0xB535DC")]
		[SerializeField]
		[EditTimeOnly]
		private bool _overrideSpriteBorders;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5365C", Offset = "0xB5365C")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB5365C", Offset = "0xB5365C")]
		[SerializeField]
		[EditTimeOnly]
		private Vector2 _thickness;

		[Token(Token = "0x17000304")]
		public bool overrideSpriteBorders
		{
			[Token(Token = "0x6001DB1")]
			[Address(RVA = "0xFFED18", Offset = "0xFFED18", VA = "0xFFED18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000305")]
		public Vector2 thickness
		{
			[Token(Token = "0x6001DB2")]
			[Address(RVA = "0xFFED20", Offset = "0xFFED20", VA = "0xFFED20")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xFFED28", Offset = "0xFFED28", VA = "0xFFED28", Slot = "15")]
		protected override void OnValidate()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xFFEF50", Offset = "0xFFEF50", VA = "0xFFEF50", Slot = "23")]
		public override void RefreshSlicedMeshData(Vector2i resolution, RectMargins meshMargins, RectMargins uvMargins)
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xFFF7FC", Offset = "0xFFF7FC", VA = "0xFFF7FC")]
		public LeapPanelOutlineGraphic()
		{
		}
	}
	[Token(Token = "0x2000400")]
	[DisallowMultipleComponent]
	public class LeapSpriteGraphic : LeapMeshGraphicBase
	{
		[Serializable]
		[Token(Token = "0x200065A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478BC", Offset = "0xB478BC")]
		private sealed class <>c
		{
			[Token(Token = "0x40021C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Vector2, Vector3> <>9__0_0;

			[Token(Token = "0x40021C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<ushort, int> <>9__0_1;

			[Token(Token = "0x6002970")]
			[Address(RVA = "0x1000838", Offset = "0x1000838", VA = "0x1000838")]
			public <>c()
			{
			}

			[Token(Token = "0x6002971")]
			[Address(RVA = "0x1000840", Offset = "0x1000840", VA = "0x1000840")]
			internal Vector3 <RefreshMeshData>b__0_0(Vector2 v)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002972")]
			[Address(RVA = "0x10008B8", Offset = "0x10008B8", VA = "0x10008B8")]
			internal int <RefreshMeshData>b__0_1(ushort i)
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x10003E8", Offset = "0x10003E8", VA = "0x10003E8", Slot = "22")]
		public override void RefreshMeshData()
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x10007D0", Offset = "0x10007D0", VA = "0x10007D0")]
		public LeapSpriteGraphic()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public interface ISupportsAddRemove
	{
		[Token(Token = "0x6001DB8")]
		void OnAddRemoveGraphics(List<int> dirtyIndexes);
	}
	[Token(Token = "0x2000402")]
	public interface ISupportsFeature<T> where T : LeapGraphicFeatureBase
	{
		[Token(Token = "0x6001DB9")]
		void GetSupportInfo(List<T> features, List<SupportInfo> info);
	}
	[Token(Token = "0x2000403")]
	public abstract class LeapGraphicFeatureBase
	{
		[NonSerialized]
		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isDirty;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private bool _dummyBool;

		[Token(Token = "0x17000306")]
		public bool isDirty
		{
			[Token(Token = "0x6001DBA")]
			[Address(RVA = "0x103281C", Offset = "0x103281C", VA = "0x103281C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0x1032824", Offset = "0x1032824", VA = "0x1032824")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public bool isDirtyOrEditTime
		{
			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0x1032830", Offset = "0x1032830", VA = "0x1032830")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x1032838", Offset = "0x1032838", VA = "0x1032838", Slot = "4")]
		public virtual SupportInfo GetSupportInfo(LeapGraphicGroup group)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001DBE")]
		public abstract void AssignFeatureReferences();

		[Token(Token = "0x6001DBF")]
		public abstract void ClearDataObjectReferences();

		[Token(Token = "0x6001DC0")]
		public abstract void AddFeatureData(LeapFeatureData data);

		[Token(Token = "0x6001DC1")]
		public abstract Type GetDataObjectType();

		[Token(Token = "0x6001DC2")]
		public abstract LeapFeatureData CreateFeatureDataForGraphic(LeapGraphic graphic);

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x1032840", Offset = "0x1032840", VA = "0x1032840")]
		protected LeapGraphicFeatureBase()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public abstract class LeapGraphicFeature<DataType> : LeapGraphicFeatureBase where DataType : LeapFeatureData, new()
	{
		[NonSerialized]
		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<DataType> featureData;

		[Token(Token = "0x6001DC4")]
		public override void AssignFeatureReferences()
		{
		}

		[Token(Token = "0x6001DC5")]
		public override void ClearDataObjectReferences()
		{
		}

		[Token(Token = "0x6001DC6")]
		public override void AddFeatureData(LeapFeatureData data)
		{
		}

		[Token(Token = "0x6001DC7")]
		public override Type GetDataObjectType()
		{
			return null;
		}

		[Token(Token = "0x6001DC8")]
		public override LeapFeatureData CreateFeatureDataForGraphic(LeapGraphic graphic)
		{
			return null;
		}

		[Token(Token = "0x6001DC9")]
		protected LeapGraphicFeature()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000405")]
	public abstract class LeapFeatureData
	{
		[NonSerialized]
		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LeapGraphic graphic;

		[NonSerialized]
		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LeapGraphicFeatureBase feature;

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x102D950", Offset = "0x102D950", VA = "0x102D950")]
		public void MarkFeatureDirty()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x102BA84", Offset = "0x102BA84", VA = "0x102BA84")]
		protected LeapFeatureData()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public interface ILeapInternalRenderingMethod
	{
		[Token(Token = "0x17000308")]
		LeapGraphicRenderer renderer
		{
			[Token(Token = "0x6001DCC")]
			set;
		}

		[Token(Token = "0x17000309")]
		LeapGraphicGroup group
		{
			[Token(Token = "0x6001DCD")]
			set;
		}
	}
	[Serializable]
	[Token(Token = "0x2000407")]
	public abstract class LeapRenderingMethod : ILeapInternalRenderingMethod
	{
		[Token(Token = "0x400181F")]
		public const string DATA_FOLDER_NAME = "_ElementData";

		[NonSerialized]
		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LeapGraphicRenderer _renderer;

		[NonSerialized]
		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LeapGraphicGroup _group;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<UnityEngine.Object, object> _assetToOwner;

		[Token(Token = "0x1700030A")]
		public LeapGraphicRenderer renderer
		{
			[Token(Token = "0x6001DCE")]
			[Address(RVA = "0xFFF844", Offset = "0xFFF844", VA = "0xFFF844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030B")]
		public LeapGraphicGroup group
		{
			[Token(Token = "0x6001DCF")]
			[Address(RVA = "0xFFF84C", Offset = "0xFFF84C", VA = "0xFFF84C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030C")]
		private LeapGraphicRenderer Leap.Unity.GraphicalRenderer.ILeapInternalRenderingMethod.renderer
		{
			[Token(Token = "0x6001DD0")]
			[Address(RVA = "0xFFF854", Offset = "0xFFF854", VA = "0xFFF854", Slot = "4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		private LeapGraphicGroup Leap.Unity.GraphicalRenderer.ILeapInternalRenderingMethod.group
		{
			[Token(Token = "0x6001DD1")]
			[Address(RVA = "0xFFF85C", Offset = "0xFFF85C", VA = "0xFFF85C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6001DD2")]
		public abstract SupportInfo GetSpaceSupportInfo(LeapSpace space);

		[Token(Token = "0x6001DD3")]
		public abstract void OnEnableRenderer();

		[Token(Token = "0x6001DD4")]
		public abstract void OnDisableRenderer();

		[Token(Token = "0x6001DD5")]
		public abstract void OnUpdateRenderer();

		[Token(Token = "0x6001DD6")]
		public abstract bool IsValidGraphic<T>();

		[Token(Token = "0x6001DD7")]
		public abstract bool IsValidGraphic(LeapGraphic graphic);

		[Token(Token = "0x6001DD8")]
		public abstract LeapGraphic GetValidGraphicOnObject(GameObject obj);

		[Token(Token = "0x6001DD9")]
		public void PreventDuplication<T>(ref T t) where T : UnityEngine.Object
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0xFFF864", Offset = "0xFFF864", VA = "0xFFF864")]
		protected LeapRenderingMethod()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public abstract class LeapRenderingMethod<GraphicType> : LeapRenderingMethod where GraphicType : LeapGraphic
	{
		[Token(Token = "0x4001823")]
		public const string ASSET_PATH = "Assets/Generated/RendererData/";

		[Token(Token = "0x6001DDC")]
		public override bool IsValidGraphic<T>()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DDD")]
		public override bool IsValidGraphic(LeapGraphic graphic)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DDE")]
		public override LeapGraphic GetValidGraphicOnObject(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x6001DDF")]
		protected LeapRenderingMethod()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000409")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB46230", Offset = "0xB46230")]
	public class RendererMeshData
	{
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<Mesh> meshes;

		[NonSerialized]
		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Queue<Mesh> _tempMeshPool;

		[Token(Token = "0x1700030E")]
		public int Count
		{
			[Token(Token = "0x6001DE7")]
			[Address(RVA = "0x1000F94", Offset = "0x1000F94", VA = "0x1000F94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700030F")]
		public Mesh Item
		{
			[Token(Token = "0x6001DE8")]
			[Address(RVA = "0x10026EC", Offset = "0x10026EC", VA = "0x10026EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DE9")]
			[Address(RVA = "0x10047DC", Offset = "0x10047DC", VA = "0x10047DC")]
			set
			{
			}
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x100457C", Offset = "0x100457C", VA = "0x100457C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0xFFA198", Offset = "0xFFA198", VA = "0xFFA198")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xFFD104", Offset = "0xFFD104", VA = "0xFFD104")]
		public Mesh GetMeshFromPoolOrNew()
		{
			return null;
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xFFB5B8", Offset = "0xFFB5B8", VA = "0xFFB5B8")]
		public void ClearPool()
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0xFFD628", Offset = "0xFFD628", VA = "0xFFD628")]
		public void AddMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x1000FE4", Offset = "0x1000FE4", VA = "0x1000FE4")]
		public void RemoveMesh(int index)
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x1004694", Offset = "0x1004694", VA = "0x1004694")]
		public void Validate(LeapRenderingMethod renderingMethod)
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x100484C", Offset = "0x100484C", VA = "0x100484C")]
		public RendererMeshData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040A")]
	public class RendererTextureData
	{
		[Serializable]
		[Token(Token = "0x200065B")]
		public struct NamedTexture
		{
			[Token(Token = "0x40021CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string propertyName;

			[Token(Token = "0x40021CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Texture2D texture;
		}

		[Token(Token = "0x200065C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478CC", Offset = "0xB478CC")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x40021CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NamedTexture tex;

			[Token(Token = "0x6002973")]
			[Address(RVA = "0x1004CB8", Offset = "0x1004CB8", VA = "0x1004CB8")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6002974")]
			[Address(RVA = "0x1004ED4", Offset = "0x1004ED4", VA = "0x1004ED4")]
			internal bool <AssignTextures>b__0(NamedTexture p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200065D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478DC", Offset = "0xB478DC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40021CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x6002975")]
			[Address(RVA = "0x1004CC0", Offset = "0x1004CC0", VA = "0x1004CC0")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6002976")]
			[Address(RVA = "0x1004F50", Offset = "0x1004F50", VA = "0x1004F50")]
			internal bool <GetTexture>b__0(NamedTexture p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<NamedTexture> packedTextures;

		[Token(Token = "0x17000310")]
		public int Count
		{
			[Token(Token = "0x6001DEE")]
			[Address(RVA = "0x1004CC8", Offset = "0x1004CC8", VA = "0x1004CC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x10048E4", Offset = "0x10048E4", VA = "0x10048E4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x1004A1C", Offset = "0x1004A1C", VA = "0x1004A1C")]
		public void AssignTextures(Texture2D[] textures, string[] propertyNames)
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xFFA890", Offset = "0xFFA890", VA = "0xFFA890")]
		public Texture2D GetTexture(string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0x1004D18", Offset = "0x1004D18", VA = "0x1004D18")]
		public void Validate(LeapRenderingMethod renderingMethod)
		{
		}

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0x1004E64", Offset = "0x1004E64", VA = "0x1004E64")]
		public RendererTextureData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040B")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB46268", Offset = "0xB46268")]
	public class LeapBakedRenderer : LeapMesherBase
	{
		[Token(Token = "0x200065E")]
		public enum MotionType
		{
			[Token(Token = "0x40021CF")]
			None,
			[Token(Token = "0x40021D0")]
			Translation
		}

		[Serializable]
		[Token(Token = "0x200065F")]
		protected class MeshRendererContainer
		{
			[Token(Token = "0x40021D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject obj;

			[Token(Token = "0x40021D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshFilter filter;

			[Token(Token = "0x40021D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MeshRenderer renderer;

			[Token(Token = "0x6002977")]
			[Address(RVA = "0x102D588", Offset = "0x102D588", VA = "0x102D588")]
			public MeshRendererContainer(Transform root)
			{
			}

			[Token(Token = "0x6002978")]
			[Address(RVA = "0x102D634", Offset = "0x102D634", VA = "0x102D634")]
			public void Destroy()
			{
			}

			[Token(Token = "0x6002979")]
			[Address(RVA = "0x102D6A0", Offset = "0x102D6A0", VA = "0x102D6A0")]
			public void MakeValid(Transform root, int index, Mesh mesh, Material material, MaterialPropertyBlock block)
			{
			}

			[Token(Token = "0x600297A")]
			[Address(RVA = "0x102BF34", Offset = "0x102BF34", VA = "0x102BF34")]
			public void ClearPropertyBlock()
			{
			}
		}

		[Token(Token = "0x4001827")]
		public const string DEFAULT_SHADER = "LeapMotion/GraphicRenderer/Unlit/Baked";

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB536FC", Offset = "0xB536FC")]
		[EditTimeOnly]
		[SerializeField]
		private MotionType _motionType;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53758", Offset = "0xB53758")]
		[EditTimeOnly]
		[SerializeField]
		private bool _createMeshRenderers;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[HideInInspector]
		private List<MeshRendererContainer> _renderers;

		[Token(Token = "0x400182B")]
		private const string RECT_POSITIONS = "_GraphicRendererRect_GraphicPositions";

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<Vector4> _rect_graphicPositions;

		[Token(Token = "0x400182D")]
		private const string CURVED_PARAMETERS = "_GraphicRendererCurved_GraphicParameters";

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<Vector4> _curved_graphicParameters;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Matrix4x4 _translation_graphicVertToMeshVert;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Matrix4x4 _noMotion_graphicVertToLocalVert;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private ITransformer _noMotion_transformer;

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0x102BD0C", Offset = "0x102BD0C", VA = "0x102BD0C", Slot = "6")]
		public override SupportInfo GetSpaceSupportInfo(LeapSpace space)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0x102BE34", Offset = "0x102BE34", VA = "0x102BE34", Slot = "7")]
		public override void OnEnableRenderer()
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0x102BFA8", Offset = "0x102BFA8", VA = "0x102BFA8", Slot = "9")]
		public override void OnUpdateRenderer()
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0x102CA0C", Offset = "0x102CA0C", VA = "0x102CA0C", Slot = "35")]
		protected override void prepareMaterial()
		{
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0x102CB84", Offset = "0x102CB84", VA = "0x102CB84", Slot = "41")]
		protected override void buildTopology()
		{
		}

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0x102CFF4", Offset = "0x102CFF4", VA = "0x102CFF4", Slot = "50")]
		protected override void postProcessMesh()
		{
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x102D0FC", Offset = "0x102D0FC", VA = "0x102D0FC", Slot = "54")]
		protected override bool doesRequireVertInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x102D114", Offset = "0x102D114", VA = "0x102D114", Slot = "55")]
		protected override Vector3 graphicVertToMeshVert(Vector3 vertex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x102D27C", Offset = "0x102D27C", VA = "0x102D27C", Slot = "56")]
		protected override void graphicVertNormalToMeshVertNormal(Vector3 vertex, Vector3 normal, out Vector3 meshVert, out Vector3 meshNormal)
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x102D4C8", Offset = "0x102D4C8", VA = "0x102D4C8")]
		public LeapBakedRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040C")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB462A4", Offset = "0xB462A4")]
	public class LeapDynamicRenderer : LeapMesherBase, ISupportsAddRemove
	{
		[Token(Token = "0x4001832")]
		public const string DEFAULT_SHADER = "LeapMotion/GraphicRenderer/Unlit/Dynamic Transparent";

		[Token(Token = "0x4001833")]
		private const string CURVED_PARAMETERS = "_GraphicRendererCurved_GraphicParameters";

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private List<Matrix4x4> _curved_worldToAnchor;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private List<Vector4> _curved_graphicParameters;

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0x102FE00", Offset = "0x102FE00", VA = "0x102FE00", Slot = "57")]
		public void OnAddRemoveGraphics(List<int> dirtyIndexes)
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0x10301A4", Offset = "0x10301A4", VA = "0x10301A4", Slot = "6")]
		public override SupportInfo GetSpaceSupportInfo(LeapSpace space)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x10302CC", Offset = "0x10302CC", VA = "0x10302CC", Slot = "9")]
		public override void OnUpdateRenderer()
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x1031278", Offset = "0x1031278", VA = "0x1031278", Slot = "35")]
		protected override void prepareMaterial()
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0x1031404", Offset = "0x1031404", VA = "0x1031404", Slot = "39")]
		protected override void buildGraphic()
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0x1031468", Offset = "0x1031468", VA = "0x1031468", Slot = "54")]
		protected override bool doesRequireVertInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0x1031470", Offset = "0x1031470", VA = "0x1031470", Slot = "55")]
		protected override Vector3 graphicVertToMeshVert(Vector3 vertex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x1031474", Offset = "0x1031474", VA = "0x1031474", Slot = "56")]
		protected override void graphicVertNormalToMeshVertNormal(Vector3 vertex, Vector3 normal, out Vector3 meshVert, out Vector3 meshNormal)
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x1031488", Offset = "0x1031488", VA = "0x1031488", Slot = "46")]
		protected override Vector3 blendShapeDelta(Vector3 shapeVert, Vector3 originalVert)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x1031530", Offset = "0x1031530", VA = "0x1031530")]
		public LeapDynamicRenderer()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public abstract class LeapMesherBase : LeapRenderingMethod<LeapMeshGraphicBase>, ISupportsFeature<LeapTextureFeature>, ISupportsFeature<LeapSpriteFeature>, ISupportsFeature<LeapRuntimeTintFeature>, ISupportsFeature<LeapBlendShapeFeature>, ISupportsFeature<CustomFloatChannelFeature>, ISupportsFeature<CustomVectorChannelFeature>, ISupportsFeature<CustomColorChannelFeature>, ISupportsFeature<CustomMatrixChannelFeature>
	{
		[Serializable]
		[Token(Token = "0x2000660")]
		private class JaggedRects : JaggedArray<UnityEngine.Rect>
		{
			[Token(Token = "0x600297B")]
			[Address(RVA = "0xFFE488", Offset = "0xFFE488", VA = "0xFFE488")]
			public JaggedRects(int length)
			{
			}
		}

		[Token(Token = "0x2000661")]
		protected struct GenerationState
		{
			[Token(Token = "0x40021D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LeapMeshGraphicBase graphic;

			[Token(Token = "0x40021D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int graphicIndex;

			[Token(Token = "0x40021D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int graphicId;

			[Token(Token = "0x40021D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Mesh mesh;

			[Token(Token = "0x40021D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Vector3> verts;

			[Token(Token = "0x40021D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<Vector3> normals;

			[Token(Token = "0x40021DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<Vector4> vertInfo;

			[Token(Token = "0x40021DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> tris;

			[Token(Token = "0x40021DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public List<Color> colors;

			[Token(Token = "0x40021DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<Vector4>[] uvs;

			[Token(Token = "0x17000452")]
			public bool isGenerating
			{
				[Token(Token = "0x600297C")]
				[Address(RVA = "0xFFB548", Offset = "0xFFB548", VA = "0xFFB548")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600297D")]
			[Address(RVA = "0xFFDCA4", Offset = "0xFFDCA4", VA = "0xFFDCA4")]
			public static GenerationState GetGenerationState()
			{
				return default(GenerationState);
			}

			[Token(Token = "0x600297E")]
			[Address(RVA = "0xFFA334", Offset = "0xFFA334", VA = "0xFFA334")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000662")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478EC", Offset = "0xB478EC")]
		private sealed class <>c__DisplayClass50_0
		{
			[Token(Token = "0x40021DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LeapTextureFeature feature;

			[Token(Token = "0x600297F")]
			[Address(RVA = "0xFF841C", Offset = "0xFF841C", VA = "0xFF841C")]
			public <>c__DisplayClass50_0()
			{
			}

			[Token(Token = "0x6002980")]
			[Address(RVA = "0xFFE1D0", Offset = "0xFFE1D0", VA = "0xFFE1D0")]
			internal bool <GetSupportInfo>b__0(LeapSpriteFeature s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000663")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB478FC", Offset = "0xB478FC")]
		private sealed class <>c__DisplayClass51_0
		{
			[Token(Token = "0x40021DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LeapSpriteFeature feature;

			[Token(Token = "0x6002981")]
			[Address(RVA = "0xFF863C", Offset = "0xFF863C", VA = "0xFF863C")]
			public <>c__DisplayClass51_0()
			{
			}

			[Token(Token = "0x6002982")]
			[Address(RVA = "0xFFE200", Offset = "0xFFE200", VA = "0xFFE200")]
			internal bool <GetSupportInfo>b__0(LeapTextureFeature s)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000664")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4790C", Offset = "0xB4790C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<LeapRuntimeTintData, Vector4> <>9__61_0;

			[Token(Token = "0x40021E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<LeapRuntimeTintData, Vector4> <>9__61_1;

			[Token(Token = "0x40021E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<LeapBlendShapeData, float> <>9__62_0;

			[Token(Token = "0x40021E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CustomFloatChannelData, float> <>9__63_0;

			[Token(Token = "0x40021E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<CustomVectorChannelData, Vector4> <>9__63_1;

			[Token(Token = "0x40021E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<CustomColorChannelData, Color> <>9__63_2;

			[Token(Token = "0x40021E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<CustomMatrixChannelData, Matrix4x4> <>9__63_3;

			[Token(Token = "0x40021E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<LeapSpriteData, Sprite> <>9__69_0;

			[Token(Token = "0x40021E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Func<Sprite, bool> <>9__69_1;

			[Token(Token = "0x40021EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Func<Sprite, Texture2D> <>9__69_2;

			[Token(Token = "0x6002984")]
			[Address(RVA = "0xFFDF60", Offset = "0xFFDF60", VA = "0xFFDF60")]
			public <>c()
			{
			}

			[Token(Token = "0x6002985")]
			[Address(RVA = "0xFFDF68", Offset = "0xFFDF68", VA = "0xFFDF68")]
			internal Vector4 <updateTinting>b__61_0(LeapRuntimeTintData d)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6002986")]
			[Address(RVA = "0xFFDFA8", Offset = "0xFFDFA8", VA = "0xFFDFA8")]
			internal Vector4 <updateTinting>b__61_1(LeapRuntimeTintData d)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6002987")]
			[Address(RVA = "0xFFDFC8", Offset = "0xFFDFC8", VA = "0xFFDFC8")]
			internal float <updateBlendShapes>b__62_0(LeapBlendShapeData d)
			{
				return default(float);
			}

			[Token(Token = "0x6002988")]
			[Address(RVA = "0xFFDFE0", Offset = "0xFFDFE0", VA = "0xFFDFE0")]
			internal float <updateCustomChannels>b__63_0(CustomFloatChannelData d)
			{
				return default(float);
			}

			[Token(Token = "0x6002989")]
			[Address(RVA = "0xFFE02C", Offset = "0xFFE02C", VA = "0xFFE02C")]
			internal Vector4 <updateCustomChannels>b__63_1(CustomVectorChannelData d)
			{
				return default(Vector4);
			}

			[Token(Token = "0x600298A")]
			[Address(RVA = "0xFFE07C", Offset = "0xFFE07C", VA = "0xFFE07C")]
			internal Color <updateCustomChannels>b__63_2(CustomColorChannelData d)
			{
				return default(Color);
			}

			[Token(Token = "0x600298B")]
			[Address(RVA = "0xFFE0CC", Offset = "0xFFE0CC", VA = "0xFFE0CC")]
			internal Matrix4x4 <updateCustomChannels>b__63_3(CustomMatrixChannelData d)
			{
				return default(Matrix4x4);
			}

			[Token(Token = "0x600298C")]
			[Address(RVA = "0xFFE130", Offset = "0xFFE130", VA = "0xFFE130")]
			internal Sprite <uploadSpriteTextures>b__69_0(LeapSpriteData d)
			{
				return null;
			}

			[Token(Token = "0x600298D")]
			[Address(RVA = "0xFFE148", Offset = "0xFFE148", VA = "0xFFE148")]
			internal bool <uploadSpriteTextures>b__69_1(Sprite s)
			{
				return default(bool);
			}

			[Token(Token = "0x600298E")]
			[Address(RVA = "0xFFE1B4", Offset = "0xFFE1B4", VA = "0xFFE1B4")]
			internal Texture2D <uploadSpriteTextures>b__69_2(Sprite s)
			{
				return null;
			}
		}

		[Token(Token = "0x2000665")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4791C", Offset = "0xB4791C")]
		private sealed class <get_enabledUvChannels>d__85 : IEnumerable<UVChannelFlags>, IEnumerable, IEnumerator<UVChannelFlags>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private UVChannelFlags <>2__current;

			[Token(Token = "0x40021ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40021EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LeapMesherBase <>4__this;

			[Token(Token = "0x17000453")]
			private UVChannelFlags System.Collections.Generic.IEnumerator<UnityEngine.Rendering.UVChannelFlags>.Current
			{
				[Token(Token = "0x6002992")]
				[Address(RVA = "0xFFE30C", Offset = "0xFFE30C", VA = "0xFFE30C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(UVChannelFlags);
				}
			}

			[Token(Token = "0x17000454")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002994")]
				[Address(RVA = "0xFFE374", Offset = "0xFFE374", VA = "0xFFE374", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600298F")]
			[Address(RVA = "0xFFD728", Offset = "0xFFD728", VA = "0xFFD728")]
			[DebuggerHidden]
			public <get_enabledUvChannels>d__85(int <>1__state)
			{
			}

			[Token(Token = "0x6002990")]
			[Address(RVA = "0xFFE230", Offset = "0xFFE230", VA = "0xFFE230", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002991")]
			[Address(RVA = "0xFFE234", Offset = "0xFFE234", VA = "0xFFE234", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002993")]
			[Address(RVA = "0xFFE314", Offset = "0xFFE314", VA = "0xFFE314", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002995")]
			[Address(RVA = "0xFFE3D8", Offset = "0xFFE3D8", VA = "0xFFE3D8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<UVChannelFlags> System.Collections.Generic.IEnumerable<UnityEngine.Rendering.UVChannelFlags>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002996")]
			[Address(RVA = "0xFFE484", Offset = "0xFFE484", VA = "0xFFE484", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4001836")]
		public const string MESH_ASSET_NAME = "Mesh Data";

		[Token(Token = "0x4001837")]
		public const string TEXTURE_ASSET_NAME = "Texture Data";

		[Token(Token = "0x4001838")]
		public const string UV_0_FEATURE = "GRAPHIC_RENDERER_VERTEX_UV_0";

		[Token(Token = "0x4001839")]
		public const string UV_1_FEATURE = "GRAPHIC_RENDERER_VERTEX_UV_1";

		[Token(Token = "0x400183A")]
		public const string UV_2_FEATURE = "GRAPHIC_RENDERER_VERTEX_UV_2";

		[Token(Token = "0x400183B")]
		public const string UV_3_FEATURE = "GRAPHIC_RENDERER_VERTEX_UV_3";

		[Token(Token = "0x400183C")]
		public const string COLORS_FEATURE = "GRAPHIC_RENDERER_VERTEX_COLORS";

		[Token(Token = "0x400183D")]
		public const string NORMALS_FEATURE = "GRAPHIC_RENDERER_VERTEX_NORMALS";

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<Texture2D, AtlasUvs> OnPostProcessAtlas;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB537EC", Offset = "0xB537EC")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useUv0;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53858", Offset = "0xB53858")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useUv1;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB538C4", Offset = "0xB538C4")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useUv2;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53930", Offset = "0xB53930")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useUv3;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5399C", Offset = "0xB5399C")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useColors;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53A08", Offset = "0xB53A08")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private Color _bakedTint;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53A74", Offset = "0xB53A74")]
		[EditTimeOnly]
		[SerializeField]
		[HideInInspector]
		private bool _useNormals;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53AE0", Offset = "0xB53AE0")]
		[EditTimeOnly]
		[SerializeField]
		protected Shader _shader;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53B3C", Offset = "0xB53B3C")]
		[SerializeField]
		private SingleLayer _visualLayer;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53B88", Offset = "0xB53B88")]
		[SerializeField]
		private AtlasBuilder _atlas;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GenerationState _generation;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected bool _doesRequireColors;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		protected bool _doesRequireNormals;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		protected bool _doesRequireVertInfo;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<UVChannelFlags> _requiredUvChannels;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected List<LeapTextureFeature> _textureFeatures;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected List<LeapSpriteFeature> _spriteFeatures;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected List<LeapRuntimeTintFeature> _tintFeatures;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected List<LeapBlendShapeFeature> _blendShapeFeatures;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected List<CustomFloatChannelFeature> _floatChannelFeatures;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected List<CustomVectorChannelFeature> _vectorChannelFeatures;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected List<CustomColorChannelFeature> _colorChannelFeatures;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected List<CustomMatrixChannelFeature> _matrixChannelFeatures;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		protected Material _material;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		protected RendererMeshData _meshes;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		protected RendererTextureData _packedTextures;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private AtlasUvs _atlasUvs;

		[NonSerialized]
		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected MaterialPropertyBlock _spriteTextureBlock;

		[Token(Token = "0x400185B")]
		protected const string TINTS_PROPERTY = "_GraphicRendererTints";

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected List<Vector4> _tintColors;

		[Token(Token = "0x400185D")]
		protected const string BLEND_SHAPE_AMOUNTS_PROPERTY = "_GraphicRendererBlendShapeAmounts";

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected List<float> _blendShapeAmounts;

		[Token(Token = "0x400185F")]
		public const string CUSTOM_CHANNEL_KEYWORD = "GRAPHIC_RENDERER_ENABLE_CUSTOM_CHANNELS";

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected List<float> _customFloatChannelData;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected List<Vector4> _customVectorChannelData;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected List<Color> _customColorChannelData;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected List<Matrix4x4> _customMatrixChannelData;

		[Token(Token = "0x17000311")]
		public Material material
		{
			[Token(Token = "0x6001E06")]
			[Address(RVA = "0xFF8234", Offset = "0xFF8234", VA = "0xFF8234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		protected IEnumerable<UVChannelFlags> enabledUvChannels
		{
			[Token(Token = "0x6001E28")]
			[Address(RVA = "0xFFD6A8", Offset = "0xFFD6A8", VA = "0xFFD6A8")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5ED28", Offset = "0xB5ED28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xFF819C", Offset = "0xFF819C", VA = "0xFF819C")]
		public static string GetUvFeature(UVChannelFlags flags)
		{
			return null;
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xFF823C", Offset = "0xFF823C", VA = "0xFF823C", Slot = "21")]
		public virtual void GetSupportInfo(List<LeapTextureFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xFF8448", Offset = "0xFF8448", VA = "0xFF8448", Slot = "22")]
		public virtual void GetSupportInfo(List<LeapSpriteFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xFF8644", Offset = "0xFF8644", VA = "0xFF8644", Slot = "23")]
		public virtual void GetSupportInfo(List<LeapRuntimeTintFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xFF8694", Offset = "0xFF8694", VA = "0xFF8694", Slot = "24")]
		public virtual void GetSupportInfo(List<LeapBlendShapeFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xFF86E4", Offset = "0xFF86E4", VA = "0xFF86E4", Slot = "25")]
		public virtual void GetSupportInfo(List<CustomFloatChannelFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xFF86E8", Offset = "0xFF86E8", VA = "0xFF86E8", Slot = "26")]
		public virtual void GetSupportInfo(List<CustomVectorChannelFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xFF86EC", Offset = "0xFF86EC", VA = "0xFF86EC", Slot = "27")]
		public virtual void GetSupportInfo(List<CustomColorChannelFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xFF86F0", Offset = "0xFF86F0", VA = "0xFF86F0", Slot = "28")]
		public virtual void GetSupportInfo(List<CustomMatrixChannelFeature> features, List<SupportInfo> info)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xFF86F4", Offset = "0xFF86F4", VA = "0xFF86F4", Slot = "7")]
		public override void OnEnableRenderer()
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xFF8758", Offset = "0xFF8758", VA = "0xFF8758", Slot = "8")]
		public override void OnDisableRenderer()
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xFF875C", Offset = "0xFF875C", VA = "0xFF875C", Slot = "9")]
		public override void OnUpdateRenderer()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xFF8820", Offset = "0xFF8820", VA = "0xFF8820", Slot = "29")]
		protected virtual void updateTinting()
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xFF8D0C", Offset = "0xFF8D0C", VA = "0xFF8D0C", Slot = "30")]
		protected virtual void updateBlendShapes()
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xFF90F0", Offset = "0xFF90F0", VA = "0xFF90F0", Slot = "31")]
		protected virtual void updateCustomChannels()
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xFF9B9C", Offset = "0xFF9B9C", VA = "0xFF9B9C", Slot = "32")]
		protected virtual void setupForBuilding()
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xFF9DF0", Offset = "0xFF9DF0", VA = "0xFF9DF0", Slot = "33")]
		protected virtual void loadAllSupportedFeatures()
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xFFA168", Offset = "0xFFA168", VA = "0xFFA168", Slot = "34")]
		protected virtual void prepareMeshes()
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xFFA438", Offset = "0xFFA438", VA = "0xFFA438", Slot = "35")]
		protected virtual void prepareMaterial()
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xFFA97C", Offset = "0xFFA97C", VA = "0xFFA97C", Slot = "36")]
		protected virtual void extractSpriteRects()
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xFFAEA8", Offset = "0xFFAEA8", VA = "0xFFAEA8", Slot = "37")]
		protected virtual void uploadSpriteTextures()
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xFFB370", Offset = "0xFFB370", VA = "0xFFB370", Slot = "38")]
		protected virtual void buildMesh()
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xFFB664", Offset = "0xFFB664", VA = "0xFFB664", Slot = "39")]
		protected virtual void buildGraphic()
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xFFBA28", Offset = "0xFFBA28", VA = "0xFFBA28", Slot = "40")]
		protected virtual void refreshMeshData()
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xFFBAE8", Offset = "0xFFBAE8", VA = "0xFFBAE8", Slot = "41")]
		protected virtual void buildTopology()
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0xFFC0A4", Offset = "0xFFC0A4", VA = "0xFFC0A4", Slot = "42")]
		protected virtual void buildColors()
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0xFFC520", Offset = "0xFFC520", VA = "0xFFC520", Slot = "43")]
		protected virtual void buildUvs(UVChannelFlags channel)
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0xFFCB1C", Offset = "0xFFCB1C", VA = "0xFFCB1C", Slot = "44")]
		protected virtual void buildVertInfo()
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xFFCC40", Offset = "0xFFCC40", VA = "0xFFCC40", Slot = "45")]
		protected virtual void buildBlendShapes(LeapBlendShapeData blendShapeData)
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xFFCF48", Offset = "0xFFCF48", VA = "0xFFCF48", Slot = "46")]
		protected virtual Vector3 blendShapeDelta(Vector3 shapeVert, Vector3 originalVert)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xFFD020", Offset = "0xFFD020", VA = "0xFFD020", Slot = "47")]
		protected virtual void beginMesh([Optional] Mesh mesh)
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xFFD194", Offset = "0xFFD194", VA = "0xFFD194", Slot = "48")]
		protected virtual void finishMesh(bool deleteEmptyMeshes = true)
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xFFD574", Offset = "0xFFD574", VA = "0xFFD574", Slot = "49")]
		protected virtual void finishAndAddMesh(bool deleteEmptyMeshes = true)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xFFD6A4", Offset = "0xFFD6A4", VA = "0xFFD6A4", Slot = "50")]
		protected virtual void postProcessMesh()
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0xFFD760", Offset = "0xFFD760", VA = "0xFFD760", Slot = "51")]
		protected virtual bool doesRequireMeshColors()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0xFFD768", Offset = "0xFFD768", VA = "0xFFD768", Slot = "52")]
		protected virtual bool doesRequireMeshNormals()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0xFFD770", Offset = "0xFFD770", VA = "0xFFD770", Slot = "53")]
		protected virtual bool doesRequireUvChannel(UVChannelFlags channel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xFFD838", Offset = "0xFFD838", VA = "0xFFD838")]
		protected void drawMesh(Mesh mesh, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xFFD8F0", Offset = "0xFFD8F0", VA = "0xFFD8F0", Slot = "54")]
		protected virtual bool doesRequireVertInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2E")]
		protected abstract Vector3 graphicVertToMeshVert(Vector3 vertex);

		[Token(Token = "0x6001E2F")]
		protected abstract void graphicVertNormalToMeshVertNormal(Vector3 vertex, Vector3 normal, out Vector3 meshVert, out Vector3 meshNormal);

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0xFFD9A0", Offset = "0xFFD9A0", VA = "0xFFD9A0")]
		protected LeapMesherBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200040E")]
	[AttributeAttribute(Name = "LeapGraphicTagAttribute", RVA = "0xB462E0", Offset = "0xB462E0")]
	public class LeapTextRenderer : LeapRenderingMethod<LeapTextGraphic>, ISupportsAddRemove
	{
		[Token(Token = "0x2000666")]
		private class CharWidthCalculator
		{
			[Token(Token = "0x40021EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Font font;

			[Token(Token = "0x40021F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int scaledFontSize;

			[Token(Token = "0x40021F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public FontStyle fontStyle;

			[Token(Token = "0x40021F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float charScale;

			[Token(Token = "0x40021F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Func<char, float> func;

			[Token(Token = "0x6002997")]
			[Address(RVA = "0x1003F8C", Offset = "0x1003F8C", VA = "0x1003F8C")]
			public CharWidthCalculator()
			{
			}

			[Token(Token = "0x6002998")]
			[Address(RVA = "0x1004010", Offset = "0x1004010", VA = "0x1004010")]
			private float funcMethod(char c)
			{
				return default(float);
			}
		}

		[Token(Token = "0x4001864")]
		public const string DEFAULT_FONT = "Arial.ttf";

		[Token(Token = "0x4001865")]
		public const string DEFAULT_SHADER = "LeapMotion/GraphicRenderer/Text/Dynamic";

		[Token(Token = "0x4001866")]
		public const float SCALE_CONSTANT = 0.001f;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[EditTimeOnly]
		[SerializeField]
		private Font _font;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[EditTimeOnly]
		[SerializeField]
		private float _dynamicPixelsPerUnit;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[EditTimeOnly]
		[SerializeField]
		public bool _useColor;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[EditTimeOnly]
		[SerializeField]
		public Color _globalTint;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB53CF4", Offset = "0xB53CF4")]
		[EditTimeOnly]
		[SerializeField]
		private Shader _shader;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[EditTimeOnly]
		[SerializeField]
		private float _scale;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private RendererMeshData _meshData;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Material _material;

		[Token(Token = "0x400186F")]
		private const string CURVED_PARAMETERS = "_GraphicRendererCurved_GraphicParameters";

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Matrix4x4> _curved_worldToAnchor;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Vector4> _curved_graphicParameters;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<TextWrapper.Line> _tempLines;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector3> _verts;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Vector4> _uvs;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Color> _colors;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int> _tris;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CharWidthCalculator _widthCalculator;

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x1000E50", Offset = "0x1000E50", VA = "0x1000E50", Slot = "6")]
		public override SupportInfo GetSpaceSupportInfo(LeapSpace space)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x1000E5C", Offset = "0x1000E5C", VA = "0x1000E5C", Slot = "13")]
		public void OnAddRemoveGraphics(List<int> dirtyIndexes)
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x10010B8", Offset = "0x10010B8", VA = "0x10010B8", Slot = "7")]
		public override void OnEnableRenderer()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x1001554", Offset = "0x1001554", VA = "0x1001554", Slot = "8")]
		public override void OnDisableRenderer()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x10015D0", Offset = "0x10015D0", VA = "0x10015D0", Slot = "9")]
		public override void OnUpdateRenderer()
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x1003900", Offset = "0x1003900", VA = "0x1003900")]
		private void onFontTextureRebuild(Font font)
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x10012A8", Offset = "0x10012A8", VA = "0x10012A8")]
		private void generateMaterial()
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x1002408", Offset = "0x1002408", VA = "0x1002408")]
		private void ensureFontIsUpToDate()
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x1002764", Offset = "0x1002764", VA = "0x1002764")]
		private void generateTextMesh(int index, LeapTextGraphic graphic, Mesh mesh)
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x1003DEC", Offset = "0x1003DEC", VA = "0x1003DEC")]
		public LeapTextRenderer()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public static class SpaceProperties
	{
		[Token(Token = "0x4001878")]
		public const string RADIAL_SPACE_RADIUS = "_GraphicRendererRadialSpace_Radius";

		[Token(Token = "0x4001879")]
		public const string CYLINDRICAL_FEATURE = "GRAPHIC_RENDERER_CYLINDRICAL";

		[Token(Token = "0x400187A")]
		public const string SPHERICAL_FEATURE = "GRAPHIC_RENDERER_SPHERICAL";
	}
	[Serializable]
	[Token(Token = "0x2000410")]
	public struct SupportInfo
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SupportType support;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string message;

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0xFF68D8", Offset = "0xFF68D8", VA = "0xFF68D8")]
		public static SupportInfo FullSupport()
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x1004FBC", Offset = "0x1004FBC", VA = "0x1004FBC")]
		public static SupportInfo Warning(string message)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0xFF6930", Offset = "0xFF6930", VA = "0xFF6930")]
		public static SupportInfo Error(string message)
		{
			return default(SupportInfo);
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0xFF8424", Offset = "0xFF8424", VA = "0xFF8424")]
		public SupportInfo OrWorse(SupportInfo other)
		{
			return default(SupportInfo);
		}
	}
	[Token(Token = "0x2000411")]
	public enum SupportType
	{
		[Token(Token = "0x400187E")]
		Full,
		[Token(Token = "0x400187F")]
		Warning,
		[Token(Token = "0x4001880")]
		Error
	}
	[Token(Token = "0x2000412")]
	public static class SupportUtil
	{
		[Token(Token = "0x6001E3F")]
		public static void OnlySupportFirstFeature<T>(List<SupportInfo> info)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000413")]
	public class AtlasUvs
	{
		[Serializable]
		[Token(Token = "0x2000667")]
		public class TextureToRect : SerializableDictionary<UnityEngine.Object, UnityEngine.Rect>
		{
			[Token(Token = "0x6002999")]
			[Address(RVA = "0x102BA2C", Offset = "0x102BA2C", VA = "0x102BA2C")]
			public TextureToRect()
			{
			}
		}

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private TextureToRect _channel0;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextureToRect _channel1;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextureToRect _channel2;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextureToRect _channel3;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Rect[] _nullRects;

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x102B868", Offset = "0x102B868", VA = "0x102B868")]
		public UnityEngine.Rect GetRect(int channel, UnityEngine.Object key)
		{
			return default(UnityEngine.Rect);
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x1029F9C", Offset = "0x1029F9C", VA = "0x1029F9C")]
		public void SetRect(int channel, UnityEngine.Object key, UnityEngine.Rect rect)
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x102B970", Offset = "0x102B970", VA = "0x102B970")]
		private TextureToRect getChannel(int channel)
		{
			return null;
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x1029290", Offset = "0x1029290", VA = "0x1029290")]
		public AtlasUvs()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000414")]
	public class AtlasBuilder
	{
		[Serializable]
		[Token(Token = "0x2000668")]
		public class TextureReference
		{
			[Token(Token = "0x40021F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture2D texture;

			[Token(Token = "0x40021F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UVChannelFlags channel;

			[Token(Token = "0x600299A")]
			[Address(RVA = "0x102B858", Offset = "0x102B858", VA = "0x102B858")]
			public TextureReference()
			{
			}
		}

		[Token(Token = "0x2000669")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4792C", Offset = "0xB4792C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x40021F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ProgressBar progress;

			[Token(Token = "0x40021F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AtlasBuilder <>4__this;

			[Token(Token = "0x40021F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Texture2D[] packedTextures;

			[Token(Token = "0x40021F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AtlasUvs channelMapping;

			[Token(Token = "0x600299B")]
			[Address(RVA = "0x1029428", Offset = "0x1029428", VA = "0x1029428")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x600299C")]
			[Address(RVA = "0x102AB10", Offset = "0x102AB10", VA = "0x102AB10")]
			internal void <mainProgressLoop>b__0()
			{
			}
		}

		[Token(Token = "0x200066A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4793C", Offset = "0xB4793C")]
		private sealed class <>c__DisplayClass16_1
		{
			[Token(Token = "0x40021FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UVChannelFlags channel;

			[Token(Token = "0x40021FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass16_0 CS$<>8__locals1;

			[Token(Token = "0x600299D")]
			[Address(RVA = "0x102AD34", Offset = "0x102AD34", VA = "0x102AD34")]
			public <>c__DisplayClass16_1()
			{
			}

			[Token(Token = "0x600299E")]
			[Address(RVA = "0x102AD3C", Offset = "0x102AD3C", VA = "0x102AD3C")]
			internal void <mainProgressLoop>b__1()
			{
			}
		}

		[Token(Token = "0x200066B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4794C", Offset = "0xB4794C")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x40021FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UVChannelFlags channel;

			[Token(Token = "0x600299F")]
			[Address(RVA = "0x10298D8", Offset = "0x10298D8", VA = "0x10298D8")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60029A0")]
			[Address(RVA = "0x102AD70", Offset = "0x102AD70", VA = "0x102AD70")]
			internal bool <doPerChannelPack>b__0(LeapTextureFeature f)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200066C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4795C", Offset = "0xB4795C")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x40021FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UVChannelFlags channel;

			[Token(Token = "0x40021FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<LeapTextureFeature> nonMainFeatures;

			[Token(Token = "0x40021FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Texture2D packedTexture;

			[Token(Token = "0x4002200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ProgressBar progress;

			[Token(Token = "0x4002201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LeapTextureFeature mainFeature;

			[Token(Token = "0x4002202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public UnityEngine.Rect[] packedRects;

			[Token(Token = "0x4002203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public AtlasBuilder <>4__this;

			[Token(Token = "0x4002204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Texture2D[] packedTextures;

			[Token(Token = "0x60029A1")]
			[Address(RVA = "0x102A0BC", Offset = "0x102A0BC", VA = "0x102A0BC")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x60029A2")]
			[Address(RVA = "0x102AD94", Offset = "0x102AD94", VA = "0x102AD94")]
			internal bool <packSecondaryTextures>b__0(LeapTextureFeature f)
			{
				return default(bool);
			}

			[Token(Token = "0x60029A3")]
			[Address(RVA = "0x102ADB8", Offset = "0x102ADB8", VA = "0x102ADB8")]
			internal void <packSecondaryTextures>b__1()
			{
			}
		}

		[Token(Token = "0x200066D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4796C", Offset = "0xB4796C")]
		private sealed class <>c__DisplayClass18_1
		{
			[Token(Token = "0x4002205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LeapTextureFeature secondaryFeature;

			[Token(Token = "0x4002206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass18_0 CS$<>8__locals1;

			[Token(Token = "0x60029A4")]
			[Address(RVA = "0x102B158", Offset = "0x102B158", VA = "0x102B158")]
			public <>c__DisplayClass18_1()
			{
			}
		}

		[Token(Token = "0x200066E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4797C", Offset = "0xB4797C")]
		private sealed class <>c__DisplayClass18_2
		{
			[Token(Token = "0x4002207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RenderTexture secondaryRT;

			[Token(Token = "0x4002208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass18_1 CS$<>8__locals2;

			[Token(Token = "0x60029A5")]
			[Address(RVA = "0x102B160", Offset = "0x102B160", VA = "0x102B160")]
			public <>c__DisplayClass18_2()
			{
			}

			[Token(Token = "0x60029A6")]
			[Address(RVA = "0x102B168", Offset = "0x102B168", VA = "0x102B168")]
			internal void <packSecondaryTextures>b__2()
			{
			}
		}

		[Token(Token = "0x200066F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4798C", Offset = "0xB4798C")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x4002209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ProgressBar progress;

			[Token(Token = "0x400220A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AtlasBuilder <>4__this;

			[Token(Token = "0x400220B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Texture2D[] packedTextures;

			[Token(Token = "0x60029A7")]
			[Address(RVA = "0x102A19C", Offset = "0x102A19C", VA = "0x102A19C")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x60029A8")]
			[Address(RVA = "0x102B444", Offset = "0x102B444", VA = "0x102B444")]
			internal void <finalizeTextures>b__0()
			{
			}
		}

		[Token(Token = "0x2000670")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB4799C", Offset = "0xB4799C")]
		private sealed class <>c__DisplayClass19_1
		{
			[Token(Token = "0x400220C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int i;

			[Token(Token = "0x400220D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass19_0 CS$<>8__locals1;

			[Token(Token = "0x60029A9")]
			[Address(RVA = "0x102B5A8", Offset = "0x102B5A8", VA = "0x102B5A8")]
			public <>c__DisplayClass19_1()
			{
			}

			[Token(Token = "0x60029AA")]
			[Address(RVA = "0x102B5B0", Offset = "0x102B5B0", VA = "0x102B5B0")]
			internal void <finalizeTextures>b__1()
			{
			}
		}

		[Token(Token = "0x2000671")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479AC", Offset = "0xB479AC")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x400220E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LeapTextureFeature feature;

			[Token(Token = "0x400220F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AtlasBuilder <>4__this;

			[Token(Token = "0x60029AB")]
			[Address(RVA = "0x102A1A4", Offset = "0x102A1A4", VA = "0x102A1A4")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x60029AC")]
			[Address(RVA = "0x102B810", Offset = "0x102B810", VA = "0x102B810")]
			internal bool <prepareForPacking>b__1(TextureReference p)
			{
				return default(bool);
			}

			[Token(Token = "0x60029AD")]
			[Address(RVA = "0x102B840", Offset = "0x102B840", VA = "0x102B840")]
			internal Texture2D <prepareForPacking>b__3(Texture2D t)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000672")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479BC", Offset = "0xB479BC")]
		private sealed class <>c
		{
			[Token(Token = "0x4002210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<LeapTextureData, Texture2D> <>9__20_0;

			[Token(Token = "0x4002212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<TextureReference, Texture2D> <>9__20_2;

			[Token(Token = "0x60029AF")]
			[Address(RVA = "0x102AAD8", Offset = "0x102AAD8", VA = "0x102AAD8")]
			public <>c()
			{
			}

			[Token(Token = "0x60029B0")]
			[Address(RVA = "0x102AAE0", Offset = "0x102AAE0", VA = "0x102AAE0")]
			internal Texture2D <prepareForPacking>b__20_0(LeapTextureData dataObj)
			{
				return null;
			}

			[Token(Token = "0x60029B1")]
			[Address(RVA = "0x102AAF8", Offset = "0x102AAF8", VA = "0x102AAF8")]
			internal Texture2D <prepareForPacking>b__20_2(TextureReference p)
			{
				return null;
			}
		}

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53DF8", Offset = "0xB53DF8")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB53DF8", Offset = "0xB53DF8")]
		[EditTimeOnly]
		[SerializeField]
		private int _border;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53E68", Offset = "0xB53E68")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB53E68", Offset = "0xB53E68")]
		[EditTimeOnly]
		[SerializeField]
		private int _padding;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53ED8", Offset = "0xB53ED8")]
		[EditTimeOnly]
		[SerializeField]
		private bool _mipMap;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53F34", Offset = "0xB53F34")]
		[EditTimeOnly]
		[SerializeField]
		private FilterMode _filterMode;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53F90", Offset = "0xB53F90")]
		[EditTimeOnly]
		[SerializeField]
		private TextureFormat _format;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB53FEC", Offset = "0xB53FEC")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB53FEC", Offset = "0xB53FEC")]
		[AttributeAttribute(Name = "MaxValue", RVA = "0xB53FEC", Offset = "0xB53FEC")]
		[EditTimeOnly]
		[SerializeField]
		private int _maxAtlasSize;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54074", Offset = "0xB54074")]
		[SerializeField]
		private TextureReference[] _extraTextures;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material _cachedBlitMaterial;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<LeapTextureFeature> _features;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hash _atlasHash;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Hash _currHash;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<Texture2D, Texture2D> _cachedProcessedTextures;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<Color, Texture2D> _cachedDefaultTextures;

		[Token(Token = "0x17000313")]
		public bool isDirty
		{
			[Token(Token = "0x6001E44")]
			[Address(RVA = "0x1028938", Offset = "0x1028938", VA = "0x1028938")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x10289A8", Offset = "0x10289A8", VA = "0x10289A8")]
		private static void enableBlitPass(Texture tex)
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x1028B20", Offset = "0x1028B20", VA = "0x1028B20")]
		public void UpdateTextureList(List<LeapTextureFeature> textureFeatures)
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x1028F40", Offset = "0x1028F40", VA = "0x1028F40")]
		public void RebuildAtlas(ProgressBar progress, out Texture2D[] packedTextures, out AtlasUvs channelMapping)
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x1029350", Offset = "0x1029350", VA = "0x1029350")]
		private void mainProgressLoop(ProgressBar progress, Texture2D[] packedTextures, AtlasUvs channelMapping)
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x1029430", Offset = "0x1029430", VA = "0x1029430")]
		private void doPerChannelPack(ProgressBar progress, UVChannelFlags channel, Texture2D[] packedTextures, AtlasUvs channelMapping)
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x1029DD4", Offset = "0x1029DD4", VA = "0x1029DD4")]
		private void packSecondaryTextures(ProgressBar progress, UVChannelFlags channel, LeapTextureFeature mainFeature, Texture2D packedTexture, UnityEngine.Rect[] packedRects, Texture2D[] packedTextures)
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x102A0C4", Offset = "0x102A0C4", VA = "0x102A0C4")]
		private void finalizeTextures(ProgressBar progress, Texture2D[] packedTextures)
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x10298E0", Offset = "0x10298E0", VA = "0x10298E0")]
		private void prepareForPacking(LeapTextureFeature feature, out Texture2D defaultTexture, out Texture2D packedTexture, out Texture2D[] rawTextureArray, out Texture2D[] processedTextureArray)
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x102A2F4", Offset = "0x102A2F4", VA = "0x102A2F4")]
		private Texture2D processTexture(Texture2D source)
		{
			return null;
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x102A584", Offset = "0x102A584", VA = "0x102A584")]
		private void drawTexture(Texture2D source, RenderTexture dst, UnityEngine.Rect rect, float borderDX, float borderDY)
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x102A7C8", Offset = "0x102A7C8", VA = "0x102A7C8")]
		private Texture2D convertToTexture2D(RenderTexture source, bool mipmap)
		{
			return null;
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x102A1AC", Offset = "0x102A1AC", VA = "0x102A1AC")]
		private Texture2D getDefaultTexture(Color color)
		{
			return null;
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x102A954", Offset = "0x102A954", VA = "0x102A954")]
		public AtlasBuilder()
		{
		}
	}
	[Token(Token = "0x2000415")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB4631C", Offset = "0xB4631C")]
	public class JaggedArray<T> : ISerializationCallbackReceiver
	{
		[NonSerialized]
		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[][] _array;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private T[] _data;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private int[] _lengths;

		[Token(Token = "0x17000314")]
		public T[] Item
		{
			[Token(Token = "0x6001E58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E59")]
			set
			{
			}
		}

		[Token(Token = "0x6001E53")]
		public JaggedArray()
		{
		}

		[Token(Token = "0x6001E54")]
		public JaggedArray(int length)
		{
		}

		[Token(Token = "0x6001E55")]
		public JaggedArray(T[][] array)
		{
		}

		[Token(Token = "0x6001E56")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001E57")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001E5A")]
		public static implicit operator T[][](JaggedArray<T> jaggedArray)
		{
			return null;
		}

		[Token(Token = "0x6001E5B")]
		public static implicit operator JaggedArray<T>(T[][] array)
		{
			return null;
		}
	}
	[Token(Token = "0x2000416")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB46354", Offset = "0xB46354")]
	public class LeapGraphicTagAttribute : Attribute
	{
		[Token(Token = "0x2000673")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479CC", Offset = "0xB479CC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4002213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string typeName;

			[Token(Token = "0x60029B2")]
			[Address(RVA = "0xFF7F84", Offset = "0xFF7F84", VA = "0xFF7F84")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60029B3")]
			[Address(RVA = "0xFF8030", Offset = "0xFF8030", VA = "0xFF8030")]
			internal bool <GetTag>b__0(Type t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Type, LeapGraphicTagAttribute> _tagCache;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<string, Type> _stringTypeCache;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string name;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int order;

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xFF7A94", Offset = "0xFF7A94", VA = "0xFF7A94")]
		public LeapGraphicTagAttribute(string name, int order = 0)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xFF7AD0", Offset = "0xFF7AD0", VA = "0xFF7AD0")]
		public static string GetTagName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xFF7CE8", Offset = "0xFF7CE8", VA = "0xFF7CE8")]
		public static string GetTagName(string typeName)
		{
			return null;
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xFF7B60", Offset = "0xFF7B60", VA = "0xFF7B60")]
		public static LeapGraphicTagAttribute GetTag(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xFF7D5C", Offset = "0xFF7D5C", VA = "0xFF7D5C")]
		public static LeapGraphicTagAttribute GetTag(string typeName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000417")]
	public static class MaterialUtil
	{
		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xFF906C", Offset = "0xFF906C", VA = "0xFF906C")]
		public static void SetFloatArraySafe(this Material material, string property, List<float> list)
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0xFF8C88", Offset = "0xFF8C88", VA = "0xFF8C88")]
		public static void SetVectorArraySafe(this Material material, string property, List<Vector4> list)
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xFF9A94", Offset = "0xFF9A94", VA = "0xFF9A94")]
		public static void SetColorArraySafe(this Material material, string property, List<Color> list)
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xFF9B18", Offset = "0xFF9B18", VA = "0xFF9B18")]
		public static void SetMatrixArraySafe(this Material material, string property, List<Matrix4x4> list)
		{
		}
	}
	[Token(Token = "0x2000418")]
	public static class MeshCache
	{
		[Token(Token = "0x2000674")]
		public struct CachedTopology
		{
			[Token(Token = "0x4002214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3[] verts;

			[Token(Token = "0x4002215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int[] tris;
		}

		[Token(Token = "0x2000675")]
		private struct UvKey : IComparable<UvKey>, IEquatable<UvKey>
		{
			[Token(Token = "0x4002216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mesh mesh;

			[Token(Token = "0x4002217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int channel;

			[Token(Token = "0x60029B4")]
			[Address(RVA = "0x1004278", Offset = "0x1004278", VA = "0x1004278", Slot = "4")]
			public int CompareTo(UvKey other)
			{
				return default(int);
			}

			[Token(Token = "0x60029B5")]
			[Address(RVA = "0x1004314", Offset = "0x1004314", VA = "0x1004314", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60029B6")]
			[Address(RVA = "0x1004350", Offset = "0x1004350", VA = "0x1004350", Slot = "5")]
			public bool Equals(UvKey other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, CachedTopology> _topologyCache;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Mesh, Vector3[]> _normalCache;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<Mesh, Color[]> _colorCache;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<UvKey, List<Vector4>> _uvCache;

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xFF9D14", Offset = "0xFF9D14", VA = "0xFF9D14")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xFFBE68", Offset = "0xFFBE68", VA = "0xFFBE68")]
		public static CachedTopology GetTopology(Mesh mesh)
		{
			return default(CachedTopology);
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0xFFBF74", Offset = "0xFFBF74", VA = "0xFFBF74")]
		public static Vector3[] GetNormals(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0xFFC3C4", Offset = "0xFFC3C4", VA = "0xFFC3C4")]
		public static Color[] GetColors(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0xFFC810", Offset = "0xFFC810", VA = "0xFFC810")]
		public static List<Vector4> GetUvs(Mesh mesh, UVChannelFlags channel)
		{
			return null;
		}
	}
	[Token(Token = "0x2000419")]
	public static class MeshUtil
	{
		[Token(Token = "0x400189E")]
		public const int MAX_VERT_COUNT = 65535;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<UVChannelFlags> allUvChannels;

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x10043EC", Offset = "0x10043EC", VA = "0x10043EC")]
		static MeshUtil()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x10044D8", Offset = "0x10044D8", VA = "0x10044D8")]
		public static void RemapUvs(List<Vector4> uvs, UnityEngine.Rect mapping)
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xFFC9E8", Offset = "0xFFC9E8", VA = "0xFFC9E8")]
		public static void RemapUvs(List<Vector4> uvs, UnityEngine.Rect mapping, int lastCount)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xFFAE14", Offset = "0xFFAE14", VA = "0xFFAE14")]
		public static int Index(this UVChannelFlags flags)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200041A")]
	public static class SpriteAtlasUtil
	{
		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xFFAC60", Offset = "0xFFAC60", VA = "0xFFAC60")]
		public static bool TryGetAtlasedRect(Sprite sprite, out UnityEngine.Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x10007CC", Offset = "0x10007CC", VA = "0x10007CC")]
		public static bool TryGetAtlasedUvs(Sprite sprite, out Vector2[] uvs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x1004F64", Offset = "0x1004F64", VA = "0x1004F64")]
		private static bool tryGetAtlasedUvs(Sprite sprite, out Vector2[] uvs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200041B")]
	public static class TextWrapper
	{
		[Token(Token = "0x2000676")]
		public struct Token
		{
			[Token(Token = "0x4002218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int start;

			[Token(Token = "0x4002219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int end;

			[Token(Token = "0x17000455")]
			public int length
			{
				[Token(Token = "0x60029B7")]
				[Address(RVA = "0x10053E4", Offset = "0x10053E4", VA = "0x10053E4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60029B8")]
				[Address(RVA = "0x100538C", Offset = "0x100538C", VA = "0x100538C")]
				set
				{
				}
			}

			[Token(Token = "0x60029B9")]
			[Address(RVA = "0x100539C", Offset = "0x100539C", VA = "0x100539C")]
			public bool IsNewline(string source)
			{
				return default(bool);
			}

			[Token(Token = "0x60029BA")]
			[Address(RVA = "0x10055C0", Offset = "0x10055C0", VA = "0x10055C0")]
			public bool IsWhitespace(string source)
			{
				return default(bool);
			}

			[Token(Token = "0x60029BB")]
			[Address(RVA = "0x10054F0", Offset = "0x10054F0", VA = "0x10054F0")]
			public float GetWidth(string source, Func<char, float> charWidth)
			{
				return default(float);
			}
		}

		[Token(Token = "0x2000677")]
		public struct Line
		{
			[Token(Token = "0x400221A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int start;

			[Token(Token = "0x400221B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int end;

			[Token(Token = "0x400221C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float width;

			[Token(Token = "0x17000456")]
			public int length
			{
				[Token(Token = "0x60029BC")]
				[Address(RVA = "0x1005654", Offset = "0x1005654", VA = "0x1005654")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60029BD")]
				[Address(RVA = "0x10053D4", Offset = "0x10053D4", VA = "0x10053D4")]
				set
				{
				}
			}

			[Token(Token = "0x60029BE")]
			[Address(RVA = "0x10053F0", Offset = "0x10053F0", VA = "0x10053F0")]
			public void TrimEnd(string source, Func<char, float> charWidth)
			{
			}
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x10009C8", Offset = "0x10009C8", VA = "0x10009C8")]
		public static void Tokenize(string text, List<Token> tokens)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x1003A40", Offset = "0x1003A40", VA = "0x1003A40")]
		public static void Wrap(string source, List<Token> tokens, List<Line> lines, Func<char, float> widthFunc, float maxLineWidth)
		{
		}
	}
}
namespace Leap.Unity.GraphicalRenderer.Tests
{
	[Token(Token = "0x200041C")]
	public static class GraphicExtensions
	{
		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x1005254", Offset = "0x1005254", VA = "0x1005254")]
		public static GraphicCallbackInfo.GraphicInfo OnAwake(this LeapGraphic graphic)
		{
			return default(GraphicCallbackInfo.GraphicInfo);
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x10052BC", Offset = "0x10052BC", VA = "0x10052BC")]
		public static GraphicCallbackInfo.GraphicInfo OnEnable(this LeapGraphic graphic)
		{
			return default(GraphicCallbackInfo.GraphicInfo);
		}

		[Token(Token = "0x6001E77")]
		[Address(RVA = "0x1005324", Offset = "0x1005324", VA = "0x1005324")]
		public static GraphicCallbackInfo.GraphicInfo OnStart(this LeapGraphic graphic)
		{
			return default(GraphicCallbackInfo.GraphicInfo);
		}
	}
	[Token(Token = "0x200041D")]
	public class GraphicCallbackInfo : MonoBehaviour
	{
		[Token(Token = "0x2000678")]
		public struct GraphicInfo
		{
			[Token(Token = "0x400221D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly bool hasFired;

			[Token(Token = "0x400221E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			private bool _wasAttached;

			[Token(Token = "0x400221F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private LeapGraphicGroup _attachedGroup;

			[Token(Token = "0x17000457")]
			public bool hasNotFired
			{
				[Token(Token = "0x60029BF")]
				[Address(RVA = "0x1005134", Offset = "0x1005134", VA = "0x1005134")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000458")]
			public bool wasAttached
			{
				[Token(Token = "0x60029C0")]
				[Address(RVA = "0x1005144", Offset = "0x1005144", VA = "0x1005144")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000459")]
			public LeapGraphicGroup attachedGroup
			{
				[Token(Token = "0x60029C1")]
				[Address(RVA = "0x10051CC", Offset = "0x10051CC", VA = "0x10051CC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029C2")]
			[Address(RVA = "0x100500C", Offset = "0x100500C", VA = "0x100500C")]
			public GraphicInfo(GameObject obj)
			{
			}
		}

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraphicInfo awakeInfo;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GraphicInfo enableInfo;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GraphicInfo startInfo;

		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x1004FC8", Offset = "0x1004FC8", VA = "0x1004FC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x10050A4", Offset = "0x10050A4", VA = "0x10050A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x10050E8", Offset = "0x10050E8", VA = "0x10050E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x100512C", Offset = "0x100512C", VA = "0x100512C")]
		public GraphicCallbackInfo()
		{
		}
	}
	[Token(Token = "0x200041E")]
	public static class ReflectionExtensions
	{
		[Token(Token = "0x6001E7C")]
		public static object GetField<T>(this T t, string fieldName)
		{
			return null;
		}
	}
}
namespace Leap.Unity.InputModule
{
	[Token(Token = "0x200041F")]
	public class Cursor3D : MonoBehaviour
	{
		[Token(Token = "0x2000679")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479DC", Offset = "0xB479DC")]
		private sealed class <DragObject>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Cursor3D <>4__this;

			[Token(Token = "0x4002223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int whichHand;

			[Token(Token = "0x4002224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int i;

			[Token(Token = "0x4002225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4002226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x1700045A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029C6")]
				[Address(RVA = "0xF44DCC", Offset = "0xF44DCC", VA = "0xF44DCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700045B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029C8")]
				[Address(RVA = "0xF44E34", Offset = "0xF44E34", VA = "0xF44E34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029C3")]
			[Address(RVA = "0xF44954", Offset = "0xF44954", VA = "0xF44954")]
			[DebuggerHidden]
			public <DragObject>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60029C4")]
			[Address(RVA = "0xF4499C", Offset = "0xF4499C", VA = "0xF4499C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029C5")]
			[Address(RVA = "0xF449A0", Offset = "0xF449A0", VA = "0xF449A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029C7")]
			[Address(RVA = "0xF44DD4", Offset = "0xF44DD4", VA = "0xF44DD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB540E0", Offset = "0xB540E0")]
		public LeapProvider LeapDataProvider;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54118", Offset = "0xB54118")]
		public float RenderSphereDiameter;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54150", Offset = "0xB54150")]
		public float CollisionSphereDiameter;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54188", Offset = "0xB54188")]
		public float MotionScalingFactor;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB541C0", Offset = "0xB541C0")]
		public float CursorSmoothingFactor;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB541F8", Offset = "0xB541F8")]
		public float Spring;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54230", Offset = "0xB54230")]
		public float Damper;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54268", Offset = "0xB54268")]
		public float Drag;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB542A0", Offset = "0xB542A0")]
		public float AngularDrag;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB542D8", Offset = "0xB542D8")]
		public float Distance;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion CurrentRotation;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Mesh _sphereMesh;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Material _sphereMaterial;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject[] Cursors;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SpringJoint[,] SpringJoints;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool[] prevPinching;

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xF4392C", Offset = "0xF4392C", VA = "0xF4392C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xF43D08", Offset = "0xF43D08", VA = "0xF43D08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xF448D0", Offset = "0xF448D0", VA = "0xF448D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5EE1C", Offset = "0xB5EE1C")]
		private IEnumerator DragObject(int whichHand, int i)
		{
			return null;
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xF44980", Offset = "0xF44980", VA = "0xF44980")]
		public Cursor3D()
		{
		}
	}
	[Token(Token = "0x2000420")]
	public class CompressibleUI : MonoBehaviour, ILeapWidget
	{
		[Serializable]
		[Token(Token = "0x200067A")]
		public struct Layer
		{
			[Token(Token = "0x4002227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[HideInInspector]
			public string Label;

			[Token(Token = "0x4002228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59208", Offset = "0xB59208")]
			public RectTransform LayerTransform;

			[Token(Token = "0x4002229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59240", Offset = "0xB59240")]
			public float MaxFloatDistance;

			[Token(Token = "0x400222A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59278", Offset = "0xB59278")]
			public float MinFloatDistance;

			[Token(Token = "0x400222B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB592B0", Offset = "0xB592B0")]
			public UnityEngine.UI.Image Shadow;

			[Token(Token = "0x400222C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB592E8", Offset = "0xB592E8")]
			public bool ShadowOnAboveLayer;

			[Token(Token = "0x400222D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB59320", Offset = "0xB59320")]
			public bool TriggerLayerEvent;

			[Token(Token = "0x400222E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public float MaxShadowOpacity;

			[Token(Token = "0x400222F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[HideInInspector]
			public float CurrentFloatingDistance;

			[Token(Token = "0x4002230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[HideInInspector]
			public bool touchingFinger;

			[Token(Token = "0x4002231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public float distanceToAboveLayer;

			[Token(Token = "0x4002232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[HideInInspector]
			public float maxDistanceToAboveLayer;
		}

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54330", Offset = "0xB54330")]
		public Layer[] Layers;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54368", Offset = "0xB54368")]
		public float ExpandSpeed;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB543A0", Offset = "0xB543A0")]
		public float ContractSpeed;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB543D8", Offset = "0xB543D8")]
		public float PushPaddingDistance;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54410", Offset = "0xB54410")]
		public UnityEvent LayerDepress;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54448", Offset = "0xB54448")]
		public UnityEvent LayerCollapse;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54480", Offset = "0xB54480")]
		public UnityEvent LayerExpand;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float curLerpSpeed;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float HoveringDistance;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool currentlyFloating;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float TimeLastHovered;

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xF429C8", Offset = "0xF429C8", VA = "0xF429C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0xF42D40", Offset = "0xF42D40", VA = "0xF42D40")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0xF42E9C", Offset = "0xF42E9C", VA = "0xF42E9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0xF43694", Offset = "0xF43694", VA = "0xF43694", Slot = "6")]
		public void HoverDistance(float distance)
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0xF42D2C", Offset = "0xF42D2C", VA = "0xF42D2C", Slot = "4")]
		public void Expand()
		{
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0xF436C8", Offset = "0xF436C8", VA = "0xF436C8", Slot = "5")]
		public void Retract()
		{
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0xF436D8", Offset = "0xF436D8", VA = "0xF436D8")]
		public void DivideLayerHeightsOnToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0xF437D8", Offset = "0xF437D8", VA = "0xF437D8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0xF43904", Offset = "0xF43904", VA = "0xF43904")]
		public CompressibleUI()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0xF43678", Offset = "0xF43678", VA = "0xF43678")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000422")]
	public interface ILeapWidget
	{
		[Token(Token = "0x6001E8B")]
		void Expand();

		[Token(Token = "0x6001E8C")]
		void Retract();

		[Token(Token = "0x6001E8D")]
		void HoverDistance(float distance);
	}
	[Token(Token = "0x2000423")]
	public class LeapInputModule : BaseInputModule
	{
		[Serializable]
		[Token(Token = "0x200067B")]
		public class PositionEvent : UnityEvent<Vector3>
		{
			[Token(Token = "0x60029C9")]
			[Address(RVA = "0xF4AFE0", Offset = "0xF4AFE0", VA = "0xF4AFE0")]
			public PositionEvent()
			{
			}
		}

		[Token(Token = "0x200067C")]
		public enum InteractionCapability
		{
			[Token(Token = "0x4002234")]
			Hybrid,
			[Token(Token = "0x4002235")]
			Tactile,
			[Token(Token = "0x4002236")]
			Projective
		}

		[Token(Token = "0x200067D")]
		private enum pointerStates
		{
			[Token(Token = "0x4002238")]
			OnCanvas,
			[Token(Token = "0x4002239")]
			OnElement,
			[Token(Token = "0x400223A")]
			PinchingToCanvas,
			[Token(Token = "0x400223B")]
			PinchingToElement,
			[Token(Token = "0x400223C")]
			NearCanvas,
			[Token(Token = "0x400223D")]
			TouchingCanvas,
			[Token(Token = "0x400223E")]
			TouchingElement,
			[Token(Token = "0x400223F")]
			OffCanvas
		}

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB544B8", Offset = "0xB544B8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB544B8", Offset = "0xB544B8")]
		public LeapProvider LeapDataProvider;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54518", Offset = "0xB54518")]
		public PinchDetector LeftHandDetector;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54550", Offset = "0xB54550")]
		public PinchDetector RightHandDetector;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54588", Offset = "0xB54588")]
		private int NumberOfPointers;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB545C0", Offset = "0xB545C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB545C0", Offset = "0xB545C0")]
		public Sprite PointerSprite;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54620", Offset = "0xB54620")]
		public Material PointerMaterial;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54658", Offset = "0xB54658")]
		public Color StandardColor;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54690", Offset = "0xB54690")]
		public Color HoveringColor;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB546C8", Offset = "0xB546C8")]
		public Color TriggeringColor;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54700", Offset = "0xB54700")]
		public Color TriggerMissedColor;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB54738", Offset = "0xB54738")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54738", Offset = "0xB54738")]
		public bool ShowAdvancedOptions;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54798", Offset = "0xB54798")]
		public float TactilePadding;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB547D0", Offset = "0xB547D0")]
		public AudioClip BeginHoverSound;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54808", Offset = "0xB54808")]
		public AudioClip EndHoverSound;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54840", Offset = "0xB54840")]
		public AudioClip BeginTriggerSound;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54878", Offset = "0xB54878")]
		public AudioClip EndTriggerSound;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB548B0", Offset = "0xB548B0")]
		public AudioClip BeginMissedSound;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB548E8", Offset = "0xB548E8")]
		public AudioClip EndMissedSound;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54920", Offset = "0xB54920")]
		public AudioClip DragLoopSound;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB54958", Offset = "0xB54958")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54958", Offset = "0xB54958")]
		public PositionEvent onClickDown;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB549B8", Offset = "0xB549B8")]
		public PositionEvent onClickUp;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB549F0", Offset = "0xB549F0")]
		public PositionEvent onHover;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54A28", Offset = "0xB54A28")]
		public PositionEvent whileClickHeld;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54A60", Offset = "0xB54A60")]
		public bool ShowExperimentalOptions;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54A98", Offset = "0xB54A98")]
		public InteractionCapability InteractionMode;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54AD0", Offset = "0xB54AD0")]
		public float ProjectiveToTactileTransitionDistance;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54B08", Offset = "0xB54B08")]
		public AnimationCurve PointerDistanceScale;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54B40", Offset = "0xB54B40")]
		public AnimationCurve PointerPinchScale;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54B78", Offset = "0xB54B78")]
		public float PinchingThreshold;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54BB0", Offset = "0xB54BB0")]
		public bool perFingerPointer;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54BE8", Offset = "0xB54BE8")]
		public bool EnvironmentPointer;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54C20", Offset = "0xB54C20")]
		public PositionEvent environmentPinch;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54C58", Offset = "0xB54C58")]
		public bool InnerPointer;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54C90", Offset = "0xB54C90")]
		public float InnerPointerOpacityScalar;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54CC8", Offset = "0xB54CC8")]
		public bool TriggerHoverOnElementSwitch;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54D00", Offset = "0xB54D00")]
		public bool OverrideScrollViewClicks;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54D38", Offset = "0xB54D38")]
		public bool DrawDebug;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54D70", Offset = "0xB54D70")]
		public bool RetractUI;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54DA8", Offset = "0xB54DA8")]
		public bool MovingReferenceFrame;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private PointerEventData[] PointEvents;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private pointerStates[] pointerState;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Transform[] Pointers;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Transform[] InnerPointers;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private LineRenderer[] PointerLines;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject[] currentOverGo;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private pointerStates[] PrevState;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector2[] PrevScreenPosition;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector2[] DragBeginPosition;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool[] PrevTriggeringInteraction;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool PrevTouchingMode;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private GameObject[] prevOverGo;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float[] timeEnteredCanvas;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Canvas[] canvases;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Quaternion CurrentRotation;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private AudioSource SoundPlayer;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private GameObject[] currentGo;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private GameObject[] currentGoing;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Vector3 OldCameraPos;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Quaternion OldCameraRot;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private bool forceProjective;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20D")]
		private bool forceTactile;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Queue<Vector3> DebugSphereQueue;

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0xF44E3C", Offset = "0xF44E3C", VA = "0xF44E3C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0xF456CC", Offset = "0xF456CC", VA = "0xF456CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xF457F0", Offset = "0xF457F0", VA = "0xF457F0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0xF48240", Offset = "0xF48240", VA = "0xF48240")]
		private bool GetLookPointerEventData(int whichPointer, int whichHand, int whichFinger, Vector3 Origin, Vector3 Direction, bool forceTipRaycast)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0xF492D0", Offset = "0xF492D0", VA = "0xF492D0")]
		private void ProcessState(int whichPointer, int whichHand, int whichFinger, bool forceTipRaycast)
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xF49D94", Offset = "0xF49D94", VA = "0xF49D94")]
		private void ProcessStateEvents(int whichPointer)
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xF48CF0", Offset = "0xF48CF0", VA = "0xF48CF0")]
		private void UpdatePointer(int whichPointer, PointerEventData pointData, GameObject UIComponent)
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xF4972C", Offset = "0xF4972C", VA = "0xF4972C")]
		private void evaluatePointerSize(int whichPointer)
		{
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xF49AA0", Offset = "0xF49AA0", VA = "0xF49AA0")]
		public bool isTriggeringInteraction(int whichPointer, int whichHand, int whichFinger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xF495C4", Offset = "0xF495C4", VA = "0xF495C4")]
		public float distanceOfTipToPointer(int whichPointer, int whichHand, int whichFinger)
		{
			return default(float);
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xF4A698", Offset = "0xF4A698", VA = "0xF4A698")]
		public float distanceOfTipToElement(Transform UIElement, int whichHand, int whichFinger)
		{
			return default(float);
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xF4A5C0", Offset = "0xF4A5C0", VA = "0xF4A5C0")]
		public bool getTouchingMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xF4A63C", Offset = "0xF4A63C", VA = "0xF4A63C")]
		public bool getTouchingMode(int whichPointer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xF4A26C", Offset = "0xF4A26C", VA = "0xF4A26C")]
		private void updatePointerColor(int whichPointer, int whichHand, int whichFinger)
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xF4A7BC", Offset = "0xF4A7BC", VA = "0xF4A7BC")]
		public void lerpPointerColor(int whichPointer, Color color, float lerpalpha)
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xF480EC", Offset = "0xF480EC", VA = "0xF480EC")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xF4AD30", Offset = "0xF4AD30", VA = "0xF4AD30")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xF4ADC0", Offset = "0xF4ADC0", VA = "0xF4ADC0", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xF4AE60", Offset = "0xF4AE60", VA = "0xF4AE60")]
		public LeapInputModule()
		{
		}
	}
	[Token(Token = "0x2000424")]
	public class PhysicsUI : MonoBehaviour
	{
		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54DE0", Offset = "0xB54DE0")]
		public Transform ButtonFace;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54E18", Offset = "0xB54E18")]
		public UnityEngine.UI.Image Shadow;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float MaxShadowOpacity;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody body;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint SpringJoint;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 InitialLocalPosition;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 PhysicsPosition;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 PhysicsVelocity;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool physicsOccurred;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool isDepressed;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool prevDepressed;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData pointerEvent;

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xF4B030", Offset = "0xF4B030", VA = "0xF4B030")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xF4B3C8", Offset = "0xF4B3C8", VA = "0xF4B3C8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xF4B430", Offset = "0xF4B430", VA = "0xF4B430")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xF4BB80", Offset = "0xF4BB80", VA = "0xF4BB80")]
		public PhysicsUI()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class ScrollRectVolume : MonoBehaviour
	{
		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource source;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform content;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Volume;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RectTransform viewport;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float volumeScalar;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector2 currentPos;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 prevPos;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector2 viewportScale;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float TimeLastSlid;

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xF4BC08", Offset = "0xF4BC08", VA = "0xF4BC08")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xF4BCEC", Offset = "0xF4BCEC", VA = "0xF4BCEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xF4BF80", Offset = "0xF4BF80", VA = "0xF4BF80")]
		public ScrollRectVolume()
		{
		}
	}
	[Token(Token = "0x2000426")]
	public class SliderShadow : MonoBehaviour
	{
		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Slider;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform Handle;

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0xF4C060", Offset = "0xF4C060", VA = "0xF4C060")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0xF4C140", Offset = "0xF4C140", VA = "0xF4C140")]
		public SliderShadow()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class SliderVolume : MonoBehaviour
	{
		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource source;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float volume;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float currentValue;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float previousValue;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float maxValue;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float TimeLastSlid;

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0xF4C148", Offset = "0xF4C148", VA = "0xF4C148")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0xF4C1AC", Offset = "0xF4C1AC", VA = "0xF4C1AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0xF4C2CC", Offset = "0xF4C2CC", VA = "0xF4C2CC")]
		public void setSliderSoundVolume(float sliderposition)
		{
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0xF4C300", Offset = "0xF4C300", VA = "0xF4C300")]
		public SliderVolume()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class ToggleToggler : MonoBehaviour
	{
		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text text;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.UI.Image image;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color OnColor;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color OffColor;

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0xF4C310", Offset = "0xF4C310", VA = "0xF4C310")]
		public void SetToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0xF4C46C", Offset = "0xF4C46C", VA = "0xF4C46C")]
		public ToggleToggler()
		{
		}
	}
}
namespace Leap.Unity.DetectionExamples
{
	[Token(Token = "0x2000429")]
	[ExecuteInEditMode]
	public class MengerSponge : MonoBehaviour
	{
		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int _rendererLod;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subMeshLod;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material _material;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _overrideShadowDistance;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> _renderers;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Mesh _subMesh;

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x1569C00", Offset = "0x1569C00", VA = "0x1569C00")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x1569C9C", Offset = "0x1569C9C", VA = "0x1569C9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x156A128", Offset = "0x156A128", VA = "0x156A128")]
		private Mesh generateMengerMesh(int lod)
		{
			return null;
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0x156AC8C", Offset = "0x156AC8C", VA = "0x156AC8C")]
		private void addQuad(List<Vector3> verts, List<int> tris, Vector3 center, Vector3 axisA, Vector3 axisB, float radius)
		{
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x156ABE8", Offset = "0x156ABE8", VA = "0x156ABE8")]
		private bool isSpaceFilled(int x, int y, int z, int size)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x156B018", Offset = "0x156B018", VA = "0x156B018")]
		private bool spaceFilledBaseCase(int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x156B044", Offset = "0x156B044", VA = "0x156B044")]
		public MengerSponge()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class PinchDraw : MonoBehaviour
	{
		[Token(Token = "0x200067E")]
		private class DrawState
		{
			[Token(Token = "0x4002240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private List<Vector3> _vertices;

			[Token(Token = "0x4002241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<int> _tris;

			[Token(Token = "0x4002242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private List<Vector2> _uvs;

			[Token(Token = "0x4002243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<Color> _colors;

			[Token(Token = "0x4002244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private PinchDraw _parent;

			[Token(Token = "0x4002245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int _rings;

			[Token(Token = "0x4002246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 _prevRing0;

			[Token(Token = "0x4002247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 _prevRing1;

			[Token(Token = "0x4002248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 _prevNormal0;

			[Token(Token = "0x4002249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Mesh _mesh;

			[Token(Token = "0x400224A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private SmoothedVector3 _smoothedPosition;

			[Token(Token = "0x60029CA")]
			[Address(RVA = "0x156B324", Offset = "0x156B324", VA = "0x156B324")]
			public DrawState(PinchDraw parent)
			{
			}

			[Token(Token = "0x60029CB")]
			[Address(RVA = "0x156B5A4", Offset = "0x156B5A4", VA = "0x156B5A4")]
			public GameObject BeginNewLine()
			{
				return null;
			}

			[Token(Token = "0x60029CC")]
			[Address(RVA = "0x156B810", Offset = "0x156B810", VA = "0x156B810")]
			public void UpdateLine(Vector3 position)
			{
			}

			[Token(Token = "0x60029CD")]
			[Address(RVA = "0x156B7F0", Offset = "0x156B7F0", VA = "0x156B7F0")]
			public void FinishLine()
			{
			}

			[Token(Token = "0x60029CE")]
			[Address(RVA = "0x156BEC4", Offset = "0x156BEC4", VA = "0x156BEC4")]
			private void updateMesh()
			{
			}

			[Token(Token = "0x60029CF")]
			[Address(RVA = "0x156B9A4", Offset = "0x156B9A4", VA = "0x156B9A4")]
			private void addRing(Vector3 ringPosition)
			{
			}

			[Token(Token = "0x60029D0")]
			[Address(RVA = "0x156BF9C", Offset = "0x156BF9C", VA = "0x156BF9C")]
			private void addVertexRing()
			{
			}

			[Token(Token = "0x60029D1")]
			[Address(RVA = "0x156C0EC", Offset = "0x156C0EC", VA = "0x156C0EC")]
			private void addTriSegment()
			{
			}

			[Token(Token = "0x60029D2")]
			[Address(RVA = "0x156C240", Offset = "0x156C240", VA = "0x156C240")]
			private void updateRingVerts(int offset, Vector3 ringPosition, Vector3 direction, Vector3 normal, float radiusScale)
			{
			}
		}

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB54E90", Offset = "0xB54E90")]
		[SerializeField]
		private PinchDetector[] _pinchDetectors;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Material _material;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color _drawColor;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float _smoothingDelay;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _drawRadius;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int _drawResolution;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float _minSegmentLength;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DrawState[] _drawStates;

		[Token(Token = "0x17000315")]
		public Color DrawColor
		{
			[Token(Token = "0x6001EB7")]
			[Address(RVA = "0x156B0C0", Offset = "0x156B0C0", VA = "0x156B0C0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001EB8")]
			[Address(RVA = "0x156B0CC", Offset = "0x156B0CC", VA = "0x156B0CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000316")]
		public float DrawRadius
		{
			[Token(Token = "0x6001EB9")]
			[Address(RVA = "0x156B0D8", Offset = "0x156B0D8", VA = "0x156B0D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001EBA")]
			[Address(RVA = "0x156B0E0", Offset = "0x156B0E0", VA = "0x156B0E0")]
			set
			{
			}
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x156B0E8", Offset = "0x156B0E8", VA = "0x156B0E8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x156B194", Offset = "0x156B194", VA = "0x156B194")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x156B224", Offset = "0x156B224", VA = "0x156B224")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x156B4B4", Offset = "0x156B4B4", VA = "0x156B4B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x156B954", Offset = "0x156B954", VA = "0x156B954")]
		public PinchDraw()
		{
		}
	}
}
namespace Leap.Unity.VRVisualizer
{
	[Token(Token = "0x200042B")]
	public class VisualizerControls : MonoBehaviour
	{
		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x149D994", Offset = "0x149D994", VA = "0x149D994")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x149D9C0", Offset = "0x149D9C0", VA = "0x149D9C0")]
		public VisualizerControls()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class VisualizerManager : MonoBehaviour
	{
		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject m_PCVisualizer;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject m_VRVisualizer;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text m_warningText;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text m_trackingText;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text m_frameRateText;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Text m_dataFrameRateText;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyCode keyToToggleHMD;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Controller m_controller;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_leapConnected;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SmoothedFloat m_deltaTime;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_framrateUpdateCount;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_framerateUpdateInterval;

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x149D9C8", Offset = "0x149D9C8", VA = "0x149D9C8")]
		private void FindController()
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x149DA5C", Offset = "0x149DA5C", VA = "0x149DA5C")]
		private void goVR()
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x149DB60", Offset = "0x149DB60", VA = "0x149DB60")]
		private void goDesktop()
		{
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x149DC04", Offset = "0x149DC04", VA = "0x149DC04")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x149DDD4", Offset = "0x149DDD4", VA = "0x149DDD4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x149E200", Offset = "0x149E200", VA = "0x149E200")]
		private void updateRenderFrameRate()
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x149E36C", Offset = "0x149E36C", VA = "0x149E36C")]
		public VisualizerManager()
		{
		}
	}
}
namespace Leap.Unity.Testing
{
	[Token(Token = "0x200042D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB463E8", Offset = "0xB463E8")]
	public class SetupLeapTestsAttribute : Attribute
	{
		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x1495958", Offset = "0x1495958", VA = "0x1495958")]
		public SetupLeapTestsAttribute()
		{
		}
	}
	[Token(Token = "0x200042E")]
	public static class EnableLeapTests
	{
	}
}
namespace Leap.Unity.Graphing
{
	[Token(Token = "0x200042F")]
	public class RealtimeGraph : MonoBehaviour
	{
		[Token(Token = "0x200067F")]
		public struct GraphKey
		{
			[Token(Token = "0x400224B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x400224C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GraphUnits units;

			[Token(Token = "0x400224D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public long tick;

			[Token(Token = "0x60029D3")]
			[Address(RVA = "0x10059FC", Offset = "0x10059FC", VA = "0x10059FC")]
			public GraphKey(string name, GraphUnits units, long tick = 0L)
			{
			}
		}

		[Token(Token = "0x2000680")]
		public enum GraphUnits
		{
			[Token(Token = "0x400224F")]
			Miliseconds,
			[Token(Token = "0x4002250")]
			Framerate
		}

		[Token(Token = "0x2000681")]
		public enum GraphMode
		{
			[Token(Token = "0x4002252")]
			Inclusive,
			[Token(Token = "0x4002253")]
			Exclusive
		}

		[Token(Token = "0x2000682")]
		protected class Graph
		{
			[Token(Token = "0x4002254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x4002255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GraphUnits units;

			[Token(Token = "0x4002256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Deque<float> exclusive;

			[Token(Token = "0x4002257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Deque<float> inclusive;

			[Token(Token = "0x4002258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SlidingMax exclusiveMax;

			[Token(Token = "0x4002259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SlidingMax inclusiveMax;

			[Token(Token = "0x400225A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int maxHistory;

			[Token(Token = "0x400225B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private long accumulatedInclusiveTicks;

			[Token(Token = "0x400225C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private long accumulatedExclusiveTicks;

			[Token(Token = "0x400225D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private long inclusiveStart;

			[Token(Token = "0x400225E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private long exclusiveStart;

			[Token(Token = "0x60029D4")]
			[Address(RVA = "0x1007254", Offset = "0x1007254", VA = "0x1007254")]
			public Graph(string name, GraphUnits units, int maxHistory)
			{
			}

			[Token(Token = "0x60029D5")]
			[Address(RVA = "0x100742C", Offset = "0x100742C", VA = "0x100742C")]
			public void BeginSample(long currTicks)
			{
			}

			[Token(Token = "0x60029D6")]
			[Address(RVA = "0x1007414", Offset = "0x1007414", VA = "0x1007414")]
			public void PauseSample(long currTicks)
			{
			}

			[Token(Token = "0x60029D7")]
			[Address(RVA = "0x10078B4", Offset = "0x10078B4", VA = "0x10078B4")]
			public void ResumeSample(long currTicks)
			{
			}

			[Token(Token = "0x60029D8")]
			[Address(RVA = "0x1007434", Offset = "0x1007434", VA = "0x1007434")]
			public void EndSample(long currTicks)
			{
			}

			[Token(Token = "0x60029D9")]
			[Address(RVA = "0x1005CC8", Offset = "0x1005CC8", VA = "0x1005CC8")]
			public void AddSample(long ticks)
			{
			}

			[Token(Token = "0x60029DA")]
			[Address(RVA = "0x1006974", Offset = "0x1006974", VA = "0x1006974")]
			public void ClearSample()
			{
			}

			[Token(Token = "0x60029DB")]
			[Address(RVA = "0x100697C", Offset = "0x100697C", VA = "0x100697C")]
			public void RecordSample(int sampleCount)
			{
			}
		}

		[Token(Token = "0x2000683")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479EC", Offset = "0xB479EC")]
		private sealed class <endOfFrameWaiter>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400225F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RealtimeGraph <>4__this;

			[Token(Token = "0x4002262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForEndOfFrame <waiter>5__2;

			[Token(Token = "0x4002263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private long <endOfFrameTicks>5__3;

			[Token(Token = "0x1700045C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60029DF")]
				[Address(RVA = "0x1007844", Offset = "0x1007844", VA = "0x1007844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700045D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60029E1")]
				[Address(RVA = "0x10078AC", Offset = "0x10078AC", VA = "0x10078AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60029DC")]
			[Address(RVA = "0x1006ECC", Offset = "0x1006ECC", VA = "0x1006ECC")]
			[DebuggerHidden]
			public <endOfFrameWaiter>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x60029DD")]
			[Address(RVA = "0x1007624", Offset = "0x1007624", VA = "0x1007624", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60029DE")]
			[Address(RVA = "0x1007628", Offset = "0x1007628", VA = "0x1007628", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60029E0")]
			[Address(RVA = "0x100784C", Offset = "0x100784C", VA = "0x100784C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000684")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB479FC", Offset = "0xB479FC")]
		private sealed class <>c__DisplayClass66_0
		{
			[Token(Token = "0x4002264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RealtimeGraph <>4__this;

			[Token(Token = "0x4002265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x60029E2")]
			[Address(RVA = "0x100740C", Offset = "0x100740C", VA = "0x100740C")]
			public <>c__DisplayClass66_0()
			{
			}

			[Token(Token = "0x60029E3")]
			[Address(RVA = "0x1007604", Offset = "0x1007604", VA = "0x1007604")]
			internal void <addCallback>b__0()
			{
			}
		}

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RealtimeGraph _cachedInstance;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string _defaultGraph;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected string[] _unitySamplerNames;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected GraphMode _graphMode;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected int _historyLength;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected int _updatePeriod;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		protected int _samplesPerFrame;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected float _framerateLineSpacing;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected float _deltaLineSpacing;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float _maxSmoothingDelay;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		protected float _valueSmoothingDelay;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB54FDC", Offset = "0xB54FDC")]
		[SerializeField]
		protected LeapServiceProvider _provider;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected Renderer _graphRenderer;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected Text titleLabel;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected TextMesh valueMesh;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected GameObject customGraphPrefab;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Stopwatch _stopwatch;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected int _sampleIndex;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected int _updateCount;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool _paused;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Texture2D _texture;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Color32[] _colors;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected SmoothedFloat _smoothedValue;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected SmoothedFloat _smoothedMax;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Graph _currentGraph;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Dictionary<string, Graph> _graphs;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Stack<Graph> _currentGraphStack;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Deque<GraphKey> _keyBuffer;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected List<Recorder> _unityRecorders;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected long _preCullTicks;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected long _renderTicks;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected long _fixedTicks;

		[Token(Token = "0x17000317")]
		public static RealtimeGraph Instance
		{
			[Token(Token = "0x6001ECA")]
			[Address(RVA = "0x1005660", Offset = "0x1005660", VA = "0x1005660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public float UpdatePeriodFloat
		{
			[Token(Token = "0x6001ECB")]
			[Address(RVA = "0x1005780", Offset = "0x1005780", VA = "0x1005780")]
			set
			{
			}
		}

		[Token(Token = "0x17000319")]
		public float BatchSizeFloat
		{
			[Token(Token = "0x6001ECC")]
			[Address(RVA = "0x100580C", Offset = "0x100580C", VA = "0x100580C")]
			set
			{
			}
		}

		[Token(Token = "0x1700031A")]
		public float GraphModeFloat
		{
			[Token(Token = "0x6001ECD")]
			[Address(RVA = "0x1005898", Offset = "0x1005898", VA = "0x1005898")]
			set
			{
			}
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x10058BC", Offset = "0x10058BC", VA = "0x10058BC")]
		public void BeginSample(GraphKey key)
		{
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x1005964", Offset = "0x1005964", VA = "0x1005964")]
		public void BeginSample(string sampleName, GraphUnits units)
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x1005A0C", Offset = "0x1005A0C", VA = "0x1005A0C")]
		public void EndSample()
		{
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x1005A90", Offset = "0x1005A90", VA = "0x1005A90")]
		public void AddSample(string sampleName, GraphUnits units, long ticks)
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x1005CDC", Offset = "0x1005CDC", VA = "0x1005CDC")]
		public void AddSample(string sampleName, GraphUnits units, float ms)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x1005DC4", Offset = "0x1005DC4", VA = "0x1005DC4")]
		public void SwtichGraph(string graphName)
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x1005E50", Offset = "0x1005E50", VA = "0x1005E50")]
		public void TogglePaused()
		{
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x1005E60", Offset = "0x1005E60", VA = "0x1005E60", Slot = "4")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0x1005EEC", Offset = "0x1005EEC", VA = "0x1005EEC", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x1005FC0", Offset = "0x1005FC0", VA = "0x1005FC0", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x1006198", Offset = "0x1006198", VA = "0x1006198", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x1006340", Offset = "0x1006340", VA = "0x1006340", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x1006464", Offset = "0x1006464", VA = "0x1006464", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x1006E8C", Offset = "0x1006E8C", VA = "0x1006E8C", Slot = "10")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x10062D0", Offset = "0x10062D0", VA = "0x10062D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB5EE90", Offset = "0xB5EE90")]
		private IEnumerator endOfFrameWaiter()
		{
			return null;
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x1006EF8", Offset = "0x1006EF8", VA = "0x1006EF8")]
		private void onPreCull(Camera camera)
		{
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x1006F38", Offset = "0x1006F38", VA = "0x1006F38")]
		private void onPostRender(Camera camera)
		{
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x1006F74", Offset = "0x1006F74", VA = "0x1006F74")]
		protected static float ticksToMs(long ticks)
		{
			return default(float);
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x1006FFC", Offset = "0x1006FFC", VA = "0x1006FFC")]
		private string msToString(float ms)
		{
			return null;
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x1007108", Offset = "0x1007108", VA = "0x1007108")]
		private long msToTicks(float ms)
		{
			return default(long);
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x10071AC", Offset = "0x10071AC", VA = "0x10071AC")]
		private float getGraphSpacing()
		{
			return default(float);
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x1006B70", Offset = "0x1006B70", VA = "0x1006B70")]
		private void UpdateTexture()
		{
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x1005AC8", Offset = "0x1005AC8", VA = "0x1005AC8")]
		protected Graph getGraph(string name, GraphUnits units)
		{
			return null;
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x1007350", Offset = "0x1007350", VA = "0x1007350")]
		protected void addCallback(Button button, string name)
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x10067EC", Offset = "0x10067EC", VA = "0x10067EC")]
		protected void replayKeys()
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x1007450", Offset = "0x1007450", VA = "0x1007450")]
		public RealtimeGraph()
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x1007580", Offset = "0x1007580", VA = "0x1007580")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EEF4", Offset = "0xB5EEF4")]
		private Recorder <Start>b__52_0(string n)
		{
			return null;
		}
	}
}
namespace Leap.Unity.Packaging
{
	[Token(Token = "0x2000430")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xB4641C", Offset = "0xB4641C")]
	public class BuildDefinition : DefinitionBase
	{
		[Token(Token = "0x4001957")]
		private const string BUILD_EXPORT_FOLDER_KEY = "LeapBuildDefExportFolder";

		[Token(Token = "0x4001958")]
		private const string DEFAULT_BUILD_NAME = "Build.asset";

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		protected bool _trySuffixWithGitHash;

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x10A9FB0", Offset = "0x10A9FB0", VA = "0x10A9FB0")]
		public BuildDefinition()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public class DefinitionBase : ScriptableObject
	{
		[Token(Token = "0x400195A")]
		private const string PACKAGE_EXPORT_FOLDER_KEY = "LeapPackageDefExportFolder";

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB55078", Offset = "0xB55078")]
		protected string _definitionName;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB550C4", Offset = "0xB550C4")]
		[SerializeField]
		protected bool _showInBuildMenu;

		[Token(Token = "0x1700031B")]
		public string DefinitionName
		{
			[Token(Token = "0x6001EEB")]
			[Address(RVA = "0x10A9FC0", Offset = "0x10A9FC0", VA = "0x10A9FC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		public bool ShowInBuildMenu
		{
			[Token(Token = "0x6001EEC")]
			[Address(RVA = "0x10A9FC8", Offset = "0x10A9FC8", VA = "0x10A9FC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x10A9FB8", Offset = "0x10A9FB8", VA = "0x10A9FB8")]
		public DefinitionBase()
		{
		}
	}
	[Token(Token = "0x2000432")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xB46470", Offset = "0xB46470")]
	public class PackageDefinition : DefinitionBase
	{
		[Token(Token = "0x400195D")]
		private const string DEFAULT_PACKAGE_NAME = "Package.asset";

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55110", Offset = "0xB55110")]
		[SerializeField]
		protected string[] _dependantFolders;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected string[] _ignoredFolders;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5516C", Offset = "0xB5516C")]
		[SerializeField]
		protected string[] _dependantFiles;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected string[] _ignoredFiles;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB551C8", Offset = "0xB551C8")]
		[SerializeField]
		protected PackageDefinition[] _dependantPackages;

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x10A9FD0", Offset = "0x10A9FD0", VA = "0x10A9FD0")]
		public PackageDefinition()
		{
		}
	}
}
namespace Leap.Unity.Generation
{
	[Token(Token = "0x2000433")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xB464C4", Offset = "0xB464C4")]
	public class BitConverterGenerator : GeneratorBase
	{
		[Serializable]
		[Token(Token = "0x2000685")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47A0C", Offset = "0xB47A0C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, string> <>9__11_0;

			[Token(Token = "0x4002268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<int, string> <>9__11_1;

			[Token(Token = "0x4002269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<int, string> <>9__11_2;

			[Token(Token = "0x400226A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<char, bool> <>9__12_1;

			[Token(Token = "0x400226B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<string, string> <>9__13_0;

			[Token(Token = "0x400226C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<string, bool> <>9__13_1;

			[Token(Token = "0x400226D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<string, bool> <>9__13_2;

			[Token(Token = "0x400226E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<string, string> <>9__13_3;

			[Token(Token = "0x400226F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Func<string, string, string> <>9__13_4;

			[Token(Token = "0x4002270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Func<string, bool> <>9__13_5;

			[Token(Token = "0x4002271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static Func<string, string> <>9__13_6;

			[Token(Token = "0x4002272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static Func<string, string, string> <>9__13_7;

			[Token(Token = "0x4002273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static Func<string, bool> <>9__13_8;

			[Token(Token = "0x4002274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static Func<string, string> <>9__13_9;

			[Token(Token = "0x4002275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public static Func<string, string, string> <>9__13_10;

			[Token(Token = "0x60029E5")]
			[Address(RVA = "0x102826C", Offset = "0x102826C", VA = "0x102826C")]
			public <>c()
			{
			}

			[Token(Token = "0x60029E6")]
			[Address(RVA = "0x1028274", Offset = "0x1028274", VA = "0x1028274")]
			internal string <generateCode>b__11_0(string l)
			{
				return null;
			}

			[Token(Token = "0x60029E7")]
			[Address(RVA = "0x1028300", Offset = "0x1028300", VA = "0x1028300")]
			internal string <generateCode>b__11_1(int b)
			{
				return null;
			}

			[Token(Token = "0x60029E8")]
			[Address(RVA = "0x1028388", Offset = "0x1028388", VA = "0x1028388")]
			internal string <generateCode>b__11_2(int b)
			{
				return null;
			}

			[Token(Token = "0x60029E9")]
			[Address(RVA = "0x1028410", Offset = "0x1028410", VA = "0x1028410")]
			internal bool <expandMethodTemplate>b__12_1(char c)
			{
				return default(bool);
			}

			[Token(Token = "0x60029EA")]
			[Address(RVA = "0x1028478", Offset = "0x1028478", VA = "0x1028478")]
			internal string <generateUnitTests>b__13_0(string l)
			{
				return null;
			}

			[Token(Token = "0x60029EB")]
			[Address(RVA = "0x1028528", Offset = "0x1028528", VA = "0x1028528")]
			internal bool <generateUnitTests>b__13_1(string l)
			{
				return default(bool);
			}

			[Token(Token = "0x60029EC")]
			[Address(RVA = "0x1028590", Offset = "0x1028590", VA = "0x1028590")]
			internal bool <generateUnitTests>b__13_2(string l)
			{
				return default(bool);
			}

			[Token(Token = "0x60029ED")]
			[Address(RVA = "0x10285F8", Offset = "0x10285F8", VA = "0x10285F8")]
			internal string <generateUnitTests>b__13_3(string s)
			{
				return null;
			}

			[Token(Token = "0x60029EE")]
			[Address(RVA = "0x102864C", Offset = "0x102864C", VA = "0x102864C")]
			internal string <generateUnitTests>b__13_4(string a, string b)
			{
				return null;
			}

			[Token(Token = "0x60029EF")]
			[Address(RVA = "0x102865C", Offset = "0x102865C", VA = "0x102865C")]
			internal bool <generateUnitTests>b__13_5(string l)
			{
				return default(bool);
			}

			[Token(Token = "0x60029F0")]
			[Address(RVA = "0x10286C4", Offset = "0x10286C4", VA = "0x10286C4")]
			internal string <generateUnitTests>b__13_6(string s)
			{
				return null;
			}

			[Token(Token = "0x60029F1")]
			[Address(RVA = "0x1028718", Offset = "0x1028718", VA = "0x1028718")]
			internal string <generateUnitTests>b__13_7(string a, string b)
			{
				return null;
			}

			[Token(Token = "0x60029F2")]
			[Address(RVA = "0x1028728", Offset = "0x1028728", VA = "0x1028728")]
			internal bool <generateUnitTests>b__13_8(string l)
			{
				return default(bool);
			}

			[Token(Token = "0x60029F3")]
			[Address(RVA = "0x1028790", Offset = "0x1028790", VA = "0x1028790")]
			internal string <generateUnitTests>b__13_9(string s)
			{
				return null;
			}

			[Token(Token = "0x60029F4")]
			[Address(RVA = "0x10287E4", Offset = "0x10287E4", VA = "0x10287E4")]
			internal string <generateUnitTests>b__13_10(string a, string b)
			{
				return null;
			}
		}

		[Token(Token = "0x2000686")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47A1C", Offset = "0xB47A1C")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4002276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string primitiveType;

			[Token(Token = "0x60029F5")]
			[Address(RVA = "0x10281F0", Offset = "0x10281F0", VA = "0x10281F0")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60029F6")]
			[Address(RVA = "0x10287F4", Offset = "0x10287F4", VA = "0x10287F4")]
			internal bool <expandMethodTemplate>b__0(Type t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001963")]
		public const string BEGIN_KEY = "//BEGIN";

		[Token(Token = "0x4001964")]
		public const string END_KEY = "//END";

		[Token(Token = "0x4001965")]
		public const string TO_KEY = "TO";

		[Token(Token = "0x4001966")]
		public const string GET_KEY = "GET";

		[Token(Token = "0x4001967")]
		public const string FILL_BYTES_KEY = "//FILL BYTES";

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextAsset codeTemplate;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextAsset testTemplate;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AssetFolder targetFolder;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AssetFolder testFolder;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] primitiveTypes;

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x1026B30", Offset = "0x1026B30", VA = "0x1026B30", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x1026B54", Offset = "0x1026B54", VA = "0x1026B54")]
		private void generateCode()
		{
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0x1027E30", Offset = "0x1027E30", VA = "0x1027E30")]
		private void expandMethodTemplate(List<string> methodTemplate, StreamWriter writer, Func<int, string> byteExpr)
		{
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x102710C", Offset = "0x102710C", VA = "0x102710C")]
		private void generateUnitTests()
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0x1027C98", Offset = "0x1027C98", VA = "0x1027C98")]
		private List<string> getLines(TextAsset asset)
		{
			return null;
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0x10281F8", Offset = "0x10281F8", VA = "0x10281F8")]
		public BitConverterGenerator()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public static class _BitConverterTestMock_
	{
		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x102892C", Offset = "0x102892C", VA = "0x102892C")]
		public static float ToSingle(byte[] bytes, int offset)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x1028934", Offset = "0x1028934", VA = "0x1028934")]
		public static void GetBytes(float value, byte[] bytes, ref int offset)
		{
		}
	}
	[Token(Token = "0x2000435")]
	public static class BitConverterNonAlloc_Template_
	{
		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x1028834", Offset = "0x1028834", VA = "0x1028834")]
		public static float ToSingle(byte[] bytes, int offset = 0)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x102886C", Offset = "0x102886C", VA = "0x102886C")]
		public static float ToSingle(byte[] bytes, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x10288B0", Offset = "0x10288B0", VA = "0x10288B0")]
		public static void GetBytes(float value, byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x10288E8", Offset = "0x10288E8", VA = "0x10288E8")]
		public static void GetBytes(float value, byte[] bytes, ref int offset)
		{
		}
	}
	[Token(Token = "0x2000436")]
	public abstract class GeneratorBase : ScriptableObject
	{
		[Token(Token = "0x6001EFB")]
		public abstract void Generate();

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x1028200", Offset = "0x1028200", VA = "0x1028200")]
		protected GeneratorBase()
		{
		}
	}
}
namespace Leap.Unity.Playback
{
	[Token(Token = "0x2000437")]
	public class PlaybackProvider : LeapProvider
	{
		[Token(Token = "0x2000687")]
		public enum PlaybackTimeline
		{
			[Token(Token = "0x4002278")]
			Graphics,
			[Token(Token = "0x4002279")]
			Physics
		}

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Recording _recording;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected PlaybackTimeline _playbackTimeline;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		protected bool _autoPlay;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		protected bool _isPlaying;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int _currentFrameIndex;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float _startTime;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Frame _transformedFrame;

		[Token(Token = "0x1700031D")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x6001EFD")]
			[Address(RVA = "0x10AAB5C", Offset = "0x10AAB5C", VA = "0x10AAB5C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031E")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x6001EFE")]
			[Address(RVA = "0x10AAB64", Offset = "0x10AAB64", VA = "0x10AAB64", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031F")]
		public virtual bool IsPlaying
		{
			[Token(Token = "0x6001EFF")]
			[Address(RVA = "0x10AAB70", Offset = "0x10AAB70", VA = "0x10AAB70", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000320")]
		public virtual Recording recording
		{
			[Token(Token = "0x6001F00")]
			[Address(RVA = "0x10AAB78", Offset = "0x10AAB78", VA = "0x10AAB78", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F01")]
			[Address(RVA = "0x10AAB80", Offset = "0x10AAB80", VA = "0x10AAB80", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x10AABB4", Offset = "0x10AABB4", VA = "0x10AABB4", Slot = "9")]
		public virtual void Play()
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x10AACA0", Offset = "0x10AACA0", VA = "0x10AACA0", Slot = "10")]
		public virtual void Pause()
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x10AACA8", Offset = "0x10AACA8", VA = "0x10AACA8", Slot = "11")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x10AAD4C", Offset = "0x10AAD4C", VA = "0x10AAD4C", Slot = "12")]
		public virtual void Seek(int newFrameIndex)
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x10AAF54", Offset = "0x10AAF54", VA = "0x10AAF54", Slot = "13")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x10AAF6C", Offset = "0x10AAF6C", VA = "0x10AAF6C", Slot = "14")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x10AB0FC", Offset = "0x10AB0FC", VA = "0x10AB0FC", Slot = "15")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0x10AAFBC", Offset = "0x10AAFBC", VA = "0x10AAFBC")]
		private void stepRecording(float time)
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x10AB150", Offset = "0x10AB150", VA = "0x10AB150")]
		public PlaybackProvider()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class PlaybackRecorder : MonoBehaviour
	{
		[Token(Token = "0x2000688")]
		public enum RecordTime
		{
			[Token(Token = "0x400227B")]
			Update,
			[Token(Token = "0x400227C")]
			FixedUpdate
		}

		[Token(Token = "0x2000689")]
		public enum SaveType
		{
			[Token(Token = "0x400227E")]
			None,
			[Token(Token = "0x400227F")]
			UnityAsset
		}

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected LeapProvider _provider;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected RecordTime _recordTime;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB55264", Offset = "0xB55264")]
		[SerializeField]
		protected KeyCode _startRecording;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected KeyCode _endRecording;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected SaveType _saveType;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected string _unityAssetSavePath;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float _beginTime;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Recording _currentRecording;

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x10AB1C4", Offset = "0x10AB1C4", VA = "0x10AB1C4", Slot = "4")]
		public virtual void StartRecording()
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x10AB240", Offset = "0x10AB240", VA = "0x10AB240", Slot = "5")]
		public virtual Recording EndRecording()
		{
			return null;
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x10AB2D0", Offset = "0x10AB2D0", VA = "0x10AB2D0", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x10AB44C", Offset = "0x10AB44C", VA = "0x10AB44C", Slot = "7")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x10AB590", Offset = "0x10AB590", VA = "0x10AB590")]
		public PlaybackRecorder()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public class Recording : ScriptableObject
	{
		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Frame> frames;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<float> frameTimes;

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x10AB5F4", Offset = "0x10AB5F4", VA = "0x10AB5F4", Slot = "4")]
		public virtual void TrimStartOfEmptyFrames(int framesToRemain)
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x10AB6E4", Offset = "0x10AB6E4", VA = "0x10AB6E4", Slot = "5")]
		public virtual void TrimEndOfEmptyFrames(int framesToRemain)
		{
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x10AB7DC", Offset = "0x10AB7DC", VA = "0x10AB7DC", Slot = "6")]
		public virtual void TrimStart(int trimCount)
		{
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x10AB91C", Offset = "0x10AB91C", VA = "0x10AB91C", Slot = "7")]
		public virtual void TrimEnd(int trimCount)
		{
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x10AB9D4", Offset = "0x10AB9D4", VA = "0x10AB9D4")]
		public Recording()
		{
		}
	}
}
namespace Leap.Unity.Recording
{
	[Token(Token = "0x200043A")]
	public class EventClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EventPlayableBehaviour behaviour;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExposedReference<GameObject> recipient;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string message;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB552E0", Offset = "0xB552E0")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB552E0", Offset = "0xB552E0")]
		private SerializedArgumentType _argumentType;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color colorArg;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float floatArg;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int intArg;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Quaternion quaternionArg;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xB55350", Offset = "0xB55350")]
		public string stringArg;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector2 vector2Arg;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 vector3Arg;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector4 vector4Arg;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB55360", Offset = "0xB55360")]
		[SerializeField]
		[AttributeAttribute(Name = "OnEditorChangeAttribute", RVA = "0xB55360", Offset = "0xB55360")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55360", Offset = "0xB55360")]
		private EventScrubType _eventScrubType;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private bool _userSetScrubType;

		[Token(Token = "0x17000321")]
		public SerializedArgumentType argumentType
		{
			[Token(Token = "0x6001F15")]
			[Address(RVA = "0x12A4FE8", Offset = "0x12A4FE8", VA = "0x12A4FE8")]
			get
			{
				return default(SerializedArgumentType);
			}
			[Token(Token = "0x6001F16")]
			[Address(RVA = "0x12A4FF0", Offset = "0x12A4FF0", VA = "0x12A4FF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public EventScrubType eventScrubType
		{
			[Token(Token = "0x6001F17")]
			[Address(RVA = "0x12A5010", Offset = "0x12A5010", VA = "0x12A5010")]
			get
			{
				return default(EventScrubType);
			}
			[Token(Token = "0x6001F18")]
			[Address(RVA = "0x12A5018", Offset = "0x12A5018", VA = "0x12A5018")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x6001F19")]
			[Address(RVA = "0x12A5028", Offset = "0x12A5028", VA = "0x12A5028", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x17000324")]
		public override double duration
		{
			[Token(Token = "0x6001F1A")]
			[Address(RVA = "0x12A5030", Offset = "0x12A5030", VA = "0x12A5030", Slot = "7")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x12A5038", Offset = "0x12A5038", VA = "0x12A5038", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x12A5164", Offset = "0x12A5164", VA = "0x12A5164")]
		private object getArgument()
		{
			return null;
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x12A527C", Offset = "0x12A527C", VA = "0x12A527C")]
		public void FireEvent()
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x12A5408", Offset = "0x12A5408", VA = "0x12A5408")]
		public EventClip()
		{
		}
	}
	[Token(Token = "0x200043B")]
	public enum SerializedArgumentType
	{
		[Token(Token = "0x400198D")]
		None,
		[Token(Token = "0x400198E")]
		Color,
		[Token(Token = "0x400198F")]
		Float,
		[Token(Token = "0x4001990")]
		Int,
		[Token(Token = "0x4001991")]
		Quaternion,
		[Token(Token = "0x4001992")]
		String,
		[Token(Token = "0x4001993")]
		Vector2,
		[Token(Token = "0x4001994")]
		Vector3,
		[Token(Token = "0x4001995")]
		Vector4
	}
	[Token(Token = "0x200043C")]
	public enum EventScrubType
	{
		[Token(Token = "0x4001997")]
		Trigger,
		[Token(Token = "0x4001998")]
		StateChange
	}
	[Token(Token = "0x200043D")]
	public class EventPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject recipient;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string message;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object argument;

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x12A5300", Offset = "0x12A5300", VA = "0x12A5300")]
		public void FireEvent()
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x12A553C", Offset = "0x12A553C", VA = "0x12A553C")]
		public EventPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class EventPlayableMixerBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x200068A")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB47A2C", Offset = "0xB47A2C")]
		public struct Pair<U>
		{
			[Token(Token = "0x4002280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public U a;

			[Token(Token = "0x4002281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public U b;

			[Token(Token = "0x1700045E")]
			public U Item
			{
				[Token(Token = "0x60029F7")]
				get
				{
					return (U)null;
				}
				[Token(Token = "0x60029F8")]
				set
				{
				}
			}

			[Token(Token = "0x60029F9")]
			private void checkIdx(int idx)
			{
			}

			[Token(Token = "0x60029FA")]
			public Pair(U a, U b)
			{
			}
		}

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EventTrack eventTrack;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<TimelineClip> _clips;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TimelineClipComparerer _clipComparer;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _firstFrameFired;

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x12A5594", Offset = "0x12A5594", VA = "0x12A5594", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x12A5674", Offset = "0x12A5674", VA = "0x12A5674", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x12A575C", Offset = "0x12A575C", VA = "0x12A575C", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x12A5AB8", Offset = "0x12A5AB8", VA = "0x12A5AB8", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x12A57A4", Offset = "0x12A57A4", VA = "0x12A57A4")]
		private void refreshEvents()
		{
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0x12A5C0C", Offset = "0x12A5C0C", VA = "0x12A5C0C")]
		private void checkFireTimeZeroEvent(double curLocalTime)
		{
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0x12A5CE8", Offset = "0x12A5CE8", VA = "0x12A5CE8")]
		private void sweepFireEvents(double prevTime, double curTime)
		{
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x12A5EC4", Offset = "0x12A5EC4", VA = "0x12A5EC4")]
		private void sweepFireFromBeginning(double prevTime, double curTime)
		{
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x12A62A4", Offset = "0x12A62A4", VA = "0x12A62A4")]
		private void getUniqueMessageScrubbedEvents(double time0, double time1, List<int> indicesBuffer, List<Maybe<int>> prevIdxBuffer)
		{
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x12A6828", Offset = "0x12A6828", VA = "0x12A6828")]
		public EventPlayableMixerBehaviour()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class TimelineClipComparerer : IComparer<TimelineClip>
	{
		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x12A96BC", Offset = "0x12A96BC", VA = "0x12A96BC", Slot = "4")]
		public int Compare(TimelineClip x, TimelineClip y)
		{
			return default(int);
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x12A96FC", Offset = "0x12A96FC", VA = "0x12A96FC")]
		public TimelineClipComparerer()
		{
		}
	}
	[Token(Token = "0x2000440")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0xB46508", Offset = "0xB46508")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0xB46508", Offset = "0xB46508")]
	public class EventTrack : TrackAsset
	{
		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x12A6830", Offset = "0x12A6830", VA = "0x12A6830", Slot = "23")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x12A6910", Offset = "0x12A6910", VA = "0x12A6910")]
		public EventTrack()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class HierarchyPostProcess : MonoBehaviour
	{
		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5542C", Offset = "0xB5542C")]
		public string recordingName;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssetFolder assetFolder;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AssetFolder dataFolder;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "ImplementsTypeNameDropdownAttribute", RVA = "0xB55464", Offset = "0xB55464")]
		private string _leapRecordingType;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB554D8", Offset = "0xB554D8")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB554D8", Offset = "0xB554D8")]
		public float positionMaxError;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB55528", Offset = "0xB55528")]
		public float rotationMaxError;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB55544", Offset = "0xB55544")]
		public float scaleMaxError;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB55558", Offset = "0xB55558")]
		public float colorHueMaxError;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB55570", Offset = "0xB55570")]
		public float colorSaturationMaxError;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB55588", Offset = "0xB55588")]
		public float colorValueMaxError;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB555A0", Offset = "0xB555A0")]
		public float colorAlphaMaxError;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB555B8", Offset = "0xB555B8")]
		public float genericMaxError;

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x12A6978", Offset = "0x12A6978", VA = "0x12A6978")]
		public HierarchyPostProcess()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class HierarchyRecorder : MonoBehaviour
	{
		[Token(Token = "0x200068B")]
		[Flags]
		public enum RecordOn
		{
			[Token(Token = "0x4002283")]
			Start = 1,
			[Token(Token = "0x4002284")]
			HMDPresence = 2,
			[Token(Token = "0x4002285")]
			HandPresence = 4
		}

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnPreRecordFrame;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnBeginRecording;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static HierarchyRecorder instance;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[EnumFlags]
		public RecordOn recordWhen;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string recordingName;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AssetFolder targetFolder;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB555DC", Offset = "0xB555DC")]
		public LeapProvider provider;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool recordLeapData;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB55614", Offset = "0xB55614")]
		public KeyCode beginRecordingKey;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public KeyCode finishRecordingKey;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected AnimationClip _clip;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected List<Component> _components;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<PropertyRecorder> _recorders;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<Behaviour> _tempBehaviour;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected List<Renderer> _tempRenderer;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected List<Collider> _tempCollider;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected HashSet<string> _takenNames;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool _isRecording;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float _startTime;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected int _startFrame;

		[Token(Token = "0x17000325")]
		public bool isRecording
		{
			[Token(Token = "0x6001F30")]
			[Address(RVA = "0x12A699C", Offset = "0x12A699C", VA = "0x12A699C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000326")]
		public float recordingTime
		{
			[Token(Token = "0x6001F31")]
			[Address(RVA = "0x12A69A4", Offset = "0x12A69A4", VA = "0x12A69A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x12A69D0", Offset = "0x12A69D0", VA = "0x12A69D0")]
		public HierarchyRecorder()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class LeapPlayableProvider : LeapProvider
	{
		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Frame _frame;

		[Token(Token = "0x17000327")]
		public override Frame CurrentFixedFrame
		{
			[Token(Token = "0x6001F33")]
			[Address(RVA = "0x12A6AC4", Offset = "0x12A6AC4", VA = "0x12A6AC4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000328")]
		public override Frame CurrentFrame
		{
			[Token(Token = "0x6001F34")]
			[Address(RVA = "0x12A6ACC", Offset = "0x12A6ACC", VA = "0x12A6ACC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x12A6AD4", Offset = "0x12A6AD4", VA = "0x12A6AD4")]
		public void SetCurrentFrame(Frame frame)
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x12A6B0C", Offset = "0x12A6B0C", VA = "0x12A6B0C")]
		public LeapPlayableProvider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000444")]
	public class RecordingBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LeapRecording recording;

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x12A8B68", Offset = "0x12A8B68", VA = "0x12A8B68")]
		public RecordingBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000445")]
	public class RecordingClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LeapRecording recording;

		[Token(Token = "0x17000329")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x6001F38")]
			[Address(RVA = "0x12A8B70", Offset = "0x12A8B70", VA = "0x12A8B70", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x12A8B78", Offset = "0x12A8B78", VA = "0x12A8B78", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x12A8C50", Offset = "0x12A8C50", VA = "0x12A8C50")]
		public RecordingClip()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class RecordingMixerBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Frame _frame;

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x12A8C58", Offset = "0x12A8C58", VA = "0x12A8C58", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x12A8CE0", Offset = "0x12A8CE0", VA = "0x12A8CE0", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x12A8F64", Offset = "0x12A8F64", VA = "0x12A8F64")]
		public RecordingMixerBehaviour()
		{
		}
	}
	[Token(Token = "0x2000447")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0xB46590", Offset = "0xB46590")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0xB46590", Offset = "0xB46590")]
	[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0xB46590", Offset = "0xB46590")]
	public class RecordingTrack : TrackAsset
	{
		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x12A8F6C", Offset = "0x12A8F6C", VA = "0x12A8F6C", Slot = "23")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0x12A9004", Offset = "0x12A9004", VA = "0x12A9004")]
		public RecordingTrack()
		{
		}
	}
	[Token(Token = "0x2000448")]
	public class TimelinePostProcess : MonoBehaviour
	{
		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimelineAsset[] assets;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string headPositionPath;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool lerpStartingPosition;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 startHeadPosition;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool lerpEndingPosition;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 endHeadPosition;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool cropAnimation;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] allBindings;

		[Token(Token = "0x6001F40")]
		[Address(RVA = "0x12A9704", Offset = "0x12A9704", VA = "0x12A9704")]
		public TimelinePostProcess()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public abstract class LeapRecording : ScriptableObject
	{
		[Token(Token = "0x40019CC")]
		public const double NS_TO_S = 1E-06;

		[Token(Token = "0x40019CD")]
		public const double S_TO_NS = 1000000.0;

		[Token(Token = "0x1700032A")]
		public abstract float length
		{
			[Token(Token = "0x6001F41")]
			get;
		}

		[Token(Token = "0x6001F42")]
		public abstract void LoadFrames(List<Frame> frames);

		[Token(Token = "0x6001F43")]
		public abstract bool Sample(float time, Frame toFill, bool clampTimeToValid = true);

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0x12A6B14", Offset = "0x12A6B14", VA = "0x12A6B14")]
		protected LeapRecording()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class RawLeapRecording : LeapRecording
	{
		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Frame> frameList;

		[Token(Token = "0x1700032B")]
		public long EarliestTimestamp
		{
			[Token(Token = "0x6001F45")]
			[Address(RVA = "0x12A83EC", Offset = "0x12A83EC", VA = "0x12A83EC")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700032C")]
		public long LatestTimestamp
		{
			[Token(Token = "0x6001F46")]
			[Address(RVA = "0x12A8458", Offset = "0x12A8458", VA = "0x12A8458")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700032D")]
		public override float length
		{
			[Token(Token = "0x6001F48")]
			[Address(RVA = "0x12A8638", Offset = "0x12A8638", VA = "0x12A8638", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x12A84CC", Offset = "0x12A84CC", VA = "0x12A84CC", Slot = "5")]
		public override void LoadFrames(List<Frame> frames)
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0x12A86D0", Offset = "0x12A86D0", VA = "0x12A86D0", Slot = "6")]
		public override bool Sample(float time, Frame toFill, bool clampTimeToValid = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x12A883C", Offset = "0x12A883C", VA = "0x12A883C")]
		public RawLeapRecording()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class VectorHandRecording : LeapRecording
	{
		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private VectorFrameCurves _frameCurves;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Hand _leftHand;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Hand _rightHand;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float _minKeyframeTime;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private float _maxKeyframeTime;

		[Token(Token = "0x1700032E")]
		public override float length
		{
			[Token(Token = "0x6001F4B")]
			[Address(RVA = "0x12AA828", Offset = "0x12AA828", VA = "0x12AA828", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700032F")]
		public float minKeyframeTime
		{
			[Token(Token = "0x6001F4C")]
			[Address(RVA = "0x12AA834", Offset = "0x12AA834", VA = "0x12AA834")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000330")]
		public float maxKeyframeTime
		{
			[Token(Token = "0x6001F4D")]
			[Address(RVA = "0x12AA83C", Offset = "0x12AA83C", VA = "0x12AA83C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x12AA844", Offset = "0x12AA844", VA = "0x12AA844", Slot = "5")]
		public override void LoadFrames(List<Frame> frames)
		{
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x12AAAE8", Offset = "0x12AAAE8", VA = "0x12AAAE8", Slot = "6")]
		public override bool Sample(float time, Frame toFill, bool clampTimeToValid = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x12AAB30", Offset = "0x12AAB30", VA = "0x12AAB30")]
		private bool outsideDataBounds(float time)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x12AAB54", Offset = "0x12AAB54", VA = "0x12AAB54")]
		public VectorHandRecording()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200044C")]
	public struct QuaternionCurves
	{
		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private AnimationCurve _xCurve;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private AnimationCurve _yCurve;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private AnimationCurve _zCurve;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AnimationCurve _wCurve;

		[Token(Token = "0x17000331")]
		public AnimationCurve xCurve
		{
			[Token(Token = "0x6001F52")]
			[Address(RVA = "0x12A7F2C", Offset = "0x12A7F2C", VA = "0x12A7F2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F53")]
			[Address(RVA = "0x12A7F98", Offset = "0x12A7F98", VA = "0x12A7F98")]
			set
			{
			}
		}

		[Token(Token = "0x17000332")]
		public AnimationCurve yCurve
		{
			[Token(Token = "0x6001F54")]
			[Address(RVA = "0x12A7FA0", Offset = "0x12A7FA0", VA = "0x12A7FA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0x12A800C", Offset = "0x12A800C", VA = "0x12A800C")]
			set
			{
			}
		}

		[Token(Token = "0x17000333")]
		public AnimationCurve zCurve
		{
			[Token(Token = "0x6001F56")]
			[Address(RVA = "0x12A8014", Offset = "0x12A8014", VA = "0x12A8014")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F57")]
			[Address(RVA = "0x12A8080", Offset = "0x12A8080", VA = "0x12A8080")]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public AnimationCurve wCurve
		{
			[Token(Token = "0x6001F58")]
			[Address(RVA = "0x12A8088", Offset = "0x12A8088", VA = "0x12A8088")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F59")]
			[Address(RVA = "0x12A80F4", Offset = "0x12A80F4", VA = "0x12A80F4")]
			set
			{
			}
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x12A80FC", Offset = "0x12A80FC", VA = "0x12A80FC")]
		public void AddKeyframes(float time, Quaternion value)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x12A82D0", Offset = "0x12A82D0", VA = "0x12A82D0")]
		public Quaternion Evaluate(float time)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200044D")]
	public struct Vector3Curves
	{
		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private AnimationCurve _xCurve;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private AnimationCurve _yCurve;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private AnimationCurve _zCurve;

		[Token(Token = "0x17000335")]
		public AnimationCurve xCurve
		{
			[Token(Token = "0x6001F5C")]
			[Address(RVA = "0x12A9BA0", Offset = "0x12A9BA0", VA = "0x12A9BA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F5D")]
			[Address(RVA = "0x12A9C0C", Offset = "0x12A9C0C", VA = "0x12A9C0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public AnimationCurve yCurve
		{
			[Token(Token = "0x6001F5E")]
			[Address(RVA = "0x12A9C14", Offset = "0x12A9C14", VA = "0x12A9C14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F5F")]
			[Address(RVA = "0x12A9C80", Offset = "0x12A9C80", VA = "0x12A9C80")]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public AnimationCurve zCurve
		{
			[Token(Token = "0x6001F60")]
			[Address(RVA = "0x12A9C88", Offset = "0x12A9C88", VA = "0x12A9C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F61")]
			[Address(RVA = "0x12A9CF4", Offset = "0x12A9CF4", VA = "0x12A9CF4")]
			set
			{
			}
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x12A9CFC", Offset = "0x12A9CFC", VA = "0x12A9CFC")]
		public void AddKeyframes(float time, Vector3 value)
		{
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x12A9D88", Offset = "0x12A9D88", VA = "0x12A9D88")]
		public Vector3 Evaluate(float time)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200044E")]
	public struct VectorFrameCurves
	{
		[Serializable]
		[Token(Token = "0x200068C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47A74", Offset = "0xB47A74")]
		private sealed class <>c
		{
			[Token(Token = "0x4002286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Hand, bool> <>9__2_0;

			[Token(Token = "0x4002288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Hand, bool> <>9__2_1;

			[Token(Token = "0x60029FC")]
			[Address(RVA = "0x12AA6C0", Offset = "0x12AA6C0", VA = "0x12AA6C0")]
			public <>c()
			{
			}

			[Token(Token = "0x60029FD")]
			[Address(RVA = "0x12AA6C8", Offset = "0x12AA6C8", VA = "0x12AA6C8")]
			internal bool <AddKeyframes>b__2_0(Hand h)
			{
				return default(bool);
			}

			[Token(Token = "0x60029FE")]
			[Address(RVA = "0x12AA6E0", Offset = "0x12AA6E0", VA = "0x12AA6E0")]
			internal bool <AddKeyframes>b__2_1(Hand h)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VectorHandCurves leftHandCurves;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VectorHandCurves rightHandCurves;

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x12A9E38", Offset = "0x12A9E38", VA = "0x12A9E38")]
		public void AddKeyframes(float keyframeTime, Frame frame)
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x12AA2A8", Offset = "0x12AA2A8", VA = "0x12AA2A8")]
		public void Sample(float time, Frame intoFrame, Hand intoLeftHand, Hand intoRightHand)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200044F")]
	public struct VectorHandCurves
	{
		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private AnimationCurve _backingIsTrackedCurve;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3Curves palmPosCurves;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QuaternionCurves palmRotCurves;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3Curves[] _backingJointPositionCurves;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand _lastHand;

		[Token(Token = "0x17000338")]
		public AnimationCurve isTrackedCurve
		{
			[Token(Token = "0x6001F66")]
			[Address(RVA = "0x12AA700", Offset = "0x12AA700", VA = "0x12AA700")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F67")]
			[Address(RVA = "0x12AA76C", Offset = "0x12AA76C", VA = "0x12AA76C")]
			set
			{
			}
		}

		[Token(Token = "0x17000339")]
		public Vector3Curves[] jointPositionCurves
		{
			[Token(Token = "0x6001F68")]
			[Address(RVA = "0x12AA774", Offset = "0x12AA774", VA = "0x12AA774")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F69")]
			[Address(RVA = "0x12AA820", Offset = "0x12AA820", VA = "0x12AA820")]
			set
			{
			}
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x12AA098", Offset = "0x12AA098", VA = "0x12AA098")]
		public void AddKeyframes(float time, Hand hand)
		{
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x12AA3CC", Offset = "0x12AA3CC", VA = "0x12AA3CC")]
		public bool Sample(float time, Hand intoHand, bool isLeft)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000450")]
	public abstract class MethodRecording : MonoBehaviour
	{
		[Token(Token = "0x200068D")]
		public enum Mode
		{
			[Token(Token = "0x400228A")]
			None,
			[Token(Token = "0x400228B")]
			Recording,
			[Token(Token = "0x400228C")]
			Playback
		}

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5570C", Offset = "0xB5570C")]
		private Mode <mode>k__BackingField;

		[Token(Token = "0x1700033A")]
		public Mode mode
		{
			[Token(Token = "0x6001F6C")]
			[Address(RVA = "0x12A7878", Offset = "0x12A7878", VA = "0x12A7878")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EF04", Offset = "0xB5EF04")]
			get
			{
				return default(Mode);
			}
			[Token(Token = "0x6001F6D")]
			[Address(RVA = "0x12A7880", Offset = "0x12A7880", VA = "0x12A7880")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EF14", Offset = "0xB5EF14")]
			private set
			{
			}
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x12A7888", Offset = "0x12A7888", VA = "0x12A7888", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001F6F")]
		public abstract float GetDuration();

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x12A794C", Offset = "0x12A794C", VA = "0x12A794C", Slot = "6")]
		public virtual void EnterRecordingMode()
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x12A7958", Offset = "0x12A7958", VA = "0x12A7958", Slot = "7")]
		public virtual void ExitRecordingMode(string savePath)
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x12A7960", Offset = "0x12A7960", VA = "0x12A7960", Slot = "8")]
		public virtual void EnterPlaybackMode()
		{
		}

		[Token(Token = "0x6001F73")]
		public abstract void SweepTime(float from, float to);

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x12A796C", Offset = "0x12A796C", VA = "0x12A796C")]
		protected MethodRecording()
		{
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0x12A7974", Offset = "0x12A7974", VA = "0x12A7974")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB5EF24", Offset = "0xB5EF24")]
		private void <Awake>b__4_0()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public abstract class BasicMethodData<T> : ScriptableObject
	{
		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<float> times;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> args;

		[Token(Token = "0x6001F76")]
		protected BasicMethodData()
		{
		}
	}
	[Token(Token = "0x2000452")]
	public abstract class BasicMethodRecording<T, K> : MethodRecording where T : BasicMethodData<K>
	{
		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T data;

		[Token(Token = "0x6001F77")]
		public override void EnterRecordingMode()
		{
		}

		[Token(Token = "0x6001F78")]
		public override void ExitRecordingMode(string savePath)
		{
		}

		[Token(Token = "0x6001F79")]
		public sealed override float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6001F7A")]
		public sealed override void SweepTime(float from, float to)
		{
		}

		[Token(Token = "0x6001F7B")]
		protected void SaveArgs(K state)
		{
		}

		[Token(Token = "0x6001F7C")]
		protected abstract void InvokeArgs(K state);

		[Token(Token = "0x6001F7D")]
		protected BasicMethodRecording()
		{
		}
	}
	[Token(Token = "0x2000453")]
	public class MethodRecordingClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invokeAtEditTime;

		[Token(Token = "0x1700033B")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x6001F7E")]
			[Address(RVA = "0x12A7A14", Offset = "0x12A7A14", VA = "0x12A7A14", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0x12A7A1C", Offset = "0x12A7A1C", VA = "0x12A7A1C", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0x12A7AF4", Offset = "0x12A7AF4", VA = "0x12A7AF4")]
		public MethodRecordingClip()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public class MethodRecordingPlayable : PlayableBehaviour
	{
		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double _prevTime;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool invokeAtEditTime;

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0x12A7AFC", Offset = "0x12A7AFC", VA = "0x12A7AFC", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0x12A7C9C", Offset = "0x12A7C9C", VA = "0x12A7C9C")]
		public MethodRecordingPlayable()
		{
		}
	}
	[Token(Token = "0x2000455")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0xB4663C", Offset = "0xB4663C")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0xB4663C", Offset = "0xB4663C")]
	[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0xB4663C", Offset = "0xB4663C")]
	public class MethodRecordingTrack : TrackAsset
	{
		[Token(Token = "0x6001F83")]
		[Address(RVA = "0x12A7CAC", Offset = "0x12A7CAC", VA = "0x12A7CAC")]
		public MethodRecordingTrack()
		{
		}
	}
	[Token(Token = "0x2000456")]
	public class PropertyCompression : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200068E")]
		public class NamedCompression
		{
			[Token(Token = "0x400228D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string propertyName;

			[Token(Token = "0x400228E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "MinValue", RVA = "0xB593A8", Offset = "0xB593A8")]
			public float maxError;

			[Token(Token = "0x60029FF")]
			[Address(RVA = "0x12A7E44", Offset = "0x12A7E44", VA = "0x12A7E44")]
			public NamedCompression()
			{
			}
		}

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NamedCompression[] compressionOverrides;

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0x12A7E3C", Offset = "0x12A7E3C", VA = "0x12A7E3C")]
		public PropertyCompression()
		{
		}
	}
	[Token(Token = "0x2000457")]
	[DisallowMultipleComponent]
	public class PropertyRecorder : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200068F")]
		public class BindingSet : SerializableHashSet<string>
		{
			[Token(Token = "0x6002A00")]
			[Address(RVA = "0x12A7EDC", Offset = "0x12A7EDC", VA = "0x12A7EDC")]
			public BindingSet()
			{
			}
		}

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected List<string> _bindings;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected List<string> _expandedTypes;

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0x12A7E4C", Offset = "0x12A7E4C", VA = "0x12A7E4C")]
		public PropertyRecorder()
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class RecordedAudio : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000690")]
		public class ClipData
		{
			[Token(Token = "0x400228F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioClip clip;

			[Token(Token = "0x4002290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startTime;

			[Token(Token = "0x4002291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float pitch;

			[Token(Token = "0x4002292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float volume;

			[Token(Token = "0x6002A01")]
			[Address(RVA = "0x12A8AF0", Offset = "0x12A8AF0", VA = "0x12A8AF0")]
			public ClipData()
			{
			}
		}

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource target;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ClipData> data;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _prevWasPlaying;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _prevTime;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioClip _prevClip;

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0x12A88AC", Offset = "0x12A88AC", VA = "0x12A88AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x12A8AF8", Offset = "0x12A8AF8", VA = "0x12A8AF8")]
		public RecordedAudio()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000459")]
	public class EditorCurveBindingData
	{
		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string path;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string propertyName;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string typeName;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve curve;

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0x12A4FE0", Offset = "0x12A4FE0", VA = "0x12A4FE0")]
		public EditorCurveBindingData()
		{
		}
	}
	[Token(Token = "0x200045A")]
	public class OnUnityCallback : MonoBehaviour
	{
		[Token(Token = "0x2000691")]
		public enum CallbackType
		{
			[Token(Token = "0x4002294")]
			Awake,
			[Token(Token = "0x4002295")]
			Start,
			[Token(Token = "0x4002296")]
			OnEnable,
			[Token(Token = "0x4002297")]
			OnDisable,
			[Token(Token = "0x4002298")]
			OnDestroy,
			[Token(Token = "0x4002299")]
			FixedUpdate,
			[Token(Token = "0x400229A")]
			Update,
			[Token(Token = "0x400229B")]
			LateUpdate,
			[Token(Token = "0x400229C")]
			GenericCallback
		}

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EnumEventTable _table;

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0x12A7D14", Offset = "0x12A7D14", VA = "0x12A7D14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0x12A7D34", Offset = "0x12A7D34", VA = "0x12A7D34")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0x12A7D54", Offset = "0x12A7D54", VA = "0x12A7D54")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x12A7D74", Offset = "0x12A7D74", VA = "0x12A7D74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x12A7D94", Offset = "0x12A7D94", VA = "0x12A7D94")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x12A7DB4", Offset = "0x12A7DB4", VA = "0x12A7DB4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x12A7DD4", Offset = "0x12A7DD4", VA = "0x12A7DD4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x12A7DF4", Offset = "0x12A7DF4", VA = "0x12A7DF4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x12A7E14", Offset = "0x12A7E14", VA = "0x12A7E14")]
		public void GenericCallback()
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x12A7E34", Offset = "0x12A7E34", VA = "0x12A7E34")]
		public OnUnityCallback()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class SetPlayableDirector : MonoBehaviour
	{
		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PlayableDirector _director;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayableAsset _playable;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private DirectorWrapMode _wrapMode;

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x12A906C", Offset = "0x12A906C", VA = "0x12A906C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x12A90C4", Offset = "0x12A90C4", VA = "0x12A90C4")]
		public void PauseAndHold()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x12A914C", Offset = "0x12A914C", VA = "0x12A914C")]
		public void ResumeFromPauseAndHold()
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0x12A91D4", Offset = "0x12A91D4", VA = "0x12A91D4")]
		public SetPlayableDirector()
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class StateMachine : MonoBehaviour
	{
		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableManualTransition;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB5577C", Offset = "0xB5577C")]
		public KeyCode manualTransitionKey;

		[Token(Token = "0x1700033C")]
		public GameObject activeState
		{
			[Token(Token = "0x6001F97")]
			[Address(RVA = "0x12A91E4", Offset = "0x12A91E4", VA = "0x12A91E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0x12A9284", Offset = "0x12A9284", VA = "0x12A9284")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0x12A93A0", Offset = "0x12A93A0", VA = "0x12A93A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0x12A96AC", Offset = "0x12A96AC", VA = "0x12A96AC")]
		public StateMachine()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class TransitionBehaviour : MonoBehaviour
	{
		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<TransitionBehaviour> _transitionBehaviours;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject destination;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject transitionState;

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0x12A94F0", Offset = "0x12A94F0", VA = "0x12A94F0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB5EF34", Offset = "0xB5EF34")]
		public void Transition()
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x12A985C", Offset = "0x12A985C", VA = "0x12A985C")]
		public TransitionBehaviour()
		{
		}
	}
	[Token(Token = "0x200045E")]
	public class TransitionAfterDelay : TransitionBehaviour
	{
		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _enterTime;

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x12A9780", Offset = "0x12A9780", VA = "0x12A9780")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0x12A97A8", Offset = "0x12A97A8", VA = "0x12A97A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0x12A97EC", Offset = "0x12A97EC", VA = "0x12A97EC")]
		public TransitionAfterDelay()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class TransitionAfterPlayable : TransitionBehaviour
	{
		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayableDirector _director;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _hasStartedPlaying;

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0x12A9864", Offset = "0x12A9864", VA = "0x12A9864")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0x12A986C", Offset = "0x12A986C", VA = "0x12A986C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0x12A9950", Offset = "0x12A9950", VA = "0x12A9950")]
		public TransitionAfterPlayable()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class TransitionOnKeypress : TransitionBehaviour
	{
		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode key;

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0x12A9A2C", Offset = "0x12A9A2C", VA = "0x12A9A2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0x12A9A68", Offset = "0x12A9A68", VA = "0x12A9A68")]
		public TransitionOnKeypress()
		{
		}
	}
	[Token(Token = "0x2000461")]
	public class TransitionOnMarker : TransitionBehaviour
	{
		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MarkerController controller;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string markerName;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MarkerController.MarkerTest condition;

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0x12A9AD0", Offset = "0x12A9AD0", VA = "0x12A9AD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x12A9AE8", Offset = "0x12A9AE8", VA = "0x12A9AE8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x12A9B30", Offset = "0x12A9B30", VA = "0x12A9B30")]
		public TransitionOnMarker()
		{
		}
	}
	[Token(Token = "0x2000462")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB466F8", Offset = "0xB466F8")]
	public class DiscontinuityCalculator : MonoBehaviour
	{
		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> tracksToWatch;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool drawGizmoOnDiscontinuity;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "DisableIf", RVA = "0xB55820", Offset = "0xB55820")]
		public Transform gizmoLocation;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<bool> OnUpdate;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayableDirector _director;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<TimelineClip> _clipsToWatch;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayableAsset _prevAsset;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double _prevTime;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayState _prevPlayState;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool _willBeDiscontinuousNextFrame;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _gizmoRadius;

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x12A4664", Offset = "0x12A4664", VA = "0x12A4664")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x12A46D0", Offset = "0x12A46D0", VA = "0x12A46D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x12A49BC", Offset = "0x12A49BC", VA = "0x12A49BC")]
		private void recalculateClips()
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x12A4B98", Offset = "0x12A4B98", VA = "0x12A4B98")]
		private bool didEnterOrLeaveClip(TimelineClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x12A4F40", Offset = "0x12A4F40", VA = "0x12A4F40")]
		public DiscontinuityCalculator()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class MarkerClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string markerName;

		[Token(Token = "0x1700033D")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x6001FAE")]
			[Address(RVA = "0x12A6B1C", Offset = "0x12A6B1C", VA = "0x12A6B1C", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0x12A6B24", Offset = "0x12A6B24", VA = "0x12A6B24", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x12A6BB8", Offset = "0x12A6BB8", VA = "0x12A6BB8")]
		public MarkerClip()
		{
		}
	}
	[Token(Token = "0x2000464")]
	public class MarkerPlayable : PlayableBehaviour
	{
		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x12A7808", Offset = "0x12A7808", VA = "0x12A7808")]
		public MarkerPlayable()
		{
		}
	}
	[Token(Token = "0x2000465")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB4675C", Offset = "0xB4675C")]
	public class MarkerController : MonoBehaviour
	{
		[Token(Token = "0x2000692")]
		private enum Action
		{
			[Token(Token = "0x400229E")]
			None,
			[Token(Token = "0x400229F")]
			Pause,
			[Token(Token = "0x40022A0")]
			Loop,
			[Token(Token = "0x40022A1")]
			Skip
		}

		[Token(Token = "0x2000693")]
		public enum MarkerTest
		{
			[Token(Token = "0x40022A3")]
			BeforeMarkerStarts,
			[Token(Token = "0x40022A4")]
			AfterMarkerStarts,
			[Token(Token = "0x40022A5")]
			BeforeMarkerEnds,
			[Token(Token = "0x40022A6")]
			AfterMarkerEnds,
			[Token(Token = "0x40022A7")]
			InsideMarker,
			[Token(Token = "0x40022A8")]
			OutsideMarker
		}

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector _director;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TimelineAsset _timeline;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, TimelineClip> _markers;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, Action> _actions;

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x12A6BC0", Offset = "0x12A6BC0", VA = "0x12A6BC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001FB3")]
		[Address(RVA = "0x12A6C18", Offset = "0x12A6C18", VA = "0x12A6C18")]
		public bool TestMarker(string markerName, MarkerTest test)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FB4")]
		[Address(RVA = "0x12A6DE8", Offset = "0x12A6DE8", VA = "0x12A6DE8")]
		public void LoopAtMarker(string markerName)
		{
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0x12A6E54", Offset = "0x12A6E54", VA = "0x12A6E54")]
		public void PauseAtMarker(string markerName)
		{
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0x12A6EC0", Offset = "0x12A6EC0", VA = "0x12A6EC0")]
		public void SkipMarker(string markerName)
		{
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0x12A6F2C", Offset = "0x12A6F2C", VA = "0x12A6F2C")]
		public void ClearMarker(string markerName)
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0x12A7000", Offset = "0x12A7000", VA = "0x12A7000")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0x12A72DC", Offset = "0x12A72DC", VA = "0x12A72DC")]
		public void updateMarkersIfNeeded()
		{
		}

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0x12A7770", Offset = "0x12A7770", VA = "0x12A7770")]
		public MarkerController()
		{
		}
	}
	[Token(Token = "0x2000466")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0xB467C0", Offset = "0xB467C0")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0xB467C0", Offset = "0xB467C0")]
	public class MarkerTrack : TrackAsset
	{
		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0x12A7810", Offset = "0x12A7810", VA = "0x12A7810")]
		public MarkerTrack()
		{
		}
	}
}
namespace Leap.Unity.Swizzle
{
	[Token(Token = "0x2000467")]
	public static class Swizzle
	{
		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0x148E82C", Offset = "0x148E82C", VA = "0x148E82C")]
		public static Vector2 xx(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0x148E85C", Offset = "0x148E85C", VA = "0x148E85C")]
		public static Vector2 xy(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0x148E888", Offset = "0x148E888", VA = "0x148E888")]
		public static Vector2 yx(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x148E8C0", Offset = "0x148E8C0", VA = "0x148E8C0")]
		public static Vector2 yy(this Vector2 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x148E8F0", Offset = "0x148E8F0", VA = "0x148E8F0")]
		public static Vector3 xxx(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0x148E92C", Offset = "0x148E92C", VA = "0x148E92C")]
		public static Vector3 xxy(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0x148E968", Offset = "0x148E968", VA = "0x148E968")]
		public static Vector3 xyx(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x148E9A0", Offset = "0x148E9A0", VA = "0x148E9A0")]
		public static Vector3 xyy(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x148E9D8", Offset = "0x148E9D8", VA = "0x148E9D8")]
		public static Vector3 yxx(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0x148EA18", Offset = "0x148EA18", VA = "0x148EA18")]
		public static Vector3 yxy(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0x148EA58", Offset = "0x148EA58", VA = "0x148EA58")]
		public static Vector3 yyx(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x148EA94", Offset = "0x148EA94", VA = "0x148EA94")]
		public static Vector3 yyy(this Vector2 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x148EAD0", Offset = "0x148EAD0", VA = "0x148EAD0")]
		public static Vector4 xxxx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x148EB0C", Offset = "0x148EB0C", VA = "0x148EB0C")]
		public static Vector4 xxxy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0x148EB48", Offset = "0x148EB48", VA = "0x148EB48")]
		public static Vector4 xxyx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0x148EB84", Offset = "0x148EB84", VA = "0x148EB84")]
		public static Vector4 xxyy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0x148EBC0", Offset = "0x148EBC0", VA = "0x148EBC0")]
		public static Vector4 xyxx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0x148EBF8", Offset = "0x148EBF8", VA = "0x148EBF8")]
		public static Vector4 xyxy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0x148EC30", Offset = "0x148EC30", VA = "0x148EC30")]
		public static Vector4 xyyx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0x148EC68", Offset = "0x148EC68", VA = "0x148EC68")]
		public static Vector4 xyyy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0x148ECA0", Offset = "0x148ECA0", VA = "0x148ECA0")]
		public static Vector4 yxxx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0x148ECE0", Offset = "0x148ECE0", VA = "0x148ECE0")]
		public static Vector4 yxxy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0x148ED20", Offset = "0x148ED20", VA = "0x148ED20")]
		public static Vector4 yxyx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0x148ED60", Offset = "0x148ED60", VA = "0x148ED60")]
		public static Vector4 yxyy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0x148EDA0", Offset = "0x148EDA0", VA = "0x148EDA0")]
		public static Vector4 yyxx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0x148EDDC", Offset = "0x148EDDC", VA = "0x148EDDC")]
		public static Vector4 yyxy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0x148EE18", Offset = "0x148EE18", VA = "0x148EE18")]
		public static Vector4 yyyx(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0x148EE54", Offset = "0x148EE54", VA = "0x148EE54")]
		public static Vector4 yyyy(this Vector2 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0x148EE90", Offset = "0x148EE90", VA = "0x148EE90")]
		public static Vector2 xx(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0x148EEC0", Offset = "0x148EEC0", VA = "0x148EEC0")]
		public static Vector2 xy(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0x148EEEC", Offset = "0x148EEEC", VA = "0x148EEEC")]
		public static Vector2 xz(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0x148EF1C", Offset = "0x148EF1C", VA = "0x148EF1C")]
		public static Vector2 yx(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0x148EF54", Offset = "0x148EF54", VA = "0x148EF54")]
		public static Vector2 yy(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0x148EF84", Offset = "0x148EF84", VA = "0x148EF84")]
		public static Vector2 yz(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0x148EFB8", Offset = "0x148EFB8", VA = "0x148EFB8")]
		public static Vector2 zx(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0x148EFEC", Offset = "0x148EFEC", VA = "0x148EFEC")]
		public static Vector2 zy(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0x148F01C", Offset = "0x148F01C", VA = "0x148F01C")]
		public static Vector2 zz(this Vector3 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0x148F050", Offset = "0x148F050", VA = "0x148F050")]
		public static Vector3 xxx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0x148F08C", Offset = "0x148F08C", VA = "0x148F08C")]
		public static Vector3 xxy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0x148F0C8", Offset = "0x148F0C8", VA = "0x148F0C8")]
		public static Vector3 xxz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0x148F100", Offset = "0x148F100", VA = "0x148F100")]
		public static Vector3 xyx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0x148F138", Offset = "0x148F138", VA = "0x148F138")]
		public static Vector3 xyy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0x148F170", Offset = "0x148F170", VA = "0x148F170")]
		public static Vector3 xyz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0x148F1A4", Offset = "0x148F1A4", VA = "0x148F1A4")]
		public static Vector3 xzx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0x148F1E0", Offset = "0x148F1E0", VA = "0x148F1E0")]
		public static Vector3 xzy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0x148F220", Offset = "0x148F220", VA = "0x148F220")]
		public static Vector3 xzz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0x148F258", Offset = "0x148F258", VA = "0x148F258")]
		public static Vector3 yxx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0x148F298", Offset = "0x148F298", VA = "0x148F298")]
		public static Vector3 yxy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0x148F2D8", Offset = "0x148F2D8", VA = "0x148F2D8")]
		public static Vector3 yxz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0x148F318", Offset = "0x148F318", VA = "0x148F318")]
		public static Vector3 yyx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x148F354", Offset = "0x148F354", VA = "0x148F354")]
		public static Vector3 yyy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x148F390", Offset = "0x148F390", VA = "0x148F390")]
		public static Vector3 yyz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0x148F3C8", Offset = "0x148F3C8", VA = "0x148F3C8")]
		public static Vector3 yzx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0x148F40C", Offset = "0x148F40C", VA = "0x148F40C")]
		public static Vector3 yzy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x148F44C", Offset = "0x148F44C", VA = "0x148F44C")]
		public static Vector3 yzz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x148F488", Offset = "0x148F488", VA = "0x148F488")]
		public static Vector3 zxx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x148F4C8", Offset = "0x148F4C8", VA = "0x148F4C8")]
		public static Vector3 zxy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x148F50C", Offset = "0x148F50C", VA = "0x148F50C")]
		public static Vector3 zxz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0x148F548", Offset = "0x148F548", VA = "0x148F548")]
		public static Vector3 zyx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0x148F588", Offset = "0x148F588", VA = "0x148F588")]
		public static Vector3 zyy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x148F5C4", Offset = "0x148F5C4", VA = "0x148F5C4")]
		public static Vector3 zyz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0x148F5FC", Offset = "0x148F5FC", VA = "0x148F5FC")]
		public static Vector3 zzx(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0x148F63C", Offset = "0x148F63C", VA = "0x148F63C")]
		public static Vector3 zzy(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x148F67C", Offset = "0x148F67C", VA = "0x148F67C")]
		public static Vector3 zzz(this Vector3 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x148F6B8", Offset = "0x148F6B8", VA = "0x148F6B8")]
		public static Vector4 xxxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x148F6F4", Offset = "0x148F6F4", VA = "0x148F6F4")]
		public static Vector4 xxxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0x148F730", Offset = "0x148F730", VA = "0x148F730")]
		public static Vector4 xxxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0x148F76C", Offset = "0x148F76C", VA = "0x148F76C")]
		public static Vector4 xxyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0x148F7A8", Offset = "0x148F7A8", VA = "0x148F7A8")]
		public static Vector4 xxyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0x148F7E4", Offset = "0x148F7E4", VA = "0x148F7E4")]
		public static Vector4 xxyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0x148F820", Offset = "0x148F820", VA = "0x148F820")]
		public static Vector4 xxzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0x148F858", Offset = "0x148F858", VA = "0x148F858")]
		public static Vector4 xxzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0x148F890", Offset = "0x148F890", VA = "0x148F890")]
		public static Vector4 xxzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0x148F8C8", Offset = "0x148F8C8", VA = "0x148F8C8")]
		public static Vector4 xyxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0x148F900", Offset = "0x148F900", VA = "0x148F900")]
		public static Vector4 xyxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0x148F938", Offset = "0x148F938", VA = "0x148F938")]
		public static Vector4 xyxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0x148F970", Offset = "0x148F970", VA = "0x148F970")]
		public static Vector4 xyyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x148F9A8", Offset = "0x148F9A8", VA = "0x148F9A8")]
		public static Vector4 xyyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x148F9E0", Offset = "0x148F9E0", VA = "0x148F9E0")]
		public static Vector4 xyyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x148FA18", Offset = "0x148FA18", VA = "0x148FA18")]
		public static Vector4 xyzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x148FA4C", Offset = "0x148FA4C", VA = "0x148FA4C")]
		public static Vector4 xyzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x148FA80", Offset = "0x148FA80", VA = "0x148FA80")]
		public static Vector4 xyzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x148FAB4", Offset = "0x148FAB4", VA = "0x148FAB4")]
		public static Vector4 xzxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x148FAF0", Offset = "0x148FAF0", VA = "0x148FAF0")]
		public static Vector4 xzxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0x148FB2C", Offset = "0x148FB2C", VA = "0x148FB2C")]
		public static Vector4 xzxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002011")]
		[Address(RVA = "0x148FB68", Offset = "0x148FB68", VA = "0x148FB68")]
		public static Vector4 xzyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0x148FBA8", Offset = "0x148FBA8", VA = "0x148FBA8")]
		public static Vector4 xzyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0x148FBE4", Offset = "0x148FBE4", VA = "0x148FBE4")]
		public static Vector4 xzyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x148FC20", Offset = "0x148FC20", VA = "0x148FC20")]
		public static Vector4 xzzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x148FC58", Offset = "0x148FC58", VA = "0x148FC58")]
		public static Vector4 xzzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0x148FC90", Offset = "0x148FC90", VA = "0x148FC90")]
		public static Vector4 xzzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0x148FCC8", Offset = "0x148FCC8", VA = "0x148FCC8")]
		public static Vector4 yxxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0x148FD08", Offset = "0x148FD08", VA = "0x148FD08")]
		public static Vector4 yxxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0x148FD48", Offset = "0x148FD48", VA = "0x148FD48")]
		public static Vector4 yxxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x148FD88", Offset = "0x148FD88", VA = "0x148FD88")]
		public static Vector4 yxyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x148FDC8", Offset = "0x148FDC8", VA = "0x148FDC8")]
		public static Vector4 yxyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x148FE08", Offset = "0x148FE08", VA = "0x148FE08")]
		public static Vector4 yxyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0x148FE48", Offset = "0x148FE48", VA = "0x148FE48")]
		public static Vector4 yxzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x148FE84", Offset = "0x148FE84", VA = "0x148FE84")]
		public static Vector4 yxzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x148FEC0", Offset = "0x148FEC0", VA = "0x148FEC0")]
		public static Vector4 yxzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0x148FF00", Offset = "0x148FF00", VA = "0x148FF00")]
		public static Vector4 yyxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0x148FF3C", Offset = "0x148FF3C", VA = "0x148FF3C")]
		public static Vector4 yyxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002022")]
		[Address(RVA = "0x148FF78", Offset = "0x148FF78", VA = "0x148FF78")]
		public static Vector4 yyxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0x148FFB4", Offset = "0x148FFB4", VA = "0x148FFB4")]
		public static Vector4 yyyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0x148FFF0", Offset = "0x148FFF0", VA = "0x148FFF0")]
		public static Vector4 yyyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0x149002C", Offset = "0x149002C", VA = "0x149002C")]
		public static Vector4 yyyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0x1490068", Offset = "0x1490068", VA = "0x1490068")]
		public static Vector4 yyzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0x14900A0", Offset = "0x14900A0", VA = "0x14900A0")]
		public static Vector4 yyzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0x14900D8", Offset = "0x14900D8", VA = "0x14900D8")]
		public static Vector4 yyzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0x1490110", Offset = "0x1490110", VA = "0x1490110")]
		public static Vector4 yzxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0x1490150", Offset = "0x1490150", VA = "0x1490150")]
		public static Vector4 yzxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202B")]
		[Address(RVA = "0x1490194", Offset = "0x1490194", VA = "0x1490194")]
		public static Vector4 yzxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202C")]
		[Address(RVA = "0x14901D4", Offset = "0x14901D4", VA = "0x14901D4")]
		public static Vector4 yzyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202D")]
		[Address(RVA = "0x149021C", Offset = "0x149021C", VA = "0x149021C")]
		public static Vector4 yzyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x149025C", Offset = "0x149025C", VA = "0x149025C")]
		public static Vector4 yzyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x149029C", Offset = "0x149029C", VA = "0x149029C")]
		public static Vector4 yzzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x14902D8", Offset = "0x14902D8", VA = "0x14902D8")]
		public static Vector4 yzzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x1490314", Offset = "0x1490314", VA = "0x1490314")]
		public static Vector4 yzzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x1490350", Offset = "0x1490350", VA = "0x1490350")]
		public static Vector4 zxxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x1490390", Offset = "0x1490390", VA = "0x1490390")]
		public static Vector4 zxxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0x14903D0", Offset = "0x14903D0", VA = "0x14903D0")]
		public static Vector4 zxxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0x1490410", Offset = "0x1490410", VA = "0x1490410")]
		public static Vector4 zxyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0x1490454", Offset = "0x1490454", VA = "0x1490454")]
		public static Vector4 zxyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x1490494", Offset = "0x1490494", VA = "0x1490494")]
		public static Vector4 zxyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x14904D4", Offset = "0x14904D4", VA = "0x14904D4")]
		public static Vector4 zxzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x1490510", Offset = "0x1490510", VA = "0x1490510")]
		public static Vector4 zxzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0x149054C", Offset = "0x149054C", VA = "0x149054C")]
		public static Vector4 zxzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x1490588", Offset = "0x1490588", VA = "0x1490588")]
		public static Vector4 zyxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x14905C4", Offset = "0x14905C4", VA = "0x14905C4")]
		public static Vector4 zyxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x1490604", Offset = "0x1490604", VA = "0x1490604")]
		public static Vector4 zyxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x1490640", Offset = "0x1490640", VA = "0x1490640")]
		public static Vector4 zyyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x149067C", Offset = "0x149067C", VA = "0x149067C")]
		public static Vector4 zyyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x14906B8", Offset = "0x14906B8", VA = "0x14906B8")]
		public static Vector4 zyyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x14906F4", Offset = "0x14906F4", VA = "0x14906F4")]
		public static Vector4 zyzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x149072C", Offset = "0x149072C", VA = "0x149072C")]
		public static Vector4 zyzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x1490764", Offset = "0x1490764", VA = "0x1490764")]
		public static Vector4 zyzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0x149079C", Offset = "0x149079C", VA = "0x149079C")]
		public static Vector4 zzxx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x14907DC", Offset = "0x14907DC", VA = "0x14907DC")]
		public static Vector4 zzxy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x1490820", Offset = "0x1490820", VA = "0x1490820")]
		public static Vector4 zzxz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0x1490860", Offset = "0x1490860", VA = "0x1490860")]
		public static Vector4 zzyx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x14908A8", Offset = "0x14908A8", VA = "0x14908A8")]
		public static Vector4 zzyy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0x14908E8", Offset = "0x14908E8", VA = "0x14908E8")]
		public static Vector4 zzyz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x1490928", Offset = "0x1490928", VA = "0x1490928")]
		public static Vector4 zzzx(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0x1490964", Offset = "0x1490964", VA = "0x1490964")]
		public static Vector4 zzzy(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0x14909A0", Offset = "0x14909A0", VA = "0x14909A0")]
		public static Vector4 zzzz(this Vector3 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0x14909DC", Offset = "0x14909DC", VA = "0x14909DC")]
		public static Vector2 xx(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0x1490A0C", Offset = "0x1490A0C", VA = "0x1490A0C")]
		public static Vector2 xy(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0x1490A38", Offset = "0x1490A38", VA = "0x1490A38")]
		public static Vector2 xz(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x1490A68", Offset = "0x1490A68", VA = "0x1490A68")]
		public static Vector2 xw(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0x1490A98", Offset = "0x1490A98", VA = "0x1490A98")]
		public static Vector2 yx(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x1490AD0", Offset = "0x1490AD0", VA = "0x1490AD0")]
		public static Vector2 yy(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x1490B00", Offset = "0x1490B00", VA = "0x1490B00")]
		public static Vector2 yz(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x1490B34", Offset = "0x1490B34", VA = "0x1490B34")]
		public static Vector2 yw(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x1490B68", Offset = "0x1490B68", VA = "0x1490B68")]
		public static Vector2 zx(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x1490B9C", Offset = "0x1490B9C", VA = "0x1490B9C")]
		public static Vector2 zy(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x1490BCC", Offset = "0x1490BCC", VA = "0x1490BCC")]
		public static Vector2 zz(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0x1490C00", Offset = "0x1490C00", VA = "0x1490C00")]
		public static Vector2 zw(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x1490C34", Offset = "0x1490C34", VA = "0x1490C34")]
		public static Vector2 wx(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x1490C68", Offset = "0x1490C68", VA = "0x1490C68")]
		public static Vector2 wy(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0x1490C98", Offset = "0x1490C98", VA = "0x1490C98")]
		public static Vector2 wz(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x1490CCC", Offset = "0x1490CCC", VA = "0x1490CCC")]
		public static Vector2 ww(this Vector4 vector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x1490D00", Offset = "0x1490D00", VA = "0x1490D00")]
		public static Vector3 xxx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0x1490D3C", Offset = "0x1490D3C", VA = "0x1490D3C")]
		public static Vector3 xxy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0x1490D78", Offset = "0x1490D78", VA = "0x1490D78")]
		public static Vector3 xxz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0x1490DB0", Offset = "0x1490DB0", VA = "0x1490DB0")]
		public static Vector3 xxw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0x1490DEC", Offset = "0x1490DEC", VA = "0x1490DEC")]
		public static Vector3 xyx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0x1490E24", Offset = "0x1490E24", VA = "0x1490E24")]
		public static Vector3 xyy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0x1490E5C", Offset = "0x1490E5C", VA = "0x1490E5C")]
		public static Vector3 xyz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0x1490E90", Offset = "0x1490E90", VA = "0x1490E90")]
		public static Vector3 xyw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0x1490EC8", Offset = "0x1490EC8", VA = "0x1490EC8")]
		public static Vector3 xzx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x1490F04", Offset = "0x1490F04", VA = "0x1490F04")]
		public static Vector3 xzy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x1490F44", Offset = "0x1490F44", VA = "0x1490F44")]
		public static Vector3 xzz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0x1490F7C", Offset = "0x1490F7C", VA = "0x1490F7C")]
		public static Vector3 xzw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0x1490FB8", Offset = "0x1490FB8", VA = "0x1490FB8")]
		public static Vector3 xwx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0x1490FF4", Offset = "0x1490FF4", VA = "0x1490FF4")]
		public static Vector3 xwy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0x1491030", Offset = "0x1491030", VA = "0x1491030")]
		public static Vector3 xwz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x1491068", Offset = "0x1491068", VA = "0x1491068")]
		public static Vector3 xww(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x14910A4", Offset = "0x14910A4", VA = "0x14910A4")]
		public static Vector3 yxx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x14910E4", Offset = "0x14910E4", VA = "0x14910E4")]
		public static Vector3 yxy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x1491124", Offset = "0x1491124", VA = "0x1491124")]
		public static Vector3 yxz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x1491164", Offset = "0x1491164", VA = "0x1491164")]
		public static Vector3 yxw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x14911A8", Offset = "0x14911A8", VA = "0x14911A8")]
		public static Vector3 yyx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x14911E4", Offset = "0x14911E4", VA = "0x14911E4")]
		public static Vector3 yyy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x1491220", Offset = "0x1491220", VA = "0x1491220")]
		public static Vector3 yyz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x1491258", Offset = "0x1491258", VA = "0x1491258")]
		public static Vector3 yyw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x1491294", Offset = "0x1491294", VA = "0x1491294")]
		public static Vector3 yzx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x14912D8", Offset = "0x14912D8", VA = "0x14912D8")]
		public static Vector3 yzy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x1491318", Offset = "0x1491318", VA = "0x1491318")]
		public static Vector3 yzz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x1491354", Offset = "0x1491354", VA = "0x1491354")]
		public static Vector3 yzw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x1491394", Offset = "0x1491394", VA = "0x1491394")]
		public static Vector3 ywx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x14913D4", Offset = "0x14913D4", VA = "0x14913D4")]
		public static Vector3 ywy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x1491414", Offset = "0x1491414", VA = "0x1491414")]
		public static Vector3 ywz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x1491450", Offset = "0x1491450", VA = "0x1491450")]
		public static Vector3 yww(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x1491490", Offset = "0x1491490", VA = "0x1491490")]
		public static Vector3 zxx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x14914D0", Offset = "0x14914D0", VA = "0x14914D0")]
		public static Vector3 zxy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x1491514", Offset = "0x1491514", VA = "0x1491514")]
		public static Vector3 zxz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x1491550", Offset = "0x1491550", VA = "0x1491550")]
		public static Vector3 zxw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0x1491590", Offset = "0x1491590", VA = "0x1491590")]
		public static Vector3 zyx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0x14915D0", Offset = "0x14915D0", VA = "0x14915D0")]
		public static Vector3 zyy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0x149160C", Offset = "0x149160C", VA = "0x149160C")]
		public static Vector3 zyz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0x1491644", Offset = "0x1491644", VA = "0x1491644")]
		public static Vector3 zyw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0x1491680", Offset = "0x1491680", VA = "0x1491680")]
		public static Vector3 zzx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0x14916C0", Offset = "0x14916C0", VA = "0x14916C0")]
		public static Vector3 zzy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x1491700", Offset = "0x1491700", VA = "0x1491700")]
		public static Vector3 zzz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x149173C", Offset = "0x149173C", VA = "0x149173C")]
		public static Vector3 zzw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x149177C", Offset = "0x149177C", VA = "0x149177C")]
		public static Vector3 zwx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x14917C0", Offset = "0x14917C0", VA = "0x14917C0")]
		public static Vector3 zwy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x1491800", Offset = "0x1491800", VA = "0x1491800")]
		public static Vector3 zwz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x149183C", Offset = "0x149183C", VA = "0x149183C")]
		public static Vector3 zww(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x149187C", Offset = "0x149187C", VA = "0x149187C")]
		public static Vector3 wxx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x14918BC", Offset = "0x14918BC", VA = "0x14918BC")]
		public static Vector3 wxy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x14918FC", Offset = "0x14918FC", VA = "0x14918FC")]
		public static Vector3 wxz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x1491938", Offset = "0x1491938", VA = "0x1491938")]
		public static Vector3 wxw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x1491978", Offset = "0x1491978", VA = "0x1491978")]
		public static Vector3 wyx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0x14919B4", Offset = "0x14919B4", VA = "0x14919B4")]
		public static Vector3 wyy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0x14919F0", Offset = "0x14919F0", VA = "0x14919F0")]
		public static Vector3 wyz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0x1491A28", Offset = "0x1491A28", VA = "0x1491A28")]
		public static Vector3 wyw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0x1491A64", Offset = "0x1491A64", VA = "0x1491A64")]
		public static Vector3 wzx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0x1491AA4", Offset = "0x1491AA4", VA = "0x1491AA4")]
		public static Vector3 wzy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x1491AE8", Offset = "0x1491AE8", VA = "0x1491AE8")]
		public static Vector3 wzz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x1491B24", Offset = "0x1491B24", VA = "0x1491B24")]
		public static Vector3 wzw(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x1491B64", Offset = "0x1491B64", VA = "0x1491B64")]
		public static Vector3 wwx(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x1491BA4", Offset = "0x1491BA4", VA = "0x1491BA4")]
		public static Vector3 wwy(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x1491BE4", Offset = "0x1491BE4", VA = "0x1491BE4")]
		public static Vector3 wwz(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x1491C20", Offset = "0x1491C20", VA = "0x1491C20")]
		public static Vector3 www(this Vector4 vector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0x1491C60", Offset = "0x1491C60", VA = "0x1491C60")]
		public static Vector4 xxxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x1491C9C", Offset = "0x1491C9C", VA = "0x1491C9C")]
		public static Vector4 xxxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0x1491CD8", Offset = "0x1491CD8", VA = "0x1491CD8")]
		public static Vector4 xxxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0x1491D14", Offset = "0x1491D14", VA = "0x1491D14")]
		public static Vector4 xxxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0x1491D4C", Offset = "0x1491D4C", VA = "0x1491D4C")]
		public static Vector4 xxyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0x1491D88", Offset = "0x1491D88", VA = "0x1491D88")]
		public static Vector4 xxyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0x1491DC4", Offset = "0x1491DC4", VA = "0x1491DC4")]
		public static Vector4 xxyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0x1491E00", Offset = "0x1491E00", VA = "0x1491E00")]
		public static Vector4 xxyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0x1491E38", Offset = "0x1491E38", VA = "0x1491E38")]
		public static Vector4 xxzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0x1491E70", Offset = "0x1491E70", VA = "0x1491E70")]
		public static Vector4 xxzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x1491EA8", Offset = "0x1491EA8", VA = "0x1491EA8")]
		public static Vector4 xxzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x1491EE0", Offset = "0x1491EE0", VA = "0x1491EE0")]
		public static Vector4 xxzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x1491F14", Offset = "0x1491F14", VA = "0x1491F14")]
		public static Vector4 xxwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x1491F50", Offset = "0x1491F50", VA = "0x1491F50")]
		public static Vector4 xxwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0x1491F8C", Offset = "0x1491F8C", VA = "0x1491F8C")]
		public static Vector4 xxwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x1491FCC", Offset = "0x1491FCC", VA = "0x1491FCC")]
		public static Vector4 xxww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x1492004", Offset = "0x1492004", VA = "0x1492004")]
		public static Vector4 xyxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x149203C", Offset = "0x149203C", VA = "0x149203C")]
		public static Vector4 xyxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x1492074", Offset = "0x1492074", VA = "0x1492074")]
		public static Vector4 xyxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0x14920AC", Offset = "0x14920AC", VA = "0x14920AC")]
		public static Vector4 xyxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0x14920E0", Offset = "0x14920E0", VA = "0x14920E0")]
		public static Vector4 xyyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0x1492118", Offset = "0x1492118", VA = "0x1492118")]
		public static Vector4 xyyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x1492150", Offset = "0x1492150", VA = "0x1492150")]
		public static Vector4 xyyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B4")]
		[Address(RVA = "0x1492188", Offset = "0x1492188", VA = "0x1492188")]
		public static Vector4 xyyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x14921BC", Offset = "0x14921BC", VA = "0x14921BC")]
		public static Vector4 xyzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x14921F0", Offset = "0x14921F0", VA = "0x14921F0")]
		public static Vector4 xyzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0x1492224", Offset = "0x1492224", VA = "0x1492224")]
		public static Vector4 xyzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x1492258", Offset = "0x1492258", VA = "0x1492258")]
		public static Vector4 xyzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x1492288", Offset = "0x1492288", VA = "0x1492288")]
		public static Vector4 xywx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x14922C0", Offset = "0x14922C0", VA = "0x14922C0")]
		public static Vector4 xywy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x14922F8", Offset = "0x14922F8", VA = "0x14922F8")]
		public static Vector4 xywz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0x1492334", Offset = "0x1492334", VA = "0x1492334")]
		public static Vector4 xyww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0x1492368", Offset = "0x1492368", VA = "0x1492368")]
		public static Vector4 xzxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0x14923A4", Offset = "0x14923A4", VA = "0x14923A4")]
		public static Vector4 xzxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x14923E0", Offset = "0x14923E0", VA = "0x14923E0")]
		public static Vector4 xzxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x149241C", Offset = "0x149241C", VA = "0x149241C")]
		public static Vector4 xzxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x1492454", Offset = "0x1492454", VA = "0x1492454")]
		public static Vector4 xzyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x1492494", Offset = "0x1492494", VA = "0x1492494")]
		public static Vector4 xzyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x14924D0", Offset = "0x14924D0", VA = "0x14924D0")]
		public static Vector4 xzyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x149250C", Offset = "0x149250C", VA = "0x149250C")]
		public static Vector4 xzyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x1492548", Offset = "0x1492548", VA = "0x1492548")]
		public static Vector4 xzzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x1492580", Offset = "0x1492580", VA = "0x1492580")]
		public static Vector4 xzzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x14925B8", Offset = "0x14925B8", VA = "0x14925B8")]
		public static Vector4 xzzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x14925F0", Offset = "0x14925F0", VA = "0x14925F0")]
		public static Vector4 xzzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x1492624", Offset = "0x1492624", VA = "0x1492624")]
		public static Vector4 xzwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x1492660", Offset = "0x1492660", VA = "0x1492660")]
		public static Vector4 xzwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x14926A0", Offset = "0x14926A0", VA = "0x14926A0")]
		public static Vector4 xzwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x14926DC", Offset = "0x14926DC", VA = "0x14926DC")]
		public static Vector4 xzww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x1492714", Offset = "0x1492714", VA = "0x1492714")]
		public static Vector4 xwxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x1492750", Offset = "0x1492750", VA = "0x1492750")]
		public static Vector4 xwxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x1492790", Offset = "0x1492790", VA = "0x1492790")]
		public static Vector4 xwxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x14927CC", Offset = "0x14927CC", VA = "0x14927CC")]
		public static Vector4 xwxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x1492804", Offset = "0x1492804", VA = "0x1492804")]
		public static Vector4 xwyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x1492840", Offset = "0x1492840", VA = "0x1492840")]
		public static Vector4 xwyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x149287C", Offset = "0x149287C", VA = "0x149287C")]
		public static Vector4 xwyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x14928BC", Offset = "0x14928BC", VA = "0x14928BC")]
		public static Vector4 xwyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x14928F4", Offset = "0x14928F4", VA = "0x14928F4")]
		public static Vector4 xwzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x149292C", Offset = "0x149292C", VA = "0x149292C")]
		public static Vector4 xwzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x1492968", Offset = "0x1492968", VA = "0x1492968")]
		public static Vector4 xwzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x14929A0", Offset = "0x14929A0", VA = "0x14929A0")]
		public static Vector4 xwzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x14929D4", Offset = "0x14929D4", VA = "0x14929D4")]
		public static Vector4 xwwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x1492A10", Offset = "0x1492A10", VA = "0x1492A10")]
		public static Vector4 xwwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x1492A4C", Offset = "0x1492A4C", VA = "0x1492A4C")]
		public static Vector4 xwwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x1492A88", Offset = "0x1492A88", VA = "0x1492A88")]
		public static Vector4 xwww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0x1492AC0", Offset = "0x1492AC0", VA = "0x1492AC0")]
		public static Vector4 yxxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0x1492B00", Offset = "0x1492B00", VA = "0x1492B00")]
		public static Vector4 yxxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0x1492B40", Offset = "0x1492B40", VA = "0x1492B40")]
		public static Vector4 yxxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0x1492B80", Offset = "0x1492B80", VA = "0x1492B80")]
		public static Vector4 yxxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0x1492BBC", Offset = "0x1492BBC", VA = "0x1492BBC")]
		public static Vector4 yxyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0x1492BFC", Offset = "0x1492BFC", VA = "0x1492BFC")]
		public static Vector4 yxyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0x1492C3C", Offset = "0x1492C3C", VA = "0x1492C3C")]
		public static Vector4 yxyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0x1492C7C", Offset = "0x1492C7C", VA = "0x1492C7C")]
		public static Vector4 yxyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0x1492CB8", Offset = "0x1492CB8", VA = "0x1492CB8")]
		public static Vector4 yxzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0x1492CF4", Offset = "0x1492CF4", VA = "0x1492CF4")]
		public static Vector4 yxzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0x1492D30", Offset = "0x1492D30", VA = "0x1492D30")]
		public static Vector4 yxzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0x1492D70", Offset = "0x1492D70", VA = "0x1492D70")]
		public static Vector4 yxzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x1492DAC", Offset = "0x1492DAC", VA = "0x1492DAC")]
		public static Vector4 yxwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x1492DEC", Offset = "0x1492DEC", VA = "0x1492DEC")]
		public static Vector4 yxwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x1492E2C", Offset = "0x1492E2C", VA = "0x1492E2C")]
		public static Vector4 yxwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x1492E74", Offset = "0x1492E74", VA = "0x1492E74")]
		public static Vector4 yxww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0x1492EB4", Offset = "0x1492EB4", VA = "0x1492EB4")]
		public static Vector4 yyxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0x1492EF0", Offset = "0x1492EF0", VA = "0x1492EF0")]
		public static Vector4 yyxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0x1492F2C", Offset = "0x1492F2C", VA = "0x1492F2C")]
		public static Vector4 yyxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0x1492F68", Offset = "0x1492F68", VA = "0x1492F68")]
		public static Vector4 yyxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0x1492FA0", Offset = "0x1492FA0", VA = "0x1492FA0")]
		public static Vector4 yyyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0x1492FDC", Offset = "0x1492FDC", VA = "0x1492FDC")]
		public static Vector4 yyyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0x1493018", Offset = "0x1493018", VA = "0x1493018")]
		public static Vector4 yyyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0x1493054", Offset = "0x1493054", VA = "0x1493054")]
		public static Vector4 yyyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0x149308C", Offset = "0x149308C", VA = "0x149308C")]
		public static Vector4 yyzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x14930C4", Offset = "0x14930C4", VA = "0x14930C4")]
		public static Vector4 yyzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0x14930FC", Offset = "0x14930FC", VA = "0x14930FC")]
		public static Vector4 yyzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x1493134", Offset = "0x1493134", VA = "0x1493134")]
		public static Vector4 yyzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x1493168", Offset = "0x1493168", VA = "0x1493168")]
		public static Vector4 yywx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x14931A4", Offset = "0x14931A4", VA = "0x14931A4")]
		public static Vector4 yywy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x14931E0", Offset = "0x14931E0", VA = "0x14931E0")]
		public static Vector4 yywz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x1493220", Offset = "0x1493220", VA = "0x1493220")]
		public static Vector4 yyww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x1493258", Offset = "0x1493258", VA = "0x1493258")]
		public static Vector4 yzxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x1493298", Offset = "0x1493298", VA = "0x1493298")]
		public static Vector4 yzxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x14932DC", Offset = "0x14932DC", VA = "0x14932DC")]
		public static Vector4 yzxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002100")]
		[Address(RVA = "0x149331C", Offset = "0x149331C", VA = "0x149331C")]
		public static Vector4 yzxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x149335C", Offset = "0x149335C", VA = "0x149335C")]
		public static Vector4 yzyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x14933A4", Offset = "0x14933A4", VA = "0x14933A4")]
		public static Vector4 yzyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x14933E4", Offset = "0x14933E4", VA = "0x14933E4")]
		public static Vector4 yzyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x1493424", Offset = "0x1493424", VA = "0x1493424")]
		public static Vector4 yzyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0x1493460", Offset = "0x1493460", VA = "0x1493460")]
		public static Vector4 yzzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0x149349C", Offset = "0x149349C", VA = "0x149349C")]
		public static Vector4 yzzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x14934D8", Offset = "0x14934D8", VA = "0x14934D8")]
		public static Vector4 yzzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0x1493514", Offset = "0x1493514", VA = "0x1493514")]
		public static Vector4 yzzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x149354C", Offset = "0x149354C", VA = "0x149354C")]
		public static Vector4 yzwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0x1493590", Offset = "0x1493590", VA = "0x1493590")]
		public static Vector4 yzwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x14935D0", Offset = "0x14935D0", VA = "0x14935D0")]
		public static Vector4 yzwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x1493614", Offset = "0x1493614", VA = "0x1493614")]
		public static Vector4 yzww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x1493650", Offset = "0x1493650", VA = "0x1493650")]
		public static Vector4 ywxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x1493690", Offset = "0x1493690", VA = "0x1493690")]
		public static Vector4 ywxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x14936D4", Offset = "0x14936D4", VA = "0x14936D4")]
		public static Vector4 ywxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x1493718", Offset = "0x1493718", VA = "0x1493718")]
		public static Vector4 ywxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0x1493754", Offset = "0x1493754", VA = "0x1493754")]
		public static Vector4 ywyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x1493798", Offset = "0x1493798", VA = "0x1493798")]
		public static Vector4 ywyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x14937D8", Offset = "0x14937D8", VA = "0x14937D8")]
		public static Vector4 ywyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x149381C", Offset = "0x149381C", VA = "0x149381C")]
		public static Vector4 ywyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x1493858", Offset = "0x1493858", VA = "0x1493858")]
		public static Vector4 ywzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x1493898", Offset = "0x1493898", VA = "0x1493898")]
		public static Vector4 ywzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x14938D4", Offset = "0x14938D4", VA = "0x14938D4")]
		public static Vector4 ywzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x1493910", Offset = "0x1493910", VA = "0x1493910")]
		public static Vector4 ywzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x1493948", Offset = "0x1493948", VA = "0x1493948")]
		public static Vector4 ywwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x1493988", Offset = "0x1493988", VA = "0x1493988")]
		public static Vector4 ywwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x14939C8", Offset = "0x14939C8", VA = "0x14939C8")]
		public static Vector4 ywwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x1493A0C", Offset = "0x1493A0C", VA = "0x1493A0C")]
		public static Vector4 ywww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x1493A48", Offset = "0x1493A48", VA = "0x1493A48")]
		public static Vector4 zxxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x1493A88", Offset = "0x1493A88", VA = "0x1493A88")]
		public static Vector4 zxxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x1493AC8", Offset = "0x1493AC8", VA = "0x1493AC8")]
		public static Vector4 zxxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x1493B08", Offset = "0x1493B08", VA = "0x1493B08")]
		public static Vector4 zxxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x1493B44", Offset = "0x1493B44", VA = "0x1493B44")]
		public static Vector4 zxyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x1493B88", Offset = "0x1493B88", VA = "0x1493B88")]
		public static Vector4 zxyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0x1493BC8", Offset = "0x1493BC8", VA = "0x1493BC8")]
		public static Vector4 zxyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x1493C08", Offset = "0x1493C08", VA = "0x1493C08")]
		public static Vector4 zxyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x1493C48", Offset = "0x1493C48", VA = "0x1493C48")]
		public static Vector4 zxzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x1493C84", Offset = "0x1493C84", VA = "0x1493C84")]
		public static Vector4 zxzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x1493CC0", Offset = "0x1493CC0", VA = "0x1493CC0")]
		public static Vector4 zxzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x1493CFC", Offset = "0x1493CFC", VA = "0x1493CFC")]
		public static Vector4 zxzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x1493D34", Offset = "0x1493D34", VA = "0x1493D34")]
		public static Vector4 zxwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x1493D74", Offset = "0x1493D74", VA = "0x1493D74")]
		public static Vector4 zxwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x1493DB8", Offset = "0x1493DB8", VA = "0x1493DB8")]
		public static Vector4 zxwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x1493DFC", Offset = "0x1493DFC", VA = "0x1493DFC")]
		public static Vector4 zxww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0x1493E38", Offset = "0x1493E38", VA = "0x1493E38")]
		public static Vector4 zyxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0x1493E74", Offset = "0x1493E74", VA = "0x1493E74")]
		public static Vector4 zyxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x1493EB4", Offset = "0x1493EB4", VA = "0x1493EB4")]
		public static Vector4 zyxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x1493EF0", Offset = "0x1493EF0", VA = "0x1493EF0")]
		public static Vector4 zyxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x1493F2C", Offset = "0x1493F2C", VA = "0x1493F2C")]
		public static Vector4 zyyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0x1493F68", Offset = "0x1493F68", VA = "0x1493F68")]
		public static Vector4 zyyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x1493FA4", Offset = "0x1493FA4", VA = "0x1493FA4")]
		public static Vector4 zyyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x1493FE0", Offset = "0x1493FE0", VA = "0x1493FE0")]
		public static Vector4 zyyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x1494018", Offset = "0x1494018", VA = "0x1494018")]
		public static Vector4 zyzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x1494050", Offset = "0x1494050", VA = "0x1494050")]
		public static Vector4 zyzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x1494088", Offset = "0x1494088", VA = "0x1494088")]
		public static Vector4 zyzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x14940C0", Offset = "0x14940C0", VA = "0x14940C0")]
		public static Vector4 zyzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x14940F4", Offset = "0x14940F4", VA = "0x14940F4")]
		public static Vector4 zywx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x1494134", Offset = "0x1494134", VA = "0x1494134")]
		public static Vector4 zywy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x1494170", Offset = "0x1494170", VA = "0x1494170")]
		public static Vector4 zywz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x14941AC", Offset = "0x14941AC", VA = "0x14941AC")]
		public static Vector4 zyww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x14941E4", Offset = "0x14941E4", VA = "0x14941E4")]
		public static Vector4 zzxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0x1494224", Offset = "0x1494224", VA = "0x1494224")]
		public static Vector4 zzxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x1494268", Offset = "0x1494268", VA = "0x1494268")]
		public static Vector4 zzxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x14942A8", Offset = "0x14942A8", VA = "0x14942A8")]
		public static Vector4 zzxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x14942E4", Offset = "0x14942E4", VA = "0x14942E4")]
		public static Vector4 zzyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x149432C", Offset = "0x149432C", VA = "0x149432C")]
		public static Vector4 zzyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x149436C", Offset = "0x149436C", VA = "0x149436C")]
		public static Vector4 zzyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002144")]
		[Address(RVA = "0x14943AC", Offset = "0x14943AC", VA = "0x14943AC")]
		public static Vector4 zzyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0x14943E8", Offset = "0x14943E8", VA = "0x14943E8")]
		public static Vector4 zzzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0x1494424", Offset = "0x1494424", VA = "0x1494424")]
		public static Vector4 zzzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002147")]
		[Address(RVA = "0x1494460", Offset = "0x1494460", VA = "0x1494460")]
		public static Vector4 zzzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0x149449C", Offset = "0x149449C", VA = "0x149449C")]
		public static Vector4 zzzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0x14944D4", Offset = "0x14944D4", VA = "0x14944D4")]
		public static Vector4 zzwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214A")]
		[Address(RVA = "0x1494518", Offset = "0x1494518", VA = "0x1494518")]
		public static Vector4 zzwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0x149455C", Offset = "0x149455C", VA = "0x149455C")]
		public static Vector4 zzwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0x149459C", Offset = "0x149459C", VA = "0x149459C")]
		public static Vector4 zzww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x14945D8", Offset = "0x14945D8", VA = "0x14945D8")]
		public static Vector4 zwxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x1494618", Offset = "0x1494618", VA = "0x1494618")]
		public static Vector4 zwxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x1494660", Offset = "0x1494660", VA = "0x1494660")]
		public static Vector4 zwxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x14946A0", Offset = "0x14946A0", VA = "0x14946A0")]
		public static Vector4 zwxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x14946E0", Offset = "0x14946E0", VA = "0x14946E0")]
		public static Vector4 zwyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x1494728", Offset = "0x1494728", VA = "0x1494728")]
		public static Vector4 zwyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0x1494768", Offset = "0x1494768", VA = "0x1494768")]
		public static Vector4 zwyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0x14947A8", Offset = "0x14947A8", VA = "0x14947A8")]
		public static Vector4 zwyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x14947E4", Offset = "0x14947E4", VA = "0x14947E4")]
		public static Vector4 zwzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x1494820", Offset = "0x1494820", VA = "0x1494820")]
		public static Vector4 zwzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x1494860", Offset = "0x1494860", VA = "0x1494860")]
		public static Vector4 zwzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x149489C", Offset = "0x149489C", VA = "0x149489C")]
		public static Vector4 zwzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0x14948D4", Offset = "0x14948D4", VA = "0x14948D4")]
		public static Vector4 zwwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x1494914", Offset = "0x1494914", VA = "0x1494914")]
		public static Vector4 zwwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0x1494958", Offset = "0x1494958", VA = "0x1494958")]
		public static Vector4 zwwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x1494998", Offset = "0x1494998", VA = "0x1494998")]
		public static Vector4 zwww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x14949D4", Offset = "0x14949D4", VA = "0x14949D4")]
		public static Vector4 wxxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x1494A14", Offset = "0x1494A14", VA = "0x1494A14")]
		public static Vector4 wxxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x1494A58", Offset = "0x1494A58", VA = "0x1494A58")]
		public static Vector4 wxxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x1494A9C", Offset = "0x1494A9C", VA = "0x1494A9C")]
		public static Vector4 wxxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x1494AD8", Offset = "0x1494AD8", VA = "0x1494AD8")]
		public static Vector4 wxyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x1494B18", Offset = "0x1494B18", VA = "0x1494B18")]
		public static Vector4 wxyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x1494B58", Offset = "0x1494B58", VA = "0x1494B58")]
		public static Vector4 wxyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x1494B9C", Offset = "0x1494B9C", VA = "0x1494B9C")]
		public static Vector4 wxyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x1494BD8", Offset = "0x1494BD8", VA = "0x1494BD8")]
		public static Vector4 wxzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x1494C14", Offset = "0x1494C14", VA = "0x1494C14")]
		public static Vector4 wxzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x1494C54", Offset = "0x1494C54", VA = "0x1494C54")]
		public static Vector4 wxzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x1494C90", Offset = "0x1494C90", VA = "0x1494C90")]
		public static Vector4 wxzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x1494CC8", Offset = "0x1494CC8", VA = "0x1494CC8")]
		public static Vector4 wxwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x1494D08", Offset = "0x1494D08", VA = "0x1494D08")]
		public static Vector4 wxwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x1494D48", Offset = "0x1494D48", VA = "0x1494D48")]
		public static Vector4 wxwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x1494D8C", Offset = "0x1494D8C", VA = "0x1494D8C")]
		public static Vector4 wxww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x1494DC8", Offset = "0x1494DC8", VA = "0x1494DC8")]
		public static Vector4 wyxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x1494E04", Offset = "0x1494E04", VA = "0x1494E04")]
		public static Vector4 wyxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x1494E40", Offset = "0x1494E40", VA = "0x1494E40")]
		public static Vector4 wyxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002170")]
		[Address(RVA = "0x1494E80", Offset = "0x1494E80", VA = "0x1494E80")]
		public static Vector4 wyxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002171")]
		[Address(RVA = "0x1494EB8", Offset = "0x1494EB8", VA = "0x1494EB8")]
		public static Vector4 wyyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x1494EF8", Offset = "0x1494EF8", VA = "0x1494EF8")]
		public static Vector4 wyyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002173")]
		[Address(RVA = "0x1494F34", Offset = "0x1494F34", VA = "0x1494F34")]
		public static Vector4 wyyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002174")]
		[Address(RVA = "0x1494F70", Offset = "0x1494F70", VA = "0x1494F70")]
		public static Vector4 wyyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002175")]
		[Address(RVA = "0x1494FA8", Offset = "0x1494FA8", VA = "0x1494FA8")]
		public static Vector4 wyzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0x1494FE4", Offset = "0x1494FE4", VA = "0x1494FE4")]
		public static Vector4 wyzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x149501C", Offset = "0x149501C", VA = "0x149501C")]
		public static Vector4 wyzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0x1495054", Offset = "0x1495054", VA = "0x1495054")]
		public static Vector4 wyzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002179")]
		[Address(RVA = "0x1495088", Offset = "0x1495088", VA = "0x1495088")]
		public static Vector4 wywx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0x14950C4", Offset = "0x14950C4", VA = "0x14950C4")]
		public static Vector4 wywy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x1495100", Offset = "0x1495100", VA = "0x1495100")]
		public static Vector4 wywz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x149513C", Offset = "0x149513C", VA = "0x149513C")]
		public static Vector4 wyww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x1495174", Offset = "0x1495174", VA = "0x1495174")]
		public static Vector4 wzxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x14951B4", Offset = "0x14951B4", VA = "0x14951B4")]
		public static Vector4 wzxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x14951FC", Offset = "0x14951FC", VA = "0x14951FC")]
		public static Vector4 wzxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x149523C", Offset = "0x149523C", VA = "0x149523C")]
		public static Vector4 wzxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x1495278", Offset = "0x1495278", VA = "0x1495278")]
		public static Vector4 wzyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x14952C0", Offset = "0x14952C0", VA = "0x14952C0")]
		public static Vector4 wzyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0x1495300", Offset = "0x1495300", VA = "0x1495300")]
		public static Vector4 wzyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x1495340", Offset = "0x1495340", VA = "0x1495340")]
		public static Vector4 wzyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x1495380", Offset = "0x1495380", VA = "0x1495380")]
		public static Vector4 wzzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x14953C0", Offset = "0x14953C0", VA = "0x14953C0")]
		public static Vector4 wzzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x14953FC", Offset = "0x14953FC", VA = "0x14953FC")]
		public static Vector4 wzzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x1495438", Offset = "0x1495438", VA = "0x1495438")]
		public static Vector4 wzzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0x1495470", Offset = "0x1495470", VA = "0x1495470")]
		public static Vector4 wzwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218A")]
		[Address(RVA = "0x14954B4", Offset = "0x14954B4", VA = "0x14954B4")]
		public static Vector4 wzwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x14954F4", Offset = "0x14954F4", VA = "0x14954F4")]
		public static Vector4 wzwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0x1495534", Offset = "0x1495534", VA = "0x1495534")]
		public static Vector4 wzww(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x1495570", Offset = "0x1495570", VA = "0x1495570")]
		public static Vector4 wwxx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x14955B0", Offset = "0x14955B0", VA = "0x14955B0")]
		public static Vector4 wwxy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x14955F4", Offset = "0x14955F4", VA = "0x14955F4")]
		public static Vector4 wwxz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x1495634", Offset = "0x1495634", VA = "0x1495634")]
		public static Vector4 wwxw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0x1495670", Offset = "0x1495670", VA = "0x1495670")]
		public static Vector4 wwyx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x14956B4", Offset = "0x14956B4", VA = "0x14956B4")]
		public static Vector4 wwyy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x14956F4", Offset = "0x14956F4", VA = "0x14956F4")]
		public static Vector4 wwyz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x1495734", Offset = "0x1495734", VA = "0x1495734")]
		public static Vector4 wwyw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x1495770", Offset = "0x1495770", VA = "0x1495770")]
		public static Vector4 wwzx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x14957AC", Offset = "0x14957AC", VA = "0x14957AC")]
		public static Vector4 wwzy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x14957E8", Offset = "0x14957E8", VA = "0x14957E8")]
		public static Vector4 wwzz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x1495824", Offset = "0x1495824", VA = "0x1495824")]
		public static Vector4 wwzw(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x149585C", Offset = "0x149585C", VA = "0x149585C")]
		public static Vector4 wwwx(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x149589C", Offset = "0x149589C", VA = "0x149589C")]
		public static Vector4 wwwy(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x14958DC", Offset = "0x14958DC", VA = "0x14958DC")]
		public static Vector4 wwwz(this Vector4 vector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x149591C", Offset = "0x149591C", VA = "0x149591C")]
		public static Vector4 wwww(this Vector4 vector)
		{
			return default(Vector4);
		}
	}
}
namespace Leap.Unity.Swizzle.Generation
{
	[Token(Token = "0x2000468")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xB46854", Offset = "0xB46854")]
	public class SwizzleGenerator : GeneratorBase
	{
		[Token(Token = "0x4001A16")]
		public const string TEMPLATE_CODE_KEY = "//__SWIZZLE__";

		[Token(Token = "0x4001A17")]
		public const string TEMPLATE_NAMESPACE = "Leap.Unity.Swizzle.Generation";

		[Token(Token = "0x4001A18")]
		public const string TARGET_NAMESPACE = "Leap.Unity.Swizzle";

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextAsset templateAsset;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssetFolder destFolder;

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x148E2A8", Offset = "0x148E2A8", VA = "0x148E2A8", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x148E824", Offset = "0x148E824", VA = "0x148E824")]
		public SwizzleGenerator()
		{
		}
	}
	[Token(Token = "0x2000469")]
	public static class Swizzle
	{
	}
}
namespace Leap.Unity.RuntimeGizmos
{
	[Token(Token = "0x200046A")]
	public class RuntimeColliderGizmos : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool useWireframe;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool traverseHierarchy;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool drawTriggers;

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x12AE2BC", Offset = "0x12AE2BC", VA = "0x12AE2BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0x12AE2C0", Offset = "0x12AE2C0", VA = "0x12AE2C0", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0x12AE474", Offset = "0x12AE474", VA = "0x12AE474")]
		public RuntimeColliderGizmos()
		{
		}
	}
	[Token(Token = "0x200046B")]
	public interface IRuntimeGizmoComponent
	{
		[Token(Token = "0x60021A2")]
		void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer);
	}
	[Token(Token = "0x200046C")]
	[ExecuteInEditMode]
	public class RuntimeGizmoManager : MonoBehaviour
	{
		[Token(Token = "0x4001A1F")]
		public const string DEFAULT_SHADER_NAME = "Hidden/Runtime Gizmos";

		[Token(Token = "0x4001A20")]
		public const int CIRCLE_RESOLUTION = 32;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB558B4", Offset = "0xB558B4")]
		[SerializeField]
		protected bool _displayInGameView;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55900", Offset = "0xB55900")]
		[SerializeField]
		protected bool _enabledForBuild;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5594C", Offset = "0xB5594C")]
		[SerializeField]
		protected Mesh _sphereMesh;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55998", Offset = "0xB55998")]
		[SerializeField]
		protected Shader _gizmoShader;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Mesh _cubeMesh;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Mesh _wireCubeMesh;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Mesh _wireSphereMesh;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static RuntimeGizmoDrawer _backDrawer;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static RuntimeGizmoDrawer _frontDrawer;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _readyForSwap;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<GameObject> _objList;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<IRuntimeGizmoComponent> _gizmoList;

		[Token(Token = "0x1400002D")]
		public static event Action<RuntimeGizmoDrawer> OnPostRenderGizmos
		{
			[Token(Token = "0x60021A3")]
			[Address(RVA = "0x12B27D8", Offset = "0x12B27D8", VA = "0x12B27D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB60D7C", Offset = "0xB60D7C")]
			add
			{
			}
			[Token(Token = "0x60021A4")]
			[Address(RVA = "0x12B28C8", Offset = "0x12B28C8", VA = "0x12B28C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB60D8C", Offset = "0xB60D8C")]
			remove
			{
			}
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x12A4C50", Offset = "0x12A4C50", VA = "0x12A4C50")]
		public static bool TryGetGizmoDrawer(out RuntimeGizmoDrawer drawer)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x12B29B8", Offset = "0x12B29B8", VA = "0x12B29B8")]
		public static bool TryGetGizmoDrawer(GameObject attatchedGameObject, out RuntimeGizmoDrawer drawer)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x12B2B90", Offset = "0x12B2B90", VA = "0x12B2B90", Slot = "4")]
		protected virtual void OnValidate()
		{
		}

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0x12B2EE8", Offset = "0x12B2EE8", VA = "0x12B2EE8", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x12B2F40", Offset = "0x12B2F40", VA = "0x12B2F40", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x12B39A0", Offset = "0x12B39A0", VA = "0x12B39A0", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x12B3A98", Offset = "0x12B3A98", VA = "0x12B3A98", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0x12B3E34", Offset = "0x12B3E34", VA = "0x12B3E34")]
		protected void onPostRender(Camera camera)
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0x12B2A90", Offset = "0x12B2A90", VA = "0x12B2A90")]
		protected static bool areGizmosDisabled(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0x12B2D58", Offset = "0x12B2D58", VA = "0x12B2D58")]
		private void assignDrawerParams()
		{
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x12B3158", Offset = "0x12B3158", VA = "0x12B3158")]
		private void generateMeshes()
		{
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x12B3FEC", Offset = "0x12B3FEC", VA = "0x12B3FEC")]
		private void addQuad(List<Vector3> verts, List<int> indexes, Vector3 normal, Vector3 axis1, Vector3 axis2)
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x12B42C0", Offset = "0x12B42C0", VA = "0x12B42C0")]
		private void addCorner(List<int> indexes, int a, int b, int c, int d)
		{
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x12B438C", Offset = "0x12B438C", VA = "0x12B438C")]
		public RuntimeGizmoManager()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class RuntimeGizmoDrawer
	{
		[Token(Token = "0x2000694")]
		private enum OperationType
		{
			[Token(Token = "0x40022AA")]
			SetMatrix,
			[Token(Token = "0x40022AB")]
			ToggleWireframe,
			[Token(Token = "0x40022AC")]
			SetColor,
			[Token(Token = "0x40022AD")]
			DrawLine,
			[Token(Token = "0x40022AE")]
			DrawWireSphere,
			[Token(Token = "0x40022AF")]
			DrawMesh
		}

		[Token(Token = "0x2000695")]
		private struct Line
		{
			[Token(Token = "0x40022B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 a;

			[Token(Token = "0x40022B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 b;

			[Token(Token = "0x6002A02")]
			[Address(RVA = "0x12AF028", Offset = "0x12AF028", VA = "0x12AF028")]
			public Line(Vector3 a, Vector3 b)
			{
			}
		}

		[Token(Token = "0x2000696")]
		private struct WireSphere
		{
			[Token(Token = "0x40022B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Pose pose;

			[Token(Token = "0x40022B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float radius;

			[Token(Token = "0x40022B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int numSegments;
		}

		[Token(Token = "0x4001A2E")]
		public const int UNLIT_SOLID_PASS = 0;

		[Token(Token = "0x4001A2F")]
		public const int UNLIT_TRANSPARENT_PASS = 1;

		[Token(Token = "0x4001A30")]
		public const int SHADED_SOLID_PASS = 2;

		[Token(Token = "0x4001A31")]
		public const int SHADED_TRANSPARENT_PASS = 3;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<OperationType> _operations;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Matrix4x4> _matrices;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Color> _colors;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Line> _lines;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<WireSphere> _wireSpheres;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Mesh> _meshes;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color _currColor;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 _currMatrix;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Stack<Matrix4x4> _matrixStack;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool _isInWireMode;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material _gizmoMaterial;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _operationCountOnGuard;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Mesh cubeMesh;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Mesh wireCubeMesh;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Mesh sphereMesh;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Mesh wireSphereMesh;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Collider> _colliderList;

		[Token(Token = "0x1700033E")]
		public Shader gizmoShader
		{
			[Token(Token = "0x60021B4")]
			[Address(RVA = "0x12AE4B0", Offset = "0x12AE4B0", VA = "0x12AE4B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60021B5")]
			[Address(RVA = "0x12AE548", Offset = "0x12AE548", VA = "0x12AE548")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public Color color
		{
			[Token(Token = "0x60021BC")]
			[Address(RVA = "0x12AEA70", Offset = "0x12AEA70", VA = "0x12AEA70")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60021BD")]
			[Address(RVA = "0x12A4CCC", Offset = "0x12A4CCC", VA = "0x12A4CCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000340")]
		public Matrix4x4 matrix
		{
			[Token(Token = "0x60021BE")]
			[Address(RVA = "0x12AEA7C", Offset = "0x12AEA7C", VA = "0x12AEA7C")]
			get
			{
				return default(Matrix4x4);
			}
			[Token(Token = "0x60021BF")]
			[Address(RVA = "0x12AE78C", Offset = "0x12AE78C", VA = "0x12AE78C")]
			set
			{
			}
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x12AE640", Offset = "0x12AE640", VA = "0x12AE640")]
		public void BeginGuard()
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x12AE694", Offset = "0x12AE694", VA = "0x12AE694")]
		public void EndGuard()
		{
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x12AE734", Offset = "0x12AE734", VA = "0x12AE734")]
		public void RelativeTo(Transform transform)
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0x12AE8C4", Offset = "0x12AE8C4", VA = "0x12AE8C4")]
		public void PushMatrix()
		{
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0x12AE94C", Offset = "0x12AE94C", VA = "0x12AE94C")]
		public void PopMatrix()
		{
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0x12AE9D0", Offset = "0x12AE9D0", VA = "0x12AE9D0")]
		public void ResetMatrixAndColorState()
		{
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0x12AEA90", Offset = "0x12AEA90", VA = "0x12AEA90")]
		public void DrawMesh(Mesh mesh, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0x12AECB4", Offset = "0x12AECB4", VA = "0x12AECB4")]
		public void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0x12AEDE0", Offset = "0x12AEDE0", VA = "0x12AEDE0")]
		public void DrawWireMesh(Mesh mesh, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0x12AEE3C", Offset = "0x12AEE3C", VA = "0x12AEE3C")]
		public void DrawWireMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x60021C4")]
		[Address(RVA = "0x12AEF68", Offset = "0x12AEF68", VA = "0x12AEF68")]
		public void DrawLine(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0x12AF038", Offset = "0x12AF038", VA = "0x12AF038")]
		public void DrawCube(Vector3 position, Vector3 size)
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x12AF11C", Offset = "0x12AF11C", VA = "0x12AF11C")]
		public void DrawWireCube(Vector3 position, Vector3 size)
		{
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x12A4DA8", Offset = "0x12A4DA8", VA = "0x12A4DA8")]
		public void DrawSphere(Vector3 center, float radius)
		{
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0x12AF200", Offset = "0x12AF200", VA = "0x12AF200")]
		public void DrawWireSphere(Pose pose, float radius, int numSegments = 32)
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x12AF2C8", Offset = "0x12AF2C8", VA = "0x12AF2C8")]
		public void DrawWireSphere(Vector3 center, float radius, int numSegments = 32)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x12AF388", Offset = "0x12AF388", VA = "0x12AF388")]
		public void DrawEllipsoid(Vector3 foci1, Vector3 foci2, float minorAxis)
		{
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x12AF618", Offset = "0x12AF618", VA = "0x12AF618")]
		public void DrawWireCapsule(Vector3 start, Vector3 end, float radius)
		{
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0x12AFB60", Offset = "0x12AFB60", VA = "0x12AFB60")]
		private void DrawLineWireCircle(Vector3 center, Vector3 normal, float radius, int numCircleSegments = 16)
		{
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0x12AFC80", Offset = "0x12AFC80", VA = "0x12AFC80")]
		public void DrawWireArc(Vector3 center, Vector3 normal, Vector3 radialStartDirection, float radius, float fractionOfCircleToDraw, int numCircleSegments = 16)
		{
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0x12AE34C", Offset = "0x12AE34C", VA = "0x12AE34C")]
		public void DrawColliders(GameObject gameObject, bool useWireframe = true, bool traverseHierarchy = true, bool drawTriggers = false)
		{
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0x12AFEF4", Offset = "0x12AFEF4", VA = "0x12AFEF4")]
		public void DrawCollider(Collider collider, bool useWireframe = true, bool skipMatrixSetup = false)
		{
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0x12B05D0", Offset = "0x12B05D0", VA = "0x12B05D0")]
		public void DrawPosition(Vector3 pos, Color lerpColor, float lerpCoeff, [Optional] float? overrideScale)
		{
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0x12B0E44", Offset = "0x12B0E44", VA = "0x12B0E44")]
		public void DrawPosition(Vector3 pos)
		{
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0x12B0EBC", Offset = "0x12B0EBC", VA = "0x12B0EBC")]
		public void DrawPosition(Vector3 pos, float overrideScale)
		{
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0x12B0F94", Offset = "0x12B0F94", VA = "0x12B0F94")]
		public void DrawRect(Transform frame, UnityEngine.Rect rect)
		{
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0x12B119C", Offset = "0x12B119C", VA = "0x12B119C")]
		public void ClearAllGizmos()
		{
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0x12B12C8", Offset = "0x12B12C8", VA = "0x12B12C8")]
		public void DrawAllGizmosToScreen()
		{
		}

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0x12B1EB8", Offset = "0x12B1EB8", VA = "0x12B1EB8")]
		private void drawLineNow(Vector3 a, Vector3 b)
		{
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0x12B1F20", Offset = "0x12B1F20", VA = "0x12B1F20")]
		private void drawWireArcNow(Vector3 center, Vector3 normal, Vector3 radialStartDirection, float radius, float fractionOfCircleToDraw, int numCircleSegments = 16)
		{
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x12B2194", Offset = "0x12B2194", VA = "0x12B2194")]
		private void setCurrentPassColorIfNew(Color desiredColor, ref int curPass)
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x12B2228", Offset = "0x12B2228", VA = "0x12B2228")]
		private void drawPlaneSoftenedWireArcNow(Vector3 position, Vector3 circleNormal, Vector3 radialStartDirection, float radius, Color inFrontOfPlaneColor, Color behindPlaneColor, Vector3 planeNormal, ref int curPass, float fractionOfCircleToDraw = 1f, int numCircleSegments = 16)
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x12B1A24", Offset = "0x12B1A24", VA = "0x12B1A24")]
		private void drawWireSphereNow(WireSphere wireSphere, ref int curPass)
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x12B18B4", Offset = "0x12B18B4", VA = "0x12B18B4")]
		private void setPass(ref int currPass, bool isUnlit, [Optional] Color? desiredCurrColor)
		{
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x12AEB74", Offset = "0x12AEB74", VA = "0x12AEB74")]
		private void drawMeshInternal(Mesh mesh, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0x12AEAEC", Offset = "0x12AEAEC", VA = "0x12AEAEC")]
		private void setWireMode(bool wireMode)
		{
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x12B25F0", Offset = "0x12B25F0", VA = "0x12B25F0")]
		public RuntimeGizmoDrawer()
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class RuntimeGizmoToggle : MonoBehaviour
	{
		[Token(Token = "0x60021DF")]
		[Address(RVA = "0x12B4430", Offset = "0x12B4430", VA = "0x12B4430")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0x12B4434", Offset = "0x12B4434", VA = "0x12B4434")]
		public RuntimeGizmoToggle()
		{
		}
	}
}
namespace Leap.Unity.Infix
{
	[Token(Token = "0x200046F")]
	public static class Infix
	{
		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xF421AC", Offset = "0xF421AC", VA = "0xF421AC")]
		public static float Clamped01(this float f)
		{
			return default(float);
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xF4221C", Offset = "0xF4221C", VA = "0xF4221C")]
		public static float Clamped(this float f, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0xF422A4", Offset = "0xF422A4", VA = "0xF422A4")]
		public static Vector3 RotatedBy(this Vector3 thisVector, Quaternion byQuaternion)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0xF4235C", Offset = "0xF4235C", VA = "0xF4235C")]
		public static Vector3 MovedTowards(this Vector3 thisPosition, Vector3 otherPosition, float maxDistanceDelta)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0xF42414", Offset = "0xF42414", VA = "0xF42414")]
		public static float Dot(this Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0xF424BC", Offset = "0xF424BC", VA = "0xF424BC")]
		public static Vector3 Cross(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0xF42564", Offset = "0xF42564", VA = "0xF42564")]
		public static float Angle(this Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0xF4260C", Offset = "0xF4260C", VA = "0xF4260C")]
		public static float SignedAngle(this Vector3 a, Vector3 b, Vector3 axis)
		{
			return default(float);
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0xF42728", Offset = "0xF42728", VA = "0xF42728")]
		public static Vector3 GetRight(this Quaternion q)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0xF42808", Offset = "0xF42808", VA = "0xF42808")]
		public static Vector3 GetUp(this Quaternion q)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0xF428E8", Offset = "0xF428E8", VA = "0xF428E8")]
		public static Vector3 GetForward(this Quaternion q)
		{
			return default(Vector3);
		}
	}
}
namespace Leap.Unity.Space
{
	[Token(Token = "0x2000470")]
	public class LeapCylindricalSpace : LeapRadialSpace
	{
		[Token(Token = "0x2000697")]
		public class Transformer : IRadialTransformer, ITransformer
		{
			[Token(Token = "0x40022B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB593BC", Offset = "0xB593BC")]
			private LeapCylindricalSpace <space>k__BackingField;

			[Token(Token = "0x40022B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB593CC", Offset = "0xB593CC")]
			private LeapSpaceAnchor <anchor>k__BackingField;

			[Token(Token = "0x40022B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float angleOffset;

			[Token(Token = "0x40022B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float heightOffset;

			[Token(Token = "0x40022B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float radiusOffset;

			[Token(Token = "0x40022BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float radiansPerMeter;

			[Token(Token = "0x1700045F")]
			public LeapCylindricalSpace space
			{
				[Token(Token = "0x6002A03")]
				[Address(RVA = "0x12B5BA8", Offset = "0x12B5BA8", VA = "0x12B5BA8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62D68", Offset = "0xB62D68")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A04")]
				[Address(RVA = "0x12B5BB0", Offset = "0x12B5BB0", VA = "0x12B5BB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62D78", Offset = "0xB62D78")]
				set
				{
				}
			}

			[Token(Token = "0x17000460")]
			public LeapSpaceAnchor anchor
			{
				[Token(Token = "0x6002A05")]
				[Address(RVA = "0x12B5BB8", Offset = "0x12B5BB8", VA = "0x12B5BB8", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62D88", Offset = "0xB62D88")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A06")]
				[Address(RVA = "0x12B5BC0", Offset = "0x12B5BC0", VA = "0x12B5BC0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62D98", Offset = "0xB62D98")]
				set
				{
				}
			}

			[Token(Token = "0x6002A07")]
			[Address(RVA = "0x12B5BC8", Offset = "0x12B5BC8", VA = "0x12B5BC8", Slot = "6")]
			public Vector3 TransformPoint(Vector3 localRectPos)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A08")]
			[Address(RVA = "0x12B5D30", Offset = "0x12B5D30", VA = "0x12B5D30", Slot = "7")]
			public Vector3 InverseTransformPoint(Vector3 localWarpedPos)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A09")]
			[Address(RVA = "0x12B5EBC", Offset = "0x12B5EBC", VA = "0x12B5EBC", Slot = "8")]
			public Quaternion TransformRotation(Vector3 localRectPos, Quaternion localRectRot)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6002A0A")]
			[Address(RVA = "0x12B6034", Offset = "0x12B6034", VA = "0x12B6034", Slot = "9")]
			public Quaternion InverseTransformRotation(Vector3 localWarpedPos, Quaternion localWarpedRot)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6002A0B")]
			[Address(RVA = "0x12B6138", Offset = "0x12B6138", VA = "0x12B6138", Slot = "10")]
			public Vector3 TransformDirection(Vector3 localRectPos, Vector3 localRectDirection)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0x12B62AC", Offset = "0x12B62AC", VA = "0x12B62AC", Slot = "11")]
			public Vector3 InverseTransformDirection(Vector3 localWarpedPos, Vector3 localWarpedDirection)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A0D")]
			[Address(RVA = "0x12B63A8", Offset = "0x12B63A8", VA = "0x12B63A8", Slot = "12")]
			public Matrix4x4 GetTransformationMatrix(Vector3 localRectPos)
			{
				return default(Matrix4x4);
			}

			[Token(Token = "0x6002A0E")]
			[Address(RVA = "0x12B65DC", Offset = "0x12B65DC", VA = "0x12B65DC", Slot = "4")]
			public Vector4 GetVectorRepresentation(Transform element)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6002A0F")]
			[Address(RVA = "0x12B59A4", Offset = "0x12B59A4", VA = "0x12B59A4")]
			public Transformer()
			{
			}
		}

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x12B591C", Offset = "0x12B591C", VA = "0x12B591C", Slot = "7")]
		protected override ITransformer CosntructBaseTransformer()
		{
			return null;
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x12B59AC", Offset = "0x12B59AC", VA = "0x12B59AC", Slot = "8")]
		protected override ITransformer ConstructTransformer(LeapSpaceAnchor anchor)
		{
			return null;
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x12B5A24", Offset = "0x12B5A24", VA = "0x12B5A24", Slot = "10")]
		protected override void UpdateRadialTransformer(ITransformer transformer, ITransformer parent, Vector3 rectSpaceDelta)
		{
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x12B5B38", Offset = "0x12B5B38", VA = "0x12B5B38")]
		public LeapCylindricalSpace()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public interface IRadialTransformer : ITransformer
	{
		[Token(Token = "0x60021F0")]
		Vector4 GetVectorRepresentation(Transform element);
	}
	[Token(Token = "0x2000472")]
	public abstract class LeapRadialSpace : LeapSpace
	{
		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB559F4", Offset = "0xB559F4")]
		[SerializeField]
		private float _radius;

		[Token(Token = "0x17000341")]
		public float radius
		{
			[Token(Token = "0x60021F1")]
			[Address(RVA = "0x12B6734", Offset = "0x12B6734", VA = "0x12B6734")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60021F2")]
			[Address(RVA = "0x12B673C", Offset = "0x12B673C", VA = "0x12B673C")]
			set
			{
			}
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0x12B6744", Offset = "0x12B6744", VA = "0x12B6744", Slot = "6")]
		public override Hash GetSettingHash()
		{
			return default(Hash);
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0x12B67AC", Offset = "0x12B67AC", VA = "0x12B67AC", Slot = "9")]
		protected sealed override void UpdateTransformer(ITransformer transformer, ITransformer parent)
		{
		}

		[Token(Token = "0x60021F5")]
		protected abstract void UpdateRadialTransformer(ITransformer transformer, ITransformer parent, Vector3 rectSpaceDelta);

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x12B5B3C", Offset = "0x12B5B3C", VA = "0x12B5B3C")]
		protected LeapRadialSpace()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public class LeapSphericalSpace : LeapRadialSpace
	{
		[Token(Token = "0x2000698")]
		public class Transformer : IRadialTransformer, ITransformer
		{
			[Token(Token = "0x40022BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB593DC", Offset = "0xB593DC")]
			private LeapSphericalSpace <space>k__BackingField;

			[Token(Token = "0x40022BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB593EC", Offset = "0xB593EC")]
			private LeapSpaceAnchor <anchor>k__BackingField;

			[Token(Token = "0x40022BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float angleXOffset;

			[Token(Token = "0x40022BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float angleYOffset;

			[Token(Token = "0x40022BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float radiusOffset;

			[Token(Token = "0x40022C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float radiansPerMeter;

			[Token(Token = "0x17000461")]
			public LeapSphericalSpace space
			{
				[Token(Token = "0x6002A10")]
				[Address(RVA = "0x148D36C", Offset = "0x148D36C", VA = "0x148D36C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DA8", Offset = "0xB62DA8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A11")]
				[Address(RVA = "0x148D374", Offset = "0x148D374", VA = "0x148D374")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DB8", Offset = "0xB62DB8")]
				set
				{
				}
			}

			[Token(Token = "0x17000462")]
			public LeapSpaceAnchor anchor
			{
				[Token(Token = "0x6002A12")]
				[Address(RVA = "0x148D37C", Offset = "0x148D37C", VA = "0x148D37C", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DC8", Offset = "0xB62DC8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A13")]
				[Address(RVA = "0x148D384", Offset = "0x148D384", VA = "0x148D384")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DD8", Offset = "0xB62DD8")]
				set
				{
				}
			}

			[Token(Token = "0x6002A14")]
			[Address(RVA = "0x148D38C", Offset = "0x148D38C", VA = "0x148D38C", Slot = "6")]
			public Vector3 TransformPoint(Vector3 localRectPos)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A15")]
			[Address(RVA = "0x148D514", Offset = "0x148D514", VA = "0x148D514", Slot = "7")]
			public Vector3 InverseTransformPoint(Vector3 localWarpedPos)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A16")]
			[Address(RVA = "0x148D6E4", Offset = "0x148D6E4", VA = "0x148D6E4", Slot = "8")]
			public Quaternion TransformRotation(Vector3 localRectPos, Quaternion localRectRot)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6002A17")]
			[Address(RVA = "0x148D870", Offset = "0x148D870", VA = "0x148D870", Slot = "9")]
			public Quaternion InverseTransformRotation(Vector3 localWarpedPos, Quaternion localWarpedRot)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6002A18")]
			[Address(RVA = "0x148D9E0", Offset = "0x148D9E0", VA = "0x148D9E0", Slot = "10")]
			public Vector3 TransformDirection(Vector3 localRectPos, Vector3 localRectDirection)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A19")]
			[Address(RVA = "0x148DB68", Offset = "0x148DB68", VA = "0x148DB68", Slot = "11")]
			public Vector3 InverseTransformDirection(Vector3 localWarpedPos, Vector3 localWarpedDirection)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002A1A")]
			[Address(RVA = "0x148DCD0", Offset = "0x148DCD0", VA = "0x148DCD0", Slot = "12")]
			public Matrix4x4 GetTransformationMatrix(Vector3 localRectPos)
			{
				return default(Matrix4x4);
			}

			[Token(Token = "0x6002A1B")]
			[Address(RVA = "0x148DF2C", Offset = "0x148DF2C", VA = "0x148DF2C", Slot = "4")]
			public Vector4 GetVectorRepresentation(Transform element)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6002A1C")]
			[Address(RVA = "0x148E088", Offset = "0x148E088", VA = "0x148E088")]
			public Transformer()
			{
			}
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x12B70D4", Offset = "0x12B70D4", VA = "0x12B70D4", Slot = "7")]
		protected override ITransformer CosntructBaseTransformer()
		{
			return null;
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x12B715C", Offset = "0x12B715C", VA = "0x12B715C", Slot = "8")]
		protected override ITransformer ConstructTransformer(LeapSpaceAnchor anchor)
		{
			return null;
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0x12B71D4", Offset = "0x12B71D4", VA = "0x12B71D4", Slot = "10")]
		protected override void UpdateRadialTransformer(ITransformer transformer, ITransformer parent, Vector3 rectSpaceDelta)
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0x12B72EC", Offset = "0x12B72EC", VA = "0x12B72EC")]
		public LeapSphericalSpace()
		{
		}
	}
	[Token(Token = "0x2000474")]
	public interface ISpaceComponent
	{
		[Token(Token = "0x17000342")]
		LeapSpaceAnchor anchor
		{
			[Token(Token = "0x60021FB")]
			get;
		}
	}
	[Token(Token = "0x2000475")]
	public interface ITransformer
	{
		[Token(Token = "0x17000343")]
		LeapSpaceAnchor anchor
		{
			[Token(Token = "0x60021FC")]
			get;
		}

		[Token(Token = "0x60021FD")]
		Vector3 TransformPoint(Vector3 localRectPos);

		[Token(Token = "0x60021FE")]
		Vector3 InverseTransformPoint(Vector3 localWarpedSpace);

		[Token(Token = "0x60021FF")]
		Quaternion TransformRotation(Vector3 localRectPos, Quaternion localRectRot);

		[Token(Token = "0x6002200")]
		Quaternion InverseTransformRotation(Vector3 localWarpedPos, Quaternion localWarpedRot);

		[Token(Token = "0x6002201")]
		Vector3 TransformDirection(Vector3 localRectPos, Vector3 localRectDirection);

		[Token(Token = "0x6002202")]
		Vector3 InverseTransformDirection(Vector3 localWarpedSpace, Vector3 localWarpedDirection);

		[Token(Token = "0x6002203")]
		Matrix4x4 GetTransformationMatrix(Vector3 localRectPos);
	}
	[Token(Token = "0x2000476")]
	public class IdentityTransformer : ITransformer
	{
		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IdentityTransformer single;

		[Token(Token = "0x17000344")]
		public LeapSpaceAnchor anchor
		{
			[Token(Token = "0x6002204")]
			[Address(RVA = "0x12B5730", Offset = "0x12B5730", VA = "0x12B5730", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0x12B5738", Offset = "0x12B5738", VA = "0x12B5738", Slot = "5")]
		public Vector3 TransformPoint(Vector3 localRectPos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x12B573C", Offset = "0x12B573C", VA = "0x12B573C", Slot = "6")]
		public Vector3 InverseTransformPoint(Vector3 localWarpedSpace)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x12B5740", Offset = "0x12B5740", VA = "0x12B5740", Slot = "7")]
		public Quaternion TransformRotation(Vector3 localRectPos, Quaternion localRectRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x12B5754", Offset = "0x12B5754", VA = "0x12B5754", Slot = "8")]
		public Quaternion InverseTransformRotation(Vector3 localWarpedPos, Quaternion localWarpedRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x12B5768", Offset = "0x12B5768", VA = "0x12B5768", Slot = "9")]
		public Vector3 TransformDirection(Vector3 localRectPos, Vector3 localRectDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x12B5778", Offset = "0x12B5778", VA = "0x12B5778", Slot = "10")]
		public Vector3 InverseTransformDirection(Vector3 localWarpedSpace, Vector3 localWarpedDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x12B5788", Offset = "0x12B5788", VA = "0x12B5788", Slot = "11")]
		public Matrix4x4 GetTransformationMatrix(Vector3 localRectPos)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x12B58B0", Offset = "0x12B58B0", VA = "0x12B58B0")]
		public IdentityTransformer()
		{
		}
	}
	[Token(Token = "0x2000477")]
	public static class ITransformerExtensions
	{
		[Token(Token = "0x600220E")]
		[Address(RVA = "0x12B54AC", Offset = "0x12B54AC", VA = "0x12B54AC")]
		public static void WorldSpaceUnwarp(this ITransformer transformer, Vector3 worldWarpedPosition, Quaternion worldWarpedRotation, out Vector3 worldRectilinearPosition, out Quaternion worldRectilinearRotation)
		{
		}
	}
	[Token(Token = "0x2000478")]
	[ExecuteInEditMode]
	public abstract class LeapSpace : LeapSpaceAnchor
	{
		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<LeapSpace> _enabledSpaces;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<LeapSpaceAnchor> _anchors;

		[Token(Token = "0x17000345")]
		public static List<LeapSpace> allEnabled
		{
			[Token(Token = "0x600220F")]
			[Address(RVA = "0x12B6A3C", Offset = "0x12B6A3C", VA = "0x12B6A3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000346")]
		public List<LeapSpaceAnchor> anchors
		{
			[Token(Token = "0x6002212")]
			[Address(RVA = "0x12B6D78", Offset = "0x12B6D78", VA = "0x12B6D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x12B6AA4", Offset = "0x12B6AA4", VA = "0x12B6AA4", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x12B6C70", Offset = "0x12B6C70", VA = "0x12B6C70", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x12B6B3C", Offset = "0x12B6B3C", VA = "0x12B6B3C")]
		public void RebuildHierarchy()
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x12B6BAC", Offset = "0x12B6BAC", VA = "0x12B6BAC")]
		public void RecalculateTransformers()
		{
		}

		[Token(Token = "0x6002215")]
		public abstract Hash GetSettingHash();

		[Token(Token = "0x6002216")]
		protected abstract ITransformer CosntructBaseTransformer();

		[Token(Token = "0x6002217")]
		protected abstract ITransformer ConstructTransformer(LeapSpaceAnchor anchor);

		[Token(Token = "0x6002218")]
		protected abstract void UpdateTransformer(ITransformer transformer, ITransformer parent);

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x12B6D80", Offset = "0x12B6D80", VA = "0x12B6D80")]
		private void rebuildHierarchyRecursively(Transform root)
		{
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x12B69CC", Offset = "0x12B69CC", VA = "0x12B69CC")]
		protected LeapSpace()
		{
		}
	}
	[Token(Token = "0x2000479")]
	[DisallowMultipleComponent]
	public class LeapSpaceAnchor : MonoBehaviour
	{
		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public LeapSpaceAnchor parent;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public LeapSpace space;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ITransformer transformer;

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x12B6B38", Offset = "0x12B6B38", VA = "0x12B6B38", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x12B6D74", Offset = "0x12B6D74", VA = "0x12B6D74", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x12B6EBC", Offset = "0x12B6EBC", VA = "0x12B6EBC")]
		public void RecalculateParentAnchor()
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x12B6FD8", Offset = "0x12B6FD8", VA = "0x12B6FD8")]
		public static LeapSpaceAnchor GetAnchor(Transform root)
		{
			return null;
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x12B6F5C", Offset = "0x12B6F5C", VA = "0x12B6F5C")]
		public LeapSpaceAnchor()
		{
		}
	}
}
namespace Leap.Unity.Query
{
	[Token(Token = "0x200047A")]
	public static class QueryConversionExtensions
	{
		[Token(Token = "0x6002221")]
		public static Query<T> Query<T>(this ICollection<T> collection)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002222")]
		public static Query<T> Query<T>(this IEnumerable<T> enumerable)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002223")]
		public static Query<T> Query<T>(this IEnumerator<T> enumerator)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002224")]
		public static Query<T> Query<T>(this T[,] array)
		{
			return default(Query<T>);
		}
	}
	[Token(Token = "0x200047B")]
	public struct Query<T>
	{
		[Token(Token = "0x2000699")]
		public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] _array;

			[Token(Token = "0x40022C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _count;

			[Token(Token = "0x40022C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _nextIndex;

			[Token(Token = "0x40022C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB593FC", Offset = "0xB593FC")]
			private T <Current>k__BackingField;

			[Token(Token = "0x17000463")]
			public T Current
			{
				[Token(Token = "0x6002A1D")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DE8", Offset = "0xB62DE8")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x6002A1E")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB62DF8", Offset = "0xB62DF8")]
				private set
				{
				}
			}

			[Token(Token = "0x17000464")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A20")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A1F")]
			public Enumerator(T[] array, int count)
			{
			}

			[Token(Token = "0x6002A21")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A22")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002A23")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200069A")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB47A84", Offset = "0xB47A84")]
		public struct QuerySlice : IDisposable
		{
			[Token(Token = "0x40022C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly T[] BackingArray;

			[Token(Token = "0x40022C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int Count;

			[Token(Token = "0x17000465")]
			public T Item
			{
				[Token(Token = "0x6002A25")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x6002A24")]
			public QuerySlice(T[] array, int count)
			{
			}

			[Token(Token = "0x6002A26")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x200069B")]
		private struct Validator
		{
			[Token(Token = "0x20006E6")]
			private class Id
			{
				[Token(Token = "0x4002351")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int value;

				[Token(Token = "0x6002AF8")]
				public Id()
				{
				}
			}

			[Token(Token = "0x40022C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static int _nextId;

			[Token(Token = "0x40022C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Id _idRef;

			[Token(Token = "0x40022C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _idValue;

			[Token(Token = "0x6002A27")]
			public void Validate()
			{
			}

			[Token(Token = "0x6002A28")]
			public static Validator Spawn()
			{
				return default(Validator);
			}

			[Token(Token = "0x6002A29")]
			public static void Invalidate(Validator validator)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200069C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47ABC", Offset = "0xB47ABC")]
		private sealed class <>c__7<K> where K : class
		{
			[Token(Token = "0x40022CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__7<K> <>9;

			[Token(Token = "0x40022CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, K> <>9__7_0;

			[Token(Token = "0x6002A2C")]
			public <>c__7()
			{
			}

			[Token(Token = "0x6002A2D")]
			internal K <Cast>b__7_0(T item)
			{
				return null;
			}
		}

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] _array;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _count;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Validator _validator;

		[Token(Token = "0x6002225")]
		public Query(T[] array, int count)
		{
		}

		[Token(Token = "0x6002226")]
		public Query(ICollection<T> collection)
		{
		}

		[Token(Token = "0x6002227")]
		public Query(Query<T> other)
		{
		}

		[Token(Token = "0x6002228")]
		public Query<K> OfType<K>() where K : T
		{
			return default(Query<K>);
		}

		[Token(Token = "0x6002229")]
		public Query<K> Cast<K>() where K : class
		{
			return default(Query<K>);
		}

		[Token(Token = "0x600222A")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600222B")]
		public void Deconstruct(out T[] array, out int count)
		{
		}

		[Token(Token = "0x600222C")]
		public QuerySlice Deconstruct()
		{
			return default(QuerySlice);
		}

		[Token(Token = "0x600222D")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}
	}
	[Token(Token = "0x200047C")]
	public static class QueryCollapseExtensions
	{
		[Token(Token = "0x200069D")]
		private static class FoldDelegate<T> where T : IComparable<T>
		{
			[Serializable]
			[Token(Token = "0x20006E7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47BBC", Offset = "0xB47BBC")]
			private sealed class <>c
			{
				[Token(Token = "0x4002352")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x6002AFA")]
				public <>c()
				{
				}

				[Token(Token = "0x6002AFB")]
				internal T <.cctor>b__2_0(T a, T b)
				{
					return (T)null;
				}

				[Token(Token = "0x6002AFC")]
				internal T <.cctor>b__2_1(T a, T b)
				{
					return (T)null;
				}
			}

			[Token(Token = "0x40022CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Func<T, T, T> max;

			[Token(Token = "0x40022CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Func<T, T, T> min;
		}

		[Serializable]
		[Token(Token = "0x200069E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47ACC", Offset = "0xB47ACC")]
		private sealed class <>c
		{
			[Token(Token = "0x40022CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40022CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<int, int, int> <>9__38_0;

			[Token(Token = "0x40022D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<float, float, float> <>9__39_0;

			[Token(Token = "0x40022D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<double, double, double> <>9__40_0;

			[Token(Token = "0x6002A30")]
			[Address(RVA = "0x12A43AC", Offset = "0x12A43AC", VA = "0x12A43AC")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A31")]
			[Address(RVA = "0x12A43B4", Offset = "0x12A43B4", VA = "0x12A43B4")]
			internal int <Sum>b__38_0(int a, int b)
			{
				return default(int);
			}

			[Token(Token = "0x6002A32")]
			[Address(RVA = "0x12A43BC", Offset = "0x12A43BC", VA = "0x12A43BC")]
			internal float <Sum>b__39_0(float a, float b)
			{
				return default(float);
			}

			[Token(Token = "0x6002A33")]
			[Address(RVA = "0x12A43C4", Offset = "0x12A43C4", VA = "0x12A43C4")]
			internal double <Sum>b__40_0(double a, double b)
			{
				return default(double);
			}
		}

		[Serializable]
		[Token(Token = "0x200069F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47ADC", Offset = "0xB47ADC")]
		private sealed class <>c__52<T, V>
		{
			[Token(Token = "0x40022D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__52<T, V> <>9;

			[Token(Token = "0x40022D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, T> <>9__52_0;

			[Token(Token = "0x6002A35")]
			public <>c__52()
			{
			}

			[Token(Token = "0x6002A36")]
			internal T <ToDictionary>b__52_0(T t)
			{
				return (T)null;
			}
		}

		[Token(Token = "0x600222E")]
		public static bool All<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(bool);
		}

		[Token(Token = "0x600222F")]
		public static bool AllEqual<T>(this Query<T> query)
		{
			return default(bool);
		}

		[Token(Token = "0x6002230")]
		public static bool Any<T>(this Query<T> query)
		{
			return default(bool);
		}

		[Token(Token = "0x6002231")]
		public static bool Any<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(bool);
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x12A3DA4", Offset = "0x12A3DA4", VA = "0x12A3DA4")]
		public static float Average(this Query<float> query)
		{
			return default(float);
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x12A3EB4", Offset = "0x12A3EB4", VA = "0x12A3EB4")]
		public static double Average(this Query<double> query)
		{
			return default(double);
		}

		[Token(Token = "0x6002234")]
		public static bool Contains<T>(this Query<T> query, T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002235")]
		public static int Count<T>(this Query<T> query)
		{
			return default(int);
		}

		[Token(Token = "0x6002236")]
		public static int Count<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(int);
		}

		[Token(Token = "0x6002237")]
		public static int CountUnique<T>(this Query<T> query)
		{
			return default(int);
		}

		[Token(Token = "0x6002238")]
		public static int CountUnique<T, K>(this Query<T> query, Func<T, K> selector)
		{
			return default(int);
		}

		[Token(Token = "0x6002239")]
		public static T ElementAt<T>(this Query<T> query, int index)
		{
			return (T)null;
		}

		[Token(Token = "0x600223A")]
		public static T ElementAtOrDefault<T>(this Query<T> query, int index)
		{
			return (T)null;
		}

		[Token(Token = "0x600223B")]
		public static T First<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x600223C")]
		public static T First<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x600223D")]
		public static T FirstOrDefault<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x600223E")]
		public static T FirstOrDefault<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x600223F")]
		public static Maybe<T> FirstOrNone<T>(this Query<T> query)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002240")]
		public static Maybe<T> FirstOrNone<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002241")]
		public static T Fold<T>(this Query<T> query, Func<T, T, T> foldFunc)
		{
			return (T)null;
		}

		[Token(Token = "0x6002242")]
		public static int IndexOf<T>(this Query<T> query, T t)
		{
			return default(int);
		}

		[Token(Token = "0x6002243")]
		public static int IndexOf<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(int);
		}

		[Token(Token = "0x6002244")]
		public static T Last<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x6002245")]
		public static T Last<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x6002246")]
		public static T LastOrDefault<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x6002247")]
		public static T LastOrDefault<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x6002248")]
		public static Maybe<T> LastOrNone<T>(this Query<T> query)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002249")]
		public static Maybe<T> LastOrNone<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x600224A")]
		public static T Max<T>(this Query<T> query) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x600224B")]
		public static K Max<T, K>(this Query<T> query, Func<T, K> selector) where K : IComparable<K>
		{
			return (K)null;
		}

		[Token(Token = "0x600224C")]
		public static T Min<T>(this Query<T> query) where T : IComparable<T>
		{
			return (T)null;
		}

		[Token(Token = "0x600224D")]
		public static K Min<T, K>(this Query<T> query, Func<T, K> selector) where K : IComparable<K>
		{
			return (K)null;
		}

		[Token(Token = "0x600224E")]
		public static T Single<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x600224F")]
		public static T Single<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x6002250")]
		public static T SingleOrDefault<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x6002251")]
		public static T SingleOrDefault<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return (T)null;
		}

		[Token(Token = "0x6002252")]
		public static Maybe<T> SingleOrNone<T>(this Query<T> query)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002253")]
		public static Maybe<T> SingleOrNone<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x12A3FC4", Offset = "0x12A3FC4", VA = "0x12A3FC4")]
		public static int Sum(this Query<int> query)
		{
			return default(int);
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x12A40F0", Offset = "0x12A40F0", VA = "0x12A40F0")]
		public static float Sum(this Query<float> query)
		{
			return default(float);
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0x12A421C", Offset = "0x12A421C", VA = "0x12A421C")]
		public static double Sum(this Query<double> query)
		{
			return default(double);
		}

		[Token(Token = "0x6002257")]
		public static T UniformOrDefault<T>(this Query<T> query)
		{
			return (T)null;
		}

		[Token(Token = "0x6002258")]
		public static Maybe<T> UniformOrNone<T>(this Query<T> query)
		{
			return default(Maybe<T>);
		}

		[Token(Token = "0x6002259")]
		public static T[] ToArray<T>(this Query<T> query)
		{
			return null;
		}

		[Token(Token = "0x600225A")]
		public static void FillArray<T>(this Query<T> query, T[] array, int offset = 0)
		{
		}

		[Token(Token = "0x600225B")]
		public static List<T> ToList<T>(this Query<T> query)
		{
			return null;
		}

		[Token(Token = "0x600225C")]
		public static void FillList<T>(this Query<T> query, List<T> list)
		{
		}

		[Token(Token = "0x600225D")]
		public static void AppendList<T>(this Query<T> query, List<T> list)
		{
		}

		[Token(Token = "0x600225E")]
		public static HashSet<T> ToHashSet<T>(this Query<T> query)
		{
			return null;
		}

		[Token(Token = "0x600225F")]
		public static void FillHashSet<T>(this Query<T> query, HashSet<T> set)
		{
		}

		[Token(Token = "0x6002260")]
		public static void AppendHashSet<T>(this Query<T> query, HashSet<T> set)
		{
		}

		[Token(Token = "0x6002261")]
		public static Dictionary<K, V> ToDictionary<T, K, V>(this Query<T> query, Func<T, K> keySelector, Func<T, V> valueSelector)
		{
			return null;
		}

		[Token(Token = "0x6002262")]
		public static Dictionary<T, V> ToDictionary<T, V>(this Query<T> query, Func<T, V> valueSelector)
		{
			return null;
		}
	}
	[Token(Token = "0x200047D")]
	public static class QueryOperatorExtensions
	{
		[Token(Token = "0x20006A0")]
		public struct PrevPair<T>
		{
			[Token(Token = "0x40022D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T value;

			[Token(Token = "0x40022D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T prev;

			[Token(Token = "0x40022D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool hasPrev;
		}

		[Token(Token = "0x20006A1")]
		public struct IndexedValue<T>
		{
			[Token(Token = "0x40022D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int index;

			[Token(Token = "0x40022D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T value;
		}

		[Token(Token = "0x20006A2")]
		private class FunctorComparer<T, K> : IComparer<T> where K : IComparable<K>
		{
			[Token(Token = "0x40022D9")]
			[ThreadStatic]
			private static FunctorComparer<T, K> _single;

			[Token(Token = "0x40022DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<T, K> _functor;

			[Token(Token = "0x40022DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _sign;

			[Token(Token = "0x6002A37")]
			private FunctorComparer()
			{
			}

			[Token(Token = "0x6002A38")]
			public static FunctorComparer<T, K> Ascending(Func<T, K> functor)
			{
				return null;
			}

			[Token(Token = "0x6002A39")]
			public static FunctorComparer<T, K> Descending(Func<T, K> functor)
			{
				return null;
			}

			[Token(Token = "0x6002A3A")]
			private static FunctorComparer<T, K> single(Func<T, K> functor, int sign)
			{
				return null;
			}

			[Token(Token = "0x6002A3B")]
			public void Clear()
			{
			}

			[Token(Token = "0x6002A3C")]
			public int Compare(T x, T y)
			{
				return default(int);
			}
		}

		[Serializable]
		[Token(Token = "0x20006A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47AEC", Offset = "0xB47AEC")]
		private sealed class <>c__18<T> where T : UnityEngine.Object
		{
			[Token(Token = "0x40022DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__18<T> <>9;

			[Token(Token = "0x40022DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, bool> <>9__18_0;

			[Token(Token = "0x6002A3E")]
			public <>c__18()
			{
			}

			[Token(Token = "0x6002A3F")]
			internal bool <ValidUnityObjs>b__18_0(T t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002263")]
		public static Query<T> Concat<T>(this Query<T> query, ICollection<T> collection)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002264")]
		public static Query<T> Concat<T>(this Query<T> query, Query<T> other)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002265")]
		public static Query<T> Distinct<T>(this Query<T> query)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002266")]
		public static Query<T> OfType<T>(this Query<T> query, Type type)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002267")]
		public static Query<T> OrderBy<T, K>(this Query<T> query, Func<T, K> selector) where K : IComparable<K>
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002268")]
		public static Query<T> OrderByDescending<T, K>(this Query<T> query, Func<T, K> selector) where K : IComparable<K>
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002269")]
		public static Query<T> Repeat<T>(this Query<T> query, int times)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600226A")]
		public static Query<T> Reverse<T>(this Query<T> query)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600226B")]
		public static Query<K> Select<T, K>(this Query<T> query, Func<T, K> selector)
		{
			return default(Query<K>);
		}

		[Token(Token = "0x600226C")]
		public static Query<K> SelectMany<T, K>(this Query<T> query, Func<T, ICollection<K>> selector)
		{
			return default(Query<K>);
		}

		[Token(Token = "0x600226D")]
		public static Query<K> SelectMany<T, K>(this Query<T> query, Func<T, Query<K>> selector)
		{
			return default(Query<K>);
		}

		[Token(Token = "0x600226E")]
		public static Query<T> Skip<T>(this Query<T> query, int toSkip)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600226F")]
		public static Query<T> SkipWhile<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002270")]
		public static Query<T> Sort<T>(this Query<T> query) where T : IComparable<T>
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002271")]
		public static Query<T> SortDescending<T>(this Query<T> query) where T : IComparable<T>
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002272")]
		public static Query<T> Take<T>(this Query<T> query, int toTake)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002273")]
		public static Query<T> TakeWhile<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002274")]
		public static Query<T> Where<T>(this Query<T> query, Func<T, bool> predicate)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002275")]
		public static Query<T> ValidUnityObjs<T>(this Query<T> query) where T : UnityEngine.Object
		{
			return default(Query<T>);
		}

		[Token(Token = "0x6002276")]
		public static Query<IndexedValue<T>> WithIndices<T>(this Query<T> query)
		{
			return default(Query<IndexedValue<T>>);
		}

		[Token(Token = "0x6002277")]
		public static Query<PrevPair<T>> WithPrevious<T>(this Query<T> query, int offset = 1, bool includeStart = false)
		{
			return default(Query<PrevPair<T>>);
		}

		[Token(Token = "0x6002278")]
		public static Query<V> Zip<T, K, V>(this Query<T> query, ICollection<K> collection, Func<T, K, V> selector)
		{
			return default(Query<V>);
		}

		[Token(Token = "0x6002279")]
		public static Query<V> Zip<T, K, V>(this Query<T> query, Query<K> otherQuery, Func<T, K, V> selector)
		{
			return default(Query<V>);
		}
	}
	[Token(Token = "0x200047E")]
	public static class Values
	{
		[Token(Token = "0x600227A")]
		public static Query<T> Single<T>(T value)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600227B")]
		public static Query<T> Repeat<T>(T value, int times)
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600227C")]
		public static Query<T> Empty<T>()
		{
			return default(Query<T>);
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x12A43CC", Offset = "0x12A43CC", VA = "0x12A43CC")]
		public static Query<int> Range(int from, int to, int step = 1, bool endIsExclusive = true)
		{
			return default(Query<int>);
		}
	}
}
namespace Leap.Unity.Encoding
{
	[Token(Token = "0x200047F")]
	public interface IInterpolable<T>
	{
		[Token(Token = "0x600227E")]
		T CopyFrom(T toCopy);

		[Token(Token = "0x600227F")]
		bool FillLerped(T from, T to, float t);

		[Token(Token = "0x6002280")]
		bool FillSplined(T a, T b, T c, T d, float t);
	}
	[Serializable]
	[Token(Token = "0x2000480")]
	public class VectorHand : IInterpolable<VectorHand>
	{
		[Token(Token = "0x4001A4D")]
		public const int NUM_JOINT_POSITIONS = 25;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isLeft;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 palmPos;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion palmRot;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3[] _backingJointPositions;

		[Token(Token = "0x4001A52")]
		public const int NUM_BYTES = 86;

		[Token(Token = "0x4001A53")]
		[ThreadStatic]
		private static VectorHand s_backingCachedVectorHand;

		[Token(Token = "0x4001A54")]
		[ThreadStatic]
		private static Vector3[] s_backingJointsBuffer;

		[Token(Token = "0x17000347")]
		public Vector3[] jointPositions
		{
			[Token(Token = "0x6002281")]
			[Address(RVA = "0x156CE20", Offset = "0x156CE20", VA = "0x156CE20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000348")]
		public int numBytesRequired
		{
			[Token(Token = "0x6002287")]
			[Address(RVA = "0x156E140", Offset = "0x156E140", VA = "0x156E140")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000349")]
		private static VectorHand s_cachedVectorHand
		{
			[Token(Token = "0x600228E")]
			[Address(RVA = "0x156EB10", Offset = "0x156EB10", VA = "0x156EB10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034A")]
		private static Vector3[] s_jointsBuffer
		{
			[Token(Token = "0x600228F")]
			[Address(RVA = "0x156EBD8", Offset = "0x156EBD8", VA = "0x156EBD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x156CE80", Offset = "0x156CE80", VA = "0x156CE80")]
		public VectorHand()
		{
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x156CE88", Offset = "0x156CE88", VA = "0x156CE88")]
		public VectorHand(Hand hand)
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x156D190", Offset = "0x156D190", VA = "0x156D190", Slot = "4")]
		public VectorHand CopyFrom(VectorHand h)
		{
			return null;
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x156CEB8", Offset = "0x156CEB8", VA = "0x156CEB8")]
		public void Encode(Hand fromHand)
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x156D390", Offset = "0x156D390", VA = "0x156D390")]
		public void Decode(Hand intoHand)
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x156E148", Offset = "0x156E148", VA = "0x156E148")]
		public void ReadBytes(byte[] bytes, int offset = 0)
		{
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x156E16C", Offset = "0x156E16C", VA = "0x156E16C")]
		public void ReadBytes(byte[] bytes, ref int offset)
		{
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x156E550", Offset = "0x156E550", VA = "0x156E550")]
		public void FillBytes(byte[] bytesToFill, ref int offset)
		{
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x156EA10", Offset = "0x156EA10", VA = "0x156EA10")]
		public void FillBytes(byte[] bytesToFill)
		{
		}

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x156EA34", Offset = "0x156EA34", VA = "0x156EA34")]
		public void ReadBytes(byte[] bytes, ref int offset, Hand intoHand)
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x156EA60", Offset = "0x156EA60", VA = "0x156EA60")]
		public void FillBytes(byte[] bytes, ref int offset, Hand fromHand)
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x156ECAC", Offset = "0x156ECAC", VA = "0x156ECAC")]
		public static void StaticFillBytes(byte[] bytes, Hand fromHand)
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x156ED24", Offset = "0x156ED24", VA = "0x156ED24")]
		public static void StaticFillBytes(byte[] bytes, int offset, Hand fromHand)
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x156EDA4", Offset = "0x156EDA4", VA = "0x156EDA4")]
		public static void StaticFillBytes(byte[] bytes, ref int offset, Hand fromHand)
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x156DF84", Offset = "0x156DF84", VA = "0x156DF84")]
		public static Vector3 ToWorld(Vector3 localPoint, Vector3 localOrigin, Quaternion localRot)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x156D274", Offset = "0x156D274", VA = "0x156D274")]
		public static Vector3 ToLocal(Vector3 worldPoint, Vector3 localOrigin, Quaternion localRot)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002295")]
		[Address(RVA = "0x156EE40", Offset = "0x156EE40", VA = "0x156EE40", Slot = "5")]
		public bool FillLerped(VectorHand a, VectorHand b, float t)
		{
			return default(bool);
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x156F0F8", Offset = "0x156F0F8", VA = "0x156F0F8", Slot = "6")]
		public bool FillSplined(VectorHand a, VectorHand b, VectorHand c, VectorHand d, float t)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000481")]
	public static class VectorHandExtensions
	{
		[Token(Token = "0x6002298")]
		[Address(RVA = "0x156E084", Offset = "0x156E084", VA = "0x156E084")]
		public static Bone GetBone(this Hand hand, int boneIdx)
		{
			return null;
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x156E958", Offset = "0x156E958", VA = "0x156E958")]
		public static byte FloatToByte(float inFloat, float movementRange = 0.3f)
		{
			return default(byte);
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0x156E528", Offset = "0x156E528", VA = "0x156E528")]
		public static float ByteToFloat(byte inByte, float movementRange = 0.3f)
		{
			return default(float);
		}
	}
}
namespace Leap.Unity.Attributes
{
	[Token(Token = "0x2000482")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB46928", Offset = "0xB46928")]
	public enum AutoFindLocations
	{
		[Token(Token = "0x4001A56")]
		Object = 1,
		[Token(Token = "0x4001A57")]
		Children = 2,
		[Token(Token = "0x4001A58")]
		Parents = 4,
		[Token(Token = "0x4001A59")]
		Scene = 8,
		[Token(Token = "0x4001A5A")]
		All = 65535
	}
	[Token(Token = "0x2000483")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB46938", Offset = "0xB46938")]
	public class AutoFindAttribute : Attribute
	{
		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly AutoFindLocations searchLocations;

		[Token(Token = "0x600229B")]
		[Address(RVA = "0x1561A7C", Offset = "0x1561A7C", VA = "0x1561A7C")]
		public AutoFindAttribute(AutoFindLocations searchLocations = AutoFindLocations.All)
		{
		}
	}
	[Token(Token = "0x2000484")]
	public interface IPropertyConstrainer
	{
	}
	[Token(Token = "0x2000485")]
	public interface IPropertyDisabler
	{
	}
	[Token(Token = "0x2000486")]
	public interface IFullPropertyDrawer
	{
	}
	[Token(Token = "0x2000487")]
	public interface IAdditiveDrawer
	{
	}
	[Token(Token = "0x2000488")]
	public interface ISupportDragAndDrop
	{
	}
	[Token(Token = "0x2000489")]
	public interface IBeforeLabelAdditiveDrawer : IAdditiveDrawer
	{
	}
	[Token(Token = "0x200048A")]
	public interface IAfterLabelAdditiveDrawer : IAdditiveDrawer
	{
	}
	[Token(Token = "0x200048B")]
	public interface IBeforeFieldAdditiveDrawer : IAdditiveDrawer
	{
	}
	[Token(Token = "0x200048C")]
	public interface IAfterFieldAdditiveDrawer : IAdditiveDrawer
	{
	}
	[Token(Token = "0x200048D")]
	public abstract class CombinablePropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isInitialized;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FieldInfo _fieldInfo;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Object[] _targets;

		[Token(Token = "0x1700034B")]
		public FieldInfo fieldInfo
		{
			[Token(Token = "0x600229C")]
			[Address(RVA = "0x1561AA8", Offset = "0x1561AA8", VA = "0x1561AA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600229D")]
			[Address(RVA = "0x1561B28", Offset = "0x1561B28", VA = "0x1561B28")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		public UnityEngine.Object[] targets
		{
			[Token(Token = "0x600229E")]
			[Address(RVA = "0x1561B30", Offset = "0x1561B30", VA = "0x1561B30")]
			get
			{
				return null;
			}
			[Token(Token = "0x600229F")]
			[Address(RVA = "0x1561BB0", Offset = "0x1561BB0", VA = "0x1561BB0")]
			protected set
			{
			}
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0x1561BB8", Offset = "0x1561BB8", VA = "0x1561BB8")]
		protected CombinablePropertyAttribute()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class CurveBoundsAttribute : CombinablePropertyAttribute, IFullPropertyDrawer
	{
		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly UnityEngine.Rect bounds;

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0x1561BC0", Offset = "0x1561BC0", VA = "0x1561BC0")]
		public CurveBoundsAttribute(UnityEngine.Rect bounds)
		{
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x1561C0C", Offset = "0x1561C0C", VA = "0x1561C0C")]
		public CurveBoundsAttribute(float width, float height)
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class UnitCurveAttribute : CurveBoundsAttribute
	{
		[Token(Token = "0x60022A3")]
		[Address(RVA = "0x1562AF8", Offset = "0x1562AF8", VA = "0x1562AF8")]
		public UnitCurveAttribute()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public class DisableAttribute : CombinablePropertyAttribute, IPropertyDisabler
	{
		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x1561C70", Offset = "0x1561C70", VA = "0x1561C70")]
		public DisableAttribute()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public abstract class DisableIfBase : CombinablePropertyAttribute, IPropertyDisabler
	{
		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string[] propertyNames;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly object testValue;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly bool disableResult;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public readonly bool isAndOperation;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public readonly bool nullIsValid;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public readonly bool equalToComparison;

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0x1561D4C", Offset = "0x1561D4C", VA = "0x1561D4C")]
		public DisableIfBase(object isEqualTo, object isNotEqualTo, bool isAndOperation, bool nullIsValid, bool equalToComparison, params string[] propertyNames)
		{
		}
	}
	[Token(Token = "0x2000492")]
	public class DisableIf : DisableIfBase
	{
		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x1561C78", Offset = "0x1561C78", VA = "0x1561C78")]
		public DisableIf(string propertyName, [Optional] object isEqualTo, [Optional] object isNotEqualTo)
		{
		}
	}
	[Token(Token = "0x2000493")]
	public class DisableIfEqual : DisableIfBase
	{
		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x1562614", Offset = "0x1562614", VA = "0x1562614")]
		public DisableIfEqual(string propertyName, object To)
		{
		}
	}
	[Token(Token = "0x2000494")]
	public class DisableIfNotEqual : DisableIfBase
	{
		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x15626DC", Offset = "0x15626DC", VA = "0x15626DC")]
		public DisableIfNotEqual(string propertyName, object To)
		{
		}
	}
	[Token(Token = "0x2000495")]
	public class DisableIfAny : DisableIfBase
	{
		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x1562280", Offset = "0x1562280", VA = "0x1562280")]
		public DisableIfAny(string propertyName1, string propertyName2, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x1562380", Offset = "0x1562380", VA = "0x1562380")]
		public DisableIfAny(string propertyName1, string propertyName2, string propertyName3, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0x15624B4", Offset = "0x15624B4", VA = "0x15624B4")]
		public DisableIfAny(string propertyName1, string propertyName2, string propertyName3, string propertyName4, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}
	}
	[Token(Token = "0x2000496")]
	public class DisableIfAll : DisableIfBase
	{
		[Token(Token = "0x60022AC")]
		[Address(RVA = "0x1561EEC", Offset = "0x1561EEC", VA = "0x1561EEC")]
		public DisableIfAll(string propertyName1, string propertyName2, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x1561FEC", Offset = "0x1561FEC", VA = "0x1561FEC")]
		public DisableIfAll(string propertyName1, string propertyName2, string propertyName3, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x1562120", Offset = "0x1562120", VA = "0x1562120")]
		public DisableIfAll(string propertyName1, string propertyName2, string propertyName3, string propertyName4, [Optional] object areEqualTo, [Optional] object areNotEqualTo)
		{
		}
	}
	[Token(Token = "0x2000497")]
	public class EditTimeOnly : CombinablePropertyAttribute, IPropertyDisabler
	{
		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x15627A4", Offset = "0x15627A4", VA = "0x15627A4")]
		public EditTimeOnly()
		{
		}
	}
	[Token(Token = "0x2000498")]
	public class EnumFlags : CombinablePropertyAttribute, IFullPropertyDrawer
	{
		[Token(Token = "0x60022B0")]
		[Address(RVA = "0x15627AC", Offset = "0x15627AC", VA = "0x15627AC")]
		public EnumFlags()
		{
		}
	}
	[Token(Token = "0x2000499")]
	public class ImplementsInterfaceAttribute : CombinablePropertyAttribute, IPropertyConstrainer, IFullPropertyDrawer, ISupportDragAndDrop
	{
		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Type type;

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x15627B4", Offset = "0x15627B4", VA = "0x15627B4")]
		public ImplementsInterfaceAttribute(Type type)
		{
		}
	}
	[Token(Token = "0x200049A")]
	public class ImplementsTypeNameDropdownAttribute : CombinablePropertyAttribute, IFullPropertyDrawer
	{
		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Type _baseType;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<Type> _implementingTypes;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected GUIContent[] _typeOptions;

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x1562890", Offset = "0x1562890", VA = "0x1562890")]
		public ImplementsTypeNameDropdownAttribute(Type type)
		{
		}
	}
	[Token(Token = "0x200049B")]
	public class Incrementable : CombinablePropertyAttribute, IAfterFieldAdditiveDrawer, IAdditiveDrawer
	{
		[Token(Token = "0x4001A6A")]
		public const float BUTTON_WIDTH = 20f;

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x1562914", Offset = "0x1562914", VA = "0x1562914")]
		public Incrementable()
		{
		}
	}
	[Token(Token = "0x200049C")]
	public class InspectorNameAttribute : CombinablePropertyAttribute, IFullPropertyDrawer
	{
		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string name;

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x156291C", Offset = "0x156291C", VA = "0x156291C")]
		public InspectorNameAttribute(string name)
		{
		}
	}
	[Token(Token = "0x200049D")]
	public class MaxValue : CombinablePropertyAttribute, IPropertyConstrainer
	{
		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxValue;

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0x1562948", Offset = "0x1562948", VA = "0x1562948")]
		public MaxValue(float maxValue)
		{
		}
	}
	[Token(Token = "0x200049E")]
	public class MinMax : CombinablePropertyAttribute, IFullPropertyDrawer
	{
		[Token(Token = "0x4001A6D")]
		public const float PERCENT_NUM = 0.2f;

		[Token(Token = "0x4001A6E")]
		public const float SPACING = 3f;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly float min;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly float max;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly bool isInt;

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x156297C", Offset = "0x156297C", VA = "0x156297C")]
		public MinMax(float min, float max)
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x15629B8", Offset = "0x15629B8", VA = "0x15629B8")]
		public MinMax(int min, int max)
		{
		}
	}
	[Token(Token = "0x200049F")]
	public class MinValue : CombinablePropertyAttribute, IPropertyConstrainer
	{
		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minValue;

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0x1562A00", Offset = "0x1562A00", VA = "0x1562A00")]
		public MinValue(float minValue)
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public class OnEditorChangeAttribute : CombinablePropertyAttribute
	{
		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string methodName;

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0x1562A34", Offset = "0x1562A34", VA = "0x1562A34")]
		public OnEditorChangeAttribute(string methodName)
		{
		}
	}
	[Token(Token = "0x20004A1")]
	public class QuickButtonAttribute : CombinablePropertyAttribute, IAfterFieldAdditiveDrawer, IAdditiveDrawer
	{
		[Token(Token = "0x4001A74")]
		public const float PADDING_RIGHT = 12f;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string label;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string methodOnPress;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string tooltip;

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x1562A60", Offset = "0x1562A60", VA = "0x1562A60")]
		public QuickButtonAttribute(string buttonLabel, string methodOnPress, string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20004A2")]
	public class RunTimeOnlyAttribute : CombinablePropertyAttribute, IPropertyDisabler
	{
		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x1562AF0", Offset = "0x1562AF0", VA = "0x1562AF0")]
		public RunTimeOnlyAttribute()
		{
		}
	}
	[Token(Token = "0x20004A3")]
	public class UnitsAttribute : CombinablePropertyAttribute, IAfterFieldAdditiveDrawer, IAdditiveDrawer
	{
		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string unitsName;

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x1562B58", Offset = "0x1562B58", VA = "0x1562B58")]
		public UnitsAttribute(string unitsName)
		{
		}
	}
}
namespace Leap.Unity.Attachments
{
	[Token(Token = "0x20004A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46948", Offset = "0xB46948")]
	[ExecuteInEditMode]
	public class AttachmentHand : MonoBehaviour
	{
		[Token(Token = "0x20006A4")]
		public struct AttachmentPointsEnumerator
		{
			[Token(Token = "0x40022DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int _curIdx;

			[Token(Token = "0x40022DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private AttachmentHand _hand;

			[Token(Token = "0x40022E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _flagsCount;

			[Token(Token = "0x17000466")]
			public AttachmentPointBehaviour Current
			{
				[Token(Token = "0x6002A42")]
				[Address(RVA = "0x155C4D8", Offset = "0x155C4D8", VA = "0x155C4D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A40")]
			[Address(RVA = "0x155C4C4", Offset = "0x155C4C4", VA = "0x155C4C4")]
			public AttachmentPointsEnumerator GetEnumerator()
			{
				return default(AttachmentPointsEnumerator);
			}

			[Token(Token = "0x6002A41")]
			[Address(RVA = "0x155AF24", Offset = "0x155AF24", VA = "0x155AF24")]
			public AttachmentPointsEnumerator(AttachmentHand hand)
			{
			}

			[Token(Token = "0x6002A43")]
			[Address(RVA = "0x155C5A0", Offset = "0x155C5A0", VA = "0x155C5A0")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20006A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47AFC", Offset = "0xB47AFC")]
		private sealed class <>c__DisplayClass43_0
		{
			[Token(Token = "0x40022E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AttachmentPointFlags singlePoint;

			[Token(Token = "0x6002A44")]
			[Address(RVA = "0x155C408", Offset = "0x155C408", VA = "0x155C408")]
			public <>c__DisplayClass43_0()
			{
			}

			[Token(Token = "0x6002A45")]
			[Address(RVA = "0x155D06C", Offset = "0x155D06C", VA = "0x155D06C")]
			internal bool <ensureTransformExists>b__0(AttachmentPointBehaviour p)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20006A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B0C", Offset = "0xB47B0C")]
		private sealed class <>c
		{
			[Token(Token = "0x40022E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40022E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Transform, bool> <>9__49_0;

			[Token(Token = "0x40022E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<MonoBehaviour, bool> <>9__51_0;

			[Token(Token = "0x40022E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action <>9__54_0;

			[Token(Token = "0x6002A47")]
			[Address(RVA = "0x155CF88", Offset = "0x155CF88", VA = "0x155CF88")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A48")]
			[Address(RVA = "0x155CF90", Offset = "0x155CF90", VA = "0x155CF90")]
			internal bool <tryStackTransformHierarchy>b__49_0(Transform t)
			{
				return default(bool);
			}

			[Token(Token = "0x6002A49")]
			[Address(RVA = "0x155CFFC", Offset = "0x155CFFC", VA = "0x155CFFC")]
			internal bool <tryStackTransformHierarchy>b__51_0(MonoBehaviour b)
			{
				return default(bool);
			}

			[Token(Token = "0x6002A4A")]
			[Address(RVA = "0x155D068", Offset = "0x155D068", VA = "0x155D068")]
			internal void <.ctor>b__54_0()
			{
			}
		}

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnAttachmentPointsModified;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public AttachmentPointBehaviour wrist;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public AttachmentPointBehaviour palm;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public AttachmentPointBehaviour thumbProximalJoint;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public AttachmentPointBehaviour thumbDistalJoint;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AttachmentPointBehaviour thumbTip;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public AttachmentPointBehaviour indexKnuckle;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public AttachmentPointBehaviour indexMiddleJoint;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public AttachmentPointBehaviour indexDistalJoint;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public AttachmentPointBehaviour indexTip;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public AttachmentPointBehaviour middleKnuckle;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public AttachmentPointBehaviour middleMiddleJoint;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public AttachmentPointBehaviour middleDistalJoint;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public AttachmentPointBehaviour middleTip;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public AttachmentPointBehaviour ringKnuckle;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public AttachmentPointBehaviour ringMiddleJoint;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public AttachmentPointBehaviour ringDistalJoint;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public AttachmentPointBehaviour ringTip;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public AttachmentPointBehaviour pinkyKnuckle;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public AttachmentPointBehaviour pinkyMiddleJoint;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public AttachmentPointBehaviour pinkyDistalJoint;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public AttachmentPointBehaviour pinkyTip;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool _attachmentPointsDirty;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[Disable]
		private Chirality _chirality;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[Disable]
		private bool _isTracked;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool _isBeingDestroyed;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AttachmentPointFlags[] _attachmentPointFlagConstants;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform[] s_hierarchyTransformsBuffer;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform[] s_transformsBuffer;

		[Token(Token = "0x1700034D")]
		public AttachmentPointsEnumerator points
		{
			[Token(Token = "0x60022BD")]
			[Address(RVA = "0x155AF10", Offset = "0x155AF10", VA = "0x155AF10")]
			get
			{
				return default(AttachmentPointsEnumerator);
			}
		}

		[Token(Token = "0x1700034E")]
		public Chirality chirality
		{
			[Token(Token = "0x60022BE")]
			[Address(RVA = "0x155AFE4", Offset = "0x155AFE4", VA = "0x155AFE4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60022BF")]
			[Address(RVA = "0x155AFEC", Offset = "0x155AFEC", VA = "0x155AFEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public bool isTracked
		{
			[Token(Token = "0x60022C0")]
			[Address(RVA = "0x155AFF4", Offset = "0x155AFF4", VA = "0x155AFF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60022C1")]
			[Address(RVA = "0x155AFFC", Offset = "0x155AFFC", VA = "0x155AFFC")]
			set
			{
			}
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x155B008", Offset = "0x155B008", VA = "0x155B008")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x155B324", Offset = "0x155B324", VA = "0x155B324")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x155B328", Offset = "0x155B328", VA = "0x155B328")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x155B334", Offset = "0x155B334", VA = "0x155B334")]
		public AttachmentPointBehaviour GetBehaviourForPoint(AttachmentPointFlags singlePoint)
		{
			return null;
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x155B4C4", Offset = "0x155B4C4", VA = "0x155B4C4")]
		public void refreshAttachmentTransforms(AttachmentPointFlags points)
		{
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x155C274", Offset = "0x155C274", VA = "0x155C274")]
		public void notifyPointBehaviourDeleted(AttachmentPointBehaviour point)
		{
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x155B00C", Offset = "0x155B00C", VA = "0x155B00C")]
		private void initializeAttachmentPointFlagConstants()
		{
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0x155C278", Offset = "0x155C278", VA = "0x155C278")]
		private void setBehaviourForPoint(AttachmentPointFlags singlePoint, AttachmentPointBehaviour behaviour)
		{
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0x155B7C4", Offset = "0x155B7C4", VA = "0x155B7C4")]
		private void ensureTransformExists(AttachmentPointFlags singlePoint)
		{
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0x155C4AC", Offset = "0x155C4AC", VA = "0x155C4AC")]
		private static void SetTransformParent(Transform t, Transform parent)
		{
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x155BAC4", Offset = "0x155BAC4", VA = "0x155BAC4")]
		private void ensureTransformDoesNotExist(AttachmentPointFlags singlePoint)
		{
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0x155B6CC", Offset = "0x155B6CC", VA = "0x155B6CC")]
		private void flattenAttachmentTransformHierarchy()
		{
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x155BBDC", Offset = "0x155BBDC", VA = "0x155BBDC")]
		private void organizeAttachmentTransforms()
		{
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x155C9E0", Offset = "0x155C9E0", VA = "0x155C9E0")]
		private Transform tryStackTransformHierarchy(params Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x155C694", Offset = "0x155C694", VA = "0x155C694")]
		private Transform tryStackTransformHierarchy(params MonoBehaviour[] monoBehaviours)
		{
			return null;
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x155CDB4", Offset = "0x155CDB4", VA = "0x155CDB4")]
		private static AttachmentPointFlags GetFlagFromFlagIdx(int pointIdx)
		{
			return default(AttachmentPointFlags);
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x155CDC4", Offset = "0x155CDC4", VA = "0x155CDC4")]
		public AttachmentHand()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class AttachmentHandEnableDisable : MonoBehaviour
	{
		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AttachmentHand attachmentHand;

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0x155D090", Offset = "0x155D090", VA = "0x155D090")]
		private void Update()
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x155D148", Offset = "0x155D148", VA = "0x155D148")]
		public AttachmentHandEnableDisable()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	[ExecuteInEditMode]
	public class AttachmentHands : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20006A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B1C", Offset = "0xB47B1C")]
		private sealed class <>c
		{
			[Token(Token = "0x40022E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40022E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Hand> <>9__15_0;

			[Token(Token = "0x40022E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Hand> <>9__15_1;

			[Token(Token = "0x6002A4C")]
			[Address(RVA = "0x155E054", Offset = "0x155E054", VA = "0x155E054")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0x155E05C", Offset = "0x155E05C", VA = "0x155E05C")]
			internal Hand <refreshHandAccessors>b__15_0()
			{
				return null;
			}

			[Token(Token = "0x6002A4E")]
			[Address(RVA = "0x155E0BC", Offset = "0x155E0BC", VA = "0x155E0BC")]
			internal Hand <refreshHandAccessors>b__15_1()
			{
				return null;
			}
		}

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AttachmentPointFlags _attachmentPoints;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Func<Hand>[] _handAccessors;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AttachmentHand[] _attachmentHands;

		[Token(Token = "0x17000350")]
		public AttachmentPointFlags attachmentPoints
		{
			[Token(Token = "0x60022D6")]
			[Address(RVA = "0x155D150", Offset = "0x155D150", VA = "0x155D150")]
			get
			{
				return default(AttachmentPointFlags);
			}
			[Token(Token = "0x60022D7")]
			[Address(RVA = "0x155D158", Offset = "0x155D158", VA = "0x155D158")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public Func<Hand>[] handAccessors
		{
			[Token(Token = "0x60022D8")]
			[Address(RVA = "0x155D294", Offset = "0x155D294", VA = "0x155D294")]
			get
			{
				return null;
			}
			[Token(Token = "0x60022D9")]
			[Address(RVA = "0x155D29C", Offset = "0x155D29C", VA = "0x155D29C")]
			set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public AttachmentHand[] attachmentHands
		{
			[Token(Token = "0x60022DA")]
			[Address(RVA = "0x155D2A4", Offset = "0x155D2A4", VA = "0x155D2A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60022DB")]
			[Address(RVA = "0x155D2AC", Offset = "0x155D2AC", VA = "0x155D2AC")]
			set
			{
			}
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0x155D2B4", Offset = "0x155D2B4", VA = "0x155D2B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0x155D2B8", Offset = "0x155D2B8", VA = "0x155D2B8")]
		private void reinitialize()
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0x155DB7C", Offset = "0x155DB7C", VA = "0x155DB7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0x155D2E4", Offset = "0x155D2E4", VA = "0x155D2E4")]
		private void refreshHandAccessors()
		{
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0x155D4EC", Offset = "0x155D4EC", VA = "0x155D4EC")]
		private void refreshAttachmentHands()
		{
		}

		[Token(Token = "0x60022E1")]
		[Address(RVA = "0x155D170", Offset = "0x155D170", VA = "0x155D170")]
		private void refreshAttachmentHandTransforms()
		{
		}

		[Token(Token = "0x60022E2")]
		[Address(RVA = "0x155DFE0", Offset = "0x155DFE0", VA = "0x155DFE0")]
		public AttachmentHands()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB469A4", Offset = "0xB469A4")]
	[ExecuteInEditMode]
	public class AttachmentPointBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55C54", Offset = "0xB55C54")]
		[Disable]
		public AttachmentHand attachmentHand;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55CA0", Offset = "0xB55CA0")]
		[Disable]
		public AttachmentPointFlags attachmentPoint;

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0x155E11C", Offset = "0x155E11C", VA = "0x155E11C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0x155E1C0", Offset = "0x155E1C0", VA = "0x155E1C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0x155C424", Offset = "0x155C424", VA = "0x155C424")]
		public static implicit operator AttachmentPointFlags(AttachmentPointBehaviour p)
		{
			return default(AttachmentPointFlags);
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0x155DEC4", Offset = "0x155DEC4", VA = "0x155DEC4")]
		public void SetTransformUsingHand(Hand hand)
		{
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0x155E244", Offset = "0x155E244", VA = "0x155E244")]
		public static void GetLeapHandPointData(Hand hand, AttachmentPointFlags singlePoint, out Vector3 position, out Quaternion rotation)
		{
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0x155EE98", Offset = "0x155EE98", VA = "0x155EE98")]
		public AttachmentPointBehaviour()
		{
		}
	}
	[Token(Token = "0x20004A8")]
	[Flags]
	public enum AttachmentPointFlags
	{
		[Token(Token = "0x4001A9D")]
		None = 0,
		[Token(Token = "0x4001A9E")]
		Wrist = 2,
		[Token(Token = "0x4001A9F")]
		Palm = 4,
		[Token(Token = "0x4001AA0")]
		ThumbProximalJoint = 8,
		[Token(Token = "0x4001AA1")]
		ThumbDistalJoint = 0x10,
		[Token(Token = "0x4001AA2")]
		ThumbTip = 0x20,
		[Token(Token = "0x4001AA3")]
		IndexKnuckle = 0x40,
		[Token(Token = "0x4001AA4")]
		IndexMiddleJoint = 0x80,
		[Token(Token = "0x4001AA5")]
		IndexDistalJoint = 0x100,
		[Token(Token = "0x4001AA6")]
		IndexTip = 0x200,
		[Token(Token = "0x4001AA7")]
		MiddleKnuckle = 0x400,
		[Token(Token = "0x4001AA8")]
		MiddleMiddleJoint = 0x800,
		[Token(Token = "0x4001AA9")]
		MiddleDistalJoint = 0x1000,
		[Token(Token = "0x4001AAA")]
		MiddleTip = 0x2000,
		[Token(Token = "0x4001AAB")]
		RingKnuckle = 0x4000,
		[Token(Token = "0x4001AAC")]
		RingMiddleJoint = 0x8000,
		[Token(Token = "0x4001AAD")]
		RingDistalJoint = 0x10000,
		[Token(Token = "0x4001AAE")]
		RingTip = 0x20000,
		[Token(Token = "0x4001AAF")]
		PinkyKnuckle = 0x40000,
		[Token(Token = "0x4001AB0")]
		PinkyMiddleJoint = 0x80000,
		[Token(Token = "0x4001AB1")]
		PinkyDistalJoint = 0x100000,
		[Token(Token = "0x4001AB2")]
		PinkyTip = 0x200000
	}
	[Token(Token = "0x20004A9")]
	public static class AttachmentPointFlagsExtensions
	{
		[Token(Token = "0x60022E9")]
		[Address(RVA = "0x155C410", Offset = "0x155C410", VA = "0x155C410")]
		public static bool IsSinglePoint(this AttachmentPointFlags points)
		{
			return default(bool);
		}

		[Token(Token = "0x60022EA")]
		[Address(RVA = "0x155EEA0", Offset = "0x155EEA0", VA = "0x155EEA0")]
		public static bool ContainsPoint(this AttachmentPointFlags points, AttachmentPointFlags singlePoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60022EB")]
		[Address(RVA = "0x155B6B0", Offset = "0x155B6B0", VA = "0x155B6B0")]
		public static bool Contains(this AttachmentPointFlags points, AttachmentPointFlags otherPoints)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004AA")]
	public class AttachmentController : MonoBehaviour
	{
		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isActive;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55CEC", Offset = "0xB55CEC")]
		public bool DeactivateOnDisable;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55D24", Offset = "0xB55D24")]
		public ITransition Transition;

		[Token(Token = "0x17000353")]
		public bool IsActive
		{
			[Token(Token = "0x60022EC")]
			[Address(RVA = "0x155A9C4", Offset = "0x155A9C4", VA = "0x155A9C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60022ED")]
			[Address(RVA = "0x155A9CC", Offset = "0x155A9CC", VA = "0x155A9CC")]
			set
			{
			}
		}

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0x155A9D8", Offset = "0x155A9D8", VA = "0x155A9D8", Slot = "4")]
		public virtual void Activate(bool doTransition = true)
		{
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0x155AAF4", Offset = "0x155AAF4", VA = "0x155AAF4", Slot = "5")]
		public virtual void Deactivate(bool doTransition = true)
		{
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0x155ABFC", Offset = "0x155ABFC", VA = "0x155ABFC", Slot = "6")]
		protected virtual void FinishInTransition()
		{
		}

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0x155ACE4", Offset = "0x155ACE4", VA = "0x155ACE4", Slot = "7")]
		protected virtual void FinishOutTransition()
		{
		}

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0x155ADCC", Offset = "0x155ADCC", VA = "0x155ADCC", Slot = "8")]
		protected virtual void ChangeChildState()
		{
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0x155AEE4", Offset = "0x155AEE4", VA = "0x155AEE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0x155AF00", Offset = "0x155AF00", VA = "0x155AF00")]
		public AttachmentController()
		{
		}
	}
	[Token(Token = "0x20004AB")]
	public class CameraFollower : MonoBehaviour
	{
		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55D5C", Offset = "0xB55D5C")]
		public Vector3 objectForward;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55D94", Offset = "0xB55D94")]
		public AnimationCurve Ease;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55DCC", Offset = "0xB55DCC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB55DCC", Offset = "0xB55DCC")]
		public float Speed;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55E20", Offset = "0xB55E20")]
		public bool FreezeX;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55E58", Offset = "0xB55E58")]
		public bool FreezeY;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55E90", Offset = "0xB55E90")]
		public bool FreezeZ;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion offset;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion startingLocalRotation;

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0x155EEBC", Offset = "0x155EEBC", VA = "0x155EEBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x155EF7C", Offset = "0x155EF7C", VA = "0x155EF7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0x155F238", Offset = "0x155F238", VA = "0x155F238")]
		public CameraFollower()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	public class HandAttachments : HandModelBase, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55EC8", Offset = "0xB55EC8")]
		public Transform Palm;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55F00", Offset = "0xB55F00")]
		public Transform Arm;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55F38", Offset = "0xB55F38")]
		public Transform Thumb;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55F70", Offset = "0xB55F70")]
		public Transform PinchPoint;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55FA8", Offset = "0xB55FA8")]
		public Transform Index;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB55FE0", Offset = "0xB55FE0")]
		public Transform Middle;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56018", Offset = "0xB56018")]
		public Transform Ring;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56050", Offset = "0xB56050")]
		public Transform Pinky;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56088", Offset = "0xB56088")]
		public Transform GrabPoint;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Hand _hand;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB560C0", Offset = "0xB560C0")]
		[SerializeField]
		private Chirality _handedness;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5610C", Offset = "0xB5610C")]
		public bool DrawHand;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Color[] colors;

		[Token(Token = "0x17000354")]
		public override ModelType HandModelType
		{
			[Token(Token = "0x60022F8")]
			[Address(RVA = "0x155F2D4", Offset = "0x155F2D4", VA = "0x155F2D4", Slot = "6")]
			get
			{
				return default(ModelType);
			}
		}

		[Token(Token = "0x17000355")]
		public override Chirality Handedness
		{
			[Token(Token = "0x60022F9")]
			[Address(RVA = "0x155F2DC", Offset = "0x155F2DC", VA = "0x155F2DC", Slot = "4")]
			get
			{
				return default(Chirality);
			}
			[Token(Token = "0x60022FA")]
			[Address(RVA = "0x155F2E4", Offset = "0x155F2E4", VA = "0x155F2E4", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0x155F2E8", Offset = "0x155F2E8", VA = "0x155F2E8", Slot = "12")]
		public override void SetLeapHand(Hand hand)
		{
		}

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x155F2F0", Offset = "0x155F2F0", VA = "0x155F2F0", Slot = "11")]
		public override Hand GetLeapHand()
		{
			return null;
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0x155F2F8", Offset = "0x155F2F8", VA = "0x155F2F8", Slot = "9")]
		public override void UpdateHand()
		{
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0x155FF9C", Offset = "0x155FF9C", VA = "0x155FF9C", Slot = "13")]
		public override bool SupportsEditorPersistence()
		{
			return default(bool);
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0x155FFA4", Offset = "0x155FFA4", VA = "0x155FFA4", Slot = "14")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer gizmoDrawer)
		{
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0x15604E0", Offset = "0x15604E0", VA = "0x15604E0")]
		public void DrawBasis(RuntimeGizmoDrawer gizmoDrawer, Vector3 origin, LeapTransform basis, float scale)
		{
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0x15606F4", Offset = "0x15606F4", VA = "0x15606F4")]
		public HandAttachments()
		{
		}
	}
	[Token(Token = "0x20004AD")]
	public abstract class ITransition : MonoBehaviour
	{
		[Token(Token = "0x17000356")]
		public abstract UnityEvent OnStart
		{
			[Token(Token = "0x6002304")]
			get;
			[Token(Token = "0x6002305")]
			set;
		}

		[Token(Token = "0x17000357")]
		public abstract AnimationStepEvent OnAnimationStep
		{
			[Token(Token = "0x6002306")]
			get;
			[Token(Token = "0x6002307")]
			set;
		}

		[Token(Token = "0x17000358")]
		public abstract UnityEvent OnComplete
		{
			[Token(Token = "0x6002308")]
			get;
			[Token(Token = "0x6002309")]
			set;
		}

		[Token(Token = "0x6002302")]
		public abstract void TransitionIn();

		[Token(Token = "0x6002303")]
		public abstract void TransitionOut();

		[Token(Token = "0x600230A")]
		[Address(RVA = "0x15607D8", Offset = "0x15607D8", VA = "0x15607D8")]
		protected ITransition()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004AE")]
	public class AnimationStepEvent : UnityEvent<float>
	{
		[Token(Token = "0x600230B")]
		[Address(RVA = "0x155A974", Offset = "0x155A974", VA = "0x155A974")]
		public AnimationStepEvent()
		{
		}
	}
	[Token(Token = "0x20004AF")]
	[ExecuteInEditMode]
	public class Transition : ITransition
	{
		[Token(Token = "0x20006A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B2C", Offset = "0xB47B2C")]
		private sealed class <doTransitionIn>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transition <>4__this;

			[Token(Token = "0x40022EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <start>5__2;

			[Token(Token = "0x17000467")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A52")]
				[Address(RVA = "0x1561874", Offset = "0x1561874", VA = "0x1561874", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000468")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A54")]
				[Address(RVA = "0x15618DC", Offset = "0x15618DC", VA = "0x15618DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0x1560BB8", Offset = "0x1560BB8", VA = "0x1560BB8")]
			[DebuggerHidden]
			public <doTransitionIn>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6002A50")]
			[Address(RVA = "0x1561738", Offset = "0x1561738", VA = "0x1561738", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A51")]
			[Address(RVA = "0x156173C", Offset = "0x156173C", VA = "0x156173C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A53")]
			[Address(RVA = "0x156187C", Offset = "0x156187C", VA = "0x156187C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006A9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B3C", Offset = "0xB47B3C")]
		private sealed class <doTransitionOut>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transition <>4__this;

			[Token(Token = "0x40022F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <start>5__2;

			[Token(Token = "0x17000469")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A58")]
				[Address(RVA = "0x1561A0C", Offset = "0x1561A0C", VA = "0x1561A0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A5A")]
				[Address(RVA = "0x1561A74", Offset = "0x1561A74", VA = "0x1561A74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A55")]
			[Address(RVA = "0x1560BE4", Offset = "0x1560BE4", VA = "0x1560BE4")]
			[DebuggerHidden]
			public <doTransitionOut>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6002A56")]
			[Address(RVA = "0x15618E4", Offset = "0x15618E4", VA = "0x15618E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A57")]
			[Address(RVA = "0x15618E8", Offset = "0x15618E8", VA = "0x15618E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A59")]
			[Address(RVA = "0x1561A14", Offset = "0x1561A14", VA = "0x1561A14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform RootTransform;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56144", Offset = "0xB56144")]
		public bool AnimatePosition;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5617C", Offset = "0xB5617C")]
		public Vector3 OnPosition;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB561B4", Offset = "0xB561B4")]
		public Vector3 OffPosition;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB561EC", Offset = "0xB561EC")]
		public AnimationCurve PositionCurve;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56224", Offset = "0xB56224")]
		public bool AnimateRotation;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5625C", Offset = "0xB5625C")]
		public Vector3 OnRotation;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56294", Offset = "0xB56294")]
		public Vector3 OffRotation;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB562CC", Offset = "0xB562CC")]
		public AnimationCurve RotationCurve;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56304", Offset = "0xB56304")]
		public bool AnimateScale;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5633C", Offset = "0xB5633C")]
		public Vector3 OnScale;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56374", Offset = "0xB56374")]
		public Vector3 OffScale;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB563AC", Offset = "0xB563AC")]
		public AnimationCurve ScaleCurve;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB563E4", Offset = "0xB563E4")]
		public bool AnimateColor;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5641C", Offset = "0xB5641C")]
		public string ColorShaderPropertyName;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56454", Offset = "0xB56454")]
		public Color TransitionColor;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5648C", Offset = "0xB5648C")]
		public AnimationCurve ColorCurve;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB564C4", Offset = "0xB564C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB564C4", Offset = "0xB564C4")]
		public float Duration;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5651C", Offset = "0xB5651C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB5651C", Offset = "0xB5651C")]
		public float Simulate;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float progress;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MaterialPropertyBlock materialProperties;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56570", Offset = "0xB56570")]
		[SerializeField]
		private UnityEvent _onStart;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB565BC", Offset = "0xB565BC")]
		[SerializeField]
		private AnimationStepEvent _onAnimationStep;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56608", Offset = "0xB56608")]
		[SerializeField]
		private UnityEvent _onComplete;

		[Token(Token = "0x17000359")]
		public Quaternion OffRotationQuaternion
		{
			[Token(Token = "0x600230C")]
			[Address(RVA = "0x15607E0", Offset = "0x15607E0", VA = "0x15607E0")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700035A")]
		public Quaternion OnRotationQuaternion
		{
			[Token(Token = "0x600230D")]
			[Address(RVA = "0x1560868", Offset = "0x1560868", VA = "0x1560868")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700035B")]
		public override UnityEvent OnStart
		{
			[Token(Token = "0x600230E")]
			[Address(RVA = "0x15608F0", Offset = "0x15608F0", VA = "0x15608F0", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x600230F")]
			[Address(RVA = "0x15608F8", Offset = "0x15608F8", VA = "0x15608F8", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700035C")]
		public override AnimationStepEvent OnAnimationStep
		{
			[Token(Token = "0x6002310")]
			[Address(RVA = "0x1560900", Offset = "0x1560900", VA = "0x1560900", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002311")]
			[Address(RVA = "0x1560908", Offset = "0x1560908", VA = "0x1560908", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public override UnityEvent OnComplete
		{
			[Token(Token = "0x6002312")]
			[Address(RVA = "0x1560910", Offset = "0x1560910", VA = "0x1560910", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002313")]
			[Address(RVA = "0x1560918", Offset = "0x1560918", VA = "0x1560918", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002314")]
		[Address(RVA = "0x1560920", Offset = "0x1560920", VA = "0x1560920")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002315")]
		[Address(RVA = "0x15609D8", Offset = "0x15609D8", VA = "0x15609D8", Slot = "4")]
		public override void TransitionIn()
		{
		}

		[Token(Token = "0x6002316")]
		[Address(RVA = "0x1560AC8", Offset = "0x1560AC8", VA = "0x1560AC8", Slot = "5")]
		public override void TransitionOut()
		{
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0x1560A58", Offset = "0x1560A58", VA = "0x1560A58")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB6139C", Offset = "0xB6139C")]
		protected IEnumerator doTransitionIn()
		{
			return null;
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0x1560B48", Offset = "0x1560B48", VA = "0x1560B48")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB61400", Offset = "0xB61400")]
		protected IEnumerator doTransitionOut()
		{
			return null;
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x1560C10", Offset = "0x1560C10", VA = "0x1560C10", Slot = "12")]
		protected virtual void updateTransition(float interpolationPoint)
		{
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0x1560CC4", Offset = "0x1560CC4", VA = "0x1560CC4", Slot = "13")]
		protected virtual void doAnimatePosition(float interpolationPoint)
		{
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0x1560DB8", Offset = "0x1560DB8", VA = "0x1560DB8", Slot = "14")]
		protected virtual void doAnimateRotation(float interpolationPoint)
		{
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0x1560EDC", Offset = "0x1560EDC", VA = "0x1560EDC", Slot = "15")]
		protected virtual void doAnimateScale(float interpolationPoint)
		{
		}

		[Token(Token = "0x600231D")]
		[Address(RVA = "0x1560FD0", Offset = "0x1560FD0", VA = "0x1560FD0", Slot = "16")]
		protected virtual void doAnimateColor(float interpolationPoint)
		{
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0x15611B4", Offset = "0x15611B4", VA = "0x15611B4")]
		public Transition()
		{
		}
	}
}
namespace Leap.Unity.Animation
{
	[Serializable]
	[Token(Token = "0x20004B0")]
	public struct HermiteSpline
	{
		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float t0;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float t1;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float pos0;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pos1;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float vel0;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float vel1;

		[Token(Token = "0x600231F")]
		[Address(RVA = "0x1372094", Offset = "0x1372094", VA = "0x1372094")]
		public HermiteSpline(float pos0, float pos1)
		{
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0x13720AC", Offset = "0x13720AC", VA = "0x13720AC")]
		public HermiteSpline(float pos0, float pos1, float vel0, float vel1)
		{
		}

		[Token(Token = "0x6002321")]
		[Address(RVA = "0x13720C4", Offset = "0x13720C4", VA = "0x13720C4")]
		public HermiteSpline(float pos0, float pos1, float vel0, float vel1, float length)
		{
		}

		[Token(Token = "0x6002322")]
		[Address(RVA = "0x13720D8", Offset = "0x13720D8", VA = "0x13720D8")]
		public HermiteSpline(float t0, float t1, float pos0, float pos1, float vel0, float vel1)
		{
		}

		[Token(Token = "0x6002323")]
		[Address(RVA = "0x13720E8", Offset = "0x13720E8", VA = "0x13720E8")]
		public float PositionAt(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6002324")]
		[Address(RVA = "0x13721DC", Offset = "0x13721DC", VA = "0x13721DC")]
		public float VelocityAt(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6002325")]
		[Address(RVA = "0x13722D8", Offset = "0x13722D8", VA = "0x13722D8")]
		public void PositionAndVelAt(float t, out float position, out float velocity)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004B1")]
	public struct HermiteSpline2
	{
		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float t0;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float t1;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 pos0;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 pos1;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 vel0;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 vel1;

		[Token(Token = "0x6002326")]
		[Address(RVA = "0x1372440", Offset = "0x1372440", VA = "0x1372440")]
		public HermiteSpline2(Vector2 pos0, Vector2 pos1)
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0x137245C", Offset = "0x137245C", VA = "0x137245C")]
		public HermiteSpline2(Vector2 pos0, Vector2 pos1, Vector2 vel0, Vector2 vel1)
		{
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0x137247C", Offset = "0x137247C", VA = "0x137247C")]
		public HermiteSpline2(Vector2 pos0, Vector2 pos1, Vector2 vel0, Vector2 vel1, float length)
		{
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0x137249C", Offset = "0x137249C", VA = "0x137249C")]
		public HermiteSpline2(float t0, float t1, Vector2 pos0, Vector2 pos1, Vector2 vel0, Vector2 vel1)
		{
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x13724B8", Offset = "0x13724B8", VA = "0x13724B8")]
		public Vector2 PositionAt(float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x1372650", Offset = "0x1372650", VA = "0x1372650")]
		public Vector2 VelocityAt(float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x13727EC", Offset = "0x13727EC", VA = "0x13727EC")]
		public void PositionAndVelAt(float t, out Vector2 position, out Vector2 velocity)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004B2")]
	public struct HermiteSpline3
	{
		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float t0;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float t1;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 pos0;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 pos1;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 vel0;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 vel1;

		[Token(Token = "0x600232D")]
		[Address(RVA = "0x1372A5C", Offset = "0x1372A5C", VA = "0x1372A5C")]
		public HermiteSpline3(Vector3 pos0, Vector3 pos1)
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0x1372A80", Offset = "0x1372A80", VA = "0x1372A80")]
		public HermiteSpline3(Vector3 pos0, Vector3 pos1, Vector3 vel0, Vector3 vel1)
		{
		}

		[Token(Token = "0x600232F")]
		[Address(RVA = "0x1372ABC", Offset = "0x1372ABC", VA = "0x1372ABC")]
		public HermiteSpline3(Vector3 pos0, Vector3 pos1, Vector3 vel0, Vector3 vel1, float length)
		{
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0x1372AF8", Offset = "0x1372AF8", VA = "0x1372AF8")]
		public HermiteSpline3(float t0, float t1, Vector3 pos0, Vector3 pos1, Vector3 vel0, Vector3 vel1)
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0x1372B2C", Offset = "0x1372B2C", VA = "0x1372B2C")]
		public Vector3 PositionAt(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002332")]
		[Address(RVA = "0x1372D78", Offset = "0x1372D78", VA = "0x1372D78")]
		public Vector3 VelocityAt(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0x1372F40", Offset = "0x1372F40", VA = "0x1372F40")]
		public void PositionAndVelAt(float t, out Vector3 position, out Vector3 velocity)
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public static class Ease
	{
		[Token(Token = "0x20006AA")]
		public static class Quadratic
		{
			[Token(Token = "0x6002A5B")]
			[Address(RVA = "0x1371C10", Offset = "0x1371C10", VA = "0x1371C10")]
			public static float InOut(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x20006AB")]
		public static class Cubic
		{
			[Token(Token = "0x6002A5C")]
			[Address(RVA = "0x1371BCC", Offset = "0x1371BCC", VA = "0x1371BCC")]
			public static float InOut(float t)
			{
				return default(float);
			}
		}

		[Token(Token = "0x20006AC")]
		public static class Quartic
		{
			[Token(Token = "0x6002A5D")]
			[Address(RVA = "0x1371C50", Offset = "0x1371C50", VA = "0x1371C50")]
			public static float InOut(float t)
			{
				return default(float);
			}
		}
	}
	[Token(Token = "0x20004B4")]
	public class TransformTweenBehaviour : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20006AD")]
		public class FloatEvent : UnityEvent<float>
		{
			[Token(Token = "0x6002A5E")]
			[Address(RVA = "0x137A348", Offset = "0x137A348", VA = "0x137A348")]
			public FloatEvent()
			{
			}
		}

		[Token(Token = "0x20006AE")]
		public enum EventType
		{
			[Token(Token = "0x40022F2")]
			OnLeaveStart = 110,
			[Token(Token = "0x40022F3")]
			OnReachEnd = 120,
			[Token(Token = "0x40022F4")]
			OnLeaveEnd = 130,
			[Token(Token = "0x40022F5")]
			OnReachStart = 140
		}

		[Token(Token = "0x20006AF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B4C", Offset = "0xB47B4C")]
		private sealed class <playAfterDelay>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40022F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40022F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40022F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x40022F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TransformTweenBehaviour <>4__this;

			[Token(Token = "0x40022FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Direction tweenDirection;

			[Token(Token = "0x1700046B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A62")]
				[Address(RVA = "0x137A2D8", Offset = "0x137A2D8", VA = "0x137A2D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A64")]
				[Address(RVA = "0x137A340", Offset = "0x137A340", VA = "0x137A340", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A5F")]
			[Address(RVA = "0x1379B14", Offset = "0x1379B14", VA = "0x1379B14")]
			[DebuggerHidden]
			public <playAfterDelay>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6002A60")]
			[Address(RVA = "0x137A208", Offset = "0x137A208", VA = "0x137A208", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A61")]
			[Address(RVA = "0x137A20C", Offset = "0x137A20C", VA = "0x137A20C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A63")]
			[Address(RVA = "0x137A2E0", Offset = "0x137A2E0", VA = "0x137A2E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B5C", Offset = "0xB47B5C")]
		private sealed class <>c__DisplayClass38_0
		{
			[Token(Token = "0x40022FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TransformTweenBehaviour <>4__this;

			[Token(Token = "0x40022FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public EventType type;

			[Token(Token = "0x6002A65")]
			[Address(RVA = "0x1379E48", Offset = "0x1379E48", VA = "0x1379E48")]
			public <>c__DisplayClass38_0()
			{
			}

			[Token(Token = "0x6002A66")]
			[Address(RVA = "0x137A1D8", Offset = "0x137A1D8", VA = "0x137A1D8")]
			internal void <setupCallback>b__0()
			{
			}
		}

		[Token(Token = "0x20006B1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B6C", Offset = "0xB47B6C")]
		private sealed class <>c__DisplayClass39_0<T>
		{
			[Token(Token = "0x40022FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TransformTweenBehaviour <>4__this;

			[Token(Token = "0x40022FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EventType type;

			[Token(Token = "0x6002A67")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6002A68")]
			internal void <setupCallback>b__0(T anchObj)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20006B2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B7C", Offset = "0xB47B7C")]
		private sealed class <>c
		{
			[Token(Token = "0x40022FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<float> <>9__40_0;

			[Token(Token = "0x4002301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action <>9__40_1;

			[Token(Token = "0x4002302")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Action <>9__40_2;

			[Token(Token = "0x4002303")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Action <>9__40_3;

			[Token(Token = "0x4002304")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Action <>9__40_4;

			[Token(Token = "0x6002A6A")]
			[Address(RVA = "0x137A1BC", Offset = "0x137A1BC", VA = "0x137A1BC")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A6B")]
			[Address(RVA = "0x137A1C4", Offset = "0x137A1C4", VA = "0x137A1C4")]
			internal void <.ctor>b__40_0(float progress)
			{
			}

			[Token(Token = "0x6002A6C")]
			[Address(RVA = "0x137A1C8", Offset = "0x137A1C8", VA = "0x137A1C8")]
			internal void <.ctor>b__40_1()
			{
			}

			[Token(Token = "0x6002A6D")]
			[Address(RVA = "0x137A1CC", Offset = "0x137A1CC", VA = "0x137A1CC")]
			internal void <.ctor>b__40_2()
			{
			}

			[Token(Token = "0x6002A6E")]
			[Address(RVA = "0x137A1D0", Offset = "0x137A1D0", VA = "0x137A1D0")]
			internal void <.ctor>b__40_3()
			{
			}

			[Token(Token = "0x6002A6F")]
			[Address(RVA = "0x137A1D4", Offset = "0x137A1D4", VA = "0x137A1D4")]
			internal void <.ctor>b__40_4()
			{
			}
		}

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56654", Offset = "0xB56654")]
		public Transform targetTransform;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5668C", Offset = "0xB5668C")]
		public Transform startTransform;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB566C4", Offset = "0xB566C4")]
		public Transform endTransform;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool startAtEnd;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB566FC", Offset = "0xB566FC")]
		public bool tweenLocalPosition;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool tweenLocalRotation;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool tweenLocalScale;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "MinValue", RVA = "0xB56734", Offset = "0xB56734")]
		public float tweenDuration;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SmoothType tweenSmoothType;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<float> OnProgress;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action OnLeaveStart;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnReachEnd;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action OnLeaveEnd;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action OnReachStart;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Tween _tween;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine _playTweenAfterDelayCoroutine;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Direction _curDelayedDirection;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private EnumEventTable _eventTable;

		[Token(Token = "0x1700035E")]
		public Tween tween
		{
			[Token(Token = "0x6002334")]
			[Address(RVA = "0x13790B8", Offset = "0x13790B8", VA = "0x13790B8")]
			get
			{
				return default(Tween);
			}
			[Token(Token = "0x6002335")]
			[Address(RVA = "0x13790C4", Offset = "0x13790C4", VA = "0x13790C4")]
			set
			{
			}
		}

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x13790CC", Offset = "0x13790CC", VA = "0x13790CC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0x1379248", Offset = "0x1379248", VA = "0x1379248")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0x1379938", Offset = "0x1379938", VA = "0x1379938")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0x1379A00", Offset = "0x1379A00", VA = "0x1379A00")]
		public void PlayTween()
		{
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0x1379A0C", Offset = "0x1379A0C", VA = "0x1379A0C")]
		public void PlayTween(Direction tweenDirection = Direction.Forward, float afterDelay = 0f)
		{
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0x1379A84", Offset = "0x1379A84", VA = "0x1379A84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB61464", Offset = "0xB61464")]
		private IEnumerator playAfterDelay(Direction tweenDirection, float delay)
		{
			return null;
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0x1379B40", Offset = "0x1379B40", VA = "0x1379B40")]
		public void PlayForward()
		{
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0x1379B4C", Offset = "0x1379B4C", VA = "0x1379B4C")]
		public void PlayBackward()
		{
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0x1379B58", Offset = "0x1379B58", VA = "0x1379B58")]
		public void PlayForwardAfterDelay(float delay = 0f)
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0x1379B60", Offset = "0x1379B60", VA = "0x1379B60")]
		public void PlayBackwardAfterDelay(float delay = 0f)
		{
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0x1379B68", Offset = "0x1379B68", VA = "0x1379B68")]
		public void StopTween()
		{
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0x1379C00", Offset = "0x1379C00", VA = "0x1379C00")]
		public void SetTargetToStart()
		{
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0x1379D4C", Offset = "0x1379D4C", VA = "0x1379D4C")]
		public void SetTargetToEnd()
		{
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0x1379C08", Offset = "0x1379C08", VA = "0x1379C08")]
		private void setTargetTo(Transform t)
		{
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0x1379398", Offset = "0x1379398", VA = "0x1379398")]
		private void initUnityEvents()
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0x1379D54", Offset = "0x1379D54", VA = "0x1379D54")]
		private void setupCallback(ref Action action, EventType type)
		{
		}

		[Token(Token = "0x6002346")]
		private void setupCallback<T>(ref Action<T> action, EventType type)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0x1379E50", Offset = "0x1379E50", VA = "0x1379E50")]
		public TransformTweenBehaviour()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public enum Direction
	{
		[Token(Token = "0x4001B08")]
		Forward = 1,
		[Token(Token = "0x4001B09")]
		Backward = -1
	}
	[Token(Token = "0x20004B6")]
	public enum SmoothType
	{
		[Token(Token = "0x4001B0B")]
		Linear = 1,
		[Token(Token = "0x4001B0C")]
		Smooth,
		[Token(Token = "0x4001B0D")]
		SmoothEnd,
		[Token(Token = "0x4001B0E")]
		SmoothStart
	}
	[Token(Token = "0x20004B7")]
	public interface IInterpolator : IPoolable, IDisposable
	{
		[Token(Token = "0x1700035F")]
		float length
		{
			[Token(Token = "0x6002349")]
			get;
		}

		[Token(Token = "0x17000360")]
		bool isValid
		{
			[Token(Token = "0x600234A")]
			get;
		}

		[Token(Token = "0x6002348")]
		void Interpolate(float percent);
	}
	[Token(Token = "0x20004B8")]
	public struct Tween
	{
		[Token(Token = "0x20006B3")]
		private class FloatInterpolator : FloatInterpolatorBase<Action<float>>
		{
			[Token(Token = "0x1700046D")]
			public override bool isValid
			{
				[Token(Token = "0x6002A72")]
				[Address(RVA = "0x1559B38", Offset = "0x1559B38", VA = "0x1559B38", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A70")]
			[Address(RVA = "0x1559A54", Offset = "0x1559A54", VA = "0x1559A54", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A71")]
			[Address(RVA = "0x1559AC4", Offset = "0x1559AC4", VA = "0x1559AC4", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A73")]
			[Address(RVA = "0x1559B40", Offset = "0x1559B40", VA = "0x1559B40")]
			public FloatInterpolator()
			{
			}
		}

		[Token(Token = "0x20006B4")]
		private class Vector2Interpolator : Vector2InterpolatorBase<Action<Vector2>>
		{
			[Token(Token = "0x1700046E")]
			public override bool isValid
			{
				[Token(Token = "0x6002A76")]
				[Address(RVA = "0x1559E8C", Offset = "0x1559E8C", VA = "0x1559E8C", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A74")]
			[Address(RVA = "0x1559D4C", Offset = "0x1559D4C", VA = "0x1559D4C", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A75")]
			[Address(RVA = "0x1559E18", Offset = "0x1559E18", VA = "0x1559E18", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A77")]
			[Address(RVA = "0x1559E94", Offset = "0x1559E94", VA = "0x1559E94")]
			public Vector2Interpolator()
			{
			}
		}

		[Token(Token = "0x20006B5")]
		private class Vector3Interpolator : Vector3InterpolatorBase<Action<Vector3>>
		{
			[Token(Token = "0x1700046F")]
			public override bool isValid
			{
				[Token(Token = "0x6002A7A")]
				[Address(RVA = "0x155A03C", Offset = "0x155A03C", VA = "0x155A03C", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A78")]
			[Address(RVA = "0x1559EE4", Offset = "0x1559EE4", VA = "0x1559EE4", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A79")]
			[Address(RVA = "0x1559FC8", Offset = "0x1559FC8", VA = "0x1559FC8", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A7B")]
			[Address(RVA = "0x155A044", Offset = "0x155A044", VA = "0x155A044")]
			public Vector3Interpolator()
			{
			}
		}

		[Token(Token = "0x20006B6")]
		private class QuaternionInterpolator : QuaternionInterpolatorBase<Action<Quaternion>>
		{
			[Token(Token = "0x17000470")]
			public override bool isValid
			{
				[Token(Token = "0x6002A7E")]
				[Address(RVA = "0x1559CF4", Offset = "0x1559CF4", VA = "0x1559CF4", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A7C")]
			[Address(RVA = "0x1559B90", Offset = "0x1559B90", VA = "0x1559B90", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A7D")]
			[Address(RVA = "0x1559C80", Offset = "0x1559C80", VA = "0x1559C80", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A7F")]
			[Address(RVA = "0x1559CFC", Offset = "0x1559CFC", VA = "0x1559CFC")]
			public QuaternionInterpolator()
			{
			}
		}

		[Token(Token = "0x20006B7")]
		private class ColorInterpolator : ColorInterpolatorBase<Action<Color>>
		{
			[Token(Token = "0x17000471")]
			public override bool isValid
			{
				[Token(Token = "0x6002A82")]
				[Address(RVA = "0x15599FC", Offset = "0x15599FC", VA = "0x15599FC", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A80")]
			[Address(RVA = "0x15598CC", Offset = "0x15598CC", VA = "0x15598CC", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A81")]
			[Address(RVA = "0x1559988", Offset = "0x1559988", VA = "0x1559988", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A83")]
			[Address(RVA = "0x1559A04", Offset = "0x1559A04", VA = "0x1559A04")]
			public ColorInterpolator()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20006B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B8C", Offset = "0xB47B8C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002305")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002306")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<float> <>9__17_0;

			[Token(Token = "0x6002A85")]
			[Address(RVA = "0x15598C0", Offset = "0x15598C0", VA = "0x15598C0")]
			public <>c()
			{
			}

			[Token(Token = "0x6002A86")]
			[Address(RVA = "0x15598C8", Offset = "0x15598C8", VA = "0x15598C8")]
			internal void <AfterDelay>b__17_0(float x)
			{
			}
		}

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _id;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private TweenInstance _instance;

		[Token(Token = "0x17000361")]
		public bool isValid
		{
			[Token(Token = "0x6002356")]
			[Address(RVA = "0x137995C", Offset = "0x137995C", VA = "0x137995C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000362")]
		public bool isRunning
		{
			[Token(Token = "0x6002357")]
			[Address(RVA = "0x137AAEC", Offset = "0x137AAEC", VA = "0x137AAEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000363")]
		public Direction direction
		{
			[Token(Token = "0x6002358")]
			[Address(RVA = "0x137ABD0", Offset = "0x137ABD0", VA = "0x137ABD0")]
			get
			{
				return default(Direction);
			}
			[Token(Token = "0x6002359")]
			[Address(RVA = "0x137AC00", Offset = "0x137AC00", VA = "0x137AC00")]
			set
			{
			}
		}

		[Token(Token = "0x17000364")]
		public float timeLeft
		{
			[Token(Token = "0x600235A")]
			[Address(RVA = "0x137AC50", Offset = "0x137AC50", VA = "0x137AC50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000365")]
		public float progress
		{
			[Token(Token = "0x600235B")]
			[Address(RVA = "0x137ACE8", Offset = "0x137ACE8", VA = "0x137ACE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600235C")]
			[Address(RVA = "0x13797AC", Offset = "0x13797AC", VA = "0x13797AC")]
			set
			{
			}
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0x137A398", Offset = "0x137A398", VA = "0x137A398")]
		public MaterialSelector Target(Material material)
		{
			return default(MaterialSelector);
		}

		[Token(Token = "0x600234C")]
		[Address(RVA = "0x13794A4", Offset = "0x13794A4", VA = "0x13794A4")]
		public TransformSelector Target(Transform transform)
		{
			return default(TransformSelector);
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0x137A3A8", Offset = "0x137A3A8", VA = "0x137A3A8")]
		public Tween Value(float a, float b, Action<float> onValue)
		{
			return default(Tween);
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0x137A468", Offset = "0x137A468", VA = "0x137A468")]
		public Tween Value(Vector2 a, Vector2 b, Action<Vector2> onValue)
		{
			return default(Tween);
		}

		[Token(Token = "0x600234F")]
		[Address(RVA = "0x137A540", Offset = "0x137A540", VA = "0x137A540")]
		public Tween Value(Vector3 a, Vector3 b, Action<Vector3> onValue)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0x137A630", Offset = "0x137A630", VA = "0x137A630")]
		public Tween Value(Quaternion a, Quaternion b, Action<Quaternion> onValue)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002351")]
		[Address(RVA = "0x137A738", Offset = "0x137A738", VA = "0x137A738")]
		public Tween Value(Color a, Color b, Action<Color> onValue)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0x137A840", Offset = "0x137A840", VA = "0x137A840")]
		private Tween(bool isSingle)
		{
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0x137A8D8", Offset = "0x137A8D8", VA = "0x137A8D8")]
		public static Tween Single()
		{
			return default(Tween);
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0x13793EC", Offset = "0x13793EC", VA = "0x13793EC")]
		public static Tween Persistent()
		{
			return default(Tween);
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0x137A904", Offset = "0x137A904", VA = "0x137A904")]
		public static Tween AfterDelay(float delay, Action onReachEnd)
		{
			return default(Tween);
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x1373368", Offset = "0x1373368", VA = "0x1373368")]
		public Tween AddInterpolator(IInterpolator interpolator)
		{
			return default(Tween);
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0x1379418", Offset = "0x1379418", VA = "0x1379418")]
		public Tween OverTime(float seconds)
		{
			return default(Tween);
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0x137AD18", Offset = "0x137AD18", VA = "0x137AD18")]
		public Tween AtRate(float unitsPerSecond)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0x1379460", Offset = "0x1379460", VA = "0x1379460")]
		public Tween Smooth(SmoothType type = SmoothType.Smooth)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0x137AE1C", Offset = "0x137AE1C", VA = "0x137AE1C")]
		public Tween Smooth(AnimationCurve curve)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0x137AEC4", Offset = "0x137AEC4", VA = "0x137AEC4")]
		public Tween Smooth(Func<float, float> smoothFunction)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0x13794B4", Offset = "0x13794B4", VA = "0x13794B4")]
		public Tween OnProgress(Action<float> action)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0x137954C", Offset = "0x137954C", VA = "0x137954C")]
		public Tween OnLeaveStart(Action action)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0x1379714", Offset = "0x1379714", VA = "0x1379714")]
		public Tween OnReachStart(Action action)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0x137967C", Offset = "0x137967C", VA = "0x137967C")]
		public Tween OnLeaveEnd(Action action)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0x13795E4", Offset = "0x13795E4", VA = "0x13795E4")]
		public Tween OnReachEnd(Action action)
		{
			return default(Tween);
		}

		[Token(Token = "0x6002368")]
		[Address(RVA = "0x137AA48", Offset = "0x137AA48", VA = "0x137AA48")]
		public Tween Play()
		{
			return default(Tween);
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0x13798FC", Offset = "0x13798FC", VA = "0x13798FC")]
		public Tween Play(Direction direction)
		{
			return default(Tween);
		}

		[Token(Token = "0x600236A")]
		[Address(RVA = "0x137AF08", Offset = "0x137AF08", VA = "0x137AF08")]
		public Tween Play(float destinationPercent)
		{
			return default(Tween);
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0x137AFE8", Offset = "0x137AFE8", VA = "0x137AFE8")]
		public TweenInstance.TweenYieldInstruction Yield()
		{
			return default(TweenInstance.TweenYieldInstruction);
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0x137B018", Offset = "0x137B018", VA = "0x137B018")]
		public void Pause()
		{
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0x1379B90", Offset = "0x1379B90", VA = "0x1379B90")]
		public void Stop()
		{
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0x1379980", Offset = "0x1379980", VA = "0x1379980")]
		public void Release()
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0x137AB24", Offset = "0x137AB24", VA = "0x137AB24")]
		private void throwIfInvalid()
		{
		}
	}
}
namespace Leap.Unity.Animation.Generation
{
	[Token(Token = "0x20004B9")]
	public struct __CHS_T__
	{
		[Token(Token = "0x6002370")]
		[Address(RVA = "0x1371E40", Offset = "0x1371E40", VA = "0x1371E40")]
		public static __CHS_T__ operator +(__CHS_T__ a, __CHS_T__ b)
		{
			return default(__CHS_T__);
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x1371E48", Offset = "0x1371E48", VA = "0x1371E48")]
		public static __CHS_T__ operator *(float a, __CHS_T__ b)
		{
			return default(__CHS_T__);
		}
	}
	[Token(Token = "0x20004BA")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xB46A20", Offset = "0xB46A20")]
	public class GeneratorCHS : GeneratorBase
	{
		[Serializable]
		[Token(Token = "0x20006B9")]
		public struct Definition
		{
			[Token(Token = "0x4002307")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4002308")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string type;
		}

		[Token(Token = "0x4001B11")]
		public const string TEMPLATE_NAME = "__CHS__";

		[Token(Token = "0x4001B12")]
		public const string TEMPLATE_TYPE = "__CHS_T__";

		[Token(Token = "0x4001B13")]
		public const string TEMPLATE_NAMESPACE = "Leap.Unity.Animation.Generation";

		[Token(Token = "0x4001B14")]
		public const string TARGET_NAMESPACE = "Leap.Unity.Animation";

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextAsset templateAsset;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssetFolder destFolder;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Definition[] definitions;

		[Token(Token = "0x6002372")]
		[Address(RVA = "0x1371C98", Offset = "0x1371C98", VA = "0x1371C98", Slot = "4")]
		public override void Generate()
		{
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0x1371E38", Offset = "0x1371E38", VA = "0x1371E38")]
		public GeneratorCHS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004BB")]
	public struct __CHS__
	{
		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float t0;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float t1;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public __CHS_T__ pos0;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public __CHS_T__ pos1;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public __CHS_T__ vel0;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public __CHS_T__ vel1;

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x1371E50", Offset = "0x1371E50", VA = "0x1371E50")]
		public __CHS__(__CHS_T__ pos0, __CHS_T__ pos1)
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0x1371E6C", Offset = "0x1371E6C", VA = "0x1371E6C")]
		public __CHS__(__CHS_T__ pos0, __CHS_T__ pos1, __CHS_T__ vel0, __CHS_T__ vel1)
		{
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0x1371E8C", Offset = "0x1371E8C", VA = "0x1371E8C")]
		public __CHS__(__CHS_T__ pos0, __CHS_T__ pos1, __CHS_T__ vel0, __CHS_T__ vel1, float length)
		{
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0x1371EA8", Offset = "0x1371EA8", VA = "0x1371EA8")]
		public __CHS__(float t0, float t1, __CHS_T__ pos0, __CHS_T__ pos1, __CHS_T__ vel0, __CHS_T__ vel1)
		{
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0x1371EC0", Offset = "0x1371EC0", VA = "0x1371EC0")]
		public __CHS_T__ PositionAt(float t)
		{
			return default(__CHS_T__);
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0x1371F50", Offset = "0x1371F50", VA = "0x1371F50")]
		public __CHS_T__ VelocityAt(float t)
		{
			return default(__CHS_T__);
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0x1371FE8", Offset = "0x1371FE8", VA = "0x1371FE8")]
		public void PositionAndVelAt(float t, out __CHS_T__ position, out __CHS_T__ velocity)
		{
		}
	}
}
namespace Leap.Unity.Animation.Internal
{
	[Token(Token = "0x20004BC")]
	public abstract class InterpolatorBase<ValueType, ObjType> : IInterpolator, IPoolable, IDisposable
	{
		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected ValueType _a;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected ValueType _b;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected ObjType _target;

		[Token(Token = "0x17000366")]
		public abstract float length
		{
			[Token(Token = "0x600237C")]
			get;
		}

		[Token(Token = "0x17000367")]
		public abstract bool isValid
		{
			[Token(Token = "0x600237E")]
			get;
		}

		[Token(Token = "0x600237B")]
		public InterpolatorBase<ValueType, ObjType> Init(ValueType a, ValueType b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x600237D")]
		public abstract void Interpolate(float percent);

		[Token(Token = "0x600237F")]
		public void OnSpawn()
		{
		}

		[Token(Token = "0x6002380")]
		public void OnRecycle()
		{
		}

		[Token(Token = "0x6002381")]
		public abstract void Dispose();

		[Token(Token = "0x6002382")]
		protected InterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public abstract class FloatInterpolatorBase<ObjType> : InterpolatorBase<float, ObjType>
	{
		[Token(Token = "0x17000368")]
		public override float length
		{
			[Token(Token = "0x6002383")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002384")]
		public new FloatInterpolatorBase<ObjType> Init(float a, float b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x6002385")]
		protected FloatInterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public abstract class Vector2InterpolatorBase<ObjType> : InterpolatorBase<Vector2, ObjType>
	{
		[Token(Token = "0x17000369")]
		public override float length
		{
			[Token(Token = "0x6002386")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002387")]
		public new Vector2InterpolatorBase<ObjType> Init(Vector2 a, Vector2 b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x6002388")]
		protected Vector2InterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public abstract class Vector3InterpolatorBase<ObjType> : InterpolatorBase<Vector3, ObjType>
	{
		[Token(Token = "0x1700036A")]
		public override float length
		{
			[Token(Token = "0x6002389")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600238A")]
		public new Vector3InterpolatorBase<ObjType> Init(Vector3 a, Vector3 b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x600238B")]
		protected Vector3InterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public abstract class Vector4InterpolatorBase<ObjType> : InterpolatorBase<Vector4, ObjType>
	{
		[Token(Token = "0x1700036B")]
		public override float length
		{
			[Token(Token = "0x600238C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600238D")]
		public new Vector4InterpolatorBase<ObjType> Init(Vector4 a, Vector4 b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x600238E")]
		protected Vector4InterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004C1")]
	public abstract class QuaternionInterpolatorBase<ObjType> : InterpolatorBase<Quaternion, ObjType>
	{
		[Token(Token = "0x1700036C")]
		public override float length
		{
			[Token(Token = "0x600238F")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002390")]
		public new QuaternionInterpolatorBase<ObjType> Init(Quaternion a, Quaternion b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x6002391")]
		protected QuaternionInterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public abstract class ColorInterpolatorBase<ObjType> : InterpolatorBase<Color, ObjType>
	{
		[Token(Token = "0x1700036D")]
		public override float length
		{
			[Token(Token = "0x6002392")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002393")]
		public new ColorInterpolatorBase<ObjType> Init(Color a, Color b, ObjType target)
		{
			return null;
		}

		[Token(Token = "0x6002394")]
		protected ColorInterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public abstract class GradientInterpolatorBase : IInterpolator, IPoolable, IDisposable
	{
		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Gradient _gradient;

		[Token(Token = "0x1700036E")]
		public float length
		{
			[Token(Token = "0x6002396")]
			[Address(RVA = "0x1373230", Offset = "0x1373230", VA = "0x1373230", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700036F")]
		public abstract bool isValid
		{
			[Token(Token = "0x6002398")]
			get;
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0x1373228", Offset = "0x1373228", VA = "0x1373228")]
		public GradientInterpolatorBase Init(Gradient gradient)
		{
			return null;
		}

		[Token(Token = "0x6002397")]
		public abstract void Interpolate(float percent);

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x1373238", Offset = "0x1373238", VA = "0x1373238", Slot = "7")]
		public void OnSpawn()
		{
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x137323C", Offset = "0x137323C", VA = "0x137323C", Slot = "9")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x1373240", Offset = "0x1373240", VA = "0x1373240", Slot = "8")]
		public void OnRecycle()
		{
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0x1373244", Offset = "0x1373244", VA = "0x1373244")]
		protected GradientInterpolatorBase()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public struct MaterialSelector
	{
		[Token(Token = "0x20006BA")]
		private class MaterialColorInterpolator : ColorInterpolatorBase<MaterialPropertyKey>
		{
			[Token(Token = "0x17000472")]
			public override bool isValid
			{
				[Token(Token = "0x6002A89")]
				[Address(RVA = "0x13749A8", Offset = "0x13749A8", VA = "0x13749A8", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A87")]
			[Address(RVA = "0x13748A4", Offset = "0x13748A4", VA = "0x13748A4", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A88")]
			[Address(RVA = "0x1374934", Offset = "0x1374934", VA = "0x1374934", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A8A")]
			[Address(RVA = "0x1374A18", Offset = "0x1374A18", VA = "0x1374A18")]
			public MaterialColorInterpolator()
			{
			}
		}

		[Token(Token = "0x20006BB")]
		private class MaterialGradientInterpolator : GradientInterpolatorBase
		{
			[Token(Token = "0x4002309")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MaterialPropertyKey _matPropKey;

			[Token(Token = "0x17000473")]
			public override bool isValid
			{
				[Token(Token = "0x6002A8D")]
				[Address(RVA = "0x1374C14", Offset = "0x1374C14", VA = "0x1374C14", Slot = "11")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A8B")]
			[Address(RVA = "0x13735AC", Offset = "0x13735AC", VA = "0x13735AC")]
			public MaterialGradientInterpolator Init(Gradient gradient, MaterialPropertyKey matPropKey)
			{
				return null;
			}

			[Token(Token = "0x6002A8C")]
			[Address(RVA = "0x1374BCC", Offset = "0x1374BCC", VA = "0x1374BCC", Slot = "10")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A8E")]
			[Address(RVA = "0x1374C84", Offset = "0x1374C84", VA = "0x1374C84")]
			public MaterialGradientInterpolator()
			{
			}
		}

		[Token(Token = "0x20006BC")]
		private class MaterialRGBInterpolator : Vector3InterpolatorBase<MaterialPropertyKey>
		{
			[Token(Token = "0x17000474")]
			public override bool isValid
			{
				[Token(Token = "0x6002A91")]
				[Address(RVA = "0x1374FA4", Offset = "0x1374FA4", VA = "0x1374FA4", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A8F")]
			[Address(RVA = "0x1374DF0", Offset = "0x1374DF0", VA = "0x1374DF0", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A90")]
			[Address(RVA = "0x1374F30", Offset = "0x1374F30", VA = "0x1374F30", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A92")]
			[Address(RVA = "0x1375014", Offset = "0x1375014", VA = "0x1375014")]
			public MaterialRGBInterpolator()
			{
			}
		}

		[Token(Token = "0x20006BD")]
		private class MaterialAlphaInterpolator : FloatInterpolatorBase<MaterialPropertyKey>
		{
			[Token(Token = "0x17000475")]
			public override bool isValid
			{
				[Token(Token = "0x6002A95")]
				[Address(RVA = "0x13747E4", Offset = "0x13747E4", VA = "0x13747E4", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A93")]
			[Address(RVA = "0x1374698", Offset = "0x1374698", VA = "0x1374698", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A94")]
			[Address(RVA = "0x1374770", Offset = "0x1374770", VA = "0x1374770", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A96")]
			[Address(RVA = "0x1374854", Offset = "0x1374854", VA = "0x1374854")]
			public MaterialAlphaInterpolator()
			{
			}
		}

		[Token(Token = "0x20006BE")]
		private class MaterialFloatInterpolator : FloatInterpolatorBase<MaterialPropertyKey>
		{
			[Token(Token = "0x17000476")]
			public override bool isValid
			{
				[Token(Token = "0x6002A99")]
				[Address(RVA = "0x1374B0C", Offset = "0x1374B0C", VA = "0x1374B0C", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A97")]
			[Address(RVA = "0x1374A68", Offset = "0x1374A68", VA = "0x1374A68", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A98")]
			[Address(RVA = "0x1374A98", Offset = "0x1374A98", VA = "0x1374A98", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A9A")]
			[Address(RVA = "0x1374B7C", Offset = "0x1374B7C", VA = "0x1374B7C")]
			public MaterialFloatInterpolator()
			{
			}
		}

		[Token(Token = "0x20006BF")]
		private class MaterialVectorInterpolator : Vector4InterpolatorBase<MaterialPropertyKey>
		{
			[Token(Token = "0x17000477")]
			public override bool isValid
			{
				[Token(Token = "0x6002A9D")]
				[Address(RVA = "0x13751E0", Offset = "0x13751E0", VA = "0x13751E0", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002A9B")]
			[Address(RVA = "0x1375064", Offset = "0x1375064", VA = "0x1375064", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002A9C")]
			[Address(RVA = "0x137516C", Offset = "0x137516C", VA = "0x137516C", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002A9E")]
			[Address(RVA = "0x1375250", Offset = "0x1375250", VA = "0x1375250")]
			public MaterialVectorInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C0")]
		private class MaterialInterpolator : InterpolatorBase<Material, Material>
		{
			[Token(Token = "0x17000478")]
			public override float length
			{
				[Token(Token = "0x6002A9F")]
				[Address(RVA = "0x1374C8C", Offset = "0x1374C8C", VA = "0x1374C8C", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000479")]
			public override bool isValid
			{
				[Token(Token = "0x6002AA2")]
				[Address(RVA = "0x1374D30", Offset = "0x1374D30", VA = "0x1374D30", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AA0")]
			[Address(RVA = "0x1374C94", Offset = "0x1374C94", VA = "0x1374C94", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AA1")]
			[Address(RVA = "0x1374CB8", Offset = "0x1374CB8", VA = "0x1374CB8", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AA3")]
			[Address(RVA = "0x1374DA0", Offset = "0x1374DA0", VA = "0x1374DA0")]
			public MaterialInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C1")]
		private struct MaterialPropertyKey
		{
			[Token(Token = "0x400230A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Material material;

			[Token(Token = "0x400230B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int propertyId;

			[Token(Token = "0x6002AA4")]
			[Address(RVA = "0x137335C", Offset = "0x137335C", VA = "0x137335C")]
			public MaterialPropertyKey(Material material, int propertyId)
			{
			}
		}

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Material _target;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Tween _tween;

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x137324C", Offset = "0x137324C", VA = "0x137324C")]
		public MaterialSelector(Material target, Tween tween)
		{
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0x1373258", Offset = "0x1373258", VA = "0x1373258")]
		public Tween Color(Color a, Color b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x137347C", Offset = "0x137347C", VA = "0x137347C")]
		public Tween Color(Color a, Color b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x137350C", Offset = "0x137350C", VA = "0x137350C")]
		public Tween Color(Gradient gradient, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0x13735B8", Offset = "0x13735B8", VA = "0x13735B8")]
		public Tween Color(Gradient gradient, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0x13735F0", Offset = "0x13735F0", VA = "0x13735F0")]
		public Tween ToColor(Color b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x13736E4", Offset = "0x13736E4", VA = "0x13736E4")]
		public Tween ToColor(Color b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0x1373744", Offset = "0x1373744", VA = "0x1373744")]
		public Tween RGB(Color a, Color b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x13738D4", Offset = "0x13738D4", VA = "0x13738D4")]
		public Tween RGB(Color a, Color b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0x1373964", Offset = "0x1373964", VA = "0x1373964")]
		public Tween ToRGB(Color b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0x1373AEC", Offset = "0x1373AEC", VA = "0x1373AEC")]
		public Tween ToRGB(Color b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0x1373B4C", Offset = "0x1373B4C", VA = "0x1373B4C")]
		public Tween Alpha(float a, float b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0x1373C08", Offset = "0x1373C08", VA = "0x1373C08")]
		public Tween Alpha(float a, float b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0x1373C50", Offset = "0x1373C50", VA = "0x1373C50")]
		public Tween ToAlpha(float b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x1373D28", Offset = "0x1373D28", VA = "0x1373D28")]
		public Tween ToAlpha(float b, string propertyName = "_Color")
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x1373D68", Offset = "0x1373D68", VA = "0x1373D68")]
		public Tween Float(float a, float b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x1373E24", Offset = "0x1373E24", VA = "0x1373E24")]
		public Tween Float(float a, float b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0x1373E6C", Offset = "0x1373E6C", VA = "0x1373E6C")]
		public Tween ToFloat(float b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0x1373F40", Offset = "0x1373F40", VA = "0x1373F40")]
		public Tween ToFloat(float b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x1373F80", Offset = "0x1373F80", VA = "0x1373F80")]
		public Tween Vector(Vector4 a, Vector4 b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0x1374084", Offset = "0x1374084", VA = "0x1374084")]
		public Tween Vector(Vector4 a, Vector4 b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0x1374114", Offset = "0x1374114", VA = "0x1374114")]
		public Tween Vector(Vector3 a, Vector3 b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0x1374274", Offset = "0x1374274", VA = "0x1374274")]
		public Tween Vector(Vector3 a, Vector3 b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0x13742EC", Offset = "0x13742EC", VA = "0x13742EC")]
		public Tween ToVector(Vector4 b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0x13743E0", Offset = "0x13743E0", VA = "0x13743E0")]
		public Tween ToVector(Vector4 b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0x1374440", Offset = "0x1374440", VA = "0x1374440")]
		public Tween ToVector(Vector3 b, int propertyId)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0x1374594", Offset = "0x1374594", VA = "0x1374594")]
		public Tween ToVector(Vector3 b, string propertyName)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x13745EC", Offset = "0x13745EC", VA = "0x13745EC")]
		public Tween Material(Material a, Material b)
		{
			return default(Tween);
		}
	}
	[Token(Token = "0x20004C5")]
	public struct TransformSelector
	{
		[Token(Token = "0x20006C2")]
		private class TransformPositionValueInterpolator : Vector3InterpolatorBase<Transform>
		{
			[Token(Token = "0x1700047A")]
			public override bool isValid
			{
				[Token(Token = "0x6002AA7")]
				[Address(RVA = "0x1377BBC", Offset = "0x1377BBC", VA = "0x1377BBC", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AA5")]
			[Address(RVA = "0x1377A6C", Offset = "0x1377A6C", VA = "0x1377A6C", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AA6")]
			[Address(RVA = "0x1377B48", Offset = "0x1377B48", VA = "0x1377B48", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AA8")]
			[Address(RVA = "0x1377C2C", Offset = "0x1377C2C", VA = "0x1377C2C")]
			public TransformPositionValueInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C3")]
		private class TransformPositionReferenceInterpolator : InterpolatorBase<Transform, Transform>
		{
			[Token(Token = "0x1700047B")]
			public override float length
			{
				[Token(Token = "0x6002AA9")]
				[Address(RVA = "0x1377774", Offset = "0x1377774", VA = "0x1377774", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700047C")]
			public override bool isValid
			{
				[Token(Token = "0x6002AAC")]
				[Address(RVA = "0x13779AC", Offset = "0x13779AC", VA = "0x13779AC", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AAA")]
			[Address(RVA = "0x1377844", Offset = "0x1377844", VA = "0x1377844", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AAB")]
			[Address(RVA = "0x1377938", Offset = "0x1377938", VA = "0x1377938", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AAD")]
			[Address(RVA = "0x1377A1C", Offset = "0x1377A1C", VA = "0x1377A1C")]
			public TransformPositionReferenceInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C4")]
		private class TransformLocalPositionValueInterpolator : Vector3InterpolatorBase<Transform>
		{
			[Token(Token = "0x1700047D")]
			public override bool isValid
			{
				[Token(Token = "0x6002AB0")]
				[Address(RVA = "0x1376C48", Offset = "0x1376C48", VA = "0x1376C48", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AAE")]
			[Address(RVA = "0x1376AF8", Offset = "0x1376AF8", VA = "0x1376AF8", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AAF")]
			[Address(RVA = "0x1376BD4", Offset = "0x1376BD4", VA = "0x1376BD4", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AB1")]
			[Address(RVA = "0x1376CB8", Offset = "0x1376CB8", VA = "0x1376CB8")]
			public TransformLocalPositionValueInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C5")]
		private class TransformLocalPositionReferenceInterpolator : InterpolatorBase<Transform, Transform>
		{
			[Token(Token = "0x1700047E")]
			public override float length
			{
				[Token(Token = "0x6002AB2")]
				[Address(RVA = "0x1376800", Offset = "0x1376800", VA = "0x1376800", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700047F")]
			public override bool isValid
			{
				[Token(Token = "0x6002AB5")]
				[Address(RVA = "0x1376A38", Offset = "0x1376A38", VA = "0x1376A38", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AB3")]
			[Address(RVA = "0x13768D0", Offset = "0x13768D0", VA = "0x13768D0", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AB4")]
			[Address(RVA = "0x13769C4", Offset = "0x13769C4", VA = "0x13769C4", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AB6")]
			[Address(RVA = "0x1376AA8", Offset = "0x1376AA8", VA = "0x1376AA8")]
			public TransformLocalPositionReferenceInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C6")]
		private class TransformRotationValueInterpolator : QuaternionInterpolatorBase<Transform>
		{
			[Token(Token = "0x17000480")]
			public override bool isValid
			{
				[Token(Token = "0x6002AB9")]
				[Address(RVA = "0x1378108", Offset = "0x1378108", VA = "0x1378108", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AB7")]
			[Address(RVA = "0x1377FAC", Offset = "0x1377FAC", VA = "0x1377FAC", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AB8")]
			[Address(RVA = "0x1378094", Offset = "0x1378094", VA = "0x1378094", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002ABA")]
			[Address(RVA = "0x1378178", Offset = "0x1378178", VA = "0x1378178")]
			public TransformRotationValueInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C7")]
		private class TransformRotationReferenceInterpolator : InterpolatorBase<Transform, Transform>
		{
			[Token(Token = "0x17000481")]
			public override float length
			{
				[Token(Token = "0x6002ABB")]
				[Address(RVA = "0x1377C7C", Offset = "0x1377C7C", VA = "0x1377C7C", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000482")]
			public override bool isValid
			{
				[Token(Token = "0x6002ABE")]
				[Address(RVA = "0x1377EEC", Offset = "0x1377EEC", VA = "0x1377EEC", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002ABC")]
			[Address(RVA = "0x1377D64", Offset = "0x1377D64", VA = "0x1377D64", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002ABD")]
			[Address(RVA = "0x1377E78", Offset = "0x1377E78", VA = "0x1377E78", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002ABF")]
			[Address(RVA = "0x1377F5C", Offset = "0x1377F5C", VA = "0x1377F5C")]
			public TransformRotationReferenceInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C8")]
		private class TransformLocalRotationValueInterpolator : QuaternionInterpolatorBase<Transform>
		{
			[Token(Token = "0x17000483")]
			public override bool isValid
			{
				[Token(Token = "0x6002AC2")]
				[Address(RVA = "0x1377194", Offset = "0x1377194", VA = "0x1377194", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AC0")]
			[Address(RVA = "0x1377038", Offset = "0x1377038", VA = "0x1377038", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AC1")]
			[Address(RVA = "0x1377120", Offset = "0x1377120", VA = "0x1377120", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AC3")]
			[Address(RVA = "0x1377204", Offset = "0x1377204", VA = "0x1377204")]
			public TransformLocalRotationValueInterpolator()
			{
			}
		}

		[Token(Token = "0x20006C9")]
		private class TransformLocalRotationReferenceInterpolator : InterpolatorBase<Transform, Transform>
		{
			[Token(Token = "0x17000484")]
			public override float length
			{
				[Token(Token = "0x6002AC4")]
				[Address(RVA = "0x1376D08", Offset = "0x1376D08", VA = "0x1376D08", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000485")]
			public override bool isValid
			{
				[Token(Token = "0x6002AC7")]
				[Address(RVA = "0x1376F78", Offset = "0x1376F78", VA = "0x1376F78", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AC5")]
			[Address(RVA = "0x1376DF0", Offset = "0x1376DF0", VA = "0x1376DF0", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002AC6")]
			[Address(RVA = "0x1376F04", Offset = "0x1376F04", VA = "0x1376F04", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AC8")]
			[Address(RVA = "0x1376FE8", Offset = "0x1376FE8", VA = "0x1376FE8")]
			public TransformLocalRotationReferenceInterpolator()
			{
			}
		}

		[Token(Token = "0x20006CA")]
		private class TransformLocalScaleValueInterpolator : Vector3InterpolatorBase<Transform>
		{
			[Token(Token = "0x17000486")]
			public override bool isValid
			{
				[Token(Token = "0x6002ACB")]
				[Address(RVA = "0x13776B4", Offset = "0x13776B4", VA = "0x13776B4", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002AC9")]
			[Address(RVA = "0x1377564", Offset = "0x1377564", VA = "0x1377564", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002ACA")]
			[Address(RVA = "0x1377640", Offset = "0x1377640", VA = "0x1377640", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002ACC")]
			[Address(RVA = "0x1377724", Offset = "0x1377724", VA = "0x1377724")]
			public TransformLocalScaleValueInterpolator()
			{
			}
		}

		[Token(Token = "0x20006CB")]
		private class TransformLocalScaleReferenceInterpolator : InterpolatorBase<Transform, Transform>
		{
			[Token(Token = "0x17000487")]
			public override float length
			{
				[Token(Token = "0x6002ACD")]
				[Address(RVA = "0x1377254", Offset = "0x1377254", VA = "0x1377254", Slot = "10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000488")]
			public override bool isValid
			{
				[Token(Token = "0x6002AD0")]
				[Address(RVA = "0x13774A4", Offset = "0x13774A4", VA = "0x13774A4", Slot = "12")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002ACE")]
			[Address(RVA = "0x137733C", Offset = "0x137733C", VA = "0x137733C", Slot = "11")]
			public override void Interpolate(float percent)
			{
			}

			[Token(Token = "0x6002ACF")]
			[Address(RVA = "0x1377430", Offset = "0x1377430", VA = "0x1377430", Slot = "13")]
			public override void Dispose()
			{
			}

			[Token(Token = "0x6002AD1")]
			[Address(RVA = "0x1377514", Offset = "0x1377514", VA = "0x1377514")]
			public TransformLocalScaleReferenceInterpolator()
			{
			}
		}

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Transform _target;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Tween _tween;

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0x13752A0", Offset = "0x13752A0", VA = "0x13752A0")]
		public TransformSelector(Transform target, Tween tween)
		{
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0x13752AC", Offset = "0x13752AC", VA = "0x13752AC")]
		public Tween Position(Vector3 a, Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0x1375388", Offset = "0x1375388", VA = "0x1375388")]
		public Tween ToPosition(Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0x1375460", Offset = "0x1375460", VA = "0x1375460")]
		public Tween ByPosition(Vector3 delta)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0x13755C4", Offset = "0x13755C4", VA = "0x13755C4")]
		public Tween Position(Transform a, Transform b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0x1375670", Offset = "0x1375670", VA = "0x1375670")]
		public Tween LocalPosition(Vector3 a, Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0x137574C", Offset = "0x137574C", VA = "0x137574C")]
		public Tween ToLocalPosition(Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0x1375824", Offset = "0x1375824", VA = "0x1375824")]
		public Tween ByLocalPosition(Vector3 delta)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0x1375988", Offset = "0x1375988", VA = "0x1375988")]
		public Tween LocalPosition(Transform a, Transform b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0x1375A34", Offset = "0x1375A34", VA = "0x1375A34")]
		public Tween Rotation(Quaternion a, Quaternion b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0x1375B28", Offset = "0x1375B28", VA = "0x1375B28")]
		public Tween ToRotation(Quaternion b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0x1375C08", Offset = "0x1375C08", VA = "0x1375C08")]
		public Tween ByRotation(Quaternion delta)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0x1375D78", Offset = "0x1375D78", VA = "0x1375D78")]
		public Tween Rotation(Transform a, Transform b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0x1375E24", Offset = "0x1375E24", VA = "0x1375E24")]
		public Tween LocalRotation(Quaternion a, Quaternion b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0x1375F18", Offset = "0x1375F18", VA = "0x1375F18")]
		public Tween ToLocalRotation(Quaternion b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0x1375FF8", Offset = "0x1375FF8", VA = "0x1375FF8")]
		public Tween ByLocalRotation(Quaternion delta)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0x1376168", Offset = "0x1376168", VA = "0x1376168")]
		public Tween LocalRotation(Transform a, Transform b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0x1376214", Offset = "0x1376214", VA = "0x1376214")]
		public Tween LocalScale(Vector3 a, Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0x13762F0", Offset = "0x13762F0", VA = "0x13762F0")]
		public Tween LocalScale(float a, float b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x1376414", Offset = "0x1376414", VA = "0x1376414")]
		public Tween ToLocalScale(Vector3 b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CD")]
		[Address(RVA = "0x13764EC", Offset = "0x13764EC", VA = "0x13764EC")]
		public Tween ToLocalScale(float b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0x1376608", Offset = "0x1376608", VA = "0x1376608")]
		public Tween ByLocalScale(float b)
		{
			return default(Tween);
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0x1376754", Offset = "0x1376754", VA = "0x1376754")]
		public Tween LocalScale(Transform a, Transform b)
		{
			return default(Tween);
		}
	}
	[Token(Token = "0x20004C6")]
	public class TweenInstance : IPoolable, IDisposable
	{
		[Token(Token = "0x20006CC")]
		public struct TweenYieldInstruction : IEnumerator
		{
			[Token(Token = "0x400230C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TweenInstance _instance;

			[Token(Token = "0x400230D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int _instanceId;

			[Token(Token = "0x17000489")]
			public object Current
			{
				[Token(Token = "0x6002AD3")]
				[Address(RVA = "0x1378A94", Offset = "0x1378A94", VA = "0x1378A94", Slot = "5")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AD2")]
			[Address(RVA = "0x1378320", Offset = "0x1378320", VA = "0x1378320")]
			public TweenYieldInstruction(TweenInstance instance)
			{
			}

			[Token(Token = "0x6002AD4")]
			[Address(RVA = "0x1378A9C", Offset = "0x1378A9C", VA = "0x1378A9C", Slot = "4")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AD5")]
			[Address(RVA = "0x1378AD8", Offset = "0x1378AD8", VA = "0x1378AD8", Slot = "6")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _nextInstanceId;

		[Token(Token = "0x4001B27")]
		public const int ID_UNUSED = 0;

		[Token(Token = "0x4001B28")]
		public const int ID_IN_POOL = -1;

		[Token(Token = "0x4001B29")]
		public const int ID_WAITING_FOR_RECYCLE = -2;

		[Token(Token = "0x4001B2A")]
		public const int ID_INVALID_STATE = -3;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int instanceId;

		[Token(Token = "0x4001B2C")]
		public const int NOT_RUNNING = -1;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int runnerIndex;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool returnToPoolUponStop;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IInterpolator[] interpolators;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int interpolatorCount;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float curPercent;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float dstPercent;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float velPercent;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Direction direction;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public SmoothType smoothType;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Func<float, float> smoothFunction;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<float> OnProgress;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnLeaveEnd;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action OnReachEnd;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action OnLeaveStart;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action OnReachStart;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TweenYieldInstruction yieldInstruction;

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0x13781C8", Offset = "0x13781C8", VA = "0x13781C8")]
		public TweenInstance()
		{
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x137829C", Offset = "0x137829C", VA = "0x137829C", Slot = "4")]
		public void OnSpawn()
		{
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x1378340", Offset = "0x1378340", VA = "0x1378340", Slot = "5")]
		public void OnRecycle()
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0x1378268", Offset = "0x1378268", VA = "0x1378268")]
		public void ResetDefaults()
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x1378344", Offset = "0x1378344", VA = "0x1378344", Slot = "6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x13784D8", Offset = "0x13784D8", VA = "0x13784D8")]
		public void Step(TweenRunner runner)
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x13785BC", Offset = "0x13785BC", VA = "0x13785BC")]
		public void interpolatePercent()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class TweenRunner : MonoBehaviour
	{
		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TweenInstance[] _runningTweens;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _runningCount;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Queue<TweenInstance> _toRecycle;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TweenRunner _cachedInstance;

		[Token(Token = "0x17000370")]
		public static TweenRunner instance
		{
			[Token(Token = "0x60023D8")]
			[Address(RVA = "0x1378ADC", Offset = "0x1378ADC", VA = "0x1378ADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x1378CB0", Offset = "0x1378CB0", VA = "0x1378CB0")]
		private void Update()
		{
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0x1378E78", Offset = "0x1378E78", VA = "0x1378E78")]
		public void ScheduleForRecycle(TweenInstance instance)
		{
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x1378EEC", Offset = "0x1378EEC", VA = "0x1378EEC")]
		public void AddTween(TweenInstance instance)
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x1378890", Offset = "0x1378890", VA = "0x1378890")]
		public void RemoveTween(TweenInstance instance)
		{
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x137902C", Offset = "0x137902C", VA = "0x137902C")]
		public TweenRunner()
		{
		}
	}
}
namespace Leap.Unity.Examples
{
	[Token(Token = "0x20004C8")]
	public class InertiaPostProcessProvider : PostProcessProvider
	{
		[Serializable]
		[Token(Token = "0x20006CD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47B9C", Offset = "0xB47B9C")]
		private sealed class <>c
		{
			[Token(Token = "0x400230E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400230F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Hand, bool> <>9__14_0;

			[Token(Token = "0x4002310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Hand, bool> <>9__14_1;

			[Token(Token = "0x6002AD7")]
			[Address(RVA = "0x101D5D0", Offset = "0x101D5D0", VA = "0x101D5D0")]
			public <>c()
			{
			}

			[Token(Token = "0x6002AD8")]
			[Address(RVA = "0x101D5D8", Offset = "0x101D5D8", VA = "0x101D5D8")]
			internal bool <ProcessFrame>b__14_0(Hand h)
			{
				return default(bool);
			}

			[Token(Token = "0x6002AD9")]
			[Address(RVA = "0x101D5F0", Offset = "0x101D5F0", VA = "0x101D5F0")]
			internal bool <ProcessFrame>b__14_1(Hand h)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB5675C", Offset = "0xB5675C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB5675C", Offset = "0xB5675C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB5675C", Offset = "0xB5675C")]
		public float stiffness;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB567D4", Offset = "0xB567D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB567D4", Offset = "0xB567D4")]
		public float damping;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose? _leftPose;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Pose? _previousLeftPose;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _leftAge;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Pose? _rightPose;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Pose? _previousRightPose;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float _rightAge;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Pose? _fixedLeftPose;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Pose? _fixedPreviousLeftPose;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float _fixedLeftAge;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Pose? _fixedRightPose;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Pose? _fixedPreviousRightPose;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float _fixedRightAge;

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0x156FA00", Offset = "0x156FA00", VA = "0x156FA00", Slot = "8")]
		public override void ProcessFrame(ref Frame inputFrame)
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0x156FCA0", Offset = "0x156FCA0", VA = "0x156FCA0")]
		private void processHand(Hand hand, ref Pose? maybeCurPose, ref Pose? maybePrevPose, ref float handAge)
		{
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x156FF50", Offset = "0x156FF50", VA = "0x156FF50")]
		private void integratePose(ref Pose curPose, ref Pose prevPose, Pose targetPose, float deltaTime)
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x1570260", Offset = "0x1570260", VA = "0x1570260")]
		public InertiaPostProcessProvider()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class ProjectionPostProcessProvider : PostProcessProvider
	{
		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB56828", Offset = "0xB56828")]
		public Transform headTransform;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56860", Offset = "0xB56860")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB56860", Offset = "0xB56860")]
		public float projectionExponent;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB568B4", Offset = "0xB568B4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB568B4", Offset = "0xB568B4")]
		public float handMergeDistance;

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0x101DBA4", Offset = "0x101DBA4", VA = "0x101DBA4", Slot = "8")]
		public override void ProcessFrame(ref Frame inputFrame)
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0x101E0E0", Offset = "0x101E0E0", VA = "0x101E0E0")]
		public ProjectionPostProcessProvider()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46A64", Offset = "0xB46A64")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46A64", Offset = "0xB46A64")]
	public class TransformHandle : MonoBehaviour
	{
		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected InteractionBehaviour _intObj;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected TransformTool _tool;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnShouldShowHandle;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnShouldHideHandle;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent OnHandleActivated;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent OnHandleDeactivated;

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0x101FCA8", Offset = "0x101FCA8", VA = "0x101FCA8", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0x101FE64", Offset = "0x101FE64", VA = "0x101FE64")]
		public void syncRigidbodyWithTransform()
		{
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0x101FEE4", Offset = "0x101FEE4", VA = "0x101FEE4")]
		private void onGraspBegin()
		{
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0x1020140", Offset = "0x1020140", VA = "0x1020140")]
		private void onGraspEnd()
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0x1020298", Offset = "0x1020298", VA = "0x1020298")]
		public void EnsureVisible()
		{
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0x10202D8", Offset = "0x10202D8", VA = "0x10202D8")]
		public void EnsureHidden()
		{
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0x1020318", Offset = "0x1020318", VA = "0x1020318")]
		public TransformHandle()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46AEC", Offset = "0xB46AEC")]
	public class TransformRotationHandle : TransformHandle
	{
		[Token(Token = "0x60023EC")]
		[Address(RVA = "0x10203D0", Offset = "0x10203D0", VA = "0x10203D0", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0x1020490", Offset = "0x1020490", VA = "0x1020490")]
		private void onGraspedMovement(Vector3 presolvePos, Quaternion presolveRot, Vector3 solvedPos, Quaternion solvedRot, List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0x10207EC", Offset = "0x10207EC", VA = "0x10207EC")]
		public TransformRotationHandle()
		{
		}
	}
	[Token(Token = "0x20004CC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46B24", Offset = "0xB46B24")]
	public class TransformTool : MonoBehaviour
	{
		[Token(Token = "0x20006CE")]
		private enum ToolState
		{
			[Token(Token = "0x4002312")]
			Idle,
			[Token(Token = "0x4002313")]
			Translating,
			[Token(Token = "0x4002314")]
			Rotating
		}

		[Serializable]
		[Token(Token = "0x20006CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB47BAC", Offset = "0xB47BAC")]
		private sealed class <>c
		{
			[Token(Token = "0x4002315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<InteractionController, bool> <>9__14_0;

			[Token(Token = "0x6002ADB")]
			[Address(RVA = "0x1021698", Offset = "0x1021698", VA = "0x1021698")]
			public <>c()
			{
			}

			[Token(Token = "0x6002ADC")]
			[Address(RVA = "0x10216A0", Offset = "0x10216A0", VA = "0x10216A0")]
			internal bool <updateHandles>b__14_0(InteractionController controller)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56908", Offset = "0xB56908")]
		public InteractionManager interactionManager;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB56940", Offset = "0xB56940")]
		public Transform target;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _moveBuffer;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion _rotateBuffer;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HashSet<TransformHandle> _transformHandles;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ToolState _toolState;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private HashSet<TransformHandle> _activeHandles;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HashSet<TranslationAxis> _activeTranslationAxes;

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0x10207F0", Offset = "0x10207F0", VA = "0x10207F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0x1020984", Offset = "0x1020984", VA = "0x1020984")]
		private void Update()
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0x1021158", Offset = "0x1021158", VA = "0x1021158")]
		public void NotifyHandleMovement(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0x1020724", Offset = "0x1020724", VA = "0x1020724")]
		public void NotifyHandleRotation(Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x102120C", Offset = "0x102120C", VA = "0x102120C")]
		private void onPostPhysics()
		{
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0x1020988", Offset = "0x1020988", VA = "0x1020988")]
		private void updateHandles()
		{
		}

		[Token(Token = "0x60023F5")]
		[Address(RVA = "0x101FF20", Offset = "0x101FF20", VA = "0x101FF20")]
		public void NotifyHandleActivated(TransformHandle handle)
		{
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0x102017C", Offset = "0x102017C", VA = "0x102017C")]
		public void NotifyHandleDeactivated(TransformHandle handle)
		{
		}

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0x102151C", Offset = "0x102151C", VA = "0x102151C")]
		public TransformTool()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public enum TranslationAxis
	{
		[Token(Token = "0x4001B61")]
		X,
		[Token(Token = "0x4001B62")]
		Y,
		[Token(Token = "0x4001B63")]
		Z
	}
	[Token(Token = "0x20004CE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46B5C", Offset = "0xB46B5C")]
	public class TransformTranslationHandle : TransformHandle
	{
		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TranslationAxis axis;

		[Token(Token = "0x60023F8")]
		[Address(RVA = "0x10216C4", Offset = "0x10216C4", VA = "0x10216C4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0x1021784", Offset = "0x1021784", VA = "0x1021784")]
		private void onGraspedMovement(Vector3 presolvePos, Quaternion presolveRot, Vector3 solvedPos, Quaternion solvedRot, List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x1021934", Offset = "0x1021934", VA = "0x1021934")]
		public TransformTranslationHandle()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46B94", Offset = "0xB46B94")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46B94", Offset = "0xB46B94")]
	public class SimpleAnchorFeedback : MonoBehaviour
	{
		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform scaleTarget;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Anchor _anchor;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _initScaleVector;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _curScale;

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0x101E1BC", Offset = "0x101E1BC", VA = "0x101E1BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0x101E240", Offset = "0x101E240", VA = "0x101E240")]
		private void Update()
		{
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0x101E38C", Offset = "0x101E38C", VA = "0x101E38C")]
		public SimpleAnchorFeedback()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46C1C", Offset = "0xB46C1C")]
	public class SimpleMatchAnchorScaleAndState : MonoBehaviour
	{
		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnchorableBehaviour anchObj;

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x101E940", Offset = "0x101E940", VA = "0x101E940")]
		private void Update()
		{
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x101EB5C", Offset = "0x101EB5C", VA = "0x101EB5C")]
		public SimpleMatchAnchorScaleAndState()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46C54", Offset = "0xB46C54")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46C54", Offset = "0xB46C54")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46C54", Offset = "0xB46C54")]
	public class WorkstationBehaviourExample : MonoBehaviour
	{
		[Token(Token = "0x20006D0")]
		public enum WorkstationState
		{
			[Token(Token = "0x4002318")]
			Closed,
			[Token(Token = "0x4002319")]
			Traveling,
			[Token(Token = "0x400231A")]
			Opening,
			[Token(Token = "0x400231B")]
			Open,
			[Token(Token = "0x400231C")]
			Closing
		}

		[Token(Token = "0x20006D1")]
		public delegate Vector3 WorkstationPositionFunc(Vector3 userEyePosition, Quaternion userEyeRotation, Vector3 workstationObjInitPosition, Vector3 workstationObjInitVelocity, float workstationObjRadius, List<Vector3> otherWorkstationPositions, List<float> otherWorkstationRadii);

		[Token(Token = "0x20006D2")]
		public delegate Quaternion WorkstationRotationFunc(Vector3 userEyePosition, Vector3 targetWorkstationPosition);

		[Token(Token = "0x4001B6A")]
		public const float MAX_SPEED_AS_WORKSTATION = 0.005f;

		[Token(Token = "0x4001B6B")]
		public const float MIN_SPEED_TO_ACTIVATE_TRAVELING = 0.5f;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TransformTweenBehaviour workstationModeTween;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InteractionBehaviour _intObj;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnchorableBehaviour _anchObj;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _wasKinematicBeforeActivation;

		[Token(Token = "0x4001B70")]
		private const float MAX_TRAVEL_SPEED = 4f;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Tween _travelTween;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _initTravelTime;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _initTravelPosition;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 _initTravelVelocity;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion _initTravelRotation;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 _initTravelAngVelocity;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 _effGravity;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 _travelTargetPosition;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion _travelTargetRotation;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector2 _minMaxWorkstationTravelTime;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector2 _minMaxTravelTimeFromThrowSpeed;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public WorkstationPositionFunc workstationPositionFunc;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public WorkstationRotationFunc workstationRotationFunc;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<Vector3> _otherStationObjPositions;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<float> _otherStationObjRadii;

		[Token(Token = "0x17000371")]
		public bool isTraveling
		{
			[Token(Token = "0x6002400")]
			[Address(RVA = "0x1021938", Offset = "0x1021938", VA = "0x1021938")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000372")]
		public WorkstationState workstationState
		{
			[Token(Token = "0x6002401")]
			[Address(RVA = "0x102197C", Offset = "0x102197C", VA = "0x102197C")]
			get
			{
				return default(WorkstationState);
			}
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0x1021B04", Offset = "0x1021B04", VA = "0x1021B04")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0x1021C50", Offset = "0x1021C50", VA = "0x1021C50")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0x1021CEC", Offset = "0x1021CEC", VA = "0x1021CEC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0x1021D9C", Offset = "0x1021D9C", VA = "0x1021D9C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0x1021EB4", Offset = "0x1021EB4", VA = "0x1021EB4")]
		public void ActivateWorkstation()
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x1021F28", Offset = "0x1021F28", VA = "0x1021F28")]
		public void DeactivateWorkstation()
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x1021B08", Offset = "0x1021B08", VA = "0x1021B08")]
		private void refreshRequiredComponents()
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x1021F70", Offset = "0x1021F70", VA = "0x1021F70")]
		private void onGraspedMovement(Vector3 preSolvePos, Quaternion preSolveRot, Vector3 curPos, Quaternion curRot, List<InteractionController> controllers)
		{
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0x1022260", Offset = "0x1022260", VA = "0x1022260")]
		private void onPostObjectGraspEnd()
		{
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x1022608", Offset = "0x1022608", VA = "0x1022608")]
		private void beginTraveling(Vector3 initPosition, Vector3 initVelocity, Quaternion initRotation, Vector3 initAngVelocity, Vector3 targetPosition, Quaternion targetRotation)
		{
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x1022968", Offset = "0x1022968", VA = "0x1022968")]
		private void onTravelTweenProgress(float progress)
		{
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x1022D78", Offset = "0x1022D78", VA = "0x1022D78")]
		private void cancelTraveling()
		{
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0x1022B1C", Offset = "0x1022B1C", VA = "0x1022B1C")]
		private Vector3 evaluatePosition(Vector3 initialPosition, Vector3 initialVelocity, Vector3 gravity, float initialTime, float timeToEvaluate)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x1022C68", Offset = "0x1022C68", VA = "0x1022C68")]
		private Quaternion evaluateRotation(Quaternion initialRotation, Vector3 angularVelocity, float initialTime, float timeToEvaluate)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0x1021C54", Offset = "0x1021C54", VA = "0x1021C54")]
		private void initWorkstationPoseFunctions()
		{
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x1022474", Offset = "0x1022474", VA = "0x1022474")]
		private Vector3 determineWorkstationPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x1022598", Offset = "0x1022598", VA = "0x1022598")]
		private Quaternion determineWorkstationRotation(Vector3 workstationPosition)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x10234DC", Offset = "0x10234DC", VA = "0x10234DC")]
		public static Vector3 DefaultDetermineWorkstationPosition(Vector3 userEyePosition, Quaternion userEyeRotation, Vector3 workstationObjInitPosition, Vector3 workstationObjInitVelocity, float workstationObjRadius, List<Vector3> otherWorkstationPositions, List<float> otherWorkstationRadii)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x1023C38", Offset = "0x1023C38", VA = "0x1023C38")]
		public static Quaternion DefaultDetermineWorkstationRotation(Vector3 userEyePos, Vector3 workstationPosition)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x1023D6C", Offset = "0x1023D6C", VA = "0x1023D6C")]
		public WorkstationBehaviourExample()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46D04", Offset = "0xB46D04")]
	public class RenderWireSphere : MonoBehaviour, IRuntimeGizmoComponent
	{
		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color color;

		[Token(Token = "0x6002416")]
		[Address(RVA = "0x101E0F4", Offset = "0x101E0F4", VA = "0x101E0F4", Slot = "4")]
		public void OnDrawRuntimeGizmos(RuntimeGizmoDrawer drawer)
		{
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0x101E17C", Offset = "0x101E17C", VA = "0x101E17C")]
		public RenderWireSphere()
		{
		}
	}
	[Token(Token = "0x20004D3")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46D3C", Offset = "0xB46D3C")]
	[ExecuteInEditMode]
	public class WorkstationPoseTest : MonoBehaviour
	{
		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform userCamera;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform stationObj;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform stationObjOneSecLater;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float myRadius;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform otherOpenStationsParent;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Disable]
		public List<Vector3> otherOpenStationPositions;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Disable]
		public List<float> otherOpenStationRadii;

		[Token(Token = "0x6002418")]
		[Address(RVA = "0x1024120", Offset = "0x1024120", VA = "0x1024120")]
		private void Update()
		{
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x1024420", Offset = "0x1024420", VA = "0x1024420")]
		private void refreshLists()
		{
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x1024674", Offset = "0x1024674", VA = "0x1024674")]
		private void refreshRadius()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x1024714", Offset = "0x1024714", VA = "0x1024714")]
		public WorkstationPoseTest()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46D88", Offset = "0xB46D88")]
	public class AngularSpeedTextBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh textMesh;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Spaceship ship;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string angularSpeedPrefixText;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string angularSpeedPostfixText;

		[Token(Token = "0x600241C")]
		[Address(RVA = "0x156F494", Offset = "0x156F494", VA = "0x156F494")]
		private void Update()
		{
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x156F564", Offset = "0x156F564", VA = "0x156F564")]
		public AngularSpeedTextBehaviour()
		{
		}
	}
	[Token(Token = "0x20004D5")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46DC0", Offset = "0xB46DC0")]
	public class AutopilotSystem : MonoBehaviour
	{
		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Spaceship spaceship;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _targetSpeed;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _targetTorque;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _currentSpeed;

		[Token(Token = "0x17000373")]
		public float currentSpeed
		{
			[Token(Token = "0x600241E")]
			[Address(RVA = "0x156F56C", Offset = "0x156F56C", VA = "0x156F56C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x156F574", Offset = "0x156F574", VA = "0x156F574")]
		public void IncreaseSpeed()
		{
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x156F588", Offset = "0x156F588", VA = "0x156F588")]
		public void IncreaseTorque()
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x156F658", Offset = "0x156F658", VA = "0x156F658")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0x156F6CC", Offset = "0x156F6CC", VA = "0x156F6CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0x156F790", Offset = "0x156F790", VA = "0x156F790")]
		public AutopilotSystem()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46DF8", Offset = "0xB46DF8")]
	public class LinearReferenceSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Spaceship spaceship;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject toSpawn;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float forwardSpawnMultiplier;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 spawnOffset;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject _spawnedObj;

		[Token(Token = "0x6002424")]
		[Address(RVA = "0x101D610", Offset = "0x101D610", VA = "0x101D610")]
		private void Update()
		{
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x101D848", Offset = "0x101D848", VA = "0x101D848")]
		private void setSpawnPosition()
		{
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x101D980", Offset = "0x101D980", VA = "0x101D980")]
		public void Respawn()
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x101D984", Offset = "0x101D984", VA = "0x101D984")]
		public LinearReferenceSpawner()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46E30", Offset = "0xB46E30")]
	public class LinearSpeedTextBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh textMesh;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Spaceship ship;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string linearSpeedPrefixText;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string linearSpeedPostfixText;

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x101DA10", Offset = "0x101DA10", VA = "0x101DA10")]
		private void Update()
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0x101DB9C", Offset = "0x101DB9C", VA = "0x101DB9C")]
		public LinearSpeedTextBehaviour()
		{
		}
	}
	[Token(Token = "0x20004D8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46E68", Offset = "0xB46E68")]
	public class Spaceship : MonoBehaviour
	{
		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody _body;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _mass;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _accumulatedForce;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _accumulatedTorque;

		[Token(Token = "0x17000374")]
		public Rigidbody rigidbody
		{
			[Token(Token = "0x600242A")]
			[Address(RVA = "0x101EDC0", Offset = "0x101EDC0", VA = "0x101EDC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000375")]
		public Vector3 velocity
		{
			[Token(Token = "0x600242B")]
			[Address(RVA = "0x101EDC8", Offset = "0x101EDC8", VA = "0x101EDC8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600242C")]
			[Address(RVA = "0x101EDD4", Offset = "0x101EDD4", VA = "0x101EDD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000376")]
		public Vector3 shipAlignedVelocity
		{
			[Token(Token = "0x600242D")]
			[Address(RVA = "0x101DADC", Offset = "0x101DADC", VA = "0x101DADC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000377")]
		public Vector3 angularVelocity
		{
			[Token(Token = "0x600242E")]
			[Address(RVA = "0x101EDE0", Offset = "0x101EDE0", VA = "0x101EDE0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600242F")]
			[Address(RVA = "0x101EDEC", Offset = "0x101EDEC", VA = "0x101EDEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000378")]
		public Vector3 shipAlignedAngularVelocity
		{
			[Token(Token = "0x6002430")]
			[Address(RVA = "0x101EDF8", Offset = "0x101EDF8", VA = "0x101EDF8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0x101EEB8", Offset = "0x101EEB8", VA = "0x101EEB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0x101EF34", Offset = "0x101EF34", VA = "0x101EF34")]
		private void Start()
		{
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0x101F014", Offset = "0x101F014", VA = "0x101F014")]
		private void updateShipPhysics()
		{
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0x101F318", Offset = "0x101F318", VA = "0x101F318")]
		public void AddForce(Vector3 force)
		{
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0x101F3CC", Offset = "0x101F3CC", VA = "0x101F3CC")]
		public void AddForceAtPosition(Vector3 force, Vector3 position)
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0x101F608", Offset = "0x101F608", VA = "0x101F608")]
		public void AddShipAlignedTorque(Vector3 shipAlignedTorque)
		{
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x101F74C", Offset = "0x101F74C", VA = "0x101F74C")]
		public void AddShipAlignedForce(Vector3 shipAlignedForce)
		{
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x101F890", Offset = "0x101F890", VA = "0x101F890")]
		public Spaceship()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46EA0", Offset = "0xB46EA0")]
	public class SwapGraspExample : MonoBehaviour
	{
		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionBehaviour objA;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionBehaviour objB;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionButton swapButton;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _swapScheduled;

		[Token(Token = "0x6002439")]
		[Address(RVA = "0x101F8A0", Offset = "0x101F8A0", VA = "0x101F8A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600243A")]
		[Address(RVA = "0x101F9B4", Offset = "0x101F9B4", VA = "0x101F9B4")]
		private void scheduleSwap()
		{
		}

		[Token(Token = "0x600243B")]
		[Address(RVA = "0x101F9C0", Offset = "0x101F9C0", VA = "0x101F9C0")]
		private void onPostPhysics()
		{
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0x101FCA0", Offset = "0x101FCA0", VA = "0x101FCA0")]
		public SwapGraspExample()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46ED8", Offset = "0xB46ED8")]
	public class SimpleFacingCameraCallbacks : MonoBehaviour
	{
		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform toFaceCamera;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera cameraToFace;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _initialized;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _isFacingCamera;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnBeginFacingCamera;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent OnEndFacingCamera;

		[Token(Token = "0x600243D")]
		[Address(RVA = "0x101E39C", Offset = "0x101E39C", VA = "0x101E39C")]
		private void Start()
		{
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0x101E424", Offset = "0x101E424", VA = "0x101E424")]
		private void initialize()
		{
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0x101E634", Offset = "0x101E634", VA = "0x101E634")]
		private void Update()
		{
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0x101E4D8", Offset = "0x101E4D8", VA = "0x101E4D8")]
		public static bool GetIsFacingCamera(Transform facingTransform, Camera camera, float minAllowedDotProduct = 0.8f)
		{
			return default(bool);
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x101E72C", Offset = "0x101E72C", VA = "0x101E72C")]
		public SimpleFacingCameraCallbacks()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46F10", Offset = "0xB46F10")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46F10", Offset = "0xB46F10")]
	public class SimpleInteractionEmission : MonoBehaviour
	{
		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color nonPrimaryHoverEmission;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color primaryHoverEmission;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material _material;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _emissionColorId;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private InteractionBehaviour _intObj;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color _targetColor;

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x101E734", Offset = "0x101E734", VA = "0x101E734")]
		private void Start()
		{
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x101E80C", Offset = "0x101E80C", VA = "0x101E80C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002444")]
		[Address(RVA = "0x101E8FC", Offset = "0x101E8FC", VA = "0x101E8FC")]
		public SimpleInteractionEmission()
		{
		}
	}
	[Token(Token = "0x20004DC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB46F98", Offset = "0xB46F98")]
	public class SimpleRendererUtil : MonoBehaviour
	{
		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color activationColor;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer _renderer;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _materialInstance;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color _originalColor;

		[Token(Token = "0x6002445")]
		[Address(RVA = "0x101EB64", Offset = "0x101EB64", VA = "0x101EB64")]
		private void Start()
		{
		}

		[Token(Token = "0x6002446")]
		[Address(RVA = "0x101EBE4", Offset = "0x101EBE4", VA = "0x101EBE4")]
		public void SetToActivationColor()
		{
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0x101EC0C", Offset = "0x101EC0C", VA = "0x101EC0C")]
		public void SetToOriginalColor()
		{
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0x101EC34", Offset = "0x101EC34", VA = "0x101EC34")]
		public void ShowRenderer()
		{
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0x101EC54", Offset = "0x101EC54", VA = "0x101EC54")]
		public void HideRenderer()
		{
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0x101EC74", Offset = "0x101EC74", VA = "0x101EC74")]
		public SimpleRendererUtil()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB46FFC", Offset = "0xB46FFC")]
	public class SimpleScaleUtil : MonoBehaviour
	{
		[Token(Token = "0x600244B")]
		[Address(RVA = "0x101ECA8", Offset = "0x101ECA8", VA = "0x101ECA8")]
		public void SetLocalScale(float scale)
		{
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0x101ED4C", Offset = "0x101ED4C", VA = "0x101ED4C")]
		public SimpleScaleUtil()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB47034", Offset = "0xB47034")]
	public class SimpleTransformUtil : MonoBehaviour
	{
		[Token(Token = "0x600244D")]
		[Address(RVA = "0x101ED54", Offset = "0x101ED54", VA = "0x101ED54")]
		public void SetParentTo(Transform t)
		{
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0x101ED8C", Offset = "0x101ED8C", VA = "0x101ED8C")]
		public void ClearParentTransform()
		{
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0x101EDB8", Offset = "0x101EDB8", VA = "0x101EDB8")]
		public SimpleTransformUtil()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	public class IgnoreCollisionsInChildren : MonoBehaviour
	{
		[Token(Token = "0x6002450")]
		[Address(RVA = "0x156F808", Offset = "0x156F808", VA = "0x156F808")]
		private void Start()
		{
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0x156F824", Offset = "0x156F824", VA = "0x156F824")]
		public static void IgnoreCollisionsInChildrenOf(Transform t, bool ignore = true)
		{
		}

		[Token(Token = "0x6002452")]
		[Address(RVA = "0x156F9F8", Offset = "0x156F9F8", VA = "0x156F9F8")]
		public IgnoreCollisionsInChildren()
		{
		}
	}
}
namespace Kalman
{
	[Token(Token = "0x20004E0")]
	public interface IKalmanWrapper : IDisposable
	{
		[Token(Token = "0x6002453")]
		Vector3 Update(Vector3 current);
	}
	[Token(Token = "0x20004E1")]
	public sealed class KalmanFilter
	{
		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56998", Offset = "0xB56998")]
		private Matrix <X0>k__BackingField;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569A8", Offset = "0xB569A8")]
		private Matrix <P0>k__BackingField;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569B8", Offset = "0xB569B8")]
		private Matrix <F>k__BackingField;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569C8", Offset = "0xB569C8")]
		private Matrix <B>k__BackingField;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569D8", Offset = "0xB569D8")]
		private Matrix <U>k__BackingField;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569E8", Offset = "0xB569E8")]
		private Matrix <Q>k__BackingField;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB569F8", Offset = "0xB569F8")]
		private Matrix <H>k__BackingField;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A08", Offset = "0xB56A08")]
		private Matrix <R>k__BackingField;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A18", Offset = "0xB56A18")]
		private Matrix <State>k__BackingField;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A28", Offset = "0xB56A28")]
		private Matrix <Covariance>k__BackingField;

		[Token(Token = "0x17000379")]
		public Matrix X0
		{
			[Token(Token = "0x6002454")]
			[Address(RVA = "0x16D9358", Offset = "0x16D9358", VA = "0x16D9358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB614C8", Offset = "0xB614C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002455")]
			[Address(RVA = "0x16D9360", Offset = "0x16D9360", VA = "0x16D9360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB614D8", Offset = "0xB614D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037A")]
		public Matrix P0
		{
			[Token(Token = "0x6002456")]
			[Address(RVA = "0x16D9368", Offset = "0x16D9368", VA = "0x16D9368")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB614E8", Offset = "0xB614E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002457")]
			[Address(RVA = "0x16D9370", Offset = "0x16D9370", VA = "0x16D9370")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB614F8", Offset = "0xB614F8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037B")]
		public Matrix F
		{
			[Token(Token = "0x6002458")]
			[Address(RVA = "0x16D9378", Offset = "0x16D9378", VA = "0x16D9378")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61508", Offset = "0xB61508")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002459")]
			[Address(RVA = "0x16D9380", Offset = "0x16D9380", VA = "0x16D9380")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61518", Offset = "0xB61518")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037C")]
		public Matrix B
		{
			[Token(Token = "0x600245A")]
			[Address(RVA = "0x16D9388", Offset = "0x16D9388", VA = "0x16D9388")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61528", Offset = "0xB61528")]
			get
			{
				return null;
			}
			[Token(Token = "0x600245B")]
			[Address(RVA = "0x16D9390", Offset = "0x16D9390", VA = "0x16D9390")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61538", Offset = "0xB61538")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037D")]
		public Matrix U
		{
			[Token(Token = "0x600245C")]
			[Address(RVA = "0x16D9398", Offset = "0x16D9398", VA = "0x16D9398")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61548", Offset = "0xB61548")]
			get
			{
				return null;
			}
			[Token(Token = "0x600245D")]
			[Address(RVA = "0x16D93A0", Offset = "0x16D93A0", VA = "0x16D93A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61558", Offset = "0xB61558")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037E")]
		public Matrix Q
		{
			[Token(Token = "0x600245E")]
			[Address(RVA = "0x16D93A8", Offset = "0x16D93A8", VA = "0x16D93A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61568", Offset = "0xB61568")]
			get
			{
				return null;
			}
			[Token(Token = "0x600245F")]
			[Address(RVA = "0x16D93B0", Offset = "0x16D93B0", VA = "0x16D93B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61578", Offset = "0xB61578")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public Matrix H
		{
			[Token(Token = "0x6002460")]
			[Address(RVA = "0x16D93B8", Offset = "0x16D93B8", VA = "0x16D93B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61588", Offset = "0xB61588")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002461")]
			[Address(RVA = "0x16D93C0", Offset = "0x16D93C0", VA = "0x16D93C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61598", Offset = "0xB61598")]
			private set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public Matrix R
		{
			[Token(Token = "0x6002462")]
			[Address(RVA = "0x16D93C8", Offset = "0x16D93C8", VA = "0x16D93C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615A8", Offset = "0xB615A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002463")]
			[Address(RVA = "0x16D93D0", Offset = "0x16D93D0", VA = "0x16D93D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615B8", Offset = "0xB615B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public Matrix State
		{
			[Token(Token = "0x6002464")]
			[Address(RVA = "0x16D93D8", Offset = "0x16D93D8", VA = "0x16D93D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615C8", Offset = "0xB615C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002465")]
			[Address(RVA = "0x16D93E0", Offset = "0x16D93E0", VA = "0x16D93E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615D8", Offset = "0xB615D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public Matrix Covariance
		{
			[Token(Token = "0x6002466")]
			[Address(RVA = "0x16D93E8", Offset = "0x16D93E8", VA = "0x16D93E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615E8", Offset = "0xB615E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002467")]
			[Address(RVA = "0x16D93F0", Offset = "0x16D93F0", VA = "0x16D93F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB615F8", Offset = "0xB615F8")]
			private set
			{
			}
		}

		[Token(Token = "0x6002468")]
		[Address(RVA = "0x16D93F8", Offset = "0x16D93F8", VA = "0x16D93F8")]
		public KalmanFilter(Matrix f, Matrix b, Matrix u, Matrix q, Matrix h, Matrix r)
		{
		}

		[Token(Token = "0x6002469")]
		[Address(RVA = "0x16D9458", Offset = "0x16D9458", VA = "0x16D9458")]
		public void SetState(Matrix state, Matrix covariance)
		{
		}

		[Token(Token = "0x600246A")]
		[Address(RVA = "0x16D9460", Offset = "0x16D9460", VA = "0x16D9460")]
		public void Correct(Matrix z)
		{
		}
	}
	[Token(Token = "0x20004E2")]
	internal class KalmanFilterSimple1D
	{
		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A38", Offset = "0xB56A38")]
		private double <X0>k__BackingField;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A48", Offset = "0xB56A48")]
		private double <P0>k__BackingField;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A58", Offset = "0xB56A58")]
		private double <F>k__BackingField;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A68", Offset = "0xB56A68")]
		private double <Q>k__BackingField;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A78", Offset = "0xB56A78")]
		private double <H>k__BackingField;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A88", Offset = "0xB56A88")]
		private double <R>k__BackingField;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56A98", Offset = "0xB56A98")]
		private double <State>k__BackingField;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB56AA8", Offset = "0xB56AA8")]
		private double <Covariance>k__BackingField;

		[Token(Token = "0x17000383")]
		public double X0
		{
			[Token(Token = "0x600246B")]
			[Address(RVA = "0x16D970C", Offset = "0x16D970C", VA = "0x16D970C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61608", Offset = "0xB61608")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600246C")]
			[Address(RVA = "0x16D9714", Offset = "0x16D9714", VA = "0x16D9714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61618", Offset = "0xB61618")]
			private set
			{
			}
		}

		[Token(Token = "0x17000384")]
		public double P0
		{
			[Token(Token = "0x600246D")]
			[Address(RVA = "0x16D971C", Offset = "0x16D971C", VA = "0x16D971C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61628", Offset = "0xB61628")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600246E")]
			[Address(RVA = "0x16D9724", Offset = "0x16D9724", VA = "0x16D9724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61638", Offset = "0xB61638")]
			private set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public double F
		{
			[Token(Token = "0x600246F")]
			[Address(RVA = "0x16D972C", Offset = "0x16D972C", VA = "0x16D972C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61648", Offset = "0xB61648")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002470")]
			[Address(RVA = "0x16D9734", Offset = "0x16D9734", VA = "0x16D9734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61658", Offset = "0xB61658")]
			private set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public double Q
		{
			[Token(Token = "0x6002471")]
			[Address(RVA = "0x16D973C", Offset = "0x16D973C", VA = "0x16D973C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61668", Offset = "0xB61668")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002472")]
			[Address(RVA = "0x16D9744", Offset = "0x16D9744", VA = "0x16D9744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61678", Offset = "0xB61678")]
			private set
			{
			}
		}

		[Token(Token = "0x17000387")]
		public double H
		{
			[Token(Token = "0x6002473")]
			[Address(RVA = "0x16D974C", Offset = "0x16D974C", VA = "0x16D974C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61688", Offset = "0xB61688")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002474")]
			[Address(RVA = "0x16D9754", Offset = "0x16D9754", VA = "0x16D9754")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB61698", Offset = "0xB61698")]
			private set
			{
			}
		}

		[Token(Token = "0x17000388")]
		public double R
		{
			[Token(Token = "0x6002475")]
			[Address(RVA = "0x16D975C", Offset = "0x16D975C", VA = "0x16D975C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616A8", Offset = "0xB616A8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002476")]
			[Address(RVA = "0x16D9764", Offset = "0x16D9764", VA = "0x16D9764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616B8", Offset = "0xB616B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000389")]
		public double State
		{
			[Token(Token = "0x6002477")]
			[Address(RVA = "0x16D976C", Offset = "0x16D976C", VA = "0x16D976C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616C8", Offset = "0xB616C8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002478")]
			[Address(RVA = "0x16D9774", Offset = "0x16D9774", VA = "0x16D9774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616D8", Offset = "0xB616D8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700038A")]
		public double Covariance
		{
			[Token(Token = "0x6002479")]
			[Address(RVA = "0x16D977C", Offset = "0x16D977C", VA = "0x16D977C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616E8", Offset = "0xB616E8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x600247A")]
			[Address(RVA = "0x16D9784", Offset = "0x16D9784", VA = "0x16D9784")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB616F8", Offset = "0xB616F8")]
			private set
			{
			}
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x16D978C", Offset = "0x16D978C", VA = "0x16D978C")]
		public KalmanFilterSimple1D(double q, double r, double f = 1.0, double h = 1.0)
		{
		}

		[Token(Token = "0x600247C")]
		[Address(RVA = "0x16D97D8", Offset = "0x16D97D8", VA = "0x16D97D8")]
		public void SetState(double state, double covariance)
		{
		}

		[Token(Token = "0x600247D")]
		[Address(RVA = "0x16D97E0", Offset = "0x16D97E0", VA = "0x16D97E0")]
		public void Correct(double data)
		{
		}
	}
	[Token(Token = "0x20004E3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB4706C", Offset = "0xB4706C")]
	public class Matrix
	{
		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int rows;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int cols;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double[,] mat;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix L;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Matrix U;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] pi;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double detOfP;

		[Token(Token = "0x1700038B")]
		public double Item
		{
			[Token(Token = "0x6002481")]
			[Address(RVA = "0x16D99C0", Offset = "0x16D99C0", VA = "0x16D99C0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002482")]
			[Address(RVA = "0x16D9A18", Offset = "0x16D9A18", VA = "0x16D9A18")]
			set
			{
			}
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0x16D98B4", Offset = "0x16D98B4", VA = "0x16D98B4")]
		public Matrix(int iRows, int iCols)
		{
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0x16D994C", Offset = "0x16D994C", VA = "0x16D994C")]
		public Matrix(double[,] matrix)
		{
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0x16D99B0", Offset = "0x16D99B0", VA = "0x16D99B0")]
		public bool IsSquare()
		{
			return default(bool);
		}

		[Token(Token = "0x6002483")]
		[Address(RVA = "0x16D9A70", Offset = "0x16D9A70", VA = "0x16D9A70")]
		public Matrix GetCol(int k)
		{
			return null;
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x16D9B64", Offset = "0x16D9B64", VA = "0x16D9B64")]
		public void SetCol(Matrix v, int k)
		{
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x16D9C10", Offset = "0x16D9C10", VA = "0x16D9C10")]
		public void MakeLU()
		{
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x16DA22C", Offset = "0x16DA22C", VA = "0x16DA22C")]
		public Matrix SolveWith(Matrix v)
		{
			return null;
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x16D95E4", Offset = "0x16D95E4", VA = "0x16D95E4")]
		public Matrix Invert()
		{
			return null;
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0x16DA754", Offset = "0x16DA754", VA = "0x16DA754")]
		public double Det()
		{
			return default(double);
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0x16DA7CC", Offset = "0x16DA7CC", VA = "0x16DA7CC")]
		public Matrix GetP()
		{
			return null;
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0x16DA128", Offset = "0x16DA128", VA = "0x16DA128")]
		public Matrix Duplicate()
		{
			return null;
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0x16DA3A0", Offset = "0x16DA3A0", VA = "0x16DA3A0")]
		public static Matrix SubsForth(Matrix A, Matrix b)
		{
			return null;
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0x16DA518", Offset = "0x16DA518", VA = "0x16DA518")]
		public static Matrix SubsBack(Matrix A, Matrix b)
		{
			return null;
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0x16DA690", Offset = "0x16DA690", VA = "0x16DA690")]
		public static Matrix ZeroMatrix(int iRows, int iCols)
		{
			return null;
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0x16DA054", Offset = "0x16DA054", VA = "0x16DA054")]
		public static Matrix IdentityMatrix(int iRows, int iCols)
		{
			return null;
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0x16D9704", Offset = "0x16D9704", VA = "0x16D9704")]
		public static Matrix IdentityMatrix(int size)
		{
			return null;
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0x16DA87C", Offset = "0x16DA87C", VA = "0x16DA87C")]
		public static Matrix RandomMatrix(int iRows, int iCols, int dispersion)
		{
			return null;
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0x16DA988", Offset = "0x16DA988", VA = "0x16DA988")]
		public static Matrix Parse(string ps)
		{
			return null;
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0x16DAE10", Offset = "0x16DAE10", VA = "0x16DAE10", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0x16DAF70", Offset = "0x16DAF70", VA = "0x16DAF70")]
		public static Matrix Transpose(Matrix m)
		{
			return null;
		}

		[Token(Token = "0x6002494")]
		[Address(RVA = "0x16D95DC", Offset = "0x16D95DC", VA = "0x16D95DC")]
		public Matrix Transpose()
		{
			return null;
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0x16DB04C", Offset = "0x16DB04C", VA = "0x16DB04C")]
		public static Matrix Power(Matrix m, int pow)
		{
			return null;
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x16DB138", Offset = "0x16DB138", VA = "0x16DB138")]
		private static void SafeAplusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x16DB2AC", Offset = "0x16DB2AC", VA = "0x16DB2AC")]
		private static void SafeAminusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x16DB420", Offset = "0x16DB420", VA = "0x16DB420")]
		private static void SafeACopytoC(Matrix A, int xa, int ya, Matrix C, int size)
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0x16DB514", Offset = "0x16DB514", VA = "0x16DB514")]
		private static void AplusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x16DB5F0", Offset = "0x16DB5F0", VA = "0x16DB5F0")]
		private static void AminusBintoC(Matrix A, int xa, int ya, Matrix B, int xb, int yb, Matrix C, int size)
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0x16DB6CC", Offset = "0x16DB6CC", VA = "0x16DB6CC")]
		private static void ACopytoC(Matrix A, int xa, int ya, Matrix C, int size)
		{
		}

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x16DB768", Offset = "0x16DB768", VA = "0x16DB768")]
		private static Matrix StrassenMultiply(Matrix A, Matrix B)
		{
			return null;
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x16DC3F0", Offset = "0x16DC3F0", VA = "0x16DC3F0")]
		private static void StrassenMultiplyRun(Matrix A, Matrix B, Matrix C, int l, Matrix[,] f)
		{
		}

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x16DCEE4", Offset = "0x16DCEE4", VA = "0x16DCEE4")]
		public static Matrix StupidMultiply(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x16DD05C", Offset = "0x16DD05C", VA = "0x16DD05C")]
		private static Matrix Multiply(double n, Matrix m)
		{
			return null;
		}

		[Token(Token = "0x60024A0")]
		[Address(RVA = "0x16DD148", Offset = "0x16DD148", VA = "0x16DD148")]
		private static Matrix Add(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x16DACC8", Offset = "0x16DACC8", VA = "0x16DACC8")]
		public static string NormalizeMatrixString(string matStr)
		{
			return null;
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x16DD2A8", Offset = "0x16DD2A8", VA = "0x16DD2A8")]
		public static Matrix CreateVector(params double[] values)
		{
			return null;
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x16DD3A4", Offset = "0x16DD3A4", VA = "0x16DD3A4")]
		public static Matrix operator -(Matrix m)
		{
			return null;
		}

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0x16D95E0", Offset = "0x16D95E0", VA = "0x16D95E0")]
		public static Matrix operator +(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0x16D96D4", Offset = "0x16D96D4", VA = "0x16D96D4")]
		public static Matrix operator -(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0x16D95D8", Offset = "0x16D95D8", VA = "0x16D95D8")]
		public static Matrix operator *(Matrix m1, Matrix m2)
		{
			return null;
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0x16DD3AC", Offset = "0x16DD3AC", VA = "0x16DD3AC")]
		public static Matrix operator *(double n, Matrix m)
		{
			return null;
		}
	}
	[Token(Token = "0x20004E4")]
	public class MException : Exception
	{
		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x16D983C", Offset = "0x16D983C", VA = "0x16D983C")]
		public MException(string Message)
		{
		}
	}
	[Token(Token = "0x20004E5")]
	public class MatrixKalmanWrapper : IKalmanWrapper, IDisposable
	{
		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KalmanFilter kX;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KalmanFilter kY;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KalmanFilter kZ;

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x16DD3B0", Offset = "0x16DD3B0", VA = "0x16DD3B0")]
		public MatrixKalmanWrapper()
		{
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x16DD7F8", Offset = "0x16DD7F8", VA = "0x16DD7F8", Slot = "4")]
		public Vector3 Update(Vector3 current)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x16DDA40", Offset = "0x16DDA40", VA = "0x16DDA40", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0x16DD620", Offset = "0x16DD620", VA = "0x16DD620")]
		private KalmanFilter makeKalmanFilter(Matrix f, Matrix b, Matrix u, Matrix q, Matrix h, Matrix r)
		{
			return null;
		}
	}
	[Token(Token = "0x20004E6")]
	public class SimpleKalmanWrapper : IKalmanWrapper, IDisposable
	{
		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KalmanFilterSimple1D kX;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KalmanFilterSimple1D kY;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KalmanFilterSimple1D kZ;

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0x16DDA44", Offset = "0x16DDA44", VA = "0x16DDA44")]
		public SimpleKalmanWrapper()
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x16DDB68", Offset = "0x16DDB68", VA = "0x16DDB68", Slot = "4")]
		public Vector3 Update(Vector3 current)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x16DDC1C", Offset = "0x16DDC1C", VA = "0x16DDC1C", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0x16DDAD0", Offset = "0x16DDAD0", VA = "0x16DDAD0")]
		private KalmanFilterSimple1D makeKalmanFilter(double q, double r, double f, double h)
		{
			return null;
		}
	}
}
namespace Kalman.Simulate
{
	[Token(Token = "0x20004E7")]
	public sealed class GuassianRandom
	{
		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _hasDeviate;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double _storedDeviate;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _random;

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0x16DDC20", Offset = "0x16DDC20", VA = "0x16DDC20")]
		public GuassianRandom()
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0x16DDCAC", Offset = "0x16DDCAC", VA = "0x16DDCAC")]
		public double NextGuassian(double mu = 0.0, double sigma = 1.0)
		{
			return default(double);
		}
	}
}
