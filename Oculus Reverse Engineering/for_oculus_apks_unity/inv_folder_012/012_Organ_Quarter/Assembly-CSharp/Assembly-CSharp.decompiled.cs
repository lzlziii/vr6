using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using BNG;
using DynamicFogAndMist;
using INOQ;
using Il2CppDummyDll;
using Oculus.Platform;
using SRDebugger;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.PostProcessing;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityStandardAssets.ImageEffects;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class AIBirther : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float followSpeed;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float flySpeed;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float attackDistance;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float attackMoveSpeed;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] descendPoints;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RotateTowardsTargetObject rotateBone;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject trackPoint;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider WeakPoint;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshAgent agent;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform player;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Animator animator;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float distanceToPlayerSqr;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool destinationSet;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool dead;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int AIState;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashAscendState;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int hashAttackState;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x9A8710", Offset = "0x9A8710", VA = "0x9A8710")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x9A8A4C", Offset = "0x9A8A4C", VA = "0x9A8A4C")]
	private void AIBirther_OnEnemyDeath(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x9A8B84", Offset = "0x9A8B84", VA = "0x9A8B84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x9A9104", Offset = "0x9A9104", VA = "0x9A9104")]
	private Vector3 ChooseDescendPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x9A915C", Offset = "0x9A915C", VA = "0x9A915C")]
	public AIBirther()
	{
	}
}
[Token(Token = "0x2000003")]
public class AICarouselOrb : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	[CompilerGenerated]
	private sealed class <TurnOffFemaleCollider>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AICarouselOrb <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000014")]
			[Address(RVA = "0x9AA208", Offset = "0x9AA208", VA = "0x9AA208", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000016")]
			[Address(RVA = "0x9AA250", Offset = "0x9AA250", VA = "0x9AA250", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000011")]
		[Address(RVA = "0x9AA050", Offset = "0x9AA050", VA = "0x9AA050")]
		[DebuggerHidden]
		public <TurnOffFemaleCollider>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000012")]
		[Address(RVA = "0x9AA148", Offset = "0x9AA148", VA = "0x9AA148", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000013")]
		[Address(RVA = "0x9AA14C", Offset = "0x9AA14C", VA = "0x9AA14C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000015")]
		[Address(RVA = "0x9AA210", Offset = "0x9AA210", VA = "0x9AA210", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int AIState;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] shafts;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pedestal;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject spike;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float landDuration;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject soundObject;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int battleProgress;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EnemyHealth health;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float attackTimer;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform shadowSpawn;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject prefabShadowBall;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float landTimer;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator animator;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Collider femaleCollider;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip[] shadowAudios;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip deathAudio;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool tookDamage;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int liftHealthAmount;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip DamageLow;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip[] DamagesHigh;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool femaleDamage;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool dead;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashDamage;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashDie;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int hashLaunch;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x9A9238", Offset = "0x9A9238", VA = "0x9A9238")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x9A9530", Offset = "0x9A9530", VA = "0x9A9530")]
	private void AICarouselOrb_OnEnemyDamaged(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x9A981C", Offset = "0x9A981C", VA = "0x9A981C")]
	private void Health_OnEnemyDeath(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x9A9A28", Offset = "0x9A9A28", VA = "0x9A9A28")]
	private void Update()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x9A9DCC", Offset = "0x9A9DCC", VA = "0x9A9DCC")]
	private void SpawnShadowBall()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x9A95FC", Offset = "0x9A95FC", VA = "0x9A95FC")]
	private void playDamageSound()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x9A9FE8", Offset = "0x9A9FE8", VA = "0x9A9FE8")]
	[IteratorStateMachine(typeof(<TurnOffFemaleCollider>d__31))]
	private IEnumerator TurnOffFemaleCollider()
	{
		return null;
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x9A9984", Offset = "0x9A9984", VA = "0x9A9984")]
	private void ToggleShafts(bool state)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x9AA078", Offset = "0x9AA078", VA = "0x9AA078")]
	public AICarouselOrb()
	{
	}
}
[Token(Token = "0x2000005")]
public class AICarouselShaft : MonoBehaviour
{
	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float frequency;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool toggled;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float randomFreq;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float shaftTimer;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator animator;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashDeploy;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashRecede;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x9AA258", Offset = "0x9AA258", VA = "0x9AA258")]
	private void Start()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x9AA2F8", Offset = "0x9AA2F8", VA = "0x9AA2F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x9AA2C8", Offset = "0x9AA2C8", VA = "0x9AA2C8")]
	private void ChooseRandomFreq()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x9AA3F4", Offset = "0x9AA3F4", VA = "0x9AA3F4")]
	public AICarouselShaft()
	{
	}
}
[Token(Token = "0x2000006")]
public class AIEat : MonoBehaviour
{
	[Token(Token = "0x2000007")]
	[CompilerGenerated]
	private sealed class <DelayEat>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIEat <>4__this;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000024")]
			[Address(RVA = "0x9AA9D8", Offset = "0x9AA9D8", VA = "0x9AA9D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000026")]
			[Address(RVA = "0x9AAA20", Offset = "0x9AAA20", VA = "0x9AAA20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000021")]
		[Address(RVA = "0x9AA5E4", Offset = "0x9AA5E4", VA = "0x9AA5E4")]
		[DebuggerHidden]
		public <DelayEat>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000022")]
		[Address(RVA = "0x9AA70C", Offset = "0x9AA70C", VA = "0x9AA70C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0x9AA710", Offset = "0x9AA710", VA = "0x9AA710", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0x9AA9E0", Offset = "0x9AA9E0", VA = "0x9AA9E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000008")]
	[CompilerGenerated]
	private sealed class <DelayIdle>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIEat <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600002A")]
			[Address(RVA = "0x9AACF4", Offset = "0x9AACF4", VA = "0x9AACF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600002C")]
			[Address(RVA = "0x9AAD3C", Offset = "0x9AAD3C", VA = "0x9AAD3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0x9AA674", Offset = "0x9AA674", VA = "0x9AA674")]
		[DebuggerHidden]
		public <DelayIdle>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000028")]
		[Address(RVA = "0x9AAA28", Offset = "0x9AAA28", VA = "0x9AAA28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0x9AAA2C", Offset = "0x9AAA2C", VA = "0x9AAA2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0x9AACFC", Offset = "0x9AACFC", VA = "0x9AACFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AIWander wanderAI;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioEating;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioChewing;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject soundObject;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator animator;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x9AA498", Offset = "0x9AA498", VA = "0x9AA498")]
	private void Start()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x9AA57C", Offset = "0x9AA57C", VA = "0x9AA57C")]
	[IteratorStateMachine(typeof(<DelayEat>d__7))]
	private IEnumerator DelayEat()
	{
		return null;
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x9AA60C", Offset = "0x9AA60C", VA = "0x9AA60C")]
	[IteratorStateMachine(typeof(<DelayIdle>d__8))]
	private IEnumerator DelayIdle()
	{
		return null;
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x9AA69C", Offset = "0x9AA69C", VA = "0x9AA69C")]
	public AIEat()
	{
	}
}
[Token(Token = "0x2000009")]
public class AIFinalForm : MonoBehaviour
{
	[Token(Token = "0x200000A")]
	[CompilerGenerated]
	private sealed class <StartBattle>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIFinalForm <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0x9AC22C", Offset = "0x9AC22C", VA = "0x9AC22C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000041")]
			[Address(RVA = "0x9AC274", Offset = "0x9AC274", VA = "0x9AC274", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0x9AB328", Offset = "0x9AB328", VA = "0x9AB328")]
		[DebuggerHidden]
		public <StartBattle>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0x9ABE40", Offset = "0x9ABE40", VA = "0x9ABE40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0x9ABE44", Offset = "0x9ABE44", VA = "0x9ABE44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000040")]
		[Address(RVA = "0x9AC234", Offset = "0x9AC234", VA = "0x9AC234", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000B")]
	[CompilerGenerated]
	private sealed class <StartDialogue>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIFinalForm <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000045")]
			[Address(RVA = "0x9AC39C", Offset = "0x9AC39C", VA = "0x9AC39C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000047")]
			[Address(RVA = "0x9AC3E4", Offset = "0x9AC3E4", VA = "0x9AC3E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0x9AB550", Offset = "0x9AB550", VA = "0x9AB550")]
		[DebuggerHidden]
		public <StartDialogue>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0x9AC27C", Offset = "0x9AC27C", VA = "0x9AC27C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000044")]
		[Address(RVA = "0x9AC280", Offset = "0x9AC280", VA = "0x9AC280", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x9AC3A4", Offset = "0x9AC3A4", VA = "0x9AC3A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000C")]
	[CompilerGenerated]
	private sealed class <ChangeBossMusic>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIFinalForm <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600004B")]
			[Address(RVA = "0x9AC594", Offset = "0x9AC594", VA = "0x9AC594", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600004D")]
			[Address(RVA = "0x9AC5DC", Offset = "0x9AC5DC", VA = "0x9AC5DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000048")]
		[Address(RVA = "0x9ABC04", Offset = "0x9ABC04", VA = "0x9ABC04")]
		[DebuggerHidden]
		public <ChangeBossMusic>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6000049")]
		[Address(RVA = "0x9AC3EC", Offset = "0x9AC3EC", VA = "0x9AC3EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600004A")]
		[Address(RVA = "0x9AC3F0", Offset = "0x9AC3F0", VA = "0x9AC3F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600004C")]
		[Address(RVA = "0x9AC59C", Offset = "0x9AC59C", VA = "0x9AC59C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <InvulnerableAlset>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIFinalForm <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000051")]
			[Address(RVA = "0x9AC6B0", Offset = "0x9AC6B0", VA = "0x9AC6B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000053")]
			[Address(RVA = "0x9AC6F8", Offset = "0x9AC6F8", VA = "0x9AC6F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600004E")]
		[Address(RVA = "0x9ABC2C", Offset = "0x9ABC2C", VA = "0x9ABC2C")]
		[DebuggerHidden]
		public <InvulnerableAlset>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x600004F")]
		[Address(RVA = "0x9AC5E4", Offset = "0x9AC5E4", VA = "0x9AC5E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000050")]
		[Address(RVA = "0x9AC5E8", Offset = "0x9AC5E8", VA = "0x9AC5E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0x9AC6B8", Offset = "0x9AC6B8", VA = "0x9AC6B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000E")]
	[CompilerGenerated]
	private sealed class <DelayUltimateColliders>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int delay;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AIFinalForm <>4__this;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000057")]
			[Address(RVA = "0x9AC928", Offset = "0x9AC928", VA = "0x9AC928", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000059")]
			[Address(RVA = "0x9AC970", Offset = "0x9AC970", VA = "0x9AC970", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0x9ABC54", Offset = "0x9ABC54", VA = "0x9ABC54")]
		[DebuggerHidden]
		public <DelayUltimateColliders>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x9AC700", Offset = "0x9AC700", VA = "0x9AC700", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x9AC704", Offset = "0x9AC704", VA = "0x9AC704", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0x9AC930", Offset = "0x9AC930", VA = "0x9AC930", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int AIState;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EnemyHealth health;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator bossAnim;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator rotateAnim;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool rotating;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool attacking;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float rotateTimer;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minRotateWait;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maxRotateWait;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int damageUntilUltimate;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int damageUntilDying;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timeToRotate;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int healthToRotate;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float actionTimer;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeToAttack;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int lastAttack;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Collider colliderAlset;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Collider[] collidersUltimate;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject[] objectsToToggle;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject bossMusic1;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject bossMusic2;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip song2;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioSource dialogueSource;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject cylinderBG;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject introBlock;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject reflection;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public FinalFadeOut finalFadeOut;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private RandomStaticAudio[] randomAudio;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool dead;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private int attackSpeed;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAttack;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashAttackLeft;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int hashAttackMouth;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int hashAttackRight;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int hashDamaged;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int hashRotate;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int hashTransform;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static readonly int hashUltimateIdle;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public DialogScriptableObject DialogSO;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int subtitleIndex;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x9AAD44", Offset = "0x9AAD44", VA = "0x9AAD44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x9AAE10", Offset = "0x9AAE10", VA = "0x9AAE10")]
	private void Health_OnEnemyDamaged(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x9AB178", Offset = "0x9AB178", VA = "0x9AB178")]
	private void Health_OnEnemyDeath(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x9AB2C0", Offset = "0x9AB2C0", VA = "0x9AB2C0")]
	[IteratorStateMachine(typeof(<StartBattle>d__41))]
	private IEnumerator StartBattle()
	{
		return null;
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x9AB350", Offset = "0x9AB350", VA = "0x9AB350")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x9AB540", Offset = "0x9AB540", VA = "0x9AB540")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x9AADA8", Offset = "0x9AADA8", VA = "0x9AADA8")]
	[IteratorStateMachine(typeof(<StartDialogue>d__46))]
	private IEnumerator StartDialogue()
	{
		return null;
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x9AB578", Offset = "0x9AB578", VA = "0x9AB578")]
	private void Update()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x9AAE14", Offset = "0x9AAE14", VA = "0x9AAE14")]
	private void Damaged()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x9AB9D0", Offset = "0x9AB9D0", VA = "0x9AB9D0")]
	[IteratorStateMachine(typeof(<ChangeBossMusic>d__49))]
	private IEnumerator ChangeBossMusic()
	{
		return null;
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x9AB8F0", Offset = "0x9AB8F0", VA = "0x9AB8F0")]
	[IteratorStateMachine(typeof(<InvulnerableAlset>d__50))]
	private IEnumerator InvulnerableAlset()
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x9AB958", Offset = "0x9AB958", VA = "0x9AB958")]
	[IteratorStateMachine(typeof(<DelayUltimateColliders>d__51))]
	private IEnumerator DelayUltimateColliders(int delay)
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x9AB190", Offset = "0x9AB190", VA = "0x9AB190")]
	private void Death()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x9ABC7C", Offset = "0x9ABC7C", VA = "0x9ABC7C")]
	public AIFinalForm()
	{
	}
}
[Token(Token = "0x200000F")]
public class AIFinalFormAttackEvents : MonoBehaviour
{
	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider RightAttackCollider;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider LeftAttackCollider;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform AlsetPoint;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform UltimatePoint;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rightAttackPoint;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform leftAttackPoint;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject prefabShadowBall;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool ultimateAttacking;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float shadowTimer;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x9AC978", Offset = "0x9AC978", VA = "0x9AC978")]
	private void Start()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x9AC97C", Offset = "0x9AC97C", VA = "0x9AC97C")]
	private void Update()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x9ACACC", Offset = "0x9ACACC", VA = "0x9ACACC")]
	public void UltimateAttackToggle()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x9ACAE0", Offset = "0x9ACAE0", VA = "0x9ACAE0")]
	public void AlsetAttack()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x9ACBE4", Offset = "0x9ACBE4", VA = "0x9ACBE4")]
	public void ToggleRightCollider()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x9ACD88", Offset = "0x9ACD88", VA = "0x9ACD88")]
	public void ToggleLeftCollider()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x9ACF2C", Offset = "0x9ACF2C", VA = "0x9ACF2C")]
	public void FinalFormEnd()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x9ACF50", Offset = "0x9ACF50", VA = "0x9ACF50")]
	public AIFinalFormAttackEvents()
	{
	}
}
[Token(Token = "0x2000010")]
public class AIMaggot : MonoBehaviour
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SightCollider sightCollider;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioDrop;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject soundObject;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool landed;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private EnemyHealth health;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x9ACF58", Offset = "0x9ACF58", VA = "0x9ACF58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x9AD010", Offset = "0x9AD010", VA = "0x9AD010")]
	private void SightCollider_OnPlayerSighted()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x9AD0C8", Offset = "0x9AD0C8", VA = "0x9AD0C8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x9AD360", Offset = "0x9AD360", VA = "0x9AD360")]
	public AIMaggot()
	{
	}
}
[Token(Token = "0x2000011")]
public class AIMonsterGeneric : MonoBehaviour
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SightCollider sightCollider;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RotateTowardsTarget rotatorBone;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private EnemyDangerTrackCollider dangerTrack;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioSighted;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x9AD3D0", Offset = "0x9AD3D0", VA = "0x9AD3D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x9AD5CC", Offset = "0x9AD5CC", VA = "0x9AD5CC")]
	private void StartFollow()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x9AD8C4", Offset = "0x9AD8C4", VA = "0x9AD8C4")]
	private void StopFollow()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x9ADAB8", Offset = "0x9ADAB8", VA = "0x9ADAB8")]
	public AIMonsterGeneric()
	{
	}
}
[Token(Token = "0x2000012")]
public class AIMonsterSpider : MonoBehaviour
{
	[Token(Token = "0x2000013")]
	[CompilerGenerated]
	private sealed class <DelayFlight>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIMonsterSpider <>4__this;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000078")]
			[Address(RVA = "0x9AE670", Offset = "0x9AE670", VA = "0x9AE670", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600007A")]
			[Address(RVA = "0x9AE6B8", Offset = "0x9AE6B8", VA = "0x9AE6B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0x9ADCD8", Offset = "0x9ADCD8", VA = "0x9ADCD8")]
		[DebuggerHidden]
		public <DelayFlight>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0x9AE5B0", Offset = "0x9AE5B0", VA = "0x9AE5B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0x9AE5B4", Offset = "0x9AE5B4", VA = "0x9AE5B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x9AE678", Offset = "0x9AE678", VA = "0x9AE678", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000014")]
	[CompilerGenerated]
	private sealed class <DelayLanding>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIMonsterSpider <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600007E")]
			[Address(RVA = "0x9AE780", Offset = "0x9AE780", VA = "0x9AE780", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0x9AE7C8", Offset = "0x9AE7C8", VA = "0x9AE7C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x9ADD68", Offset = "0x9ADD68", VA = "0x9ADD68")]
		[DebuggerHidden]
		public <DelayLanding>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0x9AE6C0", Offset = "0x9AE6C0", VA = "0x9AE6C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x9AE6C4", Offset = "0x9AE6C4", VA = "0x9AE6C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x9AE788", Offset = "0x9AE788", VA = "0x9AE788", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SightCollider sightCollider;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minFlyDelay;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxFlyDelay;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator anim;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine coAnim;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashFly;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashLand;

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x9ADAC0", Offset = "0x9ADAC0", VA = "0x9ADAC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x9ADC70", Offset = "0x9ADC70", VA = "0x9ADC70")]
	[IteratorStateMachine(typeof(<DelayFlight>d__8))]
	private IEnumerator DelayFlight()
	{
		return null;
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x9ADD00", Offset = "0x9ADD00", VA = "0x9ADD00")]
	[IteratorStateMachine(typeof(<DelayLanding>d__9))]
	private IEnumerator DelayLanding()
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x9ADD90", Offset = "0x9ADD90", VA = "0x9ADD90")]
	public void StartFlight()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x9ADE4C", Offset = "0x9ADE4C", VA = "0x9ADE4C")]
	public void EndFlight()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x9ADF08", Offset = "0x9ADF08", VA = "0x9ADF08")]
	public void Aggro()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x9ADFE8", Offset = "0x9ADFE8", VA = "0x9ADFE8")]
	public void DeAggro()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x9AE0D8", Offset = "0x9AE0D8", VA = "0x9AE0D8")]
	public void Die(EnemyHealth health)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x9AE50C", Offset = "0x9AE50C", VA = "0x9AE50C")]
	public AIMonsterSpider()
	{
	}
}
[Token(Token = "0x2000015")]
public class AIProximityAggro : MonoBehaviour
{
	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float aggroRange;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SightCollider sightCollider;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform player;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform rootTransform;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float distanceToPlayerSqr;

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x9AE7D0", Offset = "0x9AE7D0", VA = "0x9AE7D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x9AE894", Offset = "0x9AE894", VA = "0x9AE894")]
	private void Update()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x9AE934", Offset = "0x9AE934", VA = "0x9AE934")]
	public AIProximityAggro()
	{
	}
}
[Token(Token = "0x2000016")]
public class AIWander : MonoBehaviour
{
	[Token(Token = "0x2000017")]
	[CompilerGenerated]
	private sealed class <StartWander>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIWander <>4__this;

		[Token(Token = "0x17000015")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000092")]
			[Address(RVA = "0x9AF1A0", Offset = "0x9AF1A0", VA = "0x9AF1A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000094")]
			[Address(RVA = "0x9AF1E8", Offset = "0x9AF1E8", VA = "0x9AF1E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0x9AED9C", Offset = "0x9AED9C", VA = "0x9AED9C")]
		[DebuggerHidden]
		public <StartWander>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0x9AF030", Offset = "0x9AF030", VA = "0x9AF030", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x9AF034", Offset = "0x9AF034", VA = "0x9AF034", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x9AF1A8", Offset = "0x9AF1A8", VA = "0x9AF1A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000018")]
	[CompilerGenerated]
	private sealed class <StartWander>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIWander <>4__this;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 destination;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000098")]
			[Address(RVA = "0x9AF354", Offset = "0x9AF354", VA = "0x9AF354", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600009A")]
			[Address(RVA = "0x9AF39C", Offset = "0x9AF39C", VA = "0x9AF39C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x9AEDC4", Offset = "0x9AEDC4", VA = "0x9AEDC4")]
		[DebuggerHidden]
		public <StartWander>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x9AF1F0", Offset = "0x9AF1F0", VA = "0x9AF1F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x9AF1F4", Offset = "0x9AF1F4", VA = "0x9AF1F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000099")]
		[Address(RVA = "0x9AF35C", Offset = "0x9AF35C", VA = "0x9AF35C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000019")]
	[CompilerGenerated]
	private sealed class <EndWander>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIWander <>4__this;

		[Token(Token = "0x17000019")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600009E")]
			[Address(RVA = "0x9AF4EC", Offset = "0x9AF4EC", VA = "0x9AF4EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000A0")]
			[Address(RVA = "0x9AF534", Offset = "0x9AF534", VA = "0x9AF534", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0x9AEDEC", Offset = "0x9AEDEC", VA = "0x9AEDEC")]
		[DebuggerHidden]
		public <EndWander>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x9AF3A4", Offset = "0x9AF3A4", VA = "0x9AF3A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0x9AF3A8", Offset = "0x9AF3A8", VA = "0x9AF3A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600009F")]
		[Address(RVA = "0x9AF4F4", Offset = "0x9AF4F4", VA = "0x9AF4F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NavMeshAgent agent;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform player;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 playerDirection;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator animator;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private NavMeshHit navHit;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int AnimStateIdle;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int AnimStateWalk;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float defaultSpeed;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float minWaitTime;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float maxWaitTime;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float maxWanderTime;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform initialDestination;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float distanceToPointSqr;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool reachedTarget;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	private bool navPointSet;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Coroutine coWander;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x9AE93C", Offset = "0x9AE93C", VA = "0x9AE93C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x9AD9F4", Offset = "0x9AD9F4", VA = "0x9AD9F4")]
	public void RestartWander()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x9AEC20", Offset = "0x9AEC20", VA = "0x9AEC20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x9AEBB8", Offset = "0x9AEBB8", VA = "0x9AEBB8")]
	[IteratorStateMachine(typeof(<StartWander>d__20))]
	private IEnumerator StartWander()
	{
		return null;
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x9AEB2C", Offset = "0x9AEB2C", VA = "0x9AEB2C")]
	[IteratorStateMachine(typeof(<StartWander>d__21))]
	private IEnumerator StartWander(Vector3 destination)
	{
		return null;
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x9AED34", Offset = "0x9AED34", VA = "0x9AED34")]
	[IteratorStateMachine(typeof(<EndWander>d__22))]
	private IEnumerator EndWander()
	{
		return null;
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x9AEE14", Offset = "0x9AEE14", VA = "0x9AEE14")]
	private void SetRandomDestination()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x9AEFAC", Offset = "0x9AEFAC", VA = "0x9AEFAC")]
	private void StopWander(EnemyHealth health)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x9AEF28", Offset = "0x9AEF28", VA = "0x9AEF28")]
	public static Vector3 RandomNavSphere(Vector3 origin, float distance, int layermask)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x9AEFC0", Offset = "0x9AEFC0", VA = "0x9AEFC0")]
	public AIWander()
	{
	}
}
[Token(Token = "0x200001A")]
public class AlsetMovieTrigger : MonoBehaviour
{
	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject movieScreen;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material movieMat;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objectsToToggle;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator curtainAnim;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DialogScriptableObject DialogSO;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int subtitleIndex;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x9AF53C", Offset = "0x9AF53C", VA = "0x9AF53C")]
	public void TriggerMovie()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x9AF6D4", Offset = "0x9AF6D4", VA = "0x9AF6D4")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x9AF8C4", Offset = "0x9AF8C4", VA = "0x9AF8C4")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x9AF8D4", Offset = "0x9AF8D4", VA = "0x9AF8D4")]
	public AlsetMovieTrigger()
	{
	}
}
[Token(Token = "0x200001B")]
public class AmmoCount : MonoBehaviour
{
	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text text;

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x9AF944", Offset = "0x9AF944", VA = "0x9AF944")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x9AF994", Offset = "0x9AF994", VA = "0x9AF994")]
	public void UpdateAmmo(int ammoID)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x9AFA70", Offset = "0x9AFA70", VA = "0x9AFA70")]
	public AmmoCount()
	{
	}
}
[Token(Token = "0x200001C")]
public class AnimSoundEvent : MonoBehaviour
{
	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int ID;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip animSound;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float soundVolume;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool randomPitchEnabled;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject animSoundObject;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float randyPitch;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DialogScriptableObject DialogSO;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int subtitleIndex;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x9AFA78", Offset = "0x9AFA78", VA = "0x9AFA78")]
	public void playAnimSound(int soundID)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x9AFCF4", Offset = "0x9AFCF4", VA = "0x9AFCF4")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x9AFEE4", Offset = "0x9AFEE4", VA = "0x9AFEE4")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x9AFEF4", Offset = "0x9AFEF4", VA = "0x9AFEF4")]
	public AnimSoundEvent()
	{
	}
}
[Token(Token = "0x200001D")]
public class ApartmentElevatorEvent : MonoBehaviour
{
	[Token(Token = "0x200001E")]
	[CompilerGenerated]
	private sealed class <Delay1>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ApartmentElevatorEvent <>4__this;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B5")]
			[Address(RVA = "0x9B01EC", Offset = "0x9B01EC", VA = "0x9B01EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B7")]
			[Address(RVA = "0x9B0234", Offset = "0x9B0234", VA = "0x9B0234", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x9AFF8C", Offset = "0x9AFF8C", VA = "0x9AFF8C")]
		[DebuggerHidden]
		public <Delay1>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x9B00DC", Offset = "0x9B00DC", VA = "0x9B00DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x9B00E0", Offset = "0x9B00E0", VA = "0x9B00E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x9B01F4", Offset = "0x9B01F4", VA = "0x9B01F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001F")]
	[CompilerGenerated]
	private sealed class <Delay2>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ApartmentElevatorEvent <>4__this;

		[Token(Token = "0x1700001D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000BB")]
			[Address(RVA = "0x9B0338", Offset = "0x9B0338", VA = "0x9B0338", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000BD")]
			[Address(RVA = "0x9B0380", Offset = "0x9B0380", VA = "0x9B0380", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x9B001C", Offset = "0x9B001C", VA = "0x9B001C")]
		[DebuggerHidden]
		public <Delay2>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x9B023C", Offset = "0x9B023C", VA = "0x9B023C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x9B0240", Offset = "0x9B0240", VA = "0x9B0240", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x9B0340", Offset = "0x9B0340", VA = "0x9B0340", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000020")]
	[CompilerGenerated]
	private sealed class <Delay3>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ApartmentElevatorEvent <>4__this;

		[Token(Token = "0x1700001F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000C1")]
			[Address(RVA = "0x9B0474", Offset = "0x9B0474", VA = "0x9B0474", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000C3")]
			[Address(RVA = "0x9B04BC", Offset = "0x9B04BC", VA = "0x9B04BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x9B00AC", Offset = "0x9B00AC", VA = "0x9B00AC")]
		[DebuggerHidden]
		public <Delay3>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x9B0388", Offset = "0x9B0388", VA = "0x9B0388", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x9B038C", Offset = "0x9B038C", VA = "0x9B038C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x9B047C", Offset = "0x9B047C", VA = "0x9B047C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lights;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioBreakdown;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject soundObject;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string sceneID;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int warpID;

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x9AFF04", Offset = "0x9AFF04", VA = "0x9AFF04")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x9AFF24", Offset = "0x9AFF24", VA = "0x9AFF24")]
	[IteratorStateMachine(typeof(<Delay1>d__6))]
	private IEnumerator Delay1()
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x9AFFB4", Offset = "0x9AFFB4", VA = "0x9AFFB4")]
	[IteratorStateMachine(typeof(<Delay2>d__7))]
	private IEnumerator Delay2()
	{
		return null;
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x9B0044", Offset = "0x9B0044", VA = "0x9B0044")]
	[IteratorStateMachine(typeof(<Delay3>d__8))]
	private IEnumerator Delay3()
	{
		return null;
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x9B00D4", Offset = "0x9B00D4", VA = "0x9B00D4")]
	public ApartmentElevatorEvent()
	{
	}
}
[Token(Token = "0x2000021")]
public class AttackHitboxCollider : MonoBehaviour
{
	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int attackDamage;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SightCollider enemySightConfirm;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x9B04C4", Offset = "0x9B04C4", VA = "0x9B04C4")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x9B05C4", Offset = "0x9B05C4", VA = "0x9B05C4")]
	public AttackHitboxCollider()
	{
	}
}
[Token(Token = "0x2000022")]
public class AttackHitboxEvent : MonoBehaviour
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider[] attackColliders;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem[] particles;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int attackDamage;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool toggle;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x9B05CC", Offset = "0x9B05CC", VA = "0x9B05CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x9B0660", Offset = "0x9B0660", VA = "0x9B0660")]
	public void toggleHitbox()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x9B06D8", Offset = "0x9B06D8", VA = "0x9B06D8")]
	public void playAttackParticles()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x9B0738", Offset = "0x9B0738", VA = "0x9B0738")]
	public void turnOffHitbox()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x9B079C", Offset = "0x9B079C", VA = "0x9B079C")]
	public AttackHitboxEvent()
	{
	}
}
[Token(Token = "0x2000023")]
public class AudioFadeControl : MonoBehaviour
{
	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxVolume;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeSpeed;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool fadeIn;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool fadeOut;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool fadeInOnAwake;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource audioSource;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x9B07A4", Offset = "0x9B07A4", VA = "0x9B07A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x9B0804", Offset = "0x9B0804", VA = "0x9B0804")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x9A9DBC", Offset = "0x9A9DBC", VA = "0x9A9DBC")]
	public void FadeIn(float speed, float volume)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x9A8B74", Offset = "0x9A8B74", VA = "0x9A8B74")]
	public void FadeOut(float speed)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x9B0914", Offset = "0x9B0914", VA = "0x9B0914")]
	public AudioFadeControl()
	{
	}
}
[Token(Token = "0x2000024")]
public class AudioTransition : MonoBehaviour
{
	[Token(Token = "0x2000025")]
	[CompilerGenerated]
	private sealed class <DelayDestroy>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioTransition <>4__this;

		[Token(Token = "0x17000021")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D6")]
			[Address(RVA = "0x9B0BE4", Offset = "0x9B0BE4", VA = "0x9B0BE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000D8")]
			[Address(RVA = "0x9B0C2C", Offset = "0x9B0C2C", VA = "0x9B0C2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x9B0A48", Offset = "0x9B0A48", VA = "0x9B0A48")]
		[DebuggerHidden]
		public <DelayDestroy>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x9B0A78", Offset = "0x9B0A78", VA = "0x9B0A78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x9B0A7C", Offset = "0x9B0A7C", VA = "0x9B0A7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x9B0BEC", Offset = "0x9B0BEC", VA = "0x9B0BEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x9B091C", Offset = "0x9B091C", VA = "0x9B091C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x9B09E0", Offset = "0x9B09E0", VA = "0x9B09E0")]
	[IteratorStateMachine(typeof(<DelayDestroy>d__1))]
	private IEnumerator DelayDestroy()
	{
		return null;
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x9B0A70", Offset = "0x9B0A70", VA = "0x9B0A70")]
	public AudioTransition()
	{
	}
}
[Token(Token = "0x2000026")]
public class AutoSnapZone : MonoBehaviour
{
	[Token(Token = "0x2000027")]
	[CompilerGenerated]
	private sealed class <DelayCheckSnap>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoSnapZone <>4__this;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000E1")]
			[Address(RVA = "0x9B130C", Offset = "0x9B130C", VA = "0x9B130C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000E3")]
			[Address(RVA = "0x9B1354", Offset = "0x9B1354", VA = "0x9B1354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x9B0F10", Offset = "0x9B0F10", VA = "0x9B0F10")]
		[DebuggerHidden]
		public <DelayCheckSnap>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x9B0FB4", Offset = "0x9B0FB4", VA = "0x9B0FB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x9B0FB8", Offset = "0x9B0FB8", VA = "0x9B0FB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x9B1314", Offset = "0x9B1314", VA = "0x9B1314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool checking;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> collidingObjects;

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x9B0C34", Offset = "0x9B0C34", VA = "0x9B0C34")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x9B0CC4", Offset = "0x9B0CC4", VA = "0x9B0CC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x9B0CC8", Offset = "0x9B0CC8", VA = "0x9B0CC8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x9B0C5C", Offset = "0x9B0C5C", VA = "0x9B0C5C")]
	[IteratorStateMachine(typeof(<DelayCheckSnap>d__5))]
	private IEnumerator DelayCheckSnap()
	{
		return null;
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x9B0F38", Offset = "0x9B0F38", VA = "0x9B0F38")]
	public AutoSnapZone()
	{
	}
}
[Token(Token = "0x2000028")]
public class BatteryConsole : MonoBehaviour
{
	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BatteryConsoleSlot[] batterySlots;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] lights;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer overPowerLight;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioOverpower;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material matLit;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material matRedLit;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material matUnlit;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool[] openStates;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator[] doorAnims;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool[] toggleStates;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashClose;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashOpen;

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x9B135C", Offset = "0x9B135C", VA = "0x9B135C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x9B1360", Offset = "0x9B1360", VA = "0x9B1360")]
	public void CheckSlots()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x9B16B4", Offset = "0x9B16B4", VA = "0x9B16B4")]
	private void ToggleDoors()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x9B1868", Offset = "0x9B1868", VA = "0x9B1868")]
	public BatteryConsole()
	{
	}
}
[Token(Token = "0x2000029")]
public class BatteryConsoleSlot : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	[CompilerGenerated]
	private sealed class <DelayCheckSnap>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BatteryConsoleSlot <>4__this;

		[Token(Token = "0x17000025")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F1")]
			[Address(RVA = "0x9B1D1C", Offset = "0x9B1D1C", VA = "0x9B1D1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F3")]
			[Address(RVA = "0x9B1D64", Offset = "0x9B1D64", VA = "0x9B1D64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x9B1C18", Offset = "0x9B1C18", VA = "0x9B1C18")]
		[DebuggerHidden]
		public <DelayCheckSnap>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x9B1C48", Offset = "0x9B1C48", VA = "0x9B1C48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x9B1C4C", Offset = "0x9B1C4C", VA = "0x9B1C4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x9B1D24", Offset = "0x9B1D24", VA = "0x9B1D24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PuzzleSnapZone puzzleSnap;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SnapZone snapDrop;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BatteryConsole console;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool powered;

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x9B196C", Offset = "0x9B196C", VA = "0x9B196C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x9B1BD8", Offset = "0x9B1BD8", VA = "0x9B1BD8")]
	private void SnapDrop_ObjectSnappedToDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x9B1BF8", Offset = "0x9B1BF8", VA = "0x9B1BF8")]
	private void SnapDrop_ObjectUnsnappedFromDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x9B1B70", Offset = "0x9B1B70", VA = "0x9B1B70")]
	[IteratorStateMachine(typeof(<DelayCheckSnap>d__7))]
	private IEnumerator DelayCheckSnap()
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x9B1C40", Offset = "0x9B1C40", VA = "0x9B1C40")]
	public BatteryConsoleSlot()
	{
	}
}
[Token(Token = "0x200002B")]
public class BatteryDoor : MonoBehaviour
{
	[Token(Token = "0x200002C")]
	[CompilerGenerated]
	private sealed class <DelayCheckSnap>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BatteryDoor <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000FF")]
			[Address(RVA = "0x9B22E0", Offset = "0x9B22E0", VA = "0x9B22E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000101")]
			[Address(RVA = "0x9B2328", Offset = "0x9B2328", VA = "0x9B2328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x9B20BC", Offset = "0x9B20BC", VA = "0x9B20BC")]
		[DebuggerHidden]
		public <DelayCheckSnap>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x9B2228", Offset = "0x9B2228", VA = "0x9B2228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x9B222C", Offset = "0x9B222C", VA = "0x9B222C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x9B22E8", Offset = "0x9B22E8", VA = "0x9B22E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator doorAnim;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PuzzleSnapZone puzzleSnap;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SnapZone snapDrop;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioOpen;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip audioClose;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashClose;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashOpen;

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x9B1D6C", Offset = "0x9B1D6C", VA = "0x9B1D6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x9B1F94", Offset = "0x9B1F94", VA = "0x9B1F94")]
	private void SnapDrop_ObjectSnappedToDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x9B2018", Offset = "0x9B2018", VA = "0x9B2018")]
	private void SnapDrop_ObjectUnsnappedFromDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x9B1F2C", Offset = "0x9B1F2C", VA = "0x9B1F2C")]
	[IteratorStateMachine(typeof(<DelayCheckSnap>d__11))]
	private IEnumerator DelayCheckSnap()
	{
		return null;
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x9B20E4", Offset = "0x9B20E4", VA = "0x9B20E4")]
	private void OpenDoor()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x9B201C", Offset = "0x9B201C", VA = "0x9B201C")]
	private void CloseDoor()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x9B2184", Offset = "0x9B2184", VA = "0x9B2184")]
	public BatteryDoor()
	{
	}
}
[Token(Token = "0x200002D")]
public class BillboardScript : MonoBehaviour
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool lockXZ;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool fadeOnPlayerDistance;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform player;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fadeStrength;

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x9B2330", Offset = "0x9B2330", VA = "0x9B2330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x9B238C", Offset = "0x9B238C", VA = "0x9B238C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x9B25FC", Offset = "0x9B25FC", VA = "0x9B25FC")]
	public BillboardScript()
	{
	}
}
[Token(Token = "0x200002E")]
public class BulletScript : MonoBehaviour
{
	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject collisionParticle;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject goreParticle;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bloodParticle;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int damage;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x9B2604", Offset = "0x9B2604", VA = "0x9B2604")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x9B2870", Offset = "0x9B2870", VA = "0x9B2870")]
	public BulletScript()
	{
	}
}
[Token(Token = "0x200002F")]
public class ChemicalDrop : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int chemicalColor;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip chemicalMiss;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip chemicalHit;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject animSoundObject;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform rootTransform;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isPlaying;

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x9B2878", Offset = "0x9B2878", VA = "0x9B2878")]
	private void Start()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x9B287C", Offset = "0x9B287C", VA = "0x9B287C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x9B29A8", Offset = "0x9B29A8", VA = "0x9B29A8")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x9B2EB4", Offset = "0x9B2EB4", VA = "0x9B2EB4")]
	public ChemicalDrop()
	{
	}
}
[Token(Token = "0x2000030")]
public class ChemicalItem : MonoBehaviour
{
	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject rootGameObject;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefabClean;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsUnlockAchievement;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x9B2EBC", Offset = "0x9B2EBC", VA = "0x9B2EBC")]
	public void CleanItem()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x9B3020", Offset = "0x9B3020", VA = "0x9B3020")]
	public ChemicalItem()
	{
	}
}
[Token(Token = "0x2000031")]
public class ChemicalVat : MonoBehaviour
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer rend;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Color defaultColor;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int redDrops;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int greenDrops;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int blueDrops;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem particleStart;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem particleCorrect;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip audioClean;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool tooManyDrops;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool locked;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	public bool correctChemical;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int puzzleID;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GameObject> itemsInTub;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x9B3028", Offset = "0x9B3028", VA = "0x9B3028")]
	private void Start()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x9B3110", Offset = "0x9B3110", VA = "0x9B3110")]
	private void Update()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x9B2C10", Offset = "0x9B2C10", VA = "0x9B2C10")]
	public void AddColor(int colorID)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x9B3290", Offset = "0x9B3290", VA = "0x9B3290")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x9B33E8", Offset = "0x9B33E8", VA = "0x9B33E8")]
	private void OnTriggerExit(Collider collision)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x9B34FC", Offset = "0x9B34FC", VA = "0x9B34FC")]
	public ChemicalVat()
	{
	}
}
[Token(Token = "0x2000032")]
public class ControllerCustomModel : MonoBehaviour
{
	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject currentModel;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject defaultModel;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x9B3578", Offset = "0x9B3578", VA = "0x9B3578")]
	private void Start()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x9B3584", Offset = "0x9B3584", VA = "0x9B3584")]
	public void ToggleModel()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x9B3638", Offset = "0x9B3638", VA = "0x9B3638")]
	public ControllerCustomModel()
	{
	}
}
[Token(Token = "0x2000033")]
public class ControllerHeadVisiblity : MonoBehaviour
{
	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 playerDirection;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject player;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit rayHit;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool isVisible;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public LayerMask rayLayer;

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x9B3640", Offset = "0x9B3640", VA = "0x9B3640")]
	private void Start()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x9B3690", Offset = "0x9B3690", VA = "0x9B3690")]
	private void Update()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x9B38B4", Offset = "0x9B38B4", VA = "0x9B38B4")]
	public ControllerHeadVisiblity()
	{
	}
}
[Token(Token = "0x2000034")]
public class ControlSchemePrimary : MonoBehaviour
{
	[Token(Token = "0x6000119")]
	[Address(RVA = "0x9B38BC", Offset = "0x9B38BC", VA = "0x9B38BC")]
	public ControlSchemePrimary()
	{
	}
}
[Token(Token = "0x2000035")]
public class ControlSchemeSecondary : MonoBehaviour
{
	[Token(Token = "0x600011A")]
	[Address(RVA = "0x9B38C4", Offset = "0x9B38C4", VA = "0x9B38C4")]
	public ControlSchemeSecondary()
	{
	}
}
[Token(Token = "0x2000036")]
public class CreditsText : MonoBehaviour
{
	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text[] creditTexts;

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x9B38CC", Offset = "0x9B38CC", VA = "0x9B38CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x9B38D0", Offset = "0x9B38D0", VA = "0x9B38D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x9B38D4", Offset = "0x9B38D4", VA = "0x9B38D4")]
	private void changeText(string text)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x9B3944", Offset = "0x9B3944", VA = "0x9B3944")]
	public CreditsText()
	{
	}
}
[Token(Token = "0x2000037")]
public class CreditsTextLine : MonoBehaviour
{
	[Token(Token = "0x2000038")]
	[CompilerGenerated]
	private sealed class <DelayStart>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreditsTextLine <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000126")]
			[Address(RVA = "0x9B3E88", Offset = "0x9B3E88", VA = "0x9B3E88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000128")]
			[Address(RVA = "0x9B3ED0", Offset = "0x9B3ED0", VA = "0x9B3ED0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x9B3ABC", Offset = "0x9B3ABC", VA = "0x9B3ABC")]
		[DebuggerHidden]
		public <DelayStart>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x9B3D8C", Offset = "0x9B3D8C", VA = "0x9B3D8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x9B3D90", Offset = "0x9B3D90", VA = "0x9B3D90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x9B3E90", Offset = "0x9B3E90", VA = "0x9B3E90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform headPoint;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float followSpeed;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float scrollSpeed;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform player;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI textPro;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool detach;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool lockInPlace;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool following;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TMP_FontAsset defaultFontAsset;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TMP_FontAsset fallbackFontAsset;

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x9B394C", Offset = "0x9B394C", VA = "0x9B394C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x9B3A54", Offset = "0x9B3A54", VA = "0x9B3A54")]
	[IteratorStateMachine(typeof(<DelayStart>d__11))]
	private IEnumerator DelayStart()
	{
		return null;
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x9B3AE4", Offset = "0x9B3AE4", VA = "0x9B3AE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x9B3D84", Offset = "0x9B3D84", VA = "0x9B3D84")]
	public CreditsTextLine()
	{
	}
}
[Token(Token = "0x2000039")]
public class DancerHeadTrigger : MonoBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RotateTowardsTargetObject[] rotators;

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x9B3ED8", Offset = "0x9B3ED8", VA = "0x9B3ED8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x9B3F98", Offset = "0x9B3F98", VA = "0x9B3F98")]
	public DancerHeadTrigger()
	{
	}
}
[Token(Token = "0x200003A")]
public class DangerTrack : MonoBehaviour
{
	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int dangerAudioLevel;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource dangerAudio;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fadeInSpeed;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fadeOutSpeed;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxVolume;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<GameObject> aggroMonsterList;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool fadeIn;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool fadeOut;

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x9B3FA0", Offset = "0x9B3FA0", VA = "0x9B3FA0")]
	private void Start()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x9B4044", Offset = "0x9B4044", VA = "0x9B4044")]
	private void OnSceneLoad(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x9B40C8", Offset = "0x9B40C8", VA = "0x9B40C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x9B418C", Offset = "0x9B418C", VA = "0x9B418C")]
	public void startDanger(GameObject monster, int dangerLevel)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x9B42E8", Offset = "0x9B42E8", VA = "0x9B42E8")]
	public void stopDanger(GameObject monster)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x9B4420", Offset = "0x9B4420", VA = "0x9B4420")]
	public DangerTrack()
	{
	}
}
[Token(Token = "0x200003B")]
public class DelayOnStart : MonoBehaviour
{
	[Token(Token = "0x200003C")]
	[CompilerGenerated]
	private sealed class <DelayStart>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DelayOnStart <>4__this;

		[Token(Token = "0x1700002B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000138")]
			[Address(RVA = "0x9B47FC", Offset = "0x9B47FC", VA = "0x9B47FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600013A")]
			[Address(RVA = "0x9B4844", Offset = "0x9B4844", VA = "0x9B4844", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x9B4524", Offset = "0x9B4524", VA = "0x9B4524")]
		[DebuggerHidden]
		public <DelayStart>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x9B4748", Offset = "0x9B4748", VA = "0x9B4748", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000137")]
		[Address(RVA = "0x9B474C", Offset = "0x9B474C", VA = "0x9B474C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x9B4804", Offset = "0x9B4804", VA = "0x9B4804", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Behaviour[] behavioursToToggle;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objectsToToggle;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] enemiesToFollow;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int puzzleToActivate;

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x9B449C", Offset = "0x9B449C", VA = "0x9B449C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x9B44BC", Offset = "0x9B44BC", VA = "0x9B44BC")]
	[IteratorStateMachine(typeof(<DelayStart>d__6))]
	private IEnumerator DelayStart()
	{
		return null;
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x9B454C", Offset = "0x9B454C", VA = "0x9B454C")]
	private void Trigger()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x9B4738", Offset = "0x9B4738", VA = "0x9B4738")]
	public DelayOnStart()
	{
	}
}
[Token(Token = "0x200003D")]
public class DestroyOnTime : MonoBehaviour
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x9B484C", Offset = "0x9B484C", VA = "0x9B484C")]
	private void Start()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x9B48C8", Offset = "0x9B48C8", VA = "0x9B48C8")]
	public DestroyOnTime()
	{
	}
}
[Token(Token = "0x200003E")]
public class DifficultyItemSpawn : MonoBehaviour
{
	[Token(Token = "0x200003F")]
	[CompilerGenerated]
	private sealed class <DelayCheck>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DifficultyItemSpawn <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0x9B4CB0", Offset = "0x9B4CB0", VA = "0x9B4CB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000146")]
			[Address(RVA = "0x9B4CF8", Offset = "0x9B4CF8", VA = "0x9B4CF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x9B49C8", Offset = "0x9B49C8", VA = "0x9B49C8")]
		[DebuggerHidden]
		public <DelayCheck>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x9B4C08", Offset = "0x9B4C08", VA = "0x9B4C08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x9B4C0C", Offset = "0x9B4C0C", VA = "0x9B4C0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0x9B4CB8", Offset = "0x9B4CB8", VA = "0x9B4CB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minPistolAmmo;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int minShotgunAmmo;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int minSMGAmmo;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int minSyringes;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int minHealthkits;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool onlySpawnOnEasy;

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x9B48D0", Offset = "0x9B48D0", VA = "0x9B48D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x9B4960", Offset = "0x9B4960", VA = "0x9B4960")]
	[IteratorStateMachine(typeof(<DelayCheck>d__7))]
	private IEnumerator DelayCheck()
	{
		return null;
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x9B49F0", Offset = "0x9B49F0", VA = "0x9B49F0")]
	private void CheckSpawn()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x9B4C00", Offset = "0x9B4C00", VA = "0x9B4C00")]
	public DifficultyItemSpawn()
	{
	}
}
[Token(Token = "0x2000040")]
public class DisableOnStart : MonoBehaviour
{
	[Token(Token = "0x6000147")]
	[Address(RVA = "0x9B4D00", Offset = "0x9B4D00", VA = "0x9B4D00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x9B4D24", Offset = "0x9B4D24", VA = "0x9B4D24")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x9B4DF8", Offset = "0x9B4DF8", VA = "0x9B4DF8")]
	public DisableOnStart()
	{
	}
}
[Token(Token = "0x2000041")]
public class DongAI : MonoBehaviour
{
	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider contactCollider;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator anim;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x9B4E00", Offset = "0x9B4E00", VA = "0x9B4E00")]
	private void Start()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x9B4F3C", Offset = "0x9B4F3C", VA = "0x9B4F3C")]
	private void LaunchAttack(Collider collider)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x9B4FB0", Offset = "0x9B4FB0", VA = "0x9B4FB0")]
	private void StopAttack(Collider collider)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x9B5024", Offset = "0x9B5024", VA = "0x9B5024")]
	public DongAI()
	{
	}
}
[Token(Token = "0x2000042")]
[RequireComponent(typeof(Grabbable))]
public class DoorExit : MonoBehaviour
{
	[Token(Token = "0x2000043")]
	[CompilerGenerated]
	private sealed class <DelayInit>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DoorExit <>4__this;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000159")]
			[Address(RVA = "0x9B567C", Offset = "0x9B567C", VA = "0x9B567C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600015B")]
			[Address(RVA = "0x9B56C4", Offset = "0x9B56C4", VA = "0x9B56C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x9B51DC", Offset = "0x9B51DC", VA = "0x9B51DC")]
		[DebuggerHidden]
		public <DelayInit>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x9B554C", Offset = "0x9B554C", VA = "0x9B554C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x9B5550", Offset = "0x9B5550", VA = "0x9B5550", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x9B5684", Offset = "0x9B5684", VA = "0x9B5684", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneID;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int warpID;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip exitSound;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string altScene;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int altWarp;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int altPuzzle;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool locked;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool ignoreSavingRoom;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip audioLocked;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isToggled;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool grabbed;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioSource;

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x9B5094", Offset = "0x9B5094", VA = "0x9B5094")]
	private void Start()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x9B5174", Offset = "0x9B5174", VA = "0x9B5174")]
	[IteratorStateMachine(typeof(<DelayInit>d__13))]
	private IEnumerator DelayInit()
	{
		return null;
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x9B5204", Offset = "0x9B5204", VA = "0x9B5204")]
	public void ToggleDoor()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x9B5210", Offset = "0x9B5210", VA = "0x9B5210")]
	public void UnToggleDoor()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x9B5218", Offset = "0x9B5218", VA = "0x9B5218")]
	public void GripPressed()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x9B52EC", Offset = "0x9B52EC", VA = "0x9B52EC")]
	[ContextMenu("Force Grab")]
	private void DoGrabbed()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x9B54F4", Offset = "0x9B54F4", VA = "0x9B54F4")]
	public DoorExit()
	{
	}
}
[Token(Token = "0x2000044")]
public class DoorLockControl : MonoBehaviour
{
	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DoorExit door;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ElevatorEnter elevator;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isElevator;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int superPuzzleLock;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x9B56CC", Offset = "0x9B56CC", VA = "0x9B56CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x9B57EC", Offset = "0x9B57EC", VA = "0x9B57EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x9B58C8", Offset = "0x9B58C8", VA = "0x9B58C8")]
	public DoorLockControl()
	{
	}
}
[Token(Token = "0x2000045")]
public class DrawForwardLine : MonoBehaviour
{
	[Token(Token = "0x600015F")]
	[Address(RVA = "0x9B58D0", Offset = "0x9B58D0", VA = "0x9B58D0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x9B59AC", Offset = "0x9B59AC", VA = "0x9B59AC")]
	public DrawForwardLine()
	{
	}
}
[Token(Token = "0x2000046")]
[RequireComponent(typeof(AudioSource))]
public class EasyAudioFadeIn : MonoBehaviour
{
	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float approxSecondsToFade;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxVolume;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioSource audioFade;

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x9B59B4", Offset = "0x9B59B4", VA = "0x9B59B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x9B5A04", Offset = "0x9B5A04", VA = "0x9B5A04")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x9B5ACC", Offset = "0x9B5ACC", VA = "0x9B5ACC")]
	public EasyAudioFadeIn()
	{
	}
}
[Token(Token = "0x2000047")]
public class ElevatorButton : MonoBehaviour
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int floor;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject floorLight;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material litLight;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material offLight;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x9B5ADC", Offset = "0x9B5ADC", VA = "0x9B5ADC")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x9B5D1C", Offset = "0x9B5D1C", VA = "0x9B5D1C")]
	public ElevatorButton()
	{
	}
}
[Token(Token = "0x2000048")]
public class ElevatorEnter : MonoBehaviour
{
	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject elevatorManager;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int floor;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string sceneID;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int warpID;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip exitSound;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip audioLocked;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool locked;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool isToggled;

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x9B5D24", Offset = "0x9B5D24", VA = "0x9B5D24")]
	public void ToggleDoor()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x9B5D30", Offset = "0x9B5D30", VA = "0x9B5D30")]
	public void UnToggleDoor()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x9B5D38", Offset = "0x9B5D38", VA = "0x9B5D38")]
	public void GripPressed()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x9B5D48", Offset = "0x9B5D48", VA = "0x9B5D48")]
	private void DoGrabbed()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x9B5F30", Offset = "0x9B5F30", VA = "0x9B5F30")]
	public ElevatorEnter()
	{
	}
}
[Token(Token = "0x2000049")]
public class ElevatorExitButton : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200004A")]
	public class ElevatorData
	{
		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int floor;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string SceneExit;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int WarpID;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int nextMap;

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x9B6248", Offset = "0x9B6248", VA = "0x9B6248")]
		public ElevatorData()
		{
		}
	}

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ElevatorData[] elevatorData;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip exitAudio;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip noExitAudio;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ElevatorManager manager;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private INOQ.InventoryPoint inventoryPoint;

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x9B5F38", Offset = "0x9B5F38", VA = "0x9B5F38")]
	private void Start()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x9B5FA8", Offset = "0x9B5FA8", VA = "0x9B5FA8")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x9B6140", Offset = "0x9B6140", VA = "0x9B6140")]
	private void ExitElevator(ElevatorData data)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x9B6240", Offset = "0x9B6240", VA = "0x9B6240")]
	public ElevatorExitButton()
	{
	}
}
[Token(Token = "0x200004B")]
public class ElevatorManager : MonoBehaviour
{
	[Token(Token = "0x200004C")]
	[CompilerGenerated]
	private sealed class <StartElevator>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ElevatorManager <>4__this;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int time;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000177")]
			[Address(RVA = "0x9B64A4", Offset = "0x9B64A4", VA = "0x9B64A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000179")]
			[Address(RVA = "0x9B64EC", Offset = "0x9B64EC", VA = "0x9B64EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x9B6334", Offset = "0x9B6334", VA = "0x9B6334")]
		[DebuggerHidden]
		public <StartElevator>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x9B6364", Offset = "0x9B6364", VA = "0x9B6364", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x9B6368", Offset = "0x9B6368", VA = "0x9B6368", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x9B64AC", Offset = "0x9B64AC", VA = "0x9B64AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentFloor;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip elevatorMoveSound;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip elevatorStopSound;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool inMotion;

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x9B6250", Offset = "0x9B6250", VA = "0x9B6250")]
	private void Start()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x9B5C74", Offset = "0x9B5C74", VA = "0x9B5C74")]
	public bool InitiateButton(int floor)
	{
		return default(bool);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x9B62BC", Offset = "0x9B62BC", VA = "0x9B62BC")]
	[IteratorStateMachine(typeof(<StartElevator>d__6))]
	private IEnumerator StartElevator(int time)
	{
		return null;
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x9B635C", Offset = "0x9B635C", VA = "0x9B635C")]
	public ElevatorManager()
	{
	}
}
[Token(Token = "0x200004D")]
public class EndingCredits : MonoBehaviour
{
	[Token(Token = "0x200004E")]
	[CompilerGenerated]
	private sealed class <LaunchScene>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000185")]
			[Address(RVA = "0x9B6CB8", Offset = "0x9B6CB8", VA = "0x9B6CB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000187")]
			[Address(RVA = "0x9B6D00", Offset = "0x9B6D00", VA = "0x9B6D00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x9B674C", Offset = "0x9B674C", VA = "0x9B674C")]
		[DebuggerHidden]
		public <LaunchScene>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x9B6A4C", Offset = "0x9B6A4C", VA = "0x9B6A4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x9B6A50", Offset = "0x9B6A50", VA = "0x9B6A50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0x9B6CC0", Offset = "0x9B6CC0", VA = "0x9B6CC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200004F")]
	[CompilerGenerated]
	private sealed class <SpawnMainLine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600018B")]
			[Address(RVA = "0x9B7040", Offset = "0x9B7040", VA = "0x9B7040", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600018D")]
			[Address(RVA = "0x9B7088", Offset = "0x9B7088", VA = "0x9B7088", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x9B67DC", Offset = "0x9B67DC", VA = "0x9B67DC")]
		[DebuggerHidden]
		public <SpawnMainLine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x9B6D08", Offset = "0x9B6D08", VA = "0x9B6D08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x9B6D0C", Offset = "0x9B6D0C", VA = "0x9B6D0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x9B7048", Offset = "0x9B7048", VA = "0x9B7048", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000050")]
	[CompilerGenerated]
	private sealed class <DelayBackers>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000191")]
			[Address(RVA = "0x9B7148", Offset = "0x9B7148", VA = "0x9B7148", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000193")]
			[Address(RVA = "0x9B7190", Offset = "0x9B7190", VA = "0x9B7190", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x9B686C", Offset = "0x9B686C", VA = "0x9B686C")]
		[DebuggerHidden]
		public <DelayBackers>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x9B7090", Offset = "0x9B7090", VA = "0x9B7090", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x9B7094", Offset = "0x9B7094", VA = "0x9B7094", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x9B7150", Offset = "0x9B7150", VA = "0x9B7150", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000051")]
	[CompilerGenerated]
	private sealed class <SpawnKSLine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000197")]
			[Address(RVA = "0x9B74B8", Offset = "0x9B74B8", VA = "0x9B74B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000199")]
			[Address(RVA = "0x9B7500", Offset = "0x9B7500", VA = "0x9B7500", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x9B68FC", Offset = "0x9B68FC", VA = "0x9B68FC")]
		[DebuggerHidden]
		public <SpawnKSLine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x9B7198", Offset = "0x9B7198", VA = "0x9B7198", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x9B719C", Offset = "0x9B719C", VA = "0x9B719C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x9B74C0", Offset = "0x9B74C0", VA = "0x9B74C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000052")]
	[CompilerGenerated]
	private sealed class <EndCredits>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x1700003B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600019D")]
			[Address(RVA = "0x9B77A4", Offset = "0x9B77A4", VA = "0x9B77A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600019F")]
			[Address(RVA = "0x9B77EC", Offset = "0x9B77EC", VA = "0x9B77EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x9B698C", Offset = "0x9B698C", VA = "0x9B698C")]
		[DebuggerHidden]
		public <EndCredits>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x9B7508", Offset = "0x9B7508", VA = "0x9B7508", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x9B750C", Offset = "0x9B750C", VA = "0x9B750C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x9B77AC", Offset = "0x9B77AC", VA = "0x9B77AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000053")]
	[CompilerGenerated]
	private sealed class <InputWaiting>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndingCredits <>4__this;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource <audioSource>5__2;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputBridge <inputBridge>5__3;

		[Token(Token = "0x1700003D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x9B7BBC", Offset = "0x9B7BBC", VA = "0x9B7BBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A5")]
			[Address(RVA = "0x9B7C04", Offset = "0x9B7C04", VA = "0x9B7C04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x9B6A1C", Offset = "0x9B6A1C", VA = "0x9B6A1C")]
		[DebuggerHidden]
		public <InputWaiting>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x9B77F4", Offset = "0x9B77F4", VA = "0x9B77F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x9B77F8", Offset = "0x9B77F8", VA = "0x9B77F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x9B7BC4", Offset = "0x9B7BC4", VA = "0x9B7BC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objectsToToggle;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject persistentAudio;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextAsset[] textFileMains;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextAsset textFileKS;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material newSky;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject MainLinePrefab;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject KSLinePrefab;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject ThanksLinePrefab;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int creditsSpawnDepth;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string[] mainLines;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string[] ksLines;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform player;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int currentLine;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x9B64F4", Offset = "0x9B64F4", VA = "0x9B64F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x9B66E4", Offset = "0x9B66E4", VA = "0x9B66E4")]
	[IteratorStateMachine(typeof(<LaunchScene>d__14))]
	private IEnumerator LaunchScene()
	{
		return null;
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x9B6774", Offset = "0x9B6774", VA = "0x9B6774")]
	[IteratorStateMachine(typeof(<SpawnMainLine>d__15))]
	private IEnumerator SpawnMainLine()
	{
		return null;
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x9B6804", Offset = "0x9B6804", VA = "0x9B6804")]
	[IteratorStateMachine(typeof(<DelayBackers>d__16))]
	private IEnumerator DelayBackers()
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x9B6894", Offset = "0x9B6894", VA = "0x9B6894")]
	[IteratorStateMachine(typeof(<SpawnKSLine>d__17))]
	private IEnumerator SpawnKSLine()
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x9B6924", Offset = "0x9B6924", VA = "0x9B6924")]
	[IteratorStateMachine(typeof(<EndCredits>d__18))]
	private IEnumerator EndCredits()
	{
		return null;
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x9B69B4", Offset = "0x9B69B4", VA = "0x9B69B4")]
	[IteratorStateMachine(typeof(<InputWaiting>d__19))]
	private IEnumerator InputWaiting()
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x9B6A44", Offset = "0x9B6A44", VA = "0x9B6A44")]
	public EndingCredits()
	{
	}
}
[Token(Token = "0x2000054")]
public class EnemyCollider : MonoBehaviour
{
	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int damageValue;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemyHealth enemyHealth;

	[Token(Token = "0x1700003F")]
	public int DamageValue
	{
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x9B7C0C", Offset = "0x9B7C0C", VA = "0x9B7C0C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000040")]
	public EnemyHealth EnemyHealth
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x9B7C14", Offset = "0x9B7C14", VA = "0x9B7C14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x9B7C1C", Offset = "0x9B7C1C", VA = "0x9B7C1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x9B7C94", Offset = "0x9B7C94", VA = "0x9B7C94")]
	public void PopulateEnemyHealth()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x9B7CE4", Offset = "0x9B7CE4", VA = "0x9B7CE4")]
	public EnemyCollider()
	{
	}
}
[Token(Token = "0x2000055")]
public class EnemyDangerTrackCollider : MonoBehaviour
{
	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool seenByPlayer;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int dangerAudioLevel;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayerEnemySight playerSight;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x9B7CEC", Offset = "0x9B7CEC", VA = "0x9B7CEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x9B7D60", Offset = "0x9B7D60", VA = "0x9B7D60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x9B7DC8", Offset = "0x9B7DC8", VA = "0x9B7DC8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x9AD834", Offset = "0x9AD834", VA = "0x9AD834")]
	public void startDangerTrack()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x9ADA34", Offset = "0x9ADA34", VA = "0x9ADA34")]
	public void stopDangerTrack()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x9B7E2C", Offset = "0x9B7E2C", VA = "0x9B7E2C")]
	public EnemyDangerTrackCollider()
	{
	}
}
[Token(Token = "0x2000056")]
public class EnemyHealth : MonoBehaviour
{
	[Token(Token = "0x2000057")]
	public delegate void EnemyDeath(EnemyHealth enemyHealth);

	[Token(Token = "0x2000058")]
	public delegate void EnemyDamaged(EnemyHealth enemyHealth);

	[Token(Token = "0x2000059")]
	[CompilerGenerated]
	private sealed class <DelayColliderDisable>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyHealth <>4__this;

		[Token(Token = "0x17000041")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C8")]
			[Address(RVA = "0x9B8918", Offset = "0x9B8918", VA = "0x9B8918", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CA")]
			[Address(RVA = "0x9B8960", Offset = "0x9B8960", VA = "0x9B8960", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x9B864C", Offset = "0x9B864C", VA = "0x9B864C")]
		[DebuggerHidden]
		public <DelayColliderDisable>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x9B8778", Offset = "0x9B8778", VA = "0x9B8778", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x9B877C", Offset = "0x9B877C", VA = "0x9B877C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x9B8920", Offset = "0x9B8920", VA = "0x9B8920", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AchievementList AchivementToUnlock;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isViscus;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool isBoss;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxHealth;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float damageStunTime;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject rotatorBone;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject soundObject;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip Damage1;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float damageVolume;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float randyPitch;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int prevAnim;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int currentHealth;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float damageAnimTimer;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool damaged;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Animator anim;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Animator animatorOverride;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x14000001")]
	public event EnemyDeath OnEnemyDeath
	{
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x9A89B0", Offset = "0x9A89B0", VA = "0x9A89B0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x9B7E34", Offset = "0x9B7E34", VA = "0x9B7E34")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event EnemyDamaged OnEnemyDamaged
	{
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x9A9494", Offset = "0x9A9494", VA = "0x9A9494")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x9B7ED0", Offset = "0x9B7ED0", VA = "0x9B7ED0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x9B7F6C", Offset = "0x9B7F6C", VA = "0x9B7F6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x9B8080", Offset = "0x9B8080", VA = "0x9B8080")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x9B8264", Offset = "0x9B8264", VA = "0x9B8264")]
	public void TakeDamage(int damage)
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x9AE130", Offset = "0x9AE130", VA = "0x9AE130")]
	public void Kill(bool disappear)
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x9B85D4", Offset = "0x9B85D4", VA = "0x9B85D4")]
	[IteratorStateMachine(typeof(<DelayColliderDisable>d__29))]
	private IEnumerator DelayColliderDisable(float time)
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x9B83E0", Offset = "0x9B83E0", VA = "0x9B83E0")]
	private void playDamageSound()
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x9B8674", Offset = "0x9B8674", VA = "0x9B8674")]
	public EnemyHealth()
	{
	}
}
[Token(Token = "0x200005A")]
public class ExitCollider : MonoBehaviour
{
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneID;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int warpID;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x9B8968", Offset = "0x9B8968", VA = "0x9B8968")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x9B8A1C", Offset = "0x9B8A1C", VA = "0x9B8A1C")]
	public ExitCollider()
	{
	}
}
[Token(Token = "0x200005B")]
public class FadeInListener : MonoBehaviour
{
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool fadeIn;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x9B8A24", Offset = "0x9B8A24", VA = "0x9B8A24")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x9B8A80", Offset = "0x9B8A80", VA = "0x9B8A80")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x9B8AA4", Offset = "0x9B8AA4", VA = "0x9B8AA4")]
	public FadeInListener()
	{
	}
}
[Token(Token = "0x200005C")]
public class FinalFadeOut : MonoBehaviour
{
	[Token(Token = "0x200005D")]
	[CompilerGenerated]
	private sealed class <InitiateFade>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FinalFadeOut <>4__this;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x9B98BC", Offset = "0x9B98BC", VA = "0x9B98BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001E4")]
			[Address(RVA = "0x9B9904", Offset = "0x9B9904", VA = "0x9B9904", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x9B9168", Offset = "0x9B9168", VA = "0x9B9168")]
		[DebuggerHidden]
		public <InitiateFade>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x9B97EC", Offset = "0x9B97EC", VA = "0x9B97EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x9B97F0", Offset = "0x9B97F0", VA = "0x9B97F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x9B98C4", Offset = "0x9B98C4", VA = "0x9B98C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005E")]
	[CompilerGenerated]
	private sealed class <InitiateScene>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FinalFadeOut <>4__this;

		[Token(Token = "0x17000045")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001E8")]
			[Address(RVA = "0x9B9B40", Offset = "0x9B9B40", VA = "0x9B9B40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001EA")]
			[Address(RVA = "0x9B9B88", Offset = "0x9B9B88", VA = "0x9B9B88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x9B91F8", Offset = "0x9B91F8", VA = "0x9B91F8")]
		[DebuggerHidden]
		public <InitiateScene>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x9B990C", Offset = "0x9B990C", VA = "0x9B990C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x9B9910", Offset = "0x9B9910", VA = "0x9B9910", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x9B9B48", Offset = "0x9B9B48", VA = "0x9B9B48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005F")]
	[CompilerGenerated]
	private sealed class <InitiateFadeBack>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FinalFadeOut <>4__this;

		[Token(Token = "0x17000047")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001EE")]
			[Address(RVA = "0x9B9C54", Offset = "0x9B9C54", VA = "0x9B9C54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0x9B9C9C", Offset = "0x9B9C9C", VA = "0x9B9C9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x9B955C", Offset = "0x9B955C", VA = "0x9B955C")]
		[DebuggerHidden]
		public <InitiateFadeBack>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x9B9B90", Offset = "0x9B9B90", VA = "0x9B9B90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x9B9B94", Offset = "0x9B9B94", VA = "0x9B9B94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x9B9C5C", Offset = "0x9B9C5C", VA = "0x9B9C5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000060")]
	[CompilerGenerated]
	private sealed class <InitiateFadeAlset>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FinalFadeOut <>4__this;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F4")]
			[Address(RVA = "0x9B9D54", Offset = "0x9B9D54", VA = "0x9B9D54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F6")]
			[Address(RVA = "0x9B9D9C", Offset = "0x9B9D9C", VA = "0x9B9D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x9B960C", Offset = "0x9B960C", VA = "0x9B960C")]
		[DebuggerHidden]
		public <InitiateFadeAlset>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x9B9CA4", Offset = "0x9B9CA4", VA = "0x9B9CA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x9B9CA8", Offset = "0x9B9CA8", VA = "0x9B9CA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x9B9D5C", Offset = "0x9B9D5C", VA = "0x9B9D5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <DelayOnOutside>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FinalFadeOut <>4__this;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FA")]
			[Address(RVA = "0x9B9E84", Offset = "0x9B9E84", VA = "0x9B9E84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0x9B9ECC", Offset = "0x9B9ECC", VA = "0x9B9ECC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x9B969C", Offset = "0x9B969C", VA = "0x9B969C")]
		[DebuggerHidden]
		public <DelayOnOutside>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x9B9DA4", Offset = "0x9B9DA4", VA = "0x9B9DA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x9B9DA8", Offset = "0x9B9DA8", VA = "0x9B9DA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x9B9E8C", Offset = "0x9B9E8C", VA = "0x9B9E8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneToLoad;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> objectsToToggle;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform warp;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int fadeDuration;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int fade2Duration;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PostProcessVolume ppVolume;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float bloomSpeed;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float grainSpeed;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float colorSpeed;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float audioSpeed;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource audioFadeSound;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioMusic;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ScreenOverlay overlayWhite;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ScreenOverlay overlayBlack;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool fade1;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool fade2;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool fade3;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	private bool fade4;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool fade5;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject player;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Material endingAlsetSkybox;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PostProcessVolume endingAlsetPPVolume;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private PostProcessProfile endingAlsetPPProfile;

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x9B8AAC", Offset = "0x9B8AAC", VA = "0x9B8AAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x9B8C04", Offset = "0x9B8C04", VA = "0x9B8C04")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x9B8BE4", Offset = "0x9B8BE4", VA = "0x9B8BE4")]
	public void Fade()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x9B9100", Offset = "0x9B9100", VA = "0x9B9100")]
	[IteratorStateMachine(typeof(<InitiateFade>d__23))]
	private IEnumerator InitiateFade()
	{
		return null;
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x9B9190", Offset = "0x9B9190", VA = "0x9B9190")]
	[IteratorStateMachine(typeof(<InitiateScene>d__24))]
	private IEnumerator InitiateScene()
	{
		return null;
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x9B9220", Offset = "0x9B9220", VA = "0x9B9220")]
	private void ReorientPlayer()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x9B9374", Offset = "0x9B9374", VA = "0x9B9374")]
	private void RePositionPlayer()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x9B94F4", Offset = "0x9B94F4", VA = "0x9B94F4")]
	[IteratorStateMachine(typeof(<InitiateFadeBack>d__27))]
	private IEnumerator InitiateFadeBack()
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x9B9584", Offset = "0x9B9584", VA = "0x9B9584")]
	public void AlsetFade()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x9B95A4", Offset = "0x9B95A4", VA = "0x9B95A4")]
	[IteratorStateMachine(typeof(<InitiateFadeAlset>d__29))]
	private IEnumerator InitiateFadeAlset()
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x9B9084", Offset = "0x9B9084", VA = "0x9B9084")]
	private void LoadScene()
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x9B9634", Offset = "0x9B9634", VA = "0x9B9634")]
	[IteratorStateMachine(typeof(<DelayOnOutside>d__31))]
	private IEnumerator DelayOnOutside()
	{
		return null;
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x9B96C4", Offset = "0x9B96C4", VA = "0x9B96C4")]
	private void SetEndingAlsetSkyBox()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x9B9740", Offset = "0x9B9740", VA = "0x9B9740")]
	private void SetEndingAlsetPPProfile()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x9B97E4", Offset = "0x9B97E4", VA = "0x9B97E4")]
	public FinalFadeOut()
	{
	}
}
[Token(Token = "0x2000062")]
public class FinalMonsterSpawner : MonoBehaviour
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabMonster;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] spawnPoints;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int spawnDelay;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minDistance;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int maxMonsters;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool spawning;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float spawnTimer;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform player;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int monsterCount;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<GameObject> monsterList;

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x9B9ED4", Offset = "0x9B9ED4", VA = "0x9B9ED4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x9B9F30", Offset = "0x9B9F30", VA = "0x9B9F30")]
	private void Update()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x9ABA38", Offset = "0x9ABA38", VA = "0x9ABA38")]
	public void ClearMonsters()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x9BA350", Offset = "0x9BA350", VA = "0x9BA350")]
	private void UpdateMonsterDeath(EnemyHealth enemyHealth)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x9BA430", Offset = "0x9BA430", VA = "0x9BA430")]
	public FinalMonsterSpawner()
	{
	}
}
[Token(Token = "0x2000063")]
public class FixClothBounds : MonoBehaviour
{
	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Bounds> manyBounds;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Cloth[] cloths;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float boundsExtentFactor;

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x9BA4AC", Offset = "0x9BA4AC", VA = "0x9BA4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x9BA780", Offset = "0x9BA780", VA = "0x9BA780")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x9BA7AC", Offset = "0x9BA7AC", VA = "0x9BA7AC")]
	private void FixBounds()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x9BA8AC", Offset = "0x9BA8AC", VA = "0x9BA8AC")]
	public FixClothBounds()
	{
	}
}
[Token(Token = "0x2000064")]
public class FixedRotation : MonoBehaviour
{
	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion rotation;

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x9BA8B4", Offset = "0x9BA8B4", VA = "0x9BA8B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x9BA8E4", Offset = "0x9BA8E4", VA = "0x9BA8E4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x9BA910", Offset = "0x9BA910", VA = "0x9BA910")]
	public FixedRotation()
	{
	}
}
[Token(Token = "0x2000065")]
public class FleshTV : MonoBehaviour
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject tvPoint;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string saveTitle;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string sceneID;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int warpID;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip audioOpen;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip audioClose;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform playerHead;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ScreenSphere screenOverlay;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float playerDistanceSqr;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool tvOpened;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float soundTimer;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool activated;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator animator;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SphereCollider sphereCollider;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioSource audioSource;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x9BA918", Offset = "0x9BA918", VA = "0x9BA918")]
	private void Start()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x9BAA4C", Offset = "0x9BAA4C", VA = "0x9BAA4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x9BAF14", Offset = "0x9BAF14", VA = "0x9BAF14")]
	private void Activate()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x9BAD14", Offset = "0x9BAD14", VA = "0x9BAD14")]
	private bool IsInnerSphere(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x9BB09C", Offset = "0x9BB09C", VA = "0x9BB09C")]
	public FleshTV()
	{
	}
}
[Token(Token = "0x2000066")]
public class FleshTVIntro : MonoBehaviour
{
	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private sealed class <DelayLoad>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000217")]
			[Address(RVA = "0x9BB854", Offset = "0x9BB854", VA = "0x9BB854", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000219")]
			[Address(RVA = "0x9BB89C", Offset = "0x9BB89C", VA = "0x9BB89C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x9BB65C", Offset = "0x9BB65C", VA = "0x9BB65C")]
		[DebuggerHidden]
		public <DelayLoad>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x9BB6F4", Offset = "0x9BB6F4", VA = "0x9BB6F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x9BB6F8", Offset = "0x9BB6F8", VA = "0x9BB6F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x9BB85C", Offset = "0x9BB85C", VA = "0x9BB85C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject tvPoint;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioOpen;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioClose;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform playerHead;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ScreenSphere screenOverlay;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float playerDistanceSqr;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool tvOpened;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float soundTimer;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool loading;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioSource;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x9BB10C", Offset = "0x9BB10C", VA = "0x9BB10C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x9BB21C", Offset = "0x9BB21C", VA = "0x9BB21C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x9BB5FC", Offset = "0x9BB5FC", VA = "0x9BB5FC")]
	[IteratorStateMachine(typeof(<DelayLoad>d__14))]
	private IEnumerator DelayLoad()
	{
		return null;
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x9BB684", Offset = "0x9BB684", VA = "0x9BB684")]
	public FleshTVIntro()
	{
	}
}
[Token(Token = "0x2000068")]
public class FloorCreep : MonoBehaviour
{
	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <DamageOverTime>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloorCreep <>4__this;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000223")]
			[Address(RVA = "0x9BBD5C", Offset = "0x9BBD5C", VA = "0x9BBD5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000225")]
			[Address(RVA = "0x9BBDA4", Offset = "0x9BBDA4", VA = "0x9BBDA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x9BBB50", Offset = "0x9BBB50", VA = "0x9BBB50")]
		[DebuggerHidden]
		public <DamageOverTime>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x9BBBE8", Offset = "0x9BBBE8", VA = "0x9BBBE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x9BBBEC", Offset = "0x9BBBEC", VA = "0x9BBBEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x9BBD64", Offset = "0x9BBD64", VA = "0x9BBD64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Coroutine co;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator anim;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip attackSound;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool triggered;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x9BB8A4", Offset = "0x9BB8A4", VA = "0x9BB8A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x9BB964", Offset = "0x9BB964", VA = "0x9BB964")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x9BBA9C", Offset = "0x9BBA9C", VA = "0x9BBA9C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x9BBA34", Offset = "0x9BBA34", VA = "0x9BBA34")]
	[IteratorStateMachine(typeof(<DamageOverTime>d__11))]
	private IEnumerator DamageOverTime()
	{
		return null;
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x9BBB78", Offset = "0x9BBB78", VA = "0x9BBB78")]
	public FloorCreep()
	{
	}
}
[Token(Token = "0x200006A")]
public class FogManager : MonoBehaviour
{
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private DynamicFog Fog1;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DynamicFog Fog2;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private DynamicFog Fog3;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject FogGround;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject FogGround2;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private DynamicFog FogBoss;

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x9BBDAC", Offset = "0x9BBDAC", VA = "0x9BBDAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x9BBDB0", Offset = "0x9BBDB0", VA = "0x9BBDB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x9BBDB4", Offset = "0x9BBDB4", VA = "0x9BBDB4")]
	private void OnSceneLoad(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x9BBDB8", Offset = "0x9BBDB8", VA = "0x9BBDB8")]
	public void ToggleFog1(bool flag)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x9BBDBC", Offset = "0x9BBDBC", VA = "0x9BBDBC")]
	public void ToggleFog2(bool flag)
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x9BBDC0", Offset = "0x9BBDC0", VA = "0x9BBDC0")]
	public void ToggleFog3(bool flag)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x9BBDC4", Offset = "0x9BBDC4", VA = "0x9BBDC4")]
	public void ToggleFogGround(bool flag)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x9BBDE4", Offset = "0x9BBDE4", VA = "0x9BBDE4")]
	public void ToggleFogGround2(bool flag)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x9BBDE8", Offset = "0x9BBDE8", VA = "0x9BBDE8")]
	public void ToggleBossFog(bool flag)
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x9BBDEC", Offset = "0x9BBDEC", VA = "0x9BBDEC")]
	public FogManager()
	{
	}
}
[Token(Token = "0x200006B")]
public class FollowHeadText : MonoBehaviour
{
	[Token(Token = "0x200006C")]
	[CompilerGenerated]
	private sealed class <DelayStart>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FollowHeadText <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000237")]
			[Address(RVA = "0x9BC180", Offset = "0x9BC180", VA = "0x9BC180", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000239")]
			[Address(RVA = "0x9BC1C8", Offset = "0x9BC1C8", VA = "0x9BC1C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x9BBE7C", Offset = "0x9BBE7C", VA = "0x9BBE7C")]
		[DebuggerHidden]
		public <DelayStart>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x9BC084", Offset = "0x9BC084", VA = "0x9BC084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x9BC088", Offset = "0x9BC088", VA = "0x9BC088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x9BC188", Offset = "0x9BC188", VA = "0x9BC188", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform headPoint;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform player;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool following;

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x9BBDF4", Offset = "0x9BBDF4", VA = "0x9BBDF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x9BBE14", Offset = "0x9BBE14", VA = "0x9BBE14")]
	[IteratorStateMachine(typeof(<DelayStart>d__5))]
	private IEnumerator DelayStart()
	{
		return null;
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x9BBEA4", Offset = "0x9BBEA4", VA = "0x9BBEA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x9BC07C", Offset = "0x9BC07C", VA = "0x9BC07C")]
	public FollowHeadText()
	{
	}
}
[Token(Token = "0x200006D")]
public class FollowPlayer : MonoBehaviour
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float followSpeed;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float attackDistance;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavMeshAgent agent;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float attackMoveSpeed;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool needsVisionToAttack;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float headArcMin;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SightCollider sight;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform player;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float distanceToPlayerSqr;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator animator;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject trackPoint;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x9BC1D0", Offset = "0x9BC1D0", VA = "0x9BC1D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x9BC388", Offset = "0x9BC388", VA = "0x9BC388")]
	private void Update()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x9BC650", Offset = "0x9BC650", VA = "0x9BC650")]
	public FollowPlayer()
	{
	}
}
[Token(Token = "0x200006E")]
public class FootstepTrigger : MonoBehaviour
{
	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayerFootsteps footsteps;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip newAudioStep;

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x9BC6CC", Offset = "0x9BC6CC", VA = "0x9BC6CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x9BC73C", Offset = "0x9BC73C", VA = "0x9BC73C")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x9BC7F0", Offset = "0x9BC7F0", VA = "0x9BC7F0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x9BC8B0", Offset = "0x9BC8B0", VA = "0x9BC8B0")]
	public FootstepTrigger()
	{
	}
}
[Token(Token = "0x200006F")]
public class FOVLimiter : MonoBehaviour
{
	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 oldPos;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxSpeed;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MaxFOV;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float SavedSliderSetting;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool fadeIn;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool fadeOut;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float fadeSpeed;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int outScene;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int outWarp;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool initiated;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MeshRenderer HemiSphere;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _intensity;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material vignetteMaterial;

	[Token(Token = "0x17000053")]
	public float Intensity
	{
		[Token(Token = "0x6000242")]
		[Address(RVA = "0x9BC8B8", Offset = "0x9BC8B8", VA = "0x9BC8B8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000243")]
		[Address(RVA = "0x9BC8C0", Offset = "0x9BC8C0", VA = "0x9BC8C0")]
		set
		{
		}
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x9BC988", Offset = "0x9BC988", VA = "0x9BC988")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x9BCA44", Offset = "0x9BCA44", VA = "0x9BCA44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x9BCAA0", Offset = "0x9BCAA0", VA = "0x9BCAA0")]
	private void OnSceneLoad(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x9BCAA8", Offset = "0x9BCAA8", VA = "0x9BCAA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x9BCC1C", Offset = "0x9BCC1C", VA = "0x9BCC1C")]
	public void SetMaxFov(float _sliderValue)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x9BCA8C", Offset = "0x9BCA8C", VA = "0x9BCA8C")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x9BCC54", Offset = "0x9BCC54", VA = "0x9BCC54")]
	public void FadeOutToScene(float speed, int sceneID, int warpID)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x9BCC68", Offset = "0x9BCC68", VA = "0x9BCC68")]
	public FOVLimiter()
	{
	}
}
[Token(Token = "0x2000070")]
public class HandAnimation : MonoBehaviour
{
	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ControllerHandedness HandSide;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isPointing;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x9BCC84", Offset = "0x9BCC84", VA = "0x9BCC84")]
	private void Start()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x9BCCD4", Offset = "0x9BCCD4", VA = "0x9BCCD4")]
	private void Update()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x9BCDCC", Offset = "0x9BCDCC", VA = "0x9BCDCC")]
	public void startPointing()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x9BCE4C", Offset = "0x9BCE4C", VA = "0x9BCE4C")]
	public void stopPointing()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x9BCE54", Offset = "0x9BCE54", VA = "0x9BCE54")]
	public HandAnimation()
	{
	}
}
[Token(Token = "0x2000071")]
public class HandPointerZone : MonoBehaviour
{
	[Token(Token = "0x6000252")]
	[Address(RVA = "0x9BCECC", Offset = "0x9BCECC", VA = "0x9BCECC")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x9BCFA4", Offset = "0x9BCFA4", VA = "0x9BCFA4")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x9BD074", Offset = "0x9BD074", VA = "0x9BD074")]
	public HandPointerZone()
	{
	}
}
[Token(Token = "0x2000072")]
public class HeadTextPoint : MonoBehaviour
{
	[Token(Token = "0x6000255")]
	[Address(RVA = "0x9BD07C", Offset = "0x9BD07C", VA = "0x9BD07C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x9BD080", Offset = "0x9BD080", VA = "0x9BD080")]
	private void Update()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x9BD084", Offset = "0x9BD084", VA = "0x9BD084")]
	public HeadTextPoint()
	{
	}
}
[Token(Token = "0x2000073")]
public class HomingMissile : MonoBehaviour
{
	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool randomOffset;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform player;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 target;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float randyOffset;

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x9BD08C", Offset = "0x9BD08C", VA = "0x9BD08C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x9BD108", Offset = "0x9BD108", VA = "0x9BD108")]
	private void Update()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x9BD1FC", Offset = "0x9BD1FC", VA = "0x9BD1FC")]
	public HomingMissile()
	{
	}
}
[Token(Token = "0x2000074")]
public class IntroCinematic : MonoBehaviour
{
	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PostProcessVolume ppVolume;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text creditsTitle;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text creditsName1;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text creditsName2;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text creditsAnd;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fadeSpeed;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool blooming;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool titleFadeIn;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool titleFadeOut;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool nameFadeIn;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool nameFadeOut;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float bloomSpeed;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject OQtitle;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ParticleSystem particle;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool endOQ;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Font defaultFont;

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x9BD204", Offset = "0x9BD204", VA = "0x9BD204")]
	private void Start()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x9BD2F4", Offset = "0x9BD2F4", VA = "0x9BD2F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x9BD728", Offset = "0x9BD728", VA = "0x9BD728")]
	public void SetBloom(float speed)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x9BD764", Offset = "0x9BD764", VA = "0x9BD764")]
	public void RestartBloom()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x9BD784", Offset = "0x9BD784", VA = "0x9BD784")]
	public void FadeInNameText(string text)
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x9BD8DC", Offset = "0x9BD8DC", VA = "0x9BD8DC")]
	public void FadeOutNameText()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x9BD8E8", Offset = "0x9BD8E8", VA = "0x9BD8E8")]
	public void FadeInTitleText(string text)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x9BDA14", Offset = "0x9BDA14", VA = "0x9BDA14")]
	public void FadeOutTitleText()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x9BDA20", Offset = "0x9BDA20", VA = "0x9BDA20")]
	public void EndOQ()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x9BDA4C", Offset = "0x9BDA4C", VA = "0x9BDA4C")]
	public void CutToScene()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x9BDACC", Offset = "0x9BDACC", VA = "0x9BDACC")]
	public IntroCinematic()
	{
	}
}
[Token(Token = "0x2000075")]
public class IntroFadeout : MonoBehaviour
{
	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FOVLimiter FOV;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fadeScene;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int fadeWarp;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fadeSpeed;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip fadeSound;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delay;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float delayCounter;

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x9BDAD4", Offset = "0x9BDAD4", VA = "0x9BDAD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x9BDAD8", Offset = "0x9BDAD8", VA = "0x9BDAD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x9BDB7C", Offset = "0x9BDB7C", VA = "0x9BDB7C")]
	public IntroFadeout()
	{
	}
}
[Token(Token = "0x2000076")]
public class IntroSettings : MonoBehaviour
{
	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioClick;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image Panel1;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image Panel2;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool upState;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x9BDB84", Offset = "0x9BDB84", VA = "0x9BDB84")]
	private void Start()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x9BDB88", Offset = "0x9BDB88", VA = "0x9BDB88")]
	public void CheckLeverSetting()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x9BDB8C", Offset = "0x9BDB8C", VA = "0x9BDB8C")]
	public IntroSettings()
	{
	}
}
[Token(Token = "0x2000077")]
public class InventoryPoint : MonoBehaviour
{
	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandAnimation anim;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rend;

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x9BDB94", Offset = "0x9BDB94", VA = "0x9BDB94")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x9BDC48", Offset = "0x9BDC48", VA = "0x9BDC48")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x9BDCFC", Offset = "0x9BDCFC", VA = "0x9BDCFC")]
	public InventoryPoint()
	{
	}
}
[Token(Token = "0x2000078")]
public class ItemInfo
{
	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Dictionary<string, string> info;

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x9BDD04", Offset = "0x9BDD04", VA = "0x9BDD04")]
	public ItemInfo()
	{
	}
}
[Token(Token = "0x2000079")]
public class KeyPadController : MonoBehaviour
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerContainer triggerContainer;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DoorExit doorExit;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioPress;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioOpen;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int val1;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int val2;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int val3;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int val4;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool good1;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool good2;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool good3;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool good4;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float inputTimer;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource audioSource;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x9BE67C", Offset = "0x9BE67C", VA = "0x9BE67C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x9BE718", Offset = "0x9BE718", VA = "0x9BE718")]
	private void Update()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x9BE74C", Offset = "0x9BE74C", VA = "0x9BE74C")]
	public void inputKey(int value)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x9BE894", Offset = "0x9BE894", VA = "0x9BE894")]
	private void Success()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x9BE938", Offset = "0x9BE938", VA = "0x9BE938")]
	public KeyPadController()
	{
	}
}
[Token(Token = "0x200007A")]
public class KeypadKey : MonoBehaviour
{
	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyPadController controller;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int value;

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x9BE940", Offset = "0x9BE940", VA = "0x9BE940")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x9BE9CC", Offset = "0x9BE9CC", VA = "0x9BE9CC")]
	public KeypadKey()
	{
	}
}
[Token(Token = "0x200007B")]
public class LeftHandedControl : MonoBehaviour
{
	[Token(Token = "0x6000277")]
	[Address(RVA = "0x9BE9D4", Offset = "0x9BE9D4", VA = "0x9BE9D4")]
	public void ToggleLefthanded(bool leftHanded)
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x9BEAAC", Offset = "0x9BEAAC", VA = "0x9BEAAC")]
	public LeftHandedControl()
	{
	}
}
[Token(Token = "0x200007C")]
public class LightMusic : MonoBehaviour
{
	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource musicSource;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool persistentAudio;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light myLight;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int freq;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float multiplier;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float minLight;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] number;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer lightObjectRenderer;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material mat;

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x9BEAB4", Offset = "0x9BEAB4", VA = "0x9BEAB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x9BEBD0", Offset = "0x9BEBD0", VA = "0x9BEBD0")]
	private void Update()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x9BEBD4", Offset = "0x9BEBD4", VA = "0x9BEBD4")]
	private void UpdateLight()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x9BED18", Offset = "0x9BED18", VA = "0x9BED18")]
	public LightMusic()
	{
	}
}
[Token(Token = "0x200007D")]
public class LightMusicTester : MonoBehaviour
{
	[Token(Token = "0x600027D")]
	[Address(RVA = "0x9BED20", Offset = "0x9BED20", VA = "0x9BED20")]
	private void Start()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x9BED24", Offset = "0x9BED24", VA = "0x9BED24")]
	private void Update()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x9BED28", Offset = "0x9BED28", VA = "0x9BED28")]
	public LightMusicTester()
	{
	}
}
[Token(Token = "0x200007E")]
public class LiveItemDispenser : MonoBehaviour
{
	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabSpawnItem;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] spawnPoints;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int maxSpawnCount;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int minPistolAmmo;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int minShotgunAmmo;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int minSyringes;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int minHealthkits;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject currentSpawn;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool spawned;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int spawnCounter;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int tempPistolAmmo;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int tempShotgunAmmo;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int tempSyringes;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int tempHealthkits;

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x9BED30", Offset = "0x9BED30", VA = "0x9BED30")]
	private void Start()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x9BED84", Offset = "0x9BED84", VA = "0x9BED84")]
	private void CountItems()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x9BEF98", Offset = "0x9BEF98", VA = "0x9BEF98")]
	private void CheckSpawn()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x9BF00C", Offset = "0x9BF00C", VA = "0x9BF00C")]
	private void SpawnItem()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x9BF204", Offset = "0x9BF204", VA = "0x9BF204")]
	private void LiveItemDispenser_InteractableObjectGrabbed(Grabber grabber)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x9BF2D4", Offset = "0x9BF2D4", VA = "0x9BF2D4")]
	public LiveItemDispenser()
	{
	}
}
[Token(Token = "0x200007F")]
public class MaggotSpawner : MonoBehaviour
{
	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject maggotPrefab;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int count;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int delay;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int max;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int maggotCounter;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<GameObject> maggotList;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform player;

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x9BF2DC", Offset = "0x9BF2DC", VA = "0x9BF2DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x9BF378", Offset = "0x9BF378", VA = "0x9BF378")]
	private void SpawnMaggots()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x9BF660", Offset = "0x9BF660", VA = "0x9BF660")]
	public void ClearMaggots()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x9BF6E4", Offset = "0x9BF6E4", VA = "0x9BF6E4")]
	private void RemoveMaggot()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x9BF5DC", Offset = "0x9BF5DC", VA = "0x9BF5DC")]
	public static Vector3 RandomNavSphere(Vector3 origin, float distance, int layermask)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x9BF878", Offset = "0x9BF878", VA = "0x9BF878")]
	public MaggotSpawner()
	{
	}
}
[Token(Token = "0x2000080")]
public class MapChange : MonoBehaviour
{
	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int nextMap;

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x9BF8F4", Offset = "0x9BF8F4", VA = "0x9BF8F4")]
	public MapChange()
	{
	}
}
[Token(Token = "0x2000081")]
public class MazeGoal : MonoBehaviour
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AchievementList AchivementToUnlock;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioUnlock;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem particle;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool toggled;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject knob;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TriggerContainer triggerContainer;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource audioSource;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x9BF904", Offset = "0x9BF904", VA = "0x9BF904")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x9BF954", Offset = "0x9BF954", VA = "0x9BF954")]
	private void Start()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x9BF9F0", Offset = "0x9BF9F0", VA = "0x9BF9F0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x9BFC50", Offset = "0x9BFC50", VA = "0x9BFC50")]
	private void DelayDisableKnob()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x9BFDA0", Offset = "0x9BFDA0", VA = "0x9BFDA0")]
	public MazeGoal()
	{
	}
}
[Token(Token = "0x2000082")]
public class MazeKnob : MonoBehaviour
{
	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startPos;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int damage;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float soundSpeed;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float soundDistance;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool timerActive;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] audioKnobs;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource soundObject;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip soundHurt;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem particleHurt;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timer;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 lastPoint;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float distance;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float timeSinceMove;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool locked;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Grabber grabber;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<MazeObstacle> obstacles;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<MazeUnlock> unlocks;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioSource audioSource;

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x9BFE10", Offset = "0x9BFE10", VA = "0x9BFE10")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x9BFF14", Offset = "0x9BFF14", VA = "0x9BFF14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x9C0390", Offset = "0x9C0390", VA = "0x9C0390")]
	private void Update()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x9C05E0", Offset = "0x9C05E0", VA = "0x9C05E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x9C04B8", Offset = "0x9C04B8", VA = "0x9C04B8")]
	private void PlayRandomSound()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x9C06D8", Offset = "0x9C06D8", VA = "0x9C06D8")]
	public void ObjectGrabbed(Grabber grabber)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x9C0710", Offset = "0x9C0710", VA = "0x9C0710")]
	public void ObjectUnGrabbed()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x9C0884", Offset = "0x9C0884", VA = "0x9C0884")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x9BFCE4", Offset = "0x9BFCE4", VA = "0x9BFCE4")]
	public void LockKnob()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x9C0714", Offset = "0x9C0714", VA = "0x9C0714")]
	private void RestartBoard()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x9C0B54", Offset = "0x9C0B54", VA = "0x9C0B54")]
	private void ResetObstacles()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x9C0960", Offset = "0x9C0960", VA = "0x9C0960")]
	private void LockObstacles()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x9C08F4", Offset = "0x9C08F4", VA = "0x9C08F4")]
	private void DropKnob()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x9C1004", Offset = "0x9C1004", VA = "0x9C1004")]
	public MazeKnob()
	{
	}
}
[Token(Token = "0x2000083")]
public class MazeObstacle : MonoBehaviour
{
	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool yMovement;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool zMovement;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float currentSpeed;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 startPos;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool unlocked;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool currentlyUnlocked;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timer;

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x9C10C4", Offset = "0x9C10C4", VA = "0x9C10C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x9C110C", Offset = "0x9C110C", VA = "0x9C110C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x9C1238", Offset = "0x9C1238", VA = "0x9C1238")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x9C1324", Offset = "0x9C1324", VA = "0x9C1324")]
	public void ToggleLock()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x9C0E94", Offset = "0x9C0E94", VA = "0x9C0E94")]
	public void ResetPos()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x9C13CC", Offset = "0x9C13CC", VA = "0x9C13CC")]
	public MazeObstacle()
	{
	}
}
[Token(Token = "0x2000084")]
public class MazeUnlock : MonoBehaviour
{
	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] obstaclesToToggle;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioUnlock;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem particle;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool toggled;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x9C13D4", Offset = "0x9C13D4", VA = "0x9C13D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x9C1470", Offset = "0x9C1470", VA = "0x9C1470")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x9C1648", Offset = "0x9C1648", VA = "0x9C1648")]
	public void ToggleLocks()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x9C0F60", Offset = "0x9C0F60", VA = "0x9C0F60")]
	public void ResetToggle()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x9C16DC", Offset = "0x9C16DC", VA = "0x9C16DC")]
	public MazeUnlock()
	{
	}
}
[Token(Token = "0x2000085")]
public class MeatElevator : MonoBehaviour
{
	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <DelayMove>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeatElevator <>4__this;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B6")]
			[Address(RVA = "0x9C1B40", Offset = "0x9C1B40", VA = "0x9C1B40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B8")]
			[Address(RVA = "0x9C1B88", Offset = "0x9C1B88", VA = "0x9C1B88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x9C1818", Offset = "0x9C1818", VA = "0x9C1818")]
		[DebuggerHidden]
		public <DelayMove>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x9C1A44", Offset = "0x9C1A44", VA = "0x9C1A44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x9C1A48", Offset = "0x9C1A48", VA = "0x9C1A48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x9C1B48", Offset = "0x9C1B48", VA = "0x9C1B48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <DelayLoad>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeatElevator <>4__this;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002BC")]
			[Address(RVA = "0x9C1CB8", Offset = "0x9C1CB8", VA = "0x9C1CB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002BE")]
			[Address(RVA = "0x9C1D00", Offset = "0x9C1D00", VA = "0x9C1D00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x9C18A8", Offset = "0x9C18A8", VA = "0x9C18A8")]
		[DebuggerHidden]
		public <DelayLoad>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x9C1B90", Offset = "0x9C1B90", VA = "0x9C1B90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x9C1B94", Offset = "0x9C1B94", VA = "0x9C1B94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x9C1CC0", Offset = "0x9C1CC0", VA = "0x9C1CC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000088")]
	[CompilerGenerated]
	private sealed class <DelayFade>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeatElevator <>4__this;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0x9C1DB8", Offset = "0x9C1DB8", VA = "0x9C1DB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C4")]
			[Address(RVA = "0x9C1E00", Offset = "0x9C1E00", VA = "0x9C1E00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x9C1938", Offset = "0x9C1938", VA = "0x9C1938")]
		[DebuggerHidden]
		public <DelayFade>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x9C1D08", Offset = "0x9C1D08", VA = "0x9C1D08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x9C1D0C", Offset = "0x9C1D0C", VA = "0x9C1D0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x9C1DC0", Offset = "0x9C1DC0", VA = "0x9C1DC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MovingObjects;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip exitSound;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource music;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool moving;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool fading;

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x9C174C", Offset = "0x9C174C", VA = "0x9C174C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x9C17B0", Offset = "0x9C17B0", VA = "0x9C17B0")]
	[IteratorStateMachine(typeof(<DelayMove>d__6))]
	private IEnumerator DelayMove()
	{
		return null;
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x9C1840", Offset = "0x9C1840", VA = "0x9C1840")]
	[IteratorStateMachine(typeof(<DelayLoad>d__7))]
	private IEnumerator DelayLoad()
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x9C18D0", Offset = "0x9C18D0", VA = "0x9C18D0")]
	[IteratorStateMachine(typeof(<DelayFade>d__8))]
	private IEnumerator DelayFade()
	{
		return null;
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x9C1960", Offset = "0x9C1960", VA = "0x9C1960")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x9C1A3C", Offset = "0x9C1A3C", VA = "0x9C1A3C")]
	public MeatElevator()
	{
	}
}
[Token(Token = "0x2000089")]
public class MenuMain : MonoBehaviour
{
	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <iLoadTitleInfo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuMain <>4__this;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002DC")]
			[Address(RVA = "0x9C373C", Offset = "0x9C373C", VA = "0x9C373C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0x9C3784", Offset = "0x9C3784", VA = "0x9C3784", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x9C2994", Offset = "0x9C2994", VA = "0x9C2994")]
		[DebuggerHidden]
		public <iLoadTitleInfo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x9C3250", Offset = "0x9C3250", VA = "0x9C3250", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x9C3254", Offset = "0x9C3254", VA = "0x9C3254", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x9C3744", Offset = "0x9C3744", VA = "0x9C3744", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008B")]
	[CompilerGenerated]
	private sealed class <StartGame>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuMain <>4__this;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E2")]
			[Address(RVA = "0x9C3A0C", Offset = "0x9C3A0C", VA = "0x9C3A0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E4")]
			[Address(RVA = "0x9C3A54", Offset = "0x9C3A54", VA = "0x9C3A54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x9C2E88", Offset = "0x9C2E88", VA = "0x9C2E88")]
		[DebuggerHidden]
		public <StartGame>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x9C378C", Offset = "0x9C378C", VA = "0x9C378C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x9C3790", Offset = "0x9C3790", VA = "0x9C3790", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x9C3A14", Offset = "0x9C3A14", VA = "0x9C3A14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup[] allCanvases;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int freshMenu;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Button[] loadButtons;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioNewGame;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip audioButton;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle toggleAnalog;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Toggle toggleTeleport;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Toggle toggleRotation;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Toggle toggleSmoothRotation;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Toggle leftHand;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Toggle rightHand;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public CanvasGroup smoothRotationCanvas;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Toggle[] toggleLanguage;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Toggle toggleSubtitle;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.UI.Slider sliderVignette;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool freshGameLaunch;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int currentMenu;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool gameStarted;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<bool> saveSlotAvailableList;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private SettingsSaveData settingsSaveData;

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x9C1E08", Offset = "0x9C1E08", VA = "0x9C1E08")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x9C1E9C", Offset = "0x9C1E9C", VA = "0x9C1E9C")]
	private void LoadSettings()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x9C27E4", Offset = "0x9C27E4", VA = "0x9C27E4")]
	private void SaveSettings()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x9C260C", Offset = "0x9C260C", VA = "0x9C260C")]
	[IteratorStateMachine(typeof(<iLoadTitleInfo>d__23))]
	private IEnumerator iLoadTitleInfo()
	{
		return null;
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x9C29BC", Offset = "0x9C29BC", VA = "0x9C29BC")]
	private void UpdateEmptySlotText()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x9C2674", Offset = "0x9C2674", VA = "0x9C2674")]
	public void changeMenu(int menu)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x9C2BCC", Offset = "0x9C2BCC", VA = "0x9C2BCC")]
	public void previousMenu()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x9C2BE4", Offset = "0x9C2BE4", VA = "0x9C2BE4")]
	public void nextMenu()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x9C2BFC", Offset = "0x9C2BFC", VA = "0x9C2BFC")]
	public void beginLoad(int slot)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x9C2C80", Offset = "0x9C2C80", VA = "0x9C2C80")]
	private void loadGame(int slot)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x9C2D9C", Offset = "0x9C2D9C", VA = "0x9C2D9C")]
	public void SelectDifficulty(int difficulty)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x9C2E20", Offset = "0x9C2E20", VA = "0x9C2E20")]
	[IteratorStateMachine(typeof(<StartGame>d__31))]
	private IEnumerator StartGame()
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x9C2EB0", Offset = "0x9C2EB0", VA = "0x9C2EB0")]
	public void ToggleLanguage(int language)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x9C2F50", Offset = "0x9C2F50", VA = "0x9C2F50")]
	public void ToggleSubtitle(bool toggle)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x9C2FAC", Offset = "0x9C2FAC", VA = "0x9C2FAC")]
	public void ToggleTeleport(bool toggle)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x9C300C", Offset = "0x9C300C", VA = "0x9C300C")]
	public void ToggleLeftHanded(bool toggle)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x9C3068", Offset = "0x9C3068", VA = "0x9C3068")]
	public void ToggleRotation(bool toggle)
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x9C30E8", Offset = "0x9C30E8", VA = "0x9C30E8")]
	public void ToggleSmoothRotation(bool toggle)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x9C3144", Offset = "0x9C3144", VA = "0x9C3144")]
	public void ChangeVignetteValue(float value)
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x9C31D4", Offset = "0x9C31D4", VA = "0x9C31D4")]
	public MenuMain()
	{
	}
}
[Token(Token = "0x200008C")]
public class MenuSaveRoom : MonoBehaviour
{
	[Token(Token = "0x200008D")]
	[CompilerGenerated]
	private sealed class <iLoadTitleInfo>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MenuSaveRoom <>4__this;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000300")]
			[Address(RVA = "0x9C55E4", Offset = "0x9C55E4", VA = "0x9C55E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000302")]
			[Address(RVA = "0x9C562C", Offset = "0x9C562C", VA = "0x9C562C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x9C3FFC", Offset = "0x9C3FFC", VA = "0x9C3FFC")]
		[DebuggerHidden]
		public <iLoadTitleInfo>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x9C5038", Offset = "0x9C5038", VA = "0x9C5038", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x9C503C", Offset = "0x9C503C", VA = "0x9C503C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x9C55EC", Offset = "0x9C55EC", VA = "0x9C55EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008E")]
	[CompilerGenerated]
	private sealed class <iSaveGame>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int slot;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MenuSaveRoom <>4__this;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000306")]
			[Address(RVA = "0x9C58B8", Offset = "0x9C58B8", VA = "0x9C58B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000308")]
			[Address(RVA = "0x9C5900", Offset = "0x9C5900", VA = "0x9C5900", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x9C4B68", Offset = "0x9C4B68", VA = "0x9C4B68")]
		[DebuggerHidden]
		public <iSaveGame>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x9C5634", Offset = "0x9C5634", VA = "0x9C5634", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x9C5638", Offset = "0x9C5638", VA = "0x9C5638", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x9C58C0", Offset = "0x9C58C0", VA = "0x9C58C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CanvasGroup[] allCanvases;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.UI.Button[] saveButtons;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.UI.Button[] loadButtons;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text confirmText;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.UI.Button confirmButton;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.UI.Button cancelButton;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int currentConfirmSlot;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool confirmingLoad;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool confirmingSave;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Toggle toggleAnalog;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Toggle toggleTeleport;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Toggle toggleRotation;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Toggle toggleSmoothRotation;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Toggle leftHand;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Toggle rightHand;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup smoothRotationCanvas;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Toggle[] toggleLanguage;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Toggle toggleSubtitle;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEngine.UI.Slider sliderVignette;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int currentMenu;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<bool> saveSlotAvailableList;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private SettingsSaveData settingsSaveData;

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x9C3A5C", Offset = "0x9C3A5C", VA = "0x9C3A5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x9C3AE8", Offset = "0x9C3AE8", VA = "0x9C3AE8")]
	private void LoadSettings()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x9C3E4C", Offset = "0x9C3E4C", VA = "0x9C3E4C")]
	private void SaveSettings()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x9C3DE4", Offset = "0x9C3DE4", VA = "0x9C3DE4")]
	[IteratorStateMachine(typeof(<iLoadTitleInfo>d__25))]
	private IEnumerator iLoadTitleInfo()
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x9C4024", Offset = "0x9C4024", VA = "0x9C4024")]
	private void UpdateEmptySlotText()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x9C4338", Offset = "0x9C4338", VA = "0x9C4338")]
	public void changeMenu(int menu)
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x9C44A0", Offset = "0x9C44A0", VA = "0x9C44A0")]
	public void previousMenu()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x9C44AC", Offset = "0x9C44AC", VA = "0x9C44AC")]
	public void nextMenu()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x9C44B8", Offset = "0x9C44B8", VA = "0x9C44B8")]
	public void ToggleLanguage(int language)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x9C4584", Offset = "0x9C4584", VA = "0x9C4584")]
	public void ToggleSubtitle(bool toggle)
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x9C45E0", Offset = "0x9C45E0", VA = "0x9C45E0")]
	public void ToggleTeleport(bool toggle)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x9C4640", Offset = "0x9C4640", VA = "0x9C4640")]
	public void ToggleLeftHanded(bool toggle)
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x9C469C", Offset = "0x9C469C", VA = "0x9C469C")]
	public void ToggleRotation(bool toggle)
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x9C471C", Offset = "0x9C471C", VA = "0x9C471C")]
	public void ToggleSmoothRotation(bool toggle)
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x9C4778", Offset = "0x9C4778", VA = "0x9C4778")]
	public void ChangeVignetteValue(float value)
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x9C4808", Offset = "0x9C4808", VA = "0x9C4808")]
	public void beginSave(int slot)
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x9C4B44", Offset = "0x9C4B44", VA = "0x9C4B44")]
	private void confirmSave()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x9C4ACC", Offset = "0x9C4ACC", VA = "0x9C4ACC")]
	[IteratorStateMachine(typeof(<iSaveGame>d__39))]
	private IEnumerator iSaveGame(int slot)
	{
		return null;
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x9C4B90", Offset = "0x9C4B90", VA = "0x9C4B90")]
	public void beginLoad(int slot)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x9C4DB0", Offset = "0x9C4DB0", VA = "0x9C4DB0")]
	private void confirmLoad()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x9C4DB8", Offset = "0x9C4DB8", VA = "0x9C4DB8")]
	private void loadGame(int slot)
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x9C4ED4", Offset = "0x9C4ED4", VA = "0x9C4ED4")]
	public void confirmAction()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x9C4F20", Offset = "0x9C4F20", VA = "0x9C4F20")]
	public void returnToGame()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x9C4FBC", Offset = "0x9C4FBC", VA = "0x9C4FBC")]
	public MenuSaveRoom()
	{
	}
}
[Token(Token = "0x200008F")]
public class MetalManSocket : MonoBehaviour
{
	[Token(Token = "0x2000090")]
	[CompilerGenerated]
	private sealed class <DelayDeleteBattery>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetalManSocket <>4__this;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000310")]
			[Address(RVA = "0x9C5C1C", Offset = "0x9C5C1C", VA = "0x9C5C1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000312")]
			[Address(RVA = "0x9C5C64", Offset = "0x9C5C64", VA = "0x9C5C64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x9C5990", Offset = "0x9C5990", VA = "0x9C5990")]
		[DebuggerHidden]
		public <DelayDeleteBattery>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x9C5B14", Offset = "0x9C5B14", VA = "0x9C5B14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x9C5B18", Offset = "0x9C5B18", VA = "0x9C5B18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x9C5C24", Offset = "0x9C5C24", VA = "0x9C5C24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject socketItem;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer matRenderer;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material deEmission;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] objectsToDisable;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EnemyHealth enemyHealth;

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x9C5908", Offset = "0x9C5908", VA = "0x9C5908")]
	private void Start()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x9C5928", Offset = "0x9C5928", VA = "0x9C5928")]
	[IteratorStateMachine(typeof(<DelayDeleteBattery>d__6))]
	private IEnumerator DelayDeleteBattery()
	{
		return null;
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x9C59B8", Offset = "0x9C59B8", VA = "0x9C59B8")]
	public void ObjectGrabbed()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x9C5B0C", Offset = "0x9C5B0C", VA = "0x9C5B0C")]
	public MetalManSocket()
	{
	}
}
[Token(Token = "0x2000091")]
public class MetroCardReader : MonoBehaviour
{
	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int puzzleID;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator animator;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashClose;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashOpen;

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x9C5C6C", Offset = "0x9C5C6C", VA = "0x9C5C6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x9C5D90", Offset = "0x9C5D90", VA = "0x9C5D90")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x9C5EF8", Offset = "0x9C5EF8", VA = "0x9C5EF8")]
	public MetroCardReader()
	{
	}
}
[Token(Token = "0x2000092")]
public class MovieScript : MonoBehaviour
{
	[Token(Token = "0x6000317")]
	[Address(RVA = "0x9C5F9C", Offset = "0x9C5F9C", VA = "0x9C5F9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x9C5FA0", Offset = "0x9C5FA0", VA = "0x9C5FA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x9C5FA4", Offset = "0x9C5FA4", VA = "0x9C5FA4")]
	public MovieScript()
	{
	}
}
[Token(Token = "0x2000093")]
public class ObjectDropAudio : MonoBehaviour
{
	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] dropSounds;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int audioClipSpeed;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minPitch;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxPitch;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioObject;

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x9C5FAC", Offset = "0x9C5FAC", VA = "0x9C5FAC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x9C60F0", Offset = "0x9C60F0", VA = "0x9C60F0")]
	public ObjectDropAudio()
	{
	}
}
[Token(Token = "0x2000094")]
public class PersistentAudio : MonoBehaviour
{
	[Token(Token = "0x2000095")]
	[CompilerGenerated]
	private sealed class <DelaySetLoadEvent>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PersistentAudio <>4__this;

		[Token(Token = "0x17000064")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000325")]
			[Address(RVA = "0x9C6B28", Offset = "0x9C6B28", VA = "0x9C6B28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000327")]
			[Address(RVA = "0x9C6B70", Offset = "0x9C6B70", VA = "0x9C6B70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x9C6654", Offset = "0x9C6654", VA = "0x9C6654")]
		[DebuggerHidden]
		public <DelaySetLoadEvent>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x9C698C", Offset = "0x9C698C", VA = "0x9C698C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x9C6990", Offset = "0x9C6990", VA = "0x9C6990", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x9C6B30", Offset = "0x9C6B30", VA = "0x9C6B30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PersistentAudio inst;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int audioID;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float levelVolume;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float levelLowPass;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource audioSource;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioLowPassFilter lowPass;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Scene triggerScene;

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x9C6100", Offset = "0x9C6100", VA = "0x9C6100")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x9C6440", Offset = "0x9C6440", VA = "0x9C6440")]
	[IteratorStateMachine(typeof(<DelaySetLoadEvent>d__8))]
	private IEnumerator DelaySetLoadEvent()
	{
		return null;
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x9C6520", Offset = "0x9C6520", VA = "0x9C6520")]
	public void ClearEventListener()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x9C667C", Offset = "0x9C667C", VA = "0x9C667C")]
	private void Inst_OnMainGameSceneLoad(Scene scene)
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x9C64A8", Offset = "0x9C64A8", VA = "0x9C64A8")]
	private void UpdatePersistentAudio()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x9C6984", Offset = "0x9C6984", VA = "0x9C6984")]
	public PersistentAudio()
	{
	}
}
[Token(Token = "0x2000096")]
public class PlayerBodyCollision : MonoBehaviour
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform headset;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform playArea;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform feet;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider bodyCollider;

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x9C6B78", Offset = "0x9C6B78", VA = "0x9C6B78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x9C6BC8", Offset = "0x9C6BC8", VA = "0x9C6BC8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x9C6BCC", Offset = "0x9C6BCC", VA = "0x9C6BCC")]
	private void UpdateCollider()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x9C6DA8", Offset = "0x9C6DA8", VA = "0x9C6DA8")]
	public PlayerBodyCollision()
	{
	}
}
[Token(Token = "0x2000097")]
public class PlayerClothCollider : MonoBehaviour
{
	[Token(Token = "0x600032C")]
	[Address(RVA = "0x9C6DB0", Offset = "0x9C6DB0", VA = "0x9C6DB0")]
	public PlayerClothCollider()
	{
	}
}
[Token(Token = "0x2000098")]
public class PlayerClothColliderLoader : MonoBehaviour
{
	[Token(Token = "0x600032D")]
	[Address(RVA = "0x9C6DB8", Offset = "0x9C6DB8", VA = "0x9C6DB8")]
	private void Start()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x9C6FBC", Offset = "0x9C6FBC", VA = "0x9C6FBC")]
	public PlayerClothColliderLoader()
	{
	}
}
[Token(Token = "0x2000099")]
public class PlayerEnemySight : MonoBehaviour
{
	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DangerTrack[] dangerTracks;

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x9C6FC4", Offset = "0x9C6FC4", VA = "0x9C6FC4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x9C7164", Offset = "0x9C7164", VA = "0x9C7164")]
	public PlayerEnemySight()
	{
	}
}
[Token(Token = "0x200009A")]
public class PlayerFootsteps : MonoBehaviour
{
	[Token(Token = "0x200009B")]
	[CompilerGenerated]
	private sealed class <FootstepStart>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerFootsteps <>4__this;

		[Token(Token = "0x17000066")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000340")]
			[Address(RVA = "0x9C7924", Offset = "0x9C7924", VA = "0x9C7924", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000342")]
			[Address(RVA = "0x9C796C", Offset = "0x9C796C", VA = "0x9C796C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x9C75A0", Offset = "0x9C75A0", VA = "0x9C75A0")]
		[DebuggerHidden]
		public <FootstepStart>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x9C7818", Offset = "0x9C7818", VA = "0x9C7818", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x9C781C", Offset = "0x9C781C", VA = "0x9C781C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x9C792C", Offset = "0x9C792C", VA = "0x9C792C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioDefault;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioStep;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject animSoundObject;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform playerTransform;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool walking;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float speed;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine co;

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x9C716C", Offset = "0x9C716C", VA = "0x9C716C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x9BC8A4", Offset = "0x9BC8A4", VA = "0x9BC8A4")]
	public void ResetAudioStep()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x9C7178", Offset = "0x9C7178", VA = "0x9C7178")]
	public void UpdateControllerInput()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x9C73A4", Offset = "0x9C73A4", VA = "0x9C73A4")]
	private void TouchLeftPressed()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x9C7438", Offset = "0x9C7438", VA = "0x9C7438")]
	private void TouchLeftReleased()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x9C7308", Offset = "0x9C7308", VA = "0x9C7308")]
	private void TouchRightPressed()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x9C739C", Offset = "0x9C739C", VA = "0x9C739C")]
	private void TouchRightReleased()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x9C74A8", Offset = "0x9C74A8", VA = "0x9C74A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x9C74AC", Offset = "0x9C74AC", VA = "0x9C74AC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x9C7440", Offset = "0x9C7440", VA = "0x9C7440")]
	[IteratorStateMachine(typeof(<FootstepStart>d__17))]
	private IEnumerator FootstepStart()
	{
		return null;
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x9C75C8", Offset = "0x9C75C8", VA = "0x9C75C8")]
	private void PlayFootstepAudio()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x9C77B8", Offset = "0x9C77B8", VA = "0x9C77B8")]
	public PlayerFootsteps()
	{
	}
}
[Token(Token = "0x200009C")]
public class PrefabInstance : MonoBehaviour
{
	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string prefabName;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int weaponID;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int count;

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x9C7974", Offset = "0x9C7974", VA = "0x9C7974")]
	public PrefabInstance()
	{
	}
}
[Token(Token = "0x200009D")]
public class PreLoadObjects : MonoBehaviour
{
	[Token(Token = "0x200009E")]
	[CompilerGenerated]
	private sealed class <PreLoadCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PreLoadObjects <>4__this;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject> <preLoadList>5__2;

		[Token(Token = "0x17000068")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034A")]
			[Address(RVA = "0x9C7E60", Offset = "0x9C7E60", VA = "0x9C7E60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x9C7EA8", Offset = "0x9C7EA8", VA = "0x9C7EA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x9C7A8C", Offset = "0x9C7A8C", VA = "0x9C7A8C")]
		[DebuggerHidden]
		public <PreLoadCoroutine>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x9C7ABC", Offset = "0x9C7ABC", VA = "0x9C7ABC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x9C7AC0", Offset = "0x9C7AC0", VA = "0x9C7AC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x9C7E68", Offset = "0x9C7E68", VA = "0x9C7E68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> objectPrefabs;

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x9C797C", Offset = "0x9C797C", VA = "0x9C797C")]
	public void PreLoad()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x9C7A24", Offset = "0x9C7A24", VA = "0x9C7A24")]
	[IteratorStateMachine(typeof(<PreLoadCoroutine>d__2))]
	private IEnumerator PreLoadCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x9C7AB4", Offset = "0x9C7AB4", VA = "0x9C7AB4")]
	public PreLoadObjects()
	{
	}
}
[Token(Token = "0x200009F")]
public class PuzzleCompleteActivator : MonoBehaviour
{
	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int puzzleID;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TriggerContainer triggers;

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x9C7EB0", Offset = "0x9C7EB0", VA = "0x9C7EB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x9C7F88", Offset = "0x9C7F88", VA = "0x9C7F88")]
	public PuzzleCompleteActivator()
	{
	}
}
[Token(Token = "0x20000A0")]
public class PuzzleItem : MonoBehaviour
{
	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int puzzleID;

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x9C7F90", Offset = "0x9C7F90", VA = "0x9C7F90")]
	public PuzzleItem()
	{
	}
}
[Token(Token = "0x20000A1")]
public class PuzzleSnapZone : MonoBehaviour
{
	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string correctPrefabName;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SnapZone snapDrop;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool snapCorrect;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject snappedObject;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool isItemDelete;

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x9C7F98", Offset = "0x9C7F98", VA = "0x9C7F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x9C811C", Offset = "0x9C811C", VA = "0x9C811C")]
	public void CheckSnap(Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x9C81E0", Offset = "0x9C81E0", VA = "0x9C81E0")]
	private void Snap()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x9C82E4", Offset = "0x9C82E4", VA = "0x9C82E4")]
	private void SnapDrop_ObjectUnsnappedFromDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x9C82EC", Offset = "0x9C82EC", VA = "0x9C82EC")]
	public void LockSocket()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x9C83BC", Offset = "0x9C83BC", VA = "0x9C83BC")]
	public PuzzleSnapZone()
	{
	}
}
[Token(Token = "0x20000A2")]
public class PuzzleSocketManager : MonoBehaviour
{
	[Token(Token = "0x20000A3")]
	[CompilerGenerated]
	private sealed class <DelayCheck>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuzzleSocketManager <>4__this;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000361")]
			[Address(RVA = "0x9C8C0C", Offset = "0x9C8C0C", VA = "0x9C8C0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000363")]
			[Address(RVA = "0x9C8C54", Offset = "0x9C8C54", VA = "0x9C8C54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x9C879C", Offset = "0x9C879C", VA = "0x9C879C")]
		[DebuggerHidden]
		public <DelayCheck>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x9C8B64", Offset = "0x9C8B64", VA = "0x9C8B64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x9C8B68", Offset = "0x9C8B68", VA = "0x9C8B68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x9C8C14", Offset = "0x9C8C14", VA = "0x9C8C14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool animated;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int puzzleID;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SnapZone[] snapDropZones;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TriggerContainer triggers;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator anim;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x9C83C4", Offset = "0x9C83C4", VA = "0x9C83C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x9C846C", Offset = "0x9C846C", VA = "0x9C846C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x9C8714", Offset = "0x9C8714", VA = "0x9C8714")]
	private void BeginCheckAllSnaps(Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x9C8734", Offset = "0x9C8734", VA = "0x9C8734")]
	[IteratorStateMachine(typeof(<DelayCheck>d__9))]
	private IEnumerator DelayCheck()
	{
		return null;
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x9C87C4", Offset = "0x9C87C4", VA = "0x9C87C4")]
	private void CheckAllSnaps()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x9C88F0", Offset = "0x9C88F0", VA = "0x9C88F0")]
	private void BeginSuccess()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x9C8AEC", Offset = "0x9C8AEC", VA = "0x9C8AEC")]
	public PuzzleSocketManager()
	{
	}
}
[Token(Token = "0x20000A4")]
public class RadioButtonMenu : MonoBehaviour
{
	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle[] radioButtons;

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x9C8C5C", Offset = "0x9C8C5C", VA = "0x9C8C5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x9C8C60", Offset = "0x9C8C60", VA = "0x9C8C60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x9C8C64", Offset = "0x9C8C64", VA = "0x9C8C64")]
	public void ToggleRadioButton(int id)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x9C8D3C", Offset = "0x9C8D3C", VA = "0x9C8D3C")]
	public RadioButtonMenu()
	{
	}
}
[Token(Token = "0x20000A5")]
public class RandomAnimStart : MonoBehaviour
{
	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string animName;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float animSpeedMod;

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x9C8D44", Offset = "0x9C8D44", VA = "0x9C8D44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x9C8E08", Offset = "0x9C8E08", VA = "0x9C8E08")]
	public RandomAnimStart()
	{
	}
}
[Token(Token = "0x20000A6")]
public class RandomAtmoAudio : MonoBehaviour
{
	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minTime;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int maxTime;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minVolume;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxVolume;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int distance;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] atmoSounds;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<int> soundBank;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float timer;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float randyDelay;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform playerPosition;

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x9C8E10", Offset = "0x9C8E10", VA = "0x9C8E10")]
	private void Start()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x9C8F50", Offset = "0x9C8F50", VA = "0x9C8F50")]
	private void Update()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x9C8E8C", Offset = "0x9C8E8C", VA = "0x9C8E8C")]
	private void populateSoundBank()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x9C91A8", Offset = "0x9C91A8", VA = "0x9C91A8")]
	private Vector3 RandomCircle(Vector3 center, float radius)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x9C9218", Offset = "0x9C9218", VA = "0x9C9218")]
	public RandomAtmoAudio()
	{
	}
}
[Token(Token = "0x20000A7")]
public class RandomStaticAudio : MonoBehaviour
{
	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isFinalBoss;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isMonster;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool randomPitch;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool countClipInDelay;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject soundObject;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int minTime;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxTime;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minVolume;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxVolume;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] staticSounds;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DialogScriptableObject[] dialogSOs;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> soundBank;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timer;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float randyDelay;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EnemyHealth health;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool UseSubtitle;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private DialogScriptableObject currentDialogSO;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int subtitleIndex;

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x9C9294", Offset = "0x9C9294", VA = "0x9C9294")]
	private void Start()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x9C93C8", Offset = "0x9C93C8", VA = "0x9C93C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x9C9480", Offset = "0x9C9480", VA = "0x9C9480")]
	private void playSound()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x9C9304", Offset = "0x9C9304", VA = "0x9C9304")]
	private void populateSoundBank()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x9C9810", Offset = "0x9C9810", VA = "0x9C9810")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x9C9A00", Offset = "0x9C9A00", VA = "0x9C9A00")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x9C9A10", Offset = "0x9C9A10", VA = "0x9C9A10")]
	public RandomStaticAudio()
	{
	}
}
[Token(Token = "0x20000A8")]
public class Recoil : MonoBehaviour
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float recoil;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float maxRecoil_x;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float maxRecoil_y;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float recoilSpeed;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x9C9A8C", Offset = "0x9C9A8C", VA = "0x9C9A8C")]
	public void StartRecoil(float recoilParam, float maxRecoil_xParam, float recoilSpeedParam)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x9C9AB4", Offset = "0x9C9AB4", VA = "0x9C9AB4")]
	private void recoiling()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x9C9CB0", Offset = "0x9C9CB0", VA = "0x9C9CB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x9C9CB4", Offset = "0x9C9CB4", VA = "0x9C9CB4")]
	public Recoil()
	{
	}
}
[Token(Token = "0x20000A9")]
public class ResetAnimTrigger : StateMachineBehaviour
{
	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string trigger;

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x9C9CD0", Offset = "0x9C9CD0", VA = "0x9C9CD0", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x9C9CF4", Offset = "0x9C9CF4", VA = "0x9C9CF4")]
	public ResetAnimTrigger()
	{
	}
}
[Token(Token = "0x20000AA")]
public class RotateTowardsTarget : MonoBehaviour
{
	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform target;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float headArcMin;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xOffset;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float yOffset;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float zOffset;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion targetRotation;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float distanceToTargetSqr;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float targetEulerX;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float targetEulerY;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float targetEulerZ;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion defaultRotation;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion defaultLocalRotation;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion myRotation;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Quaternion manager1;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Quaternion manager2;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform parentBody;

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x9C9CFC", Offset = "0x9C9CFC", VA = "0x9C9CFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x9C9DB8", Offset = "0x9C9DB8", VA = "0x9C9DB8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x9CA230", Offset = "0x9CA230", VA = "0x9CA230")]
	public RotateTowardsTarget()
	{
	}
}
[Token(Token = "0x20000AB")]
public class RotateTowardsTargetObject : MonoBehaviour
{
	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform target;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform parentBody;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float xOffset;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yOffset;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float zOffset;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion targetRotation;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float distanceToTargetSqr;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float targetEulerX;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float targetEulerY;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float targetEulerZ;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion defaultRotation;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion defaultLocalRotation;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion myRotation;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion manager1;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Quaternion manager2;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool ignoreHeadAngle;

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x9CA238", Offset = "0x9CA238", VA = "0x9CA238")]
	private void Start()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x9CA2F4", Offset = "0x9CA2F4", VA = "0x9CA2F4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x9CA754", Offset = "0x9CA754", VA = "0x9CA754")]
	public RotateTowardsTargetObject()
	{
	}
}
[Token(Token = "0x20000AC")]
public class SceneChangeOnSnap : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	[CompilerGenerated]
	private sealed class <DelayCheckSnap>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneChangeOnSnap <>4__this;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600038A")]
			[Address(RVA = "0x9CAA64", Offset = "0x9CAA64", VA = "0x9CAA64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600038C")]
			[Address(RVA = "0x9CAAAC", Offset = "0x9CAAAC", VA = "0x9CAAAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x9CA910", Offset = "0x9CA910", VA = "0x9CA910")]
		[DebuggerHidden]
		public <DelayCheckSnap>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x9CA9AC", Offset = "0x9CA9AC", VA = "0x9CA9AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x9CA9B0", Offset = "0x9CA9B0", VA = "0x9CA9B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x9CAA6C", Offset = "0x9CAA6C", VA = "0x9CAA6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PuzzleSnapZone puzzleSnap;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SnapZone snapDrop;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string sceneID;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int warpID;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip exitSound;

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x9CA75C", Offset = "0x9CA75C", VA = "0x9CA75C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x9CA888", Offset = "0x9CA888", VA = "0x9CA888")]
	private void SnapDrop_ObjectSnappedToDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x9CA8A8", Offset = "0x9CA8A8", VA = "0x9CA8A8")]
	[IteratorStateMachine(typeof(<DelayCheckSnap>d__7))]
	private IEnumerator DelayCheckSnap()
	{
		return null;
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x9CA938", Offset = "0x9CA938", VA = "0x9CA938")]
	private void SceneChange()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x9CA9A4", Offset = "0x9CA9A4", VA = "0x9CA9A4")]
	public SceneChangeOnSnap()
	{
	}
}
[Token(Token = "0x20000AE")]
public class SceneSettings : MonoBehaviour
{
	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SceneSettings sceneSettings;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool splashScene;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool pointerOnly;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float dustQuantity;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fog1;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool fog2;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool fog3;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool fogGround;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool fogGround2;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip sceneFootstep;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PostProcessVolume[] postProcessVolumes;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int MapID;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject playerPrefab;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float TextureResolutionScale;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float PicoTextureResolutionScale;

	[Token(Token = "0x1700006E")]
	public AudioSource AudioSource
	{
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x9CAAFC", Offset = "0x9CAAFC", VA = "0x9CAAFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006F")]
	public PostProcessVolume[] PostProcessVolumes
	{
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x9CAB04", Offset = "0x9CAB04", VA = "0x9CAB04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x9CAAB4", Offset = "0x9CAAB4", VA = "0x9CAAB4")]
	public static SceneSettings GetSceneSettings()
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x9CAB0C", Offset = "0x9CAB0C", VA = "0x9CAB0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x9CB080", Offset = "0x9CB080", VA = "0x9CB080")]
	private void Start()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x9CB098", Offset = "0x9CB098", VA = "0x9CB098")]
	private void SetDustQuantity()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x9CB0F4", Offset = "0x9CB0F4", VA = "0x9CB0F4")]
	private void SetFootstep()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x9CAF78", Offset = "0x9CAF78", VA = "0x9CAF78")]
	private void InstantiateDefaultPostProcessing()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x9CB1C0", Offset = "0x9CB1C0", VA = "0x9CB1C0")]
	public SceneSettings()
	{
	}
}
[Token(Token = "0x20000AF")]
public class ScreenOverlayManager : MonoBehaviour
{
	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScreenSphere overlayDamage;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ScreenSphere overlayTV;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ScreenOverlay overlayWhite;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ScreenOverlay overlayBlack;

	[Token(Token = "0x17000070")]
	public ScreenOverlay overlayScreenFader
	{
		[Token(Token = "0x6000396")]
		[Address(RVA = "0x9CB1D4", Offset = "0x9CB1D4", VA = "0x9CB1D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x9CB1DC", Offset = "0x9CB1DC", VA = "0x9CB1DC")]
	public ScreenOverlayManager()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B0")]
public class GameSaveData
{
	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int difficulty;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerStats playerStats;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<RoomData> RoomList;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<MapData> MapList;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<PuzzleData> PuzzleList;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InventoryItem[] InventoryData;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public InventoryItem[] StorageItemData;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<string> clearedTasks;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool[] clearedAchievements;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool[] unlockedMaps;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string saveTitle;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float saveTime;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string saveScene;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int saveMap;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int saveWarp;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int saveRespawnSlot;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int lastSaveTime;

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x9CB1E4", Offset = "0x9CB1E4", VA = "0x9CB1E4")]
	public string SaveToString()
	{
		return null;
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x9CB1EC", Offset = "0x9CB1EC", VA = "0x9CB1EC")]
	public static GameSaveData CreateFromJSON(string jsonString)
	{
		return null;
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x9CB234", Offset = "0x9CB234", VA = "0x9CB234")]
	public GameSaveData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B1")]
public class RoomData
{
	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string roomName;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RoomItemData> itemList;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<RoomMonsterData> monsterList;

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x9CB3B4", Offset = "0x9CB3B4", VA = "0x9CB3B4")]
	public RoomData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class RoomItemData
{
	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string itemType;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int itemCount;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float itemPosX;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float itemPosY;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float itemPosZ;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float itemRotX;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float itemRotY;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float itemRotZ;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x9CB474", Offset = "0x9CB474", VA = "0x9CB474")]
	public RoomItemData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B3")]
public class RoomMonsterData
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool alive;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float instanceID;

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x9CB47C", Offset = "0x9CB47C", VA = "0x9CB47C")]
	public RoomMonsterData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B4")]
public class MapData
{
	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int mapID;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<StampData> stampList;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x9CB484", Offset = "0x9CB484", VA = "0x9CB484")]
	public MapData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B5")]
public class StampData
{
	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string material;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float stampPosX;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float stampPosY;

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x9CB500", Offset = "0x9CB500", VA = "0x9CB500")]
	public StampData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B6")]
public class PlayerStats
{
	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int maxHealth;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int currentHealth;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int weapon1;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int weapon2;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] ammoInGun;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] ammoTotalCount;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int syringeTotalCount;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int healthkitTotalCount;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<float> randomStats;

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x9CB3AC", Offset = "0x9CB3AC", VA = "0x9CB3AC")]
	public PlayerStats()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B7")]
public class InventoryItem
{
	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string item;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int count;

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x9CB508", Offset = "0x9CB508", VA = "0x9CB508")]
	public InventoryItem()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B8")]
public class PuzzleData
{
	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string puzzleName;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool completed;

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x9CB558", Offset = "0x9CB558", VA = "0x9CB558")]
	public PuzzleData()
	{
	}
}
[Token(Token = "0x20000B9")]
public class SetAnimState : StateMachineBehaviour
{
	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int animState;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x9CB5A8", Offset = "0x9CB5A8", VA = "0x9CB5A8", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x9CB624", Offset = "0x9CB624", VA = "0x9CB624")]
	public SetAnimState()
	{
	}
}
[Token(Token = "0x20000BA")]
public class ShittyEndingAlsetHookup : MonoBehaviour
{
	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x9CB694", Offset = "0x9CB694", VA = "0x9CB694")]
	public void StartEndFade()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x9CB708", Offset = "0x9CB708", VA = "0x9CB708")]
	public ShittyEndingAlsetHookup()
	{
	}
}
[Token(Token = "0x20000BB")]
public class ShittyPlayerObjectTracker : MonoBehaviour
{
	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject playerHead;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject leftController;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject rightController;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PostProcessingBehaviour postProcessing;

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x9CB710", Offset = "0x9CB710", VA = "0x9CB710")]
	public ShittyPlayerObjectTracker()
	{
	}
}
[Token(Token = "0x20000BC")]
public class ShotgunCollider : MonoBehaviour
{
	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform colliderOrigin;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject guideSphere;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask bulletLayerMask;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<GameObject> Targets;

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x9CB718", Offset = "0x9CB718", VA = "0x9CB718")]
	public ShotgunCollider()
	{
	}
}
[Token(Token = "0x20000BD")]
public class SightCollider : MonoBehaviour
{
	[Token(Token = "0x20000BE")]
	public delegate void PlayerSighted();

	[Token(Token = "0x20000BF")]
	public delegate void PlayerUnSighted();

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sightedMemoryTime;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform sightPoint;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool playerInRange;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask rayLayer;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform player;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 playerDirection;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private RaycastHit rayHit;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float sightedTimer;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float spottedLimit;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool justSpotted;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool playerInEnemyVision;

	[Token(Token = "0x14000003")]
	public event PlayerSighted OnPlayerSighted
	{
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x9CB794", Offset = "0x9CB794", VA = "0x9CB794")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x9CB830", Offset = "0x9CB830", VA = "0x9CB830")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event PlayerUnSighted OnPlayerUnSighted
	{
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x9CB8CC", Offset = "0x9CB8CC", VA = "0x9CB8CC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x9CB968", Offset = "0x9CB968", VA = "0x9CB968")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x9CBA04", Offset = "0x9CBA04", VA = "0x9CBA04")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x9CBB00", Offset = "0x9CBB00", VA = "0x9CBB00")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x9CBDA8", Offset = "0x9CBDA8", VA = "0x9CBDA8")]
	public void ForceSpotPlayer()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x9CBDDC", Offset = "0x9CBDDC", VA = "0x9CBDDC")]
	public void ForceSpotPlayer(EnemyHealth health)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x9CBE30", Offset = "0x9CBE30", VA = "0x9CBE30")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x9CBE98", Offset = "0x9CBE98", VA = "0x9CBE98")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x9CBEFC", Offset = "0x9CBEFC", VA = "0x9CBEFC")]
	public SightCollider()
	{
	}
}
[Token(Token = "0x20000C0")]
public class SpaceBarActivator : MonoBehaviour
{
	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Behaviour[] behavioursToToggle;

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x9CC0FC", Offset = "0x9CC0FC", VA = "0x9CC0FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x9CC100", Offset = "0x9CC100", VA = "0x9CC100")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x9CC198", Offset = "0x9CC198", VA = "0x9CC198")]
	public SpaceBarActivator()
	{
	}
}
[Token(Token = "0x20000C1")]
public class SplashScript : MonoBehaviour
{
	[Token(Token = "0x20000C2")]
	[CompilerGenerated]
	private sealed class <DelayLoad>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003C6")]
			[Address(RVA = "0x9CC38C", Offset = "0x9CC38C", VA = "0x9CC38C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003C8")]
			[Address(RVA = "0x9CC3D4", Offset = "0x9CC3D4", VA = "0x9CC3D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x9CC220", Offset = "0x9CC220", VA = "0x9CC220")]
		[DebuggerHidden]
		public <DelayLoad>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x9CC250", Offset = "0x9CC250", VA = "0x9CC250", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x9CC254", Offset = "0x9CC254", VA = "0x9CC254", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x9CC394", Offset = "0x9CC394", VA = "0x9CC394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x9CC1A0", Offset = "0x9CC1A0", VA = "0x9CC1A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x9CC1C0", Offset = "0x9CC1C0", VA = "0x9CC1C0")]
	[IteratorStateMachine(typeof(<DelayLoad>d__1))]
	private IEnumerator DelayLoad()
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x9CC248", Offset = "0x9CC248", VA = "0x9CC248")]
	public SplashScript()
	{
	}
}
[Token(Token = "0x20000C3")]
[RequireComponent(typeof(Grabbable))]
public class Staircase : MonoBehaviour
{
	[Token(Token = "0x20000C4")]
	[CompilerGenerated]
	private sealed class <FadeAndMove>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Staircase <>4__this;

		[Token(Token = "0x17000073")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003D3")]
			[Address(RVA = "0x9CC8E4", Offset = "0x9CC8E4", VA = "0x9CC8E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x9CC92C", Offset = "0x9CC92C", VA = "0x9CC92C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x9CC6BC", Offset = "0x9CC6BC", VA = "0x9CC6BC")]
		[DebuggerHidden]
		public <FadeAndMove>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x9CC6EC", Offset = "0x9CC6EC", VA = "0x9CC6EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x9CC6F0", Offset = "0x9CC6F0", VA = "0x9CC6F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x9CC8EC", Offset = "0x9CC8EC", VA = "0x9CC8EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioSteps;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform warpAscend;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform warpDescend;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform currentWarpTransform;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private BNG.ScreenFader screenFader;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private FOVLimiter FOV;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform player;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isToggled;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool fadeOut;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool fadeIn;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioSource;

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x9CC3DC", Offset = "0x9CC3DC", VA = "0x9CC3DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x9CC524", Offset = "0x9CC524", VA = "0x9CC524")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x9CC610", Offset = "0x9CC610", VA = "0x9CC610")]
	public void ToggleStairs()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x9CC61C", Offset = "0x9CC61C", VA = "0x9CC61C")]
	public void UnToggleStairs()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x9CC624", Offset = "0x9CC624", VA = "0x9CC624")]
	public void GripPressed(object sender)
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x9CC654", Offset = "0x9CC654", VA = "0x9CC654")]
	[IteratorStateMachine(typeof(<FadeAndMove>d__16))]
	private IEnumerator FadeAndMove()
	{
		return null;
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x9CC6E4", Offset = "0x9CC6E4", VA = "0x9CC6E4")]
	public Staircase()
	{
	}
}
[Token(Token = "0x20000C5")]
public class StorageChestAdd : MonoBehaviour
{
	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool storageToggled;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip addItemAudio;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> storageSlots;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas invCanvas;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float socketTimer;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x9CC934", Offset = "0x9CC934", VA = "0x9CC934")]
	private void Start()
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x9CCE30", Offset = "0x9CCE30", VA = "0x9CCE30")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x9CCE5C", Offset = "0x9CCE5C", VA = "0x9CCE5C")]
	public void toggleStorage(bool state)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x9CCFB8", Offset = "0x9CCFB8", VA = "0x9CCFB8")]
	private void OnTriggerEnter(Collider draggedCollider)
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x9CD348", Offset = "0x9CD348", VA = "0x9CD348")]
	private void AddItemToInventory(GameObject item)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x9CDC94", Offset = "0x9CDC94", VA = "0x9CDC94")]
	private void AddItemToInventory(GameObject item, int slotOverride)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x9CD6AC", Offset = "0x9CD6AC", VA = "0x9CD6AC")]
	public void AddAmmo(GameObject item)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x9CDF24", Offset = "0x9CDF24", VA = "0x9CDF24")]
	public void pauseSocketable()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x9CDF30", Offset = "0x9CDF30", VA = "0x9CDF30")]
	public StorageChestAdd()
	{
	}
}
[Token(Token = "0x20000C6")]
public class StorageChestToggle : MonoBehaviour
{
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StorageChestAdd StorageUI;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CanvasGroup HoverTextCanvas;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isOpened;

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x9CDF38", Offset = "0x9CDF38", VA = "0x9CDF38")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x9CE004", Offset = "0x9CE004", VA = "0x9CE004")]
	public void UpdateDisplay()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x9CE134", Offset = "0x9CE134", VA = "0x9CE134")]
	private void HandleChange(INOQ_Chest chest)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x9CE1DC", Offset = "0x9CE1DC", VA = "0x9CE1DC")]
	public StorageChestToggle()
	{
	}
}
[Token(Token = "0x20000C7")]
public class StorageSlot : MonoBehaviour
{
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StorageChestAdd inventoryManager;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SlotGraphics;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int slotID;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string prefabItem;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RawImage itemIcon;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text itemCountText;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int itemCount;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material defaultMat;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material highlightMat;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text itemText;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject leftController;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject rightController;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip audioClick;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip audioRemove;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject collidingController;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject grippedController;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool grabbable;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioSource audioSource;

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x9CE1E4", Offset = "0x9CE1E4", VA = "0x9CE1E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x9CE2E8", Offset = "0x9CE2E8", VA = "0x9CE2E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x9CE424", Offset = "0x9CE424", VA = "0x9CE424")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x9CCC84", Offset = "0x9CCC84", VA = "0x9CCC84")]
	public void UpdateItemModel()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x9CEC2C", Offset = "0x9CEC2C", VA = "0x9CEC2C")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x9CEF04", Offset = "0x9CEF04", VA = "0x9CEF04")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x9CF008", Offset = "0x9CF008", VA = "0x9CF008")]
	private void GripPressedLeft(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x9CF010", Offset = "0x9CF010", VA = "0x9CF010")]
	private void GripPressedRight(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x9CF018", Offset = "0x9CF018", VA = "0x9CF018")]
	private void GripReleasedLeft(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x9CF020", Offset = "0x9CF020", VA = "0x9CF020")]
	private void GripReleasedRight(Grabbable grabbable)
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x9CE608", Offset = "0x9CE608", VA = "0x9CE608")]
	private void GripPressed(GameObject controller)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x9CEB24", Offset = "0x9CEB24", VA = "0x9CEB24")]
	private void GripReleased(GameObject controller)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x9CF028", Offset = "0x9CF028", VA = "0x9CF028")]
	public StorageSlot()
	{
	}
}
[Token(Token = "0x20000C8")]
public class TapeRecorder : MonoBehaviour
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DialogScriptableObject dialogSO;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioStart;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioStop;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource tapeClick;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float inputTimer;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int subtitleIndex;

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x9CF030", Offset = "0x9CF030", VA = "0x9CF030")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x9CF0BC", Offset = "0x9CF0BC", VA = "0x9CF0BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x9CF0E8", Offset = "0x9CF0E8", VA = "0x9CF0E8")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x9CF178", Offset = "0x9CF178", VA = "0x9CF178")]
	public void PlayTape()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x9CF2F0", Offset = "0x9CF2F0", VA = "0x9CF2F0")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x9CF4A4", Offset = "0x9CF4A4", VA = "0x9CF4A4")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x9CF4B4", Offset = "0x9CF4B4", VA = "0x9CF4B4")]
	public TapeRecorder()
	{
	}
}
[Token(Token = "0x20000C9")]
public class TriggerAnimation : MonoBehaviour
{
	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator actorAnim;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int animID;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x9E4648", Offset = "0x9E4648", VA = "0x9E4648")]
	public void Trigger()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x9E46BC", Offset = "0x9E46BC", VA = "0x9E46BC")]
	public TriggerAnimation()
	{
	}
}
[Token(Token = "0x20000CA")]
public class TriggerContainer : MonoBehaviour
{
	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Behaviour[] behavioursToToggle;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] objectsToToggle;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int puzzleToActivate;

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x9E472C", Offset = "0x9E472C", VA = "0x9E472C")]
	[ContextMenu("Force Trigger")]
	public void Trigger()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x9E48A8", Offset = "0x9E48A8", VA = "0x9E48A8")]
	public TriggerContainer()
	{
	}
}
[Token(Token = "0x20000CB")]
public class TriggerKill : MonoBehaviour
{
	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyHealth monsterToKill;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isViscusDoor;

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x9E48B8", Offset = "0x9E48B8", VA = "0x9E48B8")]
	public void Trigger()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x9E4B3C", Offset = "0x9E4B3C", VA = "0x9E4B3C")]
	public TriggerKill()
	{
	}
}
[Token(Token = "0x20000CC")]
public class TriggerOnDeath : MonoBehaviour
{
	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private EnemyHealth health;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TriggerContainer triggers;

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x9E4B44", Offset = "0x9E4B44", VA = "0x9E4B44")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x9E4C20", Offset = "0x9E4C20", VA = "0x9E4C20")]
	private void TriggerDeath(EnemyHealth dyingEnemy)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x9E4D48", Offset = "0x9E4D48", VA = "0x9E4D48")]
	public TriggerOnDeath()
	{
	}
}
[Token(Token = "0x20000CD")]
public class TriggerOnEnter : MonoBehaviour
{
	[Token(Token = "0x20000CE")]
	public delegate void CollisionEnter(Collider collider);

	[Token(Token = "0x20000CF")]
	public delegate void CollisionExit(Collider collider);

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider thisCollider;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TriggerContainer triggers;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TriggerAnimation triggerAnimation;

	[Token(Token = "0x14000005")]
	public event CollisionEnter OnCollisionEnter
	{
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x9E4D50", Offset = "0x9E4D50", VA = "0x9E4D50")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x9E4DEC", Offset = "0x9E4DEC", VA = "0x9E4DEC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event CollisionExit OnCollisionExit
	{
		[Token(Token = "0x6000403")]
		[Address(RVA = "0x9E4E88", Offset = "0x9E4E88", VA = "0x9E4E88")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000404")]
		[Address(RVA = "0x9E4F24", Offset = "0x9E4F24", VA = "0x9E4F24")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x9E4FC0", Offset = "0x9E4FC0", VA = "0x9E4FC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x9E5060", Offset = "0x9E5060", VA = "0x9E5060")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x9E51A4", Offset = "0x9E51A4", VA = "0x9E51A4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x9E526C", Offset = "0x9E526C", VA = "0x9E526C")]
	public TriggerOnEnter()
	{
	}
}
[Token(Token = "0x20000D0")]
public class TriggerOnGametime : MonoBehaviour
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TriggerContainer triggers;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxGameTime;

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x9E554C", Offset = "0x9E554C", VA = "0x9E554C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x9E55FC", Offset = "0x9E55FC", VA = "0x9E55FC")]
	public TriggerOnGametime()
	{
	}
}
[Token(Token = "0x20000D1")]
public class TriggerOnPickup : MonoBehaviour
{
	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool initialized;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TriggerContainer triggers;

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x9E5604", Offset = "0x9E5604", VA = "0x9E5604")]
	private void Start()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x9E5700", Offset = "0x9E5700", VA = "0x9E5700")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x9E5808", Offset = "0x9E5808", VA = "0x9E5808")]
	public void TriggerGrab(Grabber grabber)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x9E5820", Offset = "0x9E5820", VA = "0x9E5820")]
	public TriggerOnPickup()
	{
	}
}
[Token(Token = "0x20000D2")]
public class TriggerOnSight : MonoBehaviour
{
	[Token(Token = "0x6000417")]
	[Address(RVA = "0x9E5828", Offset = "0x9E5828", VA = "0x9E5828")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x9E58B8", Offset = "0x9E58B8", VA = "0x9E58B8")]
	public TriggerOnSight()
	{
	}
}
[Token(Token = "0x20000D3")]
public class TriggerOnSocket : MonoBehaviour
{
	[Token(Token = "0x20000D4")]
	[CompilerGenerated]
	private sealed class <DelayCheckSnap>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriggerOnSocket <>4__this;

		[Token(Token = "0x17000075")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000420")]
			[Address(RVA = "0x9E5C5C", Offset = "0x9E5C5C", VA = "0x9E5C5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000422")]
			[Address(RVA = "0x9E5CA4", Offset = "0x9E5CA4", VA = "0x9E5CA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x9E5A74", Offset = "0x9E5A74", VA = "0x9E5A74")]
		[DebuggerHidden]
		public <DelayCheckSnap>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x9E5AA4", Offset = "0x9E5AA4", VA = "0x9E5AA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x9E5AA8", Offset = "0x9E5AA8", VA = "0x9E5AA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x9E5C64", Offset = "0x9E5C64", VA = "0x9E5C64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PuzzleSnapZone puzzleSnap;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SnapZone snapDrop;

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x9E58C0", Offset = "0x9E58C0", VA = "0x9E58C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x9E59EC", Offset = "0x9E59EC", VA = "0x9E59EC")]
	private void SnapDrop_ObjectSnappedToDropZone(Grabbable grabbable)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x9E5A0C", Offset = "0x9E5A0C", VA = "0x9E5A0C")]
	[IteratorStateMachine(typeof(<DelayCheckSnap>d__4))]
	private IEnumerator DelayCheckSnap()
	{
		return null;
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x9E5A9C", Offset = "0x9E5A9C", VA = "0x9E5A9C")]
	public TriggerOnSocket()
	{
	}
}
[Token(Token = "0x20000D5")]
public class TriggerTapeRecorder : MonoBehaviour
{
	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TriggerContainer triggers;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TriggerAnimation triggerAnimation;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TapeRecorder tapeRecorder;

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x9E5CAC", Offset = "0x9E5CAC", VA = "0x9E5CAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x9E5D84", Offset = "0x9E5D84", VA = "0x9E5D84")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x9E5E78", Offset = "0x9E5E78", VA = "0x9E5E78")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x9E5F20", Offset = "0x9E5F20", VA = "0x9E5F20")]
	public TriggerTapeRecorder()
	{
	}
}
[Token(Token = "0x20000D6")]
[RequireComponent(typeof(Renderer))]
public class TutorialGuideSwitch : MonoBehaviour
{
	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material OculusTouchMaterial;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material WindowsMRMaterial;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material ViveCosmosMaterial;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material ViveVRMaterial;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material ValveIndexMaterial;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material PSVRMaterial;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material PicoMaterial;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material PimaxMaterial;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material Quest2Material;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material ViveFocus3Material;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material VivePortMaterial;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool onlyOnAnalog;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Renderer renderer;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject[] subtitles;

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x9E5F28", Offset = "0x9E5F28", VA = "0x9E5F28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x9E6430", Offset = "0x9E6430", VA = "0x9E6430")]
	public TutorialGuideSwitch()
	{
	}
}
[Token(Token = "0x20000D7")]
public class UniqueID : MonoBehaviour
{
	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ID;

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x9E6438", Offset = "0x9E6438", VA = "0x9E6438")]
	private void Awake()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x9E6568", Offset = "0x9E6568", VA = "0x9E6568")]
	public UniqueID()
	{
	}
}
[Token(Token = "0x20000D8")]
public class ViscusDoor : MonoBehaviour
{
	[Token(Token = "0x20000D9")]
	[CompilerGenerated]
	private sealed class <DelayDeath>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ViscusDoor <>4__this;

		[Token(Token = "0x17000077")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000434")]
			[Address(RVA = "0x9E6A7C", Offset = "0x9E6A7C", VA = "0x9E6A7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000436")]
			[Address(RVA = "0x9E6AC4", Offset = "0x9E6AC4", VA = "0x9E6AC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x9E68E4", Offset = "0x9E68E4", VA = "0x9E68E4")]
		[DebuggerHidden]
		public <DelayDeath>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x9E69B0", Offset = "0x9E69B0", VA = "0x9E69B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x9E69B4", Offset = "0x9E69B4", VA = "0x9E69B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x9E6A84", Offset = "0x9E6A84", VA = "0x9E6A84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ViscusOrb[] orbs;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DoorExit doorToUnlock;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip audioDeath;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int hashAnimState;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int hashDamaged;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x9E6570", Offset = "0x9E6570", VA = "0x9E6570")]
	private void Start()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x9E66E4", Offset = "0x9E66E4", VA = "0x9E66E4")]
	public void CheckOrbStatus(EnemyHealth dyingEnemy)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x9E492C", Offset = "0x9E492C", VA = "0x9E492C")]
	public void KillDoor()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x9E687C", Offset = "0x9E687C", VA = "0x9E687C")]
	[IteratorStateMachine(typeof(<DelayDeath>d__9))]
	private IEnumerator DelayDeath()
	{
		return null;
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x9E690C", Offset = "0x9E690C", VA = "0x9E690C")]
	public ViscusDoor()
	{
	}
}
[Token(Token = "0x20000DA")]
public class ViscusKeyDoor : MonoBehaviour
{
	[Token(Token = "0x20000DB")]
	[CompilerGenerated]
	private sealed class <DelayCheckDoor>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ViscusKeyDoor <>4__this;

		[Token(Token = "0x17000079")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000440")]
			[Address(RVA = "0x9E6F60", Offset = "0x9E6F60", VA = "0x9E6F60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000442")]
			[Address(RVA = "0x9E6FA8", Offset = "0x9E6FA8", VA = "0x9E6FA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x9E6BE4", Offset = "0x9E6BE4", VA = "0x9E6BE4")]
		[DebuggerHidden]
		public <DelayCheckDoor>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x9E6E30", Offset = "0x9E6E30", VA = "0x9E6E30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x9E6E34", Offset = "0x9E6E34", VA = "0x9E6E34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x9E6F68", Offset = "0x9E6F68", VA = "0x9E6F68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int keyID;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioDeath;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem[] particles;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource audioSource;

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x9E6ACC", Offset = "0x9E6ACC", VA = "0x9E6ACC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x9E6B7C", Offset = "0x9E6B7C", VA = "0x9E6B7C")]
	[IteratorStateMachine(typeof(<DelayCheckDoor>d__5))]
	private IEnumerator DelayCheckDoor()
	{
		return null;
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x9E6C0C", Offset = "0x9E6C0C", VA = "0x9E6C0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x9E6C10", Offset = "0x9E6C10", VA = "0x9E6C10")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x9E6CE4", Offset = "0x9E6CE4", VA = "0x9E6CE4")]
	private void KillDoor()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x9E6E28", Offset = "0x9E6E28", VA = "0x9E6E28")]
	public ViscusKeyDoor()
	{
	}
}
[Token(Token = "0x20000DC")]
public class ViscusKeyDoorLock : MonoBehaviour
{
	[Token(Token = "0x20000DD")]
	[CompilerGenerated]
	private sealed class <DelayCheck>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ViscusKeyDoorLock <>4__this;

		[Token(Token = "0x1700007B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000449")]
			[Address(RVA = "0x9E7170", Offset = "0x9E7170", VA = "0x9E7170", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600044B")]
			[Address(RVA = "0x9E71B8", Offset = "0x9E71B8", VA = "0x9E71B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x9E7038", Offset = "0x9E7038", VA = "0x9E7038")]
		[DebuggerHidden]
		public <DelayCheck>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x9E7068", Offset = "0x9E7068", VA = "0x9E7068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x9E706C", Offset = "0x9E706C", VA = "0x9E706C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x9E7178", Offset = "0x9E7178", VA = "0x9E7178", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ViscusDoor viscusDoor;

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x9E6FB0", Offset = "0x9E6FB0", VA = "0x9E6FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x9E6FD0", Offset = "0x9E6FD0", VA = "0x9E6FD0")]
	[IteratorStateMachine(typeof(<DelayCheck>d__2))]
	private IEnumerator DelayCheck()
	{
		return null;
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x9E7060", Offset = "0x9E7060", VA = "0x9E7060")]
	public ViscusKeyDoorLock()
	{
	}
}
[Token(Token = "0x20000DE")]
public class ViscusKeyOrgan : MonoBehaviour
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int keyID;

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x9E71C0", Offset = "0x9E71C0", VA = "0x9E71C0")]
	public ViscusKeyOrgan()
	{
	}
}
[Token(Token = "0x20000DF")]
public class ViscusOrb : MonoBehaviour
{
	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject soundObject;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip audioDamage;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bloodParticle;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator anim;

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x9E71C8", Offset = "0x9E71C8", VA = "0x9E71C8")]
	public void TakeDamage()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x9E7248", Offset = "0x9E7248", VA = "0x9E7248")]
	private void playDamageSound()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x9E73F4", Offset = "0x9E73F4", VA = "0x9E73F4")]
	private void spawnBloodParticle()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x9E7500", Offset = "0x9E7500", VA = "0x9E7500")]
	public ViscusOrb()
	{
	}
}
[Token(Token = "0x20000E0")]
public class WeaponLostRecovery : MonoBehaviour
{
	[Token(Token = "0x20000E1")]
	[CompilerGenerated]
	private sealed class <DelayCheck>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WeaponLostRecovery <>4__this;

		[Token(Token = "0x1700007D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000458")]
			[Address(RVA = "0x9E7974", Offset = "0x9E7974", VA = "0x9E7974", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x9E79BC", Offset = "0x9E79BC", VA = "0x9E79BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x9E7590", Offset = "0x9E7590", VA = "0x9E7590")]
		[DebuggerHidden]
		public <DelayCheck>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x9E77A4", Offset = "0x9E77A4", VA = "0x9E77A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x9E77A8", Offset = "0x9E77A8", VA = "0x9E77A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x9E797C", Offset = "0x9E797C", VA = "0x9E797C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int weaponID;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isSpawner;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject spawnerPrefab;

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x9E7508", Offset = "0x9E7508", VA = "0x9E7508")]
	private void Start()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x9E7528", Offset = "0x9E7528", VA = "0x9E7528")]
	[IteratorStateMachine(typeof(<DelayCheck>d__4))]
	private IEnumerator DelayCheck()
	{
		return null;
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x9E75B8", Offset = "0x9E75B8", VA = "0x9E75B8")]
	private bool CheckWeapon()
	{
		return default(bool);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x9E779C", Offset = "0x9E779C", VA = "0x9E779C")]
	public WeaponLostRecovery()
	{
	}
}
[Token(Token = "0x20000E2")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x9E79C4", Offset = "0x9E79C4", VA = "0x9E79C4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x9E7A40", Offset = "0x9E7A40", VA = "0x9E7A40")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x9E7EC8", Offset = "0x9E7EC8", VA = "0x9E7EC8")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x20000E3")]
public class FreeCam : MonoBehaviour
{
	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fastMovementSpeed;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float freeLookSensitivity;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float zoomSensitivity;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fastZoomSensitivity;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool looking;

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x9E7ED0", Offset = "0x9E7ED0", VA = "0x9E7ED0")]
	private void Update()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x9E8730", Offset = "0x9E8730", VA = "0x9E8730")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x9E86E4", Offset = "0x9E86E4", VA = "0x9E86E4")]
	public void StartLooking()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x9E870C", Offset = "0x9E870C", VA = "0x9E870C")]
	public void StopLooking()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x9E8754", Offset = "0x9E8754", VA = "0x9E8754")]
	public FreeCam()
	{
	}
}
[Token(Token = "0x20000E4")]
public class FreeCamera : MonoBehaviour
{
	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enableInputCapture;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool holdRightMouseCapture;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lookSpeed;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveSpeed;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float sprintSpeed;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_inputCaptured;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_yaw;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_pitch;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x9E8770", Offset = "0x9E8770", VA = "0x9E8770")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x9E877C", Offset = "0x9E877C", VA = "0x9E877C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x9E87AC", Offset = "0x9E87AC", VA = "0x9E87AC")]
	private void CaptureInput()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x9E87FC", Offset = "0x9E87FC", VA = "0x9E87FC")]
	private void ReleaseInput()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x9E8828", Offset = "0x9E8828", VA = "0x9E8828")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x9E8860", Offset = "0x9E8860", VA = "0x9E8860")]
	private void Update()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x9E8CF8", Offset = "0x9E8CF8", VA = "0x9E8CF8")]
	public FreeCamera()
	{
	}
}
[Token(Token = "0x20000E5")]
public class SuperCamera : MonoBehaviour
{
	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject pivot;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public KeyCode resetShortcut;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 100f)]
	public float rotationSensibility;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool invertRotationX;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool invertRotationY;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 100f)]
	public float translationSensibility;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool invertTranslationX;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool invertTranslationY;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float zoomMax;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float zoomMin;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 100f)]
	public float wheelSensibility;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float delayDoubleClic;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 oldCamPos;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion oldCamRot;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 oldMousePos;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float timeDoubleClic;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool firstClic;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 pivotPos;

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x9E8D18", Offset = "0x9E8D18", VA = "0x9E8D18")]
	private void Start()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x9E8DA0", Offset = "0x9E8DA0", VA = "0x9E8DA0")]
	private void Update()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x9E958C", Offset = "0x9E958C", VA = "0x9E958C")]
	public SuperCamera()
	{
	}
}
[Token(Token = "0x20000E6")]
public class UIButton_ShowNext : MonoBehaviour
{
	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] GameObjectsList;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int shownGameObjectIndex;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x9E95B4", Offset = "0x9E95B4", VA = "0x9E95B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x9E961C", Offset = "0x9E961C", VA = "0x9E961C")]
	public void SelectNextGameObject()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x9E96CC", Offset = "0x9E96CC", VA = "0x9E96CC")]
	public void SelectPreviousGameObject()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x9E9648", Offset = "0x9E9648", VA = "0x9E9648")]
	public void SelectGameObject(int index)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x9E96F8", Offset = "0x9E96F8", VA = "0x9E96F8")]
	public UIButton_ShowNext()
	{
	}
}
[Token(Token = "0x20000E7")]
public class DebugFPSInfo : SingletonMonoBehaviour<DebugFPSInfo>
{
	[Serializable]
	[Token(Token = "0x20000E8")]
	private class FPSColorMap
	{
		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int FPS;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color Color;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool Active;

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x9E9C30", Offset = "0x9E9C30", VA = "0x9E9C30")]
		public FPSColorMap()
		{
		}
	}

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _UIRoot;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image _BG;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro _Text;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Tooltip("昇順")]
	private FPSColorMap[] _FPSColorMap;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int PropGUIZTextMode;

	[Token(Token = "0x40004AA")]
	private const int GUIZTextMode = 8;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<float> DeltaTimeList;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float FPS;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float LastUpdateTime;

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x9E9708", Offset = "0x9E9708", VA = "0x9E9708")]
	public void SetEnable(bool enable)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x9E9778", Offset = "0x9E9778", VA = "0x9E9778")]
	private void Start()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x9E9878", Offset = "0x9E9878", VA = "0x9E9878")]
	private void Update()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x9E98F0", Offset = "0x9E98F0", VA = "0x9E98F0")]
	private void UpdateFPS()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x9E9A1C", Offset = "0x9E9A1C", VA = "0x9E9A1C")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x9E9B24", Offset = "0x9E9B24", VA = "0x9E9B24")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x9E9B34", Offset = "0x9E9B34", VA = "0x9E9B34")]
	public DebugFPSInfo()
	{
	}
}
[Token(Token = "0x20000E9")]
public class DontDestroyOnLoad : MonoBehaviour
{
	[Token(Token = "0x600047B")]
	[Address(RVA = "0x9E9C38", Offset = "0x9E9C38", VA = "0x9E9C38")]
	private void Awake()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x9E9CA4", Offset = "0x9E9CA4", VA = "0x9E9CA4")]
	public DontDestroyOnLoad()
	{
	}
}
[Token(Token = "0x20000EA")]
[Preserve]
public class SROptions : INotifyPropertyChanged
{
	[Token(Token = "0x20000EB")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)]
	public sealed class DisplayNameAttribute : System.ComponentModel.DisplayNameAttribute
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x9EFF44", Offset = "0x9EFF44", VA = "0x9EFF44")]
		public DisplayNameAttribute(string displayName)
		{
		}
	}

	[Token(Token = "0x20000EC")]
	[AttributeUsage(AttributeTargets.Property)]
	public sealed class IncrementAttribute : SRDebugger.IncrementAttribute
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x9EFFAC", Offset = "0x9EFFAC", VA = "0x9EFFAC")]
		public IncrementAttribute(double increment)
		{
		}
	}

	[Token(Token = "0x20000ED")]
	[AttributeUsage(AttributeTargets.Property)]
	public sealed class NumberRangeAttribute : SRDebugger.NumberRangeAttribute
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x9EFFB4", Offset = "0x9EFFB4", VA = "0x9EFFB4")]
		public NumberRangeAttribute(double min, double max)
		{
		}
	}

	[Token(Token = "0x20000EE")]
	[AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)]
	public sealed class SortAttribute : SRDebugger.SortAttribute
	{
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x9EFFBC", Offset = "0x9EFFBC", VA = "0x9EFFBC")]
		public SortAttribute(int priority)
		{
		}
	}

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SROptions _current;

	[Token(Token = "0x1700007F")]
	[Category("000 Cheats")]
	[DisplayName("God Mode")]
	public bool IsGodMode
	{
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x9E9CAC", Offset = "0x9E9CAC", VA = "0x9E9CAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x9E9CF8", Offset = "0x9E9CF8", VA = "0x9E9CF8")]
		set
		{
		}
	}

	[Token(Token = "0x17000080")]
	[Category("000 Cheats")]
	[DisplayName("Unlimited Ammo")]
	public bool IsUnlimitedAmmo
	{
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x9E9D54", Offset = "0x9E9D54", VA = "0x9E9D54")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x9E9DA0", Offset = "0x9E9DA0", VA = "0x9E9DA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000081")]
	[DisplayName("No Recoil")]
	[Category("000 Cheats")]
	public bool NoRecoil
	{
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x9E9DFC", Offset = "0x9E9DFC", VA = "0x9E9DFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x9E9E48", Offset = "0x9E9E48", VA = "0x9E9E48")]
		set
		{
		}
	}

	[Token(Token = "0x17000082")]
	[DisplayName("Show Bullet Line")]
	[Category("001 Debug")]
	public bool ShowBulletLine
	{
		[Token(Token = "0x6000485")]
		[Address(RVA = "0x9E9F54", Offset = "0x9E9F54", VA = "0x9E9F54")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000486")]
		[Address(RVA = "0x9E9FA0", Offset = "0x9E9FA0", VA = "0x9E9FA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000083")]
	[DisplayName("Show FPS Info")]
	[Category("001 Debug")]
	public bool ShowFPSInfo
	{
		[Token(Token = "0x6000487")]
		[Address(RVA = "0x9E9FFC", Offset = "0x9E9FFC", VA = "0x9E9FFC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000488")]
		[Address(RVA = "0x9EA058", Offset = "0x9EA058", VA = "0x9EA058")]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	[DisplayName("Show Subtitle")]
	[Category("008 Language")]
	public bool ShowSubtitle
	{
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x9EC974", Offset = "0x9EC974", VA = "0x9EC974")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x9EC9C0", Offset = "0x9EC9C0", VA = "0x9EC9C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000085")]
	public static SROptions Current
	{
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x9EFADC", Offset = "0x9EFADC", VA = "0x9EFADC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000007")]
	public event SROptionsPropertyChanged PropertyChanged
	{
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x9EFC14", Offset = "0x9EFC14", VA = "0x9EFC14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x9EFCB0", Offset = "0x9EFCB0", VA = "0x9EFCB0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	private event PropertyChangedEventHandler InterfacePropertyChangedEventHandler
	{
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x9EFE04", Offset = "0x9EFE04", VA = "0x9EFE04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x9EFEA0", Offset = "0x9EFEA0", VA = "0x9EFEA0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	private event PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	{
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x9EFF3C", Offset = "0x9EFF3C", VA = "0x9EFF3C", Slot = "4")]
		add
		{
		}
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x9EFF40", Offset = "0x9EFF40", VA = "0x9EFF40", Slot = "5")]
		remove
		{
		}
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x9E9EA4", Offset = "0x9E9EA4", VA = "0x9E9EA4")]
	[DisplayName("Damage Player")]
	[Category("001 Debug")]
	public void DamagePlayer()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x9E9EFC", Offset = "0x9E9EFC", VA = "0x9E9EFC")]
	[DisplayName("Heal Player")]
	[Category("001 Debug")]
	public void HealPlayer()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x9EA0AC", Offset = "0x9EA0AC", VA = "0x9EA0AC")]
	[Category("002 Handedness")]
	[DisplayName("Toggle Left/Right Hand")]
	public void ToggleHandedness()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x9EA150", Offset = "0x9EA150", VA = "0x9EA150")]
	[Category("003 Locomotion")]
	[DisplayName("Toggle Locomotion Type")]
	public void ToggleLocomotionType()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x9EA208", Offset = "0x9EA208", VA = "0x9EA208")]
	[Category("004 Rotation")]
	[DisplayName("Toggle Rotation")]
	public void ToggleRotation()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x9EA2AC", Offset = "0x9EA2AC", VA = "0x9EA2AC")]
	[Category("004 Rotation")]
	[DisplayName("Toggle Rotation Type")]
	public void ToggleRotationType()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x9EA364", Offset = "0x9EA364", VA = "0x9EA364")]
	[Category("005 Weapons")]
	[DisplayName("Give Pistol")]
	public void GivePistol()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x9EA624", Offset = "0x9EA624", VA = "0x9EA624")]
	[DisplayName("Give SawedOff")]
	[Category("005 Weapons")]
	public void GiveSawedOff()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x9EA8E4", Offset = "0x9EA8E4", VA = "0x9EA8E4")]
	[DisplayName("Give SMG")]
	[Category("005 Weapons")]
	public void GiveSMG()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x9EABA4", Offset = "0x9EABA4", VA = "0x9EABA4")]
	[Category("006 Consumable")]
	[DisplayName("Give HealthKit")]
	public void GiveHealthKit()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x9EAD60", Offset = "0x9EAD60", VA = "0x9EAD60")]
	[Category("006 Consumable")]
	[DisplayName("Give Syringe")]
	public void GiveSyringe()
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x9EAF1C", Offset = "0x9EAF1C", VA = "0x9EAF1C")]
	[Category("007 Items")]
	[DisplayName("Give Aries")]
	public void GiveAries()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x9EB0D8", Offset = "0x9EB0D8", VA = "0x9EB0D8")]
	[Category("007 Items")]
	[DisplayName("Give Leo")]
	public void GiveLeo()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x9EB294", Offset = "0x9EB294", VA = "0x9EB294")]
	[Category("007 Items")]
	[DisplayName("Give Battery")]
	public void Instantiate_Battery()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x9EB450", Offset = "0x9EB450", VA = "0x9EB450")]
	[Category("007 Items")]
	[DisplayName("Give BatteryChart1")]
	public void Instantiate_BatteryChart1()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x9EB60C", Offset = "0x9EB60C", VA = "0x9EB60C")]
	[Category("007 Items")]
	[DisplayName("Give BatteryChart2")]
	public void Instantiate_BatteryChart2()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x9EB7C8", Offset = "0x9EB7C8", VA = "0x9EB7C8")]
	[DisplayName("Give ToyMonster")]
	[Category("007 Items")]
	public void Instantiate_ToyMonster()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x9EB984", Offset = "0x9EB984", VA = "0x9EB984")]
	[DisplayName("Give MetroWallet")]
	[Category("007 Items")]
	public void Instantiate_MetroWallet()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x9EBB3C", Offset = "0x9EBB3C", VA = "0x9EBB3C")]
	[DisplayName("Give ChemicalBlue")]
	[Category("007 Items")]
	public void Instantiate_ChemicalBlue()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x9EBCF4", Offset = "0x9EBCF4", VA = "0x9EBCF4")]
	[Category("007 Items")]
	[DisplayName("Give ChemicalGreen")]
	public void Instantiate_ChemicalGreen()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x9EBEAC", Offset = "0x9EBEAC", VA = "0x9EBEAC")]
	[Category("007 Items")]
	[DisplayName("Give ChemicalRed")]
	public void Instantiate_ChemicalRed()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x9EC064", Offset = "0x9EC064", VA = "0x9EC064")]
	[DisplayName("Give HealthKitDirty")]
	[Category("007 Items")]
	public void Instantiate_HealthKitDirty()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x9EC21C", Offset = "0x9EC21C", VA = "0x9EC21C")]
	[DisplayName("Give PistolAmmoDirty")]
	[Category("007 Items")]
	public void Instantiate_PistolAmmoDirty()
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x9EC3D4", Offset = "0x9EC3D4", VA = "0x9EC3D4")]
	[Category("007 Items")]
	[DisplayName("Give ShotgunAmmoDirty")]
	public void Instantiate_ShotgunAmmoDirty()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x9EC58C", Offset = "0x9EC58C", VA = "0x9EC58C")]
	[Category("007 Items")]
	[DisplayName("Give ViscusKeyBrainDirty")]
	public void Instantiate_ViscusKeyBrainDirty()
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x9EC744", Offset = "0x9EC744", VA = "0x9EC744")]
	[Category("008 Language")]
	[DisplayName("Set Language To English")]
	public void SetLanguageToEnglish()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x9EC794", Offset = "0x9EC794", VA = "0x9EC794")]
	[DisplayName("Set Language To French")]
	[Category("008 Language")]
	public void SetLanguageToFrench()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x9EC7E4", Offset = "0x9EC7E4", VA = "0x9EC7E4")]
	[Category("008 Language")]
	[DisplayName("Set Language To German")]
	public void SetLanguageToGerman()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x9EC834", Offset = "0x9EC834", VA = "0x9EC834")]
	[Category("008 Language")]
	[DisplayName("Set Language To Italian")]
	public void SetLanguageToItalian()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x9EC884", Offset = "0x9EC884", VA = "0x9EC884")]
	[DisplayName("Set Language To Japanese")]
	[Category("008 Language")]
	public void SetLanguageToJapanese()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x9EC8D4", Offset = "0x9EC8D4", VA = "0x9EC8D4")]
	[DisplayName("Set Language To Portugese")]
	[Category("008 Language")]
	public void SetLanguageToPortugese()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x9EC924", Offset = "0x9EC924", VA = "0x9EC924")]
	[DisplayName("Set Language To Spanish")]
	[Category("008 Language")]
	public void SetLanguageToSpanish()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x9ECA1C", Offset = "0x9ECA1C", VA = "0x9ECA1C")]
	[Category("099 SceneSelection")]
	[DisplayName("GoTo SaveMenu")]
	public void GoTo_SaveMenu()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x9ECA94", Offset = "0x9ECA94", VA = "0x9ECA94")]
	[Category("099 SceneSelection")]
	[DisplayName("GoTo BatteryStore")]
	public void GoTo_BatteryStore()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x9ECB0C", Offset = "0x9ECB0C", VA = "0x9ECB0C")]
	[DisplayName("GoTo MainMenu")]
	[Category("100 SceneSelection")]
	public void GoTo_MainMenu()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x9ECB84", Offset = "0x9ECB84", VA = "0x9ECB84")]
	[Category("110 SceneSelection")]
	[DisplayName("GoTo Tutorial0")]
	public void GoTo_Tutorial0()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x9ECBFC", Offset = "0x9ECBFC", VA = "0x9ECBFC")]
	[DisplayName("GoTo Tutorial1")]
	[Category("110 SceneSelection")]
	public void GoTo_Tutorial1()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x9ECC74", Offset = "0x9ECC74", VA = "0x9ECC74")]
	[DisplayName("GoTo Tutorial2")]
	[Category("110 SceneSelection")]
	public void GoTo_Tutorial2()
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x9ECCEC", Offset = "0x9ECCEC", VA = "0x9ECCEC")]
	[DisplayName("GoTo IntroOperation")]
	[Category("110 SceneSelection")]
	public void GoTo_IntroOperation()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x9ECD64", Offset = "0x9ECD64", VA = "0x9ECD64")]
	[DisplayName("GoTo ApartmentBodyVials")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentBodyVials()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x9ECDDC", Offset = "0x9ECDDC", VA = "0x9ECDDC")]
	[Category("120 SceneSelection")]
	[DisplayName("GoTo ApartmentCenterDanger")]
	public void GoTo_ApartmentCenterDanger()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x9ECE54", Offset = "0x9ECE54", VA = "0x9ECE54")]
	[DisplayName("GoTo ApartmentCornerDanger")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentCornerDanger()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x9ECECC", Offset = "0x9ECECC", VA = "0x9ECECC")]
	[DisplayName("GoTo ApartmentCornerFirstContact")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentCornerFirstContact()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x9ECF44", Offset = "0x9ECF44", VA = "0x9ECF44")]
	[Category("120 SceneSelection")]
	[DisplayName("GoTo ApartmentHall1")]
	public void GoTo_ApartmentHall1()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x9ECFBC", Offset = "0x9ECFBC", VA = "0x9ECFBC")]
	[DisplayName("GoTo ApartmentHall2East")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentHall2East()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x9ED034", Offset = "0x9ED034", VA = "0x9ED034")]
	[Category("120 SceneSelection")]
	[DisplayName("GoTo ApartmentHome")]
	public void GoTo_ApartmentHome()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x9ED0AC", Offset = "0x9ED0AC", VA = "0x9ED0AC")]
	[DisplayName("GoTo ApartmentLadder")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentLadder()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x9ED124", Offset = "0x9ED124", VA = "0x9ED124")]
	[DisplayName("GoTo ApartmentLongSafe")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentLongSafe()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x9ED19C", Offset = "0x9ED19C", VA = "0x9ED19C")]
	[DisplayName("GoTo ApartmentPainter")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentPainter()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x9ED214", Offset = "0x9ED214", VA = "0x9ED214")]
	[Category("120 SceneSelection")]
	[DisplayName("GoTo ApartmentPillars")]
	public void GoTo_ApartmentPillars()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x9ED28C", Offset = "0x9ED28C", VA = "0x9ED28C")]
	[DisplayName("GoTo ApartmentSmall704")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentSmall704()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x9ED304", Offset = "0x9ED304", VA = "0x9ED304")]
	[DisplayName("GoTo ApartmentSmallGun")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentSmallGun()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x9ED37C", Offset = "0x9ED37C", VA = "0x9ED37C")]
	[DisplayName("GoTo ApartmentStairWell")]
	[Category("120 SceneSelection")]
	public void GoTo_ApartmentStairWell()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x9ED3F4", Offset = "0x9ED3F4", VA = "0x9ED3F4")]
	[DisplayName("GoTo ApartmentElevator")]
	[Category("121 SceneSelection")]
	public void GoTo_ApartmentElevator()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x9ED46C", Offset = "0x9ED46C", VA = "0x9ED46C")]
	[DisplayName("GoTo BasementHall")]
	[Category("130 SceneSelection")]
	public void GoTo_BasementHall()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x9ED4E4", Offset = "0x9ED4E4", VA = "0x9ED4E4")]
	[Category("130 SceneSelection")]
	[DisplayName("GoTo BasementPipes")]
	public void GoTo_BasementPipes()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x9ED55C", Offset = "0x9ED55C", VA = "0x9ED55C")]
	[DisplayName("GoTo BasementSave")]
	[Category("130 SceneSelection")]
	public void GoTo_BasementSave()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x9ED5D4", Offset = "0x9ED5D4", VA = "0x9ED5D4")]
	[DisplayName("GoTo BasementStorage")]
	[Category("130 SceneSelection")]
	public void GoTo_BasementStorage()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x9ED64C", Offset = "0x9ED64C", VA = "0x9ED64C")]
	[DisplayName("GoTo BasementBoss")]
	[Category("131 SceneSelection")]
	public void GoTo_BasementBoss()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x9ED6C4", Offset = "0x9ED6C4", VA = "0x9ED6C4")]
	[DisplayName("GoTo BasementExit")]
	[Category("132 SceneSelection")]
	public void GoTo_BasementExit()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x9ED73C", Offset = "0x9ED73C", VA = "0x9ED73C")]
	[DisplayName("GoTo Outside1")]
	[Category("140 SceneSelection")]
	public void GoTo_Outside1()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x9ED7B4", Offset = "0x9ED7B4", VA = "0x9ED7B4")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterAlset")]
	public void GoTo_TheaterAlset()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x9ED82C", Offset = "0x9ED82C", VA = "0x9ED82C")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterConstruction")]
	public void GoTo_TheaterConstruction()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x9ED8A4", Offset = "0x9ED8A4", VA = "0x9ED8A4")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterDanger")]
	public void GoTo_TheaterDanger()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x9ED91C", Offset = "0x9ED91C", VA = "0x9ED91C")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterExit")]
	public void GoTo_TheaterExit()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x9ED994", Offset = "0x9ED994", VA = "0x9ED994")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterHall")]
	public void GoTo_TheaterHall()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x9EDA0C", Offset = "0x9EDA0C", VA = "0x9EDA0C")]
	[Category("150 SceneSelection")]
	[DisplayName("GoTo TheaterLobby")]
	public void GoTo_TheaterLobby()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x9EDA84", Offset = "0x9EDA84", VA = "0x9EDA84")]
	[DisplayName("GoTo TheaterProjection")]
	[Category("150 SceneSelection")]
	public void GoTo_TheaterProjection()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x9EDAFC", Offset = "0x9EDAFC", VA = "0x9EDAFC")]
	[DisplayName("GoTo TheaterSave")]
	[Category("150 SceneSelection")]
	public void GoTo_TheaterSave()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x9EDB74", Offset = "0x9EDB74", VA = "0x9EDB74")]
	[DisplayName("GoTo Outside2")]
	[Category("160 SceneSelection")]
	public void GoTo_Outside2()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x9EDBEC", Offset = "0x9EDBEC", VA = "0x9EDBEC")]
	[DisplayName("GoTo SubwayEntrance")]
	[Category("170 SceneSelection")]
	public void GoTo_SubwayEntrance()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x9EDC64", Offset = "0x9EDC64", VA = "0x9EDC64")]
	[DisplayName("GoTo SubwayTunnel1")]
	[Category("170 SceneSelection")]
	public void GoTo_SubwayTunnel1()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x9EDCDC", Offset = "0x9EDCDC", VA = "0x9EDCDC")]
	[DisplayName("GoTo MineDanger")]
	[Category("180 SceneSelection")]
	public void GoTo_MineDanger()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x9EDD54", Offset = "0x9EDD54", VA = "0x9EDD54")]
	[Category("180 SceneSelection")]
	[DisplayName("GoTo MineEntrance")]
	public void GoTo_MineEntrance()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x9EDDCC", Offset = "0x9EDDCC", VA = "0x9EDDCC")]
	[DisplayName("GoTo MineExit")]
	[Category("180 SceneSelection")]
	public void GoTo_MineExit()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x9EDE44", Offset = "0x9EDE44", VA = "0x9EDE44")]
	[DisplayName("GoTo MineGenerator")]
	[Category("180 SceneSelection")]
	public void GoTo_MineGenerator()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x9EDEBC", Offset = "0x9EDEBC", VA = "0x9EDEBC")]
	[DisplayName("GoTo MineHub")]
	[Category("180 SceneSelection")]
	public void GoTo_MineHub()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x9EDF34", Offset = "0x9EDF34", VA = "0x9EDF34")]
	[DisplayName("GoTo MineMonsterContact")]
	[Category("180 SceneSelection")]
	public void GoTo_MineMonsterContact()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x9EDFAC", Offset = "0x9EDFAC", VA = "0x9EDFAC")]
	[DisplayName("GoTo MineMonsterEnd")]
	[Category("180 SceneSelection")]
	public void GoTo_MineMonsterEnd()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x9EE024", Offset = "0x9EE024", VA = "0x9EE024")]
	[Category("180 SceneSelection")]
	[DisplayName("GoTo MineSave")]
	public void GoTo_MineSave()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x9EE09C", Offset = "0x9EE09C", VA = "0x9EE09C")]
	[DisplayName("GoTo SubwayTunnel2")]
	[Category("190 SceneSelection")]
	public void GoTo_SubwayTunnel2()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x9EE114", Offset = "0x9EE114", VA = "0x9EE114")]
	[DisplayName("GoTo SubwayDungeonConnector")]
	[Category("191 SceneSelection")]
	public void GoTo_SubwayDungeonConnector()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x9EE18C", Offset = "0x9EE18C", VA = "0x9EE18C")]
	[DisplayName("GoTo ClubBackStage")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubBackStage()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x9EE204", Offset = "0x9EE204", VA = "0x9EE204")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubBasementBar")]
	public void GoTo_ClubBasementBar()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x9EE27C", Offset = "0x9EE27C", VA = "0x9EE27C")]
	[DisplayName("GoTo ClubBoss")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubBoss()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x9EE2F4", Offset = "0x9EE2F4", VA = "0x9EE2F4")]
	[DisplayName("GoTo ClubCoatCheck")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubCoatCheck()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x9EE36C", Offset = "0x9EE36C", VA = "0x9EE36C")]
	[DisplayName("GoTo ClubDanger")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubDanger()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x9EE3E4", Offset = "0x9EE3E4", VA = "0x9EE3E4")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubDungeonHall")]
	public void GoTo_ClubDungeonHall()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x9EE45C", Offset = "0x9EE45C", VA = "0x9EE45C")]
	[DisplayName("GoTo ClubDungeonRoomDouble")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubDungeonRoomDouble()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x9EE4D4", Offset = "0x9EE4D4", VA = "0x9EE4D4")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubDungeonRoomMaster")]
	public void GoTo_ClubDungeonRoomMaster()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x9EE54C", Offset = "0x9EE54C", VA = "0x9EE54C")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubDungeonRoomSave")]
	public void GoTo_ClubDungeonRoomSave()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x9EE5C4", Offset = "0x9EE5C4", VA = "0x9EE5C4")]
	[DisplayName("GoTo ClubDungeonRoomSingle")]
	[Category("200 SceneSelection")]
	public void GoTo_ClubDungeonRoomSingle()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x9EE63C", Offset = "0x9EE63C", VA = "0x9EE63C")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubDungeonStorage")]
	public void GoTo_ClubDungeonStorage()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x9EE6B4", Offset = "0x9EE6B4", VA = "0x9EE6B4")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubMainHall")]
	public void GoTo_ClubMainHall()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x9EE72C", Offset = "0x9EE72C", VA = "0x9EE72C")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubSideHall")]
	public void GoTo_ClubSideHall()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x9EE7A4", Offset = "0x9EE7A4", VA = "0x9EE7A4")]
	[Category("200 SceneSelection")]
	[DisplayName("GoTo ClubSideStorage")]
	public void GoTo_ClubSideStorage()
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x9EE81C", Offset = "0x9EE81C", VA = "0x9EE81C")]
	[Category("210 SceneSelection")]
	[DisplayName("GoTo OutsideClub")]
	public void GoTo_OutsideClub()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x9EE894", Offset = "0x9EE894", VA = "0x9EE894")]
	[Category("211 SceneSelection")]
	[DisplayName("GoTo OutsideTrail")]
	public void GoTo_OutsideTrail()
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x9EE90C", Offset = "0x9EE90C", VA = "0x9EE90C")]
	[DisplayName("GoTo OutsideTrailBathroom")]
	[Category("211 SceneSelection")]
	public void GoTo_OutsideTrailBathroom()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x9EE984", Offset = "0x9EE984", VA = "0x9EE984")]
	[Category("220 SceneSelection")]
	[DisplayName("GoTo UnivOutside")]
	public void GoTo_UnivOutside()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x9EE9FC", Offset = "0x9EE9FC", VA = "0x9EE9FC")]
	[DisplayName("GoTo Univ1NBathroom")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1NBathroom()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x9EEA74", Offset = "0x9EEA74", VA = "0x9EEA74")]
	[DisplayName("GoTo Univ1NCog")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1NCog()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x9EEAEC", Offset = "0x9EEAEC", VA = "0x9EEAEC")]
	[DisplayName("GoTo Univ1NPuzzle")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1NPuzzle()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x9EEB64", Offset = "0x9EEB64", VA = "0x9EEB64")]
	[DisplayName("GoTo Univ1NTeal")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1NTeal()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x9EEBDC", Offset = "0x9EEBDC", VA = "0x9EEBDC")]
	[DisplayName("GoTo Univ1SCog")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1SCog()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x9EEC54", Offset = "0x9EEC54", VA = "0x9EEC54")]
	[DisplayName("GoTo Univ1SKey")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1SKey()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x9EECCC", Offset = "0x9EECCC", VA = "0x9EECCC")]
	[DisplayName("GoTo Univ1SSave")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ1SSave()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x9EED44", Offset = "0x9EED44", VA = "0x9EED44")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo Univ5NBathroom")]
	public void GoTo_Univ5NBathroom()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x9EEDBC", Offset = "0x9EEDBC", VA = "0x9EEDBC")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo Univ5NDanger")]
	public void GoTo_Univ5NDanger()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x9EEE34", Offset = "0x9EEE34", VA = "0x9EEE34")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo Univ5SBathroom")]
	public void GoTo_Univ5SBathroom()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x9EEEAC", Offset = "0x9EEEAC", VA = "0x9EEEAC")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo Univ5SDanger")]
	public void GoTo_Univ5SDanger()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x9EEF24", Offset = "0x9EEF24", VA = "0x9EEF24")]
	[DisplayName("GoTo Univ5Study")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ5Study()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x9EEF9C", Offset = "0x9EEF9C", VA = "0x9EEF9C")]
	[DisplayName("GoTo Univ5SYellow")]
	[Category("221 SceneSelection")]
	public void GoTo_Univ5SYellow()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x9EF014", Offset = "0x9EF014", VA = "0x9EF014")]
	[DisplayName("GoTo UnivElevatorN")]
	[Category("221 SceneSelection")]
	public void GoTo_UnivElevatorN()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x9EF08C", Offset = "0x9EF08C", VA = "0x9EF08C")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo UnivElevatorS")]
	public void GoTo_UnivElevatorS()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x9EF104", Offset = "0x9EF104", VA = "0x9EF104")]
	[DisplayName("GoTo UnivHall1N")]
	[Category("221 SceneSelection")]
	public void GoTo_UnivHall1N()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x9EF17C", Offset = "0x9EF17C", VA = "0x9EF17C")]
	[DisplayName("GoTo UnivHall1S")]
	[Category("221 SceneSelection")]
	public void GoTo_UnivHall1S()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x9EF1F4", Offset = "0x9EF1F4", VA = "0x9EF1F4")]
	[DisplayName("GoTo UnivHall2N")]
	[Category("221 SceneSelection")]
	public void GoTo_UnivHall2N()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x9EF26C", Offset = "0x9EF26C", VA = "0x9EF26C")]
	[DisplayName("GoTo UnivHall2S")]
	[Category("221 SceneSelection")]
	public void GoTo_UnivHall2S()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x9EF2E4", Offset = "0x9EF2E4", VA = "0x9EF2E4")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo UnivHall5N")]
	public void GoTo_UnivHall5N()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x9EF35C", Offset = "0x9EF35C", VA = "0x9EF35C")]
	[Category("221 SceneSelection")]
	[DisplayName("GoTo UnivHall5S")]
	public void GoTo_UnivHall5S()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x9EF3D4", Offset = "0x9EF3D4", VA = "0x9EF3D4")]
	[DisplayName("GoTo UnivOperation")]
	[Category("222 SceneSelection")]
	public void GoTo_UnivOperation()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x9EF44C", Offset = "0x9EF44C", VA = "0x9EF44C")]
	[DisplayName("GoTo UnivOperation2")]
	[Category("223 SceneSelection")]
	public void GoTo_UnivOperation2()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x9EF4C4", Offset = "0x9EF4C4", VA = "0x9EF4C4")]
	[DisplayName("GoTo MeatDanger1")]
	[Category("230 SceneSelection")]
	public void GoTo_MeatDanger1()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x9EF53C", Offset = "0x9EF53C", VA = "0x9EF53C")]
	[DisplayName("GoTo MeatDark")]
	[Category("230 SceneSelection")]
	public void GoTo_MeatDark()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x9EF5B4", Offset = "0x9EF5B4", VA = "0x9EF5B4")]
	[Category("230 SceneSelection")]
	[DisplayName("GoTo MeatDark2")]
	public void GoTo_MeatDark2()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x9EF62C", Offset = "0x9EF62C", VA = "0x9EF62C")]
	[DisplayName("GoTo MeatEntrance")]
	[Category("230 SceneSelection")]
	public void GoTo_MeatEntrance()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x9EF6A4", Offset = "0x9EF6A4", VA = "0x9EF6A4")]
	[Category("230 SceneSelection")]
	[DisplayName("GoTo MeatHall")]
	public void GoTo_MeatHall()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x9EF71C", Offset = "0x9EF71C", VA = "0x9EF71C")]
	[Category("230 SceneSelection")]
	[DisplayName("GoTo MeatSave")]
	public void GoTo_MeatSave()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x9EF794", Offset = "0x9EF794", VA = "0x9EF794")]
	[Category("240 SceneSelection")]
	[DisplayName("GoTo DreamApartmentHall")]
	public void GoTo_DreamApartmentHall()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x9EF80C", Offset = "0x9EF80C", VA = "0x9EF80C")]
	[Category("241 SceneSelection")]
	[DisplayName("GoTo DreamHome")]
	public void GoTo_DreamHome()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x9EF884", Offset = "0x9EF884", VA = "0x9EF884")]
	[Category("242 SceneSelection")]
	[DisplayName("GoTo MeatDark3")]
	public void GoTo_MeatDark3()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x9EF8FC", Offset = "0x9EF8FC", VA = "0x9EF8FC")]
	[Category("243 SceneSelection")]
	[DisplayName("GoTo MeatElevator")]
	public void GoTo_MeatElevator()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x9EF974", Offset = "0x9EF974", VA = "0x9EF974")]
	[DisplayName("GoTo FinalBoss")]
	[Category("244 SceneSelection")]
	public void GoTo_FinalBoss()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x9EF9EC", Offset = "0x9EF9EC", VA = "0x9EF9EC")]
	[Category("245 SceneSelection")]
	[DisplayName("GoTo EndingAlset")]
	public void GoTo_EndingAlset()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x9EFA64", Offset = "0x9EFA64", VA = "0x9EFA64")]
	[Category("246 SceneSelection")]
	[DisplayName("GoTo EndingOutside")]
	public void GoTo_EndingOutside()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x9EFB24", Offset = "0x9EFB24", VA = "0x9EFB24")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
	public static void OnStartup()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x9EFD4C", Offset = "0x9EFD4C", VA = "0x9EFD4C")]
	public void OnPropertyChanged(string propertyName)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x9EFC0C", Offset = "0x9EFC0C", VA = "0x9EFC0C")]
	public SROptions()
	{
	}
}
[Token(Token = "0x20000EF")]
public class GameConfig
{
	[Token(Token = "0x40004B4")]
	public const string OCULUS_TOUCH = "OculusTouch";

	[Token(Token = "0x40004B5")]
	public const string WINDOWS_MR = "WindowsMR";

	[Token(Token = "0x40004B6")]
	public const string VIVE_COSMOS = "ViveCosmos";

	[Token(Token = "0x40004B7")]
	public const string VIVE_VR = "ViveVR";

	[Token(Token = "0x40004B8")]
	public const string VALVE_INDEX = "ValveIndex";

	[Token(Token = "0x40004B9")]
	public const string PSVR2 = "PSVR2";

	[Token(Token = "0x40004BA")]
	public const string PICO = "Pico";

	[Token(Token = "0x40004BB")]
	public const string PIMAX = "Pimax";

	[Token(Token = "0x40004BC")]
	public const string QUEST2 = "Quest2";

	[Token(Token = "0x40004BD")]
	public const string VIVE_FOCUS3 = "ViveFocus3";

	[Token(Token = "0x40004BE")]
	public const string VIVE_PORT = "VivePort";

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string CURRENT_CONTROLLER_SCHEME;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float MovementSpeed;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float SprintSpeed;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float StrafeSpeed;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float StrafeSprintSpeed;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static float SimulationVelocity;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static float SnapRotationAmount;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static float SmoothTurnSpeed;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static float TeleportCooldown;

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x9EFFC4", Offset = "0x9EFFC4", VA = "0x9EFFC4")]
	public GameConfig()
	{
	}
}
[Token(Token = "0x20000F0")]
public class HapticFeedbackManager : SingletonMonoBehaviour<HapticFeedbackManager>
{
	[Token(Token = "0x40004C8")]
	private const int SourceWorkMax = 4;

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x9F004C", Offset = "0x9F004C", VA = "0x9F004C")]
	public HapticFeedbackManager()
	{
	}
}
[Token(Token = "0x20000F1")]
public class SoundResourceSO
{
	[Token(Token = "0x20000F2")]
	public class Data
	{
		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioClip HapticAudioClip;

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x9F009C", Offset = "0x9F009C", VA = "0x9F009C")]
		public Data()
		{
		}
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x9F0094", Offset = "0x9F0094", VA = "0x9F0094")]
	public SoundResourceSO()
	{
	}
}
[Token(Token = "0x20000F3")]
public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T>
{
	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static T SingletonInstance;

	[Token(Token = "0x17000086")]
	public static T Instance
	{
		[Token(Token = "0x6000524")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000525")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000526")]
	protected bool CheckInstance()
	{
		return default(bool);
	}

	[Token(Token = "0x6000527")]
	public static bool IsExists()
	{
		return default(bool);
	}

	[Token(Token = "0x6000528")]
	protected SingletonMonoBehaviour()
	{
	}
}
[Token(Token = "0x20000F4")]
public class HMDFeedbackManager : SingletonMonoBehaviour<HMDFeedbackManager>
{
	[Token(Token = "0x6000529")]
	[Address(RVA = "0x9F00A4", Offset = "0x9F00A4", VA = "0x9F00A4")]
	public void PlayHMDVibration(int frequency)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0x9F00A8", Offset = "0x9F00A8", VA = "0x9F00A8")]
	public void StopHMDVibration()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x9F00AC", Offset = "0x9F00AC", VA = "0x9F00AC")]
	public HMDFeedbackManager()
	{
	}
}
[Token(Token = "0x20000F5")]
public class GamePad : MonoBehaviour
{
	[Token(Token = "0x600052C")]
	[Address(RVA = "0x9F00F4", Offset = "0x9F00F4", VA = "0x9F00F4")]
	public GamePad()
	{
	}
}
[Token(Token = "0x20000F6")]
public class NpManager : MonoBehaviour
{
	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NpManager _instance;

	[Token(Token = "0x17000087")]
	public static NpManager Instance
	{
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x9F00FC", Offset = "0x9F00FC", VA = "0x9F00FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000088")]
	public int GetActiveUserId
	{
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x9F01A4", Offset = "0x9F01A4", VA = "0x9F01A4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x9F0144", Offset = "0x9F0144", VA = "0x9F0144")]
	public void StartSaveData(string dirName, string title, string subtitle, string detail, string serializedData)
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x9F0148", Offset = "0x9F0148", VA = "0x9F0148")]
	public string StartLoadData(string dirName)
	{
		return null;
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x9F0188", Offset = "0x9F0188", VA = "0x9F0188")]
	public bool CheckForSaveData(string dirName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x9F0190", Offset = "0x9F0190", VA = "0x9F0190")]
	public void UnlockTrophy(int id)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x9F0194", Offset = "0x9F0194", VA = "0x9F0194")]
	public void StartActivity(string activityID)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x9F0198", Offset = "0x9F0198", VA = "0x9F0198")]
	public void EndActivity(string activityID)
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x9F019C", Offset = "0x9F019C", VA = "0x9F019C")]
	public void ResumeActivity(string activityID, string[] completedActivities, string[] inProgressActivities)
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x9F01A0", Offset = "0x9F01A0", VA = "0x9F01A0")]
	public void TerminateAllActivities()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x9F01AC", Offset = "0x9F01AC", VA = "0x9F01AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x9F0284", Offset = "0x9F0284", VA = "0x9F0284")]
	private void Start()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x9F02EC", Offset = "0x9F02EC", VA = "0x9F02EC")]
	public NpManager()
	{
	}
}
[Token(Token = "0x20000F7")]
public class PSVR2Manager : MonoBehaviour
{
	[Token(Token = "0x600053A")]
	[Address(RVA = "0x9F02F4", Offset = "0x9F02F4", VA = "0x9F02F4")]
	public PSVR2Manager()
	{
	}
}
[Token(Token = "0x20000F8")]
public class SaveManager
{
	[Token(Token = "0x600053B")]
	[Address(RVA = "0x9F02FC", Offset = "0x9F02FC", VA = "0x9F02FC")]
	public SaveManager()
	{
	}
}
[Token(Token = "0x20000F9")]
public class SubtitlesTimingController : MonoBehaviour
{
	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public DialogScriptableObject DialogSO;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text subtitleIndexText;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioSource audioSource;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private DialogScriptableObject movieDialogSO;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int subtitleIndex;

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x9F0304", Offset = "0x9F0304", VA = "0x9F0304")]
	private void Start()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x9F0394", Offset = "0x9F0394", VA = "0x9F0394")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x9F0440", Offset = "0x9F0440", VA = "0x9F0440")]
	public void TriggerMovie()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x9F06D0", Offset = "0x9F06D0", VA = "0x9F06D0")]
	public void SetLanguage(int language)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x9F072C", Offset = "0x9F072C", VA = "0x9F072C")]
	public void RunSubtitles(DialogScriptableObject dialogSO)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x9F0820", Offset = "0x9F0820", VA = "0x9F0820")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x9F08B8", Offset = "0x9F08B8", VA = "0x9F08B8")]
	public void Prev()
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0x9F09F4", Offset = "0x9F09F4", VA = "0x9F09F4")]
	public void Skip()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x9F04E0", Offset = "0x9F04E0", VA = "0x9F04E0")]
	private void RunSubtitles()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x9F0B1C", Offset = "0x9F0B1C", VA = "0x9F0B1C")]
	private void OnSubtitleEnd()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x9F07D0", Offset = "0x9F07D0", VA = "0x9F07D0")]
	private void PlayAudioClip(AudioClip _audioClip, float _time = 0f)
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x9F0B2C", Offset = "0x9F0B2C", VA = "0x9F0B2C")]
	public SubtitlesTimingController()
	{
	}
}
[Token(Token = "0x20000FA")]
public class SubtitleTestController : MonoBehaviour
{
	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LanguageManager.Language CurrentLanguage;

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x9F0B34", Offset = "0x9F0B34", VA = "0x9F0B34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x9F0BCC", Offset = "0x9F0BCC", VA = "0x9F0BCC")]
	public SubtitleTestController()
	{
	}
}
[Token(Token = "0x20000FB")]
public class AttenuationInterpolator
{
	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float frameIndex;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float numInterpFrames;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float currentValue;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startValue;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float endValue;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isDone;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool isInit;

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x9F0BD4", Offset = "0x9F0BD4", VA = "0x9F0BD4")]
	public void Init(float interpolationFrames)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x9F0BF0", Offset = "0x9F0BF0", VA = "0x9F0BF0")]
	public void Reset()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x9F0BFC", Offset = "0x9F0BFC", VA = "0x9F0BFC")]
	public float Update()
	{
		return default(float);
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x9F0C68", Offset = "0x9F0C68", VA = "0x9F0C68")]
	public void Set(float value)
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x9F0CCC", Offset = "0x9F0CCC", VA = "0x9F0CCC")]
	public float Get()
	{
		return default(float);
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x9F0CD4", Offset = "0x9F0CD4", VA = "0x9F0CD4")]
	public AttenuationInterpolator()
	{
	}
}
[Token(Token = "0x20000FC")]
public class ExampleWheelController : MonoBehaviour
{
	[Token(Token = "0x20000FD")]
	private static class Uniforms
	{
		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int _MotionAmount;
	}

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float acceleration;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer motionVectorRenderer;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody m_Rigidbody;

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x9F0CDC", Offset = "0x9F0CDC", VA = "0x9F0CDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x9F0D40", Offset = "0x9F0D40", VA = "0x9F0D40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x9F0E9C", Offset = "0x9F0E9C", VA = "0x9F0E9C")]
	public ExampleWheelController()
	{
	}
}
[Token(Token = "0x20000FE")]
public class qb_Group : MonoBehaviour
{
	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string groupName;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool visible;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool frozen;

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x9F0F0C", Offset = "0x9F0F0C", VA = "0x9F0F0C")]
	public void AddObject(GameObject newObject)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x9F0F58", Offset = "0x9F0F58", VA = "0x9F0F58")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x9F0F60", Offset = "0x9F0F60", VA = "0x9F0F60")]
	public void Show()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x9F0F6C", Offset = "0x9F0F6C", VA = "0x9F0F6C")]
	public void Freeze()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x9F0F78", Offset = "0x9F0F78", VA = "0x9F0F78")]
	public void UnFreeze()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x9F0F80", Offset = "0x9F0F80", VA = "0x9F0F80")]
	public void CleanUp()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x9F0FEC", Offset = "0x9F0FEC", VA = "0x9F0FEC")]
	public qb_Group()
	{
	}
}
[Token(Token = "0x20000FF")]
public class qb_Object : MonoBehaviour
{
	[Token(Token = "0x600055B")]
	[Address(RVA = "0x9F0FF4", Offset = "0x9F0FF4", VA = "0x9F0FF4")]
	public qb_Object()
	{
	}
}
[Token(Token = "0x2000100")]
public class qd_Constant
{
	[Token(Token = "0x40004E1")]
	public const string ParentToHitTransform = "qd_ParentToHitTransform";

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x9F0FFC", Offset = "0x9F0FFC", VA = "0x9F0FFC")]
	public qd_Constant()
	{
	}
}
[Token(Token = "0x2000101")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class qd_Decal : MonoBehaviour
{
	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Texture2D _texture;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private Rect _rect;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private float _scale;

	[Token(Token = "0x17000089")]
	public Texture2D texture
	{
		[Token(Token = "0x600055D")]
		[Address(RVA = "0x9F1004", Offset = "0x9F1004", VA = "0x9F1004")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x9F100C", Offset = "0x9F100C", VA = "0x9F100C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x9F1394", Offset = "0x9F1394", VA = "0x9F1394")]
	public void SetScale(float scale)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x9F139C", Offset = "0x9F139C", VA = "0x9F139C")]
	public void SetTexture(Texture2D tex)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x9F13A4", Offset = "0x9F13A4", VA = "0x9F13A4")]
	public void SetUVRect(Rect r)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x9F1564", Offset = "0x9F1564", VA = "0x9F1564")]
	public void FreezeTransform()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x9F1010", Offset = "0x9F1010", VA = "0x9F1010")]
	public void Verify()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x9F1DC0", Offset = "0x9F1DC0", VA = "0x9F1DC0")]
	public qd_Decal()
	{
	}
}
[Token(Token = "0x2000103")]
public delegate void SROptionsPropertyChanged(object sender, string propertyName);
namespace SimpleLightProbePlacer
{
	[Token(Token = "0x2000104")]
	[RequireComponent(typeof(LightProbeGroup))]
	[AddComponentMenu("Rendering/Light Probe Group Control")]
	public class LightProbeGroupControl : MonoBehaviour
	{
		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_mergeDistance;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_usePointLights;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_pointLightRange;

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x9F2044", Offset = "0x9F2044", VA = "0x9F2044")]
		public LightProbeGroupControl()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public enum LightProbeVolumeType
	{
		[Token(Token = "0x40004EB")]
		Fixed,
		[Token(Token = "0x40004EC")]
		Float
	}
	[Token(Token = "0x2000106")]
	[AddComponentMenu("Rendering/Light Probe Volume")]
	public class LightProbeVolume : TransformVolume
	{
		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LightProbeVolumeType m_type;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector3 m_densityFixed;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3 m_densityFloat;

		[Token(Token = "0x1700008A")]
		public LightProbeVolumeType Type
		{
			[Token(Token = "0x600056D")]
			[Address(RVA = "0x9F2064", Offset = "0x9F2064", VA = "0x9F2064")]
			get
			{
				return default(LightProbeVolumeType);
			}
			[Token(Token = "0x600056E")]
			[Address(RVA = "0x9F206C", Offset = "0x9F206C", VA = "0x9F206C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public Vector3 Density
		{
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x9F2074", Offset = "0x9F2074", VA = "0x9F2074")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000570")]
			[Address(RVA = "0x9F20B0", Offset = "0x9F20B0", VA = "0x9F20B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public static Color EditorColor
		{
			[Token(Token = "0x6000571")]
			[Address(RVA = "0x9F20D0", Offset = "0x9F20D0", VA = "0x9F20D0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x9F20E8", Offset = "0x9F20E8", VA = "0x9F20E8")]
		public List<Vector3> CreatePositions()
		{
			return null;
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x9F20F0", Offset = "0x9F20F0", VA = "0x9F20F0")]
		public List<Vector3> CreatePositions(LightProbeVolumeType type)
		{
			return null;
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x9F24C8", Offset = "0x9F24C8", VA = "0x9F24C8")]
		public static List<Vector3> CreatePositionsFixed(Transform volumeTransform, Vector3 origin, Vector3 size, Vector3 density)
		{
			return null;
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x9F2198", Offset = "0x9F2198", VA = "0x9F2198")]
		public static List<Vector3> CreatePositionsFloat(Transform volumeTransform, Vector3 origin, Vector3 size, Vector3 density)
		{
			return null;
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x9F2810", Offset = "0x9F2810", VA = "0x9F2810")]
		public LightProbeVolume()
		{
		}
	}
	[Token(Token = "0x2000107")]
	[AddComponentMenu("")]
	public class TransformVolume : MonoBehaviour
	{
		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Volume m_volume;

		[Token(Token = "0x1700008D")]
		public Volume Volume
		{
			[Token(Token = "0x6000577")]
			[Address(RVA = "0x9F291C", Offset = "0x9F291C", VA = "0x9F291C")]
			get
			{
				return default(Volume);
			}
			[Token(Token = "0x6000578")]
			[Address(RVA = "0x9F2930", Offset = "0x9F2930", VA = "0x9F2930")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public Vector3 Origin
		{
			[Token(Token = "0x6000579")]
			[Address(RVA = "0x9F2180", Offset = "0x9F2180", VA = "0x9F2180")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700008F")]
		public Vector3 Size
		{
			[Token(Token = "0x600057A")]
			[Address(RVA = "0x9F218C", Offset = "0x9F218C", VA = "0x9F218C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x9F2944", Offset = "0x9F2944", VA = "0x9F2944")]
		public bool IsInBounds(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x9F2BEC", Offset = "0x9F2BEC", VA = "0x9F2BEC")]
		public bool IsOnBorder(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x9F2CEC", Offset = "0x9F2CEC", VA = "0x9F2CEC")]
		public bool IsInVolume(Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x9F2D90", Offset = "0x9F2D90", VA = "0x9F2D90")]
		public bool IsInVolume(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x9F3214", Offset = "0x9F3214", VA = "0x9F3214")]
		public Vector3[] GetCorners()
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x9F2994", Offset = "0x9F2994", VA = "0x9F2994")]
		public Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x9F29CC", Offset = "0x9F29CC", VA = "0x9F29CC")]
		public Bounds GetBounds(Vector3[] points)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x9F33D0", Offset = "0x9F33D0", VA = "0x9F33D0")]
		public GameObject[] GetGameObjectsInBounds(LayerMask layerMask)
		{
			return null;
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x9F2E58", Offset = "0x9F2E58", VA = "0x9F2E58")]
		public Vector3 GetSideDirection(int side)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x9F300C", Offset = "0x9F300C", VA = "0x9F300C")]
		public Vector3 GetSidePosition(int side)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x9F36FC", Offset = "0x9F36FC", VA = "0x9F36FC")]
		public float GetSizeAxis(int side)
		{
			return default(float);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x9F2880", Offset = "0x9F2880", VA = "0x9F2880")]
		public TransformVolume()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000109")]
	public struct Volume
	{
		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private Vector3 m_origin;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Vector3 m_size;

		[Token(Token = "0x17000090")]
		public Vector3 Origin
		{
			[Token(Token = "0x600058B")]
			[Address(RVA = "0x9F37D8", Offset = "0x9F37D8", VA = "0x9F37D8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000091")]
		public Vector3 Size
		{
			[Token(Token = "0x600058C")]
			[Address(RVA = "0x9F37E4", Offset = "0x9F37E4", VA = "0x9F37E4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x9F3734", Offset = "0x9F3734", VA = "0x9F3734")]
		public Volume(Vector3 origin, Vector3 size)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x9F37F0", Offset = "0x9F37F0", VA = "0x9F37F0")]
		public static bool operator ==(Volume left, Volume right)
		{
			return default(bool);
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x9F389C", Offset = "0x9F389C", VA = "0x9F389C")]
		public static bool operator !=(Volume left, Volume right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x9F3820", Offset = "0x9F3820", VA = "0x9F3820")]
		public bool Equals(Volume other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x9F38D0", Offset = "0x9F38D0", VA = "0x9F38D0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x9F3960", Offset = "0x9F3960", VA = "0x9F3960", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x9F3A28", Offset = "0x9F3A28", VA = "0x9F3A28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace ProCore.Decals
{
	[Serializable]
	[Token(Token = "0x200010A")]
	public class Decal
	{
		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 DefaultRotation;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3 DefaultScale;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string id;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPacked;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string materialId;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotation;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 scale;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Rect atlasRect;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int orgGroup;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int orgIndex;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int atlasGroup;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int atlasIndex;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Placement rotationPlacement;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Placement scalePlacement;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D texture;

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x9F3AE0", Offset = "0x9F3AE0", VA = "0x9F3AE0")]
		public Decal()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x9F3AE8", Offset = "0x9F3AE8", VA = "0x9F3AE8")]
		public Decal(Texture2D img)
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x9F3BAC", Offset = "0x9F3BAC", VA = "0x9F3BAC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x9F3DF4", Offset = "0x9F3DF4", VA = "0x9F3DF4")]
		public static bool Deserialize(string txt, out Decal decal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x9F46DC", Offset = "0x9F46DC", VA = "0x9F46DC")]
		public string Serialize()
		{
			return null;
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x9F440C", Offset = "0x9F440C", VA = "0x9F440C")]
		private static bool Vec3WithString(string str, ref Vector3 vec3)
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x9F4550", Offset = "0x9F4550", VA = "0x9F4550")]
		private static bool Vec4WithString(string str, ref Vector4 vec4)
		{
			return default(bool);
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x9F46B0", Offset = "0x9F46B0", VA = "0x9F46B0")]
		private static Rect Vec4ToRect(Vector4 v)
		{
			return default(Rect);
		}
	}
	[Serializable]
	[Token(Token = "0x200010B")]
	public class DecalGroup
	{
		[Token(Token = "0x4000505")]
		public const int MAX_ATLAS_SIZE_DEFAULT = 4096;

		[Token(Token = "0x4000506")]
		public const int ATLAS_PADDING_DEFAULT = 4;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Decal> decals;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isPacked;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int maxAtlasSize;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int padding;

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x9F4EE4", Offset = "0x9F4EE4", VA = "0x9F4EE4")]
		public DecalGroup(string name, List<Decal> decals, bool isPacked, Shader shader, Material material, int maxAtlasSize, int padding)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x9F4F4C", Offset = "0x9F4F4C", VA = "0x9F4F4C")]
		public bool ContainsTexture(Texture2D tex)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200010C")]
	public static class qdUtil
	{
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x9F16D0", Offset = "0x9F16D0", VA = "0x9F16D0")]
		public static GameObject[] FindDecalsWithTexture(Texture2D img)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x9F50F0", Offset = "0x9F50F0", VA = "0x9F50F0")]
		public static void RefreshSceneDecals(DecalGroup dg)
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x9F5388", Offset = "0x9F5388", VA = "0x9F5388")]
		public static void SortDecalsUsingView(ref List<Decal> decals, DecalView decalView)
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x9F5610", Offset = "0x9F5610", VA = "0x9F5610")]
		public static bool Contains(this Dictionary<int, List<int>> dic, int key, int val)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x9F56D4", Offset = "0x9F56D4", VA = "0x9F56D4")]
		public static void Add(this Dictionary<int, List<int>> dic, int key, int val)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x9F58E4", Offset = "0x9F58E4", VA = "0x9F58E4")]
		public static string ToFormattedString(this Dictionary<int, List<int>> dic)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		public static string ToFormattedString<T>(this T[] t, string _delimiter)
		{
			return null;
		}

		[Token(Token = "0x60005A6")]
		public static string ToFormattedString<T>(this List<T> t, string _delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x200010D")]
	public enum DecalView
	{
		[Token(Token = "0x400050F")]
		Organizational,
		[Token(Token = "0x4000510")]
		Atlas
	}
	[Token(Token = "0x200010E")]
	public enum Placement
	{
		[Token(Token = "0x4000512")]
		Fixed,
		[Token(Token = "0x4000513")]
		Random
	}
	[Token(Token = "0x200010F")]
	public static class qd_Const
	{
		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int[] ATLAS_SIZES;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] ATLAS_SIZES_STRING;
	}
	[Token(Token = "0x2000110")]
	public class qd_Mesh
	{
		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] BILLBOARD_TRIANGLES;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3[] BILLBOARD_VERTICES;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector3[] BILLBOARD_NORMALS;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector4[] BILLBOARD_TANGENTS;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector2[] BILLBOARD_UV2;

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x9F5F94", Offset = "0x9F5F94", VA = "0x9F5F94")]
		public static GameObject CreateDecal(Material mat, Rect uvCoords, float scale)
		{
			return null;
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x9F191C", Offset = "0x9F191C", VA = "0x9F191C")]
		public static Mesh DecalMesh(string name, Material mat, Rect uvCoords, float scale)
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x9F623C", Offset = "0x9F623C", VA = "0x9F623C")]
		public qd_Mesh()
		{
		}
	}
}
namespace ProGroups
{
	[Serializable]
	[Token(Token = "0x2000111")]
	public class Group
	{
		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool frozen;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool hidden;

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x9F662C", Offset = "0x9F662C", VA = "0x9F662C")]
		public Group(string InName, GameObject[] InObjects, bool InFrozen, bool InHidden)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x9F66D8", Offset = "0x9F66D8", VA = "0x9F66D8")]
		public void RemoveNullOrEmpty()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x9F682C", Offset = "0x9F682C", VA = "0x9F682C")]
		public void AddObjects(GameObject[] InObjects)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x9F68D0", Offset = "0x9F68D0", VA = "0x9F68D0")]
		public void RemoveObject(GameObject InObject)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x9F6928", Offset = "0x9F6928", VA = "0x9F6928")]
		public void RemoveObjects(GameObject[] InObjects)
		{
		}
	}
	[Token(Token = "0x2000113")]
	internal static class ArrayExt
	{
		[Token(Token = "0x60005B4")]
		public static void Add<T>(ref T[] array, T val)
		{
		}

		[Token(Token = "0x60005B5")]
		public static void AddRange<T>(ref T[] array, T[] values)
		{
		}

		[Token(Token = "0x60005B6")]
		public static void Remove<T>(ref T[] array, T value)
		{
		}

		[Token(Token = "0x60005B7")]
		public static void Remove<T>(ref T[] array, T[] values)
		{
		}

		[Token(Token = "0x60005B8")]
		public static void RemoveAt<T>(ref T[] array, int index)
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class GroupContainer : MonoBehaviour
	{
		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Group[] sceneGroups;

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x9F6A48", Offset = "0x9F6A48", VA = "0x9F6A48")]
		public void NewGroup(string InName, GameObject[] InObjects)
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x9F6B54", Offset = "0x9F6B54", VA = "0x9F6B54")]
		public void ToggleFreeze(Group InGroup)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x9F6C04", Offset = "0x9F6C04", VA = "0x9F6C04")]
		public void ToggleVis(Group InGroup)
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x9F6CCC", Offset = "0x9F6CCC", VA = "0x9F6CCC")]
		public void HideGroup(Group InGroup)
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x9F6C28", Offset = "0x9F6C28", VA = "0x9F6C28")]
		public void ShowGroup(Group InGroup)
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x9F6D64", Offset = "0x9F6D64", VA = "0x9F6D64")]
		public void Isolate(int i)
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x9F6DE4", Offset = "0x9F6DE4", VA = "0x9F6DE4")]
		public void RemoveGroups(IEnumerable<int> indices)
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x9F6EE8", Offset = "0x9F6EE8", VA = "0x9F6EE8")]
		public void RemoveGroup(int i)
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x9F6FEC", Offset = "0x9F6FEC", VA = "0x9F6FEC")]
		public void UpdateGroup(Group InGroup, GameObject[] InObjects)
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x9F7088", Offset = "0x9F7088", VA = "0x9F7088")]
		public void MoveGroupUp(int InShiftIndex)
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x9F7174", Offset = "0x9F7174", VA = "0x9F7174")]
		public void MoveGroupDown(int InShiftIndex)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x9F725C", Offset = "0x9F725C", VA = "0x9F725C")]
		public void RemoveNullOrEmpty()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x9F737C", Offset = "0x9F737C", VA = "0x9F737C")]
		public void Clean()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x9F73D8", Offset = "0x9F73D8", VA = "0x9F73D8")]
		public GroupContainer()
		{
		}
	}
}
namespace ProGrids
{
	[Token(Token = "0x2000118")]
	public static class pg_Constant
	{
		[Token(Token = "0x4000526")]
		public const string ProGridsIsEnabled = "pgProGridsIsEnabled";

		[Token(Token = "0x4000527")]
		public const string ProGridsIsExtended = "pgProGridsIsExtended";

		[Token(Token = "0x4000528")]
		public const string ProGridsUpgradeURL = "http://u3d.as/content/six-by-seven-studio/pro-grids/3ov";

		[Token(Token = "0x4000529")]
		public const string SnapValue = "pgSnapValue";

		[Token(Token = "0x400052A")]
		public const string SnapMultiplier = "pgSnapMultiplier";

		[Token(Token = "0x400052B")]
		public const string SnapEnabled = "pgSnapEnabled";

		[Token(Token = "0x400052C")]
		public const string UseAxisConstraints = "pgUseAxisConstraints";

		[Token(Token = "0x400052D")]
		public const string LastOrthoToggledRotation = "pgLastOrthoToggledRotation";

		[Token(Token = "0x400052E")]
		public const string BracketIncreaseValue = "pgBracketIncreaseValue";

		[Token(Token = "0x400052F")]
		public const string GridUnit = "pg_GridUnit";

		[Token(Token = "0x4000530")]
		public const string LockGrid = "pg_LockGrid";

		[Token(Token = "0x4000531")]
		public const string LockedGridPivot = "pg_LockedGridPivot";

		[Token(Token = "0x4000532")]
		public const string PGVersion = "pg_Version";

		[Token(Token = "0x4000533")]
		public const string GridAxis = "pg_GridAxis";

		[Token(Token = "0x4000534")]
		public const string PerspGrid = "pg_PerspGrid";

		[Token(Token = "0x4000535")]
		public const string SnapScale = "pg_SnapOnScale";

		[Token(Token = "0x4000536")]
		public const string PredictiveGrid = "pg_PredictiveGrid";

		[Token(Token = "0x4000537")]
		public const string SnapAsGroup = "pg_SnapAsGroup";

		[Token(Token = "0x4000538")]
		public const string MajorLineIncrement = "pg_MajorLineIncrement";

		[Token(Token = "0x4000539")]
		public const float METER = 1f;

		[Token(Token = "0x400053A")]
		public const float CENTIMETER = 0.01f;

		[Token(Token = "0x400053B")]
		public const float MILLIMETER = 0.001f;

		[Token(Token = "0x400053C")]
		public const float INCH = 0.025399987f;

		[Token(Token = "0x400053D")]
		public const float FOOT = 0.3048f;

		[Token(Token = "0x400053E")]
		public const float YARD = 1.09361f;

		[Token(Token = "0x400053F")]
		public const float PARSEC = 5f;
	}
	[Token(Token = "0x2000119")]
	public enum Axis
	{
		[Token(Token = "0x4000541")]
		None = 0,
		[Token(Token = "0x4000542")]
		X = 1,
		[Token(Token = "0x4000543")]
		Y = 2,
		[Token(Token = "0x4000544")]
		Z = 4,
		[Token(Token = "0x4000545")]
		NegX = 8,
		[Token(Token = "0x4000546")]
		NegY = 22,
		[Token(Token = "0x4000547")]
		NegZ = 50
	}
	[Token(Token = "0x200011A")]
	public enum SnapUnit
	{
		[Token(Token = "0x4000549")]
		Meter,
		[Token(Token = "0x400054A")]
		Centimeter,
		[Token(Token = "0x400054B")]
		Millimeter,
		[Token(Token = "0x400054C")]
		Inch,
		[Token(Token = "0x400054D")]
		Foot,
		[Token(Token = "0x400054E")]
		Yard,
		[Token(Token = "0x400054F")]
		Parsec
	}
	[Token(Token = "0x200011B")]
	public static class pg_Enum
	{
		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x9F74CC", Offset = "0x9F74CC", VA = "0x9F74CC")]
		public static Vector3 InverseAxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x9F752C", Offset = "0x9F752C", VA = "0x9F752C")]
		public static Vector3 AxisMask(Vector3 v, Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x9F7594", Offset = "0x9F7594", VA = "0x9F7594")]
		public static float SnapUnitValue(SnapUnit su)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200011C")]
	public static class pg_Util
	{
		[Token(Token = "0x4000550")]
		private const float EPSILON = 0.0001f;

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x9F75B8", Offset = "0x9F75B8", VA = "0x9F75B8")]
		public static Color ColorWithString(string value)
		{
			return default(Color);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x9F7798", Offset = "0x9F7798", VA = "0x9F7798")]
		private static Vector3 VectorToMask(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x9F7828", Offset = "0x9F7828", VA = "0x9F7828")]
		private static Axis MaskToAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x9F7858", Offset = "0x9F7858", VA = "0x9F7858")]
		private static Axis BestAxis(Vector3 vec)
		{
			return default(Axis);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x9F7898", Offset = "0x9F7898", VA = "0x9F7898")]
		public static Axis CalcDragAxis(Vector3 movement, Camera cam)
		{
			return default(Axis);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x9F7C68", Offset = "0x9F7C68", VA = "0x9F7C68")]
		public static float ValueFromMask(Vector3 val, Vector3 mask)
		{
			return default(float);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x9F7C8C", Offset = "0x9F7C8C", VA = "0x9F7C8C")]
		public static Vector3 SnapValue(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x9F7D7C", Offset = "0x9F7D7C", VA = "0x9F7D7C")]
		private static Type GetType(string type, [Optional] string assembly)
		{
			return null;
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x9F8224", Offset = "0x9F8224", VA = "0x9F8224")]
		public static void SetUnityGridEnabled(bool isEnabled)
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x9F837C", Offset = "0x9F837C", VA = "0x9F837C")]
		public static bool GetUnityGridEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x9F84D4", Offset = "0x9F84D4", VA = "0x9F84D4")]
		public static Vector3 SnapValue(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x9F8580", Offset = "0x9F8580", VA = "0x9F8580")]
		public static Vector3 SnapToCeil(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x9F85E4", Offset = "0x9F85E4", VA = "0x9F85E4")]
		public static Vector3 SnapToFloor(Vector3 val, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x9F861C", Offset = "0x9F861C", VA = "0x9F861C")]
		public static Vector3 SnapToFloor(Vector3 val, Vector3 mask, float snapValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x9F7CE8", Offset = "0x9F7CE8", VA = "0x9F7CE8")]
		public static float Snap(float val, float round)
		{
			return default(float);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x9F860C", Offset = "0x9F860C", VA = "0x9F860C")]
		public static float SnapToFloor(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x9F85D4", Offset = "0x9F85D4", VA = "0x9F85D4")]
		public static float SnapToCeil(float val, float snapValue)
		{
			return default(float);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x9F8670", Offset = "0x9F8670", VA = "0x9F8670")]
		public static Vector3 CeilFloor(Vector3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200011F")]
	public static class PGExtensions
	{
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x9F86E8", Offset = "0x9F86E8", VA = "0x9F86E8")]
		public static bool Contains(this Transform[] t_arr, Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x9F87AC", Offset = "0x9F87AC", VA = "0x9F87AC")]
		public static float Sum(this Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x9F87B8", Offset = "0x9F87B8", VA = "0x9F87B8")]
		public static bool InFrustum(this Camera cam, Vector3 point)
		{
			return default(bool);
		}
	}
}
namespace Phonon
{
	[Token(Token = "0x2000120")]
	public class ComputeDevice
	{
		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr device;

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x9F880C", Offset = "0x9F880C", VA = "0x9F880C")]
		public IntPtr GetDevice()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x9F8814", Offset = "0x9F8814", VA = "0x9F8814")]
		public Error Create(bool useOpenCL, ComputeDeviceType deviceType, int numComputeUnits)
		{
			return default(Error);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x9F8B18", Offset = "0x9F8B18", VA = "0x9F8B18")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x9F8C00", Offset = "0x9F8C00", VA = "0x9F8C00")]
		public ComputeDevice()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public static class Context
	{
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x9F8C58", Offset = "0x9F8C58", VA = "0x9F8C58")]
		public static GlobalContext GetContext()
		{
			return default(GlobalContext);
		}
	}
	[Token(Token = "0x2000122")]
	public enum AudioEngine
	{
		[Token(Token = "0x4000555")]
		Unity,
		[Token(Token = "0x4000556")]
		Wwise,
		[Token(Token = "0x4000557")]
		FMODStudio
	}
	[Token(Token = "0x2000123")]
	[AddComponentMenu("Phonon/Phonon Audio Engine Selector")]
	public class AudioEngineComponent : MonoBehaviour
	{
		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioEngine audioEngine;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject settingsObject;

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x9F8CAC", Offset = "0x9F8CAC", VA = "0x9F8CAC")]
		public static GameObject GetObject()
		{
			return null;
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x9F8DF0", Offset = "0x9F8DF0", VA = "0x9F8DF0")]
		public static AudioEngine GetAudioEngine()
		{
			return default(AudioEngine);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x9F8E40", Offset = "0x9F8E40", VA = "0x9F8E40")]
		public AudioEngineComponent()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public enum Bool
	{
		[Token(Token = "0x400055B")]
		False,
		[Token(Token = "0x400055C")]
		True
	}
	[Token(Token = "0x2000125")]
	public enum Error
	{
		[Token(Token = "0x400055E")]
		None,
		[Token(Token = "0x400055F")]
		Fail,
		[Token(Token = "0x4000560")]
		OutOfMemory,
		[Token(Token = "0x4000561")]
		Initialization
	}
	[Token(Token = "0x2000126")]
	public struct GlobalContext
	{
		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr logCallback;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr allocateCallback;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr freeCallback;
	}
	[Token(Token = "0x2000127")]
	public struct Vector3
	{
		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}
	[Token(Token = "0x2000128")]
	public struct Quaternion
	{
		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;
	}
	[Token(Token = "0x2000129")]
	public struct Box
	{
		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 minCoordinates;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 maxCoordinates;
	}
	[Token(Token = "0x200012A")]
	public struct Sphere
	{
		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float centerx;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float centery;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float centerz;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;
	}
	[Token(Token = "0x200012B")]
	public enum ChannelLayoutType
	{
		[Token(Token = "0x4000573")]
		Speakers,
		[Token(Token = "0x4000574")]
		Ambisonics
	}
	[Token(Token = "0x200012C")]
	public enum ChannelLayout
	{
		[Token(Token = "0x4000576")]
		Mono,
		[Token(Token = "0x4000577")]
		Stereo,
		[Token(Token = "0x4000578")]
		Quadraphonic,
		[Token(Token = "0x4000579")]
		FivePointOne,
		[Token(Token = "0x400057A")]
		SevenPointOne,
		[Token(Token = "0x400057B")]
		Custom
	}
	[Token(Token = "0x200012D")]
	public enum ChannelOrder
	{
		[Token(Token = "0x400057D")]
		Interleaved,
		[Token(Token = "0x400057E")]
		Deinterleaved
	}
	[Token(Token = "0x200012E")]
	public enum AmbisonicsOrdering
	{
		[Token(Token = "0x4000580")]
		FurseMalham,
		[Token(Token = "0x4000581")]
		ACN
	}
	[Token(Token = "0x200012F")]
	public enum AmbisonicsNormalization
	{
		[Token(Token = "0x4000583")]
		FurseMalham,
		[Token(Token = "0x4000584")]
		SN3D,
		[Token(Token = "0x4000585")]
		N3D
	}
	[Token(Token = "0x2000130")]
	public struct AudioFormat
	{
		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ChannelLayoutType channelLayoutType;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ChannelLayout channelLayout;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int numSpeakers;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] speakerDirections;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ambisonicsOrder;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AmbisonicsOrdering ambisonicsOrdering;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AmbisonicsNormalization ambisonicsNormalization;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ChannelOrder channelOrder;
	}
	[Token(Token = "0x2000131")]
	public struct AudioBuffer
	{
		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioFormat audioFormat;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numSamples;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float[] interleavedBuffer;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr[] deInterleavedBuffer;
	}
	[Token(Token = "0x2000132")]
	public struct RenderingSettings
	{
		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int samplingRate;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int frameSize;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ConvolutionOption convolutionOption;
	}
	[Token(Token = "0x2000133")]
	public enum HRTFInterpolation
	{
		[Token(Token = "0x4000596")]
		Nearest,
		[Token(Token = "0x4000597")]
		Bilinear
	}
	[Token(Token = "0x2000134")]
	public struct Triangle
	{
		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index0;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int index1;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int index2;
	}
	[Token(Token = "0x2000135")]
	public struct Material
	{
		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float absorptionLow;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float absorptionMid;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float absorptionHigh;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float scattering;
	}
	[Token(Token = "0x2000136")]
	public enum SceneType
	{
		[Token(Token = "0x40005A0")]
		Phonon,
		[Token(Token = "0x40005A1")]
		Embree,
		[Token(Token = "0x40005A2")]
		RadeonRays,
		[Token(Token = "0x40005A3")]
		Custom
	}
	[Token(Token = "0x2000137")]
	public enum ConvolutionOption
	{
		[Token(Token = "0x40005A5")]
		Phonon,
		[Token(Token = "0x40005A6")]
		TrueAudioNext
	}
	[Token(Token = "0x2000138")]
	public enum OcclusionOption
	{
		[Token(Token = "0x40005A8")]
		None,
		[Token(Token = "0x40005A9")]
		Raycast,
		[Token(Token = "0x40005AA")]
		Partial
	}
	[Token(Token = "0x2000139")]
	public enum SimulationType
	{
		[Token(Token = "0x40005AC")]
		Realtime,
		[Token(Token = "0x40005AD")]
		Baked
	}
	[Token(Token = "0x200013A")]
	public struct PropagationSettings
	{
		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SceneType sceneType;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int rays;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int secondaryRays;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int bounces;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float irDuration;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int ambisonicsOrder;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxConvolutionSources;
	}
	[Token(Token = "0x200013B")]
	public enum ComputeDeviceType
	{
		[Token(Token = "0x40005B6")]
		CPU,
		[Token(Token = "0x40005B7")]
		GPU,
		[Token(Token = "0x40005B8")]
		Any
	}
	[Token(Token = "0x200013C")]
	public enum ProbeBatchType
	{
		[Token(Token = "0x40005BA")]
		Static,
		[Token(Token = "0x40005BB")]
		Dynamic
	}
	[Token(Token = "0x200013D")]
	public enum ProbePlacementStrategy
	{
		[Token(Token = "0x40005BD")]
		Centroid,
		[Token(Token = "0x40005BE")]
		Octree,
		[Token(Token = "0x40005BF")]
		UniformFloor
	}
	[Token(Token = "0x200013E")]
	public struct ProbePlacementParameters
	{
		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ProbePlacementStrategy placement;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float horizontalSpacing;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float heightAboveFloor;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxNumTriangles;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxOctreeDepth;
	}
	[Token(Token = "0x200013F")]
	public struct BakingSettings
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool bakeParametric;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Bool bakeConvolution;
	}
	[Token(Token = "0x2000140")]
	public struct DirectSoundPath
	{
		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 direction;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distanceAttenuation;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] airAbsorption;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float propagationDelay;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float occlusionFactor;
	}
	[Token(Token = "0x2000141")]
	public static class Common
	{
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x9F8E48", Offset = "0x9F8E48", VA = "0x9F8E48")]
		public static Vector3 ConvertVector(UnityEngine.Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x9F8E50", Offset = "0x9F8E50", VA = "0x9F8E50")]
		public static UnityEngine.Vector3 ConvertVector(Vector3 point)
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x2000142")]
	public static class PhononCore
	{
		[Token(Token = "0x2000143")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void LoadSceneProgressCallback(float progress);

		[Token(Token = "0x2000144")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void FinalizeSceneProgressCallback(float progress);

		[Token(Token = "0x2000145")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void ClosestHitCallback(Vector3 origin, Vector3 direction, float minDistance, float maxDistance, [In][Out] ref float hitDistance, [In][Out] ref Vector3 hitNormal, [In][Out] ref int hitMaterialIndex, IntPtr userData);

		[Token(Token = "0x2000146")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void AnyHitCallback(Vector3 origin, Vector3 direction, float minDistance, float maxDistance, [In][Out] ref int hitExists, IntPtr userData);

		[Token(Token = "0x2000147")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void ProbePlacementProgressCallback(float progress);

		[Token(Token = "0x2000148")]
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		public delegate void BakeProgressCallback(float progress);

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x9F8A84", Offset = "0x9F8A84", VA = "0x9F8A84")]
		public static extern Error iplCreateComputeDevice(ComputeDeviceType deviceType, int numComputeUnits, [In][Out] ref IntPtr device);

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x9F8B84", Offset = "0x9F8B84", VA = "0x9F8B84")]
		public static extern void iplDestroyComputeDevice([In][Out] ref IntPtr device);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x9F8E58", Offset = "0x9F8E58", VA = "0x9F8E58")]
		public static extern Error iplCreateScene(GlobalContext globalContext, IntPtr computeDevice, PropagationSettings simulationSettings, int numMaterials, [In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x9F8F24", Offset = "0x9F8F24", VA = "0x9F8F24")]
		public static extern void iplDestroyScene([In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x9F8FA0", Offset = "0x9F8FA0", VA = "0x9F8FA0")]
		public static extern void iplSetSceneMaterial(IntPtr scene, int materialIndex, Material material);

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x9F9054", Offset = "0x9F9054", VA = "0x9F9054")]
		public static extern Error iplCreateStaticMesh(IntPtr scene, int numVertices, int numTriangles, [In][Out] ref IntPtr staticMesh);

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x9F90F0", Offset = "0x9F90F0", VA = "0x9F90F0")]
		public static extern void iplDestroyStaticMesh([In][Out] ref IntPtr staticMesh);

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x9F916C", Offset = "0x9F916C", VA = "0x9F916C")]
		public static extern void iplSetStaticMeshVertices(IntPtr scene, IntPtr staticMesh, Vector3[] vertices);

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x9F9204", Offset = "0x9F9204", VA = "0x9F9204")]
		public static extern void iplSetStaticMeshTriangles(IntPtr scene, IntPtr staticMesh, Triangle[] triangles);

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x9F92A0", Offset = "0x9F92A0", VA = "0x9F92A0")]
		public static extern void iplSetStaticMeshMaterials(IntPtr scene, IntPtr staticMesh, int[] materialIndices);

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x9F933C", Offset = "0x9F933C", VA = "0x9F933C")]
		public static extern void iplFinalizeScene(IntPtr scene, FinalizeSceneProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x9F93C4", Offset = "0x9F93C4", VA = "0x9F93C4")]
		public static extern Error iplSaveFinalizedScene(IntPtr scene, string fileName);

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x9F9464", Offset = "0x9F9464", VA = "0x9F9464")]
		public static extern Error iplLoadFinalizedScene(GlobalContext globalContext, PropagationSettings simulationSettings, string fileName, IntPtr computeDevice, LoadSceneProgressCallback progressCallback, [In][Out] ref IntPtr scene);

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x9F955C", Offset = "0x9F955C", VA = "0x9F955C")]
		public static extern void iplDumpSceneToObjFile(IntPtr scene, string fileName);

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x9F95F4", Offset = "0x9F95F4", VA = "0x9F95F4")]
		public static extern void iplSetRayTracerCallbacks(IntPtr scene, ClosestHitCallback closetHitCallback, AnyHitCallback anyHitCallback, IntPtr userData);

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0x9F96A4", Offset = "0x9F96A4", VA = "0x9F96A4")]
		public static extern Error iplCreateEnvironment(GlobalContext globalContext, IntPtr computeDevice, PropagationSettings simulationSettings, IntPtr scene, IntPtr probeManager, [In][Out] ref IntPtr environment);

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x9F9778", Offset = "0x9F9778", VA = "0x9F9778")]
		public static extern void iplDestroyEnvironment([In][Out] ref IntPtr environment);

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x9F97F4", Offset = "0x9F97F4", VA = "0x9F97F4")]
		public static extern void iplSetNumBounces(IntPtr environment, int numBounces);

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x9F9878", Offset = "0x9F9878", VA = "0x9F9878")]
		public static extern void iplMixAudioBuffers(int numBuffers, AudioBuffer[] inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x9F99F0", Offset = "0x9F99F0", VA = "0x9F99F0")]
		public static extern void iplInterleaveAudioBuffer(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x9F9AE0", Offset = "0x9F9AE0", VA = "0x9F9AE0")]
		public static extern void iplDeinterleaveAudioBuffer(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x9F9BD0", Offset = "0x9F9BD0", VA = "0x9F9BD0")]
		public static extern void iplConvertAudioBufferFormat(AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x9F9CC0", Offset = "0x9F9CC0", VA = "0x9F9CC0")]
		public static extern Error iplCreateAmbisonicsRotator(int order, [In][Out] ref IntPtr rotator);

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x9F9D44", Offset = "0x9F9D44", VA = "0x9F9D44")]
		public static extern void iplDestroyAmbisonicsRotator([In][Out] ref IntPtr rotator);

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x9F9DC0", Offset = "0x9F9DC0", VA = "0x9F9DC0")]
		public static extern void iplSetAmbisonicsRotation(IntPtr rotator, Quaternion quaternion);

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x9F9E68", Offset = "0x9F9E68", VA = "0x9F9E68")]
		public static extern void iplRotateAmbisonicsAudioBuffer(IntPtr rotator, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x9F9F60", Offset = "0x9F9F60", VA = "0x9F9F60")]
		public static extern Vector3 iplCalculateRelativeDirection(Vector3 sourcePosition, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp);

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x9FA03C", Offset = "0x9FA03C", VA = "0x9FA03C")]
		public static extern Error iplCreateBinauralRenderer(GlobalContext globalContext, RenderingSettings renderingSettings, byte[] hrtfData, [In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x9FA100", Offset = "0x9FA100", VA = "0x9FA100")]
		public static extern void iplDestroyBinauralRenderer([In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x9FA17C", Offset = "0x9FA17C", VA = "0x9FA17C")]
		public static extern Error iplCreatePanningEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x9FA294", Offset = "0x9FA294", VA = "0x9FA294")]
		public static extern void iplDestroyPanningEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x9FA310", Offset = "0x9FA310", VA = "0x9FA310")]
		public static extern void iplApplyPanningEffect(IntPtr effect, AudioBuffer inputAudio, Vector3 direction, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x9FA430", Offset = "0x9FA430", VA = "0x9FA430")]
		public static extern Error iplCreateBinauralEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x9FA548", Offset = "0x9FA548", VA = "0x9FA548")]
		public static extern void iplDestroyBinauralEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x9FA5C4", Offset = "0x9FA5C4", VA = "0x9FA5C4")]
		public static extern void iplApplyBinauralEffect(IntPtr effect, AudioBuffer inputAudio, Vector3 direction, HRTFInterpolation interpolation, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x9FA6F4", Offset = "0x9FA6F4", VA = "0x9FA6F4")]
		public static extern Error iplCreateVirtualSurroundEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x9FA80C", Offset = "0x9FA80C", VA = "0x9FA80C")]
		public static extern void iplDestroyVirtualSurroundEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x9FA888", Offset = "0x9FA888", VA = "0x9FA888")]
		public static extern void iplApplyVirtualSurroundEffect(IntPtr effect, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x9FA980", Offset = "0x9FA980", VA = "0x9FA980")]
		public static extern Error iplCreateAmbisonicsPanningEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x9FAA98", Offset = "0x9FAA98", VA = "0x9FAA98")]
		public static extern void iplDestroyAmbisonicsPanningEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x9FAB14", Offset = "0x9FAB14", VA = "0x9FAB14")]
		public static extern void iplApplyAmbisonicsPanningEffect(IntPtr effect, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x9FAC0C", Offset = "0x9FAC0C", VA = "0x9FAC0C")]
		public static extern Error iplCreateAmbisonicsBinauralEffect(IntPtr renderer, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x9FAD24", Offset = "0x9FAD24", VA = "0x9FAD24")]
		public static extern void iplDestroyAmbisonicsBinauralEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x9FADA0", Offset = "0x9FADA0", VA = "0x9FADA0")]
		public static extern void iplApplyAmbisonicsBinauralEffect(IntPtr effect, AudioBuffer inputAudio, AudioBuffer outputAudio);

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x9FAE98", Offset = "0x9FAE98", VA = "0x9FAE98")]
		public static extern Error iplCreateEnvironmentalRenderer(GlobalContext globalContext, IntPtr environment, RenderingSettings renderingSettings, AudioFormat outputFormat, [In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x9FAFA0", Offset = "0x9FAFA0", VA = "0x9FAFA0")]
		public static extern void iplDestroyEnvironmentalRenderer([In][Out] ref IntPtr renderer);

		[PreserveSig]
		[Token(Token = "0x6000622")]
		[Address(RVA = "0x9FB01C", Offset = "0x9FB01C", VA = "0x9FB01C")]
		public static extern DirectSoundPath iplGetDirectSoundPath(IntPtr renderer, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, Vector3 sourcePosition, float sourceRadius, OcclusionOption occlusionMethod);

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x9FB148", Offset = "0x9FB148", VA = "0x9FB148")]
		public static extern Error iplCreateConvolutionEffect(IntPtr renderer, string name, SimulationType simulationType, AudioFormat inputFormat, AudioFormat outputFormat, [In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x9FB290", Offset = "0x9FB290", VA = "0x9FB290")]
		public static extern void iplDestroyConvolutionEffect([In][Out] ref IntPtr effect);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x9FB30C", Offset = "0x9FB30C", VA = "0x9FB30C")]
		public static extern void iplSetConvolutionEffectName(IntPtr effect, string name);

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x9FB3A4", Offset = "0x9FB3A4", VA = "0x9FB3A4")]
		public static extern void iplSetDryAudioForConvolutionEffect(IntPtr effect, Vector3 sourcePosition, AudioBuffer dryAudio);

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x9FB488", Offset = "0x9FB488", VA = "0x9FB488")]
		public static extern void iplGetWetAudioForConvolutionEffect(IntPtr effect, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, AudioBuffer wetAudio);

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x9FB5A4", Offset = "0x9FB5A4", VA = "0x9FB5A4")]
		public static extern void iplGetMixedEnvironmentalAudio(IntPtr renderer, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, AudioBuffer mixedWetAudio);

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x9FB6C0", Offset = "0x9FB6C0", VA = "0x9FB6C0")]
		public static extern Error iplCreateProbeBox(IntPtr scene, Box box, ProbePlacementParameters placementParams, ProbePlacementProgressCallback progressCallback, [In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x9FB794", Offset = "0x9FB794", VA = "0x9FB794")]
		public static extern void iplDestroyProbeBox([In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x9FB810", Offset = "0x9FB810", VA = "0x9FB810")]
		public static extern int iplGetProbeSpheres(IntPtr probeBox, [In][Out] Sphere[] probeSpheres);

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x9FB89C", Offset = "0x9FB89C", VA = "0x9FB89C")]
		public static extern int iplSaveProbeBox(IntPtr probeBox, [In][Out] byte[] data);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x9FB928", Offset = "0x9FB928", VA = "0x9FB928")]
		public static extern Error iplLoadProbeBox(byte[] data, int size, [In][Out] ref IntPtr probeBox);

		[PreserveSig]
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x9FB9C4", Offset = "0x9FB9C4", VA = "0x9FB9C4")]
		public static extern Error iplCreateProbeBatch([In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x9FBA40", Offset = "0x9FBA40", VA = "0x9FBA40")]
		public static extern void iplDestroyProbeBatch([In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x9FBABC", Offset = "0x9FBABC", VA = "0x9FBABC")]
		public static extern void iplAddProbeToBatch(IntPtr probeBatch, IntPtr probeBox, int probeIndex);

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x9FBB50", Offset = "0x9FBB50", VA = "0x9FBB50")]
		public static extern void iplFinalizeProbeBatch(IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x9FBBCC", Offset = "0x9FBBCC", VA = "0x9FBBCC")]
		public static extern int iplSaveProbeBatch(IntPtr probeBatch, [In][Out] byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x9FBC58", Offset = "0x9FBC58", VA = "0x9FBC58")]
		public static extern Error iplLoadProbeBatch(byte[] data, int size, [In][Out] ref IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x9FBCF4", Offset = "0x9FBCF4", VA = "0x9FBCF4")]
		public static extern Error iplCreateProbeManager([In][Out] ref IntPtr probeManager);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x9FBD70", Offset = "0x9FBD70", VA = "0x9FBD70")]
		public static extern void iplDestroyProbeManager([In][Out] ref IntPtr probeManager);

		[PreserveSig]
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x9FBDEC", Offset = "0x9FBDEC", VA = "0x9FBDEC")]
		public static extern void iplAddProbeBatch(IntPtr probeManager, IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x9FBE6C", Offset = "0x9FBE6C", VA = "0x9FBE6C")]
		public static extern void iplRemoveProbeBatch(IntPtr probeManager, IntPtr probeBatch);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x9FBEF0", Offset = "0x9FBEF0", VA = "0x9FBEF0")]
		public static extern void iplBakeReverb(IntPtr environment, IntPtr probeBox, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x9FBF94", Offset = "0x9FBF94", VA = "0x9FBF94")]
		public static extern void iplBakePropagation(IntPtr environment, IntPtr probeBox, Sphere sourceInfluence, string sourceName, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x9FC08C", Offset = "0x9FC08C", VA = "0x9FC08C")]
		public static extern void iplBakeStaticListener(IntPtr environment, IntPtr probeBox, Sphere listenerInfluence, string listenerName, BakingSettings bakingSettings, BakeProgressCallback progressCallback);

		[PreserveSig]
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x9FC184", Offset = "0x9FC184", VA = "0x9FC184")]
		public static extern void iplCancelBake();

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x9FC1E8", Offset = "0x9FC1E8", VA = "0x9FC1E8")]
		public static extern void iplDeleteBakedDataByName(IntPtr probeBox, string sourceName);

		[PreserveSig]
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x9FC280", Offset = "0x9FC280", VA = "0x9FC280")]
		public static extern int iplGetBakedDataSizeByName(IntPtr probeBox, string sourceName);

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x9FC320", Offset = "0x9FC320", VA = "0x9FC320")]
		public static extern Error iplCreateSimulationData(PropagationSettings simulationSettings, RenderingSettings renderingSettings, [In][Out] ref IntPtr simulationData);

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x9FC3CC", Offset = "0x9FC3CC", VA = "0x9FC3CC")]
		public static extern void iplDestroySimulationData([In][Out] ref IntPtr simulationData);

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x9FC448", Offset = "0x9FC448", VA = "0x9FC448")]
		public static extern int iplGetNumIrSamples(IntPtr simulationData);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x9FC4C4", Offset = "0x9FC4C4", VA = "0x9FC4C4")]
		public static extern int iplGetNumIrChannels(IntPtr simulationData);

		[PreserveSig]
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x9FC540", Offset = "0x9FC540", VA = "0x9FC540")]
		public static extern void iplGenerateSimulationData(IntPtr simulationData, IntPtr environment, Vector3 listenerPosition, Vector3 listenerAhead, Vector3 listenerUp, Vector3[] sourcePositions);

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x9FC63C", Offset = "0x9FC63C", VA = "0x9FC63C")]
		public static extern void iplGetSimulationResult(IntPtr simulationData, int sourceIndex, int channel, float[] buffer);
	}
	[Token(Token = "0x2000149")]
	public class Environment
	{
		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr environment;

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x9FD140", Offset = "0x9FD140", VA = "0x9FD140")]
		public IntPtr GetEnvironment()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x9FD148", Offset = "0x9FD148", VA = "0x9FD148")]
		public Error Create(ComputeDevice computeDevice, PropagationSettings simulationSettings, Scene scene, ProbeManager probeManager)
		{
			return default(Error);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x9FD2B4", Offset = "0x9FD2B4", VA = "0x9FD2B4")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x9FD320", Offset = "0x9FD320", VA = "0x9FD320")]
		public Environment()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class EnvironmentalRendererComponent : MonoBehaviour
	{
		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioFormat ambisonicsFormat;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IntPtr environmentalRenderer;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool usedByMixer;

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x9FD378", Offset = "0x9FD378", VA = "0x9FD378")]
		public void SetEnvironment(Environment environment, PropagationSettings simulationSettings)
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x9FD504", Offset = "0x9FD504", VA = "0x9FD504")]
		public IntPtr GetEnvironmentalRenderer()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x9FD50C", Offset = "0x9FD50C", VA = "0x9FD50C")]
		public void SetUsedByMixer()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x9FD518", Offset = "0x9FD518", VA = "0x9FD518")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x9FD4EC", Offset = "0x9FD4EC", VA = "0x9FD4EC")]
		private RenderingSettings RenderingSettings()
		{
			return default(RenderingSettings);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x9FD590", Offset = "0x9FD590", VA = "0x9FD590")]
		public EnvironmentalRendererComponent()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class EnvironmentComponent : MonoBehaviour
	{
		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ComputeDevice computeDevice;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Scene scene;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Environment environment;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProbeManager probeManager;

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x9FD5E8", Offset = "0x9FD5E8", VA = "0x9FD5E8")]
		public static void ExportScene()
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x9FD7CC", Offset = "0x9FD7CC", VA = "0x9FD7CC")]
		public static void DumpScene()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x9FD950", Offset = "0x9FD950", VA = "0x9FD950")]
		public void Initialize(bool initializeRenderer)
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x9FDBEC", Offset = "0x9FDBEC", VA = "0x9FDBEC")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x9FDC34", Offset = "0x9FDC34", VA = "0x9FDC34")]
		private void Start()
		{
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x9FDC3C", Offset = "0x9FDC3C", VA = "0x9FDC3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x9FD76C", Offset = "0x9FD76C", VA = "0x9FD76C")]
		public static PropagationSettings SimulationSettings()
		{
			return default(PropagationSettings);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x9FDC40", Offset = "0x9FDC40", VA = "0x9FDC40")]
		public Scene Scene()
		{
			return null;
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x9FDC48", Offset = "0x9FDC48", VA = "0x9FDC48")]
		public ProbeManager ProbeManager()
		{
			return null;
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x9FDC50", Offset = "0x9FDC50", VA = "0x9FDC50")]
		public Environment Environment()
		{
			return null;
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x9FDC58", Offset = "0x9FDC58", VA = "0x9FDC58")]
		public EnvironmentComponent()
		{
		}
	}
	[Token(Token = "0x200014C")]
	[AddComponentMenu("Phonon/Phonon Geometry")]
	public class PhononGeometry : MonoBehaviour
	{
		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 10f)]
		public int TerrainSimplificationLevel;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool exportAllChildren;

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x9FDD48", Offset = "0x9FDD48", VA = "0x9FDD48")]
		public int GetNumVertices()
		{
			return default(int);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x9FE138", Offset = "0x9FE138", VA = "0x9FE138")]
		public int GetNumTriangles()
		{
			return default(int);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x9FE548", Offset = "0x9FE548", VA = "0x9FE548")]
		public void GetGeometry(Vector3[] vertices, int vertexOffset, Triangle[] triangles, int triangleOffset)
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x9FF220", Offset = "0x9FF220", VA = "0x9FF220")]
		public void GetMaterial(ref Material material)
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x9FE058", Offset = "0x9FE058", VA = "0x9FE058")]
		private int GetNumVerticesForMesh(MeshFilter mesh)
		{
			return default(int);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x9FEB48", Offset = "0x9FEB48", VA = "0x9FEB48")]
		private int GetVerticesForMesh(MeshFilter mesh, Vector3[] vertices, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x9FE080", Offset = "0x9FE080", VA = "0x9FE080")]
		private int GetNumVerticesForTerrain(Terrain terrain)
		{
			return default(int);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x9FED64", Offset = "0x9FED64", VA = "0x9FED64")]
		private int GetVerticesForTerrain(Terrain terrain, Vector3[] vertices, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x9FDF40", Offset = "0x9FDF40", VA = "0x9FDF40")]
		private int GetNumVerticesForGameObject(GameObject obj)
		{
			return default(int);
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x9FE83C", Offset = "0x9FE83C", VA = "0x9FE83C")]
		private int GetVerticesForGameObject(GameObject obj, Vector3[] vertices, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x9FE448", Offset = "0x9FE448", VA = "0x9FE448")]
		private int GetNumTrianglesForMesh(MeshFilter mesh)
		{
			return default(int);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x9FEC40", Offset = "0x9FEC40", VA = "0x9FEC40")]
		private int GetTrianglesForMesh(MeshFilter mesh, Triangle[] triangles, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x9FE494", Offset = "0x9FE494", VA = "0x9FE494")]
		private int GetNumTrianglesForTerrain(Terrain terrain)
		{
			return default(int);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x9FF080", Offset = "0x9FF080", VA = "0x9FF080")]
		private int GetTrianglesForTerrain(Terrain terrain, Triangle[] triangles, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x9FE330", Offset = "0x9FE330", VA = "0x9FE330")]
		private int GetNumTrianglesForGameObject(GameObject obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x9FE988", Offset = "0x9FE988", VA = "0x9FE988")]
		private int GetTrianglesForGameObject(GameObject obj, Triangle[] triangles, int offset, int localOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x9FEAD4", Offset = "0x9FEAD4", VA = "0x9FEAD4")]
		private void FixupTriangleIndices(Triangle[] triangles, int offset, int localOffset, int numTriangles, int indexOffset)
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x9FF2E4", Offset = "0x9FF2E4", VA = "0x9FF2E4")]
		public PhononGeometry()
		{
		}
	}
	[Token(Token = "0x200014D")]
	[AddComponentMenu("Phonon/Phonon Material")]
	public class PhononMaterial : MonoBehaviour
	{
		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhononMaterialPreset Preset;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhononMaterialValue Value;

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x9FF2EC", Offset = "0x9FF2EC", VA = "0x9FF2EC")]
		public PhononMaterial()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public enum PhononMaterialPreset
	{
		[Token(Token = "0x40005D9")]
		Generic,
		[Token(Token = "0x40005DA")]
		Brick,
		[Token(Token = "0x40005DB")]
		Concrete,
		[Token(Token = "0x40005DC")]
		Ceramic,
		[Token(Token = "0x40005DD")]
		Gravel,
		[Token(Token = "0x40005DE")]
		Carpet,
		[Token(Token = "0x40005DF")]
		Glass,
		[Token(Token = "0x40005E0")]
		Plaster,
		[Token(Token = "0x40005E1")]
		Wood,
		[Token(Token = "0x40005E2")]
		Metal,
		[Token(Token = "0x40005E3")]
		Rock,
		[Token(Token = "0x40005E4")]
		Custom
	}
	[Token(Token = "0x200014F")]
	public static class PhononMaterialPresetList
	{
		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PhononMaterialValue[] values;

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x9FF2F4", Offset = "0x9FF2F4", VA = "0x9FF2F4")]
		private static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x9FF344", Offset = "0x9FF344", VA = "0x9FF344")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x9FF878", Offset = "0x9FF878", VA = "0x9FF878")]
		public static PhononMaterialValue PresetValue(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x2000150")]
	public static class PhononMaterialSettings
	{
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject settingsObject;

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xA00918", Offset = "0xA00918", VA = "0xA00918")]
		public static GameObject GetObject()
		{
			return null;
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xA00A98", Offset = "0xA00A98", VA = "0xA00A98")]
		public static PhononMaterial GetDefaultMaterial()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000151")]
	public class PhononMaterialValue
	{
		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float LowFreqAbsorption;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float MidFreqAbsorption;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float HighFreqAbsorption;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float Scattering;

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xA00ADC", Offset = "0xA00ADC", VA = "0xA00ADC")]
		public PhononMaterialValue()
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xA00AE4", Offset = "0xA00AE4", VA = "0xA00AE4")]
		public PhononMaterialValue(float aLow, float aMid, float aHigh)
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xA00B2C", Offset = "0xA00B2C", VA = "0xA00B2C")]
		public PhononMaterialValue(float aLow, float aMid, float aHigh, float scattering)
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xA00B6C", Offset = "0xA00B6C", VA = "0xA00B6C")]
		public PhononMaterialValue(PhononMaterialValue other)
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xA00BA0", Offset = "0xA00BA0", VA = "0xA00BA0")]
		public void CopyFrom(PhononMaterialValue other)
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class PhononSettings : MonoBehaviour
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0xA00BBC", Offset = "0xA00BBC", VA = "0xA00BBC")]
		public static GlobalContext GetGlobalContext()
		{
			return default(GlobalContext);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xA00C10", Offset = "0xA00C10", VA = "0xA00C10")]
		public static RenderingSettings GetRenderingSettings()
		{
			return default(RenderingSettings);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xA00CE8", Offset = "0xA00CE8", VA = "0xA00CE8")]
		public static AudioFormat GetAudioConfiguration()
		{
			return default(AudioFormat);
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xA00EE8", Offset = "0xA00EE8", VA = "0xA00EE8")]
		public static SceneType GetRayTracerOption()
		{
			return default(SceneType);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xA00C5C", Offset = "0xA00C5C", VA = "0xA00C5C")]
		public static ConvolutionOption GetConvolutionOption()
		{
			return default(ConvolutionOption);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xA00F74", Offset = "0xA00F74", VA = "0xA00F74")]
		public static ComputeDeviceType GetComputeDeviceSettings(out int numComputeUnits, out bool useOpenCL)
		{
			return default(ComputeDeviceType);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xA01028", Offset = "0xA01028", VA = "0xA01028")]
		public PhononSettings()
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class ProbeManager
	{
		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr probeManager;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr probeBatch;

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xA01030", Offset = "0xA01030", VA = "0xA01030")]
		public IntPtr GetProbeManager()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xA01038", Offset = "0xA01038", VA = "0xA01038")]
		public Error Create()
		{
			return default(Error);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xA01304", Offset = "0xA01304", VA = "0xA01304")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xA013BC", Offset = "0xA013BC", VA = "0xA013BC")]
		public ProbeManager()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public class Scene
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr scene;

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xA01414", Offset = "0xA01414", VA = "0xA01414")]
		public IntPtr GetScene()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xA0141C", Offset = "0xA0141C", VA = "0xA0141C")]
		public Error Export(ComputeDevice computeDevice, PropagationSettings simulationSettings)
		{
			return default(Error);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xA021BC", Offset = "0xA021BC", VA = "0xA021BC")]
		public Error DumpToObj(ComputeDevice computeDevice, PropagationSettings simulationSettings)
		{
			return default(Error);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xA02B5C", Offset = "0xA02B5C", VA = "0xA02B5C")]
		public Error Create(ComputeDevice computeDevice, PropagationSettings simulationSettings)
		{
			return default(Error);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xA02C14", Offset = "0xA02C14", VA = "0xA02C14")]
		public void Destroy()
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xA01E08", Offset = "0xA01E08", VA = "0xA01E08")]
		private static string SceneFileName()
		{
			return null;
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xA02A64", Offset = "0xA02A64", VA = "0xA02A64")]
		private static string ObjFileName()
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xA02C84", Offset = "0xA02C84", VA = "0xA02C84")]
		public Scene()
		{
		}
	}
	[Token(Token = "0x2000155")]
	public enum BakeStatus
	{
		[Token(Token = "0x40005EF")]
		Ready,
		[Token(Token = "0x40005F0")]
		InProgress,
		[Token(Token = "0x40005F1")]
		Complete
	}
	[Token(Token = "0x2000156")]
	[AddComponentMenu("Phonon/Baked Reverb")]
	public class BakedReverb : MonoBehaviour
	{
		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int totalProbeBoxes;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int probeBoxBakingCurrently;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float probeBoxBakingProgress;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool bakeConvolution;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool bakeParameteric;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool cancelBake;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProbeBox[] probeBoxes;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BakeStatus bakeStatus;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EnvironmentComponent duringBakeEnvComponent;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ProbeBox[] duringBakeProbeBoxes;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Thread bakeThread;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PhononCore.BakeProgressCallback bakeCallback;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IntPtr bakeCallbackPointer;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GCHandle bakeCallbackHandle;

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xA02CDC", Offset = "0xA02CDC", VA = "0xA02CDC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xA02E90", Offset = "0xA02E90", VA = "0xA02E90")]
		public void BakeEffectThread()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xA03328", Offset = "0xA03328", VA = "0xA03328")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xA03604", Offset = "0xA03604", VA = "0xA03604")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xA036A8", Offset = "0xA036A8", VA = "0xA036A8")]
		private void AdvanceProgress(float bakeProgressFraction)
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xA036B0", Offset = "0xA036B0", VA = "0xA036B0")]
		public BakedReverb()
		{
		}
	}
	[Token(Token = "0x2000157")]
	[AddComponentMenu("Phonon/Baked Source")]
	public class BakedSource : MonoBehaviour
	{
		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int totalProbeBoxes;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int probeBoxBakingCurrently;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float probeBoxBakingProgress;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool useBakedStaticListener;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string bakedListenerIdentifier;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string uniqueIdentifier;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 1024f)]
		public float bakingRadius;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool bakeConvolution;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool bakeParameteric;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		public bool cancelBake;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ProbeBox[] probeBoxes;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BakeStatus bakeStatus;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EnvironmentComponent duringBakeEnvComponent;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ProbeBox[] duringBakeProbeBoxes;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Sphere duringBakeSphere;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Thread bakeThread;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PhononCore.BakeProgressCallback bakeCallback;

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xA036C0", Offset = "0xA036C0", VA = "0xA036C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xA038C4", Offset = "0xA038C4", VA = "0xA038C4")]
		public void BakeEffectThread()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xA03B58", Offset = "0xA03B58", VA = "0xA03B58")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xA03E70", Offset = "0xA03E70", VA = "0xA03E70")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xA03F14", Offset = "0xA03F14", VA = "0xA03F14")]
		private void AdvanceProgress(float bakeProgressFraction)
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xA03F1C", Offset = "0xA03F1C", VA = "0xA03F1C")]
		public BakedSource()
		{
		}
	}
	[Token(Token = "0x2000158")]
	[AddComponentMenu("Phonon/Baked Static Listener")]
	public class BakedStaticListener : MonoBehaviour
	{
		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int totalProbeBoxes;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int probeBoxBakingCurrently;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float probeBoxBakingProgress;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string bakedListenerPrefix;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string uniqueIdentifier;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 1024f)]
		public float bakingRadius;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool bakeConvolution;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool bakeParameteric;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		public bool useAllProbeBoxes;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		public bool cancelBake;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ProbeBox[] probeBoxes;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BakeStatus bakeStatus;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EnvironmentComponent duringBakeEnvComponent;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ProbeBox[] duringBakeProbeBoxes;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Sphere duringBakeSphere;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Thread bakeThread;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PhononCore.BakeProgressCallback bakeCallback;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private IntPtr bakeCallbackPointer;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GCHandle bakeCallbackHandle;

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xA03F34", Offset = "0xA03F34", VA = "0xA03F34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xA04138", Offset = "0xA04138", VA = "0xA04138")]
		public void BakeEffectThread()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xA043F0", Offset = "0xA043F0", VA = "0xA043F0")]
		public void BeginBake()
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xA04708", Offset = "0xA04708", VA = "0xA04708")]
		public void EndBake()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xA047AC", Offset = "0xA047AC", VA = "0xA047AC")]
		private void AdvanceProgress(float bakeProgressFraction)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xA047B4", Offset = "0xA047B4", VA = "0xA047B4")]
		public BakedStaticListener()
		{
		}
	}
	[Token(Token = "0x2000159")]
	[AddComponentMenu("Phonon/Custom Phonon Settings")]
	public class CustomPhononSettings : MonoBehaviour
	{
		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneType rayTracerOption;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ConvolutionOption convolutionOption;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useOpenCL;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ComputeDeviceType computeDeviceOption;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 8f)]
		public int numComputeUnits;

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xA04814", Offset = "0xA04814", VA = "0xA04814")]
		public CustomPhononSettings()
		{
		}
	}
	[Token(Token = "0x200015A")]
	[AddComponentMenu("Phonon/Custom Speaker Layout")]
	public class CustomSpeakerLayout : MonoBehaviour
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3[] speakerPositions;

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xA04828", Offset = "0xA04828", VA = "0xA04828")]
		public CustomSpeakerLayout()
		{
		}
	}
	[Token(Token = "0x200015B")]
	[AddComponentMenu("Phonon/Phonon Effect")]
	public class PhononEffect : MonoBehaviour
	{
		[Token(Token = "0x200015C")]
		[CompilerGenerated]
		private sealed class <EndOfFrameUpdate>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhononEffect <>4__this;

			[Token(Token = "0x17000092")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006BF")]
				[Address(RVA = "0xA05940", Offset = "0xA05940", VA = "0xA05940", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000093")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006C1")]
				[Address(RVA = "0xA05988", Offset = "0xA05988", VA = "0xA05988", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006BC")]
			[Address(RVA = "0xA05028", Offset = "0xA05028", VA = "0xA05028")]
			[DebuggerHidden]
			public <EndOfFrameUpdate>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60006BD")]
			[Address(RVA = "0xA055B8", Offset = "0xA055B8", VA = "0xA055B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006BE")]
			[Address(RVA = "0xA055BC", Offset = "0xA055BC", VA = "0xA055BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006C0")]
			[Address(RVA = "0xA05948", Offset = "0xA05948", VA = "0xA05948", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool directBinauralEnabled;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HRTFInterpolation hrtfInterpolation;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OcclusionOption directOcclusionOption;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.1f, 32f)]
		public float partialOcclusionRadius;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool physicsBasedAttenuation;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float directMixFraction;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool enableReflections;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SimulationType simulationMode;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 10f)]
		public float indirectMixFraction;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool indirectBinauralEnabled;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioEngine audioEngine;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioListener listener;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PhononMixer phononMixer;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IntPtr binauralRenderer;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IntPtr directBinauralEffect;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IntPtr directCustomPanningEffect;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IntPtr propagationAmbisonicsEffect;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IntPtr propagationPanningEffect;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private IntPtr propagationBinauralEffect;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AttenuationInterpolator directAttnInterlop;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int directAttnInteropFrames;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioFormat inputFormat;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioFormat outputFormat;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private AudioFormat ambisonicsFormat;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private DirectSoundPath directSoundPath;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 sourcePosition;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 listenerPosition;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 listenerAhead;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 listenerUp;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool fourierMixingEnabled;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float[] wetData;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private IntPtr[] wetDataMarshal;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private IntPtr[] wetAmbisonicsDataMarshal;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Mutex mutex;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private bool initialized;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		private bool destroying;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private EnvironmentalRendererComponent environmentalRenderer;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private EnvironmentComponent environment;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool errorLogged;

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xA04830", Offset = "0xA04830", VA = "0xA04830")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xA04E74", Offset = "0xA04E74", VA = "0xA04E74")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xA04E0C", Offset = "0xA04E0C", VA = "0xA04E0C")]
		[IteratorStateMachine(typeof(<EndOfFrameUpdate>d__2))]
		private IEnumerator EndOfFrameUpdate()
		{
			return null;
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xA05050", Offset = "0xA05050", VA = "0xA05050")]
		private void UpdateRelativeDirection()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xA05210", Offset = "0xA05210", VA = "0xA05210")]
		public void UpdateEffectName(string effectName)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xA05294", Offset = "0xA05294", VA = "0xA05294")]
		private void OnAudioFilterRead(float[] data, int channels)
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xA054C8", Offset = "0xA054C8", VA = "0xA054C8")]
		public PhononEffect()
		{
		}
	}
	[Token(Token = "0x200015D")]
	[AddComponentMenu("Phonon/Phonon Mixer")]
	public class PhononMixer : MonoBehaviour
	{
		[Token(Token = "0x200015E")]
		[CompilerGenerated]
		private sealed class <EndOfFrameUpdate>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PhononMixer <>4__this;

			[Token(Token = "0x17000094")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006CA")]
				[Address(RVA = "0xA062CC", Offset = "0xA062CC", VA = "0xA062CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000095")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006CC")]
				[Address(RVA = "0xA06314", Offset = "0xA06314", VA = "0xA06314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006C7")]
			[Address(RVA = "0xA05F64", Offset = "0xA05F64", VA = "0xA05F64")]
			[DebuggerHidden]
			public <EndOfFrameUpdate>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xA0612C", Offset = "0xA0612C", VA = "0xA0612C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006C9")]
			[Address(RVA = "0xA06130", Offset = "0xA06130", VA = "0xA06130", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006CB")]
			[Address(RVA = "0xA062D4", Offset = "0xA062D4", VA = "0xA062D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool processMixedAudio;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool indirectBinauralEnabled;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private AudioEngine audioEngine;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IntPtr environmentRenderer;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IntPtr propagationPanningEffect;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntPtr propagationBinauralEffect;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IntPtr binauralRenderer;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private EnvironmentalRendererComponent environmentalRendererComponent;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioFormat outputFormat;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioFormat ambisonicsFormat;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 listenerPosition;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 listenerAhead;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 listenerUp;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float[] wetData;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private IntPtr[] wetDataMarshal;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private IntPtr[] wetAmbisonicsDataMarshal;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Mutex mutex;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool initialized;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool destroying;

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xA05990", Offset = "0xA05990", VA = "0xA05990")]
		private void Start()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xA05DC8", Offset = "0xA05DC8", VA = "0xA05DC8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xA05D60", Offset = "0xA05D60", VA = "0xA05D60")]
		[IteratorStateMachine(typeof(<EndOfFrameUpdate>d__2))]
		private IEnumerator EndOfFrameUpdate()
		{
			return null;
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xA05F8C", Offset = "0xA05F8C", VA = "0xA05F8C")]
		private void OnAudioFilterRead(float[] data, int channels)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xA06094", Offset = "0xA06094", VA = "0xA06094")]
		public PhononMixer()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public static class PhononSimulationSettings
	{
		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameObject settingsObject;

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xA0631C", Offset = "0xA0631C", VA = "0xA0631C")]
		public static GameObject GetObject()
		{
			return null;
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xA065BC", Offset = "0xA065BC", VA = "0xA065BC")]
		public static SimulationSettings GetSimulationSettings()
		{
			return null;
		}
	}
	[Token(Token = "0x2000160")]
	[AddComponentMenu("Phonon/Probe Box")]
	public class ProbeBox : MonoBehaviour
	{
		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ProbePlacementStrategy placementStrategy;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0.1f, 50f)]
		public float horizontalSpacing;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 20f)]
		public float heightAboveFloor;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(1f, 1024f)]
		public int maxNumTriangles;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(1f, 10f)]
		public int maxOctreeDepth;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte[] probeBoxData;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] probeSpherePoints;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float[] probeSphereRadii;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> probeDataName;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<int> probeDataNameSizes;

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xA06600", Offset = "0xA06600", VA = "0xA06600")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xA067F0", Offset = "0xA067F0", VA = "0xA067F0")]
		public void GenerateProbes()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xA0703C", Offset = "0xA0703C", VA = "0xA0703C")]
		public void DeleteBakedDataByName(string name)
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xA0312C", Offset = "0xA0312C", VA = "0xA0312C")]
		public void UpdateProbeDataMapping(string name, int size)
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xA06FB4", Offset = "0xA06FB4", VA = "0xA06FB4")]
		private void ClearProbeDataMapping()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xA071E8", Offset = "0xA071E8", VA = "0xA071E8")]
		public ProbeBox()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class SimulationSettings : MonoBehaviour
	{
		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimulationSettingsPreset Preset;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SimulationSettingsValue Value;

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xA072C0", Offset = "0xA072C0", VA = "0xA072C0")]
		public SimulationSettings()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public enum SimulationSettingsPreset
	{
		[Token(Token = "0x400067A")]
		Low,
		[Token(Token = "0x400067B")]
		Medium,
		[Token(Token = "0x400067C")]
		High,
		[Token(Token = "0x400067D")]
		Custom
	}
	[Token(Token = "0x2000163")]
	public static class SimulationSettingsPresetList
	{
		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SimulationSettingsValue[] values;

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xA072C8", Offset = "0xA072C8", VA = "0xA072C8")]
		private static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xA07318", Offset = "0xA07318", VA = "0xA07318")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xA064F0", Offset = "0xA064F0", VA = "0xA064F0")]
		public static SimulationSettingsValue PresetValue(int index)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000164")]
	public class SimulationSettingsValue
	{
		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(512f, 16384f)]
		public int RealtimeRays;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(128f, 4096f)]
		public int RealtimeSecondaryRays;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(1f, 32f)]
		public int RealtimeBounces;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(8192f, 65536f)]
		public int BakeRays;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1024f, 16384f)]
		public int BakeSecondaryRays;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(16f, 256f)]
		public int BakeBounces;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0.1f, 5f)]
		public float Duration;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 4f)]
		public int AmbisonicsOrder;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(1f, 128f)]
		public int MaxSources;

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xA064E0", Offset = "0xA064E0", VA = "0xA064E0")]
		public SimulationSettingsValue()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xA07568", Offset = "0xA07568", VA = "0xA07568")]
		public SimulationSettingsValue(int realtimeRays, int realtimeSecondaryRays, int realtimeBounces, int bakeRays, int bakeSecondaryRays, int bakeBounces, float duration, int ambisonicsOrder, int maxSources)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xA075E8", Offset = "0xA075E8", VA = "0xA075E8")]
		public SimulationSettingsValue(SimulationSettingsValue other)
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xA06590", Offset = "0xA06590", VA = "0xA06590")]
		public void CopyFrom(SimulationSettingsValue other)
		{
		}
	}
}
namespace UnityEngine.PostProcessing
{
	[Token(Token = "0x2000165")]
	public sealed class GetSetAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string name;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool dirty;

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xA0761C", Offset = "0xA0761C", VA = "0xA0761C")]
		public GetSetAttribute(string name)
		{
		}
	}
	[Token(Token = "0x2000166")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float min;

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xA07644", Offset = "0xA07644", VA = "0xA07644")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x2000167")]
	public sealed class TrackballAttribute : PropertyAttribute
	{
		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string method;

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xA0766C", Offset = "0xA0766C", VA = "0xA0766C")]
		public TrackballAttribute(string method)
		{
		}
	}
	[Token(Token = "0x2000168")]
	public sealed class TrackballGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xA07694", Offset = "0xA07694", VA = "0xA07694")]
		public TrackballGroupAttribute()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public sealed class AmbientOcclusionComponent : PostProcessingComponentCommandBuffer<AmbientOcclusionModel>
	{
		[Token(Token = "0x200016A")]
		private static class Uniforms
		{
			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Intensity;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Radius;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Downsample;

			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _SampleCount;

			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _OcclusionTexture1;

			[Token(Token = "0x4000694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _OcclusionTexture2;

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _OcclusionTexture;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4000697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x200016B")]
		private enum OcclusionSource
		{
			[Token(Token = "0x4000699")]
			DepthTexture,
			[Token(Token = "0x400069A")]
			DepthNormalsTexture,
			[Token(Token = "0x400069B")]
			GBuffer
		}

		[Token(Token = "0x400068C")]
		private const string k_BlitShaderString = "Hidden/Post FX/Blit";

		[Token(Token = "0x400068D")]
		private const string k_ShaderString = "Hidden/Post FX/Ambient Occlusion";

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTargetIdentifier[] m_MRT;

		[Token(Token = "0x17000096")]
		private OcclusionSource occlusionSource
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0xA0769C", Offset = "0xA0769C", VA = "0xA0769C")]
			get
			{
				return default(OcclusionSource);
			}
		}

		[Token(Token = "0x17000097")]
		private bool ambientOnlySupported
		{
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xA07740", Offset = "0xA07740", VA = "0xA07740")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000098")]
		public override bool active
		{
			[Token(Token = "0x60006E3")]
			[Address(RVA = "0xA077D0", Offset = "0xA077D0", VA = "0xA077D0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xA07844", Offset = "0xA07844", VA = "0xA07844", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xA0787C", Offset = "0xA0787C", VA = "0xA0787C", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xA078BC", Offset = "0xA078BC", VA = "0xA078BC", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xA07914", Offset = "0xA07914", VA = "0xA07914", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xA081E8", Offset = "0xA081E8", VA = "0xA081E8")]
		public AmbientOcclusionComponent()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public sealed class BloomComponent : PostProcessingComponentRenderTexture<BloomModel>
	{
		[Token(Token = "0x200016D")]
		private static class Uniforms
		{
			[Token(Token = "0x400069F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x40006A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Threshold;

			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Curve;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _PrefilterOffs;

			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleScale;

			[Token(Token = "0x40006A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _BaseTex;

			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _BloomTex;

			[Token(Token = "0x40006A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Bloom_Settings;

			[Token(Token = "0x40006A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _Bloom_DirtTex;

			[Token(Token = "0x40006A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Bloom_DirtIntensity;
		}

		[Token(Token = "0x400069C")]
		private const int k_MaxPyramidBlurLevel = 16;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTexture[] m_BlurBuffer1;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly RenderTexture[] m_BlurBuffer2;

		[Token(Token = "0x17000099")]
		public override bool active
		{
			[Token(Token = "0x60006EA")]
			[Address(RVA = "0xA084E8", Offset = "0xA084E8", VA = "0xA084E8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xA0855C", Offset = "0xA0855C", VA = "0xA0855C")]
		public void Prepare(RenderTexture source, Material uberMaterial, Texture autoExposure)
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xA08E94", Offset = "0xA08E94", VA = "0xA08E94")]
		public BloomComponent()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public sealed class BuiltinDebugViewsComponent : PostProcessingComponentCommandBuffer<BuiltinDebugViewsModel>
	{
		[Token(Token = "0x200016F")]
		private static class Uniforms
		{
			[Token(Token = "0x40006AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthScale;

			[Token(Token = "0x40006AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _TempRT;

			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Opacity;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MainTex;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT2;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Amplitude;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Scale;
		}

		[Token(Token = "0x2000170")]
		private enum Pass
		{
			[Token(Token = "0x40006B3")]
			Depth,
			[Token(Token = "0x40006B4")]
			Normals,
			[Token(Token = "0x40006B5")]
			MovecOpacity,
			[Token(Token = "0x40006B6")]
			MovecImaging,
			[Token(Token = "0x40006B7")]
			MovecArrows
		}

		[Token(Token = "0x2000171")]
		private class ArrowArray
		{
			[Token(Token = "0x1700009B")]
			public Mesh mesh
			{
				[Token(Token = "0x60006FA")]
				[Address(RVA = "0xA0A27C", Offset = "0xA0A27C", VA = "0xA0A27C")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60006FB")]
				[Address(RVA = "0xA0A284", Offset = "0xA0A284", VA = "0xA0A284")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009C")]
			public int columnCount
			{
				[Token(Token = "0x60006FC")]
				[Address(RVA = "0xA0A28C", Offset = "0xA0A28C", VA = "0xA0A28C")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60006FD")]
				[Address(RVA = "0xA0A294", Offset = "0xA0A294", VA = "0xA0A294")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700009D")]
			public int rowCount
			{
				[Token(Token = "0x60006FE")]
				[Address(RVA = "0xA0A29C", Offset = "0xA0A29C", VA = "0xA0A29C")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60006FF")]
				[Address(RVA = "0xA0A2A4", Offset = "0xA0A2A4", VA = "0xA0A2A4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000700")]
			[Address(RVA = "0xA09C54", Offset = "0xA09C54", VA = "0xA09C54")]
			public void BuildMesh(int columns, int rows)
			{
			}

			[Token(Token = "0x6000701")]
			[Address(RVA = "0xA09C34", Offset = "0xA09C34", VA = "0xA09C34")]
			public void Release()
			{
			}

			[Token(Token = "0x6000702")]
			[Address(RVA = "0xA09C2C", Offset = "0xA09C2C", VA = "0xA09C2C")]
			public ArrowArray()
			{
			}
		}

		[Token(Token = "0x40006A9")]
		private const string k_ShaderString = "Hidden/Post FX/Builtin Debug Views";

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArrowArray m_Arrows;

		[Token(Token = "0x1700009A")]
		public override bool active
		{
			[Token(Token = "0x60006EE")]
			[Address(RVA = "0xA0912C", Offset = "0xA0912C", VA = "0xA0912C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xA091B8", Offset = "0xA091B8", VA = "0xA091B8", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xA09220", Offset = "0xA09220", VA = "0xA09220", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xA09278", Offset = "0xA09278", VA = "0xA09278", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xA092B8", Offset = "0xA092B8", VA = "0xA092B8", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xA093D8", Offset = "0xA093D8", VA = "0xA093D8")]
		private void DepthPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xA094F0", Offset = "0xA094F0", VA = "0xA094F0")]
		private void DepthNormalsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xA095B4", Offset = "0xA095B4", VA = "0xA095B4")]
		private void MotionVectorsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xA09B3C", Offset = "0xA09B3C", VA = "0xA09B3C")]
		private void PrepareArrows()
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xA0A078", Offset = "0xA0A078", VA = "0xA0A078", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xA0A0AC", Offset = "0xA0A0AC", VA = "0xA0A0AC")]
		public BuiltinDebugViewsComponent()
		{
		}
	}
	[Token(Token = "0x2000172")]
	public sealed class ChromaticAberrationComponent : PostProcessingComponentRenderTexture<ChromaticAberrationModel>
	{
		[Token(Token = "0x2000173")]
		private static class Uniforms
		{
			[Token(Token = "0x40006BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _ChromaticAberration_Amount;

			[Token(Token = "0x40006BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ChromaticAberration_Spectrum;
		}

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_SpectrumLut;

		[Token(Token = "0x1700009E")]
		public override bool active
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0xA0A2AC", Offset = "0xA0A2AC", VA = "0xA0A2AC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xA0A320", Offset = "0xA0A320", VA = "0xA0A320", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xA0A340", Offset = "0xA0A340", VA = "0xA0A340", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xA0A5BC", Offset = "0xA0A5BC", VA = "0xA0A5BC")]
		public ChromaticAberrationComponent()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public sealed class ColorGradingComponent : PostProcessingComponentRenderTexture<ColorGradingModel>
	{
		[Token(Token = "0x2000175")]
		private static class Uniforms
		{
			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _LutParams;

			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _NeutralTonemapperParams1;

			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _NeutralTonemapperParams2;

			[Token(Token = "0x40006C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _HueShift;

			[Token(Token = "0x40006C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Saturation;

			[Token(Token = "0x40006C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Contrast;

			[Token(Token = "0x40006C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Balance;

			[Token(Token = "0x40006C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Lift;

			[Token(Token = "0x40006CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _InvGamma;

			[Token(Token = "0x40006CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Gain;

			[Token(Token = "0x40006CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _Slope;

			[Token(Token = "0x40006CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _Power;

			[Token(Token = "0x40006CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _Offset;

			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _ChannelMixerRed;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _ChannelMixerGreen;

			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _ChannelMixerBlue;

			[Token(Token = "0x40006D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _Curves;

			[Token(Token = "0x40006D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _LogLut;

			[Token(Token = "0x40006D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _LogLut_Params;

			[Token(Token = "0x40006D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ExposureEV;
		}

		[Token(Token = "0x40006BE")]
		private const int k_InternalLogLutSize = 32;

		[Token(Token = "0x40006BF")]
		private const int k_CurvePrecision = 128;

		[Token(Token = "0x40006C0")]
		private const float k_CurveStep = 1f / 128f;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_GradingCurves;

		[Token(Token = "0x1700009F")]
		public override bool active
		{
			[Token(Token = "0x6000708")]
			[Address(RVA = "0xA0A6A0", Offset = "0xA0A6A0", VA = "0xA0A6A0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xA0A708", Offset = "0xA0A708", VA = "0xA0A708")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xA0A734", Offset = "0xA0A734", VA = "0xA0A734")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xA0A7C4", Offset = "0xA0A7C4", VA = "0xA0A7C4")]
		private Vector3 CalculateColorBalance(float temperature, float tint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xA0A8C8", Offset = "0xA0A8C8", VA = "0xA0A8C8")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xA0A994", Offset = "0xA0A994", VA = "0xA0A994")]
		private static Vector3 ClampVector(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xA0A9C8", Offset = "0xA0A9C8", VA = "0xA0A9C8")]
		public static Vector3 GetLiftValue(Color lift)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xA0AA4C", Offset = "0xA0AA4C", VA = "0xA0AA4C")]
		public static Vector3 GetGammaValue(Color gamma)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xA0AB30", Offset = "0xA0AB30", VA = "0xA0AB30")]
		public static Vector3 GetGainValue(Color gain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xA0ABE8", Offset = "0xA0ABE8", VA = "0xA0ABE8")]
		public static void CalculateLiftGammaGain(Color lift, Color gamma, Color gain, out Vector3 outLift, out Vector3 outGamma, out Vector3 outGain)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xA0AC84", Offset = "0xA0AC84", VA = "0xA0AC84")]
		public static Vector3 GetSlopeValue(Color slope)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xA0AD20", Offset = "0xA0AD20", VA = "0xA0AD20")]
		public static Vector3 GetPowerValue(Color power)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xA0ADD8", Offset = "0xA0ADD8", VA = "0xA0ADD8")]
		public static Vector3 GetOffsetValue(Color offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xA0AE6C", Offset = "0xA0AE6C", VA = "0xA0AE6C")]
		public static void CalculateSlopePowerOffset(Color slope, Color power, Color offset, out Vector3 outSlope, out Vector3 outPower, out Vector3 outOffset)
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xA0AF08", Offset = "0xA0AF08", VA = "0xA0AF08")]
		private Texture2D GetCurveTexture()
		{
			return null;
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xA0B20C", Offset = "0xA0B20C", VA = "0xA0B20C")]
		private bool IsLogLutValid(RenderTexture lut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xA0B2A8", Offset = "0xA0B2A8", VA = "0xA0B2A8")]
		private void GenerateLut()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xA0BA00", Offset = "0xA0BA00", VA = "0xA0BA00", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xA0BBE0", Offset = "0xA0BBE0", VA = "0xA0BBE0")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xA0BD00", Offset = "0xA0BD00", VA = "0xA0BD00", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xA0BD6C", Offset = "0xA0BD6C", VA = "0xA0BD6C")]
		public ColorGradingComponent()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public sealed class DepthOfFieldComponent : PostProcessingComponentRenderTexture<DepthOfFieldModel>
	{
		[Token(Token = "0x2000177")]
		private static class Uniforms
		{
			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthOfFieldTex;

			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Distance;

			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _LensCoeff;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MaxCoC;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _RcpMaxCoC;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _RcpAspect;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MainTex;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _HistoryCoC;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _HistoryWeight;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _DepthOfFieldParams;
		}

		[Token(Token = "0x40006D6")]
		private const string k_ShaderString = "Hidden/Post FX/Depth Of Field";

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_CoCHistory;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderBuffer[] m_MRT;

		[Token(Token = "0x40006D9")]
		private const float k_FilmHeight = 0.024f;

		[Token(Token = "0x170000A0")]
		public override bool active
		{
			[Token(Token = "0x600071E")]
			[Address(RVA = "0xA0C180", Offset = "0xA0C180", VA = "0xA0C180", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xA0C208", Offset = "0xA0C208", VA = "0xA0C208", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xA0C210", Offset = "0xA0C210", VA = "0xA0C210")]
		private float CalculateFocalLength()
		{
			return default(float);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xA0C2AC", Offset = "0xA0C2AC", VA = "0xA0C2AC")]
		private float CalculateMaxCoCRadius(int screenHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xA0C320", Offset = "0xA0C320", VA = "0xA0C320")]
		public void Prepare(RenderTexture source, Material uberMaterial, bool antialiasCoC)
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xA0CA58", Offset = "0xA0CA58", VA = "0xA0CA58", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xA0CAD0", Offset = "0xA0CAD0", VA = "0xA0CAD0")]
		public DepthOfFieldComponent()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public sealed class DitheringComponent : PostProcessingComponentRenderTexture<DitheringModel>
	{
		[Token(Token = "0x2000179")]
		private static class Uniforms
		{
			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DitheringTex;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _DitheringCoords;
		}

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D[] noiseTextures;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int textureIndex;

		[Token(Token = "0x40006E6")]
		private const int k_TextureCount = 64;

		[Token(Token = "0x170000A1")]
		public override bool active
		{
			[Token(Token = "0x6000726")]
			[Address(RVA = "0xA0CD58", Offset = "0xA0CD58", VA = "0xA0CD58", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xA0CDC0", Offset = "0xA0CDC0", VA = "0xA0CDC0", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xA0CDC8", Offset = "0xA0CDC8", VA = "0xA0CDC8")]
		private void LoadNoiseTextures()
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xA0CF14", Offset = "0xA0CF14", VA = "0xA0CF14", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xA0D0B4", Offset = "0xA0D0B4", VA = "0xA0D0B4")]
		public DitheringComponent()
		{
		}
	}
	[Token(Token = "0x200017A")]
	public sealed class EyeAdaptationComponent : PostProcessingComponentRenderTexture<EyeAdaptationModel>
	{
		[Token(Token = "0x200017B")]
		private static class Uniforms
		{
			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Params;

			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Speed;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _ScaleOffsetRes;

			[Token(Token = "0x40006F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _ExposureCompensation;

			[Token(Token = "0x40006F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _DebugWidth;
		}

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComputeShader m_EyeCompute;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComputeBuffer m_HistogramBuffer;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RenderTexture[] m_AutoExposurePool;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_AutoExposurePingPing;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_CurrentAutoExposure;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_DebugHistogram;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint[] s_EmptyHistogramBuffer;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_FirstFrame;

		[Token(Token = "0x40006F1")]
		private const int k_HistogramBins = 64;

		[Token(Token = "0x40006F2")]
		private const int k_HistogramThreadX = 16;

		[Token(Token = "0x40006F3")]
		private const int k_HistogramThreadY = 16;

		[Token(Token = "0x170000A2")]
		public override bool active
		{
			[Token(Token = "0x600072C")]
			[Address(RVA = "0xA0D198", Offset = "0xA0D198", VA = "0xA0D198", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xA0D20C", Offset = "0xA0D20C", VA = "0xA0D20C")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xA0D218", Offset = "0xA0D218", VA = "0xA0D218", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xA0D224", Offset = "0xA0D224", VA = "0xA0D224", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xA0D308", Offset = "0xA0D308", VA = "0xA0D308")]
		private Vector4 GetHistogramScaleOffsetRes()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xA0D3C8", Offset = "0xA0D3C8", VA = "0xA0D3C8")]
		public Texture Prepare(RenderTexture source, Material uberMaterial)
		{
			return null;
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xA0DDDC", Offset = "0xA0DDDC", VA = "0xA0DDDC")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xA0DF44", Offset = "0xA0DF44", VA = "0xA0DF44")]
		public EyeAdaptationComponent()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public sealed class FogComponent : PostProcessingComponentCommandBuffer<FogModel>
	{
		[Token(Token = "0x200017D")]
		private static class Uniforms
		{
			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _FogColor;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Density;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Start;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _End;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x40006FA")]
		private const string k_ShaderString = "Hidden/Post FX/Fog";

		[Token(Token = "0x170000A3")]
		public override bool active
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0xA0E11C", Offset = "0xA0E11C", VA = "0xA0E11C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xA0E1A4", Offset = "0xA0E1A4", VA = "0xA0E1A4", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0xA0E1E4", Offset = "0xA0E1E4", VA = "0xA0E1E4", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xA0E1EC", Offset = "0xA0E1EC", VA = "0xA0E1EC", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xA0E1F4", Offset = "0xA0E1F4", VA = "0xA0E1F4", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xA0E5FC", Offset = "0xA0E5FC", VA = "0xA0E5FC")]
		public FogComponent()
		{
		}
	}
	[Token(Token = "0x200017E")]
	public sealed class FxaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x200017F")]
		private static class Uniforms
		{
			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _QualitySettings;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ConsoleSettings;
		}

		[Token(Token = "0x170000A4")]
		public override bool active
		{
			[Token(Token = "0x600073C")]
			[Address(RVA = "0xA0E76C", Offset = "0xA0E76C", VA = "0xA0E76C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xA0E7DC", Offset = "0xA0E7DC", VA = "0xA0E7DC")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xA0E9DC", Offset = "0xA0E9DC", VA = "0xA0E9DC")]
		public FxaaComponent()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public sealed class GrainComponent : PostProcessingComponentRenderTexture<GrainModel>
	{
		[Token(Token = "0x2000181")]
		private static class Uniforms
		{
			[Token(Token = "0x4000703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Grain_Params1;

			[Token(Token = "0x4000704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Grain_Params2;

			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _GrainTex;

			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Phase;
		}

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_GrainLookupRT;

		[Token(Token = "0x170000A5")]
		public override bool active
		{
			[Token(Token = "0x6000740")]
			[Address(RVA = "0xA0EAC0", Offset = "0xA0EAC0", VA = "0xA0EAC0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xA0EB44", Offset = "0xA0EB44", VA = "0xA0EB44", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xA0EB64", Offset = "0xA0EB64", VA = "0xA0EB64", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xA0EEE8", Offset = "0xA0EEE8", VA = "0xA0EEE8")]
		public GrainComponent()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public sealed class MotionBlurComponent : PostProcessingComponentCommandBuffer<MotionBlurModel>
	{
		[Token(Token = "0x2000183")]
		private static class Uniforms
		{
			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _VelocityScale;

			[Token(Token = "0x400070B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _MaxBlurRadius;

			[Token(Token = "0x400070C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _RcpMaxBlurRadius;

			[Token(Token = "0x400070D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _VelocityTex;

			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MainTex;

			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Tile2RT;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Tile4RT;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Tile8RT;

			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TileMaxOffs;

			[Token(Token = "0x4000713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TileMaxLoop;

			[Token(Token = "0x4000714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _TileVRT;

			[Token(Token = "0x4000715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _NeighborMaxTex;

			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _LoopCount;

			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _TempRT;

			[Token(Token = "0x4000718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _History1LumaTex;

			[Token(Token = "0x4000719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _History2LumaTex;

			[Token(Token = "0x400071A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _History3LumaTex;

			[Token(Token = "0x400071B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _History4LumaTex;

			[Token(Token = "0x400071C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _History1ChromaTex;

			[Token(Token = "0x400071D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _History2ChromaTex;

			[Token(Token = "0x400071E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _History3ChromaTex;

			[Token(Token = "0x400071F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _History4ChromaTex;

			[Token(Token = "0x4000720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _History1Weight;

			[Token(Token = "0x4000721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _History2Weight;

			[Token(Token = "0x4000722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _History3Weight;

			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _History4Weight;
		}

		[Token(Token = "0x2000184")]
		private enum Pass
		{
			[Token(Token = "0x4000725")]
			VelocitySetup,
			[Token(Token = "0x4000726")]
			TileMax1,
			[Token(Token = "0x4000727")]
			TileMax2,
			[Token(Token = "0x4000728")]
			TileMaxV,
			[Token(Token = "0x4000729")]
			NeighborMax,
			[Token(Token = "0x400072A")]
			Reconstruction,
			[Token(Token = "0x400072B")]
			FrameCompression,
			[Token(Token = "0x400072C")]
			FrameBlendingChroma,
			[Token(Token = "0x400072D")]
			FrameBlendingRaw
		}

		[Token(Token = "0x2000185")]
		public class ReconstructionFilter
		{
			[Token(Token = "0x400072E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private RenderTextureFormat m_VectorRTFormat;

			[Token(Token = "0x400072F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_PackedRTFormat;

			[Token(Token = "0x6000751")]
			[Address(RVA = "0xA0F094", Offset = "0xA0F094", VA = "0xA0F094")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x6000752")]
			[Address(RVA = "0xA10E44", Offset = "0xA10E44", VA = "0xA10E44")]
			private void CheckTextureFormatSupport()
			{
			}

			[Token(Token = "0x6000753")]
			[Address(RVA = "0xA0F260", Offset = "0xA0F260", VA = "0xA0F260")]
			public bool IsSupported()
			{
				return default(bool);
			}

			[Token(Token = "0x6000754")]
			[Address(RVA = "0xA0F9FC", Offset = "0xA0F9FC", VA = "0xA0F9FC")]
			public void ProcessImage(PostProcessingContext context, CommandBuffer cb, ref MotionBlurModel.Settings settings, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}
		}

		[Token(Token = "0x2000186")]
		public class FrameBlendingFilter
		{
			[Token(Token = "0x2000187")]
			private struct Frame
			{
				[Token(Token = "0x4000734")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x4000735")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x4000736")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private float m_Time;

				[Token(Token = "0x4000737")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private RenderTargetIdentifier[] m_MRT;

				[Token(Token = "0x600075C")]
				[Address(RVA = "0xA114A0", Offset = "0xA114A0", VA = "0xA114A0")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x600075D")]
				[Address(RVA = "0xA10F68", Offset = "0xA10F68", VA = "0xA10F68")]
				public void Release()
				{
				}

				[Token(Token = "0x600075E")]
				[Address(RVA = "0xA11014", Offset = "0xA11014", VA = "0xA11014")]
				public void MakeRecord(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
				{
				}

				[Token(Token = "0x600075F")]
				[Address(RVA = "0xA112DC", Offset = "0xA112DC", VA = "0xA112DC")]
				public void MakeRecordRaw(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool m_UseCompression;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_RawTextureFormat;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Frame[] m_FrameList;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_LastFrameCount;

			[Token(Token = "0x6000755")]
			[Address(RVA = "0xA0F134", Offset = "0xA0F134", VA = "0xA0F134")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6000756")]
			[Address(RVA = "0xA0F2C8", Offset = "0xA0F2C8", VA = "0xA0F2C8")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000757")]
			[Address(RVA = "0xA107F0", Offset = "0xA107F0", VA = "0xA107F0")]
			public void PushFrame(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
			{
			}

			[Token(Token = "0x6000758")]
			[Address(RVA = "0xA1030C", Offset = "0xA1030C", VA = "0xA1030C")]
			public void BlendFrames(CommandBuffer cb, float strength, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}

			[Token(Token = "0x6000759")]
			[Address(RVA = "0xA10E68", Offset = "0xA10E68", VA = "0xA10E68")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x600075A")]
			[Address(RVA = "0xA10E9C", Offset = "0xA10E9C", VA = "0xA10E9C")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x600075B")]
			[Address(RVA = "0xA1143C", Offset = "0xA1143C", VA = "0xA1143C")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}
		}

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ReconstructionFilter m_ReconstructionFilter;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FrameBlendingFilter m_FrameBlendingFilter;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_FirstFrame;

		[Token(Token = "0x170000A6")]
		public ReconstructionFilter reconstructionFilter
		{
			[Token(Token = "0x6000745")]
			[Address(RVA = "0xA0F02C", Offset = "0xA0F02C", VA = "0xA0F02C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public FrameBlendingFilter frameBlendingFilter
		{
			[Token(Token = "0x6000746")]
			[Address(RVA = "0xA0F0CC", Offset = "0xA0F0CC", VA = "0xA0F0CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public override bool active
		{
			[Token(Token = "0x6000747")]
			[Address(RVA = "0xA0F1A4", Offset = "0xA0F1A4", VA = "0xA0F1A4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xA0F268", Offset = "0xA0F268", VA = "0xA0F268", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xA0F2A8", Offset = "0xA0F2A8", VA = "0xA0F2A8")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xA0F33C", Offset = "0xA0F33C", VA = "0xA0F33C", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xA0F344", Offset = "0xA0F344", VA = "0xA0F344", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xA0F34C", Offset = "0xA0F34C", VA = "0xA0F34C", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xA0F358", Offset = "0xA0F358", VA = "0xA0F358", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xA10910", Offset = "0xA10910", VA = "0xA10910", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xA10920", Offset = "0xA10920", VA = "0xA10920")]
		public MotionBlurComponent()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public sealed class ScreenSpaceReflectionComponent : PostProcessingComponentCommandBuffer<ScreenSpaceReflectionModel>
	{
		[Token(Token = "0x2000189")]
		private static class Uniforms
		{
			[Token(Token = "0x400073D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _RayStepSize;

			[Token(Token = "0x400073E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _AdditiveReflection;

			[Token(Token = "0x400073F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _BilateralUpsampling;

			[Token(Token = "0x4000740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _TreatBackfaceHitAsMiss;

			[Token(Token = "0x4000741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AllowBackwardsRays;

			[Token(Token = "0x4000742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _TraceBehindObjects;

			[Token(Token = "0x4000743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MaxSteps;

			[Token(Token = "0x4000744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _FullResolutionFiltering;

			[Token(Token = "0x4000745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _HalfResolution;

			[Token(Token = "0x4000746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _HighlightSuppression;

			[Token(Token = "0x4000747")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _PixelsPerMeterAtOneMeter;

			[Token(Token = "0x4000748")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _ScreenEdgeFading;

			[Token(Token = "0x4000749")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _ReflectionBlur;

			[Token(Token = "0x400074A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _MaxRayTraceDistance;

			[Token(Token = "0x400074B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _FadeDistance;

			[Token(Token = "0x400074C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _LayerThickness;

			[Token(Token = "0x400074D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _SSRMultiplier;

			[Token(Token = "0x400074E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _FresnelFade;

			[Token(Token = "0x400074F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _FresnelFadePower;

			[Token(Token = "0x4000750")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ReflectionBufferSize;

			[Token(Token = "0x4000751")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _ScreenSize;

			[Token(Token = "0x4000752")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _InvScreenSize;

			[Token(Token = "0x4000753")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _ProjInfo;

			[Token(Token = "0x4000754")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _CameraClipInfo;

			[Token(Token = "0x4000755")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _ProjectToPixelMatrix;

			[Token(Token = "0x4000756")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _WorldToCameraMatrix;

			[Token(Token = "0x4000757")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly int _CameraToWorldMatrix;

			[Token(Token = "0x4000758")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal static readonly int _Axis;

			[Token(Token = "0x4000759")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly int _CurrentMipLevel;

			[Token(Token = "0x400075A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal static readonly int _NormalAndRoughnessTexture;

			[Token(Token = "0x400075B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly int _HitPointTexture;

			[Token(Token = "0x400075C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal static readonly int _BlurTexture;

			[Token(Token = "0x400075D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly int _FilteredReflections;

			[Token(Token = "0x400075E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			internal static readonly int _FinalReflectionTexture;

			[Token(Token = "0x400075F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly int _TempTexture;
		}

		[Token(Token = "0x200018A")]
		private enum PassIndex
		{
			[Token(Token = "0x4000761")]
			RayTraceStep,
			[Token(Token = "0x4000762")]
			CompositeFinal,
			[Token(Token = "0x4000763")]
			Blur,
			[Token(Token = "0x4000764")]
			CompositeSSR,
			[Token(Token = "0x4000765")]
			MinMipGeneration,
			[Token(Token = "0x4000766")]
			HitPointToReflections,
			[Token(Token = "0x4000767")]
			BilateralKeyPack,
			[Token(Token = "0x4000768")]
			BlitDepthAsCSZ,
			[Token(Token = "0x4000769")]
			PoissonBlur
		}

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool k_HighlightSuppression;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool k_TraceBehindObjects;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool k_TreatBackfaceHitAsMiss;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool k_BilateralUpsample;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int[] m_ReflectionTextures;

		[Token(Token = "0x170000A9")]
		public override bool active
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xA11590", Offset = "0xA11590", VA = "0xA11590", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xA11588", Offset = "0xA11588", VA = "0xA11588", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xA1160C", Offset = "0xA1160C", VA = "0xA1160C", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xA11754", Offset = "0xA11754", VA = "0xA11754", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xA11794", Offset = "0xA11794", VA = "0xA11794", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xA1179C", Offset = "0xA1179C", VA = "0xA1179C", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xA127A4", Offset = "0xA127A4", VA = "0xA127A4")]
		public ScreenSpaceReflectionComponent()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public sealed class TaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x200018C")]
		private static class Uniforms
		{
			[Token(Token = "0x4000770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static int _Jitter;

			[Token(Token = "0x4000771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static int _SharpenParameters;

			[Token(Token = "0x4000772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static int _FinalBlendParameters;

			[Token(Token = "0x4000773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static int _HistoryTex;

			[Token(Token = "0x4000774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static int _MainTex;
		}

		[Token(Token = "0x400076A")]
		private const string k_ShaderString = "Hidden/Post FX/Temporal Anti-aliasing";

		[Token(Token = "0x400076B")]
		private const int k_SampleCount = 8;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderBuffer[] m_MRT;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_SampleIndex;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_ResetHistory;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture m_HistoryTexture;

		[Token(Token = "0x170000AA")]
		public override bool active
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0xA12E84", Offset = "0xA12E84", VA = "0xA12E84", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xA12F14", Offset = "0xA12F14", VA = "0xA12F14", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0xA12F1C", Offset = "0xA12F1C", VA = "0xA12F1C")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xA12F28", Offset = "0xA12F28", VA = "0xA12F28")]
		public void SetProjectionMatrix(Func<Vector2, Matrix4x4> jitteredFunc)
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xA13A0C", Offset = "0xA13A0C", VA = "0xA13A0C")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xA13F28", Offset = "0xA13F28", VA = "0xA13F28")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xA131AC", Offset = "0xA131AC", VA = "0xA131AC")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xA13240", Offset = "0xA13240", VA = "0xA13240")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xA13674", Offset = "0xA13674", VA = "0xA13674")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xA13F6C", Offset = "0xA13F6C", VA = "0xA13F6C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xA13FF0", Offset = "0xA13FF0", VA = "0xA13FF0")]
		public TaaComponent()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public sealed class UserLutComponent : PostProcessingComponentRenderTexture<UserLutModel>
	{
		[Token(Token = "0x200018E")]
		private static class Uniforms
		{
			[Token(Token = "0x4000775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _UserLut;

			[Token(Token = "0x4000776")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _UserLut_Params;
		}

		[Token(Token = "0x170000AB")]
		public override bool active
		{
			[Token(Token = "0x6000774")]
			[Address(RVA = "0xA14194", Offset = "0xA14194", VA = "0xA14194", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xA142A0", Offset = "0xA142A0", VA = "0xA142A0", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xA143E0", Offset = "0xA143E0", VA = "0xA143E0")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xA14524", Offset = "0xA14524", VA = "0xA14524")]
		public UserLutComponent()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public sealed class VignetteComponent : PostProcessingComponentRenderTexture<VignetteModel>
	{
		[Token(Token = "0x2000190")]
		private static class Uniforms
		{
			[Token(Token = "0x4000777")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Vignette_Color;

			[Token(Token = "0x4000778")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Vignette_Center;

			[Token(Token = "0x4000779")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Vignette_Settings;

			[Token(Token = "0x400077A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Vignette_Mask;

			[Token(Token = "0x400077B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Vignette_Opacity;
		}

		[Token(Token = "0x170000AC")]
		public override bool active
		{
			[Token(Token = "0x6000779")]
			[Address(RVA = "0xA14608", Offset = "0xA14608", VA = "0xA14608", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xA14670", Offset = "0xA14670", VA = "0xA14670", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xA14904", Offset = "0xA14904", VA = "0xA14904")]
		public VignetteComponent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000191")]
	public class AmbientOcclusionModel : PostProcessingModel
	{
		[Token(Token = "0x2000192")]
		public enum SampleCount
		{
			[Token(Token = "0x400077E")]
			Lowest = 3,
			[Token(Token = "0x400077F")]
			Low = 6,
			[Token(Token = "0x4000780")]
			Medium = 10,
			[Token(Token = "0x4000781")]
			High = 16
		}

		[Serializable]
		[Token(Token = "0x2000193")]
		public struct Settings
		{
			[Token(Token = "0x4000782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Degree of darkness produced by the effect.")]
			[Range(0f, 4f)]
			public float intensity;

			[Token(Token = "0x4000783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0.0001f)]
			[Tooltip("Radius of sample points, which affects extent of darkened areas.")]
			public float radius;

			[Token(Token = "0x4000784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Number of sample points, which affects quality and performance.")]
			public SampleCount sampleCount;

			[Token(Token = "0x4000785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Halves the resolution of the effect to increase performance.")]
			public bool downsampling;

			[Token(Token = "0x4000786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			[Tooltip("Forces compatibility with Forward rendered objects when working with the Deferred rendering path.")]
			public bool forceForwardCompatibility;

			[Token(Token = "0x4000787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			[Tooltip("Enables the ambient-only mode in that the effect only affects ambient lighting. This mode is only available with the Deferred rendering path and HDR rendering.")]
			public bool ambientOnly;

			[Token(Token = "0x4000788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			[Tooltip("Toggles the use of a higher precision depth texture with the forward rendering path (may impact performances). Has no effect with the deferred rendering path.")]
			public bool highPrecision;

			[Token(Token = "0x170000AE")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000781")]
				[Address(RVA = "0xA14AA0", Offset = "0xA14AA0", VA = "0xA14AA0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000AD")]
		public Settings settings
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0xA14A74", Offset = "0xA14A74", VA = "0xA14A74")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600077E")]
			[Address(RVA = "0xA14A84", Offset = "0xA14A84", VA = "0xA14A84")]
			set
			{
			}
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xA14A90", Offset = "0xA14A90", VA = "0xA14A90", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xA14AB8", Offset = "0xA14AB8", VA = "0xA14AB8")]
		public AmbientOcclusionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000194")]
	public class AntialiasingModel : PostProcessingModel
	{
		[Token(Token = "0x2000195")]
		public enum Method
		{
			[Token(Token = "0x400078B")]
			Fxaa,
			[Token(Token = "0x400078C")]
			Taa
		}

		[Token(Token = "0x2000196")]
		public enum FxaaPreset
		{
			[Token(Token = "0x400078E")]
			ExtremePerformance,
			[Token(Token = "0x400078F")]
			Performance,
			[Token(Token = "0x4000790")]
			Default,
			[Token(Token = "0x4000791")]
			Quality,
			[Token(Token = "0x4000792")]
			ExtremeQuality
		}

		[Serializable]
		[Token(Token = "0x2000197")]
		public struct FxaaQualitySettings
		{
			[Token(Token = "0x4000793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of desired sub-pixel aliasing removal. Effects the sharpeness of the output.")]
			[Range(0f, 1f)]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4000794")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0.063f, 0.333f)]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 0.0833f)]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4000796")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaQualitySettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000198")]
		public struct FxaaConsoleSettings
		{
			[Token(Token = "0x4000797")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of spread applied to the sampling coordinates while sampling for subpixel information.")]
			[Range(0.33f, 0.5f)]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4000798")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("This value dictates how sharp the edges in the image are kept; a higher value implies sharper edges.")]
			[Range(2f, 8f)]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4000799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0.125f, 0.25f)]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x400079A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0.04f, 0.06f)]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			public float minimumRequiredLuminance;

			[Token(Token = "0x400079B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaConsoleSettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000199")]
		public struct FxaaSettings
		{
			[Token(Token = "0x400079C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FxaaPreset preset;

			[Token(Token = "0x170000B0")]
			public static FxaaSettings defaultSettings
			{
				[Token(Token = "0x6000788")]
				[Address(RVA = "0xA14D30", Offset = "0xA14D30", VA = "0xA14D30")]
				get
				{
					return default(FxaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200019A")]
		public struct TaaSettings
		{
			[Token(Token = "0x400079D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0.1f, 1f)]
			[Tooltip("The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.")]
			public float jitterSpread;

			[Token(Token = "0x400079E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Controls the amount of sharpening applied to the color buffer.")]
			[Range(0f, 3f)]
			public float sharpen;

			[Token(Token = "0x400079F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 0.99f)]
			[Tooltip("The blend coefficient for a stationary fragment. Controls the percentage of history sample blended into the final color.")]
			public float stationaryBlending;

			[Token(Token = "0x40007A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 0.99f)]
			[Tooltip("The blend coefficient for a fragment with significant motion. Controls the percentage of history sample blended into the final color.")]
			public float motionBlending;

			[Token(Token = "0x170000B1")]
			public static TaaSettings defaultSettings
			{
				[Token(Token = "0x6000789")]
				[Address(RVA = "0xA14D38", Offset = "0xA14D38", VA = "0xA14D38")]
				get
				{
					return default(TaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200019B")]
		public struct Settings
		{
			[Token(Token = "0x40007A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Method method;

			[Token(Token = "0x40007A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public FxaaSettings fxaaSettings;

			[Token(Token = "0x40007A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TaaSettings taaSettings;

			[Token(Token = "0x170000B2")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x600078A")]
				[Address(RVA = "0xA14B18", Offset = "0xA14B18", VA = "0xA14B18")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000AF")]
		public Settings settings
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xA14AD4", Offset = "0xA14AD4", VA = "0xA14AD4")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000783")]
			[Address(RVA = "0xA14AE8", Offset = "0xA14AE8", VA = "0xA14AE8")]
			set
			{
			}
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xA14AFC", Offset = "0xA14AFC", VA = "0xA14AFC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xA14B34", Offset = "0xA14B34", VA = "0xA14B34")]
		public AntialiasingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019C")]
	public class BloomModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200019D")]
		public struct BloomSettings
		{
			[Token(Token = "0x40007A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Blend factor of the result image.")]
			[Min(0f)]
			public float intensity;

			[Token(Token = "0x40007A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0f)]
			[Tooltip("Filters out pixels under this level of brightness.")]
			public float threshold;

			[Token(Token = "0x40007A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Makes transition between under/over-threshold gradual (0 = hard threshold, 1 = soft threshold).")]
			public float softKnee;

			[Token(Token = "0x40007A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(1f, 7f)]
			[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
			public float radius;

			[Token(Token = "0x40007A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Reduces flashing noise with an additional filter.")]
			public bool antiFlicker;

			[Token(Token = "0x170000B4")]
			public float thresholdLinear
			{
				[Token(Token = "0x6000790")]
				[Address(RVA = "0xA14E20", Offset = "0xA14E20", VA = "0xA14E20")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600078F")]
				[Address(RVA = "0xA14E04", Offset = "0xA14E04", VA = "0xA14E04")]
				set
				{
				}
			}

			[Token(Token = "0x170000B5")]
			public static BloomSettings defaultSettings
			{
				[Token(Token = "0x6000791")]
				[Address(RVA = "0xA14E2C", Offset = "0xA14E2C", VA = "0xA14E2C")]
				get
				{
					return default(BloomSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200019E")]
		public struct LensDirtSettings
		{
			[Token(Token = "0x40007AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Dirtiness texture to add smudges or dust to the lens.")]
			public Texture texture;

			[Token(Token = "0x40007AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amount of lens dirtiness.")]
			[Min(0f)]
			public float intensity;

			[Token(Token = "0x170000B6")]
			public static LensDirtSettings defaultSettings
			{
				[Token(Token = "0x6000792")]
				[Address(RVA = "0xA14E48", Offset = "0xA14E48", VA = "0xA14E48")]
				get
				{
					return default(LensDirtSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200019F")]
		public struct Settings
		{
			[Token(Token = "0x40007AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BloomSettings bloom;

			[Token(Token = "0x40007AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LensDirtSettings lensDirt;

			[Token(Token = "0x170000B7")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000793")]
				[Address(RVA = "0xA14DB0", Offset = "0xA14DB0", VA = "0xA14DB0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000B3")]
		public Settings settings
		{
			[Token(Token = "0x600078B")]
			[Address(RVA = "0xA14D58", Offset = "0xA14D58", VA = "0xA14D58")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600078C")]
			[Address(RVA = "0xA14D70", Offset = "0xA14D70", VA = "0xA14D70")]
			set
			{
			}
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xA14D88", Offset = "0xA14D88", VA = "0xA14D88", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xA14DD8", Offset = "0xA14DD8", VA = "0xA14DD8")]
		public BloomModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A0")]
	public class BuiltinDebugViewsModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001A1")]
		public struct DepthSettings
		{
			[Token(Token = "0x40007AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Scales the camera far plane before displaying the depth map.")]
			[Range(0f, 1f)]
			public float scale;

			[Token(Token = "0x170000BA")]
			public static DepthSettings defaultSettings
			{
				[Token(Token = "0x600079A")]
				[Address(RVA = "0xA14F24", Offset = "0xA14F24", VA = "0xA14F24")]
				get
				{
					return default(DepthSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001A2")]
		public struct MotionVectorsSettings
		{
			[Token(Token = "0x40007B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Opacity of the source render.")]
			[Range(0f, 1f)]
			public float sourceOpacity;

			[Token(Token = "0x40007B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Opacity of the per-pixel motion vector colors.")]
			[Range(0f, 1f)]
			public float motionImageOpacity;

			[Token(Token = "0x40007B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			[Tooltip("Because motion vectors are mainly very small vectors, you can use this setting to make them more visible.")]
			public float motionImageAmplitude;

			[Token(Token = "0x40007B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Opacity for the motion vector arrows.")]
			[Range(0f, 1f)]
			public float motionVectorsOpacity;

			[Token(Token = "0x40007B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The arrow density on screen.")]
			[Range(8f, 64f)]
			public int motionVectorsResolution;

			[Token(Token = "0x40007B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Min(0f)]
			[Tooltip("Tweaks the arrows length.")]
			public float motionVectorsAmplitude;

			[Token(Token = "0x170000BB")]
			public static MotionVectorsSettings defaultSettings
			{
				[Token(Token = "0x600079B")]
				[Address(RVA = "0xA14F2C", Offset = "0xA14F2C", VA = "0xA14F2C")]
				get
				{
					return default(MotionVectorsSettings);
				}
			}
		}

		[Token(Token = "0x20001A3")]
		public enum Mode
		{
			[Token(Token = "0x40007B7")]
			None,
			[Token(Token = "0x40007B8")]
			Depth,
			[Token(Token = "0x40007B9")]
			Normals,
			[Token(Token = "0x40007BA")]
			MotionVectors,
			[Token(Token = "0x40007BB")]
			AmbientOcclusion,
			[Token(Token = "0x40007BC")]
			EyeAdaptation,
			[Token(Token = "0x40007BD")]
			FocusPlane,
			[Token(Token = "0x40007BE")]
			PreGradingLog,
			[Token(Token = "0x40007BF")]
			LogLut,
			[Token(Token = "0x40007C0")]
			UserLut
		}

		[Serializable]
		[Token(Token = "0x20001A4")]
		public struct Settings
		{
			[Token(Token = "0x40007C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mode mode;

			[Token(Token = "0x40007C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public DepthSettings depth;

			[Token(Token = "0x40007C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MotionVectorsSettings motionVectors;

			[Token(Token = "0x170000BC")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x600079C")]
				[Address(RVA = "0xA14ED0", Offset = "0xA14ED0", VA = "0xA14ED0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000B8")]
		public Settings settings
		{
			[Token(Token = "0x6000794")]
			[Address(RVA = "0xA14E54", Offset = "0xA14E54", VA = "0xA14E54")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000795")]
			[Address(RVA = "0xA14E64", Offset = "0xA14E64", VA = "0xA14E64")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public bool willInterrupt
		{
			[Token(Token = "0x6000796")]
			[Address(RVA = "0xA14E74", Offset = "0xA14E74", VA = "0xA14E74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xA14EA8", Offset = "0xA14EA8", VA = "0xA14EA8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xA14E98", Offset = "0xA14E98", VA = "0xA14E98")]
		public bool IsModeActive(Mode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xA14EF8", Offset = "0xA14EF8", VA = "0xA14EF8")]
		public BuiltinDebugViewsModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A5")]
	public class ChromaticAberrationModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001A6")]
		public struct Settings
		{
			[Token(Token = "0x40007C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Shift the hue of chromatic aberrations.")]
			public Texture2D spectralTexture;

			[Token(Token = "0x40007C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Amount of tangential distortion.")]
			public float intensity;

			[Token(Token = "0x170000BE")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007A1")]
				[Address(RVA = "0xA14F6C", Offset = "0xA14F6C", VA = "0xA14F6C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000BD")]
		public Settings settings
		{
			[Token(Token = "0x600079D")]
			[Address(RVA = "0xA14F48", Offset = "0xA14F48", VA = "0xA14F48")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600079E")]
			[Address(RVA = "0xA14F54", Offset = "0xA14F54", VA = "0xA14F54")]
			set
			{
			}
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xA14F5C", Offset = "0xA14F5C", VA = "0xA14F5C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xA14F7C", Offset = "0xA14F7C", VA = "0xA14F7C")]
		public ChromaticAberrationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A7")]
	public class ColorGradingModel : PostProcessingModel
	{
		[Token(Token = "0x20001A8")]
		public enum Tonemapper
		{
			[Token(Token = "0x40007CB")]
			None,
			[Token(Token = "0x40007CC")]
			ACES,
			[Token(Token = "0x40007CD")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x20001A9")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x40007CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Tonemapping algorithm to use at the end of the color grading process. Use \"Neutral\" if you need a customizable tonemapper or \"Filmic\" to give a standard filmic look to your scenes.")]
			public Tonemapper tonemapper;

			[Token(Token = "0x40007CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-0.1f, 0.1f)]
			public float neutralBlackIn;

			[Token(Token = "0x40007D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 20f)]
			public float neutralWhiteIn;

			[Token(Token = "0x40007D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-0.09f, 0.1f)]
			public float neutralBlackOut;

			[Token(Token = "0x40007D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(1f, 19f)]
			public float neutralWhiteOut;

			[Token(Token = "0x40007D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0.1f, 20f)]
			public float neutralWhiteLevel;

			[Token(Token = "0x40007D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(1f, 10f)]
			public float neutralWhiteClip;

			[Token(Token = "0x170000C2")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x60007AB")]
				[Address(RVA = "0xA15248", Offset = "0xA15248", VA = "0xA15248")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001AA")]
		public struct BasicSettings
		{
			[Token(Token = "0x40007D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Adjusts the overall exposure of the scene in EV units. This is applied after HDR effect and right before tonemapping so it won't affect previous effects in the chain.")]
			public float postExposure;

			[Token(Token = "0x40007D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Sets the white balance to a custom color temperature.")]
			[Range(-100f, 100f)]
			public float temperature;

			[Token(Token = "0x40007D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(-100f, 100f)]
			[Tooltip("Sets the white balance to compensate for a green or magenta tint.")]
			public float tint;

			[Token(Token = "0x40007D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-180f, 180f)]
			[Tooltip("Shift the hue of all colors.")]
			public float hueShift;

			[Token(Token = "0x40007D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 2f)]
			[Tooltip("Pushes the intensity of all colors.")]
			public float saturation;

			[Token(Token = "0x40007DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Expands or shrinks the overall range of tonal values.")]
			[Range(0f, 2f)]
			public float contrast;

			[Token(Token = "0x170000C3")]
			public static BasicSettings defaultSettings
			{
				[Token(Token = "0x60007AC")]
				[Address(RVA = "0xA15270", Offset = "0xA15270", VA = "0xA15270")]
				get
				{
					return default(BasicSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001AB")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x40007DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 red;

			[Token(Token = "0x40007DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 green;

			[Token(Token = "0x40007DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 blue;

			[Token(Token = "0x40007DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public int currentEditingChannel;

			[Token(Token = "0x170000C4")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x60007AD")]
				[Address(RVA = "0xA15280", Offset = "0xA15280", VA = "0xA15280")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001AC")]
		public struct LogWheelsSettings
		{
			[Token(Token = "0x40007DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetSlopeValue")]
			public Color slope;

			[Token(Token = "0x40007E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetPowerValue")]
			public Color power;

			[Token(Token = "0x40007E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetOffsetValue")]
			public Color offset;

			[Token(Token = "0x170000C5")]
			public static LogWheelsSettings defaultSettings
			{
				[Token(Token = "0x60007AE")]
				[Address(RVA = "0xA15298", Offset = "0xA15298", VA = "0xA15298")]
				get
				{
					return default(LogWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001AD")]
		public struct LinearWheelsSettings
		{
			[Token(Token = "0x40007E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetLiftValue")]
			public Color lift;

			[Token(Token = "0x40007E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetGammaValue")]
			public Color gamma;

			[Token(Token = "0x40007E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetGainValue")]
			public Color gain;

			[Token(Token = "0x170000C6")]
			public static LinearWheelsSettings defaultSettings
			{
				[Token(Token = "0x60007AF")]
				[Address(RVA = "0xA152A8", Offset = "0xA152A8", VA = "0xA152A8")]
				get
				{
					return default(LinearWheelsSettings);
				}
			}
		}

		[Token(Token = "0x20001AE")]
		public enum ColorWheelMode
		{
			[Token(Token = "0x40007E6")]
			Linear,
			[Token(Token = "0x40007E7")]
			Log
		}

		[Serializable]
		[Token(Token = "0x20001AF")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x40007E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorWheelMode mode;

			[Token(Token = "0x40007E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[TrackballGroup]
			public LogWheelsSettings log;

			[Token(Token = "0x40007EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[TrackballGroup]
			public LinearWheelsSettings linear;

			[Token(Token = "0x170000C7")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x60007B0")]
				[Address(RVA = "0xA152B8", Offset = "0xA152B8", VA = "0xA152B8")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001B0")]
		public struct CurvesSettings
		{
			[Token(Token = "0x40007EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorGradingCurve master;

			[Token(Token = "0x40007EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ColorGradingCurve red;

			[Token(Token = "0x40007ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ColorGradingCurve green;

			[Token(Token = "0x40007EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ColorGradingCurve blue;

			[Token(Token = "0x40007EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColorGradingCurve hueVShue;

			[Token(Token = "0x40007F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ColorGradingCurve hueVSsat;

			[Token(Token = "0x40007F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ColorGradingCurve satVSsat;

			[Token(Token = "0x40007F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ColorGradingCurve lumVSsat;

			[Token(Token = "0x40007F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[HideInInspector]
			public int e_CurrentEditingCurve;

			[Token(Token = "0x40007F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[HideInInspector]
			public bool e_CurveY;

			[Token(Token = "0x40007F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
			[HideInInspector]
			public bool e_CurveR;

			[Token(Token = "0x40007F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
			[HideInInspector]
			public bool e_CurveG;

			[Token(Token = "0x40007F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
			[HideInInspector]
			public bool e_CurveB;

			[Token(Token = "0x170000C8")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x60007B1")]
				[Address(RVA = "0xA152E0", Offset = "0xA152E0", VA = "0xA152E0")]
				get
				{
					return default(CurvesSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001B1")]
		public struct Settings
		{
			[Token(Token = "0x40007F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TonemappingSettings tonemapping;

			[Token(Token = "0x40007F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasicSettings basic;

			[Token(Token = "0x40007FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x40007FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x40007FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public CurvesSettings curves;

			[Token(Token = "0x170000C9")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007B2")]
				[Address(RVA = "0xA150C0", Offset = "0xA150C0", VA = "0xA150C0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000BF")]
		public Settings settings
		{
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0xA14F90", Offset = "0xA14F90", VA = "0xA14F90")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007A3")]
			[Address(RVA = "0xA14FA0", Offset = "0xA14FA0", VA = "0xA14FA0")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public bool isDirty
		{
			[Token(Token = "0x60007A4")]
			[Address(RVA = "0xA14FC8", Offset = "0xA14FC8", VA = "0xA14FC8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007A5")]
			[Address(RVA = "0xA14FD0", Offset = "0xA14FD0", VA = "0xA14FD0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public RenderTexture bakedLut
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0xA14FDC", Offset = "0xA14FDC", VA = "0xA14FDC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007A7")]
			[Address(RVA = "0xA14FE4", Offset = "0xA14FE4", VA = "0xA14FE4")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xA14FEC", Offset = "0xA14FEC", VA = "0xA14FEC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xA1516C", Offset = "0xA1516C", VA = "0xA1516C", Slot = "5")]
		public override void OnValidate()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xA15178", Offset = "0xA15178", VA = "0xA15178")]
		public ColorGradingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B2")]
	public class DepthOfFieldModel : PostProcessingModel
	{
		[Token(Token = "0x20001B3")]
		public enum KernelSize
		{
			[Token(Token = "0x40007FF")]
			Small,
			[Token(Token = "0x4000800")]
			Medium,
			[Token(Token = "0x4000801")]
			Large,
			[Token(Token = "0x4000802")]
			VeryLarge
		}

		[Serializable]
		[Token(Token = "0x20001B4")]
		public struct Settings
		{
			[Token(Token = "0x4000803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0.1f)]
			[Tooltip("Distance to the point of focus.")]
			public float focusDistance;

			[Token(Token = "0x4000804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Ratio of aperture (known as f-stop or f-number). The smaller the value is, the shallower the depth of field is.")]
			[Range(0.05f, 32f)]
			public float aperture;

			[Token(Token = "0x4000805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Distance between the lens and the film. The larger the value is, the shallower the depth of field is.")]
			[Range(1f, 300f)]
			public float focalLength;

			[Token(Token = "0x4000806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Calculate the focal length automatically from the field-of-view value set on the camera.")]
			public bool useCameraFov;

			[Token(Token = "0x4000807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Convolution kernel size of the bokeh filter, which determines the maximum radius of bokeh. It also affects the performance (the larger the kernel is, the longer the GPU time is required).")]
			public KernelSize kernelSize;

			[Token(Token = "0x170000CB")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007B7")]
				[Address(RVA = "0xA1598C", Offset = "0xA1598C", VA = "0xA1598C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000CA")]
		public Settings settings
		{
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0xA15938", Offset = "0xA15938", VA = "0xA15938")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007B4")]
			[Address(RVA = "0xA1594C", Offset = "0xA1594C", VA = "0xA1594C")]
			set
			{
			}
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xA15960", Offset = "0xA15960", VA = "0xA15960", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xA159B8", Offset = "0xA159B8", VA = "0xA159B8")]
		public DepthOfFieldModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B5")]
	public class DitheringModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001B6")]
		public struct Settings
		{
			[Token(Token = "0x170000CD")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007BC")]
				[Address(RVA = "0xA15A00", Offset = "0xA15A00", VA = "0xA15A00")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000CC")]
		public Settings settings
		{
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0xA159E8", Offset = "0xA159E8", VA = "0xA159E8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xA159F0", Offset = "0xA159F0", VA = "0xA159F0")]
			set
			{
			}
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xA159F8", Offset = "0xA159F8", VA = "0xA159F8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xA15A08", Offset = "0xA15A08", VA = "0xA15A08")]
		public DitheringModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B7")]
	public class EyeAdaptationModel : PostProcessingModel
	{
		[Token(Token = "0x20001B8")]
		public enum EyeAdaptationType
		{
			[Token(Token = "0x400080B")]
			Progressive,
			[Token(Token = "0x400080C")]
			Fixed
		}

		[Serializable]
		[Token(Token = "0x20001B9")]
		public struct Settings
		{
			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Filters the dark part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			[Range(1f, 99f)]
			public float lowPercent;

			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Filters the bright part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			[Range(1f, 99f)]
			public float highPercent;

			[Token(Token = "0x400080F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Minimum average luminance to consider for auto exposure (in EV).")]
			public float minLuminance;

			[Token(Token = "0x4000810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Maximum average luminance to consider for auto exposure (in EV).")]
			public float maxLuminance;

			[Token(Token = "0x4000811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Exposure bias. Use this to control the global exposure of the scene.")]
			[Min(0f)]
			public float keyValue;

			[Token(Token = "0x4000812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Set this to true to let Unity handle the key value automatically based on average luminance.")]
			public bool dynamicKeyValue;

			[Token(Token = "0x4000813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Use \"Progressive\" if you want the auto exposure to be animated. Use \"Fixed\" otherwise.")]
			public EyeAdaptationType adaptationType;

			[Token(Token = "0x4000814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Adaptation speed from a dark to a light environment.")]
			[Min(0f)]
			public float speedUp;

			[Token(Token = "0x4000815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Adaptation speed from a light to a dark environment.")]
			[Min(0f)]
			public float speedDown;

			[Token(Token = "0x4000816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Lower bound for the brightness range of the generated histogram (in EV). The bigger the spread between min & max, the lower the precision will be.")]
			[Range(-16f, -1f)]
			public int logMin;

			[Token(Token = "0x4000817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Upper bound for the brightness range of the generated histogram (in EV). The bigger the spread between min & max, the lower the precision will be.")]
			[Range(1f, 16f)]
			public int logMax;

			[Token(Token = "0x170000CF")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007C1")]
				[Address(RVA = "0xA15A8C", Offset = "0xA15A8C", VA = "0xA15A8C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000CE")]
		public Settings settings
		{
			[Token(Token = "0x60007BD")]
			[Address(RVA = "0xA15A14", Offset = "0xA15A14", VA = "0xA15A14")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007BE")]
			[Address(RVA = "0xA15A2C", Offset = "0xA15A2C", VA = "0xA15A2C")]
			set
			{
			}
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xA15A4C", Offset = "0xA15A4C", VA = "0xA15A4C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xA15AD0", Offset = "0xA15AD0", VA = "0xA15AD0")]
		public EyeAdaptationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public class FogModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001BB")]
		public struct Settings
		{
			[Token(Token = "0x4000819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Should the fog affect the skybox?")]
			public bool excludeSkybox;

			[Token(Token = "0x170000D1")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007C6")]
				[Address(RVA = "0xA15B30", Offset = "0xA15B30", VA = "0xA15B30")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000D0")]
		public Settings settings
		{
			[Token(Token = "0x60007C2")]
			[Address(RVA = "0xA15B14", Offset = "0xA15B14", VA = "0xA15B14")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xA15B1C", Offset = "0xA15B1C", VA = "0xA15B1C")]
			set
			{
			}
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xA15B24", Offset = "0xA15B24", VA = "0xA15B24", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xA15B38", Offset = "0xA15B38", VA = "0xA15B38")]
		public FogModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BC")]
	public class GrainModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001BD")]
		public struct Settings
		{
			[Token(Token = "0x400081B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enable the use of colored grain.")]
			public bool colored;

			[Token(Token = "0x400081C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1f)]
			[Tooltip("Grain strength. Higher means more visible grain.")]
			public float intensity;

			[Token(Token = "0x400081D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Grain particle size in \"Filmic\" mode.")]
			[Range(0.3f, 3f)]
			public float size;

			[Token(Token = "0x400081E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("Controls the noisiness response curve based on scene luminance. Lower values mean less noise in dark areas.")]
			public float luminanceContribution;

			[Token(Token = "0x170000D3")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007CB")]
				[Address(RVA = "0xA15B74", Offset = "0xA15B74", VA = "0xA15B74")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000D2")]
		public Settings settings
		{
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0xA15B48", Offset = "0xA15B48", VA = "0xA15B48")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007C8")]
			[Address(RVA = "0xA15B58", Offset = "0xA15B58", VA = "0xA15B58")]
			set
			{
			}
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xA15B64", Offset = "0xA15B64", VA = "0xA15B64", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xA15B8C", Offset = "0xA15B8C", VA = "0xA15B8C")]
		public GrainModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BE")]
	public class MotionBlurModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001BF")]
		public struct Settings
		{
			[Token(Token = "0x4000820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 360f)]
			[Tooltip("The angle of rotary shutter. Larger values give longer exposure.")]
			public float shutterAngle;

			[Token(Token = "0x4000821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(4f, 32f)]
			[Tooltip("The amount of sample points, which affects quality and performances.")]
			public int sampleCount;

			[Token(Token = "0x4000822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The strength of multiple frame blending. The opacity of preceding frames are determined from this coefficient and time differences.")]
			[Range(0f, 1f)]
			public float frameBlending;

			[Token(Token = "0x170000D5")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007D0")]
				[Address(RVA = "0xA15BD0", Offset = "0xA15BD0", VA = "0xA15BD0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000D4")]
		public Settings settings
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0xA15BA0", Offset = "0xA15BA0", VA = "0xA15BA0")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0xA15BB0", Offset = "0xA15BB0", VA = "0xA15BB0")]
			set
			{
			}
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xA15BBC", Offset = "0xA15BBC", VA = "0xA15BBC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xA15BE0", Offset = "0xA15BE0", VA = "0xA15BE0")]
		public MotionBlurModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C0")]
	public class ScreenSpaceReflectionModel : PostProcessingModel
	{
		[Token(Token = "0x20001C1")]
		public enum SSRResolution
		{
			[Token(Token = "0x4000825")]
			High = 0,
			[Token(Token = "0x4000826")]
			Low = 2
		}

		[Token(Token = "0x20001C2")]
		public enum SSRReflectionBlendType
		{
			[Token(Token = "0x4000828")]
			PhysicallyBased,
			[Token(Token = "0x4000829")]
			Additive
		}

		[Serializable]
		[Token(Token = "0x20001C3")]
		public struct IntensitySettings
		{
			[Token(Token = "0x400082A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Nonphysical multiplier for the SSR reflections. 1.0 is physically based.")]
			[Range(0f, 2f)]
			public float reflectionMultiplier;

			[Token(Token = "0x400082B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1000f)]
			[Tooltip("How far away from the maxDistance to begin fading SSR.")]
			public float fadeDistance;

			[Token(Token = "0x400082C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amplify Fresnel fade out. Increase if floor reflections look good close to the surface and bad farther 'under' the floor.")]
			[Range(0f, 1f)]
			public float fresnelFade;

			[Token(Token = "0x400082D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Higher values correspond to a faster Fresnel fade as the reflection changes from the grazing angle.")]
			[Range(0.1f, 10f)]
			public float fresnelFadePower;
		}

		[Serializable]
		[Token(Token = "0x20001C4")]
		public struct ReflectionSettings
		{
			[Token(Token = "0x400082E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("How the reflections are blended into the render.")]
			public SSRReflectionBlendType blendType;

			[Token(Token = "0x400082F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Half resolution SSRR is much faster, but less accurate.")]
			public SSRResolution reflectionQuality;

			[Token(Token = "0x4000830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0.1f, 300f)]
			[Tooltip("Maximum reflection distance in world units.")]
			public float maxDistance;

			[Token(Token = "0x4000831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(16f, 1024f)]
			[Tooltip("Max raytracing length.")]
			public int iterationCount;

			[Token(Token = "0x4000832")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(1f, 16f)]
			[Tooltip("Log base 2 of ray tracing coarse step size. Higher traces farther, lower gives better quality silhouettes.")]
			public int stepSize;

			[Token(Token = "0x4000833")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Typical thickness of columns, walls, furniture, and other objects that reflection rays might pass behind.")]
			[Range(0.01f, 10f)]
			public float widthModifier;

			[Token(Token = "0x4000834")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Blurriness of reflections.")]
			[Range(0.1f, 8f)]
			public float reflectionBlur;

			[Token(Token = "0x4000835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Enable for a performance gain in scenes where most glossy objects are horizontal, like floors, water, and tables. Leave on for scenes with glossy vertical objects.")]
			public bool reflectBackfaces;
		}

		[Serializable]
		[Token(Token = "0x20001C5")]
		public struct ScreenEdgeMask
		{
			[Token(Token = "0x4000836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Higher = fade out SSRR near the edge of the screen so that reflections don't pop under camera motion.")]
			[Range(0f, 1f)]
			public float intensity;
		}

		[Serializable]
		[Token(Token = "0x20001C6")]
		public struct Settings
		{
			[Token(Token = "0x4000837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReflectionSettings reflection;

			[Token(Token = "0x4000838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntensitySettings intensity;

			[Token(Token = "0x4000839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ScreenEdgeMask screenEdgeMask;

			[Token(Token = "0x170000D7")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007D5")]
				[Address(RVA = "0xA15C88", Offset = "0xA15C88", VA = "0xA15C88")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000D6")]
		public Settings settings
		{
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0xA15BF8", Offset = "0xA15BF8", VA = "0xA15BF8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0xA15C18", Offset = "0xA15C18", VA = "0xA15C18")]
			set
			{
			}
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xA15C38", Offset = "0xA15C38", VA = "0xA15C38", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xA15CDC", Offset = "0xA15CDC", VA = "0xA15CDC")]
		public ScreenSpaceReflectionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C7")]
	public class UserLutModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x20001C8")]
		public struct Settings
		{
			[Token(Token = "0x400083B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Custom lookup texture (strip format, e.g. 256x16).")]
			public Texture2D lut;

			[Token(Token = "0x400083C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Blending factor.")]
			public float contribution;

			[Token(Token = "0x170000D9")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007DA")]
				[Address(RVA = "0xA15D54", Offset = "0xA15D54", VA = "0xA15D54")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000D8")]
		public Settings settings
		{
			[Token(Token = "0x60007D6")]
			[Address(RVA = "0xA15D30", Offset = "0xA15D30", VA = "0xA15D30")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007D7")]
			[Address(RVA = "0xA15D3C", Offset = "0xA15D3C", VA = "0xA15D3C")]
			set
			{
			}
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xA15D44", Offset = "0xA15D44", VA = "0xA15D44", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xA15D60", Offset = "0xA15D60", VA = "0xA15D60")]
		public UserLutModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C9")]
	public class VignetteModel : PostProcessingModel
	{
		[Token(Token = "0x20001CA")]
		public enum Mode
		{
			[Token(Token = "0x400083F")]
			Classic,
			[Token(Token = "0x4000840")]
			Masked
		}

		[Serializable]
		[Token(Token = "0x20001CB")]
		public struct Settings
		{
			[Token(Token = "0x4000841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Use the \"Classic\" mode for parametric controls. Use \"Round\" to get a perfectly round vignette no matter what the aspect ratio is. Use the \"Masked\" mode to use your own texture mask.")]
			public Mode mode;

			[Token(Token = "0x4000842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[ColorUsage(false)]
			[Tooltip("Vignette color. Use the alpha channel for transparency.")]
			public Color color;

			[Token(Token = "0x4000843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Sets the vignette center point (screen center is [0.5,0.5]).")]
			public Vector2 center;

			[Token(Token = "0x4000844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0f, 1f)]
			[Tooltip("Amount of vignetting on screen.")]
			public float intensity;

			[Token(Token = "0x4000845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0.01f, 1f)]
			[Tooltip("Smoothness of the vignette borders.")]
			public float smoothness;

			[Token(Token = "0x4000846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Lower values will make a square-ish vignette.")]
			[Range(0f, 1f)]
			public float roundness;

			[Token(Token = "0x4000847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("A black and white mask to use as a vignette.")]
			public Texture mask;

			[Token(Token = "0x4000848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Range(0f, 1f)]
			[Tooltip("Mask opacity.")]
			public float opacity;

			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("Should the vignette be perfectly round or be dependent on the current aspect ratio?")]
			public bool rounded;

			[Token(Token = "0x170000DB")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60007DF")]
				[Address(RVA = "0xA15DF0", Offset = "0xA15DF0", VA = "0xA15DF0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x170000DA")]
		public Settings settings
		{
			[Token(Token = "0x60007DB")]
			[Address(RVA = "0xA15D74", Offset = "0xA15D74", VA = "0xA15D74")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0xA15D94", Offset = "0xA15D94", VA = "0xA15D94")]
			set
			{
			}
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xA15DB4", Offset = "0xA15DB4", VA = "0xA15DB4", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xA15E2C", Offset = "0xA15E2C", VA = "0xA15E2C")]
		public VignetteModel()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	[ImageEffectAllowedInSceneView]
	[RequireComponent(typeof(Camera))]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[AddComponentMenu("Effects/Post-Processing Behaviour", -1)]
	public class PostProcessingBehaviour : MonoBehaviour
	{
		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PostProcessingProfile profile;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<Vector2, Matrix4x4> jitteredMatrixFunc;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<Type, KeyValuePair<CameraEvent, CommandBuffer>> m_CommandBuffers;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<PostProcessingComponentBase> m_Components;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<PostProcessingComponentBase, bool> m_ComponentStates;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MaterialFactory m_MaterialFactory;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTextureFactory m_RenderTextureFactory;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PostProcessingContext m_Context;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera m_Camera;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PostProcessingProfile m_PreviousProfile;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_RenderingInSceneView;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BuiltinDebugViewsComponent m_DebugViews;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AmbientOcclusionComponent m_AmbientOcclusion;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ScreenSpaceReflectionComponent m_ScreenSpaceReflection;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FogComponent m_FogComponent;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MotionBlurComponent m_MotionBlur;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TaaComponent m_Taa;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private EyeAdaptationComponent m_EyeAdaptation;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DepthOfFieldComponent m_DepthOfField;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BloomComponent m_Bloom;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ChromaticAberrationComponent m_ChromaticAberration;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ColorGradingComponent m_ColorGrading;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UserLutComponent m_UserLut;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GrainComponent m_Grain;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private VignetteComponent m_Vignette;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private DitheringComponent m_Dithering;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private FxaaComponent m_Fxaa;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<PostProcessingComponentBase> m_ComponentsToEnable;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<PostProcessingComponentBase> m_ComponentsToDisable;

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xA15E6C", Offset = "0xA15E6C", VA = "0xA15E6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xA1677C", Offset = "0xA1677C", VA = "0xA1677C")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xA17244", Offset = "0xA17244", VA = "0xA17244")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xA1737C", Offset = "0xA1737C", VA = "0xA1737C")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xA17480", Offset = "0xA17480", VA = "0xA17480")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xA17CCC", Offset = "0xA17CCC", VA = "0xA17CCC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xA17E5C", Offset = "0xA17E5C", VA = "0xA17E5C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xA1823C", Offset = "0xA1823C", VA = "0xA1823C")]
		public void ResetTemporalEffects()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xA16E2C", Offset = "0xA16E2C", VA = "0xA16E2C")]
		private void CheckObservers()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xA16CB8", Offset = "0xA16CB8", VA = "0xA16CB8")]
		private void DisableComponents()
		{
		}

		[Token(Token = "0x60007EA")]
		private CommandBuffer AddCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x60007EB")]
		private void RemoveCommandBuffer<T>() where T : PostProcessingModel
		{
		}

		[Token(Token = "0x60007EC")]
		private CommandBuffer GetCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x60007ED")]
		private void TryExecuteCommandBuffer<T>(PostProcessingComponentCommandBuffer<T> component) where T : PostProcessingModel
		{
		}

		[Token(Token = "0x60007EE")]
		private bool TryPrepareUberImageEffect<T>(PostProcessingComponentRenderTexture<T> component, Material material) where T : PostProcessingModel
		{
			return default(bool);
		}

		[Token(Token = "0x60007EF")]
		private T AddComponent<T>(T component) where T : PostProcessingComponentBase
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xA1827C", Offset = "0xA1827C", VA = "0xA1827C")]
		public PostProcessingBehaviour()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public abstract class PostProcessingComponentBase
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingContext context;

		[Token(Token = "0x170000DC")]
		public abstract bool active
		{
			[Token(Token = "0x60007F2")]
			get;
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xA1831C", Offset = "0xA1831C", VA = "0xA1831C", Slot = "4")]
		public virtual DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xA18324", Offset = "0xA18324", VA = "0xA18324", Slot = "6")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xA18328", Offset = "0xA18328", VA = "0xA18328", Slot = "7")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60007F5")]
		public abstract PostProcessingModel GetModel();

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xA1832C", Offset = "0xA1832C", VA = "0xA1832C")]
		protected PostProcessingComponentBase()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public abstract class PostProcessingComponent<T> : PostProcessingComponentBase where T : PostProcessingModel
	{
		[Token(Token = "0x170000DD")]
		public T model
		{
			[Token(Token = "0x60007F7")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007F8")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x60007F9")]
		public virtual void Init(PostProcessingContext pcontext, T pmodel)
		{
		}

		[Token(Token = "0x60007FA")]
		public override PostProcessingModel GetModel()
		{
			return null;
		}

		[Token(Token = "0x60007FB")]
		protected PostProcessingComponent()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public abstract class PostProcessingComponentCommandBuffer<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x60007FC")]
		public abstract CameraEvent GetCameraEvent();

		[Token(Token = "0x60007FD")]
		public abstract string GetName();

		[Token(Token = "0x60007FE")]
		public abstract void PopulateCommandBuffer(CommandBuffer cb);

		[Token(Token = "0x60007FF")]
		protected PostProcessingComponentCommandBuffer()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public abstract class PostProcessingComponentRenderTexture<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x6000800")]
		public virtual void Prepare(Material material)
		{
		}

		[Token(Token = "0x6000801")]
		protected PostProcessingComponentRenderTexture()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class PostProcessingContext
	{
		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingProfile profile;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialFactory materialFactory;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RenderTextureFactory renderTextureFactory;

		[Token(Token = "0x170000DE")]
		public bool interrupted
		{
			[Token(Token = "0x6000802")]
			[Address(RVA = "0xA18334", Offset = "0xA18334", VA = "0xA18334")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000803")]
			[Address(RVA = "0xA1833C", Offset = "0xA1833C", VA = "0xA1833C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public bool isGBufferAvailable
		{
			[Token(Token = "0x6000806")]
			[Address(RVA = "0xA18354", Offset = "0xA18354", VA = "0xA18354")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E0")]
		public bool isHdr
		{
			[Token(Token = "0x6000807")]
			[Address(RVA = "0xA1837C", Offset = "0xA1837C", VA = "0xA1837C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E1")]
		public int width
		{
			[Token(Token = "0x6000808")]
			[Address(RVA = "0xA137D0", Offset = "0xA137D0", VA = "0xA137D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E2")]
		public int height
		{
			[Token(Token = "0x6000809")]
			[Address(RVA = "0xA137EC", Offset = "0xA137EC", VA = "0xA137EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E3")]
		public Rect viewport
		{
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xA14508", Offset = "0xA14508", VA = "0xA14508")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xA18348", Offset = "0xA18348", VA = "0xA18348")]
		public void Interrupt()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xA16CA8", Offset = "0xA16CA8", VA = "0xA16CA8")]
		public PostProcessingContext Reset()
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0xA16774", Offset = "0xA16774", VA = "0xA16774")]
		public PostProcessingContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public abstract class PostProcessingModel
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[GetSet("enabled")]
		private bool m_Enabled;

		[Token(Token = "0x170000E4")]
		public bool enabled
		{
			[Token(Token = "0x600080C")]
			[Address(RVA = "0xA18398", Offset = "0xA18398", VA = "0xA18398")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600080D")]
			[Address(RVA = "0xA183A0", Offset = "0xA183A0", VA = "0xA183A0")]
			set
			{
			}
		}

		[Token(Token = "0x600080E")]
		public abstract void Reset();

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xA183BC", Offset = "0xA183BC", VA = "0xA183BC", Slot = "5")]
		public virtual void OnValidate()
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xA14ACC", Offset = "0xA14ACC", VA = "0xA14ACC")]
		protected PostProcessingModel()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class PostProcessingProfile : ScriptableObject
	{
		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BuiltinDebugViewsModel debugViews;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FogModel fog;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AntialiasingModel antialiasing;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AmbientOcclusionModel ambientOcclusion;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ScreenSpaceReflectionModel screenSpaceReflection;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DepthOfFieldModel depthOfField;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MotionBlurModel motionBlur;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EyeAdaptationModel eyeAdaptation;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BloomModel bloom;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ColorGradingModel colorGrading;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UserLutModel userLut;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ChromaticAberrationModel chromaticAberration;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrainModel grain;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public VignetteModel vignette;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DitheringModel dithering;

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xA183C0", Offset = "0xA183C0", VA = "0xA183C0")]
		public PostProcessingProfile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public sealed class ColorGradingCurve
	{
		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_Loop;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_ZeroValue;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_Range;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve m_InternalLoopingCurve;

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xA1589C", Offset = "0xA1589C", VA = "0xA1589C")]
		public ColorGradingCurve(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xA18858", Offset = "0xA18858", VA = "0xA18858")]
		public void Cache()
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0xA18A28", Offset = "0xA18A28", VA = "0xA18A28")]
		public float Evaluate(float t)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001D5")]
	public static class GraphicsUtils
	{
		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Texture2D s_WhiteTexture;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh s_Quad;

		[Token(Token = "0x170000E5")]
		public static bool isLinearColorSpace
		{
			[Token(Token = "0x6000815")]
			[Address(RVA = "0xA17BE4", Offset = "0xA17BE4", VA = "0xA17BE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E6")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6000816")]
			[Address(RVA = "0xA18AA4", Offset = "0xA18AA4", VA = "0xA18AA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E7")]
		public static Texture2D whiteTexture
		{
			[Token(Token = "0x6000817")]
			[Address(RVA = "0xA17AC4", Offset = "0xA17AC4", VA = "0xA17AC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public static Mesh quad
		{
			[Token(Token = "0x6000818")]
			[Address(RVA = "0xA18AD0", Offset = "0xA18AD0", VA = "0xA18AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xA13E28", Offset = "0xA13E28", VA = "0xA13E28")]
		public static void Blit(Material material, int pass)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xA18D2C", Offset = "0xA18D2C", VA = "0xA18D2C")]
		public static void ClearAndBlit(Texture source, RenderTexture destination, Material material, int pass, bool clearColor = true, bool clearDepth = false)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xA18EC8", Offset = "0xA18EC8", VA = "0xA18EC8")]
		public static void Destroy(Object obj)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xA181F4", Offset = "0xA181F4", VA = "0xA181F4")]
		public static void Dispose()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public sealed class MaterialFactory : IDisposable
	{
		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Material> m_Materials;

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xA16674", Offset = "0xA16674", VA = "0xA16674")]
		public MaterialFactory()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xA13808", Offset = "0xA13808", VA = "0xA13808")]
		public Material Get(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xA18118", Offset = "0xA18118", VA = "0xA18118", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public sealed class RenderTextureFactory : IDisposable
	{
		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HashSet<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xA166F4", Offset = "0xA166F4", VA = "0xA166F4")]
		public RenderTextureFactory()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xA179C4", Offset = "0xA179C4", VA = "0xA179C4")]
		public RenderTexture Get(RenderTexture baseRenderTexture)
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xA18F50", Offset = "0xA18F50", VA = "0xA18F50")]
		public RenderTexture Get(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, RenderTextureReadWrite rw = RenderTextureReadWrite.Default, FilterMode filterMode = FilterMode.Bilinear, TextureWrapMode wrapMode = TextureWrapMode.Clamp, string name = "FactoryTempTexture")
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xA1902C", Offset = "0xA1902C", VA = "0xA1902C")]
		public void Release(RenderTexture rt)
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xA17C00", Offset = "0xA17C00", VA = "0xA17C00")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xA181F0", Offset = "0xA181F0", VA = "0xA181F0", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace UnityEngine.AI
{
	[Token(Token = "0x20001D8")]
	[DefaultExecutionOrder(-101)]
	[AddComponentMenu("Navigation/NavMeshLink", 33)]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[ExecuteInEditMode]
	public class NavMeshLink : MonoBehaviour
	{
		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_AgentTypeID;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector3 m_StartPoint;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Vector3 m_EndPoint;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int m_CostModifier;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool m_Bidirectional;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool m_AutoUpdatePosition;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private NavMeshLinkInstance m_LinkInstance;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 m_LastPosition;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion m_LastRotation;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshLink> s_Tracked;

		[Token(Token = "0x170000E9")]
		public int agentTypeID
		{
			[Token(Token = "0x6000826")]
			[Address(RVA = "0xA19168", Offset = "0xA19168", VA = "0xA19168")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000827")]
			[Address(RVA = "0xA19170", Offset = "0xA19170", VA = "0xA19170")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public Vector3 startPoint
		{
			[Token(Token = "0x6000828")]
			[Address(RVA = "0xA191B4", Offset = "0xA191B4", VA = "0xA191B4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000829")]
			[Address(RVA = "0xA191C0", Offset = "0xA191C0", VA = "0xA191C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public Vector3 endPoint
		{
			[Token(Token = "0x600082A")]
			[Address(RVA = "0xA191E8", Offset = "0xA191E8", VA = "0xA191E8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600082B")]
			[Address(RVA = "0xA191F4", Offset = "0xA191F4", VA = "0xA191F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public float width
		{
			[Token(Token = "0x600082C")]
			[Address(RVA = "0xA1921C", Offset = "0xA1921C", VA = "0xA1921C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600082D")]
			[Address(RVA = "0xA19224", Offset = "0xA19224", VA = "0xA19224")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public int costModifier
		{
			[Token(Token = "0x600082E")]
			[Address(RVA = "0xA19248", Offset = "0xA19248", VA = "0xA19248")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600082F")]
			[Address(RVA = "0xA19250", Offset = "0xA19250", VA = "0xA19250")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool bidirectional
		{
			[Token(Token = "0x6000830")]
			[Address(RVA = "0xA19274", Offset = "0xA19274", VA = "0xA19274")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000831")]
			[Address(RVA = "0xA1927C", Offset = "0xA1927C", VA = "0xA1927C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public bool autoUpdate
		{
			[Token(Token = "0x6000832")]
			[Address(RVA = "0xA192A4", Offset = "0xA192A4", VA = "0xA192A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xA192AC", Offset = "0xA192AC", VA = "0xA192AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public int area
		{
			[Token(Token = "0x6000834")]
			[Address(RVA = "0xA1934C", Offset = "0xA1934C", VA = "0xA1934C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000835")]
			[Address(RVA = "0xA19354", Offset = "0xA19354", VA = "0xA19354")]
			set
			{
			}
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xA19378", Offset = "0xA19378", VA = "0xA19378")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xA19784", Offset = "0xA19784", VA = "0xA19784")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xA19194", Offset = "0xA19194", VA = "0xA19194")]
		public void UpdateLink()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xA195B0", Offset = "0xA195B0", VA = "0xA195B0")]
		private static void AddTracking(NavMeshLink link)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xA197E4", Offset = "0xA197E4", VA = "0xA197E4")]
		private static void RemoveTracking(NavMeshLink link)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xA192B4", Offset = "0xA192B4", VA = "0xA192B4")]
		private void SetAutoUpdate(bool value)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xA193F8", Offset = "0xA193F8", VA = "0xA193F8")]
		private void AddLink()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xA1994C", Offset = "0xA1994C", VA = "0xA1994C")]
		private bool HasTransformChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xA19A10", Offset = "0xA19A10", VA = "0xA19A10")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xA19A30", Offset = "0xA19A30", VA = "0xA19A30")]
		private static void UpdateTrackedInstances()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xA19BC0", Offset = "0xA19BC0", VA = "0xA19BC0")]
		public NavMeshLink()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[AddComponentMenu("Navigation/NavMeshModifier", 32)]
	[ExecuteInEditMode]
	public class NavMeshModifier : MonoBehaviour
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_OverrideArea;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_IgnoreFromBuild;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<int> m_AffectedAgents;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshModifier> s_NavMeshModifiers;

		[Token(Token = "0x170000F1")]
		public bool overrideArea
		{
			[Token(Token = "0x6000842")]
			[Address(RVA = "0xA19D04", Offset = "0xA19D04", VA = "0xA19D04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000843")]
			[Address(RVA = "0xA19D0C", Offset = "0xA19D0C", VA = "0xA19D0C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public int area
		{
			[Token(Token = "0x6000844")]
			[Address(RVA = "0xA19D18", Offset = "0xA19D18", VA = "0xA19D18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000845")]
			[Address(RVA = "0xA19D20", Offset = "0xA19D20", VA = "0xA19D20")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public bool ignoreFromBuild
		{
			[Token(Token = "0x6000846")]
			[Address(RVA = "0xA19D28", Offset = "0xA19D28", VA = "0xA19D28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000847")]
			[Address(RVA = "0xA19D30", Offset = "0xA19D30", VA = "0xA19D30")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public static List<NavMeshModifier> activeModifiers
		{
			[Token(Token = "0x6000848")]
			[Address(RVA = "0xA19D3C", Offset = "0xA19D3C", VA = "0xA19D3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xA19D94", Offset = "0xA19D94", VA = "0xA19D94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xA19EA8", Offset = "0xA19EA8", VA = "0xA19EA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xA19F28", Offset = "0xA19F28", VA = "0xA19F28")]
		public bool AffectsAgentType(int agentTypeID)
		{
			return default(bool);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xA19FE0", Offset = "0xA19FE0", VA = "0xA19FE0")]
		public NavMeshModifier()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[AddComponentMenu("Navigation/NavMeshModifierVolume", 31)]
	[ExecuteInEditMode]
	public class NavMeshModifierVolume : MonoBehaviour
	{
		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector3 m_Size;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 m_Center;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private List<int> m_AffectedAgents;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshModifierVolume> s_NavMeshModifiers;

		[Token(Token = "0x170000F5")]
		public Vector3 size
		{
			[Token(Token = "0x600084E")]
			[Address(RVA = "0xA1A128", Offset = "0xA1A128", VA = "0xA1A128")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600084F")]
			[Address(RVA = "0xA1A134", Offset = "0xA1A134", VA = "0xA1A134")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public Vector3 center
		{
			[Token(Token = "0x6000850")]
			[Address(RVA = "0xA1A140", Offset = "0xA1A140", VA = "0xA1A140")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000851")]
			[Address(RVA = "0xA1A14C", Offset = "0xA1A14C", VA = "0xA1A14C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public int area
		{
			[Token(Token = "0x6000852")]
			[Address(RVA = "0xA1A158", Offset = "0xA1A158", VA = "0xA1A158")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000853")]
			[Address(RVA = "0xA1A160", Offset = "0xA1A160", VA = "0xA1A160")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public static List<NavMeshModifierVolume> activeModifiers
		{
			[Token(Token = "0x6000854")]
			[Address(RVA = "0xA1A168", Offset = "0xA1A168", VA = "0xA1A168")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xA1A1C0", Offset = "0xA1A1C0", VA = "0xA1A1C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xA1A2D4", Offset = "0xA1A2D4", VA = "0xA1A2D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xA1A354", Offset = "0xA1A354", VA = "0xA1A354")]
		public bool AffectsAgentType(int agentTypeID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xA1A40C", Offset = "0xA1A40C", VA = "0xA1A40C")]
		public NavMeshModifierVolume()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public enum CollectObjects
	{
		[Token(Token = "0x400089E")]
		All,
		[Token(Token = "0x400089F")]
		Volume,
		[Token(Token = "0x40008A0")]
		Children
	}
	[Token(Token = "0x20001DC")]
	[AddComponentMenu("Navigation/NavMeshSurface", 30)]
	[ExecuteInEditMode]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[DefaultExecutionOrder(-102)]
	public class NavMeshSurface : MonoBehaviour
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_AgentTypeID;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private CollectObjects m_CollectObjects;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector3 m_Size;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Vector3 m_Center;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LayerMask m_LayerMask;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private NavMeshCollectGeometry m_UseGeometry;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int m_DefaultArea;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private bool m_IgnoreNavMeshAgent;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		private bool m_IgnoreNavMeshObstacle;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		private bool m_OverrideTileSize;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int m_TileSize;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private bool m_OverrideVoxelSize;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_VoxelSize;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private bool m_BuildHeightMesh;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[FormerlySerializedAs("m_BakedNavMeshData")]
		private NavMeshData m_NavMeshData;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshDataInstance m_NavMeshDataInstance;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 m_LastPosition;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion m_LastRotation;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshSurface> s_NavMeshSurfaces;

		[Token(Token = "0x170000F9")]
		public int agentTypeID
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0xA1A568", Offset = "0xA1A568", VA = "0xA1A568")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xA1A570", Offset = "0xA1A570", VA = "0xA1A570")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public CollectObjects collectObjects
		{
			[Token(Token = "0x600085C")]
			[Address(RVA = "0xA1A578", Offset = "0xA1A578", VA = "0xA1A578")]
			get
			{
				return default(CollectObjects);
			}
			[Token(Token = "0x600085D")]
			[Address(RVA = "0xA1A580", Offset = "0xA1A580", VA = "0xA1A580")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public Vector3 size
		{
			[Token(Token = "0x600085E")]
			[Address(RVA = "0xA1A588", Offset = "0xA1A588", VA = "0xA1A588")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600085F")]
			[Address(RVA = "0xA1A594", Offset = "0xA1A594", VA = "0xA1A594")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public Vector3 center
		{
			[Token(Token = "0x6000860")]
			[Address(RVA = "0xA1A5A0", Offset = "0xA1A5A0", VA = "0xA1A5A0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000861")]
			[Address(RVA = "0xA1A5AC", Offset = "0xA1A5AC", VA = "0xA1A5AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public LayerMask layerMask
		{
			[Token(Token = "0x6000862")]
			[Address(RVA = "0xA1A5B8", Offset = "0xA1A5B8", VA = "0xA1A5B8")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000863")]
			[Address(RVA = "0xA1A5C0", Offset = "0xA1A5C0", VA = "0xA1A5C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public NavMeshCollectGeometry useGeometry
		{
			[Token(Token = "0x6000864")]
			[Address(RVA = "0xA1A5C8", Offset = "0xA1A5C8", VA = "0xA1A5C8")]
			get
			{
				return default(NavMeshCollectGeometry);
			}
			[Token(Token = "0x6000865")]
			[Address(RVA = "0xA1A5D0", Offset = "0xA1A5D0", VA = "0xA1A5D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public int defaultArea
		{
			[Token(Token = "0x6000866")]
			[Address(RVA = "0xA1A5D8", Offset = "0xA1A5D8", VA = "0xA1A5D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000867")]
			[Address(RVA = "0xA1A5E0", Offset = "0xA1A5E0", VA = "0xA1A5E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public bool ignoreNavMeshAgent
		{
			[Token(Token = "0x6000868")]
			[Address(RVA = "0xA1A5E8", Offset = "0xA1A5E8", VA = "0xA1A5E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000869")]
			[Address(RVA = "0xA1A5F0", Offset = "0xA1A5F0", VA = "0xA1A5F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public bool ignoreNavMeshObstacle
		{
			[Token(Token = "0x600086A")]
			[Address(RVA = "0xA1A5FC", Offset = "0xA1A5FC", VA = "0xA1A5FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086B")]
			[Address(RVA = "0xA1A604", Offset = "0xA1A604", VA = "0xA1A604")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public bool overrideTileSize
		{
			[Token(Token = "0x600086C")]
			[Address(RVA = "0xA1A610", Offset = "0xA1A610", VA = "0xA1A610")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086D")]
			[Address(RVA = "0xA1A618", Offset = "0xA1A618", VA = "0xA1A618")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public int tileSize
		{
			[Token(Token = "0x600086E")]
			[Address(RVA = "0xA1A624", Offset = "0xA1A624", VA = "0xA1A624")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600086F")]
			[Address(RVA = "0xA1A62C", Offset = "0xA1A62C", VA = "0xA1A62C")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public bool overrideVoxelSize
		{
			[Token(Token = "0x6000870")]
			[Address(RVA = "0xA1A634", Offset = "0xA1A634", VA = "0xA1A634")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000871")]
			[Address(RVA = "0xA1A63C", Offset = "0xA1A63C", VA = "0xA1A63C")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public float voxelSize
		{
			[Token(Token = "0x6000872")]
			[Address(RVA = "0xA1A648", Offset = "0xA1A648", VA = "0xA1A648")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000873")]
			[Address(RVA = "0xA1A650", Offset = "0xA1A650", VA = "0xA1A650")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public bool buildHeightMesh
		{
			[Token(Token = "0x6000874")]
			[Address(RVA = "0xA1A658", Offset = "0xA1A658", VA = "0xA1A658")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xA1A660", Offset = "0xA1A660", VA = "0xA1A660")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public NavMeshData navMeshData
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xA1A66C", Offset = "0xA1A66C", VA = "0xA1A66C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xA1A674", Offset = "0xA1A674", VA = "0xA1A674")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public static List<NavMeshSurface> activeSurfaces
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xA1A67C", Offset = "0xA1A67C", VA = "0xA1A67C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0xA1A6D4", Offset = "0xA1A6D4", VA = "0xA1A6D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0xA1AAA4", Offset = "0xA1AAA4", VA = "0xA1AAA4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xA1A948", Offset = "0xA1A948", VA = "0xA1A948")]
		public void AddData()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xA1AB08", Offset = "0xA1AB08", VA = "0xA1AB08")]
		public void RemoveData()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xA1AC90", Offset = "0xA1AC90", VA = "0xA1AC90")]
		public NavMeshBuildSettings GetBuildSettings()
		{
			return default(NavMeshBuildSettings);
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xA1AE04", Offset = "0xA1AE04", VA = "0xA1AE04")]
		public void BuildNavMesh()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xA1C07C", Offset = "0xA1C07C", VA = "0xA1C07C")]
		public AsyncOperation UpdateNavMesh(NavMeshData data)
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xA1A730", Offset = "0xA1A730", VA = "0xA1A730")]
		private static void Register(NavMeshSurface surface)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xA1AB28", Offset = "0xA1AB28", VA = "0xA1AB28")]
		private static void Unregister(NavMeshSurface surface)
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xA1C1A4", Offset = "0xA1C1A4", VA = "0xA1C1A4")]
		private static void UpdateActive()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xA1C2A4", Offset = "0xA1C2A4", VA = "0xA1C2A4")]
		private void AppendModifierVolumes(ref List<NavMeshBuildSource> sources)
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xA1B050", Offset = "0xA1B050", VA = "0xA1B050")]
		private List<NavMeshBuildSource> CollectSources()
		{
			return null;
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xA1B898", Offset = "0xA1B898", VA = "0xA1B898")]
		private static Vector3 Abs(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xA1C8D8", Offset = "0xA1C8D8", VA = "0xA1C8D8")]
		private static Bounds GetWorldBounds(Matrix4x4 mat, Bounds bounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xA1B8A8", Offset = "0xA1B8A8", VA = "0xA1B8A8")]
		private Bounds CalculateWorldBounds(List<NavMeshBuildSource> sources)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xA1CB08", Offset = "0xA1CB08", VA = "0xA1CB08")]
		private bool HasTransformChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xA1C270", Offset = "0xA1C270", VA = "0xA1C270")]
		private void UpdateDataIfTransformChanged()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xA1CBCC", Offset = "0xA1CBCC", VA = "0xA1CBCC")]
		public NavMeshSurface()
		{
		}
	}
}
namespace INOQ
{
	[Token(Token = "0x20001DE")]
	public enum AchievementList
	{
		[Token(Token = "0x40008BA")]
		GET_ALL_THE_OTHER_ACHIEVEMENTS,
		[Token(Token = "0x40008BB")]
		GET_HANDGUN,
		[Token(Token = "0x40008BC")]
		GET_SHOTGUN,
		[Token(Token = "0x40008BD")]
		GET_ELEVATOR_SWITCH,
		[Token(Token = "0x40008BE")]
		CLEAR_THE_APARTMENT_MAZE_PUZZLE,
		[Token(Token = "0x40008BF")]
		BEAT_THE_APARTMENT_BOSS,
		[Token(Token = "0x40008C0")]
		CLEAR_THE_THEATER_MAZE_PUZZLE,
		[Token(Token = "0x40008C1")]
		GET_TO_THE_MOVIE_THEATER,
		[Token(Token = "0x40008C2")]
		SOLVE_THE_FOUR_DOORS_PUZZLE,
		[Token(Token = "0x40008C3")]
		LEAVE_THE_METRO,
		[Token(Token = "0x40008C4")]
		GET_MACHINEGUN,
		[Token(Token = "0x40008C5")]
		GET_TO_THE_NIGHTCLUB,
		[Token(Token = "0x40008C6")]
		CLEAR_THE_NIGHTCLUB_MAZE_PUZZLE,
		[Token(Token = "0x40008C7")]
		BEAT_THE_NIGHTCLUB_BOSS,
		[Token(Token = "0x40008C8")]
		ARRIVED_AT_THE_UNIVERSITY,
		[Token(Token = "0x40008C9")]
		ARRIVED_AT_THE_ORGAN_STAGE,
		[Token(Token = "0x40008CA")]
		BEAT_THE_LAST_BOSS,
		[Token(Token = "0x40008CB")]
		ARRIVED_AT_THE_BATTERY_STORE,
		[Token(Token = "0x40008CC")]
		GET_BATTERY_FROM_A_MACHINERY_ENEMY,
		[Token(Token = "0x40008CD")]
		USE_CHEMISTRY_CHEMICALS,
		[Token(Token = "0x40008CE")]
		SPEEDRUN_THE_APARTMENT
	}
	[Token(Token = "0x20001DF")]
	public class AchievementManager : MonoBehaviour
	{
		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AchievementManager _instance;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool[] ClearedAchievements;

		[Token(Token = "0x17000109")]
		public static AchievementManager Instance
		{
			[Token(Token = "0x6000892")]
			[Address(RVA = "0xA1CFB0", Offset = "0xA1CFB0", VA = "0xA1CFB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xA1CFF8", Offset = "0xA1CFF8", VA = "0xA1CFF8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xA1D08C", Offset = "0xA1D08C", VA = "0xA1D08C")]
		public void UnlockAchievement(AchievementList achievement)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xA1D1E8", Offset = "0xA1D1E8", VA = "0xA1D1E8")]
		public string GetAchievementID(AchievementList achievement)
		{
			return null;
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xA1D348", Offset = "0xA1D348", VA = "0xA1D348")]
		public void CheckAchievementProgress()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xA1D3F4", Offset = "0xA1D3F4", VA = "0xA1D3F4")]
		private bool CheckForPlatinum()
		{
			return default(bool);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0xA1D44C", Offset = "0xA1D44C", VA = "0xA1D44C")]
		public AchievementManager()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class UnlockAchievement : MonoBehaviour
	{
		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AchievementList AchivementToUnlock;

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xA1E528", Offset = "0xA1E528", VA = "0xA1E528")]
		public void Unlock()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xA1E580", Offset = "0xA1E580", VA = "0xA1E580")]
		public UnlockAchievement()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class UnlockAchievementOnScene : UnlockAchievement
	{
		[Token(Token = "0x20001E3")]
		[CompilerGenerated]
		private sealed class <DelayUnlock>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnlockAchievementOnScene <>4__this;

			[Token(Token = "0x1700010A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A6")]
				[Address(RVA = "0xA1E6E4", Offset = "0xA1E6E4", VA = "0xA1E6E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A8")]
				[Address(RVA = "0xA1E72C", Offset = "0xA1E72C", VA = "0xA1E72C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A3")]
			[Address(RVA = "0xA1E610", Offset = "0xA1E610", VA = "0xA1E610")]
			[DebuggerHidden]
			public <DelayUnlock>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xA1E640", Offset = "0xA1E640", VA = "0xA1E640", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008A5")]
			[Address(RVA = "0xA1E644", Offset = "0xA1E644", VA = "0xA1E644", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xA1E6EC", Offset = "0xA1E6EC", VA = "0xA1E6EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xA1E588", Offset = "0xA1E588", VA = "0xA1E588")]
		private void Start()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xA1E5A8", Offset = "0xA1E5A8", VA = "0xA1E5A8")]
		[IteratorStateMachine(typeof(<DelayUnlock>d__1))]
		private IEnumerator DelayUnlock()
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xA1E638", Offset = "0xA1E638", VA = "0xA1E638")]
		public UnlockAchievementOnScene()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class UnlockAchievementOnTrigger : UnlockAchievement
	{
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0xA1E734", Offset = "0xA1E734", VA = "0xA1E734")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xA1E7A4", Offset = "0xA1E7A4", VA = "0xA1E7A4")]
		public UnlockAchievementOnTrigger()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public class ActivityManager : MonoBehaviour
	{
		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ActivityManager _instance;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> ClearedTasks;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> LockedTasks;

		[Token(Token = "0x40008DB")]
		public const string ACTIVITY_ORGANQUARTER = "ACTIVITY_ORGANQUARTER_0001";

		[Token(Token = "0x40008DC")]
		public const string TASK_APARTMENT = "TASK_0001";

		[Token(Token = "0x40008DD")]
		public const string TASK_APARTMENT_6TH_FLOOR = "TASK_0002";

		[Token(Token = "0x40008DE")]
		public const string TASK_BASEMENT = "TASK_0003";

		[Token(Token = "0x40008DF")]
		public const string TASK_OUTSIDE = "TASK_0004";

		[Token(Token = "0x40008E0")]
		public const string TASK_THEATER = "TASK_0005";

		[Token(Token = "0x40008E1")]
		public const string TASK_METRO = "TASK_0006";

		[Token(Token = "0x40008E2")]
		public const string TASK_MINES = "TASK_0007";

		[Token(Token = "0x40008E3")]
		public const string TASK_NIGHTCLUB = "TASK_0008";

		[Token(Token = "0x40008E4")]
		public const string TASK_UNIVERSITY = "TASK_0009";

		[Token(Token = "0x40008E5")]
		public const string TASK_UNIVERSITY_1ST_FLOOR = "TASK_0010";

		[Token(Token = "0x40008E6")]
		public const string TASK_UNIVERSITY_5TH_FLOOR = "TASK_0011";

		[Token(Token = "0x40008E7")]
		public const string TASK_ORGAN_STAGE = "TASK_0012";

		[Token(Token = "0x40008E8")]
		public const string TASK_BEAT_THE_LAST_BOSS = "TASK_0013";

		[Token(Token = "0x40008E9")]
		public const string TASK_CREDIT_ROLL = "TASK_0014";

		[Token(Token = "0x1700010C")]
		public static ActivityManager Instance
		{
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xA1E7AC", Offset = "0xA1E7AC", VA = "0xA1E7AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xA1E7F4", Offset = "0xA1E7F4", VA = "0xA1E7F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xA1E888", Offset = "0xA1E888", VA = "0xA1E888")]
		public void StartActivity()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xA1E88C", Offset = "0xA1E88C", VA = "0xA1E88C")]
		public void ResumeActivity()
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xA1E890", Offset = "0xA1E890", VA = "0xA1E890")]
		public void FinishActivity()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xA1E894", Offset = "0xA1E894", VA = "0xA1E894")]
		public void TerminateAllActivities()
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xA1E898", Offset = "0xA1E898", VA = "0xA1E898")]
		public void FinishTask(string _task)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xA1E89C", Offset = "0xA1E89C", VA = "0xA1E89C")]
		public ActivityManager()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class UnlockTaskOnScene : MonoBehaviour
	{
		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string TaskID;

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xA1EF04", Offset = "0xA1EF04", VA = "0xA1EF04")]
		private void Start()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xA1EF08", Offset = "0xA1EF08", VA = "0xA1EF08")]
		public UnlockTaskOnScene()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class FogOffCamera : MonoBehaviour
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool fogBackup;

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xA1EF10", Offset = "0xA1EF10", VA = "0xA1EF10")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xA1EF38", Offset = "0xA1EF38", VA = "0xA1EF38")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xA1EF44", Offset = "0xA1EF44", VA = "0xA1EF44")]
		public FogOffCamera()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class LookAtTargetFixedAxis : MonoBehaviour
	{
		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform LookAt;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool UseLerp;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float Speed;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool UseUpdate;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool UseLateUpdate;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int c;

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xA1EF4C", Offset = "0xA1EF4C", VA = "0xA1EF4C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xA1F058", Offset = "0xA1F058", VA = "0xA1F058")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xA1F248", Offset = "0xA1F248", VA = "0xA1F248")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xA1F5EC", Offset = "0xA1F5EC", VA = "0xA1F5EC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xA1F5F0", Offset = "0xA1F5F0", VA = "0xA1F5F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xA1F26C", Offset = "0xA1F26C", VA = "0xA1F26C")]
		private void lookAt()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xA1F600", Offset = "0xA1F600", VA = "0xA1F600")]
		public LookAtTargetFixedAxis()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x20001EA")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000909")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400090A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400090B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x400090C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x1700010F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008D1")]
				[Address(RVA = "0xA1FD2C", Offset = "0xA1FD2C", VA = "0xA1FD2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000110")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008D3")]
				[Address(RVA = "0xA1FD74", Offset = "0xA1FD74", VA = "0xA1FD74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008CE")]
			[Address(RVA = "0xA1F94C", Offset = "0xA1F94C", VA = "0xA1F94C")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60008CF")]
			[Address(RVA = "0xA1FC74", Offset = "0xA1FC74", VA = "0xA1FC74", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008D0")]
			[Address(RVA = "0xA1FC78", Offset = "0xA1FC78", VA = "0xA1FC78", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008D2")]
			[Address(RVA = "0xA1FD34", Offset = "0xA1FD34", VA = "0xA1FD34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001EB")]
		[CompilerGenerated]
		private sealed class <doFade>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400090D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400090E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400090F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4000910")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4000911")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x17000111")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008D7")]
				[Address(RVA = "0xA1FF18", Offset = "0xA1FF18", VA = "0xA1FF18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000112")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008D9")]
				[Address(RVA = "0xA1FF60", Offset = "0xA1FF60", VA = "0xA1FF60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008D4")]
			[Address(RVA = "0xA1FACC", Offset = "0xA1FACC", VA = "0xA1FACC")]
			[DebuggerHidden]
			public <doFade>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xA1FD7C", Offset = "0xA1FD7C", VA = "0xA1FD7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xA1FD80", Offset = "0xA1FD80", VA = "0xA1FD80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008D8")]
			[Address(RVA = "0xA1FF20", Offset = "0xA1FF20", VA = "0xA1FF20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ScreenOverlay fadeObject;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float currentAlpha;

		[Token(Token = "0x1700010D")]
		public float CurrentAlpha
		{
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0xA1FB88", Offset = "0xA1FB88", VA = "0xA1FB88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700010E")]
		public bool IsFadeBusy
		{
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0xA1FB90", Offset = "0xA1FB90", VA = "0xA1FB90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xA1F628", Offset = "0xA1F628", VA = "0xA1F628")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xA1F634", Offset = "0xA1F634", VA = "0xA1F634", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xA1F6E4", Offset = "0xA1F6E4", VA = "0xA1F6E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xA1F788", Offset = "0xA1F788", VA = "0xA1F788")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xA1F82C", Offset = "0xA1F82C", VA = "0xA1F82C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xA1F8D4", Offset = "0xA1F8D4", VA = "0xA1F8D4")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__13))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xA1F974", Offset = "0xA1F974", VA = "0xA1F974", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xA1FA38", Offset = "0xA1FA38", VA = "0xA1FA38", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xA1FA7C", Offset = "0xA1FA7C", VA = "0xA1FA7C", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xA1F9B8", Offset = "0xA1F9B8", VA = "0xA1F9B8")]
		[IteratorStateMachine(typeof(<doFade>d__17))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xA1FAF4", Offset = "0xA1FAF4", VA = "0xA1FAF4", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xA1FB7C", Offset = "0xA1FB7C", VA = "0xA1FB7C")]
		public void ForceFadeComplete(float alphaValue)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xA1FC44", Offset = "0xA1FC44", VA = "0xA1FC44")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	[ExecuteInEditMode]
	public class ScreenOverlayDouble : PostEffectsBase
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScreenOverlay overlay1;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScreenOverlay overlay2;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShaderSingle;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterialSingle;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader overlayShader;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material overlayMaterial;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] keywordArray;

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xA1FF68", Offset = "0xA1FF68", VA = "0xA1FF68")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xA20074", Offset = "0xA20074", VA = "0xA20074")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xA200F4", Offset = "0xA200F4", VA = "0xA200F4")]
		private void OnBeforeRender()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xA20174", Offset = "0xA20174", VA = "0xA20174", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0xA201E0", Offset = "0xA201E0", VA = "0xA201E0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xA20644", Offset = "0xA20644", VA = "0xA20644")]
		public ScreenOverlayDouble()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class ScreenSphere : MonoBehaviour
	{
		[Token(Token = "0x17000113")]
		private float _intensity
		{
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xA2080C", Offset = "0xA2080C", VA = "0xA2080C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xA20814", Offset = "0xA20814", VA = "0xA20814")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public float intensity
		{
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xA2081C", Offset = "0xA2081C", VA = "0xA2081C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xA20824", Offset = "0xA20824", VA = "0xA20824")]
			set
			{
			}
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xA20950", Offset = "0xA20950", VA = "0xA20950")]
		public ScreenSphere()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class INOQ_ChestEvent : UnityEvent<INOQ_Chest>
	{
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xA20958", Offset = "0xA20958", VA = "0xA20958")]
		public INOQ_ChestEvent()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class INOQ_Chest : MonoBehaviour
	{
		[Token(Token = "0x20001F0")]
		public enum Direction
		{
			[Token(Token = "0x400092C")]
			autodetect,
			[Token(Token = "0x400092D")]
			x,
			[Token(Token = "0x400092E")]
			y,
			[Token(Token = "0x400092F")]
			z
		}

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The axis on which the chest should open. All other axis will be frozen.")]
		public Direction direction;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The game object for the lid.")]
		public GameObject lid;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The game object for the body.")]
		public GameObject body;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The game object for the handle.")]
		public GameObject handle;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum opening angle of the chest.")]
		public float maxAngle;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float minAngle;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float stepSize;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody bodyRigidbody;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Rigidbody handleRigidbody;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected FixedJoint handleJoint;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Rigidbody lidRigidbody;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected HingeJoint lidJoint;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected bool lidJointCreated;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Direction finalDirection;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float subDirection;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public INOQ_ChestEvent OnValueChanged;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float value;

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xA209A0", Offset = "0xA209A0", VA = "0xA209A0", Slot = "4")]
		public virtual float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xA209A8", Offset = "0xA209A8", VA = "0xA209A8", Slot = "5")]
		public virtual float GetNormalizedValue()
		{
			return default(float);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xA20B0C", Offset = "0xA20B0C", VA = "0xA20B0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xA211D4", Offset = "0xA211D4", VA = "0xA211D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xA21260", Offset = "0xA21260", VA = "0xA21260", Slot = "6")]
		protected virtual Direction DetectDirection()
		{
			return default(Direction);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xA215C4", Offset = "0xA215C4", VA = "0xA215C4", Slot = "7")]
		protected virtual void InitBody()
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xA21698", Offset = "0xA21698", VA = "0xA21698", Slot = "8")]
		protected virtual void InitLid()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xA217EC", Offset = "0xA217EC", VA = "0xA217EC", Slot = "9")]
		protected virtual void InitHandle()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xA20BA0", Offset = "0xA20BA0", VA = "0xA20BA0")]
		protected bool DetectSetup()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xA2198C", Offset = "0xA2198C", VA = "0xA2198C", Slot = "10")]
		protected virtual float CalculateValue()
		{
			return default(float);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xA21AF0", Offset = "0xA21AF0", VA = "0xA21AF0")]
		public INOQ_Chest()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	[CreateAssetMenu]
	public class Data : ScriptableObject
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<GameObject> prefabs;

		[Token(Token = "0x17000115")]
		public List<GameObject> Prefabs
		{
			[Token(Token = "0x60008F2")]
			[Address(RVA = "0xA21B0C", Offset = "0xA21B0C", VA = "0xA21B0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xA21B14", Offset = "0xA21B14", VA = "0xA21B14")]
		public Data()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class DataProvider : MonoBehaviour
	{
		[Token(Token = "0x4000931")]
		private const string ResourcesPath = "StartupObjects";

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xA21B90", Offset = "0xA21B90", VA = "0xA21B90")]
		public static Data GetData()
		{
			return null;
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xA21C2C", Offset = "0xA21C2C", VA = "0xA21C2C")]
		public DataProvider()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	internal static class StartupAutoLoader
	{
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xA21C34", Offset = "0xA21C34", VA = "0xA21C34")]
		[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
		private static void InitializeOnLoad()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xA21C50", Offset = "0xA21C50", VA = "0xA21C50")]
		private static void InstantiatePrefabs(List<GameObject> prefabs)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class ToggleSRDebuggerPanel : MonoBehaviour
	{
		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ToggleObject;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RectTransform rectSRDebug;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRCanvas vrCanvas;

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xA21DA0", Offset = "0xA21DA0", VA = "0xA21DA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xA22038", Offset = "0xA22038", VA = "0xA22038")]
		private void Update()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xA2203C", Offset = "0xA2203C", VA = "0xA2203C")]
		private void UpdateControllerInput()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xA21EC4", Offset = "0xA21EC4", VA = "0xA21EC4")]
		private void HideDebugPanel()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xA221D0", Offset = "0xA221D0", VA = "0xA221D0")]
		private void ShowDebugPanel()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xA22348", Offset = "0xA22348", VA = "0xA22348")]
		public ToggleSRDebuggerPanel()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class GameManager : MonoBehaviour
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameManager _instance;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PuzzleData> PuzzleList;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string currentSaveTitle;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int tvSaveMap;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string lastLoadScene;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int lastLoadWarp;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float gameTimePlayed;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int difficulty;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private int currentRespawnSaveSlot;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool showSubtitle;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Font FalloutFont;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TMP_FontAsset FalloutFontAsset;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material FalloutTMPMaterial;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IsEntitled;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<AudioSource> audioSourceList;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<AudioReverbZone> reverbZoneList;

		[Token(Token = "0x17000116")]
		public static GameManager Instance
		{
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0xA22350", Offset = "0xA22350", VA = "0xA22350")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public string CurrentSaveTitle
		{
			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xA22398", Offset = "0xA22398", VA = "0xA22398")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000900")]
			[Address(RVA = "0xA223A0", Offset = "0xA223A0", VA = "0xA223A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public int TvSaveMap
		{
			[Token(Token = "0x6000901")]
			[Address(RVA = "0xA223A8", Offset = "0xA223A8", VA = "0xA223A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000902")]
			[Address(RVA = "0xA223B0", Offset = "0xA223B0", VA = "0xA223B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public string LastLoadScene
		{
			[Token(Token = "0x6000903")]
			[Address(RVA = "0xA223B8", Offset = "0xA223B8", VA = "0xA223B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000904")]
			[Address(RVA = "0xA223C0", Offset = "0xA223C0", VA = "0xA223C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public int LastLoadWarp
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0xA223C8", Offset = "0xA223C8", VA = "0xA223C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000906")]
			[Address(RVA = "0xA223D0", Offset = "0xA223D0", VA = "0xA223D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public float GameTimePlayed
		{
			[Token(Token = "0x6000907")]
			[Address(RVA = "0xA223D8", Offset = "0xA223D8", VA = "0xA223D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000908")]
			[Address(RVA = "0xA223E0", Offset = "0xA223E0", VA = "0xA223E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public int Difficulty
		{
			[Token(Token = "0x6000909")]
			[Address(RVA = "0xA223E8", Offset = "0xA223E8", VA = "0xA223E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xA223F0", Offset = "0xA223F0", VA = "0xA223F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public int CurrentRespawnSaveSlot
		{
			[Token(Token = "0x600090B")]
			[Address(RVA = "0xA223F8", Offset = "0xA223F8", VA = "0xA223F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600090C")]
			[Address(RVA = "0xA22400", Offset = "0xA22400", VA = "0xA22400")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public bool ShowSubtitle
		{
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xA22408", Offset = "0xA22408", VA = "0xA22408")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xA22410", Offset = "0xA22410", VA = "0xA22410")]
			set
			{
			}
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xA2241C", Offset = "0xA2241C", VA = "0xA2241C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xA224B0", Offset = "0xA224B0", VA = "0xA224B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xA224DC", Offset = "0xA224DC", VA = "0xA224DC")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xA2290C", Offset = "0xA2290C", VA = "0xA2290C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xA226C8", Offset = "0xA226C8", VA = "0xA226C8")]
		private void PlayingAudioSourcePauseAndRegist()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xA22910", Offset = "0xA22910", VA = "0xA22910")]
		private void UnPauseAudioSourceList()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xA22C68", Offset = "0xA22C68", VA = "0xA22C68")]
		public GameManager()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class Initialization : MonoBehaviour
	{
		[Token(Token = "0x20001F7")]
		[CompilerGenerated]
		private sealed class <LoadAdditiveSplashScene>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private AsyncOperation <asyncLoad>5__2;

			[Token(Token = "0x1700011F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600091F")]
				[Address(RVA = "0xA23294", Offset = "0xA23294", VA = "0xA23294", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000921")]
				[Address(RVA = "0xA232DC", Offset = "0xA232DC", VA = "0xA232DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600091C")]
			[Address(RVA = "0xA2303C", Offset = "0xA2303C", VA = "0xA2303C")]
			[DebuggerHidden]
			public <LoadAdditiveSplashScene>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600091D")]
			[Address(RVA = "0xA231C4", Offset = "0xA231C4", VA = "0xA231C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600091E")]
			[Address(RVA = "0xA231C8", Offset = "0xA231C8", VA = "0xA231C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000920")]
			[Address(RVA = "0xA2329C", Offset = "0xA2329C", VA = "0xA2329C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xA22D48", Offset = "0xA22D48", VA = "0xA22D48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xA22FDC", Offset = "0xA22FDC", VA = "0xA22FDC")]
		[IteratorStateMachine(typeof(<LoadAdditiveSplashScene>d__1))]
		private IEnumerator LoadAdditiveSplashScene()
		{
			return null;
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xA22D50", Offset = "0xA22D50", VA = "0xA22D50")]
		public void QuestInitialize(bool async)
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xA23064", Offset = "0xA23064", VA = "0xA23064")]
		private void EntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xA231BC", Offset = "0xA231BC", VA = "0xA231BC")]
		public Initialization()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class SplashScene : MonoBehaviour
	{
		[Token(Token = "0x20001F9")]
		private enum SplashSceneState
		{
			[Token(Token = "0x400094D")]
			Wait,
			[Token(Token = "0x400094E")]
			OuterBrainLogo,
			[Token(Token = "0x400094F")]
			GameTextureLogo,
			[Token(Token = "0x4000950")]
			PlayWarning,
			[Token(Token = "0x4000951")]
			WaitForInput,
			[Token(Token = "0x4000952")]
			End
		}

		[Token(Token = "0x20001FA")]
		[CompilerGenerated]
		private sealed class <OnShowLogo>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FadeInCanvasGroup _fadeInCanvasGroup;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SplashScene <>4__this;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SplashSceneState _nextState;

			[Token(Token = "0x17000121")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600092C")]
				[Address(RVA = "0xA237D4", Offset = "0xA237D4", VA = "0xA237D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000122")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600092E")]
				[Address(RVA = "0xA2381C", Offset = "0xA2381C", VA = "0xA2381C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000929")]
			[Address(RVA = "0xA23634", Offset = "0xA23634", VA = "0xA23634")]
			[DebuggerHidden]
			public <OnShowLogo>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600092A")]
			[Address(RVA = "0xA236B4", Offset = "0xA236B4", VA = "0xA236B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600092B")]
			[Address(RVA = "0xA236B8", Offset = "0xA236B8", VA = "0xA236B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600092D")]
			[Address(RVA = "0xA237DC", Offset = "0xA237DC", VA = "0xA237DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001FB")]
		[CompilerGenerated]
		private sealed class <OnShowWarning>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SplashScene <>4__this;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SplashSceneState _nextState;

			[Token(Token = "0x17000123")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000932")]
				[Address(RVA = "0xA23920", Offset = "0xA23920", VA = "0xA23920", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000124")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000934")]
				[Address(RVA = "0xA23968", Offset = "0xA23968", VA = "0xA23968", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600092F")]
			[Address(RVA = "0xA2365C", Offset = "0xA2365C", VA = "0xA2365C")]
			[DebuggerHidden]
			public <OnShowWarning>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000930")]
			[Address(RVA = "0xA23824", Offset = "0xA23824", VA = "0xA23824", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000931")]
			[Address(RVA = "0xA23828", Offset = "0xA23828", VA = "0xA23828", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000933")]
			[Address(RVA = "0xA23928", Offset = "0xA23928", VA = "0xA23928", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001FC")]
		[CompilerGenerated]
		private sealed class <iLoadMainMenu>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400095D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000125")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000938")]
				[Address(RVA = "0xA23A6C", Offset = "0xA23A6C", VA = "0xA23A6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600093A")]
				[Address(RVA = "0xA23AB4", Offset = "0xA23AB4", VA = "0xA23AB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000935")]
			[Address(RVA = "0xA23684", Offset = "0xA23684", VA = "0xA23684")]
			[DebuggerHidden]
			public <iLoadMainMenu>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000936")]
			[Address(RVA = "0xA23970", Offset = "0xA23970", VA = "0xA23970", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000937")]
			[Address(RVA = "0xA23974", Offset = "0xA23974", VA = "0xA23974", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000939")]
			[Address(RVA = "0xA23A74", Offset = "0xA23A74", VA = "0xA23A74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SplashSceneState currentState;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeInCanvasGroup[] canvasGroups;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject xButtonGO;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SettingsSaveData settingsSaveData;

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xA232E4", Offset = "0xA232E4", VA = "0xA232E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xA233AC", Offset = "0xA233AC", VA = "0xA233AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xA234E0", Offset = "0xA234E0", VA = "0xA234E0")]
		[IteratorStateMachine(typeof(<OnShowLogo>d__7))]
		private IEnumerator OnShowLogo(FadeInCanvasGroup _fadeInCanvasGroup, SplashSceneState _nextState)
		{
			return null;
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xA2355C", Offset = "0xA2355C", VA = "0xA2355C")]
		[IteratorStateMachine(typeof(<OnShowWarning>d__8))]
		private IEnumerator OnShowWarning(SplashSceneState _nextState)
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xA235D4", Offset = "0xA235D4", VA = "0xA235D4")]
		[IteratorStateMachine(typeof(<iLoadMainMenu>d__9))]
		private IEnumerator iLoadMainMenu()
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xA232F0", Offset = "0xA232F0", VA = "0xA232F0")]
		private void LoadSettings()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xA236AC", Offset = "0xA236AC", VA = "0xA236AC")]
		public SplashScene()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	[RequireComponent(typeof(GrabbableUnityEvents))]
	public class GrabbableHighlighter : MonoBehaviour
	{
		[Token(Token = "0x20001FE")]
		[CompilerGenerated]
		private sealed class <CycleColor>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400096A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400096B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Material material;

			[Token(Token = "0x400096C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color startColor;

			[Token(Token = "0x400096D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Color endColor;

			[Token(Token = "0x400096E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float duration;

			[Token(Token = "0x400096F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GrabbableHighlighter <>4__this;

			[Token(Token = "0x4000970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x17000127")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600094B")]
				[Address(RVA = "0xA24A6C", Offset = "0xA24A6C", VA = "0xA24A6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600094D")]
				[Address(RVA = "0xA24AB4", Offset = "0xA24AB4", VA = "0xA24AB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000948")]
			[Address(RVA = "0xA24760", Offset = "0xA24760", VA = "0xA24760")]
			[DebuggerHidden]
			public <CycleColor>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000949")]
			[Address(RVA = "0xA24888", Offset = "0xA24888", VA = "0xA24888", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600094A")]
			[Address(RVA = "0xA2488C", Offset = "0xA2488C", VA = "0xA2488C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600094C")]
			[Address(RVA = "0xA24A74", Offset = "0xA24A74", VA = "0xA24A74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Determines if this highlighter is the active highlighter for the object the component is attached to. Only one active highlighter can be applied to a GameObject.")]
		public bool active;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Determines if the highlighted object should be unhighlighted when it is disabled.")]
		public bool unhighlightOnDisable;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool usesClonedObject;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject objectToAffect;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The emission colour of the texture will be the highlight colour but this percent darker.")]
		public float emissionDarken;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A custom material to use on the highlighted object.")]
		public Material customMaterial;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, Material[]> originalSharedRendererMaterials;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<string, Material[]> originalRendererMaterials;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Dictionary<string, Coroutine> faderRoutines;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected bool resetMainTexture;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color _color;

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xA23ABC", Offset = "0xA23ABC", VA = "0xA23ABC")]
		public static GrabbableHighlighter GetActiveHighlighter(GameObject obj)
		{
			return null;
		}

		[Token(Token = "0x600093C")]
		public virtual T GetOption<T>(Dictionary<string, object> options, string key)
		{
			return (T)null;
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xA23B48", Offset = "0xA23B48", VA = "0xA23B48", Slot = "5")]
		public virtual bool UsesClonedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xA23B50", Offset = "0xA23B50", VA = "0xA23B50", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xA23E34", Offset = "0xA23E34", VA = "0xA23E34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xA23E60", Offset = "0xA23E60", VA = "0xA23E60")]
		public void Initialise([Optional] Color? color, [Optional] GameObject affectObject, [Optional] Dictionary<string, object> options)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xA24004", Offset = "0xA24004", VA = "0xA24004")]
		public void ResetHighlighter()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xA24010", Offset = "0xA24010", VA = "0xA24010")]
		public void Highlight()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xA23B60", Offset = "0xA23B60", VA = "0xA23B60")]
		public void Unhighlight()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xA24054", Offset = "0xA24054", VA = "0xA24054", Slot = "7")]
		protected virtual void StoreOriginalMaterials()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xA24208", Offset = "0xA24208", VA = "0xA24208", Slot = "8")]
		protected virtual void ChangeToHighlightColor(Color color, float duration = 0f)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xA2468C", Offset = "0xA2468C", VA = "0xA2468C", Slot = "9")]
		[IteratorStateMachine(typeof(<CycleColor>d__22))]
		protected virtual IEnumerator CycleColor(Material material, Color startColor, Color endColor, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xA24788", Offset = "0xA24788", VA = "0xA24788")]
		public GrabbableHighlighter()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class SnapZoneVRTKLike : SnapZone
	{
		[Token(Token = "0x2000200")]
		[CompilerGenerated]
		private sealed class <DoSnapLerp>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable grab;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SnapZoneVRTKLike <>4__this;

			[Token(Token = "0x4000988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rigidbody <heldItemRigid>5__2;

			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <heldItemWasKinematic>5__3;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 <targetPosition>5__4;

			[Token(Token = "0x400098B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Quaternion <targetRotation>5__5;

			[Token(Token = "0x400098C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <elapsedTime>5__6;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000978")]
				[Address(RVA = "0xA28990", Offset = "0xA28990", VA = "0xA28990", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600097A")]
				[Address(RVA = "0xA289D8", Offset = "0xA289D8", VA = "0xA289D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000975")]
			[Address(RVA = "0xA28278", Offset = "0xA28278", VA = "0xA28278")]
			[DebuggerHidden]
			public <DoSnapLerp>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000976")]
			[Address(RVA = "0xA282A0", Offset = "0xA282A0", VA = "0xA282A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000977")]
			[Address(RVA = "0xA282A4", Offset = "0xA282A4", VA = "0xA282A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000979")]
			[Address(RVA = "0xA28998", Offset = "0xA28998", VA = "0xA28998", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000201")]
		[CompilerGenerated]
		private sealed class <DoSnapLerpEndOfFrame>d__55 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SnapZoneVRTKLike <>4__this;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Grabbable grab;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600097E")]
				[Address(RVA = "0xA28ACC", Offset = "0xA28ACC", VA = "0xA28ACC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000980")]
				[Address(RVA = "0xA28B14", Offset = "0xA28B14", VA = "0xA28B14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600097B")]
			[Address(RVA = "0xA289E0", Offset = "0xA289E0", VA = "0xA289E0")]
			[DebuggerHidden]
			public <DoSnapLerpEndOfFrame>d__55(int <>1__state)
			{
			}

			[Token(Token = "0x600097C")]
			[Address(RVA = "0xA28A08", Offset = "0xA28A08", VA = "0xA28A08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600097D")]
			[Address(RVA = "0xA28A0C", Offset = "0xA28A0C", VA = "0xA28A0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600097F")]
			[Address(RVA = "0xA28AD4", Offset = "0xA28AD4", VA = "0xA28AD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float snapDuration;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected GameObject highlightContainer;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected GameObject highlightObject;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected GameObject highlightEditorObject;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject highlightObjectPrefab;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color highlightColor;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool highlightAlwaysActive;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Material customHeighlightMaterial;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected bool isHighlighted;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		protected bool isSnapped;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected GrabbableHighlighter objectHighlighter;

		[Token(Token = "0x400097C")]
		protected const string HIGHLIGHT_CONTAINER_NAME = "HighlightContainer";

		[Token(Token = "0x400097D")]
		protected const string HIGHLIGHT_OBJECT_NAME = "HighlightObject";

		[Token(Token = "0x400097E")]
		protected const string HIGHLIGHT_EDITOR_OBJECT_NAME = "EditorHighlightObject";

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private float VibrateFrequency;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private float VibrateAmplitude;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float VibrateDuration;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private List<Grabbable> _enterdObjectList;

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xA24ABC", Offset = "0xA24ABC", VA = "0xA24ABC", Slot = "8")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xA24AF4", Offset = "0xA24AF4", VA = "0xA24AF4", Slot = "9")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xA24B74", Offset = "0xA24B74", VA = "0xA24B74", Slot = "4")]
		public override void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xA24B94", Offset = "0xA24B94", VA = "0xA24B94")]
		[IteratorStateMachine(typeof(<DoSnapLerp>d__20))]
		private IEnumerator DoSnapLerp(Grabbable grab)
		{
			return null;
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xA24C08", Offset = "0xA24C08", VA = "0xA24C08")]
		private void SnappedItemHighlight(Grabber grabber)
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xA24D10", Offset = "0xA24D10", VA = "0xA24D10")]
		private void SnappedItemUnhighlight(Grabber grabber)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xA24E18", Offset = "0xA24E18", VA = "0xA24E18")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xA24F14", Offset = "0xA24F14", VA = "0xA24F14")]
		private void enableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xA250B4", Offset = "0xA250B4", VA = "0xA250B4", Slot = "10")]
		protected virtual string ObjectPath(string name)
		{
			return null;
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xA25100", Offset = "0xA25100", VA = "0xA25100", Slot = "11")]
		protected virtual void SetObjectHighlight()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xA2517C", Offset = "0xA2517C", VA = "0xA2517C", Slot = "12")]
		protected virtual void ToggleHighlightColor()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xA25230", Offset = "0xA25230", VA = "0xA25230", Slot = "13")]
		protected virtual void GenerateContainer()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xA2547C", Offset = "0xA2547C", VA = "0xA2547C", Slot = "14")]
		protected virtual void DisableHighlightShadows()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xA2557C", Offset = "0xA2557C", VA = "0xA2557C", Slot = "15")]
		protected virtual void SetContainer()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xA25630", Offset = "0xA25630", VA = "0xA25630", Slot = "16")]
		protected virtual void GenerateObjects()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xA256F0", Offset = "0xA256F0", VA = "0xA256F0", Slot = "17")]
		public virtual void InitaliseHighlightObject(bool removeOldObject = false)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xA257B4", Offset = "0xA257B4", VA = "0xA257B4", Slot = "18")]
		protected virtual void DeleteHighlightObject()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xA25834", Offset = "0xA25834", VA = "0xA25834", Slot = "19")]
		protected virtual bool ValidSnapObject(Grabbable interactableObjectCheck, bool grabState, bool checkGrabState = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xA258C8", Offset = "0xA258C8", VA = "0xA258C8", Slot = "20")]
		protected virtual void ToggleHighlight(Grabbable checkObject, bool state)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xA2598C", Offset = "0xA2598C", VA = "0xA2598C", Slot = "21")]
		protected virtual void CopyObject(GameObject objectBlueprint, ref GameObject clonedObject, string givenName)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xA25BD4", Offset = "0xA25BD4", VA = "0xA25BD4", Slot = "22")]
		protected virtual void GenerateHighlightObject()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xA25E4C", Offset = "0xA25E4C", VA = "0xA25E4C", Slot = "23")]
		protected virtual void SetHighlightObjectActive(bool state)
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xA25EE0", Offset = "0xA25EE0", VA = "0xA25EE0", Slot = "24")]
		protected virtual void GenerateEditorHighlightObject()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xA26120", Offset = "0xA26120", VA = "0xA26120", Slot = "25")]
		protected virtual void CleanHighlightObject(GameObject objectToClean)
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xA264E0", Offset = "0xA264E0", VA = "0xA264E0", Slot = "26")]
		protected virtual void InitialiseHighlighter()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xA26644", Offset = "0xA26644", VA = "0xA26644", Slot = "27")]
		protected virtual void ChooseDestroyType(Transform deleteTransform)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xA266EC", Offset = "0xA266EC", VA = "0xA266EC", Slot = "28")]
		protected virtual void ChooseDestroyType(GameObject deleteObject)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xA26774", Offset = "0xA26774", VA = "0xA26774", Slot = "29")]
		protected virtual void ChooseDestroyType(Component deleteComponent)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xA267FC", Offset = "0xA267FC", VA = "0xA267FC", Slot = "30")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xA26930", Offset = "0xA26930", VA = "0xA26930")]
		protected void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xA269C8", Offset = "0xA269C8", VA = "0xA269C8")]
		protected void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xA26A60", Offset = "0xA26A60", VA = "0xA26A60")]
		private void EnteredItemReleaseEvent()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xA26D40", Offset = "0xA26D40", VA = "0xA26D40")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xA26DB0", Offset = "0xA26DB0", VA = "0xA26DB0", Slot = "31")]
		protected virtual void CheckCanSnap(Grabbable interactableObjectCheck)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xA26FB4", Offset = "0xA26FB4", VA = "0xA26FB4", Slot = "32")]
		protected virtual void CheckCanUnsnap(Grabbable interactableObjectCheck)
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xA27068", Offset = "0xA27068", VA = "0xA27068")]
		public void ForceSnap(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xA27124", Offset = "0xA27124", VA = "0xA27124")]
		[IteratorStateMachine(typeof(<DoSnapLerpEndOfFrame>d__55))]
		private IEnumerator DoSnapLerpEndOfFrame(Grabbable grab)
		{
			return null;
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xA27198", Offset = "0xA27198", VA = "0xA27198")]
		public SnapZoneVRTKLike()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class HealthConsumable : ItemPicker
	{
		[Token(Token = "0x2000203")]
		[CompilerGenerated]
		private sealed class <TryHeal>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400099B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HealthConsumable <>4__this;

			[Token(Token = "0x1700012D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600098A")]
				[Address(RVA = "0xA2924C", Offset = "0xA2924C", VA = "0xA2924C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600098C")]
				[Address(RVA = "0xA29294", Offset = "0xA29294", VA = "0xA29294", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000987")]
			[Address(RVA = "0xA28C20", Offset = "0xA28C20", VA = "0xA28C20")]
			[DebuggerHidden]
			public <TryHeal>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000988")]
			[Address(RVA = "0xA29190", Offset = "0xA29190", VA = "0xA29190", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000989")]
			[Address(RVA = "0xA29194", Offset = "0xA29194", VA = "0xA29194", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600098B")]
			[Address(RVA = "0xA29254", Offset = "0xA29254", VA = "0xA29254", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private int healthHealed;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public float healTime;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip playerHealAudio;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip healingAudio;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Renderer meshRenderer;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Color healingColor;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Color defaultColor;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioSource audioSource;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Coroutine co;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool healing;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xA28B1C", Offset = "0xA28B1C", VA = "0xA28B1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xA28BB8", Offset = "0xA28BB8", VA = "0xA28BB8")]
		[IteratorStateMachine(typeof(<TryHeal>d__11))]
		private IEnumerator TryHeal()
		{
			return null;
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xA28C48", Offset = "0xA28C48", VA = "0xA28C48")]
		private void Heal()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xA28EA8", Offset = "0xA28EA8", VA = "0xA28EA8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xA2902C", Offset = "0xA2902C", VA = "0xA2902C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xA290FC", Offset = "0xA290FC", VA = "0xA290FC")]
		public HealthConsumable()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class Inventory : MonoBehaviour
	{
		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject inventoryRoot;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public TextMeshProUGUI itemInfoText;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_FontAsset itemInfoDefaultFont;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI itemExplanationText;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TMP_FontAsset itemExplanationDefaultFont;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private InventorySlot[] InventorySlots;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private WeaponSlot[] WeaponSlots;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int selectedInventorySlot;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int selectedWeaponSlot;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ItemPicker heldItem;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioClip addItemAudio;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioClip inventoryFullAudio;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Grabber leftGrabber;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Grabber rightGrabber;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TMP_FontAsset itemInfoFalloutFont;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TMP_FontAsset itemExplanationFalloutFont;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioSource audioSource;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xA2929C", Offset = "0xA2929C", VA = "0xA2929C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xA29D48", Offset = "0xA29D48", VA = "0xA29D48")]
		private void Start()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xA29DE4", Offset = "0xA29DE4", VA = "0xA29DE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xA2A03C", Offset = "0xA2A03C", VA = "0xA2A03C")]
		public void ForceUpdateSlots()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xA29DE8", Offset = "0xA29DE8", VA = "0xA29DE8")]
		private void UpdateControllerInput()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xA2AFF4", Offset = "0xA2AFF4", VA = "0xA2AFF4")]
		private void OnInventorySelected(int _slotIndex)
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xA2B4BC", Offset = "0xA2B4BC", VA = "0xA2B4BC")]
		private void OnInventoryUnselect(int _slotIndex)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xA2B72C", Offset = "0xA2B72C", VA = "0xA2B72C")]
		private void OnWeaponSelected(int _slotIndex)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xA2BAF8", Offset = "0xA2BAF8", VA = "0xA2BAF8")]
		private void OnWeaponUnselect(int _slotIndex)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xA2BD68", Offset = "0xA2BD68", VA = "0xA2BD68")]
		public void ToggleInventory(bool flag)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xA2A594", Offset = "0xA2A594", VA = "0xA2A594")]
		private void ToggleInventory()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xA2A928", Offset = "0xA2A928", VA = "0xA2A928")]
		private void DrawItem()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xA2C210", Offset = "0xA2C210", VA = "0xA2C210")]
		public void PlayInventorySound(bool _isFull)
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xA2C2C4", Offset = "0xA2C2C4", VA = "0xA2C2C4")]
		public Inventory()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class InventoryManager : MonoBehaviour
	{
		[Token(Token = "0x2000206")]
		public delegate void OnAddItemDelegate(bool flag);

		[Token(Token = "0x2000207")]
		public delegate void OnRemoveItemDelegate();

		[Token(Token = "0x2000208")]
		public delegate void OnInventoryItemListChangeDelegate();

		[Token(Token = "0x2000209")]
		public delegate void OnStorageItemListChangeDelegate();

		[Token(Token = "0x200020A")]
		public delegate void OnWeaponListChangeDelegate();

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InventoryManager _instance;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static ItemInfo ItemInfo;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InventoryItem[] inventoryItemList;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InventoryItem[] storageItemList;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InventoryItem[] weaponList;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject[] ItemPrefabs;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Texture[] ItemIcon;

		[Token(Token = "0x1700012F")]
		public static InventoryManager Instance
		{
			[Token(Token = "0x600099B")]
			[Address(RVA = "0xA2C2D4", Offset = "0xA2C2D4", VA = "0xA2C2D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public InventoryItem[] InventoryItemList
		{
			[Token(Token = "0x600099C")]
			[Address(RVA = "0xA2C32C", Offset = "0xA2C32C", VA = "0xA2C32C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099D")]
			[Address(RVA = "0xA2C334", Offset = "0xA2C334", VA = "0xA2C334")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public InventoryItem[] StorageItemList
		{
			[Token(Token = "0x600099E")]
			[Address(RVA = "0xA2C354", Offset = "0xA2C354", VA = "0xA2C354")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099F")]
			[Address(RVA = "0xA2C35C", Offset = "0xA2C35C", VA = "0xA2C35C")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public InventoryItem[] WeaponList
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0xA2C37C", Offset = "0xA2C37C", VA = "0xA2C37C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0xA2C384", Offset = "0xA2C384", VA = "0xA2C384")]
			set
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event OnAddItemDelegate OnAddItem
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xA2972C", Offset = "0xA2972C", VA = "0xA2972C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009A3")]
			[Address(RVA = "0xA2C3A4", Offset = "0xA2C3A4", VA = "0xA2C3A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event OnRemoveItemDelegate OnRemoveItem
		{
			[Token(Token = "0x60009A4")]
			[Address(RVA = "0xA2C440", Offset = "0xA2C440", VA = "0xA2C440")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xA2C4DC", Offset = "0xA2C4DC", VA = "0xA2C4DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event OnInventoryItemListChangeDelegate OnInventoryItemListChange
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xA2C578", Offset = "0xA2C578", VA = "0xA2C578")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0xA2C614", Offset = "0xA2C614", VA = "0xA2C614")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event OnStorageItemListChangeDelegate OnStorageItemListChange
		{
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0xA2C6B0", Offset = "0xA2C6B0", VA = "0xA2C6B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009A9")]
			[Address(RVA = "0xA2C74C", Offset = "0xA2C74C", VA = "0xA2C74C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event OnWeaponListChangeDelegate OnWeaponListChange
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0xA2C7E8", Offset = "0xA2C7E8", VA = "0xA2C7E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0xA2C884", Offset = "0xA2C884", VA = "0xA2C884")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xA2C920", Offset = "0xA2C920", VA = "0xA2C920")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xA2C9BC", Offset = "0xA2C9BC", VA = "0xA2C9BC")]
		public void ResetInventory()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xA2CA1C", Offset = "0xA2CA1C", VA = "0xA2CA1C")]
		private void ClearWeapons()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xA2CAC4", Offset = "0xA2CAC4", VA = "0xA2CAC4")]
		private void ClearInventory()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xA2CB6C", Offset = "0xA2CB6C", VA = "0xA2CB6C")]
		private void ClearStorage()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xA2CCCC", Offset = "0xA2CCCC", VA = "0xA2CCCC")]
		public bool AddItem(PrefabInstance _item)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xA2BE2C", Offset = "0xA2BE2C", VA = "0xA2BE2C")]
		public GameObject RemoveItem(int _itemListIndex)
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xA2CDE0", Offset = "0xA2CDE0", VA = "0xA2CDE0")]
		public static int GetMaxStack(string prefabName)
		{
			return default(int);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xA2CEA8", Offset = "0xA2CEA8", VA = "0xA2CEA8")]
		public int AddAmmo(PrefabInstance _item)
		{
			return default(int);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xA2D098", Offset = "0xA2D098", VA = "0xA2D098")]
		public int DepleteAmmo(string _ammoType, int _ammoNeeded)
		{
			return default(int);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xA2D1E0", Offset = "0xA2D1E0", VA = "0xA2D1E0")]
		public void AddWeapon(int _weaponSlotIndex, PrefabInstance _weapon)
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xA2D26C", Offset = "0xA2D26C", VA = "0xA2D26C")]
		public bool AddWeapon(PrefabInstance _weapon)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xA2BFC8", Offset = "0xA2BFC8", VA = "0xA2BFC8")]
		public GameObject RemoveWeapon(int _weaponListIndex)
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xA2D410", Offset = "0xA2D410", VA = "0xA2D410")]
		public bool SwapWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xA2D504", Offset = "0xA2D504", VA = "0xA2D504")]
		public Texture GetTexture(string _itemName)
		{
			return null;
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xA2D5A4", Offset = "0xA2D5A4", VA = "0xA2D5A4")]
		public GameObject GetItemPrefab(string _itemName)
		{
			return null;
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xA2D644", Offset = "0xA2D644", VA = "0xA2D644")]
		public InventoryManager()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class InventoryPoint : MonoBehaviour
	{
		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandAnimation HandAnimator;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Sphere;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xA2DBD0", Offset = "0xA2DBD0", VA = "0xA2DBD0")]
		private void Start()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xA2DE24", Offset = "0xA2DE24", VA = "0xA2DE24")]
		private void UpdateOffHand(bool isLeftHand)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xA2BE00", Offset = "0xA2BE00", VA = "0xA2BE00")]
		public void SetPointing(bool on)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xA2DE68", Offset = "0xA2DE68", VA = "0xA2DE68")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xA2DF20", Offset = "0xA2DF20", VA = "0xA2DF20")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xA2DFD8", Offset = "0xA2DFD8", VA = "0xA2DFD8")]
		public InventoryPoint()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class InventorySlot : MonoBehaviour
	{
		[Token(Token = "0x200020D")]
		public delegate void OnInventorySelectedDelegate(int slotIndex);

		[Token(Token = "0x200020E")]
		public delegate void OnInventoryUnselectDelegate(int slotIndex);

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SlotIndex;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RawImage ItemIconImage;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text ItemCountText;

		[Token(Token = "0x1400000F")]
		public event OnInventorySelectedDelegate OnInventorySelected
		{
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xA2988C", Offset = "0xA2988C", VA = "0xA2988C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xA2DFE8", Offset = "0xA2DFE8", VA = "0xA2DFE8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event OnInventoryUnselectDelegate OnInventoryUnselect
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xA299EC", Offset = "0xA299EC", VA = "0xA299EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xA2E084", Offset = "0xA2E084", VA = "0xA2E084")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xA2E120", Offset = "0xA2E120", VA = "0xA2E120")]
		private void Start()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xA2A0D8", Offset = "0xA2A0D8", VA = "0xA2A0D8")]
		public void UpdateDisplay()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xA2E208", Offset = "0xA2E208", VA = "0xA2E208")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xA2E2BC", Offset = "0xA2E2BC", VA = "0xA2E2BC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xA2E368", Offset = "0xA2E368", VA = "0xA2E368")]
		public InventorySlot()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class InventorySphere : MonoBehaviour
	{
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xA2E4B8", Offset = "0xA2E4B8", VA = "0xA2E4B8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xA2E88C", Offset = "0xA2E88C", VA = "0xA2E88C")]
		public InventorySphere()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[RequireComponent(typeof(GrabbableHighlighter))]
	[RequireComponent(typeof(GrabbableUnityEvents))]
	[RequireComponent(typeof(GrabbableHaptics))]
	[RequireComponent(typeof(Grabbable))]
	public class ItemPicker : PrefabInstance
	{
		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool AddItemToInventoryOnPickup;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DestroyObjectOnPickup;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool AutoAddItemOnStart;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Grabber grabber;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected Grabbable grabbable;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 LeftOffset;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 RightOffset;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x17000133")]
		public Grabber ItemGrabber
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xA2E894", Offset = "0xA2E894", VA = "0xA2E894")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		public Grabbable ItemGrabbable
		{
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xA2E89C", Offset = "0xA2E89C", VA = "0xA2E89C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xA2E8A4", Offset = "0xA2E8A4", VA = "0xA2E8A4", Slot = "4")]
		public virtual void SetDefaultValues()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xA2E934", Offset = "0xA2E934", VA = "0xA2E934")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xA2EBF8", Offset = "0xA2EBF8", VA = "0xA2EBF8")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xA2EC10", Offset = "0xA2EC10", VA = "0xA2EC10", Slot = "5")]
		public virtual void PickupItem()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xA2ED48", Offset = "0xA2ED48", VA = "0xA2ED48")]
		public void PickupItem(Grabber grabber)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xA2AF04", Offset = "0xA2AF04", VA = "0xA2AF04")]
		public void DropItem()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xA29100", Offset = "0xA29100", VA = "0xA29100")]
		public ItemPicker()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class WeaponSlot : MonoBehaviour
	{
		[Token(Token = "0x2000212")]
		public delegate void OnWeaponSelectedDelegate(int slotIndex);

		[Token(Token = "0x2000213")]
		public delegate void OnWeaponUnselectDelegate(int slotIndex);

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int SlotIndex;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RawImage WeaponIconImage;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text AmmoCountText;

		[Token(Token = "0x14000011")]
		public event OnWeaponSelectedDelegate OnWeaponSelected
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0xA29B4C", Offset = "0xA29B4C", VA = "0xA29B4C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xA2ED58", Offset = "0xA2ED58", VA = "0xA2ED58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event OnWeaponUnselectDelegate OnWeaponUnselect
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xA29CAC", Offset = "0xA29CAC", VA = "0xA29CAC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0xA2EDF4", Offset = "0xA2EDF4", VA = "0xA2EDF4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xA2EE90", Offset = "0xA2EE90", VA = "0xA2EE90")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xA2A380", Offset = "0xA2A380", VA = "0xA2A380")]
		public void UpdateDisplay()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xA2F160", Offset = "0xA2F160", VA = "0xA2F160")]
		private void UpdateAmmoCount()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xA2F374", Offset = "0xA2F374", VA = "0xA2F374")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xA2F428", Offset = "0xA2F428", VA = "0xA2F428")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xA2F4D4", Offset = "0xA2F4D4", VA = "0xA2F4D4")]
		public WeaponSlot()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class LanguageManager : MonoBehaviour
	{
		[Token(Token = "0x2000215")]
		public enum Language
		{
			[Token(Token = "0x40009D7")]
			english,
			[Token(Token = "0x40009D8")]
			japanese,
			[Token(Token = "0x40009D9")]
			french,
			[Token(Token = "0x40009DA")]
			german,
			[Token(Token = "0x40009DB")]
			italian,
			[Token(Token = "0x40009DC")]
			spanish,
			[Token(Token = "0x40009DD")]
			portugese
		}

		[Token(Token = "0x2000216")]
		public delegate void LanguageChangedEventHandler();

		[Token(Token = "0x2000217")]
		[CompilerGenerated]
		private sealed class <CoroutineLoadLanguage>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LanguageManager <>4__this;

			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Language lang;

			[Token(Token = "0x17000136")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A16")]
				[Address(RVA = "0xA301F4", Offset = "0xA301F4", VA = "0xA301F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000137")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A18")]
				[Address(RVA = "0xA3023C", Offset = "0xA3023C", VA = "0xA3023C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A13")]
			[Address(RVA = "0xA2FA40", Offset = "0xA2FA40", VA = "0xA2FA40")]
			[DebuggerHidden]
			public <CoroutineLoadLanguage>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xA2FBE0", Offset = "0xA2FBE0", VA = "0xA2FBE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xA2FBE4", Offset = "0xA2FBE4", VA = "0xA2FBE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xA301FC", Offset = "0xA301FC", VA = "0xA301FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LanguageManager _instance;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Language CurrentLanguage;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<TextAsset> poFiles;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Hashtable textTable;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool loadLock;

		[Token(Token = "0x17000135")]
		public static LanguageManager Instance
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0xA2F624", Offset = "0xA2F624", VA = "0xA2F624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000013")]
		public static event LanguageChangedEventHandler onLanguageChangedEvent
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0xA2F66C", Offset = "0xA2F66C", VA = "0xA2F66C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0xA2F728", Offset = "0xA2F728", VA = "0xA2F728")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xA2F7E4", Offset = "0xA2F7E4", VA = "0xA2F7E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xA2F8E0", Offset = "0xA2F8E0", VA = "0xA2F8E0")]
		public void LoadLanguage()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xA2F98C", Offset = "0xA2F98C", VA = "0xA2F98C")]
		public void LoadLanguage(Language lang)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xA2F914", Offset = "0xA2F914", VA = "0xA2F914")]
		[IteratorStateMachine(typeof(<CoroutineLoadLanguage>d__15))]
		private IEnumerator CoroutineLoadLanguage(Language lang)
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xA2B3C0", Offset = "0xA2B3C0", VA = "0xA2B3C0")]
		public string GetText(string key)
		{
			return null;
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xA2FA68", Offset = "0xA2FA68", VA = "0xA2FA68")]
		public LanguageManager()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class SwapFont : MonoBehaviour
	{
		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text textToTranslate;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Font defaultFont;

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xA30244", Offset = "0xA30244", VA = "0xA30244")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xA303B0", Offset = "0xA303B0", VA = "0xA303B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xA303B4", Offset = "0xA303B4", VA = "0xA303B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xA3042C", Offset = "0xA3042C", VA = "0xA3042C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xA304A4", Offset = "0xA304A4", VA = "0xA304A4")]
		private void LanguageChangedEvent()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xA302F4", Offset = "0xA302F4", VA = "0xA302F4")]
		private void UpdateFont()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xA304A8", Offset = "0xA304A8", VA = "0xA304A8")]
		public SwapFont()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class UILocalizeText : MonoBehaviour
	{
		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string TranslationKey;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text textToTranslate;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Font defaultFont;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI tmpToTranslate;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TMP_FontAsset defaultFontAsset;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material defaultTMPMaterial;

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xA304B0", Offset = "0xA304B0", VA = "0xA304B0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xA306BC", Offset = "0xA306BC", VA = "0xA306BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xA306C0", Offset = "0xA306C0", VA = "0xA306C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xA30738", Offset = "0xA30738", VA = "0xA30738")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xA307B0", Offset = "0xA307B0", VA = "0xA307B0")]
		private void LanguageChangedEvent()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xA30BAC", Offset = "0xA30BAC", VA = "0xA30BAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xA307B4", Offset = "0xA307B4", VA = "0xA307B4")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xA30BD8", Offset = "0xA30BD8", VA = "0xA30BD8")]
		public UILocalizeText()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class UILocalizeTMP : MonoBehaviour
	{
		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string TranslationKey;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProUGUI tmpToTranslate;

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xA30C28", Offset = "0xA30C28", VA = "0xA30C28")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xA30D0C", Offset = "0xA30D0C", VA = "0xA30D0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xA30D10", Offset = "0xA30D10", VA = "0xA30D10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xA30D88", Offset = "0xA30D88", VA = "0xA30D88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xA30E00", Offset = "0xA30E00", VA = "0xA30E00")]
		private void LanguageChangedEvent()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xA30F80", Offset = "0xA30F80", VA = "0xA30F80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xA30E04", Offset = "0xA30E04", VA = "0xA30E04")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xA30FAC", Offset = "0xA30FAC", VA = "0xA30FAC")]
		public UILocalizeTMP()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class Map : MonoBehaviour
	{
		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Map map;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HandModelSelector handModelSelectorLeft;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HandModelSelector handModelSelectorRight;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform mapRoot;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform stampToolsRoot;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform stampsRoot;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject stampObject;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Material[] stampMaterials;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEngine.UI.Slider inkSlider;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform MapPointLeft;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform MapPointRight;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform[] Maps;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioClip StampAudio;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioClip EraseAudio;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float ink;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MapData currentMapData;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<float, StampData> stampList;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandType previousHandType;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioSource audioSource;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private List<MapData> mapData;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private bool[] unlockedMaps;

		[Token(Token = "0x17000138")]
		private bool CanShowStamp
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0xA31044", Offset = "0xA31044", VA = "0xA31044")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000139")]
		public bool IsMapOpened
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xA310A0", Offset = "0xA310A0", VA = "0xA310A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xA30FFC", Offset = "0xA30FFC", VA = "0xA30FFC")]
		public static Map GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xA310C8", Offset = "0xA310C8", VA = "0xA310C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xA31194", Offset = "0xA31194", VA = "0xA31194")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xA313D4", Offset = "0xA313D4", VA = "0xA313D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xA31588", Offset = "0xA31588", VA = "0xA31588")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xA318FC", Offset = "0xA318FC", VA = "0xA318FC")]
		private void UpdateStamps()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xA313D8", Offset = "0xA313D8", VA = "0xA313D8")]
		private void UpdateMapVisibility()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xA32008", Offset = "0xA32008", VA = "0xA32008")]
		private void ToggleMap(bool _flag)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xA317B8", Offset = "0xA317B8", VA = "0xA317B8")]
		public void UpdateMap()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xA312F4", Offset = "0xA312F4", VA = "0xA312F4")]
		private void UpdateDisplay(bool _isLeftHand)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xA31C8C", Offset = "0xA31C8C", VA = "0xA31C8C")]
		private void InstantiateStamp(StampData _stampData)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xA32320", Offset = "0xA32320", VA = "0xA32320")]
		public void AddStamp(Vector3 stampPoint, Material stampMaterial)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xA32638", Offset = "0xA32638", VA = "0xA32638")]
		public void DeleteStamp(GameObject _stamp)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xA327B8", Offset = "0xA327B8", VA = "0xA327B8")]
		public void ClearStamps()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xA322E0", Offset = "0xA322E0", VA = "0xA322E0")]
		private void UpdateInk(float _amount)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xA32ADC", Offset = "0xA32ADC", VA = "0xA32ADC")]
		public List<MapData> GetMapData()
		{
			return null;
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xA32AE4", Offset = "0xA32AE4", VA = "0xA32AE4")]
		public void SetMapData(List<MapData> _mapData)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xA32B74", Offset = "0xA32B74", VA = "0xA32B74")]
		public void ClearMapData()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xA315F8", Offset = "0xA315F8", VA = "0xA315F8")]
		public MapData GetMapData(int _mapID)
		{
			return null;
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xA32200", Offset = "0xA32200", VA = "0xA32200")]
		public bool SetMapData(MapData _mapData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xA32BE4", Offset = "0xA32BE4", VA = "0xA32BE4")]
		public bool[] GetUnlockedMapsData()
		{
			return null;
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xA32BEC", Offset = "0xA32BEC", VA = "0xA32BEC")]
		public void SetUnlockedMapsData(bool[] _unlockedMaps)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xA31070", Offset = "0xA31070", VA = "0xA31070")]
		public bool GetUnlockedMap(int _mapID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xA32C54", Offset = "0xA32C54", VA = "0xA32C54")]
		public void SetUnlockedMap(int _mapID, bool _flag)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xA32C88", Offset = "0xA32C88", VA = "0xA32C88")]
		public Map()
		{
		}
	}
	[Token(Token = "0x200021C")]
	[RequireComponent(typeof(GrabbableHaptics))]
	[RequireComponent(typeof(GrabbableUnityEvents))]
	[RequireComponent(typeof(Grabbable))]
	[RequireComponent(typeof(GrabbableHighlighter))]
	public class MapPicker : ItemPicker
	{
		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int[] MapsToUnlock;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioClip AudioPickup;

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xA32D98", Offset = "0xA32D98", VA = "0xA32D98", Slot = "4")]
		public override void SetDefaultValues()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xA32E28", Offset = "0xA32E28", VA = "0xA32E28", Slot = "5")]
		public override void PickupItem()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xA32F5C", Offset = "0xA32F5C", VA = "0xA32F5C")]
		public MapPicker()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class PlayerDeadZone : MonoBehaviour
	{
		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xA32F60", Offset = "0xA32F60", VA = "0xA32F60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xA33018", Offset = "0xA33018", VA = "0xA33018")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xA3323C", Offset = "0xA3323C", VA = "0xA3323C")]
		public PlayerDeadZone()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class Stamp : MonoBehaviour
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Map map;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform stampPoint;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer stampBodyRenderer;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer stampTipRenderer;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material MaterialBodyDraw;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material MaterialBodyErase;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip StampPickAudio;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool eraseMode;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float stampTimer;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource audioSource;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xA33244", Offset = "0xA33244", VA = "0xA33244")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xA332E4", Offset = "0xA332E4", VA = "0xA332E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xA33380", Offset = "0xA33380", VA = "0xA33380")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xA33788", Offset = "0xA33788", VA = "0xA33788")]
		public Stamp()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public enum HandType
	{
		[Token(Token = "0x4000A0E")]
		Hand,
		[Token(Token = "0x4000A0F")]
		Flashlight,
		[Token(Token = "0x4000A10")]
		Stamp,
		[Token(Token = "0x4000A11")]
		Pistol,
		[Token(Token = "0x4000A12")]
		SawedOff,
		[Token(Token = "0x4000A13")]
		SMG,
		[Token(Token = "0x4000A14")]
		None
	}
	[Token(Token = "0x2000220")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<HandModelSelector> handModelSelectors;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHandedness HandSide;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandType currentHandType;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] handModels;

		[Token(Token = "0x1700013A")]
		public HandType CurrentHandType
		{
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0xA33790", Offset = "0xA33790", VA = "0xA33790")]
			get
			{
				return default(HandType);
			}
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xA33798", Offset = "0xA33798", VA = "0xA33798")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xA32150", Offset = "0xA32150", VA = "0xA32150")]
		public void ChangeHandModel(HandType _handType)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xA3379C", Offset = "0xA3379C", VA = "0xA3379C")]
		private void RegisterHandModelSelector()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xA3386C", Offset = "0xA3386C", VA = "0xA3386C")]
		public static HandModelSelector GetHandModelSelector(ControllerHandedness controllerHandedness)
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xA33988", Offset = "0xA33988", VA = "0xA33988")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class HapticController : SingletonMonoBehaviour<HapticController>
	{
		[Serializable]
		[Token(Token = "0x2000222")]
		public class HMDParam
		{
			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float time;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int frequency;

			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AudioClip audioClip;

			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xA33C94", Offset = "0xA33C94", VA = "0xA33C94")]
			public HMDParam()
			{
			}
		}

		[Token(Token = "0x2000223")]
		[CompilerGenerated]
		private sealed class <HMDFeedbackCoroutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HapticController <>4__this;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int frequency;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A6A")]
				[Address(RVA = "0xA33DAC", Offset = "0xA33DAC", VA = "0xA33DAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A6C")]
				[Address(RVA = "0xA33DF4", Offset = "0xA33DF4", VA = "0xA33DF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xA33BC0", Offset = "0xA33BC0", VA = "0xA33BC0")]
			[DebuggerHidden]
			public <HMDFeedbackCoroutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xA33C9C", Offset = "0xA33C9C", VA = "0xA33C9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xA33CA0", Offset = "0xA33CA0", VA = "0xA33CA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xA33DB4", Offset = "0xA33DB4", VA = "0xA33DB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A19")]
		public const float PULSE_PAN_LEFT = -1f;

		[Token(Token = "0x4000A1A")]
		public const float PULSE_PAN_CENTER = 0f;

		[Token(Token = "0x4000A1B")]
		public const float PULSE_PAN_RIGHT = -1f;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int PLAYER_DAMAGE;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int PLAYER_DEAD;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int PLAYER_INJECT;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int PLAYER_REPAIR;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int FLESHTV_WEAK;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int FLESHTV_NORMAL;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int FLESHTV_STRONG;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("HMD振動の時間と周波数、コントローラ振動のオーディオの指定")]
		public List<HMDParam> _hmdParamList;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("注射器と治療キットの回復数値のしきい値")]
		public int _healThreshold;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool isRunningHmdCoroutine;

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xA33A24", Offset = "0xA33A24", VA = "0xA33A24")]
		public bool TriggerHapticPulse(AudioClip audioClip, [Optional] Grabber grabber, bool loop = false, float delay = 0f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xA33A94", Offset = "0xA33A94", VA = "0xA33A94")]
		public bool TriggerHapticPulse(AudioClip audioClip, bool loop = false, float pan = 0f, float delay = 0f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xA33A9C", Offset = "0xA33A9C", VA = "0xA33A9C")]
		public bool TriggerHapticPulse(int reservedIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xA28DF4", Offset = "0xA28DF4", VA = "0xA28DF4")]
		public bool TriggerHeal(int healDamage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xA33AAC", Offset = "0xA33AAC", VA = "0xA33AAC")]
		public bool TriggerDamage(int damageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xA33AA4", Offset = "0xA33AA4", VA = "0xA33AA4")]
		private bool TriggerDamage(HMDParam param)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xA33B30", Offset = "0xA33B30", VA = "0xA33B30")]
		public bool PlayFleshTV(int strength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xA33B38", Offset = "0xA33B38", VA = "0xA33B38")]
		[IteratorStateMachine(typeof(<HMDFeedbackCoroutine>d__21))]
		private IEnumerator HMDFeedbackCoroutine(float time, int frequency)
		{
			return null;
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xA33BE8", Offset = "0xA33BE8", VA = "0xA33BE8")]
		public HapticController()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerRotation rotation;

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xA33DFC", Offset = "0xA33DFC", VA = "0xA33DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xA34488", Offset = "0xA34488", VA = "0xA34488")]
		private void LocomotionTypeVariableChangeHandler(LocomotionType newVal)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xA344A0", Offset = "0xA344A0", VA = "0xA344A0")]
		private void UseRotationVariableChangeHandler(bool newVal)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xA34554", Offset = "0xA34554", VA = "0xA34554")]
		private void RotationTypeVariableChangeHandler(RotationMechanic newVal)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xA3461C", Offset = "0xA3461C", VA = "0xA3461C")]
		private void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xA34604", Offset = "0xA34604", VA = "0xA34604")]
		private void ChangeLocomotion(LocomotionType locomotionType)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xA34688", Offset = "0xA34688", VA = "0xA34688")]
		private void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xA34788", Offset = "0xA34788", VA = "0xA34788")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xA347C4", Offset = "0xA347C4", VA = "0xA347C4")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xA34878", Offset = "0xA34878", VA = "0xA34878")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class Player : MonoBehaviour
	{
		[Token(Token = "0x2000226")]
		public delegate void OnCurrentHealthVariableChangeDelegate(int newVal, int val1);

		[Token(Token = "0x2000227")]
		public delegate void OnWeapon1VariableChangeDelegate(int newVal);

		[Token(Token = "0x2000228")]
		public delegate void OnWeapon2VariableChangeDelegate(int newVal);

		[Token(Token = "0x2000229")]
		public delegate void OnAmmoInGunVariableChangeDelegate();

		[Token(Token = "0x200022A")]
		public delegate void OnIsLeftHandVariableChangeDelegate(bool newVal);

		[Token(Token = "0x200022B")]
		public delegate void OnLocomotionTypeVariableChangeDelegate(LocomotionType newVal);

		[Token(Token = "0x200022C")]
		public delegate void OnUseRotationVariableChangeDelegate(bool newVal);

		[Token(Token = "0x200022D")]
		public delegate void OnRotationTypeVariableChangeDelegate(RotationMechanic newVal);

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player player;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Camera cameraRig;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Camera editorRecorderCamera;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Player Transforms : ")]
		[SerializeField]
		private Transform playerTransform;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform playerHead;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform playerLeftHand;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform playerRightHand;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform headTextTransform;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Pointer Transforms : ")]
		[SerializeField]
		private GameObject leftHandPointer;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject rightHandPointer;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Player Status : ")]
		[SerializeField]
		private int maxHealth;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		public int currentHealth;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private int weapon1;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private int weapon2;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private int[] ammoInGun;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int[] AmmoTotalCount;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int SyringeTotalCount;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int HealthkitTotalCount;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<float> RandomStats;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Hand Side Options : ")]
		[SerializeField]
		private bool isLeftHand;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Locomotion Options : ")]
		[SerializeField]
		private LocomotionType locomotionType;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool useRotation;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private RotationMechanic rotationType;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private PlayerTeleport playerTeleport;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private PlayerHealth playerHealth;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Inventory playerInventory;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private ScreenOverlayManager screenOverlayManager;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private FogManager fogManager;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private FOVLimiter fovLimiter;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private FadeInListener fadeInListener;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private HandModelSelector handModelSelectorLeft;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private HandModelSelector handModelSelectorRight;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public ItemPicker HeldItem;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private ParticleSystem dustParticleSystem;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private ParticleSystem[] flashlightParticleSystems;

		[Token(Token = "0x1700013D")]
		public Camera CameraRig
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xA348C8", Offset = "0xA348C8", VA = "0xA348C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public Camera EditorRecorderCamera
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xA348D0", Offset = "0xA348D0", VA = "0xA348D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		public Transform PlayerTransform
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xA348D8", Offset = "0xA348D8", VA = "0xA348D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		public Transform PlayerHead
		{
			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0xA348E0", Offset = "0xA348E0", VA = "0xA348E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public Transform PlayerLeftHand
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xA348E8", Offset = "0xA348E8", VA = "0xA348E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		public Transform PlayerRightHand
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xA348F0", Offset = "0xA348F0", VA = "0xA348F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		public Transform HeadTextTransform
		{
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xA348F8", Offset = "0xA348F8", VA = "0xA348F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		public GameObject LeftHandPointer
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xA34900", Offset = "0xA34900", VA = "0xA34900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public GameObject RightHandPointer
		{
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xA34908", Offset = "0xA34908", VA = "0xA34908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public int MaxHealth
		{
			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xA34910", Offset = "0xA34910", VA = "0xA34910")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xA34918", Offset = "0xA34918", VA = "0xA34918")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public int CurrentHealth
		{
			[Token(Token = "0x6000A83")]
			[Address(RVA = "0xA34940", Offset = "0xA34940", VA = "0xA34940")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xA34948", Offset = "0xA34948", VA = "0xA34948")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public int Weapon1
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xA34AAC", Offset = "0xA34AAC", VA = "0xA34AAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xA2D3D0", Offset = "0xA2D3D0", VA = "0xA2D3D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public int Weapon2
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xA34BEC", Offset = "0xA34BEC", VA = "0xA34BEC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xA2D3F0", Offset = "0xA2D3F0", VA = "0xA2D3F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public int[] AmmoInGun
		{
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0xA34D94", Offset = "0xA34D94", VA = "0xA34D94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0xA34D9C", Offset = "0xA34D9C", VA = "0xA34D9C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public bool IsLeftHand
		{
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0xA34EDC", Offset = "0xA34EDC", VA = "0xA34EDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0xA34EE4", Offset = "0xA34EE4", VA = "0xA34EE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public LocomotionType LocomotionType
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xA350B8", Offset = "0xA350B8", VA = "0xA350B8")]
			get
			{
				return default(LocomotionType);
			}
			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0xA350C0", Offset = "0xA350C0", VA = "0xA350C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool UseRotation
		{
			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0xA3517C", Offset = "0xA3517C", VA = "0xA3517C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0xA35184", Offset = "0xA35184", VA = "0xA35184")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public RotationMechanic RotationType
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xA35244", Offset = "0xA35244", VA = "0xA35244")]
			get
			{
				return default(RotationMechanic);
			}
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0xA3524C", Offset = "0xA3524C", VA = "0xA3524C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public PlayerHealth PlayerHealth
		{
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0xA35308", Offset = "0xA35308", VA = "0xA35308")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		public Inventory PlayerInventory
		{
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0xA35310", Offset = "0xA35310", VA = "0xA35310")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000151")]
		public ScreenOverlayManager ScreenOverlayManager
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0xA35318", Offset = "0xA35318", VA = "0xA35318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		public FogManager FogManager
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0xA35320", Offset = "0xA35320", VA = "0xA35320")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public FOVLimiter FOVLimiter
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xA35328", Offset = "0xA35328", VA = "0xA35328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public HandModelSelector HandModelSelectorLeft
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xA35330", Offset = "0xA35330", VA = "0xA35330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public HandModelSelector HandModelSelectorRight
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xA35338", Offset = "0xA35338", VA = "0xA35338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		public bool FadeAudioOnScene
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xA35340", Offset = "0xA35340", VA = "0xA35340")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xA35348", Offset = "0xA35348", VA = "0xA35348")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public bool IsGodMode
		{
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xA35354", Offset = "0xA35354", VA = "0xA35354")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xA3535C", Offset = "0xA3535C", VA = "0xA3535C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event OnCurrentHealthVariableChangeDelegate OnCurrentHealthVariableChange
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xA34974", Offset = "0xA34974", VA = "0xA34974")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xA34A10", Offset = "0xA34A10", VA = "0xA34A10")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event OnWeapon1VariableChangeDelegate OnWeapon1VariableChange
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0xA34AB4", Offset = "0xA34AB4", VA = "0xA34AB4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0xA34B50", Offset = "0xA34B50", VA = "0xA34B50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event OnWeapon2VariableChangeDelegate OnWeapon2VariableChange
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xA34BF4", Offset = "0xA34BF4", VA = "0xA34BF4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0xA34C90", Offset = "0xA34C90", VA = "0xA34C90")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event OnAmmoInGunVariableChangeDelegate OnAmmoInGunVariableChange
		{
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0xA2F0C4", Offset = "0xA2F0C4", VA = "0xA2F0C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0xA34DBC", Offset = "0xA34DBC", VA = "0xA34DBC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event OnIsLeftHandVariableChangeDelegate OnIsLeftHandVariableChange
		{
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0xA2DD88", Offset = "0xA2DD88", VA = "0xA2DD88")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0xA3501C", Offset = "0xA3501C", VA = "0xA3501C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event OnLocomotionTypeVariableChangeDelegate OnLocomotionTypeVariableChange
		{
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0xA3412C", Offset = "0xA3412C", VA = "0xA3412C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0xA350E0", Offset = "0xA350E0", VA = "0xA350E0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event OnUseRotationVariableChangeDelegate OnUseRotationVariableChange
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xA3428C", Offset = "0xA3428C", VA = "0xA3428C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0xA351A8", Offset = "0xA351A8", VA = "0xA351A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event OnRotationTypeVariableChangeDelegate OnRotationTypeVariableChange
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0xA343EC", Offset = "0xA343EC", VA = "0xA343EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0xA3526C", Offset = "0xA3526C", VA = "0xA3526C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xA34880", Offset = "0xA34880", VA = "0xA34880")]
		public static Player GetPlayer()
		{
			return null;
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xA34D2C", Offset = "0xA34D2C", VA = "0xA34D2C")]
		public void SwapWeapons()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xA34E58", Offset = "0xA34E58", VA = "0xA34E58")]
		public int GetAmmoInGunByAmmoID(int _ammoID)
		{
			return default(int);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xA34E88", Offset = "0xA34E88", VA = "0xA34E88")]
		public void AddAmmoInGunByWeaponID(int _ammoID, int _amount)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xA35368", Offset = "0xA35368", VA = "0xA35368")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xA35510", Offset = "0xA35510", VA = "0xA35510")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xA356D8", Offset = "0xA356D8", VA = "0xA356D8")]
		private void OnSceneLoad()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xA35944", Offset = "0xA35944", VA = "0xA35944")]
		private void OnSceneLoad(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xA35948", Offset = "0xA35948", VA = "0xA35948")]
		public int GetTotalSMGAmmo()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xA35B50", Offset = "0xA35B50", VA = "0xA35B50")]
		public int GetTotalPistolAmmo()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xA35D58", Offset = "0xA35D58", VA = "0xA35D58")]
		public int GetTotalShotgunAmmo()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xA35F60", Offset = "0xA35F60", VA = "0xA35F60")]
		public int CountSyringe()
		{
			return default(int);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xA3613C", Offset = "0xA3613C", VA = "0xA3613C")]
		public int CountHealthkit()
		{
			return default(int);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xA36318", Offset = "0xA36318", VA = "0xA36318")]
		public void SetDustQuantity(float dustQuantity)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xA364A0", Offset = "0xA364A0", VA = "0xA364A0")]
		public void RepositionPlayer(Transform newLocation)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xA2E7F4", Offset = "0xA2E7F4", VA = "0xA2E7F4")]
		public PlayerStats GetPlayerStats()
		{
			return null;
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xA36564", Offset = "0xA36564", VA = "0xA36564")]
		public void SetPlayerStats(PlayerStats _playerStats)
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xA2CC14", Offset = "0xA2CC14", VA = "0xA2CC14")]
		public void ResetInventory()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xA358E8", Offset = "0xA358E8", VA = "0xA358E8")]
		public void TogglePointer(bool flag)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xA36968", Offset = "0xA36968", VA = "0xA36968")]
		public void ToggleInventory(bool flag)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xA369FC", Offset = "0xA369FC", VA = "0xA369FC")]
		public Player()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class PlayerController : MonoBehaviour
	{
		[Token(Token = "0x200022F")]
		[CompilerGenerated]
		private sealed class <CoBailOut>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spawnLocation;

			[Token(Token = "0x17000158")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AF9")]
				[Address(RVA = "0xA38C2C", Offset = "0xA38C2C", VA = "0xA38C2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000159")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AFB")]
				[Address(RVA = "0xA38C74", Offset = "0xA38C74", VA = "0xA38C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0xA38218", Offset = "0xA38218", VA = "0xA38218")]
			[DebuggerHidden]
			public <CoBailOut>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0xA38B18", Offset = "0xA38B18", VA = "0xA38B18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xA38B1C", Offset = "0xA38B1C", VA = "0xA38B1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0xA38C34", Offset = "0xA38C34", VA = "0xA38C34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlayerController playerController;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		[Header("Transform Setup ")]
		public Transform TrackingSpace;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		[Header("Ground checks : ")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("DistanceFromGround will subtract this value when determining distance from ground")]
		public float DistanceFromGroundOffset;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Player Capsule Settings : ")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		[Header("Player Y Offset : ")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		[Header("Misc : ")]
		public float MinElevation;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float MaxElevation;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Rigidbody playerRigid;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected CapsuleCollider playerCapsule;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public RaycastHit groundHit;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected RaycastHit hit;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Transform mainCamera;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 _initialPosition;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float SphereColliderRadius;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float previousSpeed;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float fallCount;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly float bailoutTime;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float lastAlpha;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private List<BNG.TrackedDevice> pausedDeviceList;

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xA37198", Offset = "0xA37198", VA = "0xA37198")]
		public static PlayerController GetPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xA371E0", Offset = "0xA371E0", VA = "0xA371E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xA3722C", Offset = "0xA3722C", VA = "0xA3722C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xA37324", Offset = "0xA37324", VA = "0xA37324")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xA37428", Offset = "0xA37428", VA = "0xA37428")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xA37520", Offset = "0xA37520", VA = "0xA37520", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xA37664", Offset = "0xA37664", VA = "0xA37664", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xA37A84", Offset = "0xA37A84", VA = "0xA37A84", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xA37C14", Offset = "0xA37C14", VA = "0xA37C14", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xA37CA0", Offset = "0xA37CA0", VA = "0xA37CA0", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xA37DF4", Offset = "0xA37DF4", VA = "0xA37DF4", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xA37E70", Offset = "0xA37E70", VA = "0xA37E70", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xA38038", Offset = "0xA38038", VA = "0xA38038", Slot = "11")]
		public virtual void CheckRigidbodyCapsuleMove(Vector3 movePosition)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xA38198", Offset = "0xA38198", VA = "0xA38198", Slot = "12")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xA37458", Offset = "0xA37458", VA = "0xA37458")]
		private void CheckFallOff()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xA330B8", Offset = "0xA330B8", VA = "0xA330B8")]
		public void WarpDefault()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xA381B0", Offset = "0xA381B0", VA = "0xA381B0")]
		[IteratorStateMachine(typeof(<CoBailOut>d__42))]
		private IEnumerator CoBailOut(Transform spawnLocation)
		{
			return null;
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xA38240", Offset = "0xA38240", VA = "0xA38240")]
		public void StartPause()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xA3853C", Offset = "0xA3853C", VA = "0xA3853C")]
		public void EndPause(Action fadeCompleteCallback)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xA38A64", Offset = "0xA38A64", VA = "0xA38A64")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class PlayerDeath : MonoBehaviour
	{
		[Token(Token = "0x2000231")]
		[CompilerGenerated]
		private sealed class <InitiateDeath>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerDeath <>4__this;

			[Token(Token = "0x1700015B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B05")]
				[Address(RVA = "0xA39168", Offset = "0xA39168", VA = "0xA39168", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B07")]
				[Address(RVA = "0xA391B0", Offset = "0xA391B0", VA = "0xA391B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B02")]
			[Address(RVA = "0xA38D50", Offset = "0xA38D50", VA = "0xA38D50")]
			[DebuggerHidden]
			public <InitiateDeath>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xA38FCC", Offset = "0xA38FCC", VA = "0xA38FCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xA38FD0", Offset = "0xA38FD0", VA = "0xA38FD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B06")]
			[Address(RVA = "0xA39170", Offset = "0xA39170", VA = "0xA39170", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PostProcessVolume ppVolume;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float bloomSpeed;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int deathDuration;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool isDead;

		[Token(Token = "0x1700015A")]
		public bool IsDead
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xA38C7C", Offset = "0xA38C7C", VA = "0xA38C7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xA38C84", Offset = "0xA38C84", VA = "0xA38C84")]
		public void Kill()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xA38D14", Offset = "0xA38D14", VA = "0xA38D14")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xA38CAC", Offset = "0xA38CAC", VA = "0xA38CAC")]
		[IteratorStateMachine(typeof(<InitiateDeath>d__8))]
		private IEnumerator InitiateDeath()
		{
			return null;
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xA38D78", Offset = "0xA38D78", VA = "0xA38D78")]
		private void LoadRespawnSave()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xA38FC4", Offset = "0xA38FC4", VA = "0xA38FC4")]
		public PlayerDeath()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class PlayerHealth : MonoBehaviour
	{
		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.UI.Slider healthSlider;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PostProcessVolume ppVolume;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject soundObject;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip[] highDamages;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip[] lowDamages;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioClip deathAudio;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("Haptic Stats")]
		private float hapticStrength;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float hapticDuration;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float hapticPulse;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> highBank;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<int> lowBank;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float invulnerabilityTimer;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float nextRegenTime;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private PlayerDeath playerDeath;

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xA391B8", Offset = "0xA391B8", VA = "0xA391B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xA39374", Offset = "0xA39374", VA = "0xA39374")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xA392AC", Offset = "0xA392AC", VA = "0xA392AC")]
		private void UpdateDisplay(int _currentHealth, int _maxHealth)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xA39430", Offset = "0xA39430", VA = "0xA39430")]
		public void TakeDamage(int damage)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xA28D6C", Offset = "0xA28D6C", VA = "0xA28D6C")]
		public void HealDamage(int heal)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xA39BE0", Offset = "0xA39BE0", VA = "0xA39BE0")]
		public void Kill()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xA39C60", Offset = "0xA39C60", VA = "0xA39C60")]
		public void SetInvulnerabilityTimer(float invTime)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xA397F8", Offset = "0xA397F8", VA = "0xA397F8")]
		private void PlayDamageSound(int damage)
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xA39C68", Offset = "0xA39C68", VA = "0xA39C68")]
		private void PopulateHighBank()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xA39D2C", Offset = "0xA39D2C", VA = "0xA39D2C")]
		private void PopulateLowBank()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xA39DF0", Offset = "0xA39DF0", VA = "0xA39DF0")]
		public PlayerHealth()
		{
		}
	}
	[Token(Token = "0x2000233")]
	[RequireComponent(typeof(LocomotionManager))]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x2000234")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x2000235")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input")]
		[Tooltip("Set to false to skip Update")]
		public bool AllowInput;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		[Header("Smooth / Snap Turning")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerController playerController;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float recentSnapTurnTime;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float rotationAmount;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float xAxis;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float previousXInput;

		[Token(Token = "0x1700015D")]
		public float SnapRotationAmount
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xA39E90", Offset = "0xA39E90", VA = "0xA39E90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700015E")]
		public float SmoothTurnSpeed
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xA39EE8", Offset = "0xA39EE8", VA = "0xA39EE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1400001C")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xA39F40", Offset = "0xA39F40", VA = "0xA39F40")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xA39FF8", Offset = "0xA39FF8", VA = "0xA39FF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xA3A0B0", Offset = "0xA3A0B0", VA = "0xA3A0B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xA3A16C", Offset = "0xA3A16C", VA = "0xA3A16C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xA3A228", Offset = "0xA3A228", VA = "0xA3A228")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xA3A284", Offset = "0xA3A284", VA = "0xA3A284", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xA3A390", Offset = "0xA3A390", VA = "0xA3A390", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xA3A5EC", Offset = "0xA3A5EC", VA = "0xA3A5EC", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xA3A61C", Offset = "0xA3A61C", VA = "0xA3A61C", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xA3A758", Offset = "0xA3A758", VA = "0xA3A758")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x2000236")]
	[RequireComponent(typeof(LocomotionManager))]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x2000237")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x2000238")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x2000239")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x200023A")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__76 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x4000ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x4000ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x17000161")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B56")]
				[Address(RVA = "0xA3D43C", Offset = "0xA3D43C", VA = "0xA3D43C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000162")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B58")]
				[Address(RVA = "0xA3D484", Offset = "0xA3D484", VA = "0xA3D484", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xA3D198", Offset = "0xA3D198", VA = "0xA3D198")]
			[DebuggerHidden]
			public <doTeleport>d__76(int <>1__state)
			{
			}

			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xA3D1C0", Offset = "0xA3D1C0", VA = "0xA3D1C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xA3D1C4", Offset = "0xA3D1C4", VA = "0xA3D1C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xA3D444", Offset = "0xA3D444", VA = "0xA3D444", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Colors")]
		[Tooltip("The teleport path markers path.")]
		public Transform TeleportPathTransform;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Teleport path marker objects.")]
		public List<MeshRenderer> TeleportPathMarkers;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		[Header("Transform Definitions")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		[HideInInspector]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("MeshRenderer of the teleport marker.")]
		public MeshRenderer TeleportMarkerRenderer;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		[Header("Teleport Physics")]
		public int SegmentCount;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float SegmentScale;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Raycast layers to use when determining collision")]
		[Header("Layers")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Slope")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		public float MaxSlope;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Offset the player's Y position from TeleportDestination")]
		[Header("Offset")]
		public float TeleportYOffset;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		[Header("Screen Fade")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issued.")]
		[Header("Physics Material")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PlayerController playerController;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InputBridge input;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform cameraRig;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ScreenFader fader;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected bool aimingTeleport;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		protected bool validTeleport;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		protected bool teleportationEnabled;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int _invalidFrames;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float _initialLineWidth;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float cooldown;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool setVariables;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider _hitObject;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 _hitVector;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float _hitAngle;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private RaycastHit hit;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3[] segments;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector3 segVelocity;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float segTime;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int segCount;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private bool isDestination;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private LayerMask _ignoreMask;

		[Token(Token = "0x1700015F")]
		public float SimulationVelocity
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xA3A9D8", Offset = "0xA3A9D8", VA = "0xA3A9D8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000160")]
		public bool AimingTeleport
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xA3AA30", Offset = "0xA3AA30", VA = "0xA3AA30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400001E")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xA3AA38", Offset = "0xA3AA38", VA = "0xA3AA38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xA3AAF0", Offset = "0xA3AAF0", VA = "0xA3AAF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0xA3ABA8", Offset = "0xA3ABA8", VA = "0xA3ABA8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xA3AC64", Offset = "0xA3AC64", VA = "0xA3AC64")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xA3AD20", Offset = "0xA3AD20", VA = "0xA3AD20")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xA3ADDC", Offset = "0xA3ADDC", VA = "0xA3ADDC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xA3A96C", Offset = "0xA3A96C", VA = "0xA3A96C")]
		private Transform GetTeleportTransform()
		{
			return null;
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xA3AE98", Offset = "0xA3AE98", VA = "0xA3AE98")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xA3B0F0", Offset = "0xA3B0F0", VA = "0xA3B0F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xA3AE9C", Offset = "0xA3AE9C", VA = "0xA3AE9C")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xA3B1D8", Offset = "0xA3B1D8", VA = "0xA3B1D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xA3B278", Offset = "0xA3B278", VA = "0xA3B278")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xA3B3C8", Offset = "0xA3B3C8", VA = "0xA3B3C8")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xA34858", Offset = "0xA34858", VA = "0xA34858")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xA34864", Offset = "0xA34864", VA = "0xA34864")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xA3B3E4", Offset = "0xA3B3E4", VA = "0xA3B3E4")]
		private bool VisibilityCheck()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xA3B854", Offset = "0xA3B854", VA = "0xA3B854", Slot = "4")]
		protected virtual void calculateParabola()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xA3C594", Offset = "0xA3C594", VA = "0xA3C594", Slot = "5")]
		protected virtual bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xA3C608", Offset = "0xA3C608", VA = "0xA3C608", Slot = "6")]
		protected virtual void hideTeleport()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xA3C6E0", Offset = "0xA3C6E0", VA = "0xA3C6E0", Slot = "7")]
		protected virtual void updateTeleport()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xA3C73C", Offset = "0xA3C73C", VA = "0xA3C73C", Slot = "8")]
		protected virtual void tryTeleport()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xA3CA0C", Offset = "0xA3CA0C", VA = "0xA3CA0C", Slot = "9")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xA3CAD4", Offset = "0xA3CAD4", VA = "0xA3CAD4", Slot = "10")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xA3CB9C", Offset = "0xA3CB9C", VA = "0xA3CB9C", Slot = "11")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xA3C944", Offset = "0xA3C944", VA = "0xA3C944")]
		[IteratorStateMachine(typeof(<doTeleport>d__76))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xA36540", Offset = "0xA36540", VA = "0xA36540")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xA3CC98", Offset = "0xA3CC98", VA = "0xA3CC98")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xA3CD34", Offset = "0xA3CD34", VA = "0xA3CD34", Slot = "12")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xA3CDD0", Offset = "0xA3CDD0", VA = "0xA3CDD0", Slot = "13")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xA3CE54", Offset = "0xA3CE54", VA = "0xA3CE54")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x200023B")]
	[RequireComponent(typeof(LocomotionManager))]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x200023C")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x200023D")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rigidbody Settings : ")]
		[Tooltip("How much force to apply to the rigidbody when the player is grounded")]
		public float MovementForce;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximium velocity of the player's rigidbody in X, Z. Used to constrain max speed movement.")]
		public float MaxHorizontalVelocity;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Maximium velocity of the player's rigidbody on the Y axis. Used to constrain max vertical movement, such as jumping and falling.")]
		public float MaxVerticalVelocity;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far up from the characters feet is considered a step. Anything below this will be considered grounded.")]
		public float StepHeight;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximium angle a slope can be to be considered grounded. Negated if contact distance from the player's feet is less than StepHeight.")]
		public float MaxSlopeAngle;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Physics Material to apply to the sphere collider while moving. Use this to dynamically adjust friction and bounciness.")]
		public PhysicMaterial MovementMaterial;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issues. Use this to slow t he player down, or allow them to slide across surfaces.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How much drag to apply to the player while moving")]
		public float MovementDrag;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How much drag to apply to the player while standing still. Used to slow down the player or prevent from sliding down a hill.")]
		public float StaticDrag;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How much drag to apply to the player when in the air / not grounded.")]
		public float AirDrag;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		[Header("Forward Direction : ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Set to false if you do not want to respond to input commands. (For example, if paused or in a menu)")]
		[Header("Input : ")]
		public bool AllowInput;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want SmoothLocomotion to update movement at all.")]
		public bool UpdateMovement;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		[Header("Air Control : ")]
		public bool AirControl;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerController playerController;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SphereCollider playerSphere;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float movementX;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float movementY;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float movementZ;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _verticalSpeed;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 additionalMovement;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool playerInitialized;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastJumpTime;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float lastMoveTime;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float Magnitude;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Shown for Debug : ")]
		public int GroundContacts;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float SurfaceAngle;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float SurfaceHeight;

		[Token(Token = "0x17000163")]
		public float MovementSpeed
		{
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xA3D48C", Offset = "0xA3D48C", VA = "0xA3D48C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000164")]
		public float SprintSpeed
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xA3D4E4", Offset = "0xA3D4E4", VA = "0xA3D4E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000165")]
		public float StrafeSpeed
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xA3D53C", Offset = "0xA3D53C", VA = "0xA3D53C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000166")]
		public float StrafeSprintSpeed
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0xA3D594", Offset = "0xA3D594", VA = "0xA3D594")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x14000021")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0xA3D5EC", Offset = "0xA3D5EC", VA = "0xA3D5EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0xA3D6A4", Offset = "0xA3D6A4", VA = "0xA3D6A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0xA3D75C", Offset = "0xA3D75C", VA = "0xA3D75C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0xA3D818", Offset = "0xA3D818", VA = "0xA3D818")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xA3D8D4", Offset = "0xA3D8D4", VA = "0xA3D8D4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xA3D91C", Offset = "0xA3D91C", VA = "0xA3D91C", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xA3D944", Offset = "0xA3D944", VA = "0xA3D944", Slot = "6")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xA3DA8C", Offset = "0xA3DA8C", VA = "0xA3DA8C", Slot = "7")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xA3DC44", Offset = "0xA3DC44", VA = "0xA3DC44", Slot = "8")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xA3DED0", Offset = "0xA3DED0", VA = "0xA3DED0", Slot = "9")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xA3E070", Offset = "0xA3E070", VA = "0xA3E070", Slot = "10")]
		public virtual void MoveRigidCharacter(Vector3 moveTo)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xA3E074", Offset = "0xA3E074", VA = "0xA3E074", Slot = "11")]
		public virtual void MoveRigidCharacter()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xA3E52C", Offset = "0xA3E52C", VA = "0xA3E52C", Slot = "12")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xA3E750", Offset = "0xA3E750", VA = "0xA3E750", Slot = "13")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xA3E804", Offset = "0xA3E804", VA = "0xA3E804", Slot = "14")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xA3E898", Offset = "0xA3E898", VA = "0xA3E898", Slot = "15")]
		public virtual void SetupRigidbodyPlayer()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xA3EB04", Offset = "0xA3EB04", VA = "0xA3EB04", Slot = "16")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xA3EB10", Offset = "0xA3EB10", VA = "0xA3EB10", Slot = "17")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xA3EB18", Offset = "0xA3EB18", VA = "0xA3EB18")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xA3EE00", Offset = "0xA3EE00", VA = "0xA3EE00")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class SaveDataManager : MonoBehaviour
	{
		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SaveDataManager _instance;

		[Token(Token = "0x17000167")]
		public static SaveDataManager Instance
		{
			[Token(Token = "0x6000B79")]
			[Address(RVA = "0xA3F03C", Offset = "0xA3F03C", VA = "0xA3F03C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xA3F084", Offset = "0xA3F084", VA = "0xA3F084")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xA3F118", Offset = "0xA3F118", VA = "0xA3F118")]
		public void SetDefaultData()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xA3F5D8", Offset = "0xA3F5D8", VA = "0xA3F5D8")]
		public void SaveSettingsToFile(SettingsSaveData settingsData)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xA3F6A4", Offset = "0xA3F6A4", VA = "0xA3F6A4")]
		public SettingsSaveData LoadSettingsFromFile()
		{
			return null;
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xA3F7C8", Offset = "0xA3F7C8", VA = "0xA3F7C8")]
		public void SaveGameToFile(int slotNumber)
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xA3FBCC", Offset = "0xA3FBCC", VA = "0xA3FBCC")]
		public bool LoadGameFromFile(int slotNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xA3FFEC", Offset = "0xA3FFEC", VA = "0xA3FFEC")]
		public SaveDataManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023F")]
	public class SettingsSaveData
	{
		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int LocomotionType;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int IsLeftHand;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int UseRotation;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int RotationType;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int VignetteValue;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int Language;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int ShowSubtitle;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int ClearedFlag;

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xA3FFF4", Offset = "0xA3FFF4", VA = "0xA3FFF4")]
		public string SaveToString()
		{
			return null;
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xA3FFFC", Offset = "0xA3FFFC", VA = "0xA3FFFC")]
		public static SettingsSaveData CreateFromJSON(string jsonString)
		{
			return null;
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xA40044", Offset = "0xA40044", VA = "0xA40044")]
		public SettingsSaveData()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class RoomManager : MonoBehaviour
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RoomManager _instance;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<RoomData> roomList;

		[Token(Token = "0x17000168")]
		public static RoomManager Instance
		{
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0xA4004C", Offset = "0xA4004C", VA = "0xA4004C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public List<RoomData> RoomList
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xA40094", Offset = "0xA40094", VA = "0xA40094")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0xA4009C", Offset = "0xA4009C", VA = "0xA4009C")]
			set
			{
			}
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xA400A4", Offset = "0xA400A4", VA = "0xA400A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xA40138", Offset = "0xA40138", VA = "0xA40138")]
		public void SaveRoomData()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xA409AC", Offset = "0xA409AC", VA = "0xA409AC")]
		public void LoadRoomData()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xA40DB0", Offset = "0xA40DB0", VA = "0xA40DB0")]
		private void InstantiateRoomItems(int _roomID)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xA411B4", Offset = "0xA411B4", VA = "0xA411B4")]
		public RoomManager()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x2000242")]
		public delegate void MainGameSceneLoaded(Scene scene);

		[Token(Token = "0x2000243")]
		[CompilerGenerated]
		private sealed class <FadeThenLoadScene>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AsyncOperation <asyncLoad>5__2;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BA1")]
				[Address(RVA = "0xA41D7C", Offset = "0xA41D7C", VA = "0xA41D7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BA3")]
				[Address(RVA = "0xA41DC4", Offset = "0xA41DC4", VA = "0xA41DC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xA41784", Offset = "0xA41784", VA = "0xA41784")]
			[DebuggerHidden]
			public <FadeThenLoadScene>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0xA41AE8", Offset = "0xA41AE8", VA = "0xA41AE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0xA41AEC", Offset = "0xA41AEC", VA = "0xA41AEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xA41D84", Offset = "0xA41D84", VA = "0xA41D84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000244")]
		[CompilerGenerated]
		private sealed class <DelayLoad>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x4000B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Scene scene;

			[Token(Token = "0x1700016F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BA7")]
				[Address(RVA = "0xA41EC8", Offset = "0xA41EC8", VA = "0xA41EC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000170")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BA9")]
				[Address(RVA = "0xA41F10", Offset = "0xA41F10", VA = "0xA41F10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xA418E8", Offset = "0xA418E8", VA = "0xA418E8")]
			[DebuggerHidden]
			public <DelayLoad>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xA41DCC", Offset = "0xA41DCC", VA = "0xA41DCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xA41DD0", Offset = "0xA41DD0", VA = "0xA41DD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0xA41ED0", Offset = "0xA41ED0", VA = "0xA41ED0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SceneLoader _instance;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity 'LoadSceneMode' method of loading the scene (In most cases should be 'Single'). ")]
		public LoadSceneMode loadSceneMode;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the ScreenFader component will fade the screen to black before loading a level.")]
		public bool UseSceenFader;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Wait this long in seconds before attempting to load the scene. Useful if you need to fade the screen out before attempting to load the level.")]
		public float ScreenFadeTime;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip audioTransition;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioSource audioSource;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ScreenFader sf;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string _loadSceneName;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int currentWarpID;

		[Token(Token = "0x1700016A")]
		public static SceneLoader Instance
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0xA411BC", Offset = "0xA411BC", VA = "0xA411BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		public AudioClip AudioTransition
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0xA41204", Offset = "0xA41204", VA = "0xA41204")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0xA4120C", Offset = "0xA4120C", VA = "0xA4120C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public int CurrentWarpID
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0xA41214", Offset = "0xA41214", VA = "0xA41214")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000023")]
		public event MainGameSceneLoaded OnMainGameSceneLoad
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0xA4121C", Offset = "0xA4121C", VA = "0xA4121C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0xA412B8", Offset = "0xA412B8", VA = "0xA412B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xA41354", Offset = "0xA41354", VA = "0xA41354")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xA41478", Offset = "0xA41478", VA = "0xA41478")]
		public void LoadNewScene(string sceneID, int warpID, bool fromSaveFile = false)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xA41680", Offset = "0xA41680", VA = "0xA41680")]
		public void LoadScene(string SceneName)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xA4171C", Offset = "0xA4171C", VA = "0xA4171C")]
		[IteratorStateMachine(typeof(<FadeThenLoadScene>d__23))]
		public IEnumerator FadeThenLoadScene()
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xA417AC", Offset = "0xA417AC", VA = "0xA417AC")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xA41870", Offset = "0xA41870", VA = "0xA41870")]
		[IteratorStateMachine(typeof(<DelayLoad>d__25))]
		private IEnumerator DelayLoad(Scene scene)
		{
			return null;
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xA41854", Offset = "0xA41854", VA = "0xA41854")]
		private void PlayMainSound(AudioClip sound)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xA41910", Offset = "0xA41910", VA = "0xA41910")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class CanvasSubtitleOnGrab : MonoBehaviour
	{
		[Token(Token = "0x2000246")]
		[CompilerGenerated]
		private sealed class <AnimateGroupAlpha>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool up;

			[Token(Token = "0x4000B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve curve;

			[Token(Token = "0x4000B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float totatlTime;

			[Token(Token = "0x4000B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CanvasSubtitleOnGrab <>4__this;

			[Token(Token = "0x4000B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <showT>5__2;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BB1")]
				[Address(RVA = "0xA42190", Offset = "0xA42190", VA = "0xA42190", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BB3")]
				[Address(RVA = "0xA421D8", Offset = "0xA421D8", VA = "0xA421D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xA42088", Offset = "0xA42088", VA = "0xA42088")]
			[DebuggerHidden]
			public <AnimateGroupAlpha>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xA420C4", Offset = "0xA420C4", VA = "0xA420C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xA420C8", Offset = "0xA420C8", VA = "0xA420C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BB2")]
			[Address(RVA = "0xA42198", Offset = "0xA42198", VA = "0xA42198", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve alphaCurve;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float alphaTime;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CanvasGroup group;

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xA41F18", Offset = "0xA41F18", VA = "0xA41F18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xA41F68", Offset = "0xA41F68", VA = "0xA41F68")]
		public void Show(bool show)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xA41FF4", Offset = "0xA41FF4", VA = "0xA41FF4")]
		[IteratorStateMachine(typeof(<AnimateGroupAlpha>d__5))]
		private IEnumerator AnimateGroupAlpha(bool up, float totatlTime, AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xA420B0", Offset = "0xA420B0", VA = "0xA420B0")]
		public CanvasSubtitleOnGrab()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class CanvasSubtitleText : MonoBehaviour
	{
		[Token(Token = "0x2000248")]
		[CompilerGenerated]
		private sealed class <AnimateGroupAlpha>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool up;

			[Token(Token = "0x4000B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve curve;

			[Token(Token = "0x4000B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float totatlTime;

			[Token(Token = "0x4000B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public CanvasSubtitleText <>4__this;

			[Token(Token = "0x4000B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <showT>5__2;

			[Token(Token = "0x17000173")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BBC")]
				[Address(RVA = "0xA425B0", Offset = "0xA425B0", VA = "0xA425B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000174")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BBE")]
				[Address(RVA = "0xA425F8", Offset = "0xA425F8", VA = "0xA425F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xA424A8", Offset = "0xA424A8", VA = "0xA424A8")]
			[DebuggerHidden]
			public <AnimateGroupAlpha>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0xA424E4", Offset = "0xA424E4", VA = "0xA424E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xA424E8", Offset = "0xA424E8", VA = "0xA424E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xA425B8", Offset = "0xA425B8", VA = "0xA425B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve alphaCurve;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float alphaTime;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Distance;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CanvasGroup group;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isShown;

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xA421E0", Offset = "0xA421E0", VA = "0xA421E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xA42230", Offset = "0xA42230", VA = "0xA42230")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xA423E8", Offset = "0xA423E8", VA = "0xA423E8")]
		private void Show(bool show)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xA42414", Offset = "0xA42414", VA = "0xA42414")]
		[IteratorStateMachine(typeof(<AnimateGroupAlpha>d__8))]
		private IEnumerator AnimateGroupAlpha(bool up, float totatlTime, AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xA424D0", Offset = "0xA424D0", VA = "0xA424D0")]
		public CanvasSubtitleText()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000249")]
	public class SubtitleInfo
	{
		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Text;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xA42600", Offset = "0xA42600", VA = "0xA42600")]
		public SubtitleInfo()
		{
		}
	}
	[Token(Token = "0x200024A")]
	[CreateAssetMenu(fileName = "NewDialogScriptableObject", menuName = "Organ Quarter/ScriptableObjects/DialogScriptableObject")]
	public class DialogScriptableObject : ScriptableObject
	{
		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip audioClip;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SubtitleInfo[] subtitleInfos;

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xA42608", Offset = "0xA42608", VA = "0xA42608")]
		public DialogScriptableObject()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class SubtitleOnStart : MonoBehaviour
	{
		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DialogScriptableObject DialogSO;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int subtitleIndex;

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xA42610", Offset = "0xA42610", VA = "0xA42610")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xA4268C", Offset = "0xA4268C", VA = "0xA4268C")]
		private void RunSubtitles()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xA42950", Offset = "0xA42950", VA = "0xA42950")]
		private void OnSubtitleEnd()
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xA42960", Offset = "0xA42960", VA = "0xA42960")]
		public SubtitleOnStart()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class Subtitles : MonoBehaviour
	{
		[Token(Token = "0x200024D")]
		[CompilerGenerated]
		private sealed class <WaitForNextLine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4000B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Subtitles <>4__this;

			[Token(Token = "0x17000176")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BD4")]
				[Address(RVA = "0xA438EC", Offset = "0xA438EC", VA = "0xA438EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000177")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BD6")]
				[Address(RVA = "0xA43934", Offset = "0xA43934", VA = "0xA43934", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0xA43480", Offset = "0xA43480", VA = "0xA43480")]
			[DebuggerHidden]
			public <WaitForNextLine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0xA43828", Offset = "0xA43828", VA = "0xA43828", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xA4382C", Offset = "0xA4382C", VA = "0xA4382C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0xA438F4", Offset = "0xA438F4", VA = "0xA438F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Subtitles _instance;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform container;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject subtitlePrefab;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve alphaCurve;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float showHideDuration;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float backgroundAlphaMax;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image containerImage;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float currentAlphaValue;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float wantedAlpha;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float alphaTime;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool isVisible;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float paddingTop;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float paddingBottom;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float subtitlesSeparation;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float heightSmoothSpeed;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float smoothVelocity;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<SubtitleText> subtitles;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Action onSubtitleEnd;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine waitForNextLineCO;

		[Token(Token = "0x17000175")]
		public static Subtitles Instance
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0xA42968", Offset = "0xA42968", VA = "0xA42968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xA429B0", Offset = "0xA429B0", VA = "0xA429B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xA42A8C", Offset = "0xA42A8C", VA = "0xA42A8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xA42AAC", Offset = "0xA42AAC", VA = "0xA42AAC")]
		private void ProcessAlpha()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xA42BF8", Offset = "0xA42BF8", VA = "0xA42BF8")]
		private void HandleSizeAndPositions()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xA42DE8", Offset = "0xA42DE8", VA = "0xA42DE8")]
		private void ProcessSubtitles()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xA42878", Offset = "0xA42878", VA = "0xA42878")]
		public SubtitleText AddText(string text, float timer = -1f, [Optional] Action onSubtitleEndAction)
		{
			return null;
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xA43254", Offset = "0xA43254", VA = "0xA43254")]
		[IteratorStateMachine(typeof(<WaitForNextLine>d__27))]
		private IEnumerator WaitForNextLine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xA432CC", Offset = "0xA432CC", VA = "0xA432CC")]
		public SubtitleText AddText(GameObject subtitlePrefab, string text, float timer = -1f, [Optional] Action onSubtitleEndAction)
		{
			return null;
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xA41530", Offset = "0xA41530", VA = "0xA41530")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xA43700", Offset = "0xA43700", VA = "0xA43700")]
		private void OnTextAutoRemove(SubtitleText subtitleText)
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xA43794", Offset = "0xA43794", VA = "0xA43794")]
		public Subtitles()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class SubtitleText : MonoBehaviour
	{
		[Token(Token = "0x200024F")]
		[CompilerGenerated]
		private sealed class <AnimateGroupAlpha>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SubtitleText <>4__this;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool up;

			[Token(Token = "0x4000B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AnimationCurve curve;

			[Token(Token = "0x4000B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float totalTime;

			[Token(Token = "0x4000B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action callback;

			[Token(Token = "0x4000B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <showT>5__2;

			[Token(Token = "0x17000179")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BE3")]
				[Address(RVA = "0xA43D44", Offset = "0xA43D44", VA = "0xA43D44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BE5")]
				[Address(RVA = "0xA43D8C", Offset = "0xA43D8C", VA = "0xA43D8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0xA43BC4", Offset = "0xA43BC4", VA = "0xA43BC4")]
			[DebuggerHidden]
			public <AnimateGroupAlpha>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0xA43C14", Offset = "0xA43C14", VA = "0xA43C14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0xA43C18", Offset = "0xA43C18", VA = "0xA43C18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0xA43D4C", Offset = "0xA43D4C", VA = "0xA43D4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve alphaCurve;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float alphaTime;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text text;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Font defaultFont;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CanvasGroup group;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string textToShow;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float showTimeCurrent;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float showTimeDuration;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool autoRemove;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isStarted;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastY;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float wantedY;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float positionSmoothSpeed;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float smoothVelocity;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Action<SubtitleText> onRemove;

		[Token(Token = "0x17000178")]
		public Text Text
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xA4393C", Offset = "0xA4393C", VA = "0xA4393C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xA43944", Offset = "0xA43944", VA = "0xA43944")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xA434A8", Offset = "0xA434A8", VA = "0xA434A8")]
		public void Init(RectTransform container, string _text, float _positionSmoothSpeed, float duration = -1f, [Optional] Action<SubtitleText> onRemoveAction)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xA42EE0", Offset = "0xA42EE0", VA = "0xA42EE0")]
		public void SetYPosition(float y)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xA4310C", Offset = "0xA4310C", VA = "0xA4310C")]
		public void Execute()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xA439CC", Offset = "0xA439CC", VA = "0xA439CC")]
		public void Show(bool show)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xA43B3C", Offset = "0xA43B3C", VA = "0xA43B3C")]
		private void Remove()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xA43A98", Offset = "0xA43A98", VA = "0xA43A98")]
		[IteratorStateMachine(typeof(<AnimateGroupAlpha>d__23))]
		private IEnumerator AnimateGroupAlpha(bool up, float totalTime, AnimationCurve curve, [Optional] Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xA43BEC", Offset = "0xA43BEC", VA = "0xA43BEC")]
		public SubtitleText()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class TutorialGuide : MonoBehaviour
	{
		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material RightHandMaterial;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] RightHandSubtitles;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material LeftHandMaterial;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] LeftHandSubtitles;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OnlyOnAnalog;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Renderer renderer;

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xA43D94", Offset = "0xA43D94", VA = "0xA43D94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xA43E20", Offset = "0xA43E20", VA = "0xA43E20")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xA44120", Offset = "0xA44120", VA = "0xA44120")]
		public TutorialGuide()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class FadeInCanvasGroup : MonoBehaviour
	{
		[Token(Token = "0x2000252")]
		[CompilerGenerated]
		private sealed class <AnimateGroupAlpha>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool up;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve curve;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float totatlTime;

			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public FadeInCanvasGroup <>4__this;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <showT>5__2;

			[Token(Token = "0x1700017B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BF0")]
				[Address(RVA = "0xA44398", Offset = "0xA44398", VA = "0xA44398", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BF2")]
				[Address(RVA = "0xA443E0", Offset = "0xA443E0", VA = "0xA443E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BED")]
			[Address(RVA = "0xA44268", Offset = "0xA44268", VA = "0xA44268")]
			[DebuggerHidden]
			public <AnimateGroupAlpha>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0xA442A4", Offset = "0xA442A4", VA = "0xA442A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xA442A8", Offset = "0xA442A8", VA = "0xA442A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0xA443A0", Offset = "0xA443A0", VA = "0xA443A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve alphaCurve;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float alphaTime;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CanvasGroup group;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine coroutine;

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xA44128", Offset = "0xA44128", VA = "0xA44128")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xA44178", Offset = "0xA44178", VA = "0xA44178")]
		public void Show(bool show)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xA441D4", Offset = "0xA441D4", VA = "0xA441D4")]
		[IteratorStateMachine(typeof(<AnimateGroupAlpha>d__6))]
		private IEnumerator AnimateGroupAlpha(bool up, float totatlTime, AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xA44290", Offset = "0xA44290", VA = "0xA44290")]
		public FadeInCanvasGroup()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public static class INOQ_SharedMethods
	{
		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xA443E8", Offset = "0xA443E8", VA = "0xA443E8")]
		public static float NumberPercent(float value, float percent)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xA44418", Offset = "0xA44418", VA = "0xA44418")]
		public static Color ColorDarken(Color color, float percent)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BF5")]
		public static TValue GetDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000BF6")]
		public static TValue GetDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, out bool keyExists, [Optional] TValue defaultValue, bool setMissingKey = false)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000BF7")]
		public static bool AddDictionaryValue<TKey, TValue>(Dictionary<TKey, TValue> dictionary, TKey key, TValue value, bool overwriteExisting = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xA44450", Offset = "0xA44450", VA = "0xA44450")]
		public static Bounds GetBounds(Transform transform, [Optional] Transform excludeRotation, [Optional] Transform excludeTransform)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xA4498C", Offset = "0xA4498C", VA = "0xA4498C")]
		public static Component CloneComponent(Component source, GameObject destination, bool copyProperties = false)
		{
			return null;
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xA44B24", Offset = "0xA44B24", VA = "0xA44B24")]
		public static bool IsLowest(float value, float[] others)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000254")]
	[RequireComponent(typeof(GrabbableHighlighter))]
	[RequireComponent(typeof(GrabbableUnityEvents))]
	[RequireComponent(typeof(GrabbableHaptics))]
	[RequireComponent(typeof(Grabbable))]
	public class AmmoPicker : ItemPicker
	{
		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xA44B84", Offset = "0xA44B84", VA = "0xA44B84", Slot = "5")]
		public override void PickupItem()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xA44C8C", Offset = "0xA44C8C", VA = "0xA44C8C")]
		public AmmoPicker()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class Weapon : MonoBehaviour
	{
		[Token(Token = "0x2000256")]
		[CompilerGenerated]
		private sealed class <DelayBanglight>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Weapon <>4__this;

			[Token(Token = "0x17000180")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C0C")]
				[Address(RVA = "0xA46880", Offset = "0xA46880", VA = "0xA46880", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000181")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C0E")]
				[Address(RVA = "0xA468C8", Offset = "0xA468C8", VA = "0xA468C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xA46620", Offset = "0xA46620", VA = "0xA46620")]
			[DebuggerHidden]
			public <DelayBanglight>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0xA467C8", Offset = "0xA467C8", VA = "0xA467C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xA467CC", Offset = "0xA467CC", VA = "0xA467CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xA46888", Offset = "0xA46888", VA = "0xA46888", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Weapon Stats")]
		private int weaponID;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string weaponName;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int ammoID;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int damage;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int magSize;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string ammoType;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float reloadTime;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float fireRate;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float recoil;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float bulletSpread;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private int shotgunMultipleBullets;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private bool autoFire;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Haptic Stats")]
		[SerializeField]
		private float hapticStrength;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float hapticDuration;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float hapticPulse;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Hand Side")]
		[SerializeField]
		private ControllerHandedness handSide;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Header("Effects")]
		private AudioClip fireSound;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip reloadSound;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip noAmmoAudio;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Recoil recoilComponent;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private GameObject banglight;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private ParticleSystem[] shootParticles;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private GameObject goreParticle;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private GameObject bloodParticle;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private GameObject collisionParticle;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[Header("Bullet Path")]
		private Transform bulletPoint;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioSource audioSource;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float reloadTimer;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float shotTimer;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float debugLineRendererTime;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private LineRenderer debugLineRenderer;

		[Token(Token = "0x1700017D")]
		public int WeaponID
		{
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0xA44C94", Offset = "0xA44C94", VA = "0xA44C94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017E")]
		public int AmmoID
		{
			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0xA44C9C", Offset = "0xA44C9C", VA = "0xA44C9C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017F")]
		public ControllerHandedness HandSide
		{
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0xA44CA4", Offset = "0xA44CA4", VA = "0xA44CA4")]
			get
			{
				return default(ControllerHandedness);
			}
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xA44CAC", Offset = "0xA44CAC", VA = "0xA44CAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xA44D48", Offset = "0xA44D48", VA = "0xA44D48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xA44DC4", Offset = "0xA44DC4", VA = "0xA44DC4")]
		public void UpdateControllerInput()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xA44F04", Offset = "0xA44F04", VA = "0xA44F04")]
		public void ShootGun()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xA45310", Offset = "0xA45310", VA = "0xA45310")]
		public void ReloadAmmo()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xA45550", Offset = "0xA45550", VA = "0xA45550")]
		[IteratorStateMachine(typeof(<DelayBanglight>d__40))]
		private IEnumerator DelayBanglight()
		{
			return null;
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xA46648", Offset = "0xA46648", VA = "0xA46648")]
		private void DebugDrawRay(Vector3 _startingPosition, Vector3 _endPosition, Color _color)
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xA455B8", Offset = "0xA455B8", VA = "0xA455B8")]
		private void ShootRay()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xA467B8", Offset = "0xA467B8", VA = "0xA467B8")]
		public Weapon()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class WeaponManager : MonoBehaviour
	{
		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static WeaponManager weaponManager;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HandModelSelector handModelSelectorLeft;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private HandModelSelector handModelSelectorRight;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Weapon[] weapons;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Weapon currentWeapon;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float VibrateFrequency;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float VibrateAmplitude;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float VibrateDuration;

		[Token(Token = "0x17000182")]
		public bool IsUnlimitedAmmo
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xA469C4", Offset = "0xA469C4", VA = "0xA469C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0xA469CC", Offset = "0xA469CC", VA = "0xA469CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool NoRecoil
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0xA469D8", Offset = "0xA469D8", VA = "0xA469D8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xA469E0", Offset = "0xA469E0", VA = "0xA469E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public bool ShowBulletLine
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0xA469EC", Offset = "0xA469EC", VA = "0xA469EC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xA469F4", Offset = "0xA469F4", VA = "0xA469F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xA4697C", Offset = "0xA4697C", VA = "0xA4697C")]
		public static WeaponManager GetWeaponManager()
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xA46A00", Offset = "0xA46A00", VA = "0xA46A00")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xA46A4C", Offset = "0xA46A4C", VA = "0xA46A4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xA46C2C", Offset = "0xA46C2C", VA = "0xA46C2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xA46CF4", Offset = "0xA46CF4", VA = "0xA46CF4")]
		private void UpdateControllerInput()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xA46E88", Offset = "0xA46E88", VA = "0xA46E88")]
		private void UpdateDisplay(bool _isLeftHand)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xA46BD0", Offset = "0xA46BD0", VA = "0xA46BD0")]
		private void SetWeaponStats(int _weaponID)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xA46DA0", Offset = "0xA46DA0", VA = "0xA46DA0")]
		private void SwapWeapons()
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xA47048", Offset = "0xA47048", VA = "0xA47048")]
		public Weapon GetWeaponByID(int _weaponID)
		{
			return null;
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xA470A4", Offset = "0xA470A4", VA = "0xA470A4")]
		public WeaponManager()
		{
		}
	}
	[Token(Token = "0x2000259")]
	[RequireComponent(typeof(GrabbableUnityEvents))]
	[RequireComponent(typeof(GrabbableHaptics))]
	[RequireComponent(typeof(Grabbable))]
	[RequireComponent(typeof(GrabbableHighlighter))]
	public class WeaponPicker : ItemPicker
	{
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xA470C4", Offset = "0xA470C4", VA = "0xA470C4", Slot = "4")]
		public override void SetDefaultValues()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xA47154", Offset = "0xA47154", VA = "0xA47154", Slot = "5")]
		public override void PickupItem()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xA47254", Offset = "0xA47254", VA = "0xA47254")]
		public WeaponPicker()
		{
		}
	}
}
namespace DynamicFogAndMist
{
	[Token(Token = "0x200025A")]
	public enum FOG_TYPE
	{
		[Token(Token = "0x4000B99")]
		DesktopFogWithSkyHaze,
		[Token(Token = "0x4000B9A")]
		MobileFogWithSkyHaze,
		[Token(Token = "0x4000B9B")]
		MobileFogOnlyGround,
		[Token(Token = "0x4000B9C")]
		DesktopFogPlusWithSkyHaze,
		[Token(Token = "0x4000B9D")]
		MobileFogSimple,
		[Token(Token = "0x4000B9E")]
		MobileFogBasic
	}
	[Token(Token = "0x200025B")]
	internal static class FOG_TYPE_Ext
	{
		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xA4725C", Offset = "0xA4725C", VA = "0xA4725C")]
		public static bool isPlus(this FOG_TYPE fogType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200025C")]
	public enum FOG_PRESET
	{
		[Token(Token = "0x4000BA0")]
		Clear,
		[Token(Token = "0x4000BA1")]
		Mist,
		[Token(Token = "0x4000BA2")]
		WindyMist,
		[Token(Token = "0x4000BA3")]
		GroundFog,
		[Token(Token = "0x4000BA4")]
		Fog,
		[Token(Token = "0x4000BA5")]
		HeavyFog,
		[Token(Token = "0x4000BA6")]
		SandStorm,
		[Token(Token = "0x4000BA7")]
		Custom
	}
	[Token(Token = "0x200025D")]
	[ExecuteInEditMode]
	[HelpURL("http://kronnect.com/taptapgo")]
	[ImageEffectAllowedInSceneView]
	public class DynamicFog : MonoBehaviour
	{
		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FOG_TYPE effectType;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FOG_PRESET preset;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useFogVolumes;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool enableDithering;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float alpha;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float noiseStrength;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 0.999f)]
		public float distance;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0.0001f, 2f)]
		public float distanceFallOff;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1.2f)]
		public float maxDistance;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0.0001f, 0.5f)]
		public float maxDistanceFallOff;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 500f)]
		public float height;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float heightFallOff;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float baselineHeight;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool clipUnderBaseline;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 15f)]
		public float turbulence;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 0.2f)]
		public float speed;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color color;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color color2;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 500f)]
		public float skyHaze;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float skySpeed;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float skyNoiseStrength;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float skyAlpha;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject sun;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool fogOfWarEnabled;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 fogOfWarCenter;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 fogOfWarSize;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int fogOfWarTextureSize;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool useSinglePassStereoRenderingMatrix;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material fogMatAdv;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material fogMatFogSky;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material fogMatOnlyFog;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material fogMatVol;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material fogMatSimple;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material fogMatBasic;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Material fogMat;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float initialFogAlpha;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float targetFogAlpha;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float initialSkyHazeAlpha;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float targetSkyHazeAlpha;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool targetFogColors;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Color initialFogColor1;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Color targetFogColor1;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Color initialFogColor2;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Color targetFogColor2;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float transitionDuration;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float transitionStartTime;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float currentFogAlpha;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float currentSkyHazeAlpha;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Color currentFogColor1;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Color currentFogColor2;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Camera currentCamera;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Texture2D fogOfWarTexture;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Color32[] fogOfWarColorBuffer;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Light sunLight;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector3 sunDirection;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Color sunColor;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float sunIntensity;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DynamicFog _fog;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private List<string> shaderKeywords;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool matOrtho;

		[Token(Token = "0x17000185")]
		public static DynamicFog instance
		{
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0xA4727C", Offset = "0xA4727C", VA = "0xA4727C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public Camera fogCamera
		{
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xA474A0", Offset = "0xA474A0", VA = "0xA474A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xA473BC", Offset = "0xA473BC", VA = "0xA473BC")]
		public string GetCurrentPresetName()
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xA474A8", Offset = "0xA474A8", VA = "0xA474A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xA47DB4", Offset = "0xA47DB4", VA = "0xA47DB4")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xA47DB8", Offset = "0xA47DB8", VA = "0xA47DB8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xA474C0", Offset = "0xA474C0", VA = "0xA474C0")]
		private void Init()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xA480F8", Offset = "0xA480F8", VA = "0xA480F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xA48A10", Offset = "0xA48A10", VA = "0xA48A10")]
		public void CheckPreset()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xA48C7C", Offset = "0xA48C7C", VA = "0xA48C7C")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xA48D18", Offset = "0xA48D18", VA = "0xA48D18")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xA49058", Offset = "0xA49058", VA = "0xA49058")]
		private void ResetMaterial()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xA47520", Offset = "0xA47520", VA = "0xA47520")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xA49070", Offset = "0xA49070", VA = "0xA49070")]
		private void CopyTransitionValues()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xA486D4", Offset = "0xA486D4", VA = "0xA486D4")]
		private void SetSkyData()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xA48734", Offset = "0xA48734", VA = "0xA48734")]
		private void UpdateFogColor()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xA4909C", Offset = "0xA4909C", VA = "0xA4909C")]
		public void SetTargetAlpha(float newFogAlpha, float newSkyHazeAlpha, float duration)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xA490DC", Offset = "0xA490DC", VA = "0xA490DC")]
		public void ClearTargetAlpha(float duration)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xA49118", Offset = "0xA49118", VA = "0xA49118")]
		public void SetTargetColors(Color color1, Color color2, float duration)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xA4918C", Offset = "0xA4918C", VA = "0xA4918C")]
		public void ClearTargetColors(float duration)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xA48010", Offset = "0xA48010", VA = "0xA48010")]
		private void UpdateFogOfWarTexture()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xA49350", Offset = "0xA49350", VA = "0xA49350")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha)
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xA49750", Offset = "0xA49750", VA = "0xA49750")]
		public void ResetFogOfWarAlpha(Vector3 worldPosition, float radius)
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xA49200", Offset = "0xA49200", VA = "0xA49200")]
		public void ResetFogOfWar()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xA491C0", Offset = "0xA491C0", VA = "0xA491C0")]
		private int GetScaledSize(int size, float factor)
		{
			return default(int);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xA49A9C", Offset = "0xA49A9C", VA = "0xA49A9C")]
		public DynamicFog()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[ExecuteInEditMode]
	[HelpURL("http://kronnect.com/taptapgo")]
	public class DynamicFogManager : MonoBehaviour
	{
		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float alpha;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float noiseStrength;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 0.999f)]
		public float distance;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 2f)]
		public float distanceFallOff;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 500f)]
		public float height;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float heightFallOff;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float baselineHeight;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color color;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject sun;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Light sunLight;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 sunDirection;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color sunColor;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float sunIntensity;

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xA49B98", Offset = "0xA49B98", VA = "0xA49B98")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xA49BC8", Offset = "0xA49BC8", VA = "0xA49BC8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xA49BE0", Offset = "0xA49BE0", VA = "0xA49BE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xA49BB0", Offset = "0xA49BB0", VA = "0xA49BB0")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xA49F94", Offset = "0xA49F94", VA = "0xA49F94")]
		private void UpdateFogData()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xA49D58", Offset = "0xA49D58", VA = "0xA49D58")]
		private void UpdateFogColor()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xA4A05C", Offset = "0xA4A05C", VA = "0xA4A05C")]
		public DynamicFogManager()
		{
		}
	}
	[Token(Token = "0x200025F")]
	[ExecuteInEditMode]
	public class DynamicFogOfWar : MonoBehaviour
	{
		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int fogOfWarTextureSize;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material fogMat;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DynamicFogOfWar _instance;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D fogOfWarTexture;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color32[] fogOfWarColorBuffer;

		[Token(Token = "0x17000187")]
		public static DynamicFogOfWar instance
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0xA4A0EC", Offset = "0xA4A0EC", VA = "0xA4A0EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xA4A1B0", Offset = "0xA4A1B0", VA = "0xA4A1B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xA4A2FC", Offset = "0xA4A2FC", VA = "0xA4A2FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xA4A388", Offset = "0xA4A388", VA = "0xA4A388")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xA4A214", Offset = "0xA4A214", VA = "0xA4A214")]
		private void UpdateFogOfWarTexture()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xA4A46C", Offset = "0xA4A46C", VA = "0xA4A46C")]
		private int GetScaledSize(int size, float factor)
		{
			return default(int);
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xA4A5FC", Offset = "0xA4A5FC", VA = "0xA4A5FC")]
		public void SetFogOfWarAlpha(Vector3 worldPosition, float radius, float fogNewAlpha)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xA4A4AC", Offset = "0xA4A4AC", VA = "0xA4A4AC")]
		public void ResetFogOfWar()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xA4AA44", Offset = "0xA4AA44", VA = "0xA4AA44")]
		public void SetFogOfWarTerrainBoundary(Terrain terrain, float borderWidth)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xA4ACBC", Offset = "0xA4ACBC", VA = "0xA4ACBC")]
		public DynamicFogOfWar()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class FogVolume : MonoBehaviour
	{
		[Token(Token = "0x4000BF6")]
		private const float GRAY = 0.8901961f;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Target alpha for fog when camera enters this fog volume")]
		[Range(0f, 1f)]
		public float targetFogAlpha;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Target alpha for sky haze when camera enters this fog volume")]
		[Range(0f, 1f)]
		public float targetSkyHazeAlpha;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Target fog color 1 when gamera enters this fog folume")]
		public Color targetFogColor1;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Target fog color 2 when gamera enters this fog folume")]
		public Color targetFogColor2;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Set this to zero for changing fog alpha immediately upon enter/exit fog volume.")]
		public float transitionDuration;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DynamicFog fog;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool cameraInside;

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xA4ACCC", Offset = "0xA4ACCC", VA = "0xA4ACCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xA4ACE4", Offset = "0xA4ACE4", VA = "0xA4ACE4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xA4AE14", Offset = "0xA4AE14", VA = "0xA4AE14")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xA4AF2C", Offset = "0xA4AF2C", VA = "0xA4AF2C")]
		public FogVolume()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x2000261")]
	[RequireComponent(typeof(HandPoser))]
	[ExecuteInEditMode]
	public class AutoPoser : MonoBehaviour
	{
		[Token(Token = "0x2000262")]
		[CompilerGenerated]
		private sealed class <updateAutoPoseRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoPoser <>4__this;

			[Token(Token = "0x1700018A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C6E")]
				[Address(RVA = "0xA4C614", Offset = "0xA4C614", VA = "0xA4C614", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C70")]
				[Address(RVA = "0xA4C65C", Offset = "0xA4C65C", VA = "0xA4C65C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0xA4B674", Offset = "0xA4B674", VA = "0xA4B674")]
			[DebuggerHidden]
			public <updateAutoPoseRoutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0xA4C558", Offset = "0xA4C558", VA = "0xA4C558", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0xA4C55C", Offset = "0xA4C55C", VA = "0xA4C55C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xA4C61C", Offset = "0xA4C61C", VA = "0xA4C61C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Auto Pose Settings")]
		[Tooltip("(Required) A HandPose in the fully open position. AutoPose will lerp each finger joint between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose OpenHandPose;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) A HandPose in the fully closed position. AutoPose will lerp each finger between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose ClosedHandPose;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Finger Tip Collision")]
		[Tooltip("Radius (in meters) of the fingertips to use when checking for collisions during auto-posing. Only used if a FingerTipCollider is not defined. (Default : 0.00875)")]
		[Range(0f, 0.02f)]
		public float FingerTipRadius;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider ThumbCollider;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider IndexFingerCollider;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider MiddleFingerCollider;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider RingFingerCollider;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider PinkyFingerCollider;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Continuous Update")]
		[Tooltip("If true the hand will auto pose in Update(). Also works in the editor.")]
		public bool UpdateContinuously;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("(Optional) The HandPose to use when UpdateContinuously = true and no collisions have been detected. If not specified, the hand will make a ClosedHandPose shape when no collisions have been found.")]
		public HandPose IdleHandPose;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LayerMask CollisionLayerMask;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Editor Gizmos")]
		public bool ShowGizmos;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GizmoDisplayType GizmoType;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color GizmoColor;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HandPoser InspectedPose;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HandPoseDefinition currentPose;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandPoseDefinition tempPose;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseDefinition collisionPose;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _count;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _thumbHit;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _indexHit;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _middleHit;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _ringHit;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _pinkyHit;

		[Token(Token = "0x17000188")]
		public HandPoseDefinition CollisionPose
		{
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0xA4AF64", Offset = "0xA4AF64", VA = "0xA4AF64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public bool CollisionDetected
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xA4AF6C", Offset = "0xA4AF6C", VA = "0xA4AF6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xA4AFA4", Offset = "0xA4AFA4", VA = "0xA4AFA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xA4B030", Offset = "0xA4B030", VA = "0xA4B030")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xA4B244", Offset = "0xA4B244", VA = "0xA4B244")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xA4B59C", Offset = "0xA4B59C", VA = "0xA4B59C", Slot = "4")]
		public virtual void UpdateAutoPose(bool lerp)
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xA4B5EC", Offset = "0xA4B5EC", VA = "0xA4B5EC", Slot = "5")]
		public virtual void UpdateAutoPoseOnce()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xA4B60C", Offset = "0xA4B60C", VA = "0xA4B60C")]
		[IteratorStateMachine(typeof(<updateAutoPoseRoutine>d__33))]
		private IEnumerator updateAutoPoseRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xA4B35C", Offset = "0xA4B35C", VA = "0xA4B35C")]
		public HandPoseDefinition GetAutoPose()
		{
			return null;
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xA4B69C", Offset = "0xA4B69C", VA = "0xA4B69C")]
		public HandPoseDefinition CopyHandDefinition(HandPoseDefinition ToCopy)
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xA4BD6C", Offset = "0xA4BD6C", VA = "0xA4BD6C")]
		public FingerJoint GetJointCopy(FingerJoint ToClone)
		{
			return null;
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xA4BC28", Offset = "0xA4BC28", VA = "0xA4BC28")]
		public List<FingerJoint> GetJointsCopy(List<FingerJoint> ToClone)
		{
			return null;
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xA4B778", Offset = "0xA4B778", VA = "0xA4B778")]
		public bool GetThumbHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xA4B868", Offset = "0xA4B868", VA = "0xA4B868")]
		public bool GetIndexHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xA4B958", Offset = "0xA4B958", VA = "0xA4B958")]
		public bool GetMiddleHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xA4BA48", Offset = "0xA4BA48", VA = "0xA4BA48")]
		public bool GetRingHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xA4BB38", Offset = "0xA4BB38", VA = "0xA4BB38")]
		public bool GetPinkyHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xA4BE00", Offset = "0xA4BE00", VA = "0xA4BE00", Slot = "6")]
		public virtual bool LoopThroughJoints(List<Transform> fromJoints, List<FingerJoint> toJoints, Vector3 tipPosition, float tipRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xA4C188", Offset = "0xA4C188", VA = "0xA4C188", Slot = "7")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xA4C210", Offset = "0xA4C210", VA = "0xA4C210")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xA4C3E8", Offset = "0xA4C3E8", VA = "0xA4C3E8")]
		public void DrawJointGizmo(FingerTipCollider tipCollider, Vector3 defaultPosition, float radius, GizmoDisplayType gizmoType)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xA4C514", Offset = "0xA4C514", VA = "0xA4C514")]
		public AutoPoser()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public enum GizmoDisplayType
	{
		[Token(Token = "0x4000C1A")]
		Wire,
		[Token(Token = "0x4000C1B")]
		Solid,
		[Token(Token = "0x4000C1C")]
		None
	}
	[Token(Token = "0x2000264")]
	public class BoneMapping : MonoBehaviour
	{
		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Weight;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneObject[] Fingers;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xA4C664", Offset = "0xA4C664", VA = "0xA4C664")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xA4C90C", Offset = "0xA4C90C", VA = "0xA4C90C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xA4CD68", Offset = "0xA4CD68", VA = "0xA4CD68")]
		public BoneMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000265")]
	public class BoneObject
	{
		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] targetBones;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] destinationBones;

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xA4CD80", Offset = "0xA4CD80", VA = "0xA4CD80")]
		public BoneObject()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class EditorHandle : MonoBehaviour
	{
		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowTransformName;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BaseColor;

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xA4CDE8", Offset = "0xA4CDE8", VA = "0xA4CDE8")]
		public EditorHandle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000267")]
	public class FingerJoint
	{
		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string TransformName;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 LocalPosition;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion LocalRotation;

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xA4BDF8", Offset = "0xA4BDF8", VA = "0xA4BDF8")]
		public FingerJoint()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class FingerTipCollider : MonoBehaviour
	{
		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Radius (in meters) of the fingertip to use when checking for collisions during auto-posing. (Default : 0.00875)")]
		[Range(0f, 0.02f)]
		public float Radius;

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xA4CE08", Offset = "0xA4CE08", VA = "0xA4CE08")]
		public FingerTipCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000269")]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Name")]
		public string PoseName;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Joint Definitions")]
		[SerializeField]
		public HandPoseDefinition Joints;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xA4CE1C", Offset = "0xA4CE1C", VA = "0xA4CE1C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class HandPoseBlender : MonoBehaviour
	{
		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Run in Update")]
		[Tooltip("If true the HandPoser will be updated in Update by reading ThumbValue, IndexValue, and GripValue")]
		public bool UpdatePose;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) Blend from this hand pose to the Pose2 hand pose.")]
		[Header("Blend From / To")]
		public HandPose Pose1;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Required) Blend from the Pose1 hand pose to this hand pose.")]
		public HandPose Pose2;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Inputs")]
		[Range(0f, 1f)]
		public float ThumbValue;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float IndexValue;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float MiddleValue;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RingValue;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float PinkyValue;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float GripValue;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _lastGripValue;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HandPoser handPoser;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xA4CE24", Offset = "0xA4CE24", VA = "0xA4CE24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xA4CE74", Offset = "0xA4CE74", VA = "0xA4CE74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xA4CE8C", Offset = "0xA4CE8C", VA = "0xA4CE8C", Slot = "4")]
		public virtual void UpdatePoseFromInputs()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xA4CE98", Offset = "0xA4CE98", VA = "0xA4CE98")]
		public void UpdateThumb(float amount)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xA4CED0", Offset = "0xA4CED0", VA = "0xA4CED0")]
		public void UpdateIndex(float amount)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xA4CF08", Offset = "0xA4CF08", VA = "0xA4CF08")]
		public void UpdateMiddle(float amount)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xA4CF48", Offset = "0xA4CF48", VA = "0xA4CF48")]
		public void UpdateRing(float amount)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xA4CF80", Offset = "0xA4CF80", VA = "0xA4CF80")]
		public void UpdatePinky(float amount)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xA4CFB8", Offset = "0xA4CFB8", VA = "0xA4CFB8")]
		public void UpdateGrip(float amount)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xA4CFFC", Offset = "0xA4CFFC", VA = "0xA4CFFC", Slot = "5")]
		public virtual void DoIdleBlendPose()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xA4D0DC", Offset = "0xA4D0DC", VA = "0xA4D0DC")]
		public HandPoseBlender()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026B")]
	public class HandPoseDefinition
	{
		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Wrist")]
		public FingerJoint WristJoint;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Thumb")]
		public List<FingerJoint> ThumbJoints;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Index")]
		public List<FingerJoint> IndexJoints;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Middle")]
		public List<FingerJoint> MiddleJoints;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Ring")]
		public List<FingerJoint> RingJoints;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Pinky")]
		public List<FingerJoint> PinkyJoints;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("Other")]
		public List<FingerJoint> OtherJoints;

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xA4E0EC", Offset = "0xA4E0EC", VA = "0xA4E0EC")]
		public HandPoseDefinition()
		{
		}
	}
	[Token(Token = "0x200026C")]
	[ExecuteInEditMode]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Path of the directory where handposes should be stored. Tip : Keep these in a 'Resources' directory so you can use Resources.Load().")]
		public string ResourcePath;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PoseName;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The currently selected hand pose. Change this to automatically update the pose in Update")]
		public HandPose CurrentPose;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The speed at which to lerp the bones when changing hand poses")]
		[Header("Animation Properties")]
		public float AnimationSpeed;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true the local rotation of each bone will be updated while changing hand poses. This should generally be true if you are adjusting a hand pose.")]
		public bool UpdateJointRotations;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("If true the local position of each bone will be updated while changing hand poses. Typically this will be false as joints only adjust their rotations.")]
		public bool UpdateJointPositions;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("If true the local position of the wrist will be updated. Useful if you need to move the entire hand.")]
		public bool UpdateWristPosition;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform WristJoint;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> ThumbJoints;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> IndexJoints;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> MiddleJoints;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> RingJoints;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Transform> PinkyJoints;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> OtherJoints;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HandPose previousPose;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool doSingleAnimation;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool ContinuousUpdate;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float editorAnimationTime;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maxEditorAnimationTime;

		[Token(Token = "0x1700018C")]
		public HandPoseDefinition HandPoseJoints
		{
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0xA4E0F4", Offset = "0xA4E0F4", VA = "0xA4E0F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xA4E100", Offset = "0xA4E100", VA = "0xA4E100")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xA4E120", Offset = "0xA4E120", VA = "0xA4E120")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xA4E15C", Offset = "0xA4E15C", VA = "0xA4E15C")]
		public void CheckForPoseChange()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xA4E110", Offset = "0xA4E110", VA = "0xA4E110")]
		public void OnPoseChanged()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xA4E294", Offset = "0xA4E294", VA = "0xA4E294")]
		public FingerJoint GetWristJoint()
		{
			return null;
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xA4E2A4", Offset = "0xA4E2A4", VA = "0xA4E2A4")]
		public List<FingerJoint> GetThumbJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xA4E2B4", Offset = "0xA4E2B4", VA = "0xA4E2B4")]
		public List<FingerJoint> GetIndexJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xA4E2C4", Offset = "0xA4E2C4", VA = "0xA4E2C4")]
		public List<FingerJoint> GetMiddleJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xA4E2D4", Offset = "0xA4E2D4", VA = "0xA4E2D4")]
		public List<FingerJoint> GetRingJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xA4E2E4", Offset = "0xA4E2E4", VA = "0xA4E2E4")]
		public List<FingerJoint> GetPinkyJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xA4E2F4", Offset = "0xA4E2F4", VA = "0xA4E2F4")]
		public List<FingerJoint> GetOtherJoints()
		{
			return null;
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xA4E304", Offset = "0xA4E304", VA = "0xA4E304")]
		public int GetTotalJointsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xA4E3F4", Offset = "0xA4E3F4", VA = "0xA4E3F4")]
		public Transform GetTip(List<Transform> transforms)
		{
			return null;
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xA4E464", Offset = "0xA4E464", VA = "0xA4E464")]
		public Transform GetThumbTip()
		{
			return null;
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xA4E46C", Offset = "0xA4E46C", VA = "0xA4E46C")]
		public Transform GetIndexTip()
		{
			return null;
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xA4E474", Offset = "0xA4E474", VA = "0xA4E474")]
		public Transform GetMiddleTip()
		{
			return null;
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xA4E47C", Offset = "0xA4E47C", VA = "0xA4E47C")]
		public Transform GetRingTip()
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xA4E484", Offset = "0xA4E484", VA = "0xA4E484")]
		public Transform GetPinkyTip()
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xA4E48C", Offset = "0xA4E48C", VA = "0xA4E48C")]
		public static Vector3 GetFingerTipPositionWithOffset(List<Transform> jointTransforms, float tipRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xA4E6D0", Offset = "0xA4E6D0", VA = "0xA4E6D0", Slot = "4")]
		public virtual List<FingerJoint> GetJointsFromTransforms(List<Transform> jointTransforms)
		{
			return null;
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xA4E884", Offset = "0xA4E884", VA = "0xA4E884", Slot = "5")]
		public virtual FingerJoint GetJointFromTransform(Transform jointTransform)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xA4E95C", Offset = "0xA4E95C", VA = "0xA4E95C", Slot = "6")]
		public virtual void UpdateHandPose(HandPose handPose, bool lerp)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xA4E980", Offset = "0xA4E980", VA = "0xA4E980", Slot = "7")]
		public virtual void UpdateHandPose(HandPoseDefinition pose, bool lerp)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xA4EA70", Offset = "0xA4EA70", VA = "0xA4EA70", Slot = "8")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, bool doLerp, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xA4EAE0", Offset = "0xA4EAE0", VA = "0xA4EAE0", Slot = "9")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, float lerpAmount, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xA4EC60", Offset = "0xA4EC60", VA = "0xA4EC60", Slot = "10")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, bool doLerp)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xA4ECB8", Offset = "0xA4ECB8", VA = "0xA4ECB8", Slot = "11")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, float lerpAmount)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xA4EEA0", Offset = "0xA4EEA0", VA = "0xA4EEA0", Slot = "12")]
		public virtual HandPoseDefinition GetHandPoseDefinition()
		{
			return null;
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xA4EFA8", Offset = "0xA4EFA8", VA = "0xA4EFA8", Slot = "13")]
		public virtual void SavePoseAsScriptablObject(string poseName)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xA4F010", Offset = "0xA4F010", VA = "0xA4F010", Slot = "14")]
		public virtual void CreateUniquePose(string poseName)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xA4F13C", Offset = "0xA4F13C", VA = "0xA4F13C", Slot = "15")]
		public virtual HandPose GetHandPoseScriptableObject()
		{
			return null;
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xA4F144", Offset = "0xA4F144", VA = "0xA4F144", Slot = "16")]
		public virtual void DoPoseUpdate()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xA4F208", Offset = "0xA4F208", VA = "0xA4F208", Slot = "17")]
		public virtual void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xA4F34C", Offset = "0xA4F34C", VA = "0xA4F34C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xA4F350", Offset = "0xA4F350", VA = "0xA4F350")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class PoseableObject : MonoBehaviour
	{
		[Token(Token = "0x200026E")]
		public enum PoseType
		{
			[Token(Token = "0x4000C56")]
			HandPose,
			[Token(Token = "0x4000C57")]
			AutoPoseOnce,
			[Token(Token = "0x4000C58")]
			AutoPoseContinuous,
			[Token(Token = "0x4000C59")]
			Animator,
			[Token(Token = "0x4000C5A")]
			Other,
			[Token(Token = "0x4000C5B")]
			None
		}

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Type")]
		public PoseType poseType;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Set this HandPose on the Handposer when PoseType is set to 'HandPose'")]
		[Header("Hand Pose Properties")]
		public HandPose EquipHandPose;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Auto Pose Properties")]
		[Tooltip("If PoseType = AutoPoseOnce, AutoPose will be run for this many seconds")]
		public float AutoPoseDuration;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Animator Properties")]
		[Tooltip("Set animator ID to this value if PoseType is set to 'Animator'")]
		public int HandPoseID;

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xA4F3E4", Offset = "0xA4F3E4", VA = "0xA4F3E4")]
		public PoseableObject()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class SampleHandController : MonoBehaviour
	{
		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHandedness ControllerSide;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoseableObject HeldObject;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool wasHoldingObject;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator handAnimator;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HandPoser handPoser;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoPoser autoPoser;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.XR.InputDevice controller;

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xA4F3F8", Offset = "0xA4F3F8", VA = "0xA4F3F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xA4F5AC", Offset = "0xA4F5AC", VA = "0xA4F5AC", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xA4F5B8", Offset = "0xA4F5B8", VA = "0xA4F5B8", Slot = "5")]
		public virtual void DoHandControllerUpdate()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xA4F614", Offset = "0xA4F614", VA = "0xA4F614", Slot = "6")]
		public virtual void SetCurrentlyHeldObject(GameObject holdObject)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xA4F6B8", Offset = "0xA4F6B8", VA = "0xA4F6B8", Slot = "7")]
		public virtual void ClearCurrentlyHeldObject()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xA4F738", Offset = "0xA4F738", VA = "0xA4F738", Slot = "8")]
		public virtual void ResetToIdleComponents()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xA4F814", Offset = "0xA4F814", VA = "0xA4F814", Slot = "9")]
		public virtual void UpdateFingerInputs()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xA4FB20", Offset = "0xA4FB20", VA = "0xA4FB20", Slot = "10")]
		public virtual void DoHeldItemPose()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xA4FC88", Offset = "0xA4FC88", VA = "0xA4FC88", Slot = "11")]
		public virtual void DisableContinousAutoPose()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xA4FCFC", Offset = "0xA4FCFC", VA = "0xA4FCFC", Slot = "12")]
		public virtual void DoIdlePose()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xA4FD1C", Offset = "0xA4FD1C", VA = "0xA4FD1C", Slot = "13")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xA4FA40", Offset = "0xA4FA40", VA = "0xA4FA40")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xA4FD7C", Offset = "0xA4FD7C", VA = "0xA4FD7C", Slot = "14")]
		public virtual void UpdateXRDevices()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xA4F9F8", Offset = "0xA4F9F8", VA = "0xA4F9F8")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage)
		{
			return default(float);
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xA4FE10", Offset = "0xA4FE10", VA = "0xA4FE10")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xA4FE44", Offset = "0xA4FE44", VA = "0xA4FE44", Slot = "15")]
		public virtual UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xA4FF14", Offset = "0xA4FF14", VA = "0xA4FF14", Slot = "16")]
		public virtual UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xA4FFE4", Offset = "0xA4FFE4", VA = "0xA4FFE4", Slot = "17")]
		public virtual bool GetThumbIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xA50158", Offset = "0xA50158", VA = "0xA50158", Slot = "18")]
		public virtual bool GetIndexIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xA501F8", Offset = "0xA501F8", VA = "0xA501F8")]
		public SampleHandController()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public enum ControllerHandedness
	{
		[Token(Token = "0x4000C66")]
		Left,
		[Token(Token = "0x4000C67")]
		Right,
		[Token(Token = "0x4000C68")]
		None
	}
	[Token(Token = "0x2000271")]
	public class SavePoseBinding : MonoBehaviour
	{
		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this InputAction returns true, save the current hand pose using 'handPoser.CreateUniquePose(SaveNamePrefix)'")]
		[Header("Save Input : ")]
		public InputAction SaveInput;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Prefix of the hand pose file name to use. For example, a prefix of 'HandPose' will save as 'HandPose 1', 'HandPose 2', etc.")]
		[Header("Save name prefix : ")]
		public string SaveNamePrefix;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, the SaveInput binding will be shown on the screen gui. Will not show in VR.")]
		[Header("Debug : ")]
		public bool ShowKeybindingToolTip;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HandPoser handPoser;

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xA50294", Offset = "0xA50294", VA = "0xA50294")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xA50300", Offset = "0xA50300", VA = "0xA50300")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xA503C4", Offset = "0xA503C4", VA = "0xA503C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xA504EC", Offset = "0xA504EC", VA = "0xA504EC")]
		public SavePoseBinding()
		{
		}
	}
	[Token(Token = "0x2000272")]
	[ExecuteInEditMode]
	public class SkeletonVisualizer : MonoBehaviour
	{
		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float JointRadius;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 5f)]
		public float BoneThickness;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color GizmoColor;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ShowTransformNames;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isQuiting;

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xA50544", Offset = "0xA50544", VA = "0xA50544")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xA50550", Offset = "0xA50550", VA = "0xA50550")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xA50554", Offset = "0xA50554", VA = "0xA50554", Slot = "4")]
		public virtual bool IsTipOfBone(Transform fingerJoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xA50644", Offset = "0xA50644", VA = "0xA50644")]
		public void ResetEditorHandles()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xA50788", Offset = "0xA50788", VA = "0xA50788")]
		public SkeletonVisualizer()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class XRTrackedPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableXRDevice Device;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xA507B0", Offset = "0xA507B0", VA = "0xA507B0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xA50800", Offset = "0xA50800", VA = "0xA50800", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xA50874", Offset = "0xA50874", VA = "0xA50874", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xA508E8", Offset = "0xA508E8", VA = "0xA508E8", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xA50910", Offset = "0xA50910", VA = "0xA50910", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xA5091C", Offset = "0xA5091C", VA = "0xA5091C", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xA50BDC", Offset = "0xA50BDC", VA = "0xA50BDC", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xA50FEC", Offset = "0xA50FEC", VA = "0xA50FEC", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xA50D14", Offset = "0xA50D14", VA = "0xA50D14")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xA5096C", Offset = "0xA5096C", VA = "0xA5096C")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xA50DA0", Offset = "0xA50DA0", VA = "0xA50DA0")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xA50E28", Offset = "0xA50E28", VA = "0xA50E28")]
		public Vector3 GetControllerLocalPosition(ControllerHandedness handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xA50F10", Offset = "0xA50F10", VA = "0xA50F10")]
		public Quaternion GetControllerLocalRotation(ControllerHandedness handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xA50A3C", Offset = "0xA50A3C", VA = "0xA50A3C")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xA50B0C", Offset = "0xA50B0C", VA = "0xA50B0C")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xA50FF8", Offset = "0xA50FF8", VA = "0xA50FF8")]
		public XRTrackedPoseDriver()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public enum TrackableXRDevice
	{
		[Token(Token = "0x4000C7B")]
		HMD,
		[Token(Token = "0x4000C7C")]
		LeftController,
		[Token(Token = "0x4000C7D")]
		RightController
	}
	[Token(Token = "0x2000275")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xA5108C", Offset = "0xA5108C", VA = "0xA5108C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xA510F0", Offset = "0xA510F0", VA = "0xA510F0")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xA51150", Offset = "0xA51150", VA = "0xA51150")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xA51158", Offset = "0xA51158", VA = "0xA51158")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xA51164", Offset = "0xA51164", VA = "0xA51164")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xA510FC", Offset = "0xA510FC", VA = "0xA510FC")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xA5116C", Offset = "0xA5116C", VA = "0xA5116C")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text LabelToUpdate;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text JoystickText;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject AmmoObject;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform ItemsHolder;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 rotateX;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 rotateY;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotateZ;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xA51174", Offset = "0xA51174", VA = "0xA51174")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xA515D0", Offset = "0xA515D0", VA = "0xA515D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xA51710", Offset = "0xA51710", VA = "0xA51710")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xA51860", Offset = "0xA51860", VA = "0xA51860")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xA5199C", Offset = "0xA5199C", VA = "0xA5199C")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xA51D18", Offset = "0xA51D18", VA = "0xA51D18")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xA52290", Offset = "0xA52290", VA = "0xA52290")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xA513E0", Offset = "0xA513E0", VA = "0xA513E0")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xA515D4", Offset = "0xA515D4", VA = "0xA515D4")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xA52454", Offset = "0xA52454", VA = "0xA52454")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class PosRot
	{
		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xA513D8", Offset = "0xA513D8", VA = "0xA513D8")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xA52480", Offset = "0xA52480", VA = "0xA52480")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xA52504", Offset = "0xA52504", VA = "0xA52504")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xA52510", Offset = "0xA52510", VA = "0xA52510", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xA52680", Offset = "0xA52680", VA = "0xA52680")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xA52688", Offset = "0xA52688", VA = "0xA52688")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xA52760", Offset = "0xA52760", VA = "0xA52760")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xA52BC8", Offset = "0xA52BC8", VA = "0xA52BC8")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xA53010", Offset = "0xA53010", VA = "0xA53010")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xA5303C", Offset = "0xA5303C", VA = "0xA5303C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xA530E0", Offset = "0xA530E0", VA = "0xA530E0")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xA530E8", Offset = "0xA530E8", VA = "0xA530E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xA531E8", Offset = "0xA531E8", VA = "0xA531E8", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xA53BC8", Offset = "0xA53BC8", VA = "0xA53BC8", Slot = "28")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xA53CB0", Offset = "0xA53CB0", VA = "0xA53CB0")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xA53D58", Offset = "0xA53D58", VA = "0xA53D58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xA53E84", Offset = "0xA53E84", VA = "0xA53E84")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xA5424C", Offset = "0xA5424C", VA = "0xA5424C")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xA54254", Offset = "0xA54254", VA = "0xA54254")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xA54268", Offset = "0xA54268", VA = "0xA54268")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xA5426C", Offset = "0xA5426C", VA = "0xA5426C")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xA54368", Offset = "0xA54368", VA = "0xA54368")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x200027F")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x1700018D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D09")]
				[Address(RVA = "0xA550E4", Offset = "0xA550E4", VA = "0xA550E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D0B")]
				[Address(RVA = "0xA5512C", Offset = "0xA5512C", VA = "0xA5512C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xA54C80", Offset = "0xA54C80", VA = "0xA54C80")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xA54CD0", Offset = "0xA54CD0", VA = "0xA54CD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xA54CD4", Offset = "0xA54CD4", VA = "0xA54CD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xA550EC", Offset = "0xA550EC", VA = "0xA550EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Activate these GameObjects on Death")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Deactivate these GameObjects on Death")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		public FloatEvent onDamaged;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xA54384", Offset = "0xA54384", VA = "0xA54384")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xA54438", Offset = "0xA54438", VA = "0xA54438", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xA544E8", Offset = "0xA544E8", VA = "0xA544E8", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xA54584", Offset = "0xA54584", VA = "0xA54584", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xA54C08", Offset = "0xA54C08", VA = "0xA54C08")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__22))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xA54CA8", Offset = "0xA54CA8", VA = "0xA54CA8")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xA55134", Offset = "0xA55134", VA = "0xA55134")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xA551E4", Offset = "0xA551E4", VA = "0xA551E4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xA55228", Offset = "0xA55228", VA = "0xA55228", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xA554F8", Offset = "0xA554F8", VA = "0xA554F8")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xA5551C", Offset = "0xA5551C", VA = "0xA5551C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xA55598", Offset = "0xA55598", VA = "0xA55598")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xA555A0", Offset = "0xA555A0", VA = "0xA555A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xA555F0", Offset = "0xA555F0", VA = "0xA555F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xA55630", Offset = "0xA55630", VA = "0xA55630")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x2000283")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xA55638", Offset = "0xA55638", VA = "0xA55638")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xA55718", Offset = "0xA55718", VA = "0xA55718")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xA55728", Offset = "0xA55728", VA = "0xA55728", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xA55868", Offset = "0xA55868", VA = "0xA55868")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public class GrabbableBezierLine : GrabbableEvents
	{
		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer LineToDraw;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int SegmentCount;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpAmount;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HeightAdjustment;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabber lineToGrabber;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber lineRemoteGrabbing;

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xA5587C", Offset = "0xA5587C", VA = "0xA5587C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xA5599C", Offset = "0xA5599C", VA = "0xA5599C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xA55E2C", Offset = "0xA55E2C", VA = "0xA55E2C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xA55E50", Offset = "0xA55E50", VA = "0xA55E50", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xA55F30", Offset = "0xA55F30", VA = "0xA55F30", Slot = "10")]
		public override void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xA55F68", Offset = "0xA55F68", VA = "0xA55F68", Slot = "12")]
		public override void OnBecomesClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xA55FA4", Offset = "0xA55FA4", VA = "0xA55FA4", Slot = "14")]
		public override void OnNoLongerClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xA55E8C", Offset = "0xA55E8C", VA = "0xA55E8C")]
		public void HighlightItem(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xA5591C", Offset = "0xA5591C", VA = "0xA5591C")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xA55CC4", Offset = "0xA55CC4", VA = "0xA55CC4")]
		public void DrawBezierCurve(Vector3 point0, Vector3 point1, Vector3 point2, LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xA55FDC", Offset = "0xA55FDC", VA = "0xA55FDC")]
		public GrabbableBezierLine()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xA55FFC", Offset = "0xA55FFC", VA = "0xA55FFC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xA560C4", Offset = "0xA560C4", VA = "0xA560C4", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xA560CC", Offset = "0xA560CC", VA = "0xA560CC", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xA560DC", Offset = "0xA560DC", VA = "0xA560DC", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xA56028", Offset = "0xA56028", VA = "0xA56028")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xA560EC", Offset = "0xA560EC", VA = "0xA560EC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xA561F4", Offset = "0xA561F4", VA = "0xA561F4")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xA5621C", Offset = "0xA5621C", VA = "0xA5621C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xA56224", Offset = "0xA56224", VA = "0xA56224", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xA5622C", Offset = "0xA5622C", VA = "0xA5622C", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xA56230", Offset = "0xA56230", VA = "0xA56230", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xA56234", Offset = "0xA56234", VA = "0xA56234", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xA56228", Offset = "0xA56228", VA = "0xA56228")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xA56220", Offset = "0xA56220", VA = "0xA56220")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xA56238", Offset = "0xA56238", VA = "0xA56238")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xA56248", Offset = "0xA56248", VA = "0xA56248")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xA56424", Offset = "0xA56424", VA = "0xA56424", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xA564D8", Offset = "0xA564D8", VA = "0xA564D8", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xA56598", Offset = "0xA56598", VA = "0xA56598", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xA565A8", Offset = "0xA565A8", VA = "0xA565A8", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xA565B8", Offset = "0xA565B8", VA = "0xA565B8", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xA564E8", Offset = "0xA564E8", VA = "0xA564E8")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xA56428", Offset = "0xA56428", VA = "0xA56428")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xA565C8", Offset = "0xA565C8", VA = "0xA565C8")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xA565D8", Offset = "0xA565D8", VA = "0xA565D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xA5688C", Offset = "0xA5688C", VA = "0xA5688C")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x200028B")]
		public enum HandMovement
		{
			[Token(Token = "0x4000D12")]
			Instant,
			[Token(Token = "0x4000D13")]
			Lerp,
			[Token(Token = "0x4000D14")]
			None
		}

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How to move the hand to the nearest grab point. If set to 'None', the hand model will remain at the controller.")]
		[Header("Hand Movement")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the hand model will continue to move towards the closest grab point. If false, the hand will only move towards the closest grab point once upon entering the trigger.")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is active")]
		[Header("Grabbable Options")]
		public Grabbable GrabObject;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xA568A8", Offset = "0xA568A8", VA = "0xA568A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xA56BD8", Offset = "0xA56BD8", VA = "0xA56BD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xA57060", Offset = "0xA57060", VA = "0xA57060", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xA571E0", Offset = "0xA571E0", VA = "0xA571E0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xA57424", Offset = "0xA57424", VA = "0xA57424")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xA57024", Offset = "0xA57024", VA = "0xA57024")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xA57558", Offset = "0xA57558", VA = "0xA57558", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xA57604", Offset = "0xA57604", VA = "0xA57604")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xA5761C", Offset = "0xA5761C", VA = "0xA5761C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xA57620", Offset = "0xA57620", VA = "0xA57620")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xA57624", Offset = "0xA57624", VA = "0xA57624")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xA577BC", Offset = "0xA577BC", VA = "0xA577BC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xA577C0", Offset = "0xA577C0", VA = "0xA577C0")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xA577C8", Offset = "0xA577C8", VA = "0xA577C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xA579C8", Offset = "0xA579C8", VA = "0xA579C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xA577D8", Offset = "0xA577D8", VA = "0xA577D8")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xA579D8", Offset = "0xA579D8", VA = "0xA579D8")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xA579F4", Offset = "0xA579F4", VA = "0xA579F4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xA57AB4", Offset = "0xA57AB4", VA = "0xA57AB4")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class PunctureCollider : MonoBehaviour
	{
		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Puncture properties : ")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		public float FRequiredPenetrationForce;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		public float MinPenetration;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Minimum distance the object can be penetrated (in meters).")]
		public float MaxPenetration;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public float BreakDistance;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public List<Collider> PunctureColliders;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is the object currently embedded in another object?")]
		public bool HasPunctured;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The object currently embedded in")]
		public GameObject PuncturedObject;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How far (in meters) our object has been embedded into")]
		public float PunctureValue;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float previousPunctureValue;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider col;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider hitCollilder;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] ignoreColliders;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigid;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject jointHelper;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody jointHelperRigid;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint jointHelperJoint;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixedJoint fj;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float yPuncture;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float yPunctureMin;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float yPunctureMax;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float TargetDistance;

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xA57ABC", Offset = "0xA57ABC", VA = "0xA57ABC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xA57B68", Offset = "0xA57B68", VA = "0xA57B68")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xA57CDC", Offset = "0xA57CDC", VA = "0xA57CDC", Slot = "4")]
		public virtual void UpdatePunctureValue()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xA57E78", Offset = "0xA57E78", VA = "0xA57E78", Slot = "5")]
		public virtual void MovePunctureUp()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xA57F28", Offset = "0xA57F28", VA = "0xA57F28", Slot = "6")]
		public virtual void MovePunctureDown()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xA57FD8", Offset = "0xA57FD8", VA = "0xA57FD8", Slot = "7")]
		public virtual void CheckBreakDistance()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xA58254", Offset = "0xA58254", VA = "0xA58254", Slot = "8")]
		public virtual void CheckPunctureRelease()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xA582FC", Offset = "0xA582FC", VA = "0xA582FC", Slot = "9")]
		public virtual void AdjustJointMass()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xA58400", Offset = "0xA58400", VA = "0xA58400", Slot = "10")]
		public virtual void ApplyResistanceForce()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xA584FC", Offset = "0xA584FC", VA = "0xA584FC", Slot = "11")]
		public virtual void DoPuncture(Collider colliderHit, Vector3 connectPosition)
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xA5888C", Offset = "0xA5888C", VA = "0xA5888C")]
		public void SetPenetration(float penetrationAmount)
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xA5809C", Offset = "0xA5809C", VA = "0xA5809C")]
		public void ReleasePuncture()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xA58994", Offset = "0xA58994", VA = "0xA58994", Slot = "12")]
		public virtual bool CanPunctureObject(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xA58A58", Offset = "0xA58A58", VA = "0xA58A58")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xA58C34", Offset = "0xA58C34", VA = "0xA58C34")]
		public PunctureCollider()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xA58C48", Offset = "0xA58C48", VA = "0xA58C48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xA58CDC", Offset = "0xA58CDC", VA = "0xA58CDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xA58E00", Offset = "0xA58E00", VA = "0xA58E00")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xA5909C", Offset = "0xA5909C", VA = "0xA5909C")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x2000291")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xA590BC", Offset = "0xA590BC", VA = "0xA590BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xA591A4", Offset = "0xA591A4", VA = "0xA591A4")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to rotate along with")]
		public Transform FollowTransform;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Offset;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RotateSpeed;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MovementSmoothing;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 velocity;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform originalParent;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform followTransform;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform camTransform;

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xA591AC", Offset = "0xA591AC", VA = "0xA591AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xA5938C", Offset = "0xA5938C", VA = "0xA5938C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xA59390", Offset = "0xA59390", VA = "0xA59390")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xA59784", Offset = "0xA59784", VA = "0xA59784")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x2000293")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xA597F0", Offset = "0xA597F0", VA = "0xA597F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xA599F4", Offset = "0xA599F4", VA = "0xA599F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xA59800", Offset = "0xA59800", VA = "0xA59800")]
		private void doScale()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xA59A04", Offset = "0xA59A04", VA = "0xA59A04")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x2000295")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x1700018F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D7D")]
				[Address(RVA = "0xA5A59C", Offset = "0xA5A59C", VA = "0xA5A59C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000190")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D7F")]
				[Address(RVA = "0xA5A5E4", Offset = "0xA5A5E4", VA = "0xA5A5E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xA5A044", Offset = "0xA5A044", VA = "0xA5A044")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xA5A4E4", Offset = "0xA5A4E4", VA = "0xA5A4E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0xA5A4E8", Offset = "0xA5A4E8", VA = "0xA5A4E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xA5A5A4", Offset = "0xA5A5A4", VA = "0xA5A5A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000296")]
		[CompilerGenerated]
		private sealed class <doFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x17000191")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D83")]
				[Address(RVA = "0xA5A780", Offset = "0xA5A780", VA = "0xA5A780", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000192")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D85")]
				[Address(RVA = "0xA5A7C8", Offset = "0xA5A7C8", VA = "0xA5A7C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xA5A324", Offset = "0xA5A324", VA = "0xA5A324")]
			[DebuggerHidden]
			public <doFade>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xA5A5EC", Offset = "0xA5A5EC", VA = "0xA5A5EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xA5A5F0", Offset = "0xA5A5F0", VA = "0xA5A5F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xA5A788", Offset = "0xA5A788", VA = "0xA5A788", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string faderName;

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xA59A14", Offset = "0xA59A14", VA = "0xA59A14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xA59A20", Offset = "0xA59A20", VA = "0xA59A20", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xA59DDC", Offset = "0xA59DDC", VA = "0xA59DDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xA59E80", Offset = "0xA59E80", VA = "0xA59E80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xA59F24", Offset = "0xA59F24", VA = "0xA59F24")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xA59FCC", Offset = "0xA59FCC", VA = "0xA59FCC")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__17))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xA5A06C", Offset = "0xA5A06C", VA = "0xA5A06C", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xA5A1A4", Offset = "0xA5A1A4", VA = "0xA5A1A4", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xA5A25C", Offset = "0xA5A25C", VA = "0xA5A25C", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xA5A124", Offset = "0xA5A124", VA = "0xA5A124")]
		[IteratorStateMachine(typeof(<doFade>d__21))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xA5A34C", Offset = "0xA5A34C", VA = "0xA5A34C", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xA5A46C", Offset = "0xA5A46C", VA = "0xA5A46C")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xA5A7D0", Offset = "0xA5A7D0", VA = "0xA5A7D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xA5A87C", Offset = "0xA5A87C", VA = "0xA5A87C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xA5A950", Offset = "0xA5A950", VA = "0xA5A950")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xA5AA28", Offset = "0xA5AA28", VA = "0xA5AA28")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xA5AA54", Offset = "0xA5AA54", VA = "0xA5AA54")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xA5AB4C", Offset = "0xA5AB4C", VA = "0xA5AB4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xA5AB58", Offset = "0xA5AB58", VA = "0xA5AB58", Slot = "4")]
		public virtual void UpdateTooltipPosition()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xA5AE90", Offset = "0xA5AE90", VA = "0xA5AE90")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x200029A")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4000D7F")]
			Device,
			[Token(Token = "0x4000D80")]
			PerFrame
		}

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject playSpace;

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xA5AEB8", Offset = "0xA5AEB8", VA = "0xA5AEB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xA5AF08", Offset = "0xA5AF08", VA = "0xA5AF08")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xA5AF68", Offset = "0xA5AF68", VA = "0xA5AF68", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xA5AF90", Offset = "0xA5AF90", VA = "0xA5AF90", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xA5B0EC", Offset = "0xA5B0EC", VA = "0xA5B0EC", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xA5B318", Offset = "0xA5B318", VA = "0xA5B318", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xA5B4A4", Offset = "0xA5B4A4", VA = "0xA5B4A4", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xA5B4B4", Offset = "0xA5B4B4", VA = "0xA5B4B4", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xA5B4C0", Offset = "0xA5B4C0", VA = "0xA5B4C0", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xA5B4D0", Offset = "0xA5B4D0", VA = "0xA5B4D0", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xA5B5D8", Offset = "0xA5B5D8", VA = "0xA5B5D8")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class ArmSwingLocomotion : MonoBehaviour
	{
		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is used to move the character. Will be disabled on Start")]
		public CharacterController characterController;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Speed = Hand Controller Speed * SpeedModifier")]
		public float SpeedModifier;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Direction to move player. Will default to this transform if none provided")]
		public Transform ForwardDirection;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Minimum Velocity to allow movement. Increase this to avoid unwanted movement at slow speeds")]
		public float MinInput;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool MustBeHoldingLeftTrigger;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool MustBeHoldingRightTrigger;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool MustBeHoldingLeftGrip;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool MustBeHoldingRightGrip;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float leftVelocity;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float rightVelocity;

		[Token(Token = "0x17000193")]
		public float VelocitySum
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xA5B684", Offset = "0xA5B684", VA = "0xA5B684")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xA5B690", Offset = "0xA5B690", VA = "0xA5B690")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xA5B754", Offset = "0xA5B754", VA = "0xA5B754")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xA5B904", Offset = "0xA5B904", VA = "0xA5B904", Slot = "4")]
		public virtual void UpdateMovement()
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xA5B774", Offset = "0xA5B774", VA = "0xA5B774")]
		public void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xA5BA18", Offset = "0xA5BA18", VA = "0xA5BA18", Slot = "5")]
		public virtual bool LeftInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xA5BAD4", Offset = "0xA5BAD4", VA = "0xA5BAD4", Slot = "6")]
		public virtual bool RightInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xA5BB90", Offset = "0xA5BB90", VA = "0xA5BB90")]
		public ArmSwingLocomotion()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public enum LocomotionType
	{
		[Token(Token = "0x4000D8C")]
		Teleport,
		[Token(Token = "0x4000D8D")]
		SmoothLocomotion,
		[Token(Token = "0x4000D8E")]
		None
	}
	[Token(Token = "0x200029D")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Camera Options : ")]
		[Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the CharacterController will resize to match the calculated player height (distance from floor to camera)")]
		public bool ResizeCharacterHeightWithCamera;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		[Header("Transform Setup ")]
		public Transform TrackingSpace;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		[Header("Ground checks : ")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("DistanceFromGround will subtract this value when determining distance from ground")]
		public float DistanceFromGroundOffset;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		[Header("Player Capsule Settings : ")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		[Header("Player Y Offset : ")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		[Header("Misc : ")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float MaxElevation;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CharacterController characterController;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody playerRigid;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected CapsuleCollider playerCapsule;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected PlayerClimbing playerClimbing;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool isClimbing;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		protected bool wasClimbing;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public RaycastHit groundHit;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected RaycastHit hit;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform mainCamera;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 _initialPosition;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SphereColliderRadius;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 moveTest;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xA5BBB4", Offset = "0xA5BBB4", VA = "0xA5BBB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xA5BD78", Offset = "0xA5BD78", VA = "0xA5BD78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xA5C00C", Offset = "0xA5C00C", VA = "0xA5C00C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xA5C034", Offset = "0xA5C034", VA = "0xA5C034", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xA5C244", Offset = "0xA5C244", VA = "0xA5C244", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xA5C8AC", Offset = "0xA5C8AC", VA = "0xA5C8AC", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xA5CA6C", Offset = "0xA5CA6C", VA = "0xA5CA6C", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xA5CC58", Offset = "0xA5CC58", VA = "0xA5CC58", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xA5CEF8", Offset = "0xA5CEF8", VA = "0xA5CEF8", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xA5CF74", Offset = "0xA5CF74", VA = "0xA5CF74", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xA5D200", Offset = "0xA5D200", VA = "0xA5D200", Slot = "11")]
		public virtual void CheckRigidbodyCapsuleMove(Vector3 movePosition)
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xA5D36C", Offset = "0xA5D36C", VA = "0xA5D36C", Slot = "12")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xA5D408", Offset = "0xA5D408", VA = "0xA5D408", Slot = "13")]
		public virtual void OnClimbingChange()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xA5D428", Offset = "0xA5D428", VA = "0xA5D428")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float ButtonSpeed;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SpringForce;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xA5D480", Offset = "0xA5D480", VA = "0xA5D480")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xA5D5A4", Offset = "0xA5D5A4", VA = "0xA5D5A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xA5D998", Offset = "0xA5D998", VA = "0xA5D998", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xA5D9F0", Offset = "0xA5D9F0", VA = "0xA5D9F0", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xA5DA48", Offset = "0xA5DA48", VA = "0xA5DA48", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xA5DB10", Offset = "0xA5DB10", VA = "0xA5DB10", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xA5DBD8", Offset = "0xA5DBD8", VA = "0xA5DBD8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xA5DE94", Offset = "0xA5DE94", VA = "0xA5DE94")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xA5E034", Offset = "0xA5E034", VA = "0xA5E034")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xA5E200", Offset = "0xA5E200", VA = "0xA5E200")]
		public Button()
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xA5E2EC", Offset = "0xA5E2EC", VA = "0xA5E2EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xA5E390", Offset = "0xA5E390", VA = "0xA5E390")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xA5E4AC", Offset = "0xA5E4AC", VA = "0xA5E4AC")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xA5E53C", Offset = "0xA5E53C", VA = "0xA5E53C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xA5E5F4", Offset = "0xA5E5F4", VA = "0xA5E5F4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xA5E600", Offset = "0xA5E600", VA = "0xA5E600")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Configure which button is used to initiate the grab")]
		[Header("Grab Settings")]
		public GrabButton GrabButton;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Remote Grab")]
		[Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		public bool RemoteGrabbable;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RemoteGrabMovement RemoteGrabMechanic;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Multiply controller's velocity times this when throwing")]
		[Header("Throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Hand Options")]
		[Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		public bool HideHandGraphics;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Parent this object to the hands for instantaneous movement. Object will travel 1:1 with the controller but may have trouble detecting fast moving collisions.")]
		public bool ParentToHands;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Misc")]
		[Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		public bool CanBeDropped;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[Tooltip("If true, the object will instantly position / rotate to the grabber instead of using velocity / force. This will only happen if no collisions have recently occurred. When using this method, the Grabbable's Rigidbody willbe instantly rotated / moved, taking in to account the interpolation settings. May clip through objects if moving fast enough.")]
		public bool InstantMovement;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, all child colliders will be considered Grabbable. If false, you will need to add the 'GrabbableChild' component to any child colliders that you wish to also be considered grabbable.")]
		public bool MakeChildCollidersGrabbable;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Default Hand Pose")]
		[Tooltip("A hand controller can read this value to determine how to animate when grabbing this object. 'AnimatorID' = specify an Animator ID to be set on the hand animator after grabbing this object. 'HandPose' = use a HandPose scriptable object. 'AutoPoseOnce' = DO an auto pose one time upon grabbing this object. 'AutoPoseContinuous' = Keep running attempting an autopose while grabbing this item.")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected HandPoseType initialHandPoseType;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand on pickup")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HandPose initialHandPose;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Two-Handed Grab Behavior")]
		[Tooltip("What to do if another grabber grabs this while equipped.")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("How far to lerp between grabber positions. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's position, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("How far to lerp / slerp between grabber rotation. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's rotation, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("How to repond if you are holding an object with two hands, and then drop the primary grabber. For example, you may want to drop the object, transfer it to the second hand, or do nothing at all.")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Which vector to use when TwoHandedRotation = LookAtSecondary. Ex : Horizontal = A rifle type setup where you want to aim down the sites; Vertical = A melee type setup where the object is vertical")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How quickly to Lerp towards the SecondaryGrabbable if TwoHandedGrabBehavior = LookAt")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If specified, this object will be used as a secondary grabbable instead of relying on grab points on this object. If 'TwoHandedGrabBehavior' is specified as LookAt, this is the object the grabber will be rotated towards. If 'TwoHandedGrabBehavior' is specified as AveragePositionRotation, this is the object the grabber use to calculate position.")]
		[Header("Secondary Grabbale Object")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		[Header("Grab Restrictions")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Physics Joint Settings")]
		[Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		public float CollisionSpring;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float journeyLength;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Shown for Debug : ")]
		[SerializeField]
		public List<Collider> collisions;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform _grabTransform;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Grab Points")]
		[Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool _canBeMoved;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Transform originalParent;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected InputBridge input;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected bool recentlyTeleported;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private BNGPlayerController _player;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Collider col;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected Rigidbody rigid;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected Grabber flyingTo;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected bool didParentHands;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		private bool initiatedFlick;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float flickStartVelocity;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float FlickSpeed;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float lastFlickTime;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float FlickForce;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float angle;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Vector3 axis;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector3 angularTarget;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 angularMovement;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool subscribedToEvents;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x215")]
		private bool grabbableIsLocked;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _priorParent;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool lockPos;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x249")]
		private bool lockRot;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private int lockRequests;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool quitting;

		[Token(Token = "0x17000194")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0xA5E608", Offset = "0xA5E608", VA = "0xA5E608")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000195")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0xA5E6C4", Offset = "0xA5E6C4", VA = "0xA5E6C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public bool RemoteGrabbing
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xA5E6CC", Offset = "0xA5E6CC", VA = "0xA5E6CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000197")]
		public Vector3 OriginalScale
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0xA5E6D4", Offset = "0xA5E6D4", VA = "0xA5E6D4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0xA5E6E4", Offset = "0xA5E6E4", VA = "0xA5E6E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xA5E6F4", Offset = "0xA5E6F4", VA = "0xA5E6F4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0xA5E6FC", Offset = "0xA5E6FC", VA = "0xA5E6FC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0xA5E704", Offset = "0xA5E704", VA = "0xA5E704")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xA5E70C", Offset = "0xA5E70C", VA = "0xA5E70C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xA5E714", Offset = "0xA5E714", VA = "0xA5E714")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019B")]
		public float requestSpringTime
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xA5E78C", Offset = "0xA5E78C", VA = "0xA5E78C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xA5E794", Offset = "0xA5E794", VA = "0xA5E794")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xA5E79C", Offset = "0xA5E79C", VA = "0xA5E79C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700019D")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xA521D0", Offset = "0xA521D0", VA = "0xA521D0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700019E")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xA5E824", Offset = "0xA5E824", VA = "0xA5E824")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700019F")]
		public Transform grabTransform
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xA5E8E4", Offset = "0xA5E8E4", VA = "0xA5E8E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xA5EA28", Offset = "0xA5EA28", VA = "0xA5EA28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xA5EB80", Offset = "0xA5EB80", VA = "0xA5EB80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A2")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xA531D8", Offset = "0xA531D8", VA = "0xA531D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A3")]
		public Grabber FlyingToGrabber
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xA5EB88", Offset = "0xA5EB88", VA = "0xA5EB88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A4")]
		public bool DidParentHands
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xA5EB90", Offset = "0xA5EB90", VA = "0xA5EB90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xA5EB98", Offset = "0xA5EB98", VA = "0xA5EB98")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xA5F15C", Offset = "0xA5F15C", VA = "0xA5F15C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xA60588", Offset = "0xA60588", VA = "0xA60588", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xA606AC", Offset = "0xA606AC", VA = "0xA606AC", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xA6081C", Offset = "0xA6081C", VA = "0xA6081C", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xA5FF24", Offset = "0xA5FF24", VA = "0xA5FF24")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xA608DC", Offset = "0xA608DC", VA = "0xA608DC", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xA609B4", Offset = "0xA609B4", VA = "0xA609B4", Slot = "9")]
		public virtual void UpdateRemoteGrab()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xA609F8", Offset = "0xA609F8", VA = "0xA609F8", Slot = "10")]
		public virtual void CheckRemoteGrabLinear()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xA612E0", Offset = "0xA612E0", VA = "0xA612E0", Slot = "11")]
		public virtual void CheckRemoteGrabVelocity()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xA61E38", Offset = "0xA61E38", VA = "0xA61E38", Slot = "12")]
		public virtual void InitiateFlick()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xA61FEC", Offset = "0xA61FEC", VA = "0xA61FEC")]
		public Vector3 GetVelocityToHitTargetByTime(Vector3 startPosition, Vector3 targetPosition, Vector3 gravityBase, float timeToTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xA6248C", Offset = "0xA6248C", VA = "0xA6248C", Slot = "13")]
		public virtual void CheckRemoteGrabFlick()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xA625CC", Offset = "0xA625CC", VA = "0xA625CC", Slot = "14")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xA62948", Offset = "0xA62948", VA = "0xA62948", Slot = "15")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xA62D98", Offset = "0xA62D98", VA = "0xA62D98")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xA62F24", Offset = "0xA62F24", VA = "0xA62F24")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xA62FFC", Offset = "0xA62FFC", VA = "0xA62FFC", Slot = "16")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xA63050", Offset = "0xA63050", VA = "0xA63050", Slot = "17")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xA62688", Offset = "0xA62688", VA = "0xA62688")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xA63238", Offset = "0xA63238", VA = "0xA63238")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xA63090", Offset = "0xA63090", VA = "0xA63090")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xA61730", Offset = "0xA61730", VA = "0xA61730")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xA63718", Offset = "0xA63718", VA = "0xA63718", Slot = "18")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xA63D7C", Offset = "0xA63D7C", VA = "0xA63D7C", Slot = "19")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xA5FC6C", Offset = "0xA5FC6C", VA = "0xA5FC6C")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xA5F070", Offset = "0xA5F070", VA = "0xA5F070")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xA60018", Offset = "0xA60018", VA = "0xA60018")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xA63BB4", Offset = "0xA63BB4", VA = "0xA63BB4")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xA640A8", Offset = "0xA640A8", VA = "0xA640A8")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xA53280", Offset = "0xA53280", VA = "0xA53280", Slot = "20")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xA641CC", Offset = "0xA641CC", VA = "0xA641CC", Slot = "21")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xA643B8", Offset = "0xA643B8", VA = "0xA643B8", Slot = "22")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xA644C8", Offset = "0xA644C8", VA = "0xA644C8", Slot = "23")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xA645D4", Offset = "0xA645D4", VA = "0xA645D4", Slot = "24")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xA64620", Offset = "0xA64620", VA = "0xA64620", Slot = "25")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xA64720", Offset = "0xA64720", VA = "0xA64720", Slot = "26")]
		public virtual void ResetGrabbing()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xA647E8", Offset = "0xA647E8", VA = "0xA647E8", Slot = "27")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xA63FC4", Offset = "0xA63FC4", VA = "0xA63FC4")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xA5F758", Offset = "0xA5F758", VA = "0xA5F758")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xA53C98", Offset = "0xA53C98", VA = "0xA53C98", Slot = "28")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xA652B0", Offset = "0xA652B0", VA = "0xA652B0", Slot = "29")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xA65300", Offset = "0xA65300", VA = "0xA65300")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xA64FB4", Offset = "0xA64FB4", VA = "0xA64FB4")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xA65330", Offset = "0xA65330", VA = "0xA65330")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xA65338", Offset = "0xA65338", VA = "0xA65338")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xA65364", Offset = "0xA65364", VA = "0xA65364")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xA653DC", Offset = "0xA653DC", VA = "0xA653DC", Slot = "30")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xA65510", Offset = "0xA65510", VA = "0xA65510", Slot = "31")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xA656BC", Offset = "0xA656BC", VA = "0xA656BC", Slot = "32")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xA659EC", Offset = "0xA659EC", VA = "0xA659EC", Slot = "33")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xA65B2C", Offset = "0xA65B2C", VA = "0xA65B2C", Slot = "34")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xA65B64", Offset = "0xA65B64", VA = "0xA65B64", Slot = "35")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xA65CFC", Offset = "0xA65CFC", VA = "0xA65CFC", Slot = "36")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xA642D4", Offset = "0xA642D4", VA = "0xA642D4")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xA64FDC", Offset = "0xA64FDC", VA = "0xA64FDC")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xA640B0", Offset = "0xA640B0", VA = "0xA640B0")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xA650B0", Offset = "0xA650B0", VA = "0xA650B0")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xA61134", Offset = "0xA61134", VA = "0xA61134")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xA61204", Offset = "0xA61204", VA = "0xA61204")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xA63B74", Offset = "0xA63B74", VA = "0xA63B74")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xA60F00", Offset = "0xA60F00", VA = "0xA60F00")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xA5F5E4", Offset = "0xA5F5E4", VA = "0xA5F5E4")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xA65DF0", Offset = "0xA65DF0", VA = "0xA65DF0", Slot = "37")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xA65F14", Offset = "0xA65F14", VA = "0xA65F14", Slot = "38")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xA65F4C", Offset = "0xA65F4C", VA = "0xA65F4C", Slot = "39")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xA66068", Offset = "0xA66068", VA = "0xA66068", Slot = "40")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xA660F8", Offset = "0xA660F8", VA = "0xA660F8", Slot = "41")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xA66388", Offset = "0xA66388", VA = "0xA66388", Slot = "42")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xA66604", Offset = "0xA66604", VA = "0xA66604", Slot = "43")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xA66620", Offset = "0xA66620", VA = "0xA66620", Slot = "44")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xA6663C", Offset = "0xA6663C", VA = "0xA6663C", Slot = "45")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xA667E8", Offset = "0xA667E8", VA = "0xA667E8", Slot = "46")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xA66818", Offset = "0xA66818", VA = "0xA66818", Slot = "47")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xA668D0", Offset = "0xA668D0", VA = "0xA668D0", Slot = "48")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xA66B00", Offset = "0xA66B00", VA = "0xA66B00", Slot = "49")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xA66EAC", Offset = "0xA66EAC", VA = "0xA66EAC")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xA67070", Offset = "0xA67070", VA = "0xA67070")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xA6718C", Offset = "0xA6718C", VA = "0xA6718C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xA67248", Offset = "0xA67248", VA = "0xA67248")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xA67254", Offset = "0xA67254", VA = "0xA67254")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xA67280", Offset = "0xA67280", VA = "0xA67280")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xA53CB4", Offset = "0xA53CB4", VA = "0xA53CB4")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public enum GrabType
	{
		[Token(Token = "0x4000E2E")]
		Snap,
		[Token(Token = "0x4000E2F")]
		Precise
	}
	[Token(Token = "0x20002A2")]
	public enum RemoteGrabMovement
	{
		[Token(Token = "0x4000E31")]
		Linear,
		[Token(Token = "0x4000E32")]
		Velocity,
		[Token(Token = "0x4000E33")]
		Flick
	}
	[Token(Token = "0x20002A3")]
	public enum GrabPhysics
	{
		[Token(Token = "0x4000E35")]
		None = 2,
		[Token(Token = "0x4000E36")]
		PhysicsJoint = 0,
		[Token(Token = "0x4000E37")]
		FixedJoint = 3,
		[Token(Token = "0x4000E38")]
		Velocity = 4,
		[Token(Token = "0x4000E39")]
		Kinematic = 1
	}
	[Token(Token = "0x20002A4")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x4000E3B")]
		None,
		[Token(Token = "0x4000E3C")]
		SwapHands,
		[Token(Token = "0x4000E3D")]
		DualGrab
	}
	[Token(Token = "0x20002A5")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x4000E3F")]
		Lerp,
		[Token(Token = "0x4000E40")]
		None
	}
	[Token(Token = "0x20002A6")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x4000E42")]
		Lerp,
		[Token(Token = "0x4000E43")]
		Slerp,
		[Token(Token = "0x4000E44")]
		LookAtSecondary,
		[Token(Token = "0x4000E45")]
		None
	}
	[Token(Token = "0x20002A7")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4000E47")]
		Drop,
		[Token(Token = "0x4000E48")]
		Transfer,
		[Token(Token = "0x4000E49")]
		None
	}
	[Token(Token = "0x20002A8")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4000E4B")]
		Horizontal,
		[Token(Token = "0x4000E4C")]
		Vertical
	}
	[Token(Token = "0x20002A9")]
	public enum HandPoseType
	{
		[Token(Token = "0x4000E4E")]
		AnimatorID,
		[Token(Token = "0x4000E4F")]
		HandPose,
		[Token(Token = "0x4000E50")]
		AutoPoseOnce,
		[Token(Token = "0x4000E51")]
		AutoPoseContinuous,
		[Token(Token = "0x4000E52")]
		None
	}
	[Token(Token = "0x20002AA")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xA683D0", Offset = "0xA683D0", VA = "0xA683D0")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xA683D8", Offset = "0xA683D8", VA = "0xA683D8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xA68604", Offset = "0xA68604", VA = "0xA68604", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xA6860C", Offset = "0xA6860C", VA = "0xA6860C", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xA68610", Offset = "0xA68610", VA = "0xA68610", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xA68614", Offset = "0xA68614", VA = "0xA68614", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xA68618", Offset = "0xA68618", VA = "0xA68618", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xA6861C", Offset = "0xA6861C", VA = "0xA6861C", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xA68620", Offset = "0xA68620", VA = "0xA68620", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xA68624", Offset = "0xA68624", VA = "0xA68624", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xA68628", Offset = "0xA68628", VA = "0xA68628", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xA6862C", Offset = "0xA6862C", VA = "0xA6862C", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xA68630", Offset = "0xA68630", VA = "0xA68630", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xA68634", Offset = "0xA68634", VA = "0xA68634", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xA68638", Offset = "0xA68638", VA = "0xA68638", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xA6863C", Offset = "0xA6863C", VA = "0xA6863C", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xA68640", Offset = "0xA68640", VA = "0xA68640", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xA68644", Offset = "0xA68644", VA = "0xA68644", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xA68648", Offset = "0xA68648", VA = "0xA68648", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xA6864C", Offset = "0xA6864C", VA = "0xA6864C", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xA68650", Offset = "0xA68650", VA = "0xA68650", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xA68654", Offset = "0xA68654", VA = "0xA68654", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xA68658", Offset = "0xA68658", VA = "0xA68658", Slot = "25")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xA6865C", Offset = "0xA6865C", VA = "0xA6865C", Slot = "26")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xA68660", Offset = "0xA68660", VA = "0xA68660")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AC")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xA68668", Offset = "0xA68668", VA = "0xA68668")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AD")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xA686B0", Offset = "0xA686B0", VA = "0xA686B0")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AE")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xA686F8", Offset = "0xA686F8", VA = "0xA686F8")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002AF")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xA68740", Offset = "0xA68740", VA = "0xA68740")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B0")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xA68788", Offset = "0xA68788", VA = "0xA68788")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B1")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xA687D0", Offset = "0xA687D0", VA = "0xA687D0")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B2")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xA68818", Offset = "0xA68818", VA = "0xA68818")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B3")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xA68860", Offset = "0xA68860", VA = "0xA68860")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If true, Grabbables in the trigger will only be considered valid if no objects are in the way between it and this transform")]
		[Header("Collision Checks")]
		public bool RaycastRemoteGrabbables;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip(" If true, Remote Grabbables must not have any collisions between the Main Camera and the Remote Grabbable we are trying to reach. This can help prevent grabbing items through walls or around corners.")]
		public bool RemoteGrabbablesMustBeVisible;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If RaycastRemoteGrabbables is true, use these layers to detect collisions between the grabber and the potential grabbable object. By Default only looking for collisions on the 'Default' layer")]
		public LayerMask RemoteCollisionLayers;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _eyeTransform;

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xA688A8", Offset = "0xA688A8", VA = "0xA688A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xA689BC", Offset = "0xA689BC", VA = "0xA689BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xA689D4", Offset = "0xA689D4", VA = "0xA689D4")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xA68A28", Offset = "0xA68A28", VA = "0xA68A28")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xA68CF8", Offset = "0xA68CF8", VA = "0xA68CF8", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false, bool raycastCheck = false)
		{
			return null;
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xA690D4", Offset = "0xA690D4", VA = "0xA690D4", Slot = "5")]
		public virtual bool CheckObjectBetweenGrabbable(Vector3 startingPosition, Grabbable theGrabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xA68AB4", Offset = "0xA68AB4", VA = "0xA68AB4")]
		public Dictionary<Collider, Grabbable> GetValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xA6929C", Offset = "0xA6929C", VA = "0xA6929C", Slot = "6")]
		protected virtual bool isValidGrabbable(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xA69504", Offset = "0xA69504", VA = "0xA69504", Slot = "7")]
		public virtual Dictionary<Collider, Grabbable> SanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xA69874", Offset = "0xA69874", VA = "0xA69874", Slot = "8")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xA6999C", Offset = "0xA6999C", VA = "0xA6999C", Slot = "9")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xA69A74", Offset = "0xA69A74", VA = "0xA69A74", Slot = "10")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xA69C64", Offset = "0xA69C64", VA = "0xA69C64", Slot = "11")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xA69F30", Offset = "0xA69F30", VA = "0xA69F30", Slot = "12")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xA6A008", Offset = "0xA6A008", VA = "0xA6A008")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xA6A158", Offset = "0xA6A158", VA = "0xA6A158")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xA6A280", Offset = "0xA6A280", VA = "0xA6A280")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xA6A2B0", Offset = "0xA6A2B0", VA = "0xA6A2B0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xA6A314", Offset = "0xA6A314", VA = "0xA6A314", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xA6A328", Offset = "0xA6A328", VA = "0xA6A328", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xA6A33C", Offset = "0xA6A33C", VA = "0xA6A33C", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xA6A350", Offset = "0xA6A350", VA = "0xA6A350", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xA6A364", Offset = "0xA6A364", VA = "0xA6A364", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xA6A378", Offset = "0xA6A378", VA = "0xA6A378", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xA6A3E4", Offset = "0xA6A3E4", VA = "0xA6A3E4", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xA6A450", Offset = "0xA6A450", VA = "0xA6A450", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xA6A464", Offset = "0xA6A464", VA = "0xA6A464", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xA6A478", Offset = "0xA6A478", VA = "0xA6A478", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xA6A48C", Offset = "0xA6A48C", VA = "0xA6A48C", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xA6A4A0", Offset = "0xA6A4A0", VA = "0xA6A4A0", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xA6A4B4", Offset = "0xA6A4B4", VA = "0xA6A4B4", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xA6A4C8", Offset = "0xA6A4C8", VA = "0xA6A4C8", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xA6A4DC", Offset = "0xA6A4DC", VA = "0xA6A4DC", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xA6A4F0", Offset = "0xA6A4F0", VA = "0xA6A4F0", Slot = "25")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0xA6A504", Offset = "0xA6A504", VA = "0xA6A504", Slot = "26")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xA6A518", Offset = "0xA6A518", VA = "0xA6A518")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Side")]
		[Tooltip("Which controller side. None if not attached to a controller.")]
		public ControllerHand HandSide;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Grab Settings")]
		[Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Input Action used to enact grab action.")]
		public InputActionReference GrabAction;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Hold / Release")]
		[Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		[Range(0f, 1f)]
		public float GripAmount;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		public float ReleaseGripAmount;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float currentGrabTime;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Equip on Start")]
		[Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		[Header("Hand Graphics")]
		public Transform HandsGraphics;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Shown for Debug :")]
		[Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosest;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float flyingTime;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Rigidbody rb;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputBridge input;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Grabber Events")]
		[Tooltip("Called immediately before a Grabbable object is officially grabbed")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Called immediately after a Grabbable object is grabbed. Use this if you need the Grabbable object to be setup before accessing it")]
		public GrabbableEvent onAfterGrabEvent;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Called immediately before droppping an item")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x170001A5")]
		public bool HoldingItem
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xA6A520", Offset = "0xA6A520", VA = "0xA6A520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A6")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xA6A580", Offset = "0xA6A580", VA = "0xA6A580")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001A7")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xA6A5E0", Offset = "0xA6A5E0", VA = "0xA6A5E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		public Grabbable RemoteGrabbingGrabbable
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xA6A5E8", Offset = "0xA6A5E8", VA = "0xA6A5E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xA6A5F0", Offset = "0xA6A5F0", VA = "0xA6A5F0")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xA6A5FC", Offset = "0xA6A5FC", VA = "0xA6A5FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xA6A608", Offset = "0xA6A608", VA = "0xA6A608")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xA6A614", Offset = "0xA6A614", VA = "0xA6A614")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xA6A620", Offset = "0xA6A620", VA = "0xA6A620")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xA6AA7C", Offset = "0xA6AA7C", VA = "0xA6AA7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xA6B1EC", Offset = "0xA6B1EC", VA = "0xA6B1EC", Slot = "4")]
		protected virtual void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xA6AC38", Offset = "0xA6AC38", VA = "0xA6AC38")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xA6B340", Offset = "0xA6B340", VA = "0xA6B340", Slot = "5")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xA6B428", Offset = "0xA6B428", VA = "0xA6B428", Slot = "6")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xA6B5A0", Offset = "0xA6B5A0", VA = "0xA6B5A0")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xA6B724", Offset = "0xA6B724", VA = "0xA6B724", Slot = "7")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xA6B364", Offset = "0xA6B364", VA = "0xA6B364")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xA6B10C", Offset = "0xA6B10C", VA = "0xA6B10C")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xA6B260", Offset = "0xA6B260", VA = "0xA6B260")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xA6B638", Offset = "0xA6B638", VA = "0xA6B638")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xA6B7BC", Offset = "0xA6B7BC", VA = "0xA6B7BC", Slot = "8")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xA6B8FC", Offset = "0xA6B8FC", VA = "0xA6B8FC", Slot = "9")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xA6BA70", Offset = "0xA6BA70", VA = "0xA6BA70", Slot = "10")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xA6BB88", Offset = "0xA6BB88", VA = "0xA6BB88", Slot = "11")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xA6BC1C", Offset = "0xA6BC1C", VA = "0xA6BC1C", Slot = "12")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xA6BD18", Offset = "0xA6BD18", VA = "0xA6BD18", Slot = "13")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xA6ABAC", Offset = "0xA6ABAC", VA = "0xA6ABAC")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xA6BDAC", Offset = "0xA6BDAC", VA = "0xA6BDAC", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xA6BDCC", Offset = "0xA6BDCC", VA = "0xA6BDCC", Slot = "15")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xA6BDEC", Offset = "0xA6BDEC", VA = "0xA6BDEC")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Pose")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand when this grab point is in use")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If HandPoseType = 'AnimatorID', this id will be set on the hand animator when grabbed. Set to 'Default' to inherit the Grabbable's HandPose. Otherwise this HandPose ID will be used.")]
		public HandPoseId HandPose;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		[Header("Valid Hands")]
		public bool LeftHandIsValid;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified, the Hand Model will be parented here when snapped")]
		[Header("Parent to")]
		public Transform HandPosition;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		[Range(0f, 360f)]
		[Header("Angle Restriction")]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Header("Finger Blending")]
		[Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		public float IndexBlendMin;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		[Range(0f, 1f)]
		public float IndexBlendMax;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		[Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		public float ThumbBlendMin;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		[Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		public float ThumbBlendMax;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		[Header("Editor")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool offsetFound;

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xA6BE10", Offset = "0xA6BE10", VA = "0xA6BE10")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xA6C184", Offset = "0xA6C184", VA = "0xA6C184")]
		public void UpdateHandPosePreview()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xA6C32C", Offset = "0xA6C32C", VA = "0xA6C32C")]
		public void UpdateAutoPoserPreview()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xA6C5E4", Offset = "0xA6C5E4", VA = "0xA6C5E4")]
		public void UpdateChildAnimators()
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xA6C76C", Offset = "0xA6C76C", VA = "0xA6C76C")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> leftHandModels;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform activatedLeftModel;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Transform> rightHandModels;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform activatedRightModel;

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xA6C7B0", Offset = "0xA6C7B0", VA = "0xA6C7B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xA6CF40", Offset = "0xA6CF40", VA = "0xA6CF40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xA6C840", Offset = "0xA6C840", VA = "0xA6C840")]
		public void CacheHandModels()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xA6CA30", Offset = "0xA6CA30", VA = "0xA6CA30")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xA6CF78", Offset = "0xA6CF78", VA = "0xA6CF78")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xA6CF90", Offset = "0xA6CF90", VA = "0xA6CF90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xA6D03C", Offset = "0xA6D03C", VA = "0xA6D03C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xA6D2F0", Offset = "0xA6D2F0", VA = "0xA6D2F0")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xA6D5E0", Offset = "0xA6D5E0", VA = "0xA6D5E0")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xA6D6E0", Offset = "0xA6D6E0", VA = "0xA6D6E0")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class HeadCollisionMove : MonoBehaviour
	{
		[Token(Token = "0x20002BB")]
		[CompilerGenerated]
		private sealed class <PushBackPlayer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeadCollisionMove <>4__this;

			[Token(Token = "0x170001AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EA1")]
				[Address(RVA = "0xA6D974", Offset = "0xA6D974", VA = "0xA6D974", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EA3")]
				[Address(RVA = "0xA6D9BC", Offset = "0xA6D9BC", VA = "0xA6D9BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xA6D830", Offset = "0xA6D830", VA = "0xA6D830")]
			[DebuggerHidden]
			public <PushBackPlayer>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xA6D8B0", Offset = "0xA6D8B0", VA = "0xA6D8B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xA6D8B4", Offset = "0xA6D8B4", VA = "0xA6D8B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xA6D97C", Offset = "0xA6D97C", VA = "0xA6D97C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enable collision? Set to false if you don't want to enable this")]
		public bool CollisionEnabled;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Only collide against the specified World Tag?")]
		public bool OnlyCollideAgainstWorld;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string worldTag;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cameraRig;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerEyeAnchor;

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xA6D704", Offset = "0xA6D704", VA = "0xA6D704")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xA6D708", Offset = "0xA6D708", VA = "0xA6D708")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xA6D7D4", Offset = "0xA6D7D4", VA = "0xA6D7D4")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xA6D76C", Offset = "0xA6D76C", VA = "0xA6D76C")]
		[IteratorStateMachine(typeof(<PushBackPlayer>d__8))]
		private IEnumerator PushBackPlayer()
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xA6D858", Offset = "0xA6D858", VA = "0xA6D858")]
		public HeadCollisionMove()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Snap Options")]
		[Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		public bool SnapToDegrees;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Text Label (Optional)")]
		public Text LabelToUpdate;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Change Events")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xA6D9C4", Offset = "0xA6D9C4", VA = "0xA6D9C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xA6DA14", Offset = "0xA6DA14", VA = "0xA6DA14")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xA6DCB0", Offset = "0xA6DCB0", VA = "0xA6DCB0")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xA6E054", Offset = "0xA6E054", VA = "0xA6E054", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xA6DC44", Offset = "0xA6DC44", VA = "0xA6DC44")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xA6DC20", Offset = "0xA6DC20", VA = "0xA6DC20")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xA6E100", Offset = "0xA6E100", VA = "0xA6E100")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public enum ControllerHand
	{
		[Token(Token = "0x4000ED7")]
		Left,
		[Token(Token = "0x4000ED8")]
		Right,
		[Token(Token = "0x4000ED9")]
		None
	}
	[Token(Token = "0x20002BE")]
	public enum ControllerBinding
	{
		[Token(Token = "0x4000EDB")]
		None,
		[Token(Token = "0x4000EDC")]
		AButton,
		[Token(Token = "0x4000EDD")]
		AButtonDown,
		[Token(Token = "0x4000EDE")]
		BButton,
		[Token(Token = "0x4000EDF")]
		BButtonDown,
		[Token(Token = "0x4000EE0")]
		XButton,
		[Token(Token = "0x4000EE1")]
		XButtonDown,
		[Token(Token = "0x4000EE2")]
		YButton,
		[Token(Token = "0x4000EE3")]
		YButtonDown,
		[Token(Token = "0x4000EE4")]
		LeftTrigger,
		[Token(Token = "0x4000EE5")]
		LeftTriggerDown,
		[Token(Token = "0x4000EE6")]
		LeftGrip,
		[Token(Token = "0x4000EE7")]
		LeftGripDown,
		[Token(Token = "0x4000EE8")]
		LeftThumbstick,
		[Token(Token = "0x4000EE9")]
		LeftThumbstickDown,
		[Token(Token = "0x4000EEA")]
		RightTrigger,
		[Token(Token = "0x4000EEB")]
		RightTriggerDown,
		[Token(Token = "0x4000EEC")]
		RightGrip,
		[Token(Token = "0x4000EED")]
		RightGripDown,
		[Token(Token = "0x4000EEE")]
		RightThumbstick,
		[Token(Token = "0x4000EEF")]
		RightThumbstickDown,
		[Token(Token = "0x4000EF0")]
		StartButton,
		[Token(Token = "0x4000EF1")]
		StartButtonDown,
		[Token(Token = "0x4000EF2")]
		BackButton,
		[Token(Token = "0x4000EF3")]
		BackButtonDown
	}
	[Token(Token = "0x20002BF")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x4000EF5")]
		None,
		[Token(Token = "0x4000EF6")]
		Button1,
		[Token(Token = "0x4000EF7")]
		Button1Down,
		[Token(Token = "0x4000EF8")]
		Button2,
		[Token(Token = "0x4000EF9")]
		Button2Down,
		[Token(Token = "0x4000EFA")]
		Trigger,
		[Token(Token = "0x4000EFB")]
		TriggerDown,
		[Token(Token = "0x4000EFC")]
		Grip,
		[Token(Token = "0x4000EFD")]
		GripDown
	}
	[Token(Token = "0x20002C0")]
	public enum InputAxis
	{
		[Token(Token = "0x4000EFF")]
		None,
		[Token(Token = "0x4000F00")]
		LeftThumbStickAxis,
		[Token(Token = "0x4000F01")]
		LeftTouchPadAxis,
		[Token(Token = "0x4000F02")]
		RightThumbStickAxis,
		[Token(Token = "0x4000F03")]
		RightTouchPadAxis
	}
	[Token(Token = "0x20002C1")]
	public enum ControllerType
	{
		[Token(Token = "0x4000F05")]
		None,
		[Token(Token = "0x4000F06")]
		Unknown,
		[Token(Token = "0x4000F07")]
		OculusTouch,
		[Token(Token = "0x4000F08")]
		Wand,
		[Token(Token = "0x4000F09")]
		Knuckles
	}
	[Token(Token = "0x20002C2")]
	public enum HandControl
	{
		[Token(Token = "0x4000F0B")]
		LeftGrip,
		[Token(Token = "0x4000F0C")]
		RightGrip,
		[Token(Token = "0x4000F0D")]
		LeftTrigger,
		[Token(Token = "0x4000F0E")]
		RightTrigger,
		[Token(Token = "0x4000F0F")]
		None
	}
	[Token(Token = "0x20002C3")]
	public enum GrabButton
	{
		[Token(Token = "0x4000F11")]
		Grip,
		[Token(Token = "0x4000F12")]
		Trigger,
		[Token(Token = "0x4000F13")]
		Inherit
	}
	[Token(Token = "0x20002C4")]
	public enum HoldType
	{
		[Token(Token = "0x4000F15")]
		HoldDown,
		[Token(Token = "0x4000F16")]
		Toggle,
		[Token(Token = "0x4000F17")]
		Inherit
	}
	[Token(Token = "0x20002C5")]
	public enum XRInputSource
	{
		[Token(Token = "0x4000F19")]
		XRInput,
		[Token(Token = "0x4000F1A")]
		OVRInput,
		[Token(Token = "0x4000F1B")]
		SteamVR,
		[Token(Token = "0x4000F1C")]
		Pico,
		[Token(Token = "0x4000F1D")]
		UnityInput,
		[Token(Token = "0x4000F1E")]
		WebXR,
		[Token(Token = "0x4000F1F")]
		None
	}
	[Token(Token = "0x20002C6")]
	public enum SDKProvider
	{
		[Token(Token = "0x4000F21")]
		Unknown,
		[Token(Token = "0x4000F22")]
		OculusSDK,
		[Token(Token = "0x4000F23")]
		OpenVR
	}
	[Token(Token = "0x20002C7")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x20002C8")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x20002C9")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x20002CA")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__180 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x170001B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EFE")]
				[Address(RVA = "0xA72138", Offset = "0xA72138", VA = "0xA72138", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F00")]
				[Address(RVA = "0xA72180", Offset = "0xA72180", VA = "0xA72180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xA71B14", Offset = "0xA71B14", VA = "0xA71B14")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__180(int <>1__state)
			{
			}

			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xA71F1C", Offset = "0xA71F1C", VA = "0xA71F1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0xA71F20", Offset = "0xA71F20", VA = "0xA71F20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xA72140", Offset = "0xA72140", VA = "0xA72140", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002CB")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__182 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x170001B7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F04")]
				[Address(RVA = "0xA7222C", Offset = "0xA7222C", VA = "0xA7222C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F06")]
				[Address(RVA = "0xA72274", Offset = "0xA72274", VA = "0xA72274", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F01")]
			[Address(RVA = "0xA71BAC", Offset = "0xA71BAC", VA = "0xA71BAC")]
			[DebuggerHidden]
			public <Vibrate>d__182(int <>1__state)
			{
			}

			[Token(Token = "0x6000F02")]
			[Address(RVA = "0xA72188", Offset = "0xA72188", VA = "0xA72188", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F03")]
			[Address(RVA = "0xA7218C", Offset = "0xA7218C", VA = "0xA7218C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F05")]
			[Address(RVA = "0xA72234", Offset = "0xA72234", VA = "0xA72234", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input Settings")]
		[SerializeField]
		public XRInputSource InputSource;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		public InputActionAsset actionSet;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		[SerializeField]
		[Header("Tracking Origin")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Thumbstick Deadzone")]
		[Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		[Header("Finger Tracking")]
		public float LeftThumbCurl;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LeftIndexCurl;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float LeftMiddleCurl;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float LeftRingCurl;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float LeftPinkyCurl;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float RightThumbCurl;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float RightIndexCurl;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float RightMiddleCurl;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float RightRingCurl;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float RightPinkyCurl;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _downThreshold;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool SteamVRSupport;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		[Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<UnityEngine.XR.InputDevice> hmds;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<UnityEngine.XR.InputDevice> tempInputDeviceList;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftGrip;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction leftTrigger;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction rightGrip;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction rightTrigger;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InputAction aButton;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InputAction bButton;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private InputAction xButton;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private InputAction yButton;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private InputAction startButton;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private InputAction backButton;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private bool setTrackingOrigin;

		[Token(Token = "0x170001AD")]
		public static InputBridge Instance
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xA6845C", Offset = "0xA6845C", VA = "0xA6845C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		public float DownThreshold
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xA6E11C", Offset = "0xA6E11C", VA = "0xA6E11C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AF")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xA6E124", Offset = "0xA6E124", VA = "0xA6E124")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xA6E12C", Offset = "0xA6E12C", VA = "0xA6E12C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xA6E134", Offset = "0xA6E134", VA = "0xA6E134")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xA6E13C", Offset = "0xA6E13C", VA = "0xA6E13C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xA6E148", Offset = "0xA6E148", VA = "0xA6E148")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xA6E150", Offset = "0xA6E150", VA = "0xA6E150")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xA6E15C", Offset = "0xA6E15C", VA = "0xA6E15C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xA6E164", Offset = "0xA6E164", VA = "0xA6E164")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xA6E170", Offset = "0xA6E170", VA = "0xA6E170")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xA6E178", Offset = "0xA6E178", VA = "0xA6E178")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xA6E184", Offset = "0xA6E184", VA = "0xA6E184")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xA6E18C", Offset = "0xA6E18C", VA = "0xA6E18C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000024")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xA6E198", Offset = "0xA6E198", VA = "0xA6E198")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xA6E274", Offset = "0xA6E274", VA = "0xA6E274")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xA6E350", Offset = "0xA6E350", VA = "0xA6E350")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xA6E42C", Offset = "0xA6E42C", VA = "0xA6E42C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xA6E508", Offset = "0xA6E508", VA = "0xA6E508")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xA6E808", Offset = "0xA6E808", VA = "0xA6E808")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xA6E848", Offset = "0xA6E848", VA = "0xA6E848")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xA6E948", Offset = "0xA6E948", VA = "0xA6E948")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xA6EA38", Offset = "0xA6EA38", VA = "0xA6EA38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xA6EA64", Offset = "0xA6EA64", VA = "0xA6EA64", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xA6EB50", Offset = "0xA6EB50", VA = "0xA6EB50", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xA6EB54", Offset = "0xA6EB54", VA = "0xA6EB54", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xA6F85C", Offset = "0xA6F85C", VA = "0xA6F85C", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xA6FCA4", Offset = "0xA6FCA4", VA = "0xA6FCA4", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xA702B0", Offset = "0xA702B0", VA = "0xA702B0", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xA706C4", Offset = "0xA706C4", VA = "0xA706C4", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xA70218", Offset = "0xA70218", VA = "0xA70218")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xA70AD8", Offset = "0xA70AD8", VA = "0xA70AD8", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xA70B4C", Offset = "0xA70B4C", VA = "0xA70B4C", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xA70B50", Offset = "0xA70B50", VA = "0xA70B50", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xA6F77C", Offset = "0xA6F77C", VA = "0xA6F77C")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xA70CD4", Offset = "0xA70CD4", VA = "0xA70CD4")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xA70E1C", Offset = "0xA70E1C", VA = "0xA70E1C")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xA70F34", Offset = "0xA70F34", VA = "0xA70F34")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xA6F714", Offset = "0xA6F714", VA = "0xA6F714")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xA70FD0", Offset = "0xA70FD0", VA = "0xA70FD0")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xA6E65C", Offset = "0xA6E65C", VA = "0xA6E65C")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xA70FF8", Offset = "0xA70FF8", VA = "0xA70FF8", Slot = "14")]
		public virtual bool GetSupportsXRInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xA71018", Offset = "0xA71018", VA = "0xA71018", Slot = "15")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xA71020", Offset = "0xA71020", VA = "0xA71020", Slot = "16")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xA710C8", Offset = "0xA710C8", VA = "0xA710C8", Slot = "17")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xA710D0", Offset = "0xA710D0", VA = "0xA710D0", Slot = "18")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xA71194", Offset = "0xA71194", VA = "0xA71194", Slot = "19")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xA712A0", Offset = "0xA712A0", VA = "0xA712A0", Slot = "20")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xA71338", Offset = "0xA71338", VA = "0xA71338", Slot = "21")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xA70C24", Offset = "0xA70C24", VA = "0xA70C24")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xA713AC", Offset = "0xA713AC", VA = "0xA713AC")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xA713D4", Offset = "0xA713D4", VA = "0xA713D4")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xA71468", Offset = "0xA71468", VA = "0xA71468")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xA6F54C", Offset = "0xA6F54C", VA = "0xA6F54C")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xA6F5FC", Offset = "0xA6F5FC", VA = "0xA6F5FC")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xA714F8", Offset = "0xA714F8", VA = "0xA714F8")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xA715EC", Offset = "0xA715EC", VA = "0xA715EC")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xA716D4", Offset = "0xA716D4", VA = "0xA716D4", Slot = "22")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xA71708", Offset = "0xA71708", VA = "0xA71708")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xA717EC", Offset = "0xA717EC", VA = "0xA717EC")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xA71894", Offset = "0xA71894", VA = "0xA71894", Slot = "23")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xA719BC", Offset = "0xA719BC", VA = "0xA719BC", Slot = "24")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xA6F734", Offset = "0xA6F734", VA = "0xA6F734")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xA6F6AC", Offset = "0xA6F6AC", VA = "0xA6F6AC")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xA6F6E0", Offset = "0xA6F6E0", VA = "0xA6F6E0")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xA717B0", Offset = "0xA717B0", VA = "0xA717B0")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xA71A7C", Offset = "0xA71A7C", VA = "0xA71A7C", Slot = "25")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xA71A9C", Offset = "0xA71A9C", VA = "0xA71A9C")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__180))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xA6DE68", Offset = "0xA6DE68", VA = "0xA6DE68")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xA71B3C", Offset = "0xA71B3C", VA = "0xA71B3C")]
		[IteratorStateMachine(typeof(<Vibrate>d__182))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xA71BD4", Offset = "0xA71BD4", VA = "0xA71BD4")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Deadzone")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		public float DeadZone;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xA7227C", Offset = "0xA7227C", VA = "0xA7227C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xA722F8", Offset = "0xA722F8", VA = "0xA722F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xA72B04", Offset = "0xA72B04", VA = "0xA72B04")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xA72620", Offset = "0xA72620", VA = "0xA72620")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xA72BB0", Offset = "0xA72BB0", VA = "0xA72BB0", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xA72C24", Offset = "0xA72C24", VA = "0xA72C24", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xA72C98", Offset = "0xA72C98", VA = "0xA72C98")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class JoystickVehicleControl : MonoBehaviour
	{
		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Grab Object")]
		public Grabbable JoystickGrabbable;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Movement Speed")]
		[Tooltip("Set to True to Lerp towards the held hand. Set to False for Instant movement")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hinge X")]
		public Transform HingeXTransform;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinXAngle;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxXAngle;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Hinge Y")]
		public Transform HingeYTransform;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinYAngle;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxYAngle;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Return To Center")]
		[Tooltip("How fast to return to center if nothing is holding the Joystick. Set to 0 if you do not wish to Return to Center")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Deadzone")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		public float DeadZone;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float LeverPercentageX;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LeverPercentageY;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 LeverVector;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleX;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float angleY;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion originalRot;

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xA72CC4", Offset = "0xA72CC4", VA = "0xA72CC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xA73280", Offset = "0xA73280", VA = "0xA73280", Slot = "4")]
		public virtual void CallJoystickEvents()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xA733BC", Offset = "0xA733BC", VA = "0xA733BC", Slot = "5")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xA73430", Offset = "0xA73430", VA = "0xA73430", Slot = "6")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xA734A4", Offset = "0xA734A4", VA = "0xA734A4")]
		public JoystickVehicleControl()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Tolerance")]
		[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		public float SwitchTolerance;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Look")]
		[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Moving Platform Support")]
		[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center (Must be Kinematic)")]
		[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		public bool ReturnToCenter;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		[Header("Snap Settings")]
		public bool SnapToGrabber;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Tooltip("If true, the Lever will be dropped once switched on or off")]
		[Header("Misc")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		[Header("Shown for Debug")]
		public float LeverPercentage;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called when lever was up, but is now in the down position")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion initialOffset;

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xA73520", Offset = "0xA73520", VA = "0xA73520")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xA736D8", Offset = "0xA736D8", VA = "0xA736D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xA73708", Offset = "0xA73708", VA = "0xA73708")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xA73954", Offset = "0xA73954", VA = "0xA73954", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xA73AF4", Offset = "0xA73AF4", VA = "0xA73AF4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xA73AF8", Offset = "0xA73AF8", VA = "0xA73AF8")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xA7406C", Offset = "0xA7406C", VA = "0xA7406C", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xA740B8", Offset = "0xA740B8", VA = "0xA740B8", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xA74124", Offset = "0xA74124", VA = "0xA74124", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xA74220", Offset = "0xA74220", VA = "0xA74220", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xA74320", Offset = "0xA74320", VA = "0xA74320")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		[Header("Locomotion Type")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		[Header("Save / Loading")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The action used to toggle locomotion type")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool actionToggle;

		[Token(Token = "0x170001B9")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0xA743AC", Offset = "0xA743AC", VA = "0xA743AC")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xA743B4", Offset = "0xA743B4", VA = "0xA743B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xA744EC", Offset = "0xA744EC", VA = "0xA744EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xA74518", Offset = "0xA74518", VA = "0xA74518", Slot = "4")]
		public virtual void CheckControllerToggleInput()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xA74618", Offset = "0xA74618", VA = "0xA74618")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xA74718", Offset = "0xA74718", VA = "0xA74718")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xA74818", Offset = "0xA74818", VA = "0xA74818")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xA745F4", Offset = "0xA745F4", VA = "0xA745F4")]
		public void LocomotionToggle()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xA74824", Offset = "0xA74824", VA = "0xA74824")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xA74474", Offset = "0xA74474", VA = "0xA74474")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xA74850", Offset = "0xA74850", VA = "0xA74850")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xA7495C", Offset = "0xA7495C", VA = "0xA7495C")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xA74998", Offset = "0xA74998", VA = "0xA74998")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xA74A4C", Offset = "0xA74A4C", VA = "0xA74A4C")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xA74A5C", Offset = "0xA74A5C", VA = "0xA74A5C")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Capsule Settings")]
		[Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _checkedRigidPlayer;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool _isRigidPlayer;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 moveDirection;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x170001BA")]
		public bool IsRigidbodyPlayer
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0xA74B44", Offset = "0xA74B44", VA = "0xA74B44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xA74BF0", Offset = "0xA74BF0", VA = "0xA74BF0")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xA74D04", Offset = "0xA74D04", VA = "0xA74D04")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xA74DD8", Offset = "0xA74DD8", VA = "0xA74DD8", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xA7510C", Offset = "0xA7510C", VA = "0xA7510C", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xA7521C", Offset = "0xA7521C", VA = "0xA7521C", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xA75370", Offset = "0xA75370", VA = "0xA75370", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xA758F4", Offset = "0xA758F4", VA = "0xA758F4")]
		private void DoPhysicalClimbing()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xA75774", Offset = "0xA75774", VA = "0xA75774")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xA75830", Offset = "0xA75830", VA = "0xA75830")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xA75CA4", Offset = "0xA75CA4", VA = "0xA75CA4")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public Vector3 Gravity;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xA75D2C", Offset = "0xA75D2C", VA = "0xA75D2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xA75E24", Offset = "0xA75E24", VA = "0xA75E24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xA75F9C", Offset = "0xA75F9C", VA = "0xA75F9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xA75C2C", Offset = "0xA75C2C", VA = "0xA75C2C")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xA76074", Offset = "0xA76074", VA = "0xA76074")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is on a moving platform")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DistanceFromGround;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MovingPlatform CurrentPlatform;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _lastHitObject;

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xA760A4", Offset = "0xA760A4", VA = "0xA760A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xA76140", Offset = "0xA76140", VA = "0xA76140")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xA7614C", Offset = "0xA7614C", VA = "0xA7614C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xA76158", Offset = "0xA76158", VA = "0xA76158", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xA764DC", Offset = "0xA764DC", VA = "0xA764DC", Slot = "5")]
		public virtual void UpdateCurrentPlatform()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xA765B4", Offset = "0xA765B4", VA = "0xA765B4", Slot = "6")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xA769A8", Offset = "0xA769A8", VA = "0xA769A8")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public enum RotationMechanic
	{
		[Token(Token = "0x4001000")]
		Snap,
		[Token(Token = "0x4001001")]
		Smooth
	}
	[Token(Token = "0x20002D4")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x20002D5")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x20002D6")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Set to false to skip Update")]
		[Header("Input")]
		public bool AllowInput;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Unity Input Action used to rotate the player")]
		public InputActionReference RotateAction;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		[Header("Smooth / Snap Turning")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Snap Turn Settings")]
		[Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		public float SnapRotationAmount;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		[Header("Smooth Turn Settings")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x14000026")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6000F44")]
			[Address(RVA = "0xA769B0", Offset = "0xA769B0", VA = "0xA769B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F45")]
			[Address(RVA = "0xA76A68", Offset = "0xA76A68", VA = "0xA76A68")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0xA76B20", Offset = "0xA76B20", VA = "0xA76B20")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xA76BDC", Offset = "0xA76BDC", VA = "0xA76BDC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xA76C98", Offset = "0xA76C98", VA = "0xA76C98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xA76CF4", Offset = "0xA76CF4", VA = "0xA76CF4", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xA76E84", Offset = "0xA76E84", VA = "0xA76E84", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xA77060", Offset = "0xA77060", VA = "0xA77060", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xA77090", Offset = "0xA77090", VA = "0xA77090", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xA7718C", Offset = "0xA7718C", VA = "0xA7718C")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public enum TeleportControls
	{
		[Token(Token = "0x4001011")]
		ThumbstickRotate,
		[Token(Token = "0x4001012")]
		ThumbstickDown,
		[Token(Token = "0x4001013")]
		BButton,
		[Token(Token = "0x4001014")]
		None
	}
	[Token(Token = "0x20002D8")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x20002D9")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x20002DA")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x20002DB")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x20002DC")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400104A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400104B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x400104C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x400104D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x400104E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x170001BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F86")]
				[Address(RVA = "0xA7B220", Offset = "0xA7B220", VA = "0xA7B220", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F88")]
				[Address(RVA = "0xA7B268", Offset = "0xA7B268", VA = "0xA7B268", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xA7AE2C", Offset = "0xA7AE2C", VA = "0xA7AE2C")]
			[DebuggerHidden]
			public <doTeleport>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6000F84")]
			[Address(RVA = "0xA7AE54", Offset = "0xA7AE54", VA = "0xA7AE54", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xA7AE58", Offset = "0xA7AE58", VA = "0xA7AE58", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0xA7B228", Offset = "0xA7B228", VA = "0xA7B228", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The LineRenderer to use when showing a teleport preview")]
		[Header("Colors")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		[Header("Hand Side")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		[Header("Transform Definitions")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Raycast layers to use when determining collision")]
		[Header("Layers")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Controls")]
		[Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Unity Input Action used to initiate Teleport")]
		public InputActionReference InitiateTeleportAction;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[Tooltip("If true the teleport marker will always be the same rotation as the player")]
		public bool ForceStraightArrow;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Slope")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		public float MaxSlope;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Offset")]
		[Tooltip("Offset the player's Y position from TeleportDestination")]
		public float TeleportYOffset;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		[Header("Screen Fade")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Physics Material")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issued.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController controller;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform cameraRig;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ScreenFader fader;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool aimingTeleport;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool validTeleport;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool teleportationEnabled;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _invalidFrames;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _initialLineWidth;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool setVariables;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Collider _hitObject;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 _hitVector;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float _hitAngle;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RaycastHit hit;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3[] segments;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 segVelocity;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float segTime;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int segCount;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool isDestination;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector2 teleportAxis;

		[Token(Token = "0x170001BB")]
		private Transform teleportTransform
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xA77484", Offset = "0xA77484", VA = "0xA77484")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BC")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xA774A0", Offset = "0xA774A0", VA = "0xA774A0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170001BD")]
		public bool AimingTeleport
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0xA774E0", Offset = "0xA774E0", VA = "0xA774E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000028")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xA774E8", Offset = "0xA774E8", VA = "0xA774E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0xA775A0", Offset = "0xA775A0", VA = "0xA775A0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xA77658", Offset = "0xA77658", VA = "0xA77658")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0xA77714", Offset = "0xA77714", VA = "0xA77714")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0xA777D0", Offset = "0xA777D0", VA = "0xA777D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xA7788C", Offset = "0xA7788C", VA = "0xA7788C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xA77948", Offset = "0xA77948", VA = "0xA77948")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xA77C58", Offset = "0xA77C58", VA = "0xA77C58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xA7794C", Offset = "0xA7794C", VA = "0xA7794C")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xA77D40", Offset = "0xA77D40", VA = "0xA77D40")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xA77DCC", Offset = "0xA77DCC", VA = "0xA77DCC")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xA77ED0", Offset = "0xA77ED0", VA = "0xA77ED0")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xA74A2C", Offset = "0xA74A2C", VA = "0xA74A2C")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xA74A38", Offset = "0xA74A38", VA = "0xA74A38")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xA77EEC", Offset = "0xA77EEC", VA = "0xA77EEC", Slot = "4")]
		protected virtual void calculateParabola()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xA7894C", Offset = "0xA7894C", VA = "0xA7894C", Slot = "5")]
		protected virtual bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xA78BA4", Offset = "0xA78BA4", VA = "0xA78BA4", Slot = "6")]
		protected virtual void hideTeleport()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xA78BF8", Offset = "0xA78BF8", VA = "0xA78BF8", Slot = "7")]
		protected virtual void updateTeleport()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xA78C50", Offset = "0xA78C50", VA = "0xA78C50", Slot = "8")]
		protected virtual void rotateMarker()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xA78FCC", Offset = "0xA78FCC", VA = "0xA78FCC", Slot = "9")]
		protected virtual void tryTeleport()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xA79278", Offset = "0xA79278", VA = "0xA79278", Slot = "10")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xA79340", Offset = "0xA79340", VA = "0xA79340", Slot = "11")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xA79408", Offset = "0xA79408", VA = "0xA79408", Slot = "12")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xA791B0", Offset = "0xA791B0", VA = "0xA791B0")]
		[IteratorStateMachine(typeof(<doTeleport>d__83))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xA79504", Offset = "0xA79504", VA = "0xA79504")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xA79528", Offset = "0xA79528", VA = "0xA79528")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xA795C4", Offset = "0xA795C4", VA = "0xA795C4", Slot = "13")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xA79894", Offset = "0xA79894", VA = "0xA79894", Slot = "14")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xA79984", Offset = "0xA79984", VA = "0xA79984")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xA79A90", Offset = "0xA79A90", VA = "0xA79A90")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Maximium Distance")]
		[Tooltip("Maximum Distance this object can be from the UIPointer to be considered valid and receive events")]
		public float MaxDistance;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Enable Events")]
		[Tooltip("If True then the Unity Events below will be sent. Set to False if you need to disable sending pointer events.")]
		public bool Enabled;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Unity Events : ")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xA7B270", Offset = "0xA7B270", VA = "0xA7B270", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xA7B2EC", Offset = "0xA7B2EC", VA = "0xA7B2EC", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xA7B368", Offset = "0xA7B368", VA = "0xA7B368", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xA7B3C8", Offset = "0xA7B3C8", VA = "0xA7B3C8", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xA7B444", Offset = "0xA7B444", VA = "0xA7B444", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xA7B4A4", Offset = "0xA7B4A4", VA = "0xA7B4A4", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xA7B4C4", Offset = "0xA7B4C4", VA = "0xA7B4C4")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public enum RemoteGrabType
	{
		[Token(Token = "0x4001057")]
		Trigger,
		[Token(Token = "0x4001058")]
		Raycast,
		[Token(Token = "0x4001059")]
		Spherecast
	}
	[Token(Token = "0x20002DF")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RemoteGrabType PhysicsCheckType;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If PhysicsCheckType = Trigger and this is true, an additonal raycast check will occur to check for obstacles in the way")]
		public bool TriggerRequiresRaycast;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RaycastLength;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SphereCastLength;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float SphereCastRadius;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask RemoteGrabLayers;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider _lastColliderHit;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ShowGizmos;

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xA7B4DC", Offset = "0xA7B4DC", VA = "0xA7B4DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xA7B604", Offset = "0xA7B604", VA = "0xA7B604", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xA7B82C", Offset = "0xA7B82C", VA = "0xA7B82C")]
		private void ObjectHit(Collider colliderHit)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xA7B99C", Offset = "0xA7B99C", VA = "0xA7B99C")]
		public void RemovePreviousHitObject()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xA7BAB8", Offset = "0xA7BAB8", VA = "0xA7BAB8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xA7BC88", Offset = "0xA7BC88", VA = "0xA7BC88")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xA7BE38", Offset = "0xA7BE38", VA = "0xA7BE38")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x170001C0")]
		public float SlidePercentage
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xA7BE88", Offset = "0xA7BE88", VA = "0xA7BE88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xA7BE90", Offset = "0xA7BE90", VA = "0xA7BE90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xA7BF98", Offset = "0xA7BF98", VA = "0xA7BF98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xA7C018", Offset = "0xA7C018", VA = "0xA7C018", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xA7C084", Offset = "0xA7C084", VA = "0xA7C084")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public enum MovementVector
	{
		[Token(Token = "0x400106A")]
		HMD,
		[Token(Token = "0x400106B")]
		Controller
	}
	[Token(Token = "0x20002E2")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x20002E3")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x20002E4")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerControllerType ControllerType;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("CharacterController Settings : ")]
		public float MovementSpeed;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How much force to apply to the rigidbody when the player is grounded")]
		[Header("Rigidbody Settings : ")]
		public float MovementForce;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Maximium velocity of the player's rigidbody in X, Z. Used to constrain max speed movement.")]
		public float MaxHorizontalVelocity;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximium velocity of the player's rigidbody on the Y axis. Used to constrain max vertical movement, such as jumping and falling.")]
		public float MaxVerticalVelocity;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How far up from the characters feet is considered a step. Anything below this will be considered grounded.")]
		public float StepHeight;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximium angle a slope can be to be considered grounded. Negated if contact distance from the player's feet is less than StepHeight.")]
		public float MaxSlopeAngle;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Physics Material to apply to the sphere collider while moving. Use this to dynamically adjust friction and bounciness.")]
		public PhysicMaterial MovementMaterial;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issues. Use this to slow t he player down, or allow them to slide across surfaces.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How much drag to apply to the player while moving")]
		public float MovementDrag;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How much drag to apply to the player while standing still. Used to slow down the player or prevent from sliding down a hill.")]
		public float StaticDrag;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much drag to apply to the player when in the air / not grounded.")]
		public float AirDrag;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Forward Direction : ")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want to respond to input commands. (For example, if paused or in a menu)")]
		public bool AllowInput;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want SmoothLocomotion to update movement at all.")]
		public bool UpdateMovement;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Input Action used to affect movement")]
		public InputActionReference MoveAction;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, movement events will only be sent if the Application has focus (Or Play window, if running in the Unity Editor)")]
		public bool RequireAppFocus;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to enable sprinting")]
		public InputActionReference SprintAction;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Jump : ")]
		[Tooltip("Amount of 'force' to apply to the player during Jump")]
		public float JumpForce;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Unity Input Action used to initiate a jump")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Air Control : ")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		public bool AirControl;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController characterController;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SphereCollider playerSphere;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float movementX;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float movementY;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float movementZ;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _verticalSpeed;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 additionalMovement;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool playerInitialized;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float lastJumpTime;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float lastMoveTime;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float Magnitude;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Header("Shown for Debug : ")]
		public int GroundContacts;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float SurfaceAngle;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SurfaceHeight;

		[Token(Token = "0x1400002B")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0xA7C098", Offset = "0xA7C098", VA = "0xA7C098")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F9D")]
			[Address(RVA = "0xA7C150", Offset = "0xA7C150", VA = "0xA7C150")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0xA7C208", Offset = "0xA7C208", VA = "0xA7C208")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0xA7C2C4", Offset = "0xA7C2C4", VA = "0xA7C2C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xA7C380", Offset = "0xA7C380", VA = "0xA7C380", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xA7C3C8", Offset = "0xA7C3C8", VA = "0xA7C3C8", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xA7C400", Offset = "0xA7C400", VA = "0xA7C400", Slot = "6")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xA7C5A0", Offset = "0xA7C5A0", VA = "0xA7C5A0", Slot = "7")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xA7C6AC", Offset = "0xA7C6AC", VA = "0xA7C6AC", Slot = "8")]
		public virtual void DoRigidBodyJump()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xA7C740", Offset = "0xA7C740", VA = "0xA7C740", Slot = "9")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xA7CB84", Offset = "0xA7CB84", VA = "0xA7CB84", Slot = "10")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xA7CD8C", Offset = "0xA7CD8C", VA = "0xA7CD8C", Slot = "11")]
		public virtual void MoveRigidCharacter(Vector3 moveTo)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xA7CD90", Offset = "0xA7CD90", VA = "0xA7CD90", Slot = "12")]
		public virtual void MoveRigidCharacter()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xA7D248", Offset = "0xA7D248", VA = "0xA7D248", Slot = "13")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xA7D514", Offset = "0xA7D514", VA = "0xA7D514", Slot = "14")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xA7D694", Offset = "0xA7D694", VA = "0xA7D694", Slot = "15")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xA7D804", Offset = "0xA7D804", VA = "0xA7D804", Slot = "16")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xA7D898", Offset = "0xA7D898", VA = "0xA7D898", Slot = "17")]
		public virtual void SetupCharacterController()
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xA7DA38", Offset = "0xA7DA38", VA = "0xA7DA38", Slot = "18")]
		public virtual void SetupRigidbodyPlayer()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xA7DCA4", Offset = "0xA7DCA4", VA = "0xA7DCA4", Slot = "19")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xA7DCB0", Offset = "0xA7DCB0", VA = "0xA7DCB0", Slot = "20")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xA7DCB8", Offset = "0xA7DCB8", VA = "0xA7DCB8")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xA7DFAC", Offset = "0xA7DFAC", VA = "0xA7DFAC")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public enum PlayerControllerType
	{
		[Token(Token = "0x400109B")]
		CharacterController,
		[Token(Token = "0x400109C")]
		Rigidbody
	}
	[Token(Token = "0x20002E6")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Starting / Held Item")]
		[Tooltip("The currently held item. Set this in the editor to equip on Start().")]
		public Grabbable HeldItem;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("TSet this in the editor to equip on Start().")]
		public Grabbable StartingItem;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Options")]
		[Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		public bool CanDropItem;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanRemoveItem;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _scaleTo;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool DisableColliders;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastSnapTime;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Filtering")]
		[Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable trackedItem;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SnapZoneOffset offset;

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xA7E428", Offset = "0xA7E428", VA = "0xA7E428")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xA7E594", Offset = "0xA7E594", VA = "0xA7E594")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xA7E928", Offset = "0xA7E928", VA = "0xA7E928")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xA7EF68", Offset = "0xA7EF68", VA = "0xA7EF68", Slot = "4")]
		public virtual void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xA7EE6C", Offset = "0xA7EE6C", VA = "0xA7EE6C")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xA7F504", Offset = "0xA7F504", VA = "0xA7F504", Slot = "5")]
		public virtual void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xA7F848", Offset = "0xA7F848", VA = "0xA7F848", Slot = "6")]
		public virtual bool CanBeRemoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xA7F8A4", Offset = "0xA7F8A4", VA = "0xA7F8A4", Slot = "7")]
		public virtual void ReleaseAll()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xA7FC88", Offset = "0xA7FC88", VA = "0xA7FC88")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xA7FD2C", Offset = "0xA7FD2C", VA = "0xA7FD2C")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xA7FD34", Offset = "0xA7FD34", VA = "0xA7FD34")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		[Header("Rotation Limits")]
		public float MinAngle;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Rotation Object")]
		[Tooltip("The Transform to rotate on its Z axis.")]
		public Transform RotatorObject;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		[Header("Rotation Speed")]
		public float RotationSpeed;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Two-Handed Option")]
		[Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		public bool AllowTwoHanded;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		[Header("Editor Option")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x170001C1")]
		public float Angle
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xA7FD44", Offset = "0xA7FD44", VA = "0xA7FD44")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C2")]
		public float RawAngle
		{
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xA7FD60", Offset = "0xA7FD60", VA = "0xA7FD60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C3")]
		public float ScaleValue
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xA7FD68", Offset = "0xA7FD68", VA = "0xA7FD68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C4")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xA7FD90", Offset = "0xA7FD90", VA = "0xA7FD90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C5")]
		public float AngleInverted
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xA7FDC8", Offset = "0xA7FDC8", VA = "0xA7FDC8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C6")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xA7FDE8", Offset = "0xA7FDE8", VA = "0xA7FDE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C7")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xA7FE90", Offset = "0xA7FE90", VA = "0xA7FE90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xA7FF34", Offset = "0xA7FF34", VA = "0xA7FF34")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xA7FFEC", Offset = "0xA7FFEC", VA = "0xA7FFEC", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xA8028C", Offset = "0xA8028C", VA = "0xA8028C")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xA803C8", Offset = "0xA803C8", VA = "0xA803C8", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xA803F0", Offset = "0xA803F0", VA = "0xA803F0", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xA8056C", Offset = "0xA8056C", VA = "0xA8056C", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xA80608", Offset = "0xA80608", VA = "0xA80608", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xA80710", Offset = "0xA80710", VA = "0xA80710", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xA7FDEC", Offset = "0xA7FDEC", VA = "0xA7FDEC")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xA7FE94", Offset = "0xA7FE94", VA = "0xA7FE94")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xA807C8", Offset = "0xA807C8", VA = "0xA807C8", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xA807D0", Offset = "0xA807D0", VA = "0xA807D0", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xA807F0", Offset = "0xA807F0", VA = "0xA807F0")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xA80818", Offset = "0xA80818", VA = "0xA80818", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xA80868", Offset = "0xA80868", VA = "0xA80868", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xA808DC", Offset = "0xA808DC", VA = "0xA808DC", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xA80950", Offset = "0xA80950", VA = "0xA80950", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xA80978", Offset = "0xA80978", VA = "0xA80978", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xA80984", Offset = "0xA80984", VA = "0xA80984", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xA80A68", Offset = "0xA80A68", VA = "0xA80A68", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xA80C60", Offset = "0xA80C60", VA = "0xA80C60", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xA80C6C", Offset = "0xA80C6C", VA = "0xA80C6C")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public enum TrackableDevice
	{
		[Token(Token = "0x40010D0")]
		HMD,
		[Token(Token = "0x40010D1")]
		LeftController,
		[Token(Token = "0x40010D2")]
		RightController
	}
	[Token(Token = "0x20002EC")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x20002ED")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x170001C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FEF")]
				[Address(RVA = "0xA81E08", Offset = "0xA81E08", VA = "0xA81E08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FF1")]
				[Address(RVA = "0xA81E50", Offset = "0xA81E50", VA = "0xA81E50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xA811DC", Offset = "0xA811DC", VA = "0xA811DC")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xA81C98", Offset = "0xA81C98", VA = "0xA81C98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xA81C9C", Offset = "0xA81C9C", VA = "0xA81C9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0xA81E10", Offset = "0xA81E10", VA = "0xA81E10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002EE")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x170001CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FF5")]
				[Address(RVA = "0xA81F2C", Offset = "0xA81F2C", VA = "0xA81F2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FF7")]
				[Address(RVA = "0xA81F74", Offset = "0xA81F74", VA = "0xA81F74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0xA81204", Offset = "0xA81204", VA = "0xA81204")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0xA81E58", Offset = "0xA81E58", VA = "0xA81E58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0xA81E5C", Offset = "0xA81E5C", VA = "0xA81E5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xA81F34", Offset = "0xA81F34", VA = "0xA81F34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xA80C74", Offset = "0xA80C74", VA = "0xA80C74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xA80DE0", Offset = "0xA80DE0", VA = "0xA80DE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xA81014", Offset = "0xA81014", VA = "0xA81014")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xA81174", Offset = "0xA81174", VA = "0xA81174")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xA8110C", Offset = "0xA8110C", VA = "0xA8110C")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xA8122C", Offset = "0xA8122C", VA = "0xA8122C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0xA81748", Offset = "0xA81748", VA = "0xA81748")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0xA81B78", Offset = "0xA81B78", VA = "0xA81B78")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0xA81C88", Offset = "0xA81C88", VA = "0xA81C88")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xA81F7C", Offset = "0xA81F7C", VA = "0xA81F7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xA81FE8", Offset = "0xA81FE8", VA = "0xA81FE8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xA82328", Offset = "0xA82328", VA = "0xA82328")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xA82434", Offset = "0xA82434", VA = "0xA82434")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class AutoGrabGrabbable : GrabbableEvents
	{
		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xA8243C", Offset = "0xA8243C", VA = "0xA8243C", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xA82464", Offset = "0xA82464", VA = "0xA82464")]
		public AutoGrabGrabbable()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("")]
		[Header("Bow Settings")]
		public float BowForce;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If True the BowModel Transform will align itself with the grabber holding the arrow")]
		public bool AlignBowToArrow;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If AlignBowToArrow is true this transform will align itself with the grabber holding the arrow")]
		public Transform BowModel;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		[Header("Arrow Settings")]
		public Transform ArrowRest;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Arrow Positioning")]
		public bool IgnoreXPosition;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Header("Arrow Grabbing")]
		public bool CanGrabArrow;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("String Settings")]
		public float MaxStringDistance;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Debug Text")]
		public Text PercentageUI;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x170001CC")]
		public float DrawPercent
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xA8246C", Offset = "0xA8246C", VA = "0xA8246C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xA82474", Offset = "0xA82474", VA = "0xA82474")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xA8247C", Offset = "0xA8247C", VA = "0xA8247C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xA829C4", Offset = "0xA829C4", VA = "0xA829C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xA8330C", Offset = "0xA8330C", VA = "0xA8330C")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xA83284", Offset = "0xA83284", VA = "0xA83284")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xA8367C", Offset = "0xA8367C", VA = "0xA8367C")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xA837B0", Offset = "0xA837B0", VA = "0xA837B0")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0xA83770", Offset = "0xA83770", VA = "0xA83770")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xA833F8", Offset = "0xA833F8", VA = "0xA833F8")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xA83628", Offset = "0xA83628", VA = "0xA83628")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xA82D90", Offset = "0xA82D90", VA = "0xA82D90")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xA82F4C", Offset = "0xA82F4C", VA = "0xA82F4C")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xA831D4", Offset = "0xA831D4", VA = "0xA831D4")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xA83808", Offset = "0xA83808", VA = "0xA83808", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xA83930", Offset = "0xA83930", VA = "0xA83930", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xA83CB0", Offset = "0xA83CB0", VA = "0xA83CB0", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xA8218C", Offset = "0xA8218C", VA = "0xA8218C")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xA830A8", Offset = "0xA830A8", VA = "0xA830A8")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xA83DA0", Offset = "0xA83DA0", VA = "0xA83DA0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xA83D8C", Offset = "0xA83D8C", VA = "0xA83D8C")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xA83DC4", Offset = "0xA83DC4", VA = "0xA83DC4")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xA837F0", Offset = "0xA837F0", VA = "0xA837F0")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xA83D70", Offset = "0xA83D70", VA = "0xA83D70")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xA83EF8", Offset = "0xA83EF8", VA = "0xA83EF8")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class DrawDefinition
	{
		[Token(Token = "0x170001CD")]
		public float DrawPercentage
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0xA83FE4", Offset = "0xA83FE4", VA = "0xA83FE4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001019")]
			[Address(RVA = "0xA83FEC", Offset = "0xA83FEC", VA = "0xA83FEC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public float HapticAmplitude
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0xA83FF4", Offset = "0xA83FF4", VA = "0xA83FF4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600101B")]
			[Address(RVA = "0xA83FFC", Offset = "0xA83FFC", VA = "0xA83FFC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public float HapticFrequency
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0xA84004", Offset = "0xA84004", VA = "0xA84004")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600101D")]
			[Address(RVA = "0xA8400C", Offset = "0xA8400C", VA = "0xA8400C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xA829BC", Offset = "0xA829BC", VA = "0xA829BC")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xA84014", Offset = "0xA84014", VA = "0xA84014")]
		private void Start()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xA84150", Offset = "0xA84150", VA = "0xA84150")]
		private void Update()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xA84328", Offset = "0xA84328", VA = "0xA84328")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xA8434C", Offset = "0xA8434C", VA = "0xA8434C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xA84510", Offset = "0xA84510", VA = "0xA84510")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xA8463C", Offset = "0xA8463C", VA = "0xA8463C")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xA846AC", Offset = "0xA846AC", VA = "0xA846AC")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xA84738", Offset = "0xA84738", VA = "0xA84738")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class CalibratePlayerHeight : MonoBehaviour
	{
		[Token(Token = "0x20002F6")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400111C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400111D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400111E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeight <>4__this;

			[Token(Token = "0x170001D0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001033")]
				[Address(RVA = "0xA84B48", Offset = "0xA84B48", VA = "0xA84B48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001035")]
				[Address(RVA = "0xA84B90", Offset = "0xA84B90", VA = "0xA84B90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001030")]
			[Address(RVA = "0xA84A3C", Offset = "0xA84A3C", VA = "0xA84A3C")]
			[DebuggerHidden]
			public <setupInitialOffset>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001031")]
			[Address(RVA = "0xA84A88", Offset = "0xA84A88", VA = "0xA84A88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001032")]
			[Address(RVA = "0xA84A8C", Offset = "0xA84A8C", VA = "0xA84A8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001034")]
			[Address(RVA = "0xA84B50", Offset = "0xA84B50", VA = "0xA84B50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public BNGPlayerController PlayerController;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Startup")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		public bool CalibrateOnStart;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		[Header("Input :")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xA8475C", Offset = "0xA8475C", VA = "0xA8475C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xA848EC", Offset = "0xA848EC", VA = "0xA848EC")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xA848F4", Offset = "0xA848F4", VA = "0xA848F4")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xA849A4", Offset = "0xA849A4", VA = "0xA849A4")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xA84928", Offset = "0xA84928", VA = "0xA84928")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xA849C4", Offset = "0xA849C4", VA = "0xA849C4", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0xA84884", Offset = "0xA84884", VA = "0xA84884")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__11))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0xA84A64", Offset = "0xA84A64", VA = "0xA84A64")]
		public CalibratePlayerHeight()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Define Center of Mass")]
		[Tooltip("Local coordinates to use as center of mass if 'CenterOfMassTransform' is not specified.")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use this Transform's local position for the center of mass if specified.")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debug Options")]
		[Tooltip("If true a red sphere will in the editor show where the center of mass will be positioned")]
		public bool ShowGizmo;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xA84B98", Offset = "0xA84B98", VA = "0xA84B98")]
		private void Start()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xA84C04", Offset = "0xA84C04", VA = "0xA84C04", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xA84CB4", Offset = "0xA84CB4", VA = "0xA84CB4", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xA84D3C", Offset = "0xA84D3C", VA = "0xA84D3C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xA84E68", Offset = "0xA84E68", VA = "0xA84E68")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xA84ED0", Offset = "0xA84ED0", VA = "0xA84ED0")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xA85060", Offset = "0xA85060", VA = "0xA85060")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x20002FA")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x170001D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001045")]
				[Address(RVA = "0xA85640", Offset = "0xA85640", VA = "0xA85640", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001047")]
				[Address(RVA = "0xA85688", Offset = "0xA85688", VA = "0xA85688", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0xA85100", Offset = "0xA85100", VA = "0xA85100")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0xA85254", Offset = "0xA85254", VA = "0xA85254", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0xA85258", Offset = "0xA85258", VA = "0xA85258", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001046")]
			[Address(RVA = "0xA85648", Offset = "0xA85648", VA = "0xA85648", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002FB")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4001134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x4001135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x170001D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600104B")]
				[Address(RVA = "0xA85754", Offset = "0xA85754", VA = "0xA85754", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600104D")]
				[Address(RVA = "0xA8579C", Offset = "0xA8579C", VA = "0xA8579C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001048")]
			[Address(RVA = "0xA851AC", Offset = "0xA851AC", VA = "0xA851AC")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001049")]
			[Address(RVA = "0xA85690", Offset = "0xA85690", VA = "0xA85690", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600104A")]
			[Address(RVA = "0xA85694", Offset = "0xA85694", VA = "0xA85694", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600104C")]
			[Address(RVA = "0xA8575C", Offset = "0xA8575C", VA = "0xA8575C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Objects within this radius will have damage and force applied to it")]
		[Header("Explosion Settings : ")]
		public float ExplosionRadius;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xA85078", Offset = "0xA85078", VA = "0xA85078", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xA85098", Offset = "0xA85098", VA = "0xA85098")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xA85128", Offset = "0xA85128", VA = "0xA85128")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xA851D4", Offset = "0xA851D4", VA = "0xA851D4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xA85238", Offset = "0xA85238", VA = "0xA85238")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x600104E")]
		[Address(RVA = "0xA857A4", Offset = "0xA857A4", VA = "0xA857A4")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002FD")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xA8580C", Offset = "0xA8580C", VA = "0xA8580C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xA85844", Offset = "0xA85844", VA = "0xA85844", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xA858AC", Offset = "0xA858AC", VA = "0xA858AC", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xA858F4", Offset = "0xA858F4", VA = "0xA858F4")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xA858FC", Offset = "0xA858FC", VA = "0xA858FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xA8594C", Offset = "0xA8594C", VA = "0xA8594C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xA85A34", Offset = "0xA85A34", VA = "0xA85A34")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xA85AF8", Offset = "0xA85AF8", VA = "0xA85AF8")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Range")]
		public float MaxRange;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("(CharacterController Player Only) How much movement speed to apply to the CharacterController to move towards the grapple")]
		[Header("CharacterController Grapple Settings")]
		public float GrappleReelForce;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("currentGrappleDistance must be greater than this to reel in")]
		public float MinReelDistance;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("(Rigidbody Player Only) How much force to apply to the player to move towards the grapple")]
		[Header("Rigidbody Grapple Settings")]
		public float GrappleForce;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Rigidbody Player Only) Type of ForceMode to use to move the player towards the grapple point. ForceMode. ForceMode.Acceleration will let you preserve momentum and Swing Around. Use lower number for Acceleration (ex : 3). ForceMode.Velocity will immediately alter your player's velocity, resulting in a smooth but linear movement. Use higher numbers (ex : 200).")]
		public ForceMode GrappleForceMode;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Raycast Layers")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Component definitions")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool grappling;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wasGrappling;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController characterController;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource audioSource;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Shown for Debug :")]
		public float currentGrappleDistance;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool validTargetFound;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool isDynamic;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool requireRelease;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool climbing;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xA85B00", Offset = "0xA85B00", VA = "0xA85B00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xA85CC0", Offset = "0xA85CC0", VA = "0xA85CC0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xA863C8", Offset = "0xA863C8", VA = "0xA863C8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xA86444", Offset = "0xA86444", VA = "0xA86444")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xA86D18", Offset = "0xA86D18", VA = "0xA86D18", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xA86D20", Offset = "0xA86D20", VA = "0xA86D20", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xA86B64", Offset = "0xA86B64", VA = "0xA86B64")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xA85D38", Offset = "0xA85D38", VA = "0xA85D38")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xA86290", Offset = "0xA86290", VA = "0xA86290")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xA86318", Offset = "0xA86318", VA = "0xA86318")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xA86DD0", Offset = "0xA86DD0", VA = "0xA86DD0")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xA8617C", Offset = "0xA8617C", VA = "0xA8617C")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xA86520", Offset = "0xA86520", VA = "0xA86520")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xA86A80", Offset = "0xA86A80", VA = "0xA86A80")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xA86F9C", Offset = "0xA86F9C", VA = "0xA86F9C")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xA86D3C", Offset = "0xA86D3C", VA = "0xA86D3C")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xA86FA8", Offset = "0xA86FA8", VA = "0xA86FA8")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Movement Speed to apply if using a CharacterController, or Force to apply if using a Rigidbody controller.")]
		public float JetForce;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Enabled while jetting")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the player will float in the air when not jetting. (Works for Rigidbody player only)")]
		public bool DisableGravityWhileHeld;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController characterController;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody playerRigid;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 moveDirection;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 addRigidForce;

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xA86FC4", Offset = "0xA86FC4", VA = "0xA86FC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xA87158", Offset = "0xA87158", VA = "0xA87158", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xA87560", Offset = "0xA87560", VA = "0xA87560")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xA8769C", Offset = "0xA8769C", VA = "0xA8769C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xA876B0", Offset = "0xA876B0", VA = "0xA876B0")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xA87744", Offset = "0xA87744", VA = "0xA87744", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xA8719C", Offset = "0xA8719C", VA = "0xA8719C")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xA87458", Offset = "0xA87458", VA = "0xA87458")]
		private void stopJet()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xA87770", Offset = "0xA87770", VA = "0xA87770", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xA8778C", Offset = "0xA8778C", VA = "0xA8778C")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class HandModelSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int HandModelId;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandModelSelector hms;

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xA877A4", Offset = "0xA877A4", VA = "0xA877A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xA878B8", Offset = "0xA878B8", VA = "0xA878B8")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xA8797C", Offset = "0xA8797C", VA = "0xA8797C")]
		public HandModelSwitcher()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xA8798C", Offset = "0xA8798C", VA = "0xA8798C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xA87BF0", Offset = "0xA87BF0", VA = "0xA87BF0")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xA87D08", Offset = "0xA87D08", VA = "0xA87D08")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xA87FC8", Offset = "0xA87FC8", VA = "0xA87FC8")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xA882F4", Offset = "0xA882F4", VA = "0xA882F4")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xA8837C", Offset = "0xA8837C", VA = "0xA8837C")]
		private void Start()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xA883CC", Offset = "0xA883CC", VA = "0xA883CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xA886F0", Offset = "0xA886F0", VA = "0xA886F0")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xA88708", Offset = "0xA88708", VA = "0xA88708")]
		private void Start()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xA887BC", Offset = "0xA887BC", VA = "0xA887BC")]
		private void Update()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xA88D3C", Offset = "0xA88D3C", VA = "0xA88D3C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xA889AC", Offset = "0xA889AC", VA = "0xA889AC")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xA88D58", Offset = "0xA88D58", VA = "0xA88D58")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xA88E80", Offset = "0xA88E80", VA = "0xA88E80")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xA88E94", Offset = "0xA88E94", VA = "0xA88E94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xA88EE4", Offset = "0xA88EE4", VA = "0xA88EE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xA89194", Offset = "0xA89194", VA = "0xA89194")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x2000307")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x170001D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001090")]
				[Address(RVA = "0xA89CFC", Offset = "0xA89CFC", VA = "0xA89CFC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001092")]
				[Address(RVA = "0xA89D44", Offset = "0xA89D44", VA = "0xA89D44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600108D")]
			[Address(RVA = "0xA89294", Offset = "0xA89294", VA = "0xA89294")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600108E")]
			[Address(RVA = "0xA89A00", Offset = "0xA89A00", VA = "0xA89A00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600108F")]
			[Address(RVA = "0xA89A04", Offset = "0xA89A04", VA = "0xA89A04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001091")]
			[Address(RVA = "0xA89D04", Offset = "0xA89D04", VA = "0xA89D04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xA891B8", Offset = "0xA891B8", VA = "0xA891B8", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xA89264", Offset = "0xA89264", VA = "0xA89264", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xA891FC", Offset = "0xA891FC", VA = "0xA891FC")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__18))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xA892BC", Offset = "0xA892BC", VA = "0xA892BC")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xA89430", Offset = "0xA89430", VA = "0xA89430")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xA89910", Offset = "0xA89910", VA = "0xA89910")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xA899C8", Offset = "0xA899C8", VA = "0xA899C8")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xA89D4C", Offset = "0xA89D4C", VA = "0xA89D4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xA89DAC", Offset = "0xA89DAC", VA = "0xA89DAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xA8A228", Offset = "0xA8A228", VA = "0xA8A228")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xA89E64", Offset = "0xA89E64", VA = "0xA89E64")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xA8A254", Offset = "0xA8A254", VA = "0xA8A254")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xA8A260", Offset = "0xA8A260", VA = "0xA8A260")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If set to ParentToPlatform the CharacterController will be parented to any MovingPlatform object below it each frame. If set to PositionDifference the movement will be read from the PositionDifference property of the MoveToWaypoint object below it. ")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xA8A280", Offset = "0xA8A280", VA = "0xA8A280")]
		protected void Update()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xA8A3C8", Offset = "0xA8A3C8", VA = "0xA8A3C8")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x40011BC")]
		ParentToPlatform,
		[Token(Token = "0x40011BD")]
		PositionDifference
	}
	[Token(Token = "0x200030B")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xA8A3D0", Offset = "0xA8A3D0", VA = "0xA8A3D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xA8A608", Offset = "0xA8A608", VA = "0xA8A608")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xA8A61C", Offset = "0xA8A61C", VA = "0xA8A61C")]
		private void Start()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xA8A628", Offset = "0xA8A628", VA = "0xA8A628")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xA8A8D4", Offset = "0xA8A8D4", VA = "0xA8A8D4")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xA8A8DC", Offset = "0xA8A8DC", VA = "0xA8A8DC")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xA8A8E4", Offset = "0xA8A8E4", VA = "0xA8A8E4")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xA8A8EC", Offset = "0xA8A8EC", VA = "0xA8A8EC")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x200030E")]
		[CompilerGenerated]
		private sealed class <FadeThenLoadScene>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x170001D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010A9")]
				[Address(RVA = "0xA8AC24", Offset = "0xA8AC24", VA = "0xA8AC24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010AB")]
				[Address(RVA = "0xA8AC6C", Offset = "0xA8AC6C", VA = "0xA8AC6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010A6")]
			[Address(RVA = "0xA8AA00", Offset = "0xA8AA00", VA = "0xA8AA00")]
			[DebuggerHidden]
			public <FadeThenLoadScene>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60010A7")]
			[Address(RVA = "0xA8AA90", Offset = "0xA8AA90", VA = "0xA8AA90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010A8")]
			[Address(RVA = "0xA8AA94", Offset = "0xA8AA94", VA = "0xA8AA94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010AA")]
			[Address(RVA = "0xA8AC2C", Offset = "0xA8AC2C", VA = "0xA8AC2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity 'LoadSceneMode' method of loading the scene (In most cases should be 'Single'). ")]
		public LoadSceneMode loadSceneMode;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the ScreenFader component will fade the screen to black before loading a level.")]
		public bool UseSceenFader;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Wait this long in seconds before attempting to load the scene. Useful if you need to fade the screen out before attempting to load the level.")]
		public float ScreenFadeTime;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScreenFader sf;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _loadSceneName;

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xA8A8FC", Offset = "0xA8A8FC", VA = "0xA8A8FC")]
		public void LoadScene(string SceneName)
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xA8A998", Offset = "0xA8A998", VA = "0xA8A998")]
		[IteratorStateMachine(typeof(<FadeThenLoadScene>d__6))]
		public IEnumerator FadeThenLoadScene()
		{
			return null;
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xA8AA28", Offset = "0xA8AA28", VA = "0xA8AA28")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class SlidingDoorMover : MonoBehaviour
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DoorSpeed;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float OpenXValue;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float targetXPosition;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float smoothedPosition;

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xA8AC74", Offset = "0xA8AC74", VA = "0xA8AC74")]
		private void Update()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xA8ACE8", Offset = "0xA8ACE8", VA = "0xA8ACE8")]
		public void SetTargetPosition(float targetValue)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xA8ACF8", Offset = "0xA8ACF8", VA = "0xA8ACF8")]
		public SlidingDoorMover()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x2000311")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x170001DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010BA")]
				[Address(RVA = "0xA8B28C", Offset = "0xA8B28C", VA = "0xA8B28C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010BC")]
				[Address(RVA = "0xA8B2D4", Offset = "0xA8B2D4", VA = "0xA8B2D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010B7")]
			[Address(RVA = "0xA8B0E4", Offset = "0xA8B0E4", VA = "0xA8B0E4")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60010B8")]
			[Address(RVA = "0xA8B128", Offset = "0xA8B128", VA = "0xA8B128", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xA8B12C", Offset = "0xA8B12C", VA = "0xA8B12C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xA8B294", Offset = "0xA8B294", VA = "0xA8B294", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input Action used to initiate slow time")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("If true, will check for input in Update to slow down time. If false you'll need to call SlowTime() / ResumeTime() manually from script")]
		public bool CheckInput;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _slowingTime;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool routineRunning;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x170001DA")]
		public bool TimeSlowing
		{
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0xA8AD0C", Offset = "0xA8AD0C", VA = "0xA8AD0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xA8AD14", Offset = "0xA8AD14", VA = "0xA8AD14")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xA8ADA0", Offset = "0xA8ADA0", VA = "0xA8ADA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xA8AF88", Offset = "0xA8AF88", VA = "0xA8AF88", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xA8ADE8", Offset = "0xA8ADE8", VA = "0xA8ADE8")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xA8AF30", Offset = "0xA8AF30", VA = "0xA8AF30")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xA8B07C", Offset = "0xA8B07C", VA = "0xA8B07C")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__20))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xA8B10C", Offset = "0xA8B10C", VA = "0xA8B10C")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class ToggleActiveOnInputAction : MonoBehaviour
	{
		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputAction;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToggleObject;

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xA8B2DC", Offset = "0xA8B2DC", VA = "0xA8B2DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xA8B37C", Offset = "0xA8B37C", VA = "0xA8B37C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xA8B41C", Offset = "0xA8B41C", VA = "0xA8B41C")]
		public void ToggleActive(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xA8B4B4", Offset = "0xA8B4B4", VA = "0xA8B4B4")]
		public ToggleActiveOnInputAction()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x2000314")]
		[CompilerGenerated]
		private sealed class <crankEngine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x170001DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010D9")]
				[Address(RVA = "0x9CF6D8", Offset = "0x9CF6D8", VA = "0x9CF6D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010DB")]
				[Address(RVA = "0x9CF720", Offset = "0x9CF720", VA = "0x9CF720", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x9CF4BC", Offset = "0x9CF4BC", VA = "0x9CF4BC")]
			[DebuggerHidden]
			public <crankEngine>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60010D7")]
			[Address(RVA = "0x9CF4E4", Offset = "0x9CF4E4", VA = "0x9CF4E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x9CF4E8", Offset = "0x9CF4E8", VA = "0x9CF4E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010DA")]
			[Address(RVA = "0x9CF6E0", Offset = "0x9CF6E0", VA = "0x9CF6E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Engine Properties")]
		public float MotorTorque;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
		[Header("Steering Grabbable")]
		public bool CheckTriggerInput;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Is the Engine on and ready for input. If false, engine will need to be started first.")]
		[Header("Engine Status")]
		public bool EngineOn;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long it takes to start the engine")]
		public float CrankTime;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Speedometer")]
		[Tooltip("Output the current speed to this label if specified")]
		public Text SpeedLabel;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio Setup")]
		public AudioSource EngineAudio;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Sound to play / loop when EngineOn = true. Pitch will be altered according to speed.")]
		public AudioClip IdleSound;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If specified this clip will play before the engine is turned on. Clip to play when starting the Engine.")]
		public AudioClip CrankSound;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip CollisionSound;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Wheel Configuration")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initialPosition;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool wasHoldingSteering;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isHoldingSteering;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool crankingEngine;

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xA8B4BC", Offset = "0xA8B4BC", VA = "0xA8B4BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xA8B530", Offset = "0xA8B530", VA = "0xA8B530")]
		private void Update()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xA8B69C", Offset = "0xA8B69C", VA = "0xA8B69C", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xA8B6D8", Offset = "0xA8B6D8", VA = "0xA8B6D8")]
		[IteratorStateMachine(typeof(<crankEngine>d__24))]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xA8B740", Offset = "0xA8B740", VA = "0xA8B740", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xA8B79C", Offset = "0xA8B79C", VA = "0xA8B79C", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xA8B858", Offset = "0xA8B858", VA = "0xA8B858")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xA8B9F0", Offset = "0xA8B9F0", VA = "0xA8B9F0", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xA8BAF8", Offset = "0xA8BAF8", VA = "0xA8BAF8", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xA8BB00", Offset = "0xA8BB00", VA = "0xA8BB00", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xA8BB0C", Offset = "0xA8BB0C", VA = "0xA8BB0C", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xA8BB14", Offset = "0xA8BB14", VA = "0xA8BB14", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xA8BB20", Offset = "0xA8BB20", VA = "0xA8BB20", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xA8BB28", Offset = "0xA8BB28", VA = "0xA8BB28", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xA8BB34", Offset = "0xA8BB34", VA = "0xA8BB34", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xA8BB3C", Offset = "0xA8BB3C", VA = "0xA8BB3C", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xA8BB48", Offset = "0xA8BB48", VA = "0xA8BB48", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xA8BC2C", Offset = "0xA8BC2C", VA = "0xA8BC2C", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xA8BCE0", Offset = "0xA8BCE0", VA = "0xA8BCE0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xA8B910", Offset = "0xA8B910", VA = "0xA8B910")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xA8BE04", Offset = "0xA8BE04", VA = "0xA8BE04")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000315")]
	public class WheelObject
	{
		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x9CF728", Offset = "0x9CF728", VA = "0x9CF728")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Use Emulator if true and HMDIsActive is false")]
		[Header("Enable / Disable : ")]
		public bool EmulatorEnabled;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Set to false if you want to use in standalone builds as well as the editor")]
		public bool EditorOnly;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the game window must have focus for the emulator to be active")]
		public bool RequireGameFocus;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Action set used specifically to mimic or supplement a vr setup")]
		[SerializeField]
		[Header("Input : ")]
		public InputActionAsset EmulatorActionSet;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Will set the PlayerTeleport component's ForceStraightArrow = true while the emulator is active.")]
		[Header("Player Teleportation")]
		public bool ForceStraightTeleportRotation;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Header("Move Player Up / Down")]
		[Tooltip("If true, move the player eye offset up / down whenever PlayerUpAction / PlayerDownAction is called.")]
		public bool AllowUpDownControls;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Unity Input Action used to move the player up")]
		public InputActionReference PlayerUpAction;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Input Action used to move the player down")]
		public InputActionReference PlayerDownAction;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Minimum height in meters the player can shrink to when using the PlayerDownAction")]
		public float MinPlayerHeight;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Maximum height in meters the player can grow to when using the PlayerUpAction")]
		public float MaxPlayerHeight;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Head Look")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference LockCameraAction;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference CameraLookAction;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityX;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityY;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MinimumCameraY;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MaximumCameraY;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Controller Emulation")]
		[Tooltip("Unity Input Action used to mimic holding the Left Grip")]
		public InputActionReference LeftGripAction;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to mimic holding the Left Trigger")]
		public InputActionReference LeftTriggerAction;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference LeftThumbNearAction;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightGripAction;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightTriggerAction;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference RightThumbNearAction;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float mouseRotationX;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float mouseRotationY;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform mainCameraTransform;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftControllerTranform;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightControllerTranform;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform leftHandAnchor;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform rightHandAnchor;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController player;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PlayerTeleport playerTeleport;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool didFirstActivate;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabber grabberLeft;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Grabber grabberRight;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool priorStraightSetting;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float prevVal;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isQuitting;

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x9CF730", Offset = "0x9CF730", VA = "0x9CF730")]
		private void Start()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x9CFADC", Offset = "0x9CFADC", VA = "0x9CFADC")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x9CFB68", Offset = "0x9CFB68", VA = "0x9CFB68")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x9CFB8C", Offset = "0x9CFB8C", VA = "0x9CFB8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x9D0138", Offset = "0x9D0138", VA = "0x9D0138", Slot = "4")]
		public virtual bool HasRequiredFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x9CFC84", Offset = "0x9CFC84", VA = "0x9CFC84")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x9D0158", Offset = "0x9D0158", VA = "0x9D0158")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x9CFEDC", Offset = "0x9CFEDC", VA = "0x9CFEDC")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x9D0A34", Offset = "0x9D0A34", VA = "0x9D0A34")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x9D0A38", Offset = "0x9D0A38", VA = "0x9D0A38", Slot = "5")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x9D07DC", Offset = "0x9D07DC", VA = "0x9D07DC")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x9D0B54", Offset = "0x9D0B54", VA = "0x9D0B54", Slot = "6")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x9D0CC0", Offset = "0x9D0CC0", VA = "0x9D0CC0", Slot = "7")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x9D0DD4", Offset = "0x9D0DD4", VA = "0x9D0DD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x9D12D0", Offset = "0x9D12D0", VA = "0x9D12D0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x9D17E4", Offset = "0x9D17E4", VA = "0x9D17E4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x9D17F0", Offset = "0x9D17F0", VA = "0x9D17F0")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x9D1848", Offset = "0x9D1848", VA = "0x9D1848")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x9D19A0", Offset = "0x9D19A0", VA = "0x9D19A0")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x9D19A8", Offset = "0x9D19A8", VA = "0x9D19A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x9D1A6C", Offset = "0x9D1A6C", VA = "0x9D1A6C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x9D1B34", Offset = "0x9D1B34", VA = "0x9D1B34")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x9D1C4C", Offset = "0x9D1C4C", VA = "0x9D1C4C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x9D1F84", Offset = "0x9D1F84", VA = "0x9D1F84", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x9D1FBC", Offset = "0x9D1FBC", VA = "0x9D1FBC", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x9D1CA0", Offset = "0x9D1CA0", VA = "0x9D1CA0")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x9D1FF4", Offset = "0x9D1FF4", VA = "0x9D1FF4")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x200031A")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400123A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400123B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x170001DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001103")]
				[Address(RVA = "0x9D293C", Offset = "0x9D293C", VA = "0x9D293C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001105")]
				[Address(RVA = "0x9D2984", Offset = "0x9D2984", VA = "0x9D2984", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001100")]
			[Address(RVA = "0x9D2110", Offset = "0x9D2110", VA = "0x9D2110")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001101")]
			[Address(RVA = "0x9D2848", Offset = "0x9D2848", VA = "0x9D2848", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001102")]
			[Address(RVA = "0x9D284C", Offset = "0x9D284C", VA = "0x9D284C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001104")]
			[Address(RVA = "0x9D2944", Offset = "0x9D2944", VA = "0x9D2944", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Shown for Debug :")]
		[Tooltip("The model of controller found")]
		[SerializeField]
		private string thisControllerModel;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x9D2018", Offset = "0x9D2018", VA = "0x9D2018")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x9D20A8", Offset = "0x9D20A8", VA = "0x9D20A8")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x9D2138", Offset = "0x9D2138", VA = "0x9D2138", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x9D2248", Offset = "0x9D2248", VA = "0x9D2248", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x9D2348", Offset = "0x9D2348", VA = "0x9D2348", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x9D2778", Offset = "0x9D2778", VA = "0x9D2778", Slot = "7")]
		public virtual ControllerOffset GetOpenXROffset()
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x9D2814", Offset = "0x9D2814", VA = "0x9D2814")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x200031B")]
	public class ControllerOffset
	{
		[Token(Token = "0x170001E1")]
		public string ControllerName
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0x9D298C", Offset = "0x9D298C", VA = "0x9D298C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x9D2994", Offset = "0x9D2994", VA = "0x9D2994")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x9D299C", Offset = "0x9D299C", VA = "0x9D299C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x9D29A8", Offset = "0x9D29A8", VA = "0x9D29A8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x600110A")]
			[Address(RVA = "0x9D29B4", Offset = "0x9D29B4", VA = "0x9D29B4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600110B")]
			[Address(RVA = "0x9D29C0", Offset = "0x9D29C0", VA = "0x9D29C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x600110C")]
			[Address(RVA = "0x9D29CC", Offset = "0x9D29CC", VA = "0x9D29CC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600110D")]
			[Address(RVA = "0x9D29D8", Offset = "0x9D29D8", VA = "0x9D29D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x600110E")]
			[Address(RVA = "0x9D29E4", Offset = "0x9D29E4", VA = "0x9D29E4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600110F")]
			[Address(RVA = "0x9D29F0", Offset = "0x9D29F0", VA = "0x9D29F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x9D2770", Offset = "0x9D2770", VA = "0x9D2770")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x200031C")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x9D29FC", Offset = "0x9D29FC", VA = "0x9D29FC")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x9D2CAC", Offset = "0x9D2CAC", VA = "0x9D2CAC")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x9D2DCC", Offset = "0x9D2DCC", VA = "0x9D2DCC")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool handleLocked;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true the door will not respond to user input")]
		public bool DoorIsLocked;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float moveLockAmount;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float rotateAngles;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float ratio;

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x9D2DD4", Offset = "0x9D2DD4", VA = "0x9D2DD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x9D2EAC", Offset = "0x9D2EAC", VA = "0x9D2EAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x9D3620", Offset = "0x9D3620", VA = "0x9D3620")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x200031E")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x9D3640", Offset = "0x9D3640", VA = "0x9D3640")]
		private void Update()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x9D3658", Offset = "0x9D3658", VA = "0x9D3658")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x9D37E8", Offset = "0x9D37E8", VA = "0x9D37E8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x9D3968", Offset = "0x9D3968", VA = "0x9D3968")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x9D3A5C", Offset = "0x9D3A5C", VA = "0x9D3A5C")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x9D3A64", Offset = "0x9D3A64", VA = "0x9D3A64")]
		private void Start()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x9D3BC4", Offset = "0x9D3BC4", VA = "0x9D3BC4")]
		private void Update()
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x9D3EC8", Offset = "0x9D3EC8", VA = "0x9D3EC8")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x2000320")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) If specified, this HandPoser can be used when setting poses retrieved from a grabbed Grabbable.")]
		public HandPoser handPoser;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) If specified, this AutoPoser component can be used when if set on the Grabbable, or if AutoPose is set to true")]
		public AutoPoser autoPoser;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How to handle the hand when nothing is being grabbed / idle. Ex : Can use an Animator to control the hand via blending, a HandPoser to control via blend states, AutoPoser to continually auto pose while nothing is being held, or 'None' if you want to handle the idle state yourself.")]
		public HandPoserType IdlePoseType;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, the idle hand pose will be determined by the connected Valve Index Controller's finger tracking. Requires the SteamVR SDK. Make sure IdlePoseType is set to 'HandPoser'")]
		public bool UseIndexFingerTracking;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the Layer Animations")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float GripAmount;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _prevGrip;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float PointAmount;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _prevPoint;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ThumbAmount;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _prevThumb;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _thumbIsNear;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _indexIsNear;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _triggerValue;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _gripValue;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int PoseId;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputBridge input;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody rigid;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform offsetTransform;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject PreviousHeldObject;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool DoUpdateAnimationStates;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool DoUpdateHandPoser;

		[Token(Token = "0x170001E6")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x600111F")]
			[Address(RVA = "0x9D3EE0", Offset = "0x9D3EE0", VA = "0x9D3EE0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001E7")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x6001120")]
			[Address(RVA = "0x9D3FA4", Offset = "0x9D3FA4", VA = "0x9D3FA4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x9D4068", Offset = "0x9D4068", VA = "0x9D4068")]
		private void Start()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x9D438C", Offset = "0x9D438C", VA = "0x9D438C")]
		public void Update()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x9D43E0", Offset = "0x9D43E0", VA = "0x9D43E0", Slot = "4")]
		public virtual void UpdateHeldObjectState()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x9D4440", Offset = "0x9D4440", VA = "0x9D4440", Slot = "5")]
		public virtual void UpdateIdleState()
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x9D448C", Offset = "0x9D448C", VA = "0x9D448C", Slot = "6")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x9D4534", Offset = "0x9D4534", VA = "0x9D4534", Slot = "7")]
		public virtual void CheckForGrabChange()
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x9D4698", Offset = "0x9D4698", VA = "0x9D4698", Slot = "8")]
		public virtual void OnGrabChange(GameObject newlyHeldObject)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x9D4830", Offset = "0x9D4830", VA = "0x9D4830", Slot = "9")]
		public virtual void OnGrabDrop()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x9D48B4", Offset = "0x9D48B4", VA = "0x9D48B4", Slot = "10")]
		public virtual void SetHandAnimator()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x9D4964", Offset = "0x9D4964", VA = "0x9D4964", Slot = "11")]
		public virtual void UpdateFromInputs()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x9D4B3C", Offset = "0x9D4B3C", VA = "0x9D4B3C", Slot = "12")]
		public virtual void UpdateAnimimationStates()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x9D4F3C", Offset = "0x9D4F3C", VA = "0x9D4F3C")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x9D4F64", Offset = "0x9D4F64", VA = "0x9D4F64", Slot = "13")]
		public virtual bool IsAnimatorGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x9D504C", Offset = "0x9D504C", VA = "0x9D504C", Slot = "14")]
		public virtual void UpdateHandPoser()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x9D5268", Offset = "0x9D5268", VA = "0x9D5268", Slot = "15")]
		public virtual bool IsHandPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x9D5350", Offset = "0x9D5350", VA = "0x9D5350", Slot = "16")]
		public virtual void UpdateHandPoserIdleState()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x9D54F8", Offset = "0x9D54F8", VA = "0x9D54F8", Slot = "17")]
		public virtual void UpdateIndexFingerBlending()
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x9D54FC", Offset = "0x9D54FC", VA = "0x9D54FC", Slot = "18")]
		public virtual bool SetupPoseBlender()
		{
			return default(bool);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x9D5718", Offset = "0x9D5718", VA = "0x9D5718", Slot = "19")]
		public virtual HandPose GetDefaultOpenPose()
		{
			return null;
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x9D5770", Offset = "0x9D5770", VA = "0x9D5770", Slot = "20")]
		public virtual HandPose GetDefaultClosedPose()
		{
			return null;
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x9D57C8", Offset = "0x9D57C8", VA = "0x9D57C8", Slot = "21")]
		public virtual void EnableHandPoser()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x9D584C", Offset = "0x9D584C", VA = "0x9D584C", Slot = "22")]
		public virtual void EnableAutoPoser(bool continuous)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x9D59E0", Offset = "0x9D59E0", VA = "0x9D59E0", Slot = "23")]
		public virtual void DisablePoseBlender()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x9D5A58", Offset = "0x9D5A58", VA = "0x9D5A58", Slot = "24")]
		public virtual void DisableAutoPoser()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x9D5AD0", Offset = "0x9D5AD0", VA = "0x9D5AD0", Slot = "25")]
		public virtual bool IsAutoPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x9D5BBC", Offset = "0x9D5BBC", VA = "0x9D5BBC", Slot = "26")]
		public virtual void EnableHandAnimator()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x9D5C84", Offset = "0x9D5C84", VA = "0x9D5C84", Slot = "27")]
		public virtual void DisableHandAnimator()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x9D5D20", Offset = "0x9D5D20", VA = "0x9D5D20", Slot = "28")]
		public virtual void OnGrabberGrabbed(Grabbable grabbed)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x9D5E0C", Offset = "0x9D5E0C", VA = "0x9D5E0C", Slot = "29")]
		public virtual void UpdateCurrentHandPose()
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x9D5EA8", Offset = "0x9D5EA8", VA = "0x9D5EA8", Slot = "30")]
		public virtual void OnGrabberReleased(Grabbable released)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x9D5EB4", Offset = "0x9D5EB4", VA = "0x9D5EB4")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x2000321")]
	public enum HandPoserType
	{
		[Token(Token = "0x4001284")]
		HandPoser,
		[Token(Token = "0x4001285")]
		Animator,
		[Token(Token = "0x4001286")]
		AutoPoser,
		[Token(Token = "0x4001287")]
		None
	}
	[Token(Token = "0x2000322")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x9D5ED8", Offset = "0x9D5ED8", VA = "0x9D5ED8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x9D5F08", Offset = "0x9D5F08", VA = "0x9D5F08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x9D6194", Offset = "0x9D6194", VA = "0x9D6194")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x2000324")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x170001E8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600114B")]
				[Address(RVA = "0x9D6824", Offset = "0x9D6824", VA = "0x9D6824", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600114D")]
				[Address(RVA = "0x9D686C", Offset = "0x9D686C", VA = "0x9D686C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001148")]
			[Address(RVA = "0x9D6740", Offset = "0x9D6740", VA = "0x9D6740")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001149")]
			[Address(RVA = "0x9D6770", Offset = "0x9D6770", VA = "0x9D6770", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600114A")]
			[Address(RVA = "0x9D6774", Offset = "0x9D6774", VA = "0x9D6774", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600114C")]
			[Address(RVA = "0x9D682C", Offset = "0x9D682C", VA = "0x9D682C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x9D61B0", Offset = "0x9D61B0", VA = "0x9D61B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x9D6328", Offset = "0x9D6328", VA = "0x9D6328")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x9D670C", Offset = "0x9D670C", VA = "0x9D670C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x9D66A4", Offset = "0x9D66A4", VA = "0x9D66A4")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x9D6768", Offset = "0x9D6768", VA = "0x9D6768")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x2000326")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x40012B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x170001EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001169")]
				[Address(RVA = "0x9D8940", Offset = "0x9D8940", VA = "0x9D8940", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600116B")]
				[Address(RVA = "0x9D8988", Offset = "0x9D8988", VA = "0x9D8988", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001166")]
			[Address(RVA = "0x9D7C20", Offset = "0x9D7C20", VA = "0x9D7C20")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001167")]
			[Address(RVA = "0x9D8880", Offset = "0x9D8880", VA = "0x9D8880", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001168")]
			[Address(RVA = "0x9D8884", Offset = "0x9D8884", VA = "0x9D8884", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600116A")]
			[Address(RVA = "0x9D8948", Offset = "0x9D8948", VA = "0x9D8948", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable remoteIgnoredGrabbable;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _priorParent;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x170001EA")]
		public bool HoldingObject
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x9D6874", Offset = "0x9D6874", VA = "0x9D6874")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x9D6918", Offset = "0x9D6918", VA = "0x9D6918")]
		private void Start()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x9D6E6C", Offset = "0x9D6E6C", VA = "0x9D6E6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x9D7634", Offset = "0x9D7634", VA = "0x9D7634")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x9D6C08", Offset = "0x9D6C08", VA = "0x9D6C08")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x9D738C", Offset = "0x9D738C", VA = "0x9D738C")]
		private void checkRemoteCollision()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x9D71C0", Offset = "0x9D71C0", VA = "0x9D71C0")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x9D7508", Offset = "0x9D7508", VA = "0x9D7508")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x9D6FF4", Offset = "0x9D6FF4", VA = "0x9D6FF4")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x9D7BB8", Offset = "0x9D7BB8", VA = "0x9D7BB8")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__31))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x9D7AA0", Offset = "0x9D7AA0", VA = "0x9D7AA0")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x9D7C48", Offset = "0x9D7C48", VA = "0x9D7C48")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x9D7D58", Offset = "0x9D7D58", VA = "0x9D7D58")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x9D7E68", Offset = "0x9D7E68", VA = "0x9D7E68", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x9D7E80", Offset = "0x9D7E80", VA = "0x9D7E80", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x9D7EC4", Offset = "0x9D7EC4", VA = "0x9D7EC4", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x9D7EEC", Offset = "0x9D7EEC", VA = "0x9D7EEC", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x9D7F84", Offset = "0x9D7F84", VA = "0x9D7F84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x9D8218", Offset = "0x9D8218", VA = "0x9D8218", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x9D8264", Offset = "0x9D8264", VA = "0x9D8264", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x9D8390", Offset = "0x9D8390", VA = "0x9D8390")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x9D8648", Offset = "0x9D8648", VA = "0x9D8648")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x9D87E0", Offset = "0x9D87E0", VA = "0x9D87E0")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x9D87E8", Offset = "0x9D87E8", VA = "0x9D87E8")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x9D8990", Offset = "0x9D8990", VA = "0x9D8990")]
		private void Update()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x9D8A84", Offset = "0x9D8A84", VA = "0x9D8A84")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x9D8A98", Offset = "0x9D8A98", VA = "0x9D8A98")]
		private void Start()
		{
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x9D8C6C", Offset = "0x9D8C6C", VA = "0x9D8C6C")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x6001170")]
		[Address(RVA = "0x9D8C74", Offset = "0x9D8C74", VA = "0x9D8C74")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x200032A")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x9D8C7C", Offset = "0x9D8C7C", VA = "0x9D8C7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x9D8CF0", Offset = "0x9D8CF0", VA = "0x9D8CF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x9D8DDC", Offset = "0x9D8DDC", VA = "0x9D8DDC")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x9D8F4C", Offset = "0x9D8F4C", VA = "0x9D8F4C")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x9D8F64", Offset = "0x9D8F64", VA = "0x9D8F64")]
		private void Start()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x9D8FD4", Offset = "0x9D8FD4", VA = "0x9D8FD4")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x9D91B4", Offset = "0x9D91B4", VA = "0x9D91B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x9D91B8", Offset = "0x9D91B8", VA = "0x9D91B8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x9D91BC", Offset = "0x9D91BC", VA = "0x9D91BC")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x9D91D4", Offset = "0x9D91D4", VA = "0x9D91D4")]
		private void Start()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x9D939C", Offset = "0x9D939C", VA = "0x9D939C")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, the ring helper will only be valid if this Grabpoint is the nearest on the the grabbable object")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Default Color of the ring")]
		public Color RingColor;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Color to use if selected by primary controller")]
		public Color RingSelectedColor;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Color to use if selected by secondary controller")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How fast to lerp the opacity if being hidden / shown")]
		public float RingFadeSpeed;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x9D93A4", Offset = "0x9D93A4", VA = "0x9D93A4")]
		private void Start()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x9D9570", Offset = "0x9D9570", VA = "0x9D9570")]
		private void Update()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x9D9B58", Offset = "0x9D9B58", VA = "0x9D9B58", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x9D9C34", Offset = "0x9D9C34", VA = "0x9D9C34", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x9D9A64", Offset = "0x9D9A64", VA = "0x9D9A64")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x9D9D70", Offset = "0x9D9D70", VA = "0x9D9D70")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x9D9DA8", Offset = "0x9D9DA8", VA = "0x9D9DA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x9D9DFC", Offset = "0x9D9DFC", VA = "0x9D9DFC")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x9D9EEC", Offset = "0x9D9EEC", VA = "0x9D9EEC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x9D9F14", Offset = "0x9D9F14", VA = "0x9D9F14")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x9D9F24", Offset = "0x9D9F24", VA = "0x9D9F24")]
		private void Start()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x9DA5D8", Offset = "0x9DA5D8", VA = "0x9DA5D8")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Where the player will be teleported to")]
		public Transform DestinationTransform;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snap player to this rotation?")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Called when a player uses the teleporter to enter this destination.")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x9DA5E0", Offset = "0x9DA5E0", VA = "0x9DA5E0")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x9DA5E8", Offset = "0x9DA5E8", VA = "0x9DA5E8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x9DA71C", Offset = "0x9DA71C", VA = "0x9DA71C")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x600118B")]
		[Address(RVA = "0x9DA724", Offset = "0x9DA724", VA = "0x9DA724")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class VRIFGrabpointUpdater : MonoBehaviour
	{
		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Right Hand Model")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightPosition;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightPosition;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightRotation;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightRotation;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Left Hand Model")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftPosition;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftPosition;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftRotation;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftRotation;

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x9DA72C", Offset = "0x9DA72C", VA = "0x9DA72C")]
		private void Start()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x9DA730", Offset = "0x9DA730", VA = "0x9DA730")]
		public void ApplyGrabPointUpdate()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x9DAA9C", Offset = "0x9DAA9C", VA = "0x9DAA9C")]
		public VRIFGrabpointUpdater()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class UIButtonCollider : MonoBehaviour
	{
		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hold Button Down Option")]
		[Tooltip("If true, this button can be held down and the button's click event will be fired repeatedly. If false, the button's click event will only be called once per trigger enter")]
		public bool CanBeHeldDown;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of time that must first pass before continuing to fire the button's click event. This value is used once. The 'HoldDownDelay' value is then used for each subsequent delay. ")]
		public float InitialHoldDownDelay;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time that must pass in-between click events while the button is held down. ")]
		public float HoldDownDelay;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, this transform will be animated down on the Z axis by the PressedInZValue amount.")]
		[Header("Animate Key")]
		public bool AnimateKey;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If AnimateKey is true, this transform will be animated down on the Z axis by this amount.")]
		public float PressedInZValue;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to Lerp the key in")]
		public float PressInSpeed;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button uiButton;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int itemsInTrigger;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool readyForDownEvent;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clickCount;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float lastPressTime;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected BoxCollider boxCollider;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float colliderInitialCenterZ;

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x9DAAEC", Offset = "0x9DAAEC", VA = "0x9DAAEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x9DABB8", Offset = "0x9DABB8", VA = "0x9DABB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x9DB064", Offset = "0x9DB064", VA = "0x9DB064")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x9DB108", Offset = "0x9DB108", VA = "0x9DB108")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x9DB1AC", Offset = "0x9DB1AC", VA = "0x9DB1AC")]
		public UIButtonCollider()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class UICanvasGroup : MonoBehaviour
	{
		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> CanvasObjects;

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x9DB1DC", Offset = "0x9DB1DC", VA = "0x9DB1DC")]
		public void ActivateCanvas(int CanvasIndex)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x9DB2D8", Offset = "0x9DB2D8", VA = "0x9DB2D8")]
		public UICanvasGroup()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color ValidColor;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color InvalidColor;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject cursor;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject _cursor;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If true the cursor and LineRenderer will be Hidden. Otherwise it will still be show at a fixed length")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How long the line / cursor should extend if no objects are found to point at")]
		public float FixedPointerLength;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true the cursor object will scale based on how far away the pointer is from the origin. A cursor far away will have a larger cusor than one up close.")]
		public bool CursorScaling;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum scale of the Cursor object if CursorScaling is enabled")]
		public float CursorMinScale;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float CursorMaxScale;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private VRUISystem uiSystem;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PointerEventData data;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x9DB2E0", Offset = "0x9DB2E0", VA = "0x9DB2E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x9DB60C", Offset = "0x9DB60C", VA = "0x9DB60C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x9DB610", Offset = "0x9DB610", VA = "0x9DB610")]
		private void updateUITransforms()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x9DB690", Offset = "0x9DB690", VA = "0x9DB690")]
		public void Update()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x9DB69C", Offset = "0x9DB69C", VA = "0x9DB69C", Slot = "4")]
		public virtual void UpdatePointer()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x9DBC7C", Offset = "0x9DBC7C", VA = "0x9DBC7C", Slot = "5")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x9DBE2C", Offset = "0x9DBE2C", VA = "0x9DBE2C")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x2000337")]
	[RequireComponent(typeof(GraphicRaycaster))]
	[RequireComponent(typeof(Canvas))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x600119D")]
		[Address(RVA = "0x9DBE68", Offset = "0x9DBE68", VA = "0x9DBE68")]
		private void Start()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x9DBED8", Offset = "0x9DBED8", VA = "0x9DBED8")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class VRKeyboard : MonoBehaviour
	{
		[Token(Token = "0x2000339")]
		[CompilerGenerated]
		private sealed class <IncreaseInputFieldCareteRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x170001ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011AD")]
				[Address(RVA = "0x9DC7A4", Offset = "0x9DC7A4", VA = "0x9DC7A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011AF")]
				[Address(RVA = "0x9DC7EC", Offset = "0x9DC7EC", VA = "0x9DC7EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x9DC674", Offset = "0x9DC674", VA = "0x9DC674")]
			[DebuggerHidden]
			public <IncreaseInputFieldCareteRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x9DC6D4", Offset = "0x9DC6D4", VA = "0x9DC6D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x9DC6D8", Offset = "0x9DC6D8", VA = "0x9DC6D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011AE")]
			[Address(RVA = "0x9DC7AC", Offset = "0x9DC7AC", VA = "0x9DC7AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200033A")]
		[CompilerGenerated]
		private sealed class <DecreaseInputFieldCareteRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400131A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400131B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x170001EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011B3")]
				[Address(RVA = "0x9DC8C4", Offset = "0x9DC8C4", VA = "0x9DC8C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011B5")]
				[Address(RVA = "0x9DC90C", Offset = "0x9DC90C", VA = "0x9DC90C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x9DC69C", Offset = "0x9DC69C", VA = "0x9DC69C")]
			[DebuggerHidden]
			public <DecreaseInputFieldCareteRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60011B1")]
			[Address(RVA = "0x9DC7F4", Offset = "0x9DC7F4", VA = "0x9DC7F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011B2")]
			[Address(RVA = "0x9DC7F8", Offset = "0x9DC7F8", VA = "0x9DC7F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011B4")]
			[Address(RVA = "0x9DC8CC", Offset = "0x9DC8CC", VA = "0x9DC8CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField AttachedInputField;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseShift;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Sound FX")]
		public AudioClip KeyPressSound;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<VRKeyboardKey> KeyboardKeys;

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x9DBEE0", Offset = "0x9DBEE0", VA = "0x9DBEE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x9DBF5C", Offset = "0x9DBF5C", VA = "0x9DBF5C")]
		public void PressKey(string key)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x9DC040", Offset = "0x9DC040", VA = "0x9DC040")]
		public void UpdateInputField(string key)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x9DC4F0", Offset = "0x9DC4F0", VA = "0x9DC4F0", Slot = "4")]
		public virtual void PlayClickSound()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x9DC4D0", Offset = "0x9DC4D0", VA = "0x9DC4D0")]
		public void MoveCaretUp()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x9DC308", Offset = "0x9DC308", VA = "0x9DC308")]
		public void MoveCaretBack()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x9DC328", Offset = "0x9DC328", VA = "0x9DC328")]
		public void ToggleShift()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x9DC5A4", Offset = "0x9DC5A4", VA = "0x9DC5A4")]
		[IteratorStateMachine(typeof(<IncreaseInputFieldCareteRoutine>d__11))]
		private IEnumerator IncreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x9DC60C", Offset = "0x9DC60C", VA = "0x9DC60C")]
		[IteratorStateMachine(typeof(<DecreaseInputFieldCareteRoutine>d__12))]
		private IEnumerator DecreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x9DC6C4", Offset = "0x9DC6C4", VA = "0x9DC6C4")]
		public void AttachToInputField(InputField inputField)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x9DC6CC", Offset = "0x9DC6CC", VA = "0x9DC6CC")]
		public VRKeyboard()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class VRKeyboardKey : MonoBehaviour
	{
		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Button thisButton;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text thisButtonText;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRKeyboard vrKeyboard;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Keycode;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string KeycodeShift;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool UseShiftKey;

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x9DC914", Offset = "0x9DC914", VA = "0x9DC914")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x9DCA4C", Offset = "0x9DCA4C", VA = "0x9DCA4C", Slot = "4")]
		public virtual void ToggleShift()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x9DCB14", Offset = "0x9DCB14", VA = "0x9DCB14", Slot = "5")]
		public virtual void OnKeyHit()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x9DCB5C", Offset = "0x9DCB5C", VA = "0x9DCB5C", Slot = "6")]
		public virtual void OnKeyHit(string key)
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x9DCC60", Offset = "0x9DCC60", VA = "0x9DCC60")]
		public VRKeyboardKey()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class VRTextInput : MonoBehaviour
	{
		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField thisInputField;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AttachToVRKeyboard;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ActivateKeyboardOnSelect;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DeactivateKeyboardOnDeselect;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRKeyboard AttachedKeyboard;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFocused;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasFocused;

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x9DCC68", Offset = "0x9DCC68", VA = "0x9DCC68")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x9DCD34", Offset = "0x9DCD34", VA = "0x9DCD34")]
		private void Update()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x9DCDF4", Offset = "0x9DCDF4", VA = "0x9DCDF4")]
		public void OnInputSelect()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x9DCEB8", Offset = "0x9DCEB8", VA = "0x9DCEB8")]
		public void OnInputDeselect()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x9DCF74", Offset = "0x9DCF74", VA = "0x9DCF74")]
		private void Reset()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x9DD07C", Offset = "0x9DD07C", VA = "0x9DD07C")]
		public VRTextInput()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("XR Controller Options : ")]
		[Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<ControllerBinding> ControllerInputAlt;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Unity Input Action used to simulate a click or touch event")]
		public InputActionReference UIInputAction;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If true a PhysicsRaycaster component will be added to the UI camera, allowing physical objects to use IPointer events such as OnPointClick, OnPointEnter, etc.")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("If true the Right Thumbstick will send scroll events to the UI")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Shown for Debug : ")]
		public GameObject PressingObject;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject DraggingObject;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject ReleasingObject;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera cameraCaster;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject _initialPressObject;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool _lastInputDown;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool inputDown;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x170001F1")]
		public PointerEventData EventData
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x9DD08C", Offset = "0x9DD08C", VA = "0x9DD08C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x9DD094", Offset = "0x9DD094", VA = "0x9DD094")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x9DB42C", Offset = "0x9DB42C", VA = "0x9DB42C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x9DD09C", Offset = "0x9DD09C", VA = "0x9DD09C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x9DD0AC", Offset = "0x9DD0AC", VA = "0x9DD0AC", Slot = "27")]
		protected virtual void initEventSystem()
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x9DD178", Offset = "0x9DD178", VA = "0x9DD178", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x9DD180", Offset = "0x9DD180", VA = "0x9DD180")]
		private void init()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x9DD2EC", Offset = "0x9DD2EC", VA = "0x9DD2EC", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x9DD2F0", Offset = "0x9DD2F0", VA = "0x9DD2F0")]
		public void DoProcess()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x9DD6AC", Offset = "0x9DD6AC", VA = "0x9DD6AC", Slot = "28")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x9DD828", Offset = "0x9DD828", VA = "0x9DD828", Slot = "29")]
		public virtual bool CameraCasterReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x9DD8C0", Offset = "0x9DD8C0", VA = "0x9DD8C0", Slot = "30")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x9DDAD0", Offset = "0x9DDAD0", VA = "0x9DDAD0", Slot = "31")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x9DDAD4", Offset = "0x9DDAD4", VA = "0x9DDAD4", Slot = "32")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x9DDD30", Offset = "0x9DDD30", VA = "0x9DDD30", Slot = "33")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x9DDDAC", Offset = "0x9DDDAC", VA = "0x9DDDAC", Slot = "34")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x9DDDE0", Offset = "0x9DDDE0", VA = "0x9DDDE0", Slot = "35")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x9DDE00", Offset = "0x9DDE00", VA = "0x9DDE00", Slot = "36")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x9DDE08", Offset = "0x9DDE08", VA = "0x9DDE08", Slot = "37")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x9DDEDC", Offset = "0x9DDEDC", VA = "0x9DDEDC", Slot = "38")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x9DDEF0", Offset = "0x9DDEF0", VA = "0x9DDEF0", Slot = "39")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x9DDF84", Offset = "0x9DDF84", VA = "0x9DDF84", Slot = "40")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x9DE134", Offset = "0x9DE134", VA = "0x9DE134")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x9DE2B0", Offset = "0x9DE2B0", VA = "0x9DE2B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x9DE360", Offset = "0x9DE360", VA = "0x9DE360")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LogTextColor;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color WarnTextColor;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ErrTextColor;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform DebugTextHolder;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float MaxTextEntries;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string LastDebugMsg;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int lastDebugMsgCount;

		[Token(Token = "0x170001F3")]
		public static VRUtils Instance
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x9D3314", Offset = "0x9D3314", VA = "0x9D3314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x9DE368", Offset = "0x9DE368", VA = "0x9DE368")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x9DE458", Offset = "0x9DE458", VA = "0x9DE458")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x9DE9A0", Offset = "0x9DE9A0", VA = "0x9DE9A0")]
		public void Warn(string msg)
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x9DEA30", Offset = "0x9DEA30", VA = "0x9DEA30")]
		public void Error(string msg)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x9DE4E8", Offset = "0x9DE4E8", VA = "0x9DE4E8")]
		public void VRDebugLog(string msg, Color logColor)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x9DEAC0", Offset = "0x9DEAC0", VA = "0x9DEAC0")]
		public void CullDebugPanel()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x9D3468", Offset = "0x9D3468", VA = "0x9D3468")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x9DEB88", Offset = "0x9DEB88", VA = "0x9DEB88")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x9DEBCC", Offset = "0x9DEBCC", VA = "0x9DEBCC")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int CurrentPistolClips;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int CurrentRifleClips;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int CurrentShotgunShells;

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x9DEC00", Offset = "0x9DEC00", VA = "0x9DEC00")]
		private void Update()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x9DEC74", Offset = "0x9DEC74", VA = "0x9DEC74")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x9DEDB0", Offset = "0x9DEDB0", VA = "0x9DEDB0")]
		public GameObject GetAmmo()
		{
			return null;
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x9DF0D8", Offset = "0x9DF0D8", VA = "0x9DF0D8")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x9DF378", Offset = "0x9DF378", VA = "0x9DF378", Slot = "4")]
		public virtual void AddAmmo(string AmmoName)
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x9DF454", Offset = "0x9DF454", VA = "0x9DF454")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x9DF46C", Offset = "0x9DF46C", VA = "0x9DF46C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x9DF550", Offset = "0x9DF550", VA = "0x9DF550")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x9DF558", Offset = "0x9DF558", VA = "0x9DF558")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x9DF560", Offset = "0x9DF560", VA = "0x9DF560")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x9DF7A8", Offset = "0x9DF7A8", VA = "0x9DF7A8")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x2000345")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x4001363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x170001F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011FF")]
				[Address(RVA = "0x9E0B38", Offset = "0x9E0B38", VA = "0x9E0B38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001201")]
				[Address(RVA = "0x9E0B80", Offset = "0x9E0B80", VA = "0x9E0B80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011FC")]
			[Address(RVA = "0x9E0650", Offset = "0x9E0650", VA = "0x9E0650")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60011FD")]
			[Address(RVA = "0x9E08CC", Offset = "0x9E08CC", VA = "0x9E08CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011FE")]
			[Address(RVA = "0x9E08D0", Offset = "0x9E08D0", VA = "0x9E08D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001200")]
			[Address(RVA = "0x9E0B40", Offset = "0x9E0B40", VA = "0x9E0B40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Clip transform name must contain this to be considered valid")]
		public string AcceptableMagazineName;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x9DF7F8", Offset = "0x9DF7F8", VA = "0x9DF7F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x9DF950", Offset = "0x9DF950", VA = "0x9DF950")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x9DFF38", Offset = "0x9DFF38", VA = "0x9DFF38")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x9DFEE8", Offset = "0x9DFEE8", VA = "0x9DFEE8")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x9DFD24", Offset = "0x9DFD24", VA = "0x9DFD24")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x9DFF68", Offset = "0x9DFF68", VA = "0x9DFF68")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x9E0218", Offset = "0x9E0218", VA = "0x9E0218")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x9E0598", Offset = "0x9E0598", VA = "0x9E0598")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x9E05DC", Offset = "0x9E05DC", VA = "0x9E05DC")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x9E04CC", Offset = "0x9E04CC", VA = "0x9E04CC")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x9E0678", Offset = "0x9E0678", VA = "0x9E0678", Slot = "4")]
		public virtual void AttachGrabbableMagazine(Grabbable mag, Collider magCollider)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x9E074C", Offset = "0x9E074C", VA = "0x9E074C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x9E0868", Offset = "0x9E0868", VA = "0x9E0868")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x2000347")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x170001F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600120C")]
				[Address(RVA = "0x9E14AC", Offset = "0x9E14AC", VA = "0x9E14AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600120E")]
				[Address(RVA = "0x9E14F4", Offset = "0x9E14F4", VA = "0x9E14F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001209")]
			[Address(RVA = "0x9E13AC", Offset = "0x9E13AC", VA = "0x9E13AC")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600120A")]
			[Address(RVA = "0x9E13D4", Offset = "0x9E13D4", VA = "0x9E13D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600120B")]
			[Address(RVA = "0x9E13D8", Offset = "0x9E13D8", VA = "0x9E13D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600120D")]
			[Address(RVA = "0x9E14B4", Offset = "0x9E14B4", VA = "0x9E14B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x9E0B88", Offset = "0x9E0B88", VA = "0x9E0B88")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x9E0B94", Offset = "0x9E0B94", VA = "0x9E0B94", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x9E0F1C", Offset = "0x9E0F1C", VA = "0x9E0F1C", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x9E1100", Offset = "0x9E1100", VA = "0x9E1100", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x9E1190", Offset = "0x9E1190", VA = "0x9E1190", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x9E1128", Offset = "0x9E1128", VA = "0x9E1128")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x9E138C", Offset = "0x9E138C", VA = "0x9E138C")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x2000349")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x170001F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600122A")]
				[Address(RVA = "0x9E3240", Offset = "0x9E3240", VA = "0x9E3240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600122C")]
				[Address(RVA = "0x9E3288", Offset = "0x9E3288", VA = "0x9E3288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001227")]
			[Address(RVA = "0x9E2DD0", Offset = "0x9E2DD0", VA = "0x9E2DD0")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6001228")]
			[Address(RVA = "0x9E3120", Offset = "0x9E3120", VA = "0x9E3120", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001229")]
			[Address(RVA = "0x9E3124", Offset = "0x9E3124", VA = "0x9E3124", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600122B")]
			[Address(RVA = "0x9E3248", Offset = "0x9E3248", VA = "0x9E3248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034A")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x40013AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x40013AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x40013AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x40013AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x170001FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001230")]
				[Address(RVA = "0x9E39A4", Offset = "0x9E39A4", VA = "0x9E39A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001232")]
				[Address(RVA = "0x9E39EC", Offset = "0x9E39EC", VA = "0x9E39EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600122D")]
			[Address(RVA = "0x9E2E60", Offset = "0x9E2E60", VA = "0x9E2E60")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x600122E")]
			[Address(RVA = "0x9E3290", Offset = "0x9E3290", VA = "0x9E3290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600122F")]
			[Address(RVA = "0x9E3294", Offset = "0x9E3294", VA = "0x9E3294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001231")]
			[Address(RVA = "0x9E39AC", Offset = "0x9E39AC", VA = "0x9E39AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Current Internal Ammo if you are keeping track of ammo yourself. Firing will deduct from this number. Reloading will cause this to equal MaxInternalAmmo.")]
		public float InternalAmmo;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[Tooltip("If true a projectile will always be used instead of a raycast")]
		[Header("Projectile Settings : ")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Amount of force to apply to the BulletCasingPrefab object")]
		public float BulletCasingForce;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Recoil : ")]
		[Tooltip("How much force to apply to the tip of the barrel")]
		public Vector3 RecoilForce;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Weapon Setup : ")]
		[Tooltip("Transform of trigger to animate rotation of")]
		public Transform TriggerTransform;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Make this active on fire. Randomize scale / rotation")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Eject this at EjectPointTransform (optional)")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Hit Effects spawned at point of impact")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("Volume to play the GunShotSound clip at. Range 0-1")]
		[Range(0f, 1f)]
		public float GunShotVolume;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Volume to play the EmptySound clip at. Range 0-1")]
		[Range(0f, 1f)]
		public float EmptySoundVolume;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Slide Configuration : ")]
		[Tooltip("How far back to move the slide on fire")]
		public float SlideDistance;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float minSlideDistance;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Inputs : ")]
		[Tooltip("Controller Input used to eject clip")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Controller Input used to release reload the weapon if ReloadMethod = InternalAmmo.")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is there currently a bullet chambered and ready to be fired")]
		public bool BulletInChamber;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("Events")]
		[Tooltip("Unity Event called when Shoot() method is successfully called")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool slideForcedBack;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected WeaponSlide ws;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool readyToShoot;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		protected bool playedEmptySound;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected IEnumerator shotRoutine;

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x9E14FC", Offset = "0x9E14FC", VA = "0x9E14FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x9E1678", Offset = "0x9E1678", VA = "0x9E1678", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x9E17B4", Offset = "0x9E17B4", VA = "0x9E17B4")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x9E18BC", Offset = "0x9E18BC", VA = "0x9E18BC")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x9E19C4", Offset = "0x9E19C4", VA = "0x9E19C4", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x9E1AD8", Offset = "0x9E1AD8", VA = "0x9E1AD8", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x9E1B60", Offset = "0x9E1B60", VA = "0x9E1B60", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x9E1C14", Offset = "0x9E1C14", VA = "0x9E1C14", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x9E2214", Offset = "0x9E2214", VA = "0x9E2214", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x9E238C", Offset = "0x9E238C", VA = "0x9E238C", Slot = "32")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x9E26D4", Offset = "0x9E26D4", VA = "0x9E26D4", Slot = "33")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x9E2834", Offset = "0x9E2834", VA = "0x9E2834", Slot = "34")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x9E285C", Offset = "0x9E285C", VA = "0x9E285C", Slot = "35")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x9E2884", Offset = "0x9E2884", VA = "0x9E2884", Slot = "36")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x9E2918", Offset = "0x9E2918", VA = "0x9E2918", Slot = "37")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x9E2A1C", Offset = "0x9E2A1C", VA = "0x9E2A1C", Slot = "38")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x9E15CC", Offset = "0x9E15CC", VA = "0x9E15CC")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x9E21C8", Offset = "0x9E21C8", VA = "0x9E21C8")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x9E2A28", Offset = "0x9E2A28", VA = "0x9E2A28")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x9E2B10", Offset = "0x9E2B10", VA = "0x9E2B10", Slot = "39")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x9E2BC4", Offset = "0x9E2BC4", VA = "0x9E2BC4", Slot = "40")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x9E2D68", Offset = "0x9E2D68", VA = "0x9E2D68", Slot = "41")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__74))]
		protected virtual IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x9E2DF8", Offset = "0x9E2DF8", VA = "0x9E2DF8", Slot = "42")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__75))]
		protected virtual IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x9E2E88", Offset = "0x9E2E88", VA = "0x9E2E88")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public enum FiringType
	{
		[Token(Token = "0x40013AF")]
		Semi,
		[Token(Token = "0x40013B0")]
		Automatic
	}
	[Token(Token = "0x200034C")]
	public enum ReloadType
	{
		[Token(Token = "0x40013B2")]
		InfiniteAmmo,
		[Token(Token = "0x40013B3")]
		ManualClip,
		[Token(Token = "0x40013B4")]
		InternalAmmo
	}
	[Token(Token = "0x200034D")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x200034E")]
		[CompilerGenerated]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x170001FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001244")]
				[Address(RVA = "0x9E457C", Offset = "0x9E457C", VA = "0x9E457C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001246")]
				[Address(RVA = "0x9E45C4", Offset = "0x9E45C4", VA = "0x9E45C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001241")]
			[Address(RVA = "0x9E4484", Offset = "0x9E4484", VA = "0x9E4484")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6001242")]
			[Address(RVA = "0x9E44CC", Offset = "0x9E44CC", VA = "0x9E44CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001243")]
			[Address(RVA = "0x9E44D0", Offset = "0x9E44D0", VA = "0x9E44D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001245")]
			[Address(RVA = "0x9E4584", Offset = "0x9E4584", VA = "0x9E4584", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x9E39F4", Offset = "0x9E39F4", VA = "0x9E39F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x9E3BB0", Offset = "0x9E3BB0", VA = "0x9E3BB0", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x9E3C68", Offset = "0x9E3C68", VA = "0x9E3C68", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x9E3D20", Offset = "0x9E3D20", VA = "0x9E3D20")]
		private void Update()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x9E3FD8", Offset = "0x9E3FD8", VA = "0x9E3FD8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x9E40B4", Offset = "0x9E40B4", VA = "0x9E40B4", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x9E414C", Offset = "0x9E414C", VA = "0x9E414C", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x9E3EB8", Offset = "0x9E3EB8", VA = "0x9E3EB8")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x9E3F80", Offset = "0x9E3F80", VA = "0x9E3F80")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x9E4388", Offset = "0x9E4388", VA = "0x9E4388", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x9E43EC", Offset = "0x9E43EC", VA = "0x9E43EC", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x9E441C", Offset = "0x9E441C", VA = "0x9E441C")]
		[IteratorStateMachine(typeof(<UnlockSlideRoutine>d__27))]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x9E4254", Offset = "0x9E4254", VA = "0x9E4254")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x9E44AC", Offset = "0x9E44AC", VA = "0x9E44AC")]
		public WeaponSlide()
		{
		}
	}
}
